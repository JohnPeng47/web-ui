{
  "reported_to": "GitLab",
  "reported_by": "joaxcar ",
  "title": "XSS in ZenTao integration affecting self hosted instances without strict CSP",
  "content": "\nSummary\nThe ZenTao issue integration (premium feature) is susceptible to an XSS attack by delivering modified API responses to GitLab.\nThis is related and similar to my report https://hackerone.com/reports/1533976 but this time affecting the ZenTao integration.\nA user can create a project and configure ZenTao to be used as an external issue tracker. ducumentation. If this is done on a premium instance the integration will add an issue list to the project displaying ZenTao issues, and clicking one of these issues will display issue details for a single ZenTao issue. The URL for a single issue looks like\nhttps://gitlab.example.com/GROUP/PROJECT/-/integrations/zentao/issues/story-1\nVisiting this page will trigger the GitLab backend to make an API request to the configured ZenTao instance like this\nhttps://zentao.example.net/api.php/v1/issues/story-1\nand the response from such a request looks like\nCode 736 Bytes\n1{\n2    \"issue\": {\n3        \"id\": \"story-1\",\n4        \"title\": \"story\",\n5        \"labels\": [ ],\n6        \"pri\": 3,\n7        \"openedDate\": \"2021-08-10T08:25:18Z\",\n8        \"openedBy\": {\n9            \"id\": 1,\n10            \"account\": \"admin\",\n11            \"realname\": \"admin\",\n12            \"avatar\": \"https://www.gravatar.com/avatar/21232f297a57a5a743894a0e4a801fc3?d=identicon&s=80\",\n13            \"url\": \"https://jihudemo.zentao.net/index.php?m=user&f=profile&userID=1\"\n14        },\n15        \"lastEditedDate\": \"2021-08-10T08:25:18Z\",\n16        \"lastEditedBy\": \"admin\",\n17        \"status\": \"opened\",\n18        \"url\": \"https://jihudemo.zentao.net/index.php?m=story&f=view&storyID=32\",\n19        \"desc\": \"\",\n20        \"assignedTo\": [],\n21        \"comments\": [ ]\n22    }\n23}\nThis response is serialized by ee/app/serializers/integrations/zentao_serializers/issue_entity.rb\nThe interesting part of this file is\nCode 60 Bytes\n1     expose :web_url do |item|\n2        item['url']\n3      end\nand also\nCode 65 Bytes\n1      expose :id do |item|\n2        sanitize(item['id'])\n3      end\nThe :web_url does not check for correctness of the URL and can thus be given a JavaScript URL such as javascript:alert(document.domain). The :id is sanitized by ruby sanitizer, but is not HTML encoded. This will open up a \"safe\" HTML injection, which we can use to make the attack easier to pull of.\nWhen viewing a ZenTao issue details page the :web_url and :id is used to create the last part of the breadcrumb links. By adding this to our API response\nCode 98 Bytes\n1{\n2   \"id\": \"<img src=# height=10000 width=10000>\",\n3   \"url\": \"javascript:alert(document.domain)\"\n4}\nThe details page will now display a giant image that on click will trigger the XSS.\nHere I use an image tag just to prove that the injection. The :id HTML injection can be customized to have the victim more prone to clicking the link.\n<image_0>\n<image_1>\nSteps to reproduce\nUsing my hosted server (see example further down for self hosting the attack):\nLog in with a user on a self hosted GitLab instance with premium subscription (call the user user1)\nCreate a new project, call it project1\nGo to https://gitlab.example.com/user1/project1/-/integrations/zentao/edit\nFill in the form. Put https://joaxcar.com in the server field. Leave the API field empty, add anything in the username and password.\nGo to https://gitlab.example.com/user1/project1/-/integrations/zentao/issues/story-1\nClick the big white square\nXSS triggered\nTo self host the API make sure to host a server that will deliver this payload with a application/json response to calls to /api.php/v1/issues/story-1\npayload\nCode 694 Bytes\n1{\n2    \"issue\": {\n3        \"id\": \"<img src=# height=10000 width=10000>\",\n4        \"title\": \"Attack\",\n5        \"labels\": [],\n6        \"pri\": 3,\n7        \"openedDate\": \"2021-08-10T08:25:18Z\",\n8        \"openedBy\": {\n9            \"id\": 1,\n10            \"account\": \"asd\",\n11            \"realname\": \"admin\",\n12            \"avatar\": \"https://www.gravatar.com/avatar/21232f297a57a5a743894a0e4a801fc3?d=identicon&s=80\",\n13            \"url\": \"https://example.com\"\n14        },\n15        \"lastEditedDate\": \"2021-08-10T08:25:18Z\",\n16        \"lastEditedBy\": \"asd\",\n17        \"status\": \"asd\",\n18        \"url\": \"javascript:alert(document.domain)\",\n19        \"desc\": \"description\",\n20        \"assignedTo\": [],\n21        \"comments\": []\n22    }\n23}\nImpact\nFull XSS on self hosted GitLab instances. A victim needs to visit the infected page and made to click a special link (can be made easy to click)\nWhat is the current bug behavior?\nZenTao issue URLs are not sanitized\nWhat is the expected correct behavior?\nJavasript URLs should be filtered\nCSP\nThis attack does not work on GitLab.com as the CSP rules block any JavaScript URL. I don't know of any bypass to this. But it does affect self-hosted instances that have not configured CSP. I calculated my CVSS score as per attacking a self-hosted instance. GitLab team can modify this according to your current treatment of these issues!\nRuby sanitation\nThe ZenTao issues uses a lot of ruby sanatize sanitization. This is strict enough to prevent any serious code injection but still allows for some HTML tags to be included where they are supposed not to be. Like in ID in this issue.\nBest regards\nJohan\nImpact\nFull XSS on self hosted GitLab instances. A victim needs to visit the infected page and made to click a special link (can be made easy to click)\n\n",
  "severity": [
    8.7,
    null
  ],
  "bounty": 13950,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Generic"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/i3opigkllsgqg3o0his6n7knquj3?response-content-disposition=attachment%3B%20filename%3D%22link.jpg%22%3B%20filename%2A%3DUTF-8%27%27link.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRFICECNA%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T015350Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDqGYTLnh5tpIOp%2BBu2Us%2BRw1i52eon3doC2lLG%2FAZ0%2BwIgHItMlaeaBdH%2FEjdYfdSK%2Fr2oJjwbxvvT1OO8FMRmxYoquwUI%2Bv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDNWECp3I%2F1QPp%2BcOYCqPBeyg5MMY1W5ewovCqDXd8gxtn%2Fc5%2FQj4HNPCx%2F71OFHgMReknz2jZjY%2B0ZjUPvyzaShcO4JP6ELP9hwmnl%2FMeNzHTMswiIjuwjx7j4qTMUjILB7e%2F94l9VKEcMAJ7o8RvJAMHCTTos0L6sMpwaHD2f6imQ9Y0sjHlFcQmy6gji%2F%2BwyY%2BshQbky5jMNE%2BfQMJRjv4PMBPDtMczy2j6DzwOLUgZ%2F4E%2FpDfY67DWHYam5qWGfIvV6T5fvytnYFIawEywnxmch2DA3lv0DioRBsLDf07t%2B9ua%2FfK7hJAz8uBNkCRY%2BSW7IBp%2BK3qQb5bsEI%2F3VzrVTFjw6z3QWOvrO6jelIrCS1UbCyMJ1vNLE1Z%2BQRo%2BWzjZkF4%2F3TqZVx6alqwnpih5d%2BiCtDMBzPtvqI2DZJY5GrrpmwNYONCjpLRQ53%2FV4kpgSZH4p%2FY8pD0HFszYiLeYPjKmrWtppeAoziHfyG5LQCSK4A06EBg0wKsZPpRsUSNYMo2FVfhULyc64%2BJf4PjBSlxl%2FYYXfBePBQG5OzgdL5T9xa%2BQcpIZkgwLbAVo%2FBlqlFG1j062dgUTsl%2FJHPgzDzkmKHzDF2E9YTqfiLiGoavR3QiS3i8ZKkjG9ht2QmTpUEl35zEZrkPEW3CCK6n92x9GRYZcjM16VPBzUK69NKo9KJLNAaZ2kKhYA7U2Y00JAwTHVl7Kk4JkIJt0%2BKx1lCahbihZgt24NwLVTzaYkm47hKXyFVRilqnQNHe%2FOIFwWwJpYZJ%2FUeG5JDDdVhGrikxDo2jPBZrexD9Rby%2F8Itez87sZ72eTgvMhy1AuIhYDQBSIxQspKnTE6DVyr2Wvysnh8rQbLpxhTdX8ttzASoPWIkpZ1L1P1yLrHow4vWHvwY6sQESAbiZRKGYCmV926h2FLIfjA7WhXV%2BdXKuHmspf1ZK9KSgfTarg9IXFB9WslSzqoeHkxX276%2FLHeXMLn8kpS8i57zAalLCHRlWVQPHcKJvCOetUj1jvp4CuslPz5Pgf%2BtQrXs0mNqHMJaB1f7kBF54kvXQqSYRkhbcxK7uZxU1TbgkLeJ6zbqxtGSin9cWcjRQN5mVcMhnXof1vKRt4FJvZhTyCRMU1LuGqi%2FYlIm95xg%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2a6e425855bce52e4d2ae52886d81477d96c3cbe8d484a5cc968fcdc792b58ac",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vsbtmntc70l8qzxqtmf5oqai65x5?response-content-disposition=attachment%3B%20filename%3D%22popup.jpg%22%3B%20filename%2A%3DUTF-8%27%27popup.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRFICECNA%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T015350Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDqGYTLnh5tpIOp%2BBu2Us%2BRw1i52eon3doC2lLG%2FAZ0%2BwIgHItMlaeaBdH%2FEjdYfdSK%2Fr2oJjwbxvvT1OO8FMRmxYoquwUI%2Bv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDNWECp3I%2F1QPp%2BcOYCqPBeyg5MMY1W5ewovCqDXd8gxtn%2Fc5%2FQj4HNPCx%2F71OFHgMReknz2jZjY%2B0ZjUPvyzaShcO4JP6ELP9hwmnl%2FMeNzHTMswiIjuwjx7j4qTMUjILB7e%2F94l9VKEcMAJ7o8RvJAMHCTTos0L6sMpwaHD2f6imQ9Y0sjHlFcQmy6gji%2F%2BwyY%2BshQbky5jMNE%2BfQMJRjv4PMBPDtMczy2j6DzwOLUgZ%2F4E%2FpDfY67DWHYam5qWGfIvV6T5fvytnYFIawEywnxmch2DA3lv0DioRBsLDf07t%2B9ua%2FfK7hJAz8uBNkCRY%2BSW7IBp%2BK3qQb5bsEI%2F3VzrVTFjw6z3QWOvrO6jelIrCS1UbCyMJ1vNLE1Z%2BQRo%2BWzjZkF4%2F3TqZVx6alqwnpih5d%2BiCtDMBzPtvqI2DZJY5GrrpmwNYONCjpLRQ53%2FV4kpgSZH4p%2FY8pD0HFszYiLeYPjKmrWtppeAoziHfyG5LQCSK4A06EBg0wKsZPpRsUSNYMo2FVfhULyc64%2BJf4PjBSlxl%2FYYXfBePBQG5OzgdL5T9xa%2BQcpIZkgwLbAVo%2FBlqlFG1j062dgUTsl%2FJHPgzDzkmKHzDF2E9YTqfiLiGoavR3QiS3i8ZKkjG9ht2QmTpUEl35zEZrkPEW3CCK6n92x9GRYZcjM16VPBzUK69NKo9KJLNAaZ2kKhYA7U2Y00JAwTHVl7Kk4JkIJt0%2BKx1lCahbihZgt24NwLVTzaYkm47hKXyFVRilqnQNHe%2FOIFwWwJpYZJ%2FUeG5JDDdVhGrikxDo2jPBZrexD9Rby%2F8Itez87sZ72eTgvMhy1AuIhYDQBSIxQspKnTE6DVyr2Wvysnh8rQbLpxhTdX8ttzASoPWIkpZ1L1P1yLrHow4vWHvwY6sQESAbiZRKGYCmV926h2FLIfjA7WhXV%2BdXKuHmspf1ZK9KSgfTarg9IXFB9WslSzqoeHkxX276%2FLHeXMLn8kpS8i57zAalLCHRlWVQPHcKJvCOetUj1jvp4CuslPz5Pgf%2BtQrXs0mNqHMJaB1f7kBF54kvXQqSYRkhbcxK7uZxU1TbgkLeJ6zbqxtGSin9cWcjRQN5mVcMhnXof1vKRt4FJvZhTyCRMU1LuGqi%2FYlIm95xg%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=90d9846ffd7dee083ebd2d92f57729fc679e08536e0bb7d48edbb781c3cb9f6b"
  },
  "disclosed_date": 1663852200,
  "report_url": "https://hackerone.com/reports/1542510",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Log in to a self-hosted GitLab instance with premium subscription and create a new project."
    ],
    [
      2,
      "Configure ZenTao integration with a malicious server URL and visit the issue details page to trigger XSS."
    ]
  ],
  "vuln_description": "The ZenTao integration in GitLab is vulnerable to XSS attacks due to unsanitized URLs in API responses, allowing attackers to inject JavaScript via crafted issue details.",
  "reason": "The vulnerability involves understanding the ZenTao integration flow, API response handling, and HTML injection techniques, but the steps to exploit are straightforward once these components are identified.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "1533976",
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The XSS vulnerability in the ZenTao integration involves manipulating API responses to inject malicious JavaScript via unsanitized URLs and HTML injection in the issue details page. The methodology described focuses on authentication and authorization testing (AuthN/AuthZ) by swapping user sessions and resource IDs, but does not specifically address XSS vulnerabilities which involve input validation and output encoding issues. Therefore, the described methodology would not detect this XSS vulnerability.",
    "is_detectable": false
  }
}