{
  "reported_to": "Node.js third-party modules",
  "reported_by": "pontus_johnson ",
  "title": "[samsung-remote] Command injection",
  "content": "\nI would like to report a command injection vulnerability in the samsung-remote npm module.\nIt allows arbitrary shell command execution through a maliciously crafted argument.\nModule\nmodule name: samsung-remote\nversion: 1.2.5\nnpm page: https://www.npmjs.com/package/samsung-remote\nModule Description\nModule for integration of Samsung SmartTV with your NodeJS application. Tested with Samsung D6000 TV.\nInspired by this topic http://forum.samygo.tv/viewtopic.php?f=12&t=1792\nModule Stats\n24 downloads in the last day\n217 downloads in the last week\n1024 downloads in the last month\nVulnerability\nVulnerability Description\nsamsung-remote does not sanitize the IP address argument, and subsequently passes it to child_process.exec(), thus allowing arbitrary shell command injection. It is not unlikely that some systems using this package will pass a user-controlled IP address to the function, thus inadvertently allowing arbitrary code execution by the user.\nSteps To Reproduce:\nInstall samsung-remote: npm install samsung-remote --save.\nCreate the following index.jsfile:\nCode 115 Bytes\n1var remote = new SamsungRemote({\n2    ip: '127.0.0.1; touch /tmp/malicious;' \n3});\n4\n5remote.isAlive(function(err) {});\nExecute node index.js\nCheck that the injected command was executed: ls /tmp/\nPatch\nCommand execution happens here:\nreturn exec(\"ping -c 1 \" + config.ip, function (error, stdout, stderr) {\nexec could be replaced by execFile, which would force developers to separate the command and its arguments.\nSupporting Material/References:\nOperating system: Debian GNU/Linux 9.5 (stretch)\nNode.js v8.11.3\nnpm v5.6.0\nWrap up\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nImpact\nArbitrary shell command execution.\n\n",
  "severity": [
    10.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Command Injection - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1535917260,
  "report_url": "https://hackerone.com/reports/394294",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install samsung-remote: npm install samsung-remote --save."
    ],
    [
      2,
      "Create the following index.js file with the malicious IP address: '127.0.0.1; touch /tmp/malicious;'"
    ],
    [
      3,
      "Execute node index.js"
    ],
    [
      4,
      "Check that the injected command was executed: ls /tmp/"
    ]
  ],
  "vuln_description": "samsung-remote does not sanitize the IP address argument, and subsequently passes it to child_process.exec(), thus allowing arbitrary shell command injection. It is not unlikely that some systems using this package will pass a user-controlled IP address to the function, thus inadvertently allowing arbitrary code execution by the user.",
  "reason": "The vulnerability involves a straightforward command injection through unsanitized input passed to a shell command. The attack is simple and does not require complex interactions or understanding of multiple components.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection through unsanitized input in the npm module 'samsung-remote', which is not related to authentication or authorization bypass. The proposed methodologies focus on AuthN/AuthZ and IDOR vulnerabilities, which are different from command injection vulnerabilities.",
    "is_detectable": false
  }
}