{
  "reported_to": "Node.js third-party modules",
  "reported_by": "becojo ",
  "title": "[flintcms] Account takeover due to blind MongoDB injection in password reset",
  "content": "\nI would like to report a privilege escalation vulnerability in flintcms.\nIt allows to reset a known user password, extract its password reset token and reset its password to then access the account.\nModule\nmodule name: flintcms\nversion: v.1.1.9\nnpm page: https://www.npmjs.com/package/flintcms\nModule Description\nFlint is a CMS built to be easy to use and super flexible. Your content needs to fit into more layouts and environments than anyone but you can plan for, so Flint enables you to make the templates you need and fill it with your content. It's a CMS that is built for those who want to fully design the front-end of their website without wanting to deal with static site generators or older content management systems (that are slow and use outdated technology).\nModule Stats\n7 downloads in the last week\nVulnerability\nVulnerability Description\nThe vulnerability is caused by the lack of user input sanitization in the route that verifies the password reset token. The value from the parameter is directly sent to the Mongoose API which allows a user to insert MongoDB query operators. These operators can be used to extract the value of the field blindly in the same manner of a blind SQL injection. In this case, the $regex operator is used to guess each character of the token from the start.\nVulnerable code:\nCode 234 Bytes\n1  router.get('/verify', async (req, res) => {\n2    const token = req.query.t\n3\n4    const user = await User.findOne({ token })\n5\n6    if (!user) {\n7      res.redirect('/admin')\n8      return\n9    }\n10\n11    res.redirect(`/admin/sp/${token}`)\n12  })\nYou can tell the different behavior when visiting these pages (assuming one of the user has reset their password):\nhttp://localhost:4000/admin/verify?t[$ne]=something redirects to http://localhost:4000/admin/sp/[object%20Object]\nWhile http://localhost:4000/admin/verify?t[$eq]=something redirects to http://localhost:4000/admin/login?p=/admin/\nTo take over an account, the following are required:\nReset the password of the targeted account (the email of the target user must be know)\nUse the password reset page to extract the token using the blind MongoDB injection\nUse the token to reset the password and log in\n\nTo lift the requirements to know the email, it is also possible to find the emails of the users because the password reset form is also vulnerable to blind MongoDB injection. In the same manner as previously, each character of the email can be guessed using the $regex MongoDB operator.\nVulnerable code:\nCode 245 Bytes\n1  router.post('/forgotpassword', async (req, res) => {\n2    const { email } = req.body\n3    const user = await User.findOne({ email })\n4\n5    if (!user) {\n6      res.status(400).end('There is no user with that email.')\n7      return\n8    }\n9    // [...]\nSteps To Reproduce:\nFollow the install guide https://flintcms.co/docs/installation/\nCreate the admin user at http://localhost:4000/admin/install\nLog out\nProceed to reset the password of the admin. Let's say the email configured was admin@localhost.com\nRun the provided Python script\nVisit the reset URL that the script finds\nReset the user password\nYou are now logged in\nPatch\nThe request parameters should be converted to string before being sent to the Mongoose API. Adding .toString() to the parameters should be enough to prevent objects being passed to Mongoose. For example:\nCode 95 Bytes\n1    const { email } = req.body\n2    const user = await User.findOne({ email: email.toString() })\nCode 40 Bytes\n1    const token = req.query.t.toString()\nFurther sanitization should be added to other endpoints.\nSupporting Material/References:\nUbuntu 16.04.3 LTS\nv8.4.0\n5.3.0\nFor the script: Python 2.7.12 and the requests package\nWrap up\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nImpact\nAn attacker could take over the website, delete data or server malicious content.\n\n",
  "severity": [
    9.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Privilege Escalation"
  ],
  "screenshots": {},
  "disclosed_date": 1534357020,
  "report_url": "https://hackerone.com/reports/386807",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Follow the installation guide at https://flintcms.co/docs/installation/ to set up FlintCMS."
    ],
    [
      2,
      "Create an admin user at http://localhost:4000/admin/install and log out."
    ],
    [
      3,
      "Proceed to reset the password of the admin user by navigating to the password reset page and entering the admin's email (e.g., admin@localhost.com)."
    ],
    [
      4,
      "Use a Python script to exploit the blind MongoDB injection in the password reset token verification endpoint to extract the token."
    ],
    [
      5,
      "Visit the reset URL found by the script and reset the user's password."
    ],
    [
      6,
      "Log in with the new password to gain access to the admin account."
    ]
  ],
  "vuln_description": "The vulnerability is a blind MongoDB injection in FlintCMS that allows an attacker to reset a known user's password by extracting the password reset token using MongoDB query operators like $regex. The lack of input sanitization in the token verification and email lookup endpoints enables this attack.",
  "reason": "The attack involves understanding and exploiting a blind MongoDB injection, which requires knowledge of MongoDB query operators and how to use them to extract data character by character. However, the vulnerability itself is straightforward once the injection point is identified, and the steps to exploit it are linear and do not involve complex interactions or state manipulations.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "idor_detectable": false,
    "authnz_byppass_detectable": true
  }
}