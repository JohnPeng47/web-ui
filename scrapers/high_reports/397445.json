{
  "reported_to": "Node.js third-party modules",
  "reported_by": "becojo ",
  "title": "[express-cart] Customer and admin email enumeration through MongoDB injection",
  "content": "\nI would like to report an injection in express-cart\nIt allows to enumerate the email address of the customers and the administrators.\nModule\nmodule name: express-cart\nversion: 1.1.7\nnpm page: https://www.npmjs.com/package/express-cart\nModule Description\nexpressCart is a fully functional shopping cart built in Node.js (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.\nModule Stats\n31 downloads in the last week\nVulnerability\nVulnerability Description\nThe vulnerability is caused by the lack of user input sanitization in the login handlers. In both cases, the customer login and the admin login, parameters from the JSON body are sent directly into the MongoDB query which allows to insert operators. These operators can be used to extract the value of the field blindly in the same manner of a blind SQL injection. In this case, the $regex operator is used to guess each character of the token from the start.\nSteps To Reproduce:\nUse MongoDB $regex operator to test if each characters of the emails in the database.\nThe provided Python script exploits the customer login to find all the customer emails in the database. Some recursion is used to make sure all of the fields\nThe attached screenshot is the customer list currently in my database. The output of the script is the following:\nCode 91 Bytes\n1$ python exploit.py \n2alan.k@example.com\n3alice.r@hotmail.com\n4ben76543@gmail.com\n5bob@test.com\nPatch\nEnsure the parameters are indeed strings before doing a MongoDB request. There are multiple ways this could be achieved. Using toString on the parameters is good enough.\nCode 94 Bytes\n1db.customers.findOne({email: req.body.loginEmail}, (err, customer) => { // eslint-disable-line\nbecomes\nCode 105 Bytes\n1db.customers.findOne({email: req.body.loginEmail.toString()}, (err, customer) => { // eslint-disable-line\nWhile a user can still trigger an exception by replacing toString with something else than a function, it effectively mitigates the vulnerability.\nSupporting Material/References:\nOS: Ubuntu 16.04.3 LTS\nNode.js version: 8.11.1\nFor the script: Python 2.7.12 and the requests package\nWrap up\nI contacted the maintainer to let them know: No\nI opened an issue in the related repository: No\nImpact\nAdministrator emails could be used for phishing attemps and spam. Customers emails could be used by an adversary to deliver spam, steal customers and more. In this GDPR era, leaking customer emails is not very desirable.\n\n",
  "severity": [
    8.2,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1536634680,
  "report_url": "https://hackerone.com/reports/397445",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify the login endpoint for customers or administrators in express-cart"
    ],
    [
      2,
      "Send a crafted request with a MongoDB $regex operator in the email field to test for valid email addresses"
    ]
  ],
  "vuln_description": "The vulnerability allows for email enumeration of customers and administrators due to lack of input sanitization in MongoDB queries. Attackers can use the $regex operator to perform blind injections and extract email addresses from the database.",
  "reason": "The attack involves straightforward MongoDB injection using common operators like $regex. While it requires knowledge of MongoDB query syntax, the technique is well-documented and similar to SQL injection attacks, making it relatively easy to discover and exploit.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves MongoDB injection through unsanitized input in login handlers, which allows for email enumeration. This is not directly related to the proposed methodologies for detecting IDOR or AuthN/AuthZ bypass vulnerabilities, as it does not involve swapping user sessions or resource IDs to test authorization boundaries. Instead, it exploits improper input handling in database queries.",
    "is_detectable": false
  }
}