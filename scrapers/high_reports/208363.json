{
  "reported_to": "shopify-scripts",
  "reported_by": "minhrau ",
  "title": "Memory corrouption in mrb_gc_mark",
  "content": "\nThe memory corruption in mrb_gc_mark function can lead to code execution or at least DoS on mruby.\nPoC attached.\nCrash debug\nmr@minhrau ~ $ ./mrubylatest/mruby/build/bench/bin/mruby ./mruby/fuzz03/crashes/mrb_gc_mark.rb\nReading symbols from ./mrubylatest/mruby/build/bench/bin/mruby...done.\n(gdb) r ./mruby/fuzz03/crashes/mrb_gc_mark.rb\nStarting program: /home/minhrau/mrubylatest/mruby/build/bench/bin/mruby ./mruby/fuzz03/crashes/mrb_gc_mark.rb\n{:r=>[\"h1MuXist\", \"kenea\", \"mini[g\", \"\\377\\377\\365\"]}\n---snip---\nProgram received signal SIGSEGV, Segmentation fault.\nmrb_gc_mark (obj=0x4b563330305c3035, mrb=0x69f010) at /home/minhrau/mrubylatest/mruby/src/gc.c:696\n696 if (!is_white(obj)) return;\n(gdb) p obj\n$1 = (struct RBasic *) 0x4b563330305c3035\n(gdb) x/i $rip\n=> 0x4185fe <incremental_gc+78>: movzbl 0x1(%rax),%edx\n(gdb) i r\nrax 0x4b563330305c3035 5428582682904506421\nrbx 0x7422a0 7611040\nrcx 0x0 0\nrdx 0xffffffffffffffff -1\nrsi 0x69f0e8 6942952\nrdi 0x69f010 6942736\nrbp 0xffffffffffffffff 0xffffffffffffffff\nrsp 0x7fffffffdc90 0x7fffffffdc90\nr8 0x4 4\nr9 0x6b2660 7022176\nr10 0x6b2650 7022160\nr11 0x7ffff73ea760 140737341466464\nr12 0x69f010 6942736\nr13 0x69f0e8 6942952\nr14 0x0 0\nr15 0x69f010 6942736\nrip 0x4185fe 0x4185fe <incremental_gc+78>\neflags 0x10206 [ PF IF RF ]\ncs 0x33 51\nss 0x2b 43\nds 0x0 0\nes 0x0 0\nfs 0x0 0\ngs 0x0 0\n(gdb)\nBacktrace\n(gdb) bt\n#0 mrb_gc_mark (obj=0x4b563330305c3035, mrb=0x69f010) at /home/minhrau/mrubylatest/mruby/src/gc.c:696\n#1 gc_mark_children (gc=0x69f0e8, obj=<optimized out>, mrb=0x69f010) at /home/minhrau/mrubylatest/mruby/src/gc.c:600\n#2 gc_gray_mark (obj=<optimized out>, gc=0x69f0e8, mrb=0x69f010) at /home/minhrau/mrubylatest/mruby/src/gc.c:887\n#3 incremental_marking_phase (limit=<optimized out>, gc=<optimized out>, mrb=<optimized out>) at /home/minhrau/mrubylatest/mruby/src/gc.c:982\n#4 incremental_gc (mrb=mrb@entry=0x69f010, gc=gc@entry=0x69f0e8, limit=limit@entry=18446744073709551615) at /home/minhrau/mrubylatest/mruby/src/gc.c:1086\n#5 0x000000000041988a in incremental_gc (limit=18446744073709551615, gc=0x69f0e8, mrb=0x69f010) at /home/minhrau/mrubylatest/mruby/src/gc.c:1081\n#6 incremental_gc_until (to_state=<optimized out>, gc=<optimized out>, mrb=<optimized out>) at /home/minhrau/mrubylatest/mruby/src/gc.c:1111\n#7 mrb_incremental_gc (mrb=mrb@entry=0x69f010) at /home/minhrau/mrubylatest/mruby/src/gc.c:1162\n#8 0x0000000000419dc0 in mrb_obj_alloc (mrb=mrb@entry=0x69f010, ttype=ttype@entry=MRB_TT_STRING, cls=0x6a94e0) at /home/minhrau/mrubylatest/mruby/src/gc.c:507\n#9 0x0000000000424841 in str_new (p=0x0, len=0, mrb=0x69f010) at /home/minhrau/mrubylatest/mruby/src/string.c:59\n#10 mrb_str_dup (mrb=mrb@entry=0x69f010, str=...) at /home/minhrau/mrubylatest/mruby/src/string.c:1069\n#11 0x00000000004439c3 in mrb_vm_exec (mrb=mrb@entry=0x69f010, proc=<optimized out>, proc@entry=0x6e4fa0, pc=<optimized out>) at /home/minhrau/mrubylatest/mruby/src/vm.c:2317\n#12 0x0000000000446e35 in mrb_vm_run (mrb=0x69f010, proc=0x6e4fa0, self=..., stack_keep=<optimized out>) at /home/minhrau/mrubylatest/mruby/src/vm.c:815\n#13 0x0000000000449331 in mrb_top_run (mrb=mrb@entry=0x69f010, proc=proc@entry=0x6e4fa0, self=..., stack_keep=stack_keep@entry=0) at /home/minhrau/mrubylatest/mruby/src/vm.c:2569\n#14 0x000000000043f87c in mrb_load_exec (mrb=mrb@entry=0x69f010, p=p@entry=0x6eb9c0, c=c@entry=0x6ea860) at /home/minhrau/mrubylatest/mruby/mrbgems/mruby-compiler/core/parse.y:5755\n#15 0x00000000004415d5 in mrb_load_file_cxt (mrb=mrb@entry=0x69f010, f=0x6eb590, c=c@entry=0x6ea860) at /home/minhrau/mrubylatest/mruby/mrbgems/mruby-compiler/core/parse.y:5764\n#16 0x00000000004020a5 in main (argc=<optimized out>, argv=<optimized out>) at /home/minhrau/mrubylatest/mruby/mrbgems/mruby-bin-mruby/tools/mruby/mruby.c:232\n\n",
  "severity": [
    7.3,
    null
  ],
  "bounty": 100,
  "weaknesses": [
    "Memory Corruption - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1492411320,
  "report_url": "https://hackerone.com/reports/208363",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Run the provided Ruby script with mruby: ./mruby/build/bench/bin/mruby ./mruby/fuzz03/crashes/mrb_gc_mark.rb"
    ],
    [
      2,
      "Observe the segmentation fault in the mrb_gc_mark function during garbage collection"
    ]
  ],
  "vuln_description": "The vulnerability is a memory corruption issue in the mrb_gc_mark function of mruby's garbage collector. When processing certain malformed Ruby objects, the function attempts to access an invalid memory address (0x4b563330305c3035 in the example), leading to a segmentation fault. This could potentially be exploited for denial of service or possibly code execution.",
  "reason": "The vulnerability requires understanding of mruby's garbage collection internals and memory management, but the actual triggering condition appears to be straightforward once the vulnerable function is identified. The attack doesn't involve complex state manipulation or multiple interacting components - it's a direct memory corruption through a single malformed input.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}