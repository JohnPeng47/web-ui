{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "bugbasher ",
  "title": "Tcpdump before 4.9.3 has a buffer over-read in print-802_11.c (CVE-2018-16227)",
  "content": "\nVersions of tcpdump before 4.9.3 are vulnerable to a buffer over-read in print-802_11.c. This vulnerability was disclosed to the tcpdump maintainers and was recently patched in version 4.9.3 and disclosed as (CVE-2018-16227).\nI was credited with finding and disclosing this vulnerability: https://www.tcpdump.org/public-cve-list.txt\nCode 128 Bytes\n1CVE-2018-16227,tcpdump,ieee802.11_meshhdr-oobr.pcap,\"Ryan Ackroyd\",2018/05/26,Y,4846b3c5d0a850e860baf4f07340495d29837d09,4.9.3,,\nThis vulnerability was found and tested on tcpdump 4.9.2 after compiling tcpdump with Address Sanitizer (ASAN) support and fuzzing tcpdump with mutated packets, I have attached a working test-case as a Proof of Concept to this report named \"fuzzer06:id:000021,sig:11,src:008627,op:havoc,rep:2\".\nThis vulnerability can be triggered using the following command:\nCode 81 Bytes\n1tcpdump -e -vvvv -H -u -nn -r fuzzer06:id:000021,sig:11,src:008627,op:havoc,rep:2\nThe above command produces the following output, ASAN marks this as a \"heap-buffer-overflow \":\nCode 2.82 KiB\n1reading from file fuzzer06:id:000021,sig:11,src:008627,op:havoc,rep:2, link-type IEEE802_11_RADIO (802.11 plus radiotap header)\n212:05:07.276297 15738588889088us tsft 4096 MHz 11n 19dBm signal antenna 20 52.0 Mb/s MCS 25 20 MHz long GI LDPC FEC More Data 44us BSSID:20:7c:8f:50:3f:3a DA:68:a3:c4:03:46:da SA:20:7c:8f:50:3f:3a ReAssoc Request[|802.11]\n3=================================================================\n4==5793==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf4a01801 at pc 0x08090ae9 bp 0xffc10aa8 sp 0xffc10a98\n5READ of size 1 at 0xf4a01801 thread T0\n6    #0 0x8090ae8 in ctrl_body_print print-802_11.c:1676\n7    #1 0x8090ae8 in ieee802_11_print print-802_11.c:2092\n8    #2 0x809297b in ieee802_11_radio_print print-802_11.c:3257\n9    #3 0x809297b in ieee802_11_radio_if_print print-802_11.c:3352\n10    #4 0x80844b4 in pretty_print_packet print.c:332\n11    #5 0x8065ce8 in print_packet tcpdump.c:2497\n12    #6 0x83fcb6a in pcap_offline_read savefile.c:527\n13    #7 0x8346bfe in pcap_loop pcap.c:890\n14    #8 0x805afb8 in main tcpdump.c:2000\n15    #9 0xf700a636 in __libc_start_main (/lib/i386-linux-gnu/libc.so.6+0x18636)\n16    #10 0x806226a  (/home/user/targets/builds33/tcpdump-4.9.2/tcpdump+0x806226a)\n17\n180xf4a01801 is located 1 bytes to the right of 64-byte region [0xf4a017c0,0xf4a01800)\n19allocated by thread T0 here:\n20    #0 0xf723edee in malloc (/usr/lib32/libasan.so.2+0x96dee)\n21    #1 0x8400752 in pcap_check_header sf-pcap.c:401\n22\n23SUMMARY: AddressSanitizer: heap-buffer-overflow print-802_11.c:1676 ctrl_body_print\n24Shadow bytes around the buggy address:\n25  0x3e9402b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n26  0x3e9402c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n27  0x3e9402d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n28  0x3e9402e0: fa fa fa fa fa fa fa fa fa fa fa fa fd fd fd fd\n29  0x3e9402f0: fd fd fd fd fa fa fa fa 00 00 00 00 00 00 00 00\n30=>0x3e940300:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n31  0x3e940310: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n32  0x3e940320: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n33  0x3e940330: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n34  0x3e940340: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n35  0x3e940350: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n36Shadow byte legend (one shadow byte represents 8 application bytes):\n37  Addressable:           00\n38  Partially addressable: 01 02 03 04 05 06 07 \n39  Heap left redzone:       fa\n40  Heap right redzone:      fb\n41  Freed heap region:       fd\n42  Stack left redzone:      f1\n43  Stack mid redzone:       f2\n44  Stack right redzone:     f3\n45  Stack partial redzone:   f4\n46  Stack after return:      f5\n47  Stack use after scope:   f8\n48  Global redzone:          f9\n49  Global init order:       f6\n50  Poisoned by user:        f7\n51  Container overflow:      fc\n52  Array cookie:            ac\n53  Intra object redzone:    bb\n54  ASan internal:           fe\n55==5793==ABORTING\nMore information about this vulnerability can be found in the following locations:\nNVD: https://nvd.nist.gov/vuln/detail/CVE-2018-16227\nCVE details: https://www.cvedetails.com/cve/CVE-2018-16227/\nImpact\nThis vulnerability can lead to significant information disclosure and allow an attacker to modify system files remotely, across a network with no interaction from the victim.\nCVSS v3.1 Severity and Metrics:\nBase Score: 9.8 CRITICAL\nVector: AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H (V3.1 legend)\nImpact Score: 5.9\nExploitability Score: 3.9\nAttack Vector (AV): Network\nAttack Complexity (AC): Low\nPrivileges Required (PR): None\nUser Interaction (UI): None\nScope (S): Unchanged\nConfidentiality (C): High\nIntegrity (I): High\nAvailability (A): High\n\n",
  "severity": [
    9.8,
    null
  ],
  "bounty": 500,
  "weaknesses": [
    "Out-of-bounds Read"
  ],
  "screenshots": {},
  "disclosed_date": 1581647220,
  "report_url": "https://hackerone.com/reports/724243",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Compile tcpdump 4.9.2 with Address Sanitizer (ASAN) support"
    ],
    [
      2,
      "Run tcpdump with the command: tcpdump -e -vvvv -H -u -nn -r fuzzer06:id:000021,sig:11,src:008627,op:havoc,rep:2"
    ]
  ],
  "vuln_description": "A buffer over-read vulnerability in print-802_11.c in tcpdump before 4.9.3 allows an attacker to cause a heap-buffer-overflow when processing specially crafted 802.11 packets, potentially leading to information disclosure or remote code execution.",
  "reason": "The vulnerability was discovered through fuzzing with mutated packets, which is a straightforward but effective method for finding memory corruption issues. The attack does not involve multiple components or complex interactions, and the vulnerability is a classic buffer over-read that follows common patterns seen in many applications.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}