{
  "reported_to": "Rocket.Chat",
  "reported_by": "gronke ",
  "title": "Pinning leaks message content",
  "content": "\nSummary: Improper input validation allows pinning of arbitrary messages (in private channels), leaking the message content back to the sender.\nDescription:\nMessage pinning was found to lack input data validation, so that arbitrary messages can be pinned and leaked back to an unauthorized client.\nCode 567 Bytes\n1Meteor.methods({\n2\tpinMessage(message) {\n3\t\tif (!Meteor.userId()) {\n4\t\t\ttoastr.error(TAPi18n.__('error-not-authorized'));\n5\t\t\treturn false;\n6\t\t}\n7\t\tif (!settings.get('Message_AllowPinning')) {\n8\t\t\ttoastr.error(TAPi18n.__('pinning-not-allowed'));\n9\t\t\treturn false;\n10\t\t}\n11\t\tif (Subscriptions.findOne({ rid: message.rid }) == null) {\n12\t\t\ttoastr.error(TAPi18n.__('error-pinning-message'));\n13\t\t\treturn false;\n14\t\t}\n15\t\ttoastr.success(TAPi18n.__('Message_has_been_pinned'));\n16\t\treturn ChatMessage.update({\n17\t\t\t_id: message._id,\n18\t\t}, {\n19\t\t\t$set: {\n20\t\t\t\tpinned: true,\n21\t\t\t},\n22\t\t});\n23\t},\n24\t// ...\n25});\nThe Meteor.method pinMessage accepts a message object as input with _id and rid keys.\nWith a known Message ID and any Room ID that is accessible by the attacker, the check room subscriptions can be circumvented, because the target chat message is not validated to be in the same room as validated with Subscriptions.findOne({ rid: message.rid }.\nIn addition to that the pinMessage function accepts JavaScript objects that are then directly forwarded to the MongoDB model, allowing attackers to use regular expressions to improve guessing of message IDs.\nCode 122 Bytes\n1Meteor.call(\"pinMessage\", {\n2  _id: { $regex: /.*/ },\n3  rid: \"<ACCESSIBLE_ROOM_ID>\" \n4}, (...args) => console.log(...args));\nThe Meteor.call return data contains the message content, so that an arbitrary user with access to any channel can leak individual messages outside of their accessible channels.\nReleases Affected:\n3.9.10 / develop\nSteps To Reproduce (from initial installation to vulnerability):\n(Add details for how we can reproduce the issue)\nOpen Rocket.Chat\nFind any accessible Room ID (for instance from channel avatar URL)\nOpen Web Inspector\nExecute pinMessage Meteor.call and receive message content in return callback\nSuggested mitigation\nCheck message object data types\nQuery the target rid along with the updated message _id.\nCode 1.72 KiB\ndiff --git a/app/message-pin/client/pinMessage.js b/app/message-pin/client/pinMessage.js\nindex 9fbc2f778..c360c5d9c 100644\n--- a/app/message-pin/client/pinMessage.js\n+++ b/app/message-pin/client/pinMessage.js\n@@ -1,4 +1,5 @@\n import { Meteor } from 'meteor/meteor';\n+import { check } from 'meteor/check';\n import toastr from 'toastr';\n import { TAPi18n } from 'meteor/rocketchat:tap-i18n';\n \n@@ -7,6 +8,8 @@ import { ChatMessage, Subscriptions } from '../../models';\n \n Meteor.methods({\n        pinMessage(message) {\n+               check(message._id, String);\n+               check(message.rid, String);\n                if (!Meteor.userId()) {\n                        toastr.error(TAPi18n.__('error-not-authorized'));\n                        return false;\n@@ -22,6 +25,7 @@ Meteor.methods({\n                toastr.success(TAPi18n.__('Message_has_been_pinned'));\n                return ChatMessage.update({\n                        _id: message._id,\n+                       rid: message.rid\n                }, {\n                        $set: {\n                                pinned: true,\n@@ -29,6 +33,8 @@ Meteor.methods({\n                });\n        },\n        unpinMessage(message) {\n+               check(message._id, String);\n+               check(message.rid, String);\n                if (!Meteor.userId()) {\n                        toastr.error(TAPi18n.__('error-not-authorized'));\n                        return false;\n@@ -44,6 +50,7 @@ Meteor.methods({\n                toastr.success(TAPi18n.__('Message_has_been_unpinned'));\n                return ChatMessage.update({\n                        _id: message._id,\n+                       rid: message.rid\n                }, {\n                        $set: {\n                                pinned: false,\nImpact\nContent of arbitrary (private) messages can be leaked by any client with access to at least one room.\n\n",
  "severity": [
    8.5,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Information Disclosure"
  ],
  "screenshots": {},
  "disclosed_date": 1723341180,
  "report_url": "https://hackerone.com/reports/1062538",
  "vuln_category": "WEB_APP",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Open Rocket.Chat and find an accessible Room ID (e.g., from channel avatar URL)"
    ],
    [
      2,
      "Execute pinMessage Meteor.call with a crafted message object containing a regex for _id and the accessible Room ID, then observe the leaked message content in the callback"
    ]
  ],
  "vuln_description": "The vulnerability allows an attacker to pin arbitrary messages in private channels by exploiting improper input validation in the pinMessage method. This leaks the content of messages back to the attacker, even if they are not authorized to view those messages.",
  "reason": "The vulnerability involves understanding the pinMessage method's lack of input validation and the ability to use regex in MongoDB queries. However, the steps to exploit it are straightforward once these weaknesses are identified.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}