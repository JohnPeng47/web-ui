{
  "reported_to": "Zenly",
  "reported_by": "yetanotherhacker ",
  "title": "Account Takeover via SMS Authentication Flow ",
  "content": "\nSummary:\nDuring the authentication flow, an SMS is sent to the user in order to validate the session and proceed to the user account. The way Zenly API handles this flow is by:\nCalling the /SessionCreate endpoint with the mobile phone number of the user.\nA session for the user is created and a session token is returned, but no operations with this session are possible until the verification is complete.\nAn SMS message is sent to the user, containing a verification code.\nCalling the /SessionVerify endpoint with both the session token and the verification code received by SMS.\nOnce this request is successfully completed, the session token becomes valid and the user is now logged in. After the first call to /SessionCreate, subsequent calls will return the same session token, until a call to /SessionVerify is made with a valid verification code.\nSteps To Reproduce:\n<image_0>\nSuggested Mitigation:\nIn order to mitigate this issue, the following steps could be taken:\nSession tokens should be unique for each call to /SessionCreate.\nA new SMS code should be sent on every call to /SessionCreate.\nPrevious SMS codes should be invalidated once a new one is sent.\nApply rate-limiting to both /SessionCreate and /SessionVerify endpoints.\nImpact\nAn attacker can take over a user account by abusing the /SessionCreate endpoint, which will consistently return the same session token (although not yet valid) for the same user. Once the legitimate user validates the SMS code for that session token, the session will become valid for both the legitimate user and the attacker.\nThe main point of this issue is that the attacker needs to obtain a session token before the legitimate user calls the /SessionVerify endpoint. This can be done either before or after the legitimate user calls the /SessionCreate endpoint.\nAllowing both the legitimate user and an attacker to have the same session token will give an advantage to the attacker. The verification code sent through SMS will remain valid for the same amount of time that the session token is valid, and it will not be regenerated within that time period, meaning that if the legitimate user inputs this code in the application (triggering a call to /SessionVerify), the session token that both the legitimate user and the attacker hold will become valid. This means that the attacker now has a valid session for the account of the legitimate user, even though the attacker never knew the verification code.\nOn the other hand, even if the attacker wasn\u2019t able to obtain the session token (through a call to /SessionCreate) before the legitimate user, this attack is still possible while the legitimate user doesn\u2019t input the correct verification code in the application, although this scenario would be less likely since the time window for carrying out this attack can be rather short.\nOnce the attacker has a valid session for the account of the legitimate user, they can access their location, notifications, conversations, and friends\u2019 information just like the legitimate user could.\n\n",
  "severity": "[",
  "bounty": 50,
  "weaknesses": "[",
  "screenshots": "{",
  "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/6yp9j1c7uykpw447bn55wldwsllh?response-content-disposition=attachment%3B%20filename%3D%22Picture7.png%22%3B%20filename%2A%3DUTF-8%27%27Picture7.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ7HWJC6SU%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T164513Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDhbMcq1Fv8%2BfamXddo17ycdjXZTiuN0HPjKq8c%2BtZiYAIgYgd48utOZpjzKaiEwewPERqBOANsG80M9betqMCHdhgqsgUIFRADGgwwMTM2MTkyNzQ4NDkiDPZCNrj1UPAt81XVlCqPBeiQCAjyqrYdJlSCevmMSL1hKubtxBIdLGQSGEFs6x2p2ZHhmShW7TQKgdflhlrgEJDP7VkuY1i48xUEHOnWW0dVKqgbwNC%2FQUrF2SNS5c5Jpdf%2Fx8bUcwAjbALmiqs3zppXODVunHAyfHsevUlbfiof56ro6bmvt8KL3N%2BOzGRYdEUOp92jzH78Z%2FZwdUXeBoEWxdC6ps3g2C0xeUZQf3NKGN6o6tYJFjFQA7uptjzAlfSV5NGQFHK45QPgwdPGUhxNy76JVRRIPCh%2FtmL2lWTJQ6Hc0toc2V5fWWu2kx0SkTso0HtyKRw1stV8HVNIZTn642rpDqw5zMh84DA%2BJwVCTk%2BrtENw3imEanzH%2BNUzlDkgdlLKNzduj0oW3Pl1VDVrcaxV18oCr2r0halWewzFp1ScHQrOyR8mtemefpMGeCKRjWwuw0fuWpcTwTa7Pgr%2FOOiIzvQKMd9rbCmG%2Fdx%2BS6xmQr8xrv%2BnCah1LjBwdrVh9cXXW8Nu2NylhrMp%2Big1KUoP8E%2BBgp7dsDEAtKhX1a5JXkl5TvdcWL2vaKbwaExTWb3MCktdi8IegK9QMTwRKH6NxlD%2B%2BkN%2FvNxUODSB%2B4GmPw8tdj5jBJjOFMdvmcvhfiRqVLF5bcbpZSLN2I0JCLzLFUPN9XBdW6PIFJPm%2BJeRZfStjLCdiBqjXzsFeibq8lVr0ZS6cGWE4ioToaA0ojaqXvPrKrYxmHAbD7AStFwEsbR6kEdc%2BJDtJ4S%2FUNkklZmFanDjG%2FMVvTr%2Fm0bHvG2YtMSniqnsB8QDcIN6dgp05APPL2JW%2FRb7lMta21g%2FXm8vLMi99Ejb9i%2FNQsRkLeawSNc76tyjul39HkBYC7%2BS17cULGUDdGNhUvMw5K%2BKvwY6sQFf%2B2q6xZ3lM3cUXbbvXp%2BMCg9fuX7OgiuirGnKMVWIHm2GEebzza0iypSe%2FvN%2FO3BbVutfYV%2BV7nlSHRcbUJLy%2F43DM0kYtH5M5OwiHGk9n0exRbBxvfeYAMX4Ic7GwyukZV08XkaTgFof9sRmTf3G1N1AmqMPkqcJwNzavpuJrmIpVCEPjwDn202dH3Cczg3e9Zy27voov98Mt8MQXiL6ayjRMFsrukN%2Ft%2FgrPUgxDHY%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a7058ed4a1b90cd6046bf5006657a85f6f643d7576b3227d9c02f31a3800ebd9",
  "disclosed_date": 1642000080,
  "report_url": "https://hackerone.com/reports/1245762",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": "[",
  "vuln_description": "An attacker can take over a user account by obtaining a session token before the legitimate user validates it via SMS. Once the user validates the session, the attacker's session token also becomes valid, granting unauthorized access to the user's account.",
  "reason": "The vulnerability involves understanding the session token handling and SMS verification flow, but the attack itself is straightforward once these components are identified. The interaction between the session token and SMS verification is non-obvious but not highly complex.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "injection_classification": "}"
}