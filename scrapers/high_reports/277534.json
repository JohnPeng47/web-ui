{
  "reported_to": "Ian Dunn",
  "reported_by": "whitehatter ",
  "title": "Timing Attack in Google Authenticator - Per User Prompt",
  "content": "\nGoogle Authenticator - Per User Prompt contains a timing attack vulnerability in how it validates the application password for a user account.\nCode 210 Bytes\n1if ( sha1( $attempted_password_plaintext ) === $valid_password_hash || wp_check_password( $attempted_password_plaintext, $valid_password_hash ) ) {\n2\t$this->is_using_application_password = true;\n3\treturn $user;\n4}\nwp-content/plugins/google-authenticator-per-user-prompt/google-authenticator-per-user-prompt.php\nAs the above code runs on the authenticate hook, and uses a strict equality check, it's possible to brute force an application password using a timing attack and gain access to the account, without needing the real password or even a valid OTP token.\nThe plugin adds two authenticate hooks, one for the above app password check, then a second that does the OTP validation stuff, but only if the not using an app password. This means that we only need the app password to login, which we can brute force via timing attack.\nCode 154 Bytes\n1if ( 'enabled' == trim( get_user_option( 'googleauthenticator_enabled', $user->ID ) ) && ! $this->is_using_application_password ) {\n2    // ... OTP stuff\n3}\nThe correct way to check the app password is to use hash_equals(), which is safe from timing attacks - https://secure.php.net/manual/en/function.hash-equals.php\nExample:\nCode 88 Bytes\n1if ( hash_equals( sha1( $attempted_password_plaintext ), $valid_password_hash ) || ... {\nIt's worth noting that hash_equals() is already in use in Google_Authenticator_Per_User_Prompt::verify_login_nonce().\nAll accounts that have an app password enabled (which is not by default) are vulnerable to takeover using this method.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 25,
  "weaknesses": [
    "Cryptographic Issues - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1509251700,
  "report_url": "https://hackerone.com/reports/277534",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Identify a WordPress site using the 'Google Authenticator - Per User Prompt' plugin with application passwords enabled for some users."
    ],
    [
      2,
      "Exploit the timing attack by repeatedly sending password attempts and measuring response times to brute force the application password."
    ]
  ],
  "vuln_description": "The vulnerability is a timing attack in the 'Google Authenticator - Per User Prompt' plugin where the application password validation can be exploited due to the use of a strict equality check (===) instead of hash_equals(). This allows an attacker to brute force the application password by analyzing response times, bypassing the need for the actual password or OTP token.",
  "reason": "The attack involves understanding the plugin's authentication flow and the timing attack vector, but the components and interactions are straightforward once identified. The main complexity lies in recognizing the use of a non-constant time comparison for password validation.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}