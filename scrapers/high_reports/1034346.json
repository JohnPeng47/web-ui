{
  "reported_to": "HackerOne",
  "reported_by": "jobert ",
  "title": "Security@ email forwarding and Embedded Submission drafts can be used to obtain copy of deleted attachments from other HackerOne users",
  "content": "\nHackerOne has a number of ways for hackers to submit security vulnerabilities to a program, two of which are through an embedded submission form and through security@ email forwarding. These two features can be exploited to update a report draft created through security@ email forwarding that does not belong to the attacker. In addition to that, the attacker can exploit these features to obtain copies of orphaned platform attachments that were uploaded through an embedded submission form and don't belong to the attacker.\nSteps to reproduce\nThe exploit consists of chaining two vulnerabilities. The first one is an oversight in the access control of report drafts created and updated through an embedded submission form. To reproduce this first vulnerability, a victim will have to send an email that forwards all emails to a HackerOne inbox. An example of such an email address is security@hackerone.com, which forwards emails to our own program. When someone sends an email to this address, they'd receive an email similar to this one:\n<image_0>\nIn the backend, this essentially does two things: it creates a ReportDraft object and a corresponding Invitation object. The email above contains the secret invitation token for the user to get access to the report draft. As long as the invitation is not accepted, the ReportDraft has its reporter_id and tracer attributes set to NULL. When a user would accept the invite, the reporter_id attribute would be overwritten with the user's ID who accepted the invitation. For now, let's not accept the invite and dive into the inner workings of embedded submission forms.\nSimilar to security@ email forwarding, embedded submission forms allow anonymous users to create a ReportDraft object in the backend. This object contains the current state of the embedded submission form to avoid data loss in case the user happens to close their window. To avoid unauthorized access to other anonymous users writing a report at the same time, the frontend generates a UUID to keep track of which attachments belong to the draft. The ReportDraft stores this UUID in the tracer attribute. Only when the user knows the UUID of this draft will it be able to update the draft. Every request triggered for an unauthenticated session in an embedded submission form will submit this UUID for the backend to authorize the user. This is where the first vulnerability is found.\nThe Teams::EmbeddedSubmissionsController implements a number of actions, which one of which is draft_sync:\nCode 478 Bytes\n1# frozen_string_literal: true\n2\n3module Teams\n4  class EmbeddedSubmissionsController < ApplicationController\n5    # ...\n6    def draft_sync\n7      draft = Interactors::ReportDrafts::UpdateOrCreate.interact_without_authorization(\n8        draft_id: report_params[:draft_id],\n9        # ...\n10        handle: team.handle,\n11        # ...\n12        attachment_ids: report_params[:attachment_ids],\n13        as_user: current_user,\n14        tracer: report_params[:tracer],\n15      )\n16    # ...\n17  end\n18end\nHackerOne's backend consolidates business logic, input validation, and authorization into service objects called interactors. This particular interactor is called explicitly without any form of authorization. Among a few other attributes, the interaction is given a draft_id, attachment_ids, tracer, and a reference to the current_user, which is an instance of a User object or an instance of UserAuthentication::AnonymousUser. The handle attribute that is given is the program's handle based on embedded submission UUID. At this point, the application should determine whether the current_user OR a valid tracer value is present, but this check is missing. This is the first vulnerability. When the interaction is executed, it tries to look up a draft using the following code (see draft method):\nCode 970 Bytes\n1# frozen_string_literal: true\n2\n3module Interactors\n4  module ReportDrafts\n5    class UpdateOrCreate < HackeroneInteractor\n6      attribute :draft_id, Integer, required: false\n7      # ...\n8      attribute :attachment_ids, Array, default: []\n9      attribute :tracer, String, required: false\n10\n11      private\n12\n13      def execute\n14        return if draft_id && draft.nil?\n15\n16        draft.update(\n17          # ...\n18        )\n19\n20        draft\n21      end\n22\n23      # ...\n24\n25      def draft\n26        @draft ||= if draft_id\n27          ReportDraft.find_by(\n28            id: draft_id,\n29            team: team,\n30            reporter: nil_or_current_user,\n31            tracer: tracer,\n32          )\n33        else\n34          ReportDraft.find_or_initialize_by(\n35            team: team,\n36            reporter: nil_or_current_user,\n37            tracer: tracer,\n38          )\n39        end\n40      end\n41\n42      # ...\n43\n44      def nil_or_current_user\n45        current_user.is_a?(User) ? current_user : nil\n46      end\n47    end\n48  end\n49end\nStepping through the code, a user can see that if a draft_id is present, the system will try to look up a ReportDraft object by a tracer UUID and reporter. Going back to the security@ email forwarding, we know that there are ReportDraft objects that have a tracer or reported_by_id attribute set to NULL. This means that an attacker can, by guessing a draft ID created through the security@ email forwarding feature, change the contents of a draft by completely removing the tracer value from a draft sync that is initiated through the embedded submission form. Here is an excerpt of that request:\nCode 273 Bytes\n1POST /80b9bc53-a236-445d-a7e4-553828b7d533/embedded_submissions/draft_sync HTTP/2\n2Host: hackerone.com\n3...\n4\n5{\n6  \"draft_id\": \"1\",\n7  \"title\": \"This becomes the new title for draft 1\",\n8  \"vulnerability_information\":\"This becomes the new vulnerability information for draft 1\"\n9}\nOnce the victim claims the invitation through the email that was shown earlier, they'll see the updated vulnerability information and title.\n<image_1>\nYou can see that the interaction passes all attributes to the update call, see Interactors::ReportDrafts::UpdateOrCreate#execute. This means that the attacker can only change all attributes, reducing the likelihood of the expoitation. However, due to the fact that this allows an attacker to change report drafts, the impact on the integrity is set to high. It could be used to tamper with drafts that are in the process of being submitted to a live program.\nTo further increase the severity of the vulnerability, it can be chained with another vulnerability. When a user uploads an attachment through an embedded submission form, it'll create an Attachment object that belongs to the ReportDraft object. In the backend, its attributes will look like this:\nCode 99 Bytes\n1{\n2  \"id\": \"1\",\n3  \"uploaded_by_id\": null,\n4  \"attachable_id\": 1,\n5  \"attachable_type\": \"ReportDraft\"\n6}\nThe attachable_id and attachable_type form a polymorphic relation to any other persistent model in HackerOne's database. As long as the user is working on its report, the attachment references a ReportDraft object. On submission, it'll transfer the ownership to the Report that was created \u2013 this is the report that customers see. ActiveRecord, the ORM HackerOne uses, has logic to (conveniently) disassociate a polymorphic relation when the model referencing the polymorphic relation overwrites the IDs. To show this, consider the following code example:\nCode 832 Bytes\n1# Create an attachment. At this time, the `attachable_id` and `attachable_type` are set to `NULL`\n2attachment = Attachment.create!\n3\n4# Create another attachment. At this time, the `attachable_id` and `attachable_type` are set to `NULL`\n5another_attachment = Attachment.create!\n6\n7# Create a report draft and reference the first attachment. The `attachable_id` and `attachable_type` of the attachment are updated to reference the created report draft.\n8report_draft = ReportDraft.create! attachment_ids: [attachment.id]\n9\n10# Update the attachment IDs of a report draft. This will do two things:\n11#   - update `attachment.attachable_id` to `NULL`\n12#   - update `another_attachment.attachable_type` to `ReportDraft`\n13#   - update `another_attachment.attachable_id` to `report_draft.id`\n14report_draft.update! attachment_ids: [another_attachment.id]\nThis means that the attachment, as created in the above code example, is not referencing any object at all. There is a code path in HackerOne's platform to get an attachment in this state: upload an attachment using an embedded submission form, then clicking the \"X\" to remove it, and type one character in the vulnerability information field to trigger a draft sync. This will leave the first attachment in an orphaned state that has its uploaded_by_id and attachable_id set to NULL. Going back to the Interactors::ReportDrafts::UpdateOrCreate interactor, there's a method that associates attachments to a ReportDraft with the following logic:\nCode 258 Bytes\n1# ...\n2def valid_attachments\n3  (\n4    draft.attachments.with_attached_file.where(id: attachment_ids) +\n5    Attachment.with_attached_file.where(\n6      id: attachment_ids,\n7      attachable_id: nil,\n8      uploaded_by: nil_or_current_user,\n9    )\n10  ).uniq\n11end\n12# ...\nThe code that contains the vulnerability is the second Attachment lookup: it selects all attachment objects that don't have an attachable_id set and that are uploaded by an anonymous user. This means that any attachment that was uploaded by an anonymous user and removed the attachment from a draft can be associated with the attacker's report draft. There are 823 attachments that match this criteria.\nAn attacker can exploit this chain using the following steps:\nin an authenticated session, start typing a report to any program. Observe the network traffic for the draft_sync endpoint to determine the latest report draft ID, which is included in the response (e.g. 1).\nin the same session, upload an attachment and observe which ID was associated (e.g. 5).\nsend an email to the program's email forwarding address (e.g. security@hackerone.com). This will create a report draft with an ID that is one to ~ ten IDs up from the report draft the authenticated user created.\nin an incognito browser, go to the program's embedded submission form URL. An example is HackerOne's own form. Start typing and intercept the request to the draft_sync endpoint.\nchange the draft_id to the ID obtained in step 1 and completely remove the tracer value from the request.\nset the attachment_ids to an array containing all possible attachment IDs from 1 to the ID obtained in step 2\nclaim the report draft through the invitation you received\nin the UI, observe that the attachments belonging to the victim are attached to the report draft\ncopy the ID and inline them in the vulnerability information field, e.g. {F5}\nin the report preview section, click the link to obtain a copy of the victim's attachment\nImpact\nThe first vulnerability can be used to change the contents of a number of draft reports that were created through the security@ email forwarding feature. However, chaining the two vulnerabilities would increase the severity as it would allow an attacker to associate orphaned Attachment objects to its own report draft, potentially containing sensitive information. The attacker does not have to be authenticated in order to exploit this vulnerability.\n\n",
  "severity": [
    7.5,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Insecure Direct Object Reference (IDOR)"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/9SxkxusCYkPnqVT3Zm32EU21?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-11-13_at_6.12.58_PM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-11-13_at_6.12.58_PM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ7WFQ6TR5%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T221330Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIFYlvq0QpvGhsKxxtiUOfW8bWxbvtjVQOPl%2BSpu4fqNbAiB%2B7IsKWKw2RNrySrWFHbaxJ1FBPmNS4j%2FfYtD4Ks89NCqyBQgeEAMaDDAxMzYxOTI3NDg0OSIMfAJheXSJk9n%2FN2lSKo8FMoo11pdFqlZGOpJnB2cSWBWDnNWmH1i4igKcX9F%2Bw0U32ztwWwi7iJdoNAJjAvZLaGptNu3VejiPGjBJTYRzHzFPsG3JDIcNOS8OMoNQapM68ePs1xYiuGRHmn9SzWaCFm60kw3nzGY%2F92yYapujqeFMbClJqU1Lyff%2BvfO%2BS2nkD%2B34s1sJ2ov5daTTsjFSMM9VamWCrhAWXJwUrbujPnvo8uUI7yQPHa2oeT7xEw8%2FRaBDUdUfVsu5BtLyqefqjA1sqeDuuW9j4XbxuYIuTflV8GDaoncZPL44MWRxW6NWw0UWjJ5PjtUQmxIfIgWzsYhLs8WfU%2FpFG%2FjoZRCQZNtpZqqww3xtn5yS%2BWQheuZJSPI9fLD4rDeSOJ0wyRR8w02CpG27etJ0LE2ksmjtA61CIwVay%2FtxIWxEgBD%2F%2Bip7eja5M%2ByD6mt5AdgIagWocJ8AUr8rxR0zY2JfhY0EJCUdPv9F4qzmvaxIDmYadjSOzc2wsj0mEmLWLDsXSXYDiBMlyTgKJhmniTmxlM6dORp%2FhS98Wjio7UcHolpVvYCByYYO9kBzN1ASpGvVMfYiOlJFPo7uU4%2FtCd75rQyZPvsd7s0GzZyeZq8aYm4GDhj1H0ELMaYQlZnwwNRmhouZRiRfT8mJkgLNdM1Uf51lHESm8yGUPWR5x4tyWvg5am8lF%2Fup4xP5du0T2oVJal08nz2Y2bcf7hDJzshsuwbgbBHQgGc9J9DFX8yKXrZdVg4bIYsKOmFcUIDbrDzoHGju7yITwDYNj72JefsVK1cx061Kl2PYyhPE8%2FwyrY5UNNwAtjdZuJcdlrQkrDWN5AYoxUKTAVtygXxNPw4B4m7YKQ0CdbBelhUpTukglIGmgTDAsIy%2FBjqyAWGydm6A%2FzvA9uNGXLTeflWaeCp0%2BNTNGu0zgTGIcc9%2FLIqZkVtlJnEVyEeQKcQsNEYhKMGxnLnjg1L9Omq7LWyLXcD0gMl9hnBkyFilmPRTkk3Q7sLoP%2FgR6QIPsNZzX7wuVOEEmzYWU1BkjsFXGwJMV3yaE68jaLa8Y4sGzP%2FBnbcUthcirEVtk57qeidnuxfm94CDGs1%2F70xoF3H7OD3O1VNsitvewYXn2PgtpYZQNNY%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=15275850a9130e657dcfef8ea707d8d0aef6bc255350f3dc6acbe604cbf49c6f",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/AJ8yLJBwzUcAdxBwo2VfLKU9?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-11-13_at_6.41.57_PM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-11-13_at_6.41.57_PM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ7WFQ6TR5%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T221330Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIFYlvq0QpvGhsKxxtiUOfW8bWxbvtjVQOPl%2BSpu4fqNbAiB%2B7IsKWKw2RNrySrWFHbaxJ1FBPmNS4j%2FfYtD4Ks89NCqyBQgeEAMaDDAxMzYxOTI3NDg0OSIMfAJheXSJk9n%2FN2lSKo8FMoo11pdFqlZGOpJnB2cSWBWDnNWmH1i4igKcX9F%2Bw0U32ztwWwi7iJdoNAJjAvZLaGptNu3VejiPGjBJTYRzHzFPsG3JDIcNOS8OMoNQapM68ePs1xYiuGRHmn9SzWaCFm60kw3nzGY%2F92yYapujqeFMbClJqU1Lyff%2BvfO%2BS2nkD%2B34s1sJ2ov5daTTsjFSMM9VamWCrhAWXJwUrbujPnvo8uUI7yQPHa2oeT7xEw8%2FRaBDUdUfVsu5BtLyqefqjA1sqeDuuW9j4XbxuYIuTflV8GDaoncZPL44MWRxW6NWw0UWjJ5PjtUQmxIfIgWzsYhLs8WfU%2FpFG%2FjoZRCQZNtpZqqww3xtn5yS%2BWQheuZJSPI9fLD4rDeSOJ0wyRR8w02CpG27etJ0LE2ksmjtA61CIwVay%2FtxIWxEgBD%2F%2Bip7eja5M%2ByD6mt5AdgIagWocJ8AUr8rxR0zY2JfhY0EJCUdPv9F4qzmvaxIDmYadjSOzc2wsj0mEmLWLDsXSXYDiBMlyTgKJhmniTmxlM6dORp%2FhS98Wjio7UcHolpVvYCByYYO9kBzN1ASpGvVMfYiOlJFPo7uU4%2FtCd75rQyZPvsd7s0GzZyeZq8aYm4GDhj1H0ELMaYQlZnwwNRmhouZRiRfT8mJkgLNdM1Uf51lHESm8yGUPWR5x4tyWvg5am8lF%2Fup4xP5du0T2oVJal08nz2Y2bcf7hDJzshsuwbgbBHQgGc9J9DFX8yKXrZdVg4bIYsKOmFcUIDbrDzoHGju7yITwDYNj72JefsVK1cx061Kl2PYyhPE8%2FwyrY5UNNwAtjdZuJcdlrQkrDWN5AYoxUKTAVtygXxNPw4B4m7YKQ0CdbBelhUpTukglIGmgTDAsIy%2FBjqyAWGydm6A%2FzvA9uNGXLTeflWaeCp0%2BNTNGu0zgTGIcc9%2FLIqZkVtlJnEVyEeQKcQsNEYhKMGxnLnjg1L9Omq7LWyLXcD0gMl9hnBkyFilmPRTkk3Q7sLoP%2FgR6QIPsNZzX7wuVOEEmzYWU1BkjsFXGwJMV3yaE68jaLa8Y4sGzP%2FBnbcUthcirEVtk57qeidnuxfm94CDGs1%2F70xoF3H7OD3O1VNsitvewYXn2PgtpYZQNNY%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=857675f66df4de0852a8f91a2f4b3420d481a9fd4a229a984a31758e56151a43"
  },
  "disclosed_date": 1605591720,
  "report_url": "https://hackerone.com/reports/1034346",
  "vuln_category": "WEB_APP",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Send an email to a program's email forwarding address (e.g., security@hackerone.com) to create a report draft with a NULL tracer and reporter_id."
    ],
    [
      2,
      "In an incognito browser, access the program's embedded submission form, intercept the draft_sync request, and modify it to target the draft ID from step 1, removing the tracer value and setting attachment_ids to include orphaned attachments."
    ],
    [
      3,
      "Claim the report draft through the received invitation and observe the attached orphaned attachments."
    ],
    [
      4,
      "Copy the attachment IDs and inline them in the vulnerability information field to access the victim's attachments."
    ]
  ],
  "vuln_description": "This vulnerability allows an attacker to modify report drafts created via email forwarding and access orphaned attachments from other users by exploiting flaws in the access control of report drafts and the handling of attachments in embedded submission forms.",
  "reason": "The attack involves multiple components (email forwarding, embedded submission forms, and attachment handling), requires understanding subtle interactions between these components (e.g., how NULL tracer values can be exploited), and involves manipulating complex application states (e.g., orphaned attachments). The logic of chaining these vulnerabilities is novel and not commonly found in other applications.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": true,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "idor_detectable": true,
    "authnz_byppass_detectable": true
  }
}