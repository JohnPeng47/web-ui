{
  "reported_to": "Node.js third-party modules",
  "reported_by": "chalker ",
  "title": "[open] concatenation of unsanitized input into exec() command",
  "content": "\nI would like to report command injection in open.\nIt allows to inject arbitrary shell commands by specifing crafted urls.\nModule\nmodule name: open\nversion: 0.0.5\nnpm page: https://www.npmjs.com/package/open\nModule Description\nOpen a file or url in the user's preferred application.\nModule Stats\n31 293 downloads in the last day\n473 107 downloads in the last week\n1 968 932 downloads in the last month\n~23 627 184 estimated downloads per year\nVulnerability\nVulnerability Description\nUrls are not properly escaped before concatenating them into the command that is opened using exec().\nSteps To Reproduce:\nCode 56 Bytes\n1require(\"open\")(\"http://example.com/`touch /tmp/tada`\");\nObserve /tmp/tada/ file created.\nSupporting Material/References:\nArch Linux Current\nNode.js 9.5.0\nnpm 5.6.0\nbash 4.4.012\nWrap up\nI contacted the maintainer to let him know: N\nI opened an issue in the related repository: N\nImpact\nUser A who can pass urls for them being open-ed on machine B can execute arbitrary shell commands on machine B.\n\n",
  "severity": [
    8.4,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Command Injection - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1576274760,
  "report_url": "https://hackerone.com/reports/319473",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the 'open' npm package (version 0.0.5 or vulnerable versions)"
    ],
    [
      2,
      "Run the following command in Node.js: require(\"open\")(\"http://example.com/`touch /tmp/tada`\");"
    ],
    [
      3,
      "Check if the file '/tmp/tada' was created on the system"
    ]
  ],
  "vuln_description": "The 'open' npm package is vulnerable to command injection due to improper sanitization of URLs before they are concatenated into an exec() command. This allows an attacker to execute arbitrary shell commands by crafting malicious URLs.",
  "reason": "The vulnerability is straightforward to discover as it involves a common pattern of command injection through unsanitized input in a shell command. The attack does not require multiple components or complex interactions, and the exploitation method is well-known in security research.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection through unsanitized input in the 'open' module, which is not related to authentication or authorization boundaries within an application. The proposed methodologies focus on AuthN/AuthZ and IDOR vulnerabilities by testing session and resource access controls, not command injection vulnerabilities.",
    "is_detectable": false
  }
}