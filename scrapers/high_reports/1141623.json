{
  "reported_to": "Node.js",
  "reported_by": "sickcodes ",
  "title": "Unexpected input validation of octal literals in nodejs v15.12.0 and below returns defined values for all undefined octal literals.",
  "content": "\nSummary:\nUnexpected input validation of octal literals in the nodejs implementation of V8 JavaScript engine V8 9.0.257.13 and below returns defined values for all undefined octal literals where otherwise should return undefined. Input data 08, 09... 078, 079 should return undefined, as evinced by 0o8, 0o9 etc. This affects ALL downstream nodejs software. An attacker could abuse a myriad of downstream software that relies on nodejs, for example any of the 1,570,041 npm packages that expect an undefined response for eval(08);. One such example is netmask npm package: the package is unable to evaluate any octal literal containing an 8 or a 9 leading to SSRF, LFI, RFI.\nDescription:\nDownstream direct references:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal\nhttps://sick.codes/universal-netmask-npm-package-used-by-270000-projects-vulnerable-to-octal-input-data-server-side-request-forgery-remote-file-inclusion-local-file-inclusion-and-more-cve-2021-28918/\nCVSS Pending\nhttps://sick.codes/sick-2021-011\nCVSS 9.8 Critical\nhttps://nvd.nist.gov/vuln/detail/CVE-2020-28360\nSteps To Reproduce:\nnodejs, as well as Chrome Console:\nCode 227 Bytes\n1console.log(04);\n2console.log(05);\n3console.log(06);\n4console.log(07);\n5console.log(08);\n6console.log(09);\n7console.log(010);\n8console.log(0o4);\n9console.log(0o5);\n10console.log(0o6);\n11console.log(0o7);\n12console.log(0o8);\n13console.log(0o9);\nCode 226 Bytes\n1\n2STATEMENT='\n3console.log(04);\n4console.log(05);\n5console.log(06);\n6console.log(07);\n7console.log(08);\n8console.log(09);\n9console.log(010);\n10'\n11\n12node <<EOF\n13${STATEMENT}\n14EOF\n15\n16coffee <<EOF\n17${STATEMENT}\n18EOF\n19\n20ts-node <<EOF\n21${STATEMENT}\n22EOF\nnode (V8) returns:\nCode 13 Bytes\n14\n25\n36\n47\n58\n69\n78\nHowever, it should absolutely be:\nCode 21 Bytes\n14\n25\n36\n47\n5undef\n6undef\n78\nexpected results\nCode 232 Bytes\n1STATEMENT='\n2console.log(0o4);\n3console.log(0o5);\n4console.log(0o6);\n5console.log(0o7);\n6console.log(0o8);\n7console.log(0o9);\n8console.log(0o10);\n9'\n10\n11node <<EOF\n12${STATEMENT}\n13EOF\n14\n15coffee <<EOF\n16${STATEMENT}\n17EOF\n18\n19ts-node <<EOF\n20${STATEMENT}\n21EOF\nEvery other JS runtime evaluates defined as undefined.\nCWE-20: Improper Input Validation\nVERSION\nGoogle Chrome 90.0.4430.40 (Official Build) unknown (64-bit)\nRevision 13a486ce2d7548247f6314bbccf47e47773938f6-refs/branch-heads/4430@{#715}\nOS Linux\nJavaScript V8 9.0.257.13\nUser Agent Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.40 Safari/537.36\nCommand Line ./chrome --flag-switches-begin --flag-switches-end\nREPRODUCTION CASE\nCode 225 Bytes\n1STATEMENT='\n2console.log(04);\n3console.log(05);\n4console.log(06);\n5console.log(07);\n6console.log(08);\n7console.log(09);\n8console.log(010);\n9'\n10\n11node <<EOF\n12${STATEMENT}\n13EOF\n14\n15coffee <<EOF\n16${STATEMENT}\n17EOF\n18\n19ts-node <<EOF\n20${STATEMENT}\n21EOF\nFOR CRASHES, PLEASE INCLUDE THE FOLLOWING ADDITIONAL INFORMATION\nCode 609 Bytes\n1console.log(04);\n2console.log(05);\n3console.log(06);\n4console.log(07);\n5console.log(08);\n6console.log(09);\n7console.log(010);\n8console.log(0o4);\n9console.log(0o5);\n10console.log(0o6);\n11console.log(0o7);\n12console.log(0o8);\n13console.log(0o9);\n14console.log(0o10);\n15VM78:12 Uncaught SyntaxError: Invalid or unexpected token\n16\n17console.log(04);\n18console.log(05);\n19console.log(06);\n20console.log(07);\n21console.log(08);\n22console.log(09);\n23console.log(010);\n24console.log(0o4);\n25console.log(0o5);\n26console.log(0o6);\n27console.log(0o7);\n28VM111:1 4\n29VM111:2 5\n30VM111:3 6\n31VM111:4 7\n32VM111:5 8\n33VM111:6 9\n34VM111:7 8\n35VM111:8 4\n36VM111:9 5\n37VM111:10 6\n38VM111:11 7\nImpact: [add why this issue matters]\nSSRF, RFI, LFI in absolutely any downstream package that relies on octal literal IP address translation.\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Bad_octal\nSupporting Material/References:\nThis bug I previously submitted to Chromium V8 (yesterday) which was rejected as \"per spec\"\nHowever, this does not account for the fact that this is extremely dangerous for nodejs webapps, if not all nodejs web applications.\nMozilla interprets ECMA-262 octal literals containing 8 or 9 as not legal.\nCode 85 Bytes\n108 is not a legal ECMA-262 octal constant.\n209 is not a legal ECMA-262 octal constant.\nThe spec:\nhttps://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\nImpact\nAs per Chromium's response as well as our own research, random deviations in octal literal is catastrophic.\nThe issue highly affects parseInt. It should return undefined for truly undefined results.\nCode 86 Bytes\n1> parseInt(08);\n28\n3> parseInt(0177);\n4127\n5> parseInt(012);\n610\n7> parseInt(0000127);\n887\n9> \n\n",
  "severity": [
    10.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Use of Inherently Dangerous Function"
  ],
  "screenshots": {},
  "disclosed_date": 1623689160,
  "report_url": "https://hackerone.com/reports/1141623",
  "is_multi_component": false,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Run the following JavaScript code in Node.js v15.12.0 or below, or in Chrome Console: console.log(04); console.log(05); console.log(06); console.log(07); console.log(08); console.log(09); console.log(010);"
    ],
    [
      2,
      "Observe that the output includes values for 08 and 09 (8 and 9 respectively) instead of returning undefined as expected for invalid octal literals."
    ]
  ],
  "vuln_description": "The vulnerability involves improper input validation of octal literals in Node.js v15.12.0 and below (using V8 JavaScript engine versions 9.0.257.13 and below). The engine incorrectly processes invalid octal literals (containing 8 or 9) by returning numeric values instead of undefined or throwing an error. This behavior contradicts the ECMA-262 specification and can lead to security vulnerabilities in downstream applications that rely on proper octal literal validation, particularly in contexts like IP address parsing where octal notation is used.",
  "reason": "While the vulnerability has significant impact potential, its discovery is relatively straightforward as it involves basic testing of numeric literal handling in JavaScript. The issue becomes apparent through simple test cases comparing valid and invalid octal literals. The main complexity comes from understanding the security implications in downstream applications rather than discovering the core issue itself.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}