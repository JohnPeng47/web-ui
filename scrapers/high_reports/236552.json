{
  "reported_to": "Automattic",
  "reported_by": "b258ea62bf297b02afa9854 ",
  "title": "Unauthenticated RCE in Vaultpress",
  "content": "\nHitting wordpress instalattion with vaultpress on it with get parameter vaultpress=true attacker is one method away from RCE and that method is validate_api_signature.\nIn this method we have the following constraints:\nFirewall\nUsage (recomended) of openssl to validate API call\nIn case of disabled firewall or its bypass ( easy on many configurations, specially the ones behind proxy/balancer servers ) then in case of usage of openssl to verify the signature we have easy bypass because unsafe usage of openssl_verify PHP function.\nCode 427 Bytes\n1if ( $this->can_use_openssl() ) {\n2\t\t\t\n3\t\t\t$sslsig = '';\n4\t\t\tif ( isset( $post['sslsig'] ) ) {\n5\t\t\t\t$sslsig = $post['sslsig'];\n6\t\t\t\tunset( $post['sslsig'] );\n7\t\t\t}\n8\t\t\tif ( openssl_verify( serialize( array( 'uri' => $uri, 'post' => $post ) ), base64_decode( $sslsig ), $this->get_option( 'public_key' ) ) ) {\n9\t\t\t\treturn true;\n10\t\t\t} else {\n11\t\t\t\t$__vp_validate_error = array( 'error' => 'invalid_signed_data' );\n12\t\t\t\treturn false;\n13\t\t\t}\n14\t\t}\nThis function openssl_verify have 3 possible values as result value:\nint(1) success\nint(0) failure to verify\nint(-1) error\nbut we all know that\nCode 24 Bytes\n1if (-1) {echo \"Hi RCE\";}\nwill print Hi RCE\nProposed fix:\nCode 267 Bytes\n1if ( openssl_verify( serialize( array( 'uri' => $uri, 'post' => $post ) ), base64_decode( $sslsig ), $this->get_option( 'public_key' ) ) ===1 ) {\n2\t\t\t\treturn true;\n3\t\t\t} else {\n4\t\t\t\t$__vp_validate_error = array( 'error' => 'invalid_signed_data' );\n5\t\t\t\treturn false;\n6\t\t\t}\nIn order to get the idea how to cause openssl_verify to return -1all you need is to provide valid signature towards public key from different type. Check the uploaded files and execute them in the CMD in the following order:\nCode 43 Bytes\n1php genkey1.php\n2php genkey2.php\n3php PoC.php\n\n",
  "severity": [
    9.9,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "None"
  ],
  "screenshots": {},
  "disclosed_date": 1505494260,
  "report_url": "https://hackerone.com/reports/236552",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "php genkey1.php"
    ],
    [
      2,
      "php genkey2.php"
    ],
    [
      3,
      "php PoC.php"
    ]
  ],
  "vuln_description": "The vulnerability is an unauthenticated Remote Code Execution (RCE) in Vaultpress, a WordPress plugin. By sending a GET parameter 'vaultpress=true' to a WordPress installation with Vaultpress, an attacker can bypass the signature validation due to unsafe usage of the openssl_verify function. The function returns -1 on error, which evaluates to true in PHP, allowing the bypass. The attacker needs to provide a valid signature from a different key type to trigger this condition.",
  "reason": "The vulnerability involves understanding the openssl_verify function's behavior in PHP, the context of Vaultpress's signature validation, and the ability to generate a malformed signature. The attack requires manipulating the application's state to trigger the error condition in openssl_verify, which is a subtle interaction.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}