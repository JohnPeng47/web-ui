{
  "reported_to": "Rocket.Chat",
  "reported_by": "gronke ",
  "title": "Registration bypass with leaked Invite Token",
  "content": "\nSummary:\nRegular expressions in the validateInviteToken route allows unauthenticated users to guess a valid invite token, that allows them to access a private channel or register accounts on a remote server with \"Secret URL\" registration method enabled.\nDescription:\nThe API route validateInviteToken passes an unauthenticated clients token bodyParam to the validateInviteToken method as found in app/api/server/v1/invites.js#L45-L62\nCode 409 Bytes\n1API.v1.addRoute('validateInviteToken', { authRequired: false }, {\n2\tpost() {\n3\t\tconst { token } = this.bodyParams;\n4\n5\t\tif (!token) {\n6\t\t\tthrow new Meteor.Error('error-invalid-token', 'The invite token is invalid.', { method: 'validateInviteToken', field: 'token' });\n7\t\t}\n8\n9\t\tlet valid = true;\n10\t\ttry {\n11\t\t\tvalidateInviteToken(token);\n12\t\t} catch (e) {\n13\t\t\tvalid = false;\n14\t\t}\n15\n16\t\treturn API.v1.success({ valid });\n17\t},\n18});\nThe token is then passed to Invites.findOneById(token) without further checks of the input data, which allows to send an Object instead of a string. This object can be a $regex Mongo DB query, that reduces the number of queries required to leak a valid invite token.\nOnce found, an attacker can navigate to /invite/:token to then register a new account with access to the specific channel. After initial registration, the process can be repeated to join more rooms with non-expired invites.\nCode 135 Bytes\n1curl 'https://open.rocket.chat/api/v1/validateInviteToken'\n2  -H \"content-type: application/json\"\n3  -d '{ \"token\": { \"$regex\": \".*\" } }'\nExpired invite token might mask other token because Mongo DB only returns one document (sorted by order of insertion). A valid strategy to leak a 6 character token (case-sensitive letters and numbers) is to prefix the regex (e.g. ^a.*, ^b.*, etc) and check the boolean result.\nReleases Affected:\n3.9.4\nSteps To Reproduce (from initial installation to vulnerability):\n(Add details for how we can reproduce the issue)\n1.) Leak a valid token with consecutive validateInviteToken checks\n2.) Browse to /invite/:leaked_token\n3.) Register account\nSuggested mitigation\nvalidate user input to be a String\nImpact\nUnauthenticated attackers can leak invite links to register new accounts, although public registration is disabled. Authenticated users might gain unauthorized access to private chat rooms.\n\n",
  "severity": [
    8.2,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Authentication - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1723341480,
  "report_url": "https://hackerone.com/reports/1071102",
  "vuln_category": "API",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Leak a valid token by sending consecutive requests to the validateInviteToken endpoint with regex patterns in the token parameter"
    ],
    [
      2,
      "Use the leaked token to register a new account by browsing to /invite/:leaked_token"
    ]
  ],
  "vuln_description": "The vulnerability allows unauthenticated users to bypass registration by exploiting a regex injection in the validateInviteToken API route. This enables guessing valid invite tokens, which can then be used to register accounts or access private channels.",
  "reason": "The attack involves understanding and exploiting a regex injection in a MongoDB query, which is a non-obvious interaction. However, the steps to exploit it are straightforward once the vulnerability is identified.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "idor_detectable": false,
    "authnz_byppass_detectable": true
  }
}