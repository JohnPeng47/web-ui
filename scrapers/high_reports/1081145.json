{
  "reported_to": "ImpressCMS",
  "reported_by": "egix ",
  "title": "SQL Injection through /include/findusers.php",
  "content": "\nSummary:\nThe vulnerability is located in the /include/findusers.php script:\nCode 642 Bytes\n1281.\t\t\t$total = $user_handler->getUserCountByGroupLink(@$_POST[\"groups\"], $criteria);\n2282.\t\n3283.\t\t\t$validsort = array(\"uname\", \"email\", \"last_login\", \"user_regdate\", \"posts\");\n4284.\t\t\t$sort = (!in_array($_POST['user_sort'], $validsort)) ? \"uname\" : $_POST['user_sort'];\n5285.\t\t\t$order = \"ASC\";\n6286.\t\t\tif (isset($_POST['user_order']) && $_POST['user_order'] == \"DESC\") {\n7287.\t\t\t\t$order = \"DESC\";\n8288.\t\t\t}\n9289.\t\n10290.\t\t\t$criteria->setSort($sort);\n11291.\t\t\t$criteria->setOrder($order);\n12292.\t\t\t$criteria->setLimit($limit);\n13293.\t\t\t$criteria->setStart($start);\n14294.\t\t\t$foundusers = $user_handler->getUsersByGroupLink(@$_POST[\"groups\"], $criteria, TRUE);\nUser input passed through the \"groups\" POST parameter is not properly sanitized before being passed to the icms_member_Handler::getUserCountByGroupLink() and icms_member_Handler::getUsersByGroupLink() methods at lines 281 and 294. These methods use the first argument to construct a SQL query without proper validation:\nCode 527 Bytes\n1461.\t\tpublic function getUsersByGroupLink($groups, $criteria = null, $asobject = false, $id_as_key = false) {\n2462.\t\t\t$ret = array();\n3463.\t\n4464.\t\t\t$select = $asobject ? \"u.*\" : \"u.uid\";\n5465.\t\t\t$sql[] = \"\tSELECT DISTINCT {$select} \"\n6466.\t\t\t\t\t. \"\tFROM \" . icms::$xoopsDB->prefix(\"users\") . \" AS u\"\n7467.\t\t\t\t\t. \" LEFT JOIN \" . icms::$xoopsDB->prefix(\"groups_users_link\") . \" AS m ON m.uid = u.uid\"\n8468.\t\t\t\t\t. \"\tWHERE 1 = '1'\";\n9469.\t\t\tif (! empty($groups)) {\n10470.\t\t\t\t$sql[] = \"m.groupid IN (\" . implode(\", \", $groups) . \")\";\n11471.\t\t\t}\nThis can be exploited by remote attackers to e.g. read sensitive data from the \"users\" database table through boolean-based SQL Injection attacks.\nImpressCMS branch :\nThe vulnerability has been tested and confirmed on ImpressCMS version 1.4.2 (the latest at the time of writing).\nSteps To Reproduce:\nUse the attached Proof of Concept (PoC) script to reproduce this vulnerability. It's a PHP script supposed to be used from the command-line (CLI). You should see an output like the following:\nCode 147 Bytes\n1$ php sqli.php http://localhost/impresscms/\n2[-] Retrieving security token...\n3[-] Starting SQL Injection attack...\n4[-] Admin's email: admin@test.com\nThe PoC leverages both this vulnerability and the one reported at #1081137 to achieve unauthenticated exploitation.\nImpact\nThis vulnerability might allow unauthenticated attackers to disclose any field of the \"users\" database table, including the users' email addresses and password hashes, potentially leading to full account takeovers.\nNOTE: normally, successful exploitation of this vulnerability should require an admin user session. However, due to the vulnerability described in report #1081137, this could be exploited by unauthenticated attackers as well.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1665096660,
  "report_url": "https://hackerone.com/reports/1081145",
  "vuln_category": "WEB_APP",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Identify the vulnerable endpoint /include/findusers.php in ImpressCMS"
    ],
    [
      2,
      "Craft a malicious POST request with SQL injection payload in the 'groups' parameter to exploit the unsanitized input"
    ]
  ],
  "vuln_description": "The vulnerability is an SQL Injection in the /include/findusers.php script of ImpressCMS, where user input passed through the 'groups' POST parameter is not properly sanitized before being used in SQL queries. This allows attackers to execute arbitrary SQL commands and potentially access sensitive data from the database.",
  "reason": "The vulnerability involves a straightforward SQL injection through unsanitized input, which is a common and well-documented attack vector. The exploitation does not require complex application state manipulation or understanding of subtle interactions between components.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "#1081137",
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves SQL injection through unsanitized user input in POST parameters, which is a different class of vulnerability from the authN/authZ bypass or IDOR vulnerabilities described in the methodology. The methodology focuses on testing authorization boundaries by swapping user sessions and resource IDs, not on input validation or SQL injection vulnerabilities.",
    "is_detectable": false
  }
}