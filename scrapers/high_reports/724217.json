{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "geeknik ",
  "title": "tcpdump: CVE-2018-14879 - buffer overflow in tcpdump.c:get_next_file()",
  "content": "\nThe release of tcpdump 4.9.3 brought many bug fixes, including one I submitted, CVE-2018-14879.\nThe command-line argument parser in tcpdump before 4.9.3 has a buffer overflow in tcpdump.c:get_next_file().\nCode 1.20 KiB\n1==2288==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe363769bf at pc 0x56336d544e69 bp 0x7ffe36376260 sp 0x7ffe36376258\n2READ of size 1 at 0x7ffe363769bf thread T0\n3    #0 0x56336d544e68 in get_next_file tcpdump.c:853\n4    #1 0x56336d53ab63 in main tcpdump.c:1956\n5    #2 0x7f83cae7c2e0 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x202e0)\n6    #3 0x56336d543169 in _start (/root/tcpdump/tcpdump+0x16d169)\n7\n8Address 0x7ffe363769bf is located in stack of thread T0 at offset 1727 in frame\n9    #0 0x56336d53828f in main tcpdump.c:1411\n10\n11  This frame has 15 object(s):\n12    [32, 36) 'localnet'\n13    [96, 100) 'netmask'\n14    [160, 168) 'endp'\n15    [224, 232) 'end'\n16    [288, 296) 'devlist'\n17    [352, 360) 'end'\n18    [416, 424) 'dlts'\n19    [480, 496) 'fcode'\n20    [544, 576) 'timer'\n21    [608, 648) 'dumpinfo'\n22    [704, 848) 'buf'\n23    [896, 1096) 'Ndo'\n24    [1152, 1408) 'ebuf'\n25    [1440, 1696) 'ebuf'\n26    [1728, 5825) 'VFileLine' <== Memory access at offset 1727 underflows this variable\n27HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\n28      (longjmp and C++ exceptions *are* supported)\n29SUMMARY: AddressSanitizer: stack-buffer-overflow tcpdump.c:853 in get_next_file\nReported: 2018 May 14 (via email to security@tcpdump.org)\nFix Released: 2018 September 30\nCVE: https://nvd.nist.gov/vuln/detail/CVE-2018-14879\nCredit: https://www.tcpdump.org/public-cve-list.txt\nCode 159 Bytes\n1CVSS v3.1 Severity and Metrics:\n2Base Score: 9.8 CRITICAL\n3Vector: AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H (V3.1 legend)\n4Impact Score: 5.9\n5Exploitability Score: 3.9 \nImpact\nStack buffer overflow can be caused deliberately as part of an attack known as stack smashing. If the affected program is running with special privileges, or accepts data from untrusted network hosts (e.g. a webserver) then the bug is a potential security vulnerability. If the stack buffer is filled with data supplied from an untrusted user then that user can corrupt the stack in such a way as to inject executable code into the running program and take control of the process. This is one of the oldest and more reliable methods for attackers to gain unauthorized access to a computer.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Buffer Underflow"
  ],
  "screenshots": {},
  "disclosed_date": 1581647160,
  "report_url": "https://hackerone.com/reports/724217",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Run tcpdump version before 4.9.3 with a specially crafted command-line argument that triggers the buffer overflow in get_next_file() function."
    ],
    [
      2,
      "Observe the stack buffer overflow error reported by AddressSanitizer or witness the program crash due to memory corruption."
    ]
  ],
  "vuln_description": "The vulnerability is a stack buffer overflow in tcpdump's command-line argument parser, specifically in the get_next_file() function. This allows an attacker to overwrite adjacent memory on the stack, potentially leading to arbitrary code execution or program crashes. The issue occurs when processing command-line arguments without proper bounds checking.",
  "reason": "The vulnerability involves a straightforward buffer overflow in a single function with clear memory corruption symptoms. While understanding the exact memory layout requires some technical knowledge, the core issue is a classic buffer overflow pattern that's well-documented in security research. The attack surface is limited to command-line argument processing without complex state manipulation.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}