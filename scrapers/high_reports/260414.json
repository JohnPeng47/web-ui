{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "geeknik ",
  "title": "CVE-2017-12858: Heap UAF in _zip_buffer_free() / Double free in _zip_dirent_read()",
  "content": "\nlibzip is a C library for reading, creating, and modifying zip archives. A partial list of projects using libzip include: Plex Home Theater, MySQL Workbench, ckmame, fuse-zip, lua-zip, php zip extension, zipruby, Endeavour2, FreeDink, DeaDBeeF (vfs_zip plugin), OpenLierox, ebook-tools, PDF Expert, ReaddleDocs, simple basic C++ wrapper for libzip, libzip++ - safe and modern c++14 wrapper around libzip, Adobe (e.g., in Edge), PureBasic (ZipPacker), freebasic (ExtLibZip), Mercedes (S-Class), Kerkythea, G3D Innovation Engine, D'Fusion Studio, odt2tex - Libre/OpenOffice to LaTeX converter, Kobo eReader, Kchmviewer, Yubikey NEO CCID Manager C Library, Veracrypt, InstantZip, OpenRCT2 (RollerCoaster Tycoon 2 re-implementation)\nReported to the vendor on 9 June 2017 via email.\nFixed in their master code on 14 August 2017.\nVendor states it was a 'Double Free' in zip_dirent.c.\nCVE requested on 14 August 2017.\nCVE-2017-12858 assigned on 15 August 2017.\nCode 2.23 KiB\n1==19825==ERROR: AddressSanitizer: heap-use-after-free on address 0x60300000ece1 at pc 0x0000004fbbe9 bp 0x7ffd4ed8f250 sp 0x7ffd4ed8f248\n2READ of size 1 at 0x60300000ece1 thread T0\n3    #0 0x4fbbe8 in _zip_buffer_free /root/libzip/lib/zip_buffer.c:53:9\n4    #1 0x4ccdc5 in _zip_dirent_read /root/libzip/lib/zip_dirent.c:477:17\n5    #2 0x4dd766 in _zip_checkcons /root/libzip/lib/zip_open.c:469:6\n6    #3 0x4dc511 in _zip_find_central_dir /root/libzip/lib/zip_open.c:612:28\n7    #4 0x4dc511 in _zip_open /root/libzip/lib/zip_open.c:194\n8    #5 0x4da5d7 in zip_open_from_source /root/libzip/lib/zip_open.c:148:11\n9    #6 0x4d9a10 in zip_open /root/libzip/lib/zip_open.c:74:15\n10    #7 0x4bfa32 in list_zip /root/libzip/src/zipcmp.c:396:13\n11    #8 0x4bfa32 in compare_zip /root/libzip/src/zipcmp.c:225\n12    #9 0x4bfa32 in main /root/libzip/src/zipcmp.c:193\n13    #10 0x7fab6f292b44 in __libc_start_main /build/glibc-KShDyh/glibc-2.19/csu/libc-start.c:287\n14    #11 0x4bf29c in _start (/root/libzip/src/zipcmp+0x4bf29c)\n15\n160x60300000ece1 is located 1 bytes inside of 32-byte region [0x60300000ece0,0x60300000ed00)\n17freed by thread T0 here:\n18    #0 0x4a199b in free (/root/libzip/src/zipcmp+0x4a199b)\n19    #1 0x4fbbc0 in _zip_buffer_free /root/libzip/lib/zip_buffer.c:57:5\n20    #2 0x4dd766 in _zip_checkcons /root/libzip/lib/zip_open.c:469:6\n21    #3 0x4dc511 in _zip_find_central_dir /root/libzip/lib/zip_open.c:612:28\n22    #4 0x4dc511 in _zip_open /root/libzip/lib/zip_open.c:194\n23    #5 0x4da5d7 in zip_open_from_source /root/libzip/lib/zip_open.c:148:11\n24    #6 0x4d9a10 in zip_open /root/libzip/lib/zip_open.c:74:15\n25    #7 0x4bfa32 in list_zip /root/libzip/src/zipcmp.c:396:13\n26    #8 0x4bfa32 in compare_zip /root/libzip/src/zipcmp.c:225\n27    #9 0x4bfa32 in main /root/libzip/src/zipcmp.c:193\n28    #10 0x7fab6f292b44 in __libc_start_main /build/glibc-KShDyh/glibc-2.19/csu/libc-start.c:287\n29\n30previously allocated by thread T0 here:\n31    #0 0x4a1c1b in __interceptor_malloc (/root/libzip/src/zipcmp+0x4a1c1b)\n32    #1 0x4fd07b in _zip_buffer_new /root/libzip/lib/zip_buffer.c:168:35\n33    #2 0x4fd07b in _zip_buffer_new_from_source /root/libzip/lib/zip_buffer.c:190\n34    #3 0x514487 in _fini (/root/libzip/src/zipcmp+0x514487)\n35\n36SUMMARY: AddressSanitizer: heap-use-after-free /root/libzip/lib/zip_buffer.c:53 _zip_buffer_free\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Use After Free"
  ],
  "screenshots": {},
  "disclosed_date": 1570581120,
  "report_url": "https://hackerone.com/reports/260414",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Open a specially crafted ZIP archive using the libzip library"
    ],
    [
      2,
      "Trigger the double free vulnerability during the parsing of directory entries"
    ]
  ],
  "vuln_description": "The vulnerability is a heap use-after-free and double free issue in libzip's _zip_buffer_free() function, which occurs during the processing of ZIP archive directory entries. The issue arises when the same buffer is freed twice during archive parsing, leading to memory corruption and potential code execution.",
  "reason": "This vulnerability involves a straightforward memory management error (double free) in a common operation (ZIP file parsing). While it requires understanding of memory management in C, the vulnerability pattern is well-known and the triggering condition is simple (parsing a malicious ZIP file). The components involved are limited to the buffer management and directory entry reading functions.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}