{
  "reported_to": "Node.js third-party modules",
  "reported_by": "chalker ",
  "title": "`base64-url` below 2.0 allocates uninitialized Buffers when number is passed in input",
  "content": "\nI would like to report an uninitialized Buffer allocation issue in base64-url.\nIt allows to extract sensitive data from uninitialized memory or to cause a DoS by passing in a large number, in setups where typed user input can be passed (e.g. from JSON).\nModule\nmodule name: base64-url\nversion: 1.3.3\nnpm page: https://www.npmjs.com/package/base64-url\nModule Description\nBase64 encode, decode, escape and unescape for URL applications.\nModule Stats\n48 047 downloads in the last day\n311 047 downloads in the last week\n1 374 420 downloads in the last month\nVulnerability\nVulnerability Description\nThe problem arises when a number is passed in, e.g. from user-submitted JSON-encoded data.\nThe API should not propagate the already-bad Buffer issue further.\nOn Node.js 6.x and below, this exposes uninitialized memory, which could contain sensitive data.\nThis can be also used to cause a DoS on any Node.js version by consuming the memory when large numbers are passed on input.\nSteps To Reproduce:\nconsole.log(require('base64-url').encode(1000)) (Node.js 6.x and lower \u2014 note uninitialized memory in output)\nrequire('base64-url').encode(1e8) (any Node.js verision \u2014 note memory usage and time)\nSupporting Material/References:\nOS: Arch Linux current\nNode.js 6.13.0\nNode.js 9.5.0\nWrap up\nI contacted the maintainer to let them know: Y\nI opened an issue in the related repository: N\nI contacted the author on 2017-03-02.\nI did not receive a reply, but on 2017-08-17 a semver-major version 2.0.0 was released with a fix.\nI want a CVE assigned to this issue, also I would prefer the fix to be backported to 1.x branch \u2014 a lot of modules still depend 1.x as of 2018-02-26.\nTop-10 apps @latest versions of which install affected base64-url@1 through their deps chains:\nCode 195 Bytes\n1664945  react-native\n2346288  metro-bundler\n383764   hubot\n481089   sails\n551724   phonegap\n645522   csrf-tokens\n728326   hubot-mock-adapter\n825778   mock-hubot\n923712   connect-phonegap\n1018808   nodedata\nIn total, there are about 2460 such apps in the npm registry, to my knowledge.\nImpact\nSensitive uninitialized memory exposure on Node.js 6.x or lower\nDenail of Service on any Node.js version\n\n",
  "severity": [
    8.6,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Out-of-bounds Read"
  ],
  "screenshots": {},
  "disclosed_date": 1526130600,
  "report_url": "https://hackerone.com/reports/321692",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install base64-url version 1.3.3 or below"
    ],
    [
      2,
      "Run the following commands in Node.js 6.x or lower: `console.log(require('base64-url').encode(1000))` (to observe uninitialized memory) or `require('base64-url').encode(1e8)` (to observe memory consumption)"
    ]
  ],
  "vuln_description": "The base64-url module below version 2.0.0 allocates uninitialized Buffers when a number is passed as input, which can lead to sensitive memory exposure (on Node.js 6.x or lower) or Denial of Service (on any Node.js version) when large numbers are passed.",
  "reason": "The vulnerability is straightforward to discover as it involves passing a number to a function that expects a string, a common testing approach. The impact is significant, but the discovery process does not involve complex interactions or novel logic.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}