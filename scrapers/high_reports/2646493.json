{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "eyalgabay ",
  "title": "CVE-2024-42005: Potential SQL injection in QuerySet.values() and values_list()",
  "content": "\nHi IBB :)\nI found SQL injection in django.\nyou can see my cve (CVE-2024-42005) here:\nhttps://www.djangoproject.com/weblog/2024/aug/06/security-releases/\nImpact\nQuerySet.values() and values_list() methods on models with a JSONField are subject to SQL injection in column aliases via a crafted JSON object key as a passed *arg.\nNVD rated the vulnerability sevirity as 9.8.\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-42005\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 4263,
  "weaknesses": [
    "None"
  ],
  "screenshots": {},
  "disclosed_date": 1724536080,
  "report_url": "https://hackerone.com/reports/2646493",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a Django model with a JSONField."
    ],
    [
      2,
      "Use QuerySet.values() or values_list() with a crafted JSON object key as a *arg to trigger SQL injection."
    ]
  ],
  "vuln_description": "The vulnerability involves SQL injection in Django's QuerySet.values() and values_list() methods when used on models with a JSONField. The attack exploits crafted JSON object keys passed as *args, which are not properly sanitized, leading to SQL injection in column aliases.",
  "reason": "The vulnerability requires understanding Django's ORM, JSONField handling, and SQL injection techniques. While the attack vector is specific, the steps to exploit it are straightforward once the underlying issue is known.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}