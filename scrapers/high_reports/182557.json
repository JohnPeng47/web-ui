{
  "reported_to": "Brave Software",
  "reported_by": "seifelsallamy ",
  "title": "links the user may download can be a malicious files",
  "content": "\nHi,\nSummary:\nThis vulnerability is pretty simple and pretty dangerous at the same time\nAlmost any link the user tries to download it's extension is set according to the file extension in the path\nif the path is / then it download's it according to the domain name\n\nEg:\n[1] http://example.com/example.php\nif the user downloaded the link the file type would be .php\nthat's not very dangerous though\n[2] http://example.com/example.exe\nif the user downloaded the link the file type would be .exe\nOkey that's dangerous but it requires a lot of social engineering\n[3] http://example.com/\nif the user downloaded the link the file type would be .com\nthis requires less social engineering and it's pretty dangerous\nwhy?\nbecause .com files are executable files which may can do what .exe can do\nhere's links about .com files\nhttps://en.wikipedia.org/wiki/COM_file\nand the difference between .exe and .com\nhttps://blogs.msdn.microsoft.com/oldnewthing/20080324-00/?p=23033\nthere's a new many domain names which may can create malicious extensions like .com\nas example\n.com.py\nwhich can create a python file\nany website can make his favorable extension in the domain path and when the user downloads it it will be downloaded by the extension\nas example http://example.com/example.exe\nProducts affected:\nwindows 10 x64 brave latest version\nSteps To Reproduce:\nthere is 3 ways to reproduce\n[1]\nexecute this html\n<a href=\"http://example.com\" download>http://example.com</a>\nright click on the link > Save Link as... > Save\n[2]\ngo to http://example.com\nright click > Save Page as... > Save\n[3]\nexecute this html and directly click the link it will download directly\n<a href=\"http://example.com\" download>http://example.com</a>\nNote :\nThe none exist pages can't be downloaded\n\nAny link the users tries to download must be .htm or .html\nSupporting Material/References:\nRCE_At_Brave_Browser.jpg (F135079)\nThanks!\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1502356200,
  "report_url": "https://hackerone.com/reports/182557",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Execute HTML with a link to http://example.com and use the 'Save Link as...' option."
    ],
    [
      2,
      "Visit http://example.com directly and use the 'Save Page as...' option."
    ],
    [
      3,
      "Execute HTML with a link to http://example.com and click the link to download directly."
    ]
  ],
  "vuln_description": "The vulnerability allows malicious files to be downloaded by users due to the browser's handling of file extensions based on the URL path or domain name. This can lead to the execution of malicious code if the downloaded file's extension is executable (e.g., .com, .exe).",
  "reason": "The vulnerability is straightforward to discover as it involves basic testing of file download behaviors and observing the resulting file extensions. No complex interactions or novel logic is required.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves the browser's handling of file downloads based on URL paths, which is not related to authentication or authorization checks within an application. The proposed methodologies focus on AuthN/AuthZ bypasses and IDOR vulnerabilities by manipulating user sessions and resource access, which are not applicable to this file download behavior.",
    "is_detectable": false
  }
}