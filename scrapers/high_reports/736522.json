{
  "reported_to": "Node.js third-party modules",
  "reported_by": "ermilov ",
  "title": "[authmagic-timerange-stateless-core] Improper Authentication",
  "content": "\nI would like to report Improper Authentication in authmagic-timerange-stateless-core\nIt allows to forge user's identity.\nModule\nmodule name: authmagic-timerange-stateless-core\nversion: 0.0.9\nnpm page: https://www.npmjs.com/package/authmagic-timerange-stateless-core\nModule Description\nStateless and passwordless authentication core for authmagic (https://github.com/authmagic/authmagic).\nModule Stats\n[20] weekly downloads\nVulnerability\nVulnerability Description\nauthmagic-timerange-stateless-core is an npm module that runs an API for stateless and passwordless authentication by utilizing JWT tokens. The module is also one of the core dependencies of authmagic which is an authorization service.\nThe module defined to handle authentication but does not validate the JWT token sent by the user when reissuing a new token (POST request to /token endpoint). Therefore it allows modifying payload within the token and also reissuing new token which will be signed by the system and become valid. This weakness provides an opportunity to forge the user's identity by changing the information inside the token's payload that is used to authenticate the client.\nSteps To Reproduce:\nsource code example:\nhttps://github.com/authmagic/authmagic-timerange-stateless-core/blob/master/core.js#L11\nCode 267 Bytes\n1const checkRefreshToken = (token, refreshToken, key) => {\n2  try {\n3    if(jwt.verify(refreshToken, key)) {\n4      return jwt.decode(token, {complete: true}).signature === jwt.decode(refreshToken).signature;\n5    }\n6  } catch(e) {\n7    return false;\n8  }\n9\n10  return false;\n11};\nwhile comparing signatures in token and refreshToken only the refreshToken is verified, the token itself has to include the same sign like the one stored in refreshToken's payload but the validity of the token is not checked.\nthe authmagic-timerange-stateless-core is utilized by Authmagic (https://github.com/authmagic/authmagic) so it is handy to use Authmagic example app (https://github.com/authmagic/authmagic-getting-started-example) for testing, as it demonstrates the behaviour of the module in a situation that is near to production.\ncreate directory for testing\nCode 17 Bytes\n1mkdir poc\n2cd poc/\ninstall and run authmagic example app\nCode 86 Bytes\n1npm install -g authmagic-cli\n2npm init -y\n3authmagic init -e\n4authmagic install\n5authmagic\nCode 153 Bytes\n1Note: make sure name in your package.json is not named as authmagic if you do not want to get an error npm refusing to install as a dependency of itself.\ngo to http://localhost:3000\n______________2019-11-08_09-30-14.png (F632927)\nenter email and click Send authorization link\nfollow Preview url form the console (similar to one on screenshot)\n______________2019-11-08_09-31-02.png (F632928)\nfollow Click here\n______________2019-11-08_09-31-34.png (F632929)\nCode 201 Bytes\n1Note: next I provide steps to intercept and change jwt token with BurpSuite and its JSON Web Tokens (JWT4B) plugin, as it is the easiest and quick way if more detailed explanation required let me know.\nclick 'Refresh token' and intercept its request\n______________2019-11-08_09-31-49.png (F632930)\n______________2019-11-08_09-32-33.png (F632931)\nchange payload parameter u inside token (e.g with JSON Web Tokens (JWT4B) plugin)\n______________2019-11-08_09-32-57.png (F632932)\n______________2019-11-08_09-33-15.png (F632933)\ndifferent email will be displayed\n______________2019-11-08_09-33-32.png (F632934)\nWhile testing you can put a breakpoint in poc/node_modules/authmagic-timerange-stateless-core/core.js file to line 10:\nCode 109 Bytes\n1const checkRefreshToken = (token, refreshToken, key) => {\n2  try {\n3    if(jwt.verify(refreshToken, key)) {\n4...\nor add a console.log after it like to this\nCode 75 Bytes\n1console.log(jwt.decode(token, {complete: true}), jwt.decode(refreshToken));\nto make sure that it is the authmagic-timerange-stateless-core responsible for handling token verification\nPatch\nSupporting Material/References:\nOPERATING SYSTEM VERSION: Linux Mint current\nNODEJS VERSION: 12.7.0\nNPM VERSION: 6.10.0\nWrap up\nI contacted the maintainer to let them know: [N]\nI opened an issue in the related repository: [N]\nImpact\nThis weakness provides opportunity to forge user's identity by changing information inside token's payload that is used to verify the client.\n\n",
  "severity": "[",
  "bounty": null,
  "weaknesses": "[",
  "screenshots": {},
  "disclosed_date": 1600247220,
  "report_url": "https://hackerone.com/reports/736522",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": "[",
  "vuln_description": "The authmagic-timerange-stateless-core module does not properly validate JWT tokens during the token reissuance process, allowing attackers to forge user identities by modifying the token payload.",
  "reason": "The vulnerability involves understanding JWT token handling and intercepting network requests, but the core issue is straightforward once the token validation oversight is identified.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "injection_classification": "}}}}"
}