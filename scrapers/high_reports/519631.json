{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "arinerron2 ",
  "title": "SQL Injection in \u2588\u2588\u2588\u2588",
  "content": "\nSummary\nThere is an SQL injection vulnerability in \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 in the /\u2588\u2588\u2588\u2588\u2588/recruiter/updapp.aspxpage, exploitable through theapp_id` form parameter.\nImpact\nAn attacker could use this vulnerability to control the content in the database, exfiltrate information, and obtain remote code execution.\nStep-by-step Reproduction Instructions\nVisit https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/Gateway/sso.aspx and sign in. Note that any user can create a user (and any privilege level works for this vulnerability as long as a user is signed in), so this should be considered an unauthenticated vulnerability.\nWith the Network tab of devtools open, visit https://\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588/recruiter/updapp.aspx\nReplay the GET request that returned the HTTP 500 error as a POST request with the body app_id='. This can be done by right clicking on the request, copying it as cURL, pasting the command in terminal, and appending -k -X POST --data \"app_id='\".\nNotice in the response, there is an error: ORA-01756: quoted string not properly terminated. This is because the single apostrophe (') caused the SQL query to be syntactically invalid.\nReplay the request in the same way as shown in #3, but with the body app_id='' (this time append -k -X POST --data \"app_id=''\" to the cURL command).\nNotice in the response, there is an error: ORA-01722: invalid number. This is because the double apostrophes ('') did not cause the SQL query to be syntactically invalid, but because aposrophes are not numbers, they caused a different error.\nRepeat step #3 as many times as you like. An odd number of apostrophes (') will cause the SQL query to fail because it is syntactically invalid, and an even number will cause it to fail because it is valid, but apostrophes are not numbers.\nI did not want to exploit this to get remote code execution because this is a live production system, but to get RCE, simply execute an SQL query that writes the file at https://raw.githubusercontent.com/danielmiessler/SecLists/master/Web-Shells/laudanum-0.8/aspx/shell.aspx to D:\\\u2588\u2588\u2588\u2588\u2588\u2588\\shell.aspx using the INTO OUTFILE syntax, then visit https://\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/shell.aspx\nSuggested Mitigation/Remediation Actions\nSanitize everything in the SQL query (use prepared statements), and validate the data before putting it in the query.\nNote: I wouldn't have been able to find this vulnerability if it wasn't for the fact that verbose error pages were enabled. Because they were, it leaked source code, and I could see that the SQL injection vulnerability existed before testing.\nImpact\nAn attacker could use this vulnerability to control the content in the database, exfiltrate information, and obtain remote code execution.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1566231660,
  "report_url": "https://hackerone.com/reports/519631",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Visit https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/Gateway/sso.aspx and sign in."
    ],
    [
      2,
      "With the Network tab of devtools open, visit https://\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588/recruiter/updapp.aspx"
    ],
    [
      3,
      "Replay the GET request that returned the HTTP 500 error as a POST request with the body app_id='. This can be done by right clicking on the request, copying it as cURL, pasting the command in terminal, and appending -k -X POST --data \"app_id='\"."
    ],
    [
      4,
      "Notice in the response, there is an error: ORA-01756: quoted string not properly terminated."
    ],
    [
      5,
      "Replay the request in the same way as shown in #3, but with the body app_id='' (this time append -k -X POST --data \"app_id=''\" to the cURL command)."
    ],
    [
      6,
      "Notice in the response, there is an error: ORA-01722: invalid number."
    ],
    [
      7,
      "Repeat step #3 as many times as you like. An odd number of apostrophes (') will cause the SQL query to fail because it is syntactically invalid, and an even number will cause it to fail because it is valid, but apostrophes are not numbers."
    ]
  ],
  "vuln_description": "There is an SQL injection vulnerability in \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 in the /\u2588\u2588\u2588\u2588\u2588/recruiter/updapp.aspx page, exploitable through the app_id form parameter. An attacker could use this vulnerability to control the content in the database, exfiltrate information, and obtain remote code execution.",
  "reason": "The vulnerability involves straightforward SQL injection techniques and does not require complex interactions or state manipulation. The discovery was facilitated by verbose error messages, making the vulnerability more apparent.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability is not related to authentication or authorization bypass. It is a direct input validation issue in the SQL query, which is not covered by the proposed methodologies for detecting IDOR or AuthN/AuthZ bypass vulnerabilities. The methodologies focus on swapping user sessions or resource IDs to test authorization boundaries, not on testing for SQL injection vulnerabilities.",
    "is_detectable": false
  }
}