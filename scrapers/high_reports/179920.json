{
  "reported_to": "WordPress",
  "reported_by": "b258ea62bf297b02afa9854 ",
  "title": "WordPress DB Class, bad implementation of prepare method guides to sqli and information disclosure",
  "content": "\nIssue 1: Method checks if first argument is an array and if it is, it avoids the rest of the arguments and uses the first argument array values as input.\nIssue 2: When input query has %s in it, then it quote and this guides to sql injection in case query that need to be prepared have quoted user controlled input in it.\nThis leaves all wordpress plugins/ themes potentially vulnerable on this two types of attack. As PoC sqli in bbpress wp plugin and core wp function is shown.\nPoC:\nThere is SQLi in bbpress in case anonymous posting is allowed. ( check bbpress-sqli.png)\nDemo for the Issue 1 and Issue 2 for the prepare method\nWordpress core function delete_metadata is vulnerable to sqli in case delete all e.g. last argument is true and meta value has value e.g. is user supplied / controlled.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1510602960,
  "report_url": "https://hackerone.com/reports/179920",
  "is_multi_component": false,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify a WordPress plugin or theme that uses the `prepare` method in the WordPress DB Class, such as bbPress when anonymous posting is allowed."
    ],
    [
      2,
      "Exploit the SQL injection vulnerability by submitting malicious input that includes user-controlled values in a query that uses `%s` in the `prepare` method, or by passing an array as the first argument to bypass proper escaping."
    ]
  ],
  "vuln_description": "The vulnerability involves two issues in the WordPress DB Class's `prepare` method: 1) it improperly handles arrays as the first argument, bypassing proper escaping, and 2) it incorrectly quotes `%s` placeholders, leading to SQL injection when user-controlled input is included in quoted queries. This affects plugins and themes using this method, such as bbPress and core WordPress functions like `delete_metadata`.",
  "reason": "The vulnerability requires understanding the internal implementation of the `prepare` method and how it interacts with user-supplied input. The attacker must recognize the subtle differences in handling arrays versus strings and the implications of quoting `%s` placeholders. However, once these behaviors are known, exploitation is straightforward.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves SQL injection due to improper handling of user-controlled input in the WordPress DB Class prepare method, which is not directly related to authentication or authorization bypass. The methodology described focuses on AuthN/AuthZ bypass and IDOR vulnerabilities by testing user sessions and resource access, not SQL injection vulnerabilities.",
    "is_detectable": false
  }
}