{
  "reported_to": "Rocket.Chat",
  "reported_by": "tomp1 ",
  "title": "SAML authentication bypass",
  "content": "\nSummary\nWhen using SAML authentication, responses are not checked properly. This allows attacker to inject/modify any assertions in the SAML response and thus, for example, authenticate as administrator.\nDescription\nFollowing code snippets are from app/meteor-accounts-saml/server/saml_utils.js\nWhen checking the signature, the first Signature element which is found in the whole response XML is used:\n316 const signature = xmlCrypto.xpath(doc, '//*[local-name(.)=\\'Signature\\' and namespace-uri(.)=\\'http://www.w3.org/2000/09/xmldsig#\\']')[0];\nAfter the XML signature has been verified, the code proceeds to use the first Response element found in the whole XML to get assertions and attributes.\n516 const response = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'Response')[0];\nHowever there is no check that the signature that was checked relates to the response element that is being used. Thus attacker can take a valid SAML response, with some valid signature, and add Response element, that has no signatures, in the beginning of the XML. The code finds the original signature and validates that, but proceeds to use the malicious Response element, which is found first in the document.\nAlso the validating the status from the response happens before signature validation\n501 const statusValidateObj = self.validateStatus(doc);\nReleases Affected:\nTested on 3.0.3 but appears to affect all versions based on the history of saml_utils.js file.\nSteps To Reproduce (from initial installation to vulnerability):\nConfigure the application to use SAML authentication\nWhen logging in, intercept the POST request with a proxy tool\nUse the attached samlbypasspoc.py file to create a new value for the parameter SAMLResponse. Run the script in python3 with the URL encoded SAMLResponse as argument.\nReplace the parameter value with the one given by the POC script and forward the request\nThis requires altering the POC to suite the configuration. Beginning from the line 25, you can alter the response elements as needed to desired values.\nIn the sample POC file, attributes OrganizationName and Email and the element NameID are changed. In the setup I tested this resulted in login as a newly created admin.\nSupporting Material/References:\nsamlbypasspoc.py\nSuggested mitigation\nRefactor the code so that the same elements (references) are used when checking the signature and when reading the attributes\nDo not use hard coded indexes when selecting the elements\nImpact\nSAML authentication can be bypassed and attacker can log in as any user (e.g. admin user)\n\n",
  "severity": [
    8.8,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Authentication - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1592515380,
  "report_url": "https://hackerone.com/reports/812064",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Configure the application to use SAML authentication"
    ],
    [
      2,
      "Intercept the SAML login POST request with a proxy tool"
    ],
    [
      3,
      "Modify the SAMLResponse parameter to inject a malicious Response element while keeping the original valid signature"
    ],
    [
      4,
      "Forward the modified request to authenticate as any user (e.g., admin)"
    ]
  ],
  "vuln_description": "The vulnerability is a SAML authentication bypass where the application fails to properly validate that the verified signature corresponds to the Response element being used. An attacker can inject a malicious Response element while keeping the original valid signature, allowing authentication as any user.",
  "reason": "The vulnerability involves understanding SAML authentication flow and XML structure manipulation, but the core issue (signature-response mismatch) is a known pattern in SAML implementations. The attack requires intercepting and modifying requests but doesn't involve complex application state manipulation.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "idor_detectable": false,
    "authnz_byppass_detectable": true
  }
}