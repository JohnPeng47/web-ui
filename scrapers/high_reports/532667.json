{
  "reported_to": "Node.js third-party modules",
  "reported_by": "phra ",
  "title": "Server Side JavaScript Code Injection",
  "content": "\nI would like to report a Service Side JavaScript Code Injection in fastify.\nIt allows an attacker that can control a single property name in the serialization schema to achieve Remote Command Execution in the context of the web server.\nModule\nmodule name: fastify\nversion: 2.2.0\nnpm page: https://www.npmjs.com/package/fastify\nModule Description\nAn efficient server implies a lower cost of the infrastructure, a better responsiveness under load and happy users. How can you efficiently handle the resources of your server, knowing that you are serving the highest number of requests as possible, without sacrificing security validations and handy development? Enter Fastify. Fastify is a web framework highly focused on providing the best developer experience with the least overhead and a powerful plugin architecture. It is inspired by Hapi and Express and as far as we know, it is one of the fastest web frameworks in town.\nModule Stats\n39,119 downloads in the last week\nVulnerability\nVulnerability Description\nDescription about how the vulnerability was found and how it can be exploited, how it harms package users (data modification/lost, system access, other.\nSteps To Reproduce:\nDetailed steps to reproduce with all required references/steps/commands. If there is any exploit code or reference to the package source code this is the place where it should be put.\nPatch\nEscape \", ' and ` in properties names in schema definition.\nSupporting Material/References:\nState all technical information about the stack where the vulnerability was found\nOS: Kali Rolling\nNodeJS: 11.9\nNPM: 6.5.0\nfast-json-stringify: 1.14.0\nWrap up\nSelect Y or N for the following statements:\nI contacted the maintainer to let them know: Y (sent message to Matteo Collina)\nI opened an issue in the related repository: N\nImpact\nIf an attacker can control somehow the schema definition, he/she can achieve arbitrary code execution as the user running the web server.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1570141020,
  "report_url": "https://hackerone.com/reports/532667",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify a property name in the serialization schema that can be controlled by an attacker"
    ],
    [
      2,
      "Inject malicious JavaScript code into the controlled property name during schema definition"
    ]
  ],
  "vuln_description": "The vulnerability is a Server Side JavaScript Code Injection in fastify, where an attacker controlling a property name in the serialization schema can achieve Remote Command Execution in the context of the web server.",
  "reason": "The vulnerability requires understanding of the schema serialization process in fastify and the ability to inject code through property names, which is a non-obvious interaction between schema definition and code execution.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves server-side JavaScript code injection in the fastify module, which is not related to authentication or authorization (AuthN/AuthZ) issues. The proposed methodologies focus on detecting AuthN/AuthZ bypasses and IDOR vulnerabilities by manipulating user sessions, actions, and resource IDs within the same application context. Since this vulnerability is about code injection via schema property manipulation and not about crossing authorization boundaries, it falls outside the scope of the described detection methodologies.",
    "is_detectable": false
  }
}