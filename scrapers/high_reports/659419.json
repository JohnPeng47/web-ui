{
  "reported_to": "WordPress",
  "reported_by": "gnux ",
  "title": "Reflected XSS on https://make.wordpress.org via 'channel' parameter",
  "content": "\nHi there,\nI just found a reflected XSS on make.wordpress.org domain.\nsteps to reproduce :\nvisit this link : https://make.wordpress.org/chat/logs?channel=16%22%3E%3Cimg%20src=x%20onerror=alert(document.domain)%3E&date=2019-07-21&no_bots=1\nxss pop up will occurs\nPOC:\nsee:wp reflected xss.png\nNote: it works on the latest version of firefox\nImpact\nsome of xss impact like stealing cookies, session hijacking, etc ..\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Reflected"
  ],
  "screenshots": {},
  "disclosed_date": 1566794700,
  "report_url": "https://hackerone.com/reports/659419",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Visit the URL: https://make.wordpress.org/chat/logs?channel=16%22%3E%3Cimg%20src=x%20onerror=alert(document.domain)%3E&date=2019-07-21&no_bots=1"
    ],
    [
      2,
      "Observe the XSS pop-up displaying the document.domain"
    ]
  ],
  "vuln_description": "A reflected XSS vulnerability exists on the make.wordpress.org domain via the 'channel' parameter. The vulnerability allows an attacker to inject malicious JavaScript code that gets executed in the context of the victim's browser session.",
  "reason": "The vulnerability is straightforward to discover as it involves a simple injection of a malicious payload into a URL parameter, which is a common and well-documented attack vector. The attack does not require multiple components, complex state manipulation, or novel logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The reflected XSS vulnerability involves injecting malicious scripts via a URL parameter, which is not directly related to authentication or authorization bypass. The methodology described focuses on testing authorization boundaries by swapping user sessions and resource IDs, not on detecting input validation flaws like XSS.",
    "is_detectable": false
  }
}