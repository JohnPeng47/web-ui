{
  "reported_to": "Node.js third-party modules",
  "reported_by": "pontus_johnson ",
  "title": "[ascii-art] Command injection",
  "content": "\nI would like to report a command injection vulnerability in the ascii-art npm module.\nIt allows arbitrary shell command execution through a maliciously crafted command line argument.\nModule\nmodule name: ascii-art\nversion: 1.4.3\nnpm page: https://www.npmjs.com/package/ascii-art\nModule Description\nImages, fonts, tables, ansi styles and compositing in Node.js & the browser. 100% JS.\nIn the beginning there was colors.js but in the fine tradition of vendors calling out a problem they have the solution to, chalk was introduced. In that same vein, I offer ascii-art as an update, expansion and generalization of MooAsciiArt and at the same time it can replace your existing ansi colors library.\nIt features support for Images, Styles, Tables and Figlet Fonts as well as handling multi-line joining automatically.\nModule Stats\n56 downloads in the last day\n217 downloads in the last week\n1432 downloads in the last month\nVulnerability\nVulnerability Description\nascii-art does not sanitize the target command line argument, and subsequently passes it to child_process.exec(), thus allowing arbitrary shell command injection.\nSteps To Reproduce:\nInstall ascii-art: sudo npm install -g ascii-art (On a pristine Google Cloud instance, I also had to install pkg-config, libcairo2-dev, libjpeg-dev and libgif-dev, and then install ascii-art with unsafe-perm=true).\nRun ascii-art with malicious argument: ascii-art preview 'doom\"; touch /tmp/malicious; echo \"'\nCheck that the injected command was executed: ls /tmp/\nPatch\nCommand execution happens here:\nexec('open \"http://www.figlet.org/fontdb_example.cgi?font='+target.toLowerCase()+'.flf\"')\nexec could be replaced by execFile, which would force developers to separate the command and its arguments.\nSupporting Material/References:\nOperating system: Debian GNU/Linux 9.5 (stretch)\nNode.js v8.11.3\nnpm v5.6.0\nWrap up\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nImpact\nArbitrary shell command execution.\n\n",
  "severity": [
    8.6,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Command Injection - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1536410160,
  "report_url": "https://hackerone.com/reports/390631",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install ascii-art: sudo npm install -g ascii-art (On a pristine Google Cloud instance, I also had to install pkg-config, libcairo2-dev, libjpeg-dev and libgif-dev, and then install ascii-art with unsafe-perm=true)."
    ],
    [
      2,
      "Run ascii-art with malicious argument: ascii-art preview 'doom\"; touch /tmp/malicious; echo \"'"
    ]
  ],
  "vuln_description": "ascii-art does not sanitize the target command line argument, and subsequently passes it to child_process.exec(), thus allowing arbitrary shell command injection.",
  "reason": "The vulnerability involves a straightforward command injection through unsanitized input passed to child_process.exec(). The attack does not require multiple components, complex state manipulation, or novel logic. It is a classic example of command injection, which is a well-known vulnerability pattern.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection through unsanitized input passed to child_process.exec(), which is not related to authentication or authorization boundaries. The proposed methodologies focus on AuthN/AuthZ and IDOR vulnerabilities by testing user sessions and resource access controls, not command injection vulnerabilities.",
    "is_detectable": false
  }
}