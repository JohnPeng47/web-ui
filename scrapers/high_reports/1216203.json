{
  "reported_to": "Mattermost",
  "reported_by": "shielder ",
  "title": "Mattermost Server OAuth Flow Cross-Site Scripting",
  "content": "\nSummary:\nThe vulnerability is a reflected Cross-Site Scripting (XSS) via the OAuth flow. A victim clicking a malicious link pointing to the target Mattermost host will trigger the XSS. If the victim is a regular user, it is possible to obtain all of their Mattermost chat contents; if it\u2019s an administrator, it is possible to create a new administrator.\nRoot Cause Analysis:\nThe application fails to sanitize an HTTP query parameter before reflecting it within the HTML response during the OAuth flow.\nCode 657 Bytes\n1        if props != nil {\n2                action = props[\"action\"]\n3                isMobile = action == model.OAUTH_ACTION_MOBILE\n4                if val, ok := props[\"redirect_to\"]; ok {\n5[1]                     redirectURL = val\n6                        hasRedirectURL = redirectURL != \"\"\n7                }\n8        }\n9        renderError := func(err *model.AppError) {\n10                if isMobile && hasRedirectURL {\n11[2]                     utils.RenderMobileError(c.App.Config(), w, err, redirectURL)\n12                } else {\n13                        utils.RenderWebAppError(c.App.Config(), w, r, err, c.App.AsymmetricSigningKey())\n14                }\n15        }\nThe file \"/web/oauth.go\" (https://github.com/mattermost/mattermost-server/blob/master/web/oauth.go) contains the function \"completeOAuth\" which on line 284 values the variable \"redirectURL\" with the parameter \"redirect_to\" [1] of the query string of the HTTP GET request. Subsequently always inside of the same function to the line 291 comes called the function \"utils.RenderMobileError\" to which it comes passed like argument the variable \"redirectURL\" [2].\nCode 1.24 KiB\n1func RenderMobileError(config *model.Config, w http.ResponseWriter, err *model.AppError, redirectURL string) {\n2        RenderMobileMessage(w, `\n3                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\" style=\"width: 64px; height: 64px; fill: #ccc\">\n4                        <!-- Font Awesome Free 5.15.3 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) -->\n5                        <path d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/>\n6                </svg>\n7                <h2> `+i18n.T(\"error\")+` </h2>\n8                <p> `+err.Message+` </p>\n9[1]                <a href=\"`+redirectURL+`\">\n10                        `+i18n.T(\"api.back_to_app\", map[string]interface{}{\"SiteName\": config.TeamSettings.SiteName})+`\n11                </a>\n12        `)\n13}\nThe function \"RenderMobileError\" is contained within the file \"utils/api.go\" (https://github.com/mattermost/mattermost-server/blob/master/utils/api.go) at line 103, and the fourth argument of this function is \"redirectURL\". At line 104 the \"RenderMobileMessage\" function is called and at line 111 the variable \"redirectURL\" is concatenated (without being sanitised) with another string argument of the \"RenderMobileMessage\" function [1].\nCode 350 Bytes\n1[...]\n2                        </head>\n3                        <body>\n4                                <!-- mobile app message -->\n5                                <div class=\"message-container\">\n6[1]                                     `+message+`\n7                                </div>\n8                        </body>\n9                </html>\n10        `)\nInside the \"RenderMobileMessage\" function (declared at line 117 of utils/api.go) \"fmt.Fprintln\" is called to print the HTTP response and the HTML page is dynamically built concatenating the \"message\" variable [1] (second argument of the function).\nCall graph:\ncompleteOAuth -(redirectURL=redirect_to)-> util.RenderMobileError(,redirectURL) -(message=string+redirectURL)-> RenderMobileMessage(,message) -> fmt.Fprintln(string+message)\nSince the HTTP GET request parameter \"redirect_to\" is never sanitized and is appended to the HTML page, it is possible to trigger a reflected XSS.\nSteps To Reproduce:\nVisit the following URL after replacing <mattermost_url> with the domain/ip of the mattermost server instance:\nhttps://<mattermost_url>/oauth/shielder/mobile_login?redirect_to=%22%3E%3Cimg%20src=%22%22%20onerror=%22alert(%27zi0Black%20@%20Shielder%27)%22%3E\nNotice the JavaScript's generated pop-up\nSupporting Material/References:\n[attachment / F1324661]\nImpact\nThe following attack scenarios have been identified:\nIf the victim is a regular user, the attacker could read the messages sent and received by the user.\nIf the victim is an administrative user, the attacker could change the server settings (e.g. add a new administrative user).\n\n",
  "severity": [
    7.1,
    null
  ],
  "bounty": 900,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Reflected"
  ],
  "screenshots": {},
  "disclosed_date": 1628272860,
  "report_url": "https://hackerone.com/reports/1216203",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Visit the following URL after replacing <mattermost_url> with the domain/ip of the mattermost server instance: https://<mattermost_url>/oauth/shielder/mobile_login?redirect_to=%22%3E%3Cimg%20src=%22%22%20onerror=%22alert(%27zi0Black%20@%20Shielder%27)%22%3E"
    ],
    [
      2,
      "Notice the JavaScript's generated pop-up"
    ]
  ],
  "vuln_description": "The vulnerability is a reflected Cross-Site Scripting (XSS) via the OAuth flow in Mattermost Server. A victim clicking a malicious link pointing to the target Mattermost host will trigger the XSS. If the victim is a regular user, it is possible to obtain all of their Mattermost chat contents; if it\u2019s an administrator, it is possible to create a new administrator. The root cause is the application's failure to sanitize the 'redirect_to' HTTP query parameter before reflecting it within the HTML response during the OAuth flow.",
  "reason": "The vulnerability involves a straightforward reflected XSS attack where the 'redirect_to' parameter is directly injected into the HTML response without sanitization. The attack does not require complex interactions between components or manipulation of application states. The discovery process mainly involves identifying the unsanitized parameter and crafting a simple XSS payload.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves a reflected XSS via the OAuth flow where an unsanitized 'redirect_to' parameter is reflected in the HTML response. The proposed methodologies focus on authentication and authorization bypasses (AuthN/AuthZ) and IDOR vulnerabilities by testing different user sessions and resource IDs. However, this XSS vulnerability does not involve authorization bypass or IDOR; it's a client-side injection issue that requires user interaction (clicking a malicious link). The methodologies described do not cover testing for unsanitized input reflection in HTML responses, which is the root cause of this vulnerability.",
    "is_detectable": false
  }
}