{
  "reported_to": "Monero",
  "reported_by": "minerscan ",
  "title": "Array Index Underflow--http rpc",
  "content": "\nSummary:\nparserse_base_utils.h:197\nconst unsigned char tmp = isx[(int)*++it];\nInt type will cause the array subscript to appear negative and read wrong data,\nSolution:\nconst unsigned char tmp = isx[(unsigned char)*++it];\nReleases Affected:\nup to date version on github ## Steps To Reproduce: [add details for how we can reproduce the issue]\n#include <iostream>\n#include \"serialization/keyvalue_serialization.h\"\n#include \"storages/portable_storage_template_helper.h\"\n#include \"storages/portable_storage_base.h\"\n#ifdef __cplusplus\nextern \"C\"\n#endif\nint LLVMFuzzerTestOneInput(const char *data, size_t size) {\nstd::string s(data,size);\ntry\n{\nepee::serialization::portable_storage ps;\nps.load_from_json(s);\n}\ncatch (const std::exception &e)\n{\nstd::cerr << \"Failed to load from binary: \" << e.what() << std::endl;\nreturn 1;\n}\nreturn 0;\n}\nSupporting Material/References:\nseed file attached\nImpact\n1.crash\n2.leaking of sensitive info\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 2,
  "weaknesses": [
    "Array Index Underflow"
  ],
  "screenshots": {},
  "disclosed_date": 1633998900,
  "report_url": "https://hackerone.com/reports/825091",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Prepare a seed file that triggers the array index underflow vulnerability."
    ],
    [
      2,
      "Run the fuzzer with the prepared seed file to observe the crash or data leak."
    ]
  ],
  "vuln_description": "The vulnerability is an array index underflow in the parser_base_utils.h file, where casting a char to an int can result in a negative array index, leading to reading wrong data or a crash. The solution is to cast the char to an unsigned char to prevent negative indices.",
  "reason": "The vulnerability involves a straightforward type casting issue that can be identified with basic static analysis or fuzzing. It does not require complex interactions between multiple components or deep understanding of the application's logic.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}