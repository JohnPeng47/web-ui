{
  "reported_to": "shopify-scripts",
  "reported_by": "h72 ",
  "title": "Segmentation fault when a Ruby method is invoked by a C method via Object#send",
  "content": "\nWe can arrange for C to call Object#send by aliasing it over initialize. This will cause Class#new (a C function) to call #initialize (which is actually Object#send) with arbitrary arguments.\nIf we invoke a Ruby method through Object#send, mruby segfaults:\nCode 76 Bytes\n1def foo\n2end\n3\n4class X\n5  alias_method :initialize, :send\n6end\n7\n8X.new.send(:foo)\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 8000,
  "weaknesses": [
    "Uncontrolled Resource Consumption"
  ],
  "screenshots": {},
  "disclosed_date": 1492132020,
  "report_url": "https://hackerone.com/reports/183425",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Define a simple Ruby method 'foo'"
    ],
    [
      2,
      "Create a class 'X' and alias 'initialize' to 'send'"
    ],
    [
      3,
      "Call 'X.new.send(:foo)' to trigger the segmentation fault"
    ]
  ],
  "vuln_description": "The vulnerability involves a segmentation fault in mruby when a Ruby method is invoked by a C method via Object#send. This occurs due to aliasing 'initialize' to 'send' in a class, which causes Class#new (a C function) to call #initialize (now Object#send) with arbitrary arguments, leading to a crash.",
  "reason": "The attack requires understanding the interaction between Ruby's method invocation and C functions, specifically how aliasing 'initialize' to 'send' can disrupt normal method dispatch. This involves subtle interactions between Ruby and C components, but the steps to reproduce are straightforward once the interaction is understood.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}