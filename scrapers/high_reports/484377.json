{
    "reported_to": "U.S. Dept Of Defense",
    "reported_by": "archang31 ",
    "title": "Information Disclosure (can access all \u2588\u2588\u2588s) within \u2588\u2588\u2588\u2588\u2588\u2588\u2588 view \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 Portal",
    "content": "\nSummary: Once \u2588\u2588\u2588\u2588\u2588\u2588\u2588 authenticated (I did not mess around to see if I could reproduce without authentication), any user can view any \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 simply by changing the offasgid HTTP GET parameter value in the \u2588\u2588\u2588\u2588\u2588\u2588 view \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 portal link.\nDescription:\nI was looking through my previous \u2588\u2588\u2588\u2588\u2588\u2588\u2588s and noticed I was receiving urls like https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/portal/viewrfo.aspx?offasgid=MjAwODAyMTg1Nw== . This url is clearly expecting a HTTP GET parameter offasgid with some base64 encoded value. Decoding this value, you get 2008021857 . The \u2588\u2588\u2588\u2588\u2588 in question was my first \u2588\u2588\u2588\u2588\u2588 from February 2008. From testing several IDs, I determined the format is {year}{\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 #} so 2008, \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 # 021857. I simply incremented this value to 2008021858, base64 encoded this value, and browsed to https://\u2588\u2588\u2588/portal/viewrfo.aspx?offasgid=MjAwODAyMTg1Ng== . Here, I was able to see \u2588\u2588\u2588\u2588\u2588\u2588\u2588. I also tested the next value ( https://\u2588\u2588\u2588/portal/viewrfo.aspx?offasgid=MjAwODAyMTg1NQ== ) and got \u2588\u2588\u2588\u2588\u2588. Finally, I opened a new private browser window (so no cookies) and browsed directly to that last link. I had to reauthenticate, but I then was able to directly assess \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588. At this point, I stopped interacting with the website to submit this vulnerability.\nNOTE: I did not save any record of these \u2588\u2588\u2588\u2588\u2588\u2588\u2588s outside except the single attached screenshot.\nNOTE2: I tried a couple more values during this write-up to better understand the ID. I initially thought the 02 from 2008021858 was the month {year}{month}{id} but its just {year}{id}. I used 2018000001 and ended up with an \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 from 20171001 (the very first day of the 2018 fiscal year). I also tested a couple IDs to see how far back the data goes. I used 1999000001 to pull an \u2588\u2588\u2588\u2588\u2588\u2588 from 19980327. I believe this is the very first \u2588\u2588\u2588\u2588\u2588 in the system. I tried 1997000001 as well, and it simply returned a blank \u2588\u2588\u2588\u2588 (i.e. the ID does not exist).\nImpact\nIn a relatively simple and predictable manner (due to the sequential IDs), any user with access to \u2588\u2588\u2588\u2588\u2588 can incrementally view every \u2588\u2588\u2588 issued by \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 dating back to 1998. This data includes SSN last 4, EFMP information, branch, and assignment information. From this data, one can extract all sorts of information about the U.S. \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 personnel including total \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 strength, \u2588\u2588\u2588\u2588 strength by branch, assignment history, strength by base, etc.\nStep-by-step Reproduction Instructions\nLog into \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 (https://\u2588\u2588\u2588.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588.\u2588\u2588\u2588\u2588\u2588\u2588\u2588.mil/)\nBrowse to any \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 you want to view like https://\u2588\u2588\u2588\u2588/portal/viewrfo.aspx?offasgid=MjAxOTAxMDg2NQ== if you want to view my most recent \u2588\u2588\u2588.\nModify offasgid value as desired to view any other \u2588\u2588\u2588\u2588\u2588\u2588\u2588 (they seem to be incrementing IDs by year)\nProduct, Version, and Configuration (If applicable)\nSuggested Mitigation/Remediation Actions\nFirst, the offasgid needs to be random and not a predictable value. Secondly, there needs to be some access check based on the provided cookie (user credentials) to ensure that user should be able to access that record.\nImpact\nIn a relatively simple and predictable manner (due to the sequential IDs), any user with access to \u2588\u2588\u2588\u2588 can incrementally view every \u2588\u2588\u2588\u2588\u2588\u2588\u2588 issued by \u2588\u2588\u2588\u2588\u2588\u2588 dating back to 1998. This data includes SSN last 4, EFMP information, branch, and assignment information. From this data, one can extract all sorts of information about U.S. \u2588\u2588\u2588\u2588 personnel including total \u2588\u2588\u2588 strength, \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 strength by branch, assignment history, strength by base, etc.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Information Disclosure"
    ],
    "screenshots": {},
    "disclosed_date": 1570575480,
    "report_url": "https://hackerone.com/reports/484377",
    "is_multi_component": false,
    "complexity": "LOW",
    "novelty": "LOW",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Log into the system and navigate to a specific URL with a base64 encoded offasgid parameter."
        ],
        [
            2,
            "Modify the offasgid parameter by incrementing or decrementing the decoded value to access other records."
        ]
    ],
    "vuln_description": "The vulnerability allows any authenticated user to access sensitive records by manipulating a predictable sequential ID in the offasgid parameter of a URL. This leads to unauthorized information disclosure of records dating back to 1998, including sensitive personal and assignment details of personnel.",
    "reason": "The attack involves a straightforward manipulation of a predictable ID parameter in the URL. While it requires understanding the encoding and format of the ID, the steps to exploit are simple and do not involve complex interactions or states.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}