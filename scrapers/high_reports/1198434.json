{
    "reported_to": "U.S. Dept Of Defense",
    "reported_by": "brumens ",
    "title": "Cache Posioning leading do Denial of Service on `www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588`",
    "content": "\nHey!\nTo be clear. This was not an test for Denial of service (DOS). I accidentally come a cross this vulnerability when I was testing for Server side request forgery (SSRF). I have read you policy well and I was not preforming any type of activity that harmed or slowed you system in anyway. You can read why below when I explain the cache poisoning vulnerability that is the core of the impact.\nVulnerability Cache Posioning (CPDoS)\nCache Posioning Denial Of Service (CPDoS) [1] is taking advantage of 301 redirects by storing an false value of either domain, port or header that effect the response in any way. This makes the cache server store the false value and later delivery it to all users that view the domain page.\nThis vulnerability is in fact an Cache poisoning [2] in the ground which makes it possible to not harm the system in any way when testing. This is because it's possible to add random URL path to the domain that make only that path exploited under x time.\nAn attacker will use intruder to update the cache server every x sec, min or hours to make the domain down.\nSummary\nThe vulnerability was discovered when I was testing for SSRF in the host header field. I notice that it was behaving weard so I added an random parameter in the URL field of the domain that made it redirect with code 301. This ended up in an reflection of the URL bar in the response.\nWhen the URL of the redirect was reflected I was able to add an random port number and store it into the cache server.\nProof Of Concept\n\u2588\u2588\u2588\nSupported link\n[1] https://cpdos.org/ - \"What is CPDoS?\", Vulnerability explained\n[2] https://portswigger.net/research/responsible-denial-of-service-with-web-cache-poisoning - \"Responsible denial of service with web cache poisoning\", James Kettle\nBest regards,\nAlex\nImpact\nAn attacker is able to Cache posioning the host header. This makes the cache server to store an incorrect port number from the server response and deliver out that incorrect domain and port combined to all users that try access the domain. This make the domain crash and unable to view for users.\nAttackers view\nFor an real attacker to take use of this he/she will disable the random paramter at the url and send it to the home direcly. This will make the domain crash fully\nSystem Host(s)\nwww.\u2588\u2588\u2588\nAffected Product(s) and Version(s)\n/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nCVE Numbers\nSteps to Reproduce\nWARNING! Do not send the request until the step to send the request comes. Otherwise you can by mistage crash the whole domain.\nOpen an browser that is connected to Burp suite\nVisit: https://www.\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588?\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nIntercept the request with Burp suite and add it to the repeater.\nIMPORTEN Add an random parameter at the end as example: &CPDoS=1 in the url bar. (See video POC).\nAdd an nonexcisting port at the host header domain. Ex: 1234 Your request raw data should look like below: {F1302641}\nIf an random paramter is added at the end AND the port is added to the host header. You can now send the request in Burp suite repeater tab. The data will look similary to:\nCode 59 Bytes\n1GET /\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588?\u2588\u2588\u2588\u2588\u2588\u2588\u2588CPDoS=1 HTTP/1.1\n2Host: www.\u2588\u2588\u2588\u2588\u2588\u2588:1234\nYou will see an 301 that do redirect and reflect the port you gave inside the request.\nIn the request raw data. Delete the port number inside the host header.\nSend the request now one more time. You will see the port you added before is still reflecting in the 301 redirect code. This indicates that it's now cache poisoned and the domain path is down. Image: FullRequest.png \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 <- Might not render...\nSuggested Mitigation/Remediation Actions\nConfigure the cache server to not store the host header.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Uncontrolled Resource Consumption"
    ],
    "screenshots": {},
    "disclosed_date": 1625869200,
    "report_url": "https://hackerone.com/reports/1198434",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Open a browser connected to Burp Suite and visit the target URL with a random parameter added (e.g., https://www.\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588?\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588&CPDoS=1)."
        ],
        [
            2,
            "Intercept the request in Burp Suite, modify the Host header to include a non-existent port (e.g., Host: www.\u2588\u2588\u2588\u2588\u2588:1234), and send the request."
        ],
        [
            3,
            "Observe the 301 redirect response reflecting the fake port. Remove the port from the Host header and resend the request to confirm the cache poisoning."
        ]
    ],
    "vuln_description": "Cache Poisoning Denial of Service (CPDoS) vulnerability where an attacker can poison the cache server by manipulating the Host header with a non-existent port, causing the server to deliver incorrect responses to users and potentially crash the domain.",
    "reason": "The attack involves understanding cache behavior, manipulating HTTP headers, and observing server responses, but the steps are straightforward once the initial interaction is identified.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}