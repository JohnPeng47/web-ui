{
  "reported_to": "WordPress",
  "reported_by": "skansing ",
  "title": "Wordpress 4.7.2 - Two XSS in Media Upload when file too large.",
  "content": "\nDescription\nAn attacker can inject a malicious script in to the filename which a victim tries to upload leading to XSS inside the administrators control panel.\nTwo different \"file to large\" cases end up in interpolating the file name and appending it into DOM unsanitized leading to XSS.\nI have attached pictures of one of the cases, in the attached case the file was 12.4 MB, in a freshly installed environment. For reproduction note that any file type can be used (.jar whatever) as the vuln happens before the type is validated.\nPoC\nCreate a 20MB file called\nDinosaurs secret life<img src=x onerror=alert(1)>.png\nGoto your wordpress site http://127.0.0.1/wp-admin/media-new.php and dragndrop or use file manager or choose the file via. the \"Select Files\" button.\nA error will appear with ... exceeds the maximum upload size for this site. along with a alert box to display that the payload has been executed.\nDetails on XSS\nThe file script-loader.php prepares an array of messages for use later.\nCode 291 Bytes\n1\t// error message for both plupload and swfupload\n2\t$uploader_l10n = array(\n3                ...\n4\t\t'file_exceeds_size_limit' => __('%s  exceeds the maximum upload size for this site.'),\n5\t\t'big_upload_failed' => __('Please try uploading this file with the %1$sbrowser uploader%2$s.'),\n6\t\t...\n7\t);\nThe payload will be injected into the %s in the key file_exceeds_size_limit.\nThis happens because the $uploader_l10n is passed to handlers.min.js (non minified version shown)\nand interpolated without escaping the value previously.\nFirst the value passes trough a error case\nCode 351 Bytes\n1// $uploader_l10n\n2case plupload.FILE_SIZE_ERROR:\n3\t\t\tuploadSizeError(uploader, fileObj); // fileObj contains the filename payload in name attribute.\n4\t\t\tbreak;\n5....\n6if ( max > hundredmb && fileObj.size > hundredmb )\n7\t\t\t\twpFileError( fileObj, pluploadL10n.big_upload_failed.replace('%1$s', '<a class=\"uploader-html\" href=\"#\">').replace('%2$s', '</a>') );\nand lastely interpolated and appended to the dom.\nCode 502 Bytes\n1\n2function uploadSizeError( up, file, over100mb ) {\n3\tvar message;\n4\n5\tif ( over100mb )\n6\t\tmessage = pluploadL10n.big_upload_queued.replace('%s', file.name) + ' ' + pluploadL10n.big_upload_failed.replace('%1$s', '<a class=\"uploader-html\" href=\"#\">').replace('%2$s', '</a>');\n7\telse\n8\t\tmessage = pluploadL10n.file_exceeds_size_limit.replace('%s', file.name);\n9\n10\n11\tjQuery('#media-items').append('<div id=\"media-item-' + file.id + '\" class=\"media-item error\"><p>' + message + '</p></div>');\n12\tup.removeFile(file);\n13}\nThe critical lines are\nCode 264 Bytes\n1message = pluploadL10n.big_upload_queued.replace('%s', file.name) + ' ' + pluploadL10n.big_upload_failed.replace('%1$s', '<a class=\"uploader-html\" href=\"#\">').replace('%2$s', '</a>');\n2\telse\n3\t\tmessage = pluploadL10n.file_exceeds_size_limit.replace('%s', file.name);\nSuggested fix:\nRemove the filename or escape safely in context.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1500349920,
  "report_url": "https://hackerone.com/reports/203515",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Create a large file (e.g., 20MB) with a malicious filename containing an XSS payload, such as 'Dinosaurs secret life<img src=x onerror=alert(1)>.png'."
    ],
    [
      2,
      "Upload the file to a WordPress site via the media uploader (e.g., http://127.0.0.1/wp-admin/media-new.php) using drag-and-drop, file manager, or the 'Select Files' button."
    ]
  ],
  "vuln_description": "An attacker can inject a malicious script into the filename of a file that exceeds the maximum upload size limit. When the upload fails due to size, the filename is interpolated into an error message without proper sanitization, leading to XSS in the administrator's control panel.",
  "reason": "The vulnerability involves understanding the file upload process and error handling in WordPress, but the XSS payload injection is straightforward once the file size limit is known. The interaction between the filename and the error message is a common XSS vector, making the discovery process less complex.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves XSS through file uploads where the filename is not sanitized before being inserted into the DOM. This is a client-side vulnerability that does not involve authentication or authorization checks, nor does it involve swapping user sessions or resource IDs to test access controls. The methodology described focuses on AuthN/AuthZ bypasses and IDOR vulnerabilities, which are server-side issues related to access control. The XSS vulnerability in question is not detectable by the proposed methodology because it does not fit into the categories of AuthN/AuthZ bypass or IDOR.",
    "is_detectable": false
  }
}