{
  "reported_to": "Node.js third-party modules",
  "reported_by": "vrechson ",
  "title": "[wappalyzer] ReDoS allows an attacker to completely break Wappalyzer",
  "content": "\nHello folks!\nplease note that I'm reporting two different problematic regexes.\nmodule name: Wappalyzer\nversion: 6.0.2\nnpm page: https://www.npmjs.com/package/wappalyzer\nModule Description\nWappalyzer identifies technologies on websites.\nModule Stats\nWeekly downloads: 1,290\n88 open issues\n16 open pull requests\nlast publish: 3 days ago\nVulnerability\nReDoS (Catastrophic backtracking)\nVulnerability Description\nAn attacker can make wappalyzer (all drivers, like browser extension and cli) stop working due to ReDoS in one of it's services regex .\nSteps To Reproduce:\nCreate a web page with the following tag: <meta name=\"GENERATOR\" content=\"IMPERIA 46197946197946197946197946197946197946197946197946197946197946197946197946197946197946197946197946197966228761662296:\"/>\nNow open this page using wappalyzer extension in browser or it's cli\nWappalyzer will stop answering and it's CPU percentage will start to increase to high levels\nPatch\nIn order to test this issue, you can see that the problem resides in this line https://github.com/AliasIO/wappalyzer/blob/master/src/apps.json#L13207 of wappalyzer application. When this regex test the input shown, it takes process the application indefinitely, making it stop working. Running it in browser extension completely crash the extension in all tabs, and in cli/node version the execution takes forever.\nTo patch this issue, the current regex must be changed to a more restrict one in this piece: ([0-9.]{2,})+\nSupporting Material/References:\nState all technical information about the stack where the vulnerability was found\nOS: Archlinux - Linux 5.6.13-arch1-1 #1 SMP PREEMPT Thu, 14 May 2020 06:52:53 +0000 x86_64 GNU/Linux\nNode version: v12.16.3\nNPM version: 6.14.5\nFirefox: 76.0.1 (64-bit) - Mozilla Firefox for Arch Linux - archlinux - 1.0\nReScuE was used to test for ReDoS (https://github.com/2bdenny/ReScue)\nWrap up\nSelect Y or N for the following statements:\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nHope I'm helping making node app more safe. thank you!\nImpact\nAn attacker can make wappalyzer stop working in it's pages, or pages in which he has injection and make user CPU starts to throttle\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Uncontrolled Resource Consumption"
  ],
  "screenshots": {},
  "disclosed_date": 1596768960,
  "report_url": "https://hackerone.com/reports/888030",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a web page with the following tag: <meta name=\"GENERATOR\" content=\"IMPERIA 46197946197946197946197946197946197946197946197946197946197946197946197946197946197946197946197946197966228761662296:\"/>"
    ],
    [
      2,
      "Open this page using the Wappalyzer browser extension or CLI"
    ]
  ],
  "vuln_description": "The vulnerability is a ReDoS (Regular Expression Denial of Service) in Wappalyzer, where a specially crafted meta tag causes catastrophic backtracking in a regex pattern, leading to high CPU usage and making Wappalyzer unresponsive.",
  "reason": "The vulnerability involves identifying a problematic regex pattern in the application's configuration and crafting a simple input to trigger the ReDoS. The discovery requires understanding regex behavior but does not involve complex interactions or state manipulation.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}