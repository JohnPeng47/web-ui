{
    "reported_to": "curl",
    "reported_by": "medianmedianstride ",
    "title": "curl proceeds with unsafe connections when -K file can't be read",
    "content": "\nSummary:\nI'm using curl 7.82.0 on Linux. When the file specified by the -K option can't be read, curl sends network traffic as specified by the other options that are explicitly included on the command line (in other words, there's only a warning and I'd like it to be a fatal error). This behavior occurs even if those other options result in an action that's often considered unsafe, such as use of cleartext passwords. It's fine for curl to be capable of sending cleartext passwords, but this shouldn't happen unintentionally.\nI feel that this is a vulnerability in curl because curl is able to recognize that the user's intended set of options was not specified correctly, but curl still decides to send network traffic corresponding to the known subset of those options. One might argue that, philosophically, curl prefers to send network traffic even if the user's input is underspecified; however, this isn't true elsewhere in curl. For example, if the user misspells one of the options on the command line, curl doesn't simply ignore that one, and do whatever is specified by the remaining, correctly spelled options. Instead, any misspelled option is a fatal error, and curl sends no network traffic at all. My suggestion is to make this -K situation consistent with that, i.e., if the file specified by -K can't be read, then that is a fatal error and no network traffic is sent.\nSteps To Reproduce:\nBegin typing a curl command line that uses the -K option followed by a filename.\nCreate the file with that filename.\nWithin the file, include a curl option that is typically regarded as making network traffic more safe, e.g., the --ssl-reqd option.\nEnsure that the curl process cannot read this file.\nEnter the curl command.\nObserve that curl does not exit with an error message stating that the file can't be read.\nObserve that curl makes the network connection without the safety measure chosen in step 3.\nSupporting Material/References:\nA fatal error is the approach taken by many other programs in analogous cases, i.e., the program allows a security-relevant user-specified configuration file on the command line, and that file can't be read, e.g.,\nCode 399 Bytes\n1  % ssh -F /home/user/my-safe-ssh-options/not-exist.config example.com\n2  Can't open user config file /home/user/my-safe-ssh-options/not-exist.config: No such file or directory\n3\n4  % tar -X /home/user/list-of-my-private-key-files/not-exist.config -c -f public.tar .\n5  tar: /home/user/list-of-my-private-key-files/not-exist.config: No such file or directory\n6  tar: Error is not recoverable: exiting now\nIn other words, ssh realizes it would be wrong to simply use the system-wide SSH client configuration when the user is clearly trying to use a different configuration. The tar program realizes it would be wrong to simply place every file into a public archive, when the user is clearly trying to use -X to exclude specific files. With curl, the user is clearly trying to add some options, which may perhaps be critical for security in that user's use case.\nHere's an example in which a curl user wishes to send secret credentials to an FTP server only if the FTP server supports SSL, analogous to the curl --ssl-reqd ftp://example.com example on the https://curl.se/docs/manpage.html page. The user chooses to use only a filename (named my-curl-ftp-options.config below), not a full pathname, with the -K option, just as in the curl --config file.txt https://example.com example on that page.\nThis example includes a user mistake, but the vulnerability is also relevant without any user mistake.\nSSL detection works fine if the user's current working directory contains the my-curl-ftp-options.config file. However, the user then makes the realistic mistake of changing to a different working directory without changing the -K value. (Here, the user goes to the /mnt/LargeVolume/user directory because it has much more disk space for storing the large FTP downloads.) Indeed, curl warns the user, but then immediately sends the unsafe network traffic.\nFor purposes of the example, ftp.dlink.de is used (it always demands a password, but all combinations of usernames and passwords succeed).\nPart 1\nCode 776 Bytes\n1% /usr/bin/curl -L -s -S -o /home/user/curl https://github.com/moparisthebest/static-curl/releases/download/v7.82.0/curl-i386\n2% chmod +x /home/user/curl\n3% /home/user/curl --version\n4curl 7.82.0 (x86_64-pc-linux-muslx32) libcurl/7.82.0 OpenSSL/1.1.1l zlib/1.2.11 libssh2/1.9.0 nghttp2/1.43.0\n5Release-Date: 2022-03-05\n6Protocols: dict file ftp ftps gopher gophers http https imap imaps mqtt pop3 pop3s rtsp scp sftp smb smbs smtp smtps telnet tftp \n7Features: alt-svc AsynchDNS HSTS HTTP2 HTTPS-proxy IPv6 Largefile libz NTLM NTLM_WB SSL TLS-SRP UnixSockets\n8% pwd\n9/home/user/ftp\n10% cat my-curl-ftp-options.config\n11--ssl-reqd\n12% /home/user/curl -K my-curl-ftp-options.config -u secretu:secretp --no-progress-meter ftp://ftp.dlink.de 2>&1 | head -6\n13curl: (64) Requested SSL level failed\nPart 2\nCode 622 Bytes\n1% cd /mnt/LargeVolume/user\n2% ls -1\n3001-huge-file-from-ftp-server.dat\n4002-huge-file-from-ftp-server.dat\n5% /home/user/curl -K my-curl-ftp-options.config -u secretu:secretp --no-progress-meter ftp://ftp.dlink.de 2>&1 | head -6\n6Warning: error trying read config from the 'my-curl-ftp-options.config' file\n7drwxrwxrwx   1 user     group           0 Mar 16  2016 @archive\n8drwxrwxrwx   1 user     group           0 Jul 03  2020 anleitungen\n9drwxrwxrwx   1 user     group           0 Mar 16  2016 ant24\n10drwxrwxrwx   1 user     group           0 Mar 16  2016 ant70\n11drwxrwxrwx   1 user     group           0 Nov 20 14:40 aspnet_client\nIn Part 2, the cleartext network traffic exchanged begins with:\nCode 133 Bytes\n1220 D-Link FTP Server.ready ...\n2USER secretu\n3331 Password required for secretu.\n4PASS secretp\n5230-Willkommen auf dem D-Link FTP-Server\nIn Part 1, the network traffic exchanged is the following. The cleartext password is never sent:\nCode 70 Bytes\n1220 D-Link FTP Server.ready ...\n2AUTH SSL\n3534 AUTH command is disabled.\nAs mentioned above, if the user had underspecified the desired network traffic by misspelling an option (e.g., the wrong spelling --ssl-required instead of the correct spelling -ssl-reqd), then there would be a fatal error, and no network traffic (such as a cleartext password) would be sent:\nCode 190 Bytes\n1% /home/user/curl --ssl-required -u secretu:secretp --no-progress-meter ftp://ftp.dlink.de 2>&1 | head -6\n2curl: option --ssl-required: is unknown\n3curl: try 'curl --help' for more information\nIn a more realistic case, the user would not use ftp.dlink.de, but would instead use a series of FTP servers that are normally intended to support SSL. The user would want to place --ssl-reqd in a configuration file because it applies to every server. However, the user would want to place the username and password on the command line because they are different for every server.\nAn exploitation scenario (protocol downgrade attack) without a user mistake is:\nThe victim user has a midnight cron job that is supposed to use curl for FTP with SSL. It has \"-K /home/user/ftp/my-curl-ftp-options.config\" on the command line; that file exists and contains a --ssl-reqd line.\nThe curl binary is on local disk, but the user's home directory (including the /home/user/ftp/my-curl-ftp-options.config file) is on an NFS file server.\nThe attacker is already able to disrupt availability (e.g., flood the NFS server for a few minutes at midnight to make it unresponsive) but has no way to disrupt the confidentiality or integrity of curl's use of SSL.\nBecause /home/user/ftp/my-curl-ftp-options.config can't be read, curl doesn't know that SSL was desired, and thus sends the password in cleartext.\nThe attacker can read the password off of the wire.\nThis vulnerability report is not specific to FTP or SSL. There are many other scenarios in which a missing option makes the network traffic less safe, and they add motivation for introducing a fatal error when the -K file can't be read. Some of the other scenarios are:\nthe user intended to have --digest in that file, and curl instead makes an HTTP request with a cleartext password\nthe user intended to have --append in that file, and curl instead overwrites the target file\nthe user intended to have --proxy (followed by the name of an anonymizing proxy server) in that file, and curl instead reveals the user's endpoint IP address to the server operator\nImpact\nIn the main example above, the attacker can discover a cleartext password. More generally, the attacker can achieve any security impact that any curl option was trying to prevent. For example, the victim's source IP address may be leaked if the curl option was to use a proxy server. The connection may honor a revoked certificate if the curl option was to specify a local file with a Certificate Revocation List. Several others may also be relevant depending on the protocols and threat model.\n\n",
    "severity": [
        8.0,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "Improper Check or Handling of Exceptional Conditions"
    ],
    "screenshots": {},
    "disclosed_date": 1650569880,
    "report_url": "https://hackerone.com/reports/1542881",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Create a curl command using -K option with a configuration file containing security options (e.g., --ssl-reqd)"
        ],
        [
            2,
            "Run the command in a directory where the configuration file is inaccessible"
        ]
    ],
    "vuln_description": "When curl fails to read a configuration file specified with -K, it proceeds with the connection using only the command-line options, potentially bypassing security measures specified in the inaccessible file. This can lead to unsafe operations like sending cleartext passwords when SSL was intended.",
    "reason": "The vulnerability involves understanding curl's behavior with configuration files and command-line options, but the interaction is straightforward once noticed. The main complexity comes from recognizing that missing files don't abort execution, which is non-obvious but not deeply hidden.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}