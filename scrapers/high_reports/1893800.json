{
  "reported_to": "HackerOne",
  "reported_by": "rcoleman ",
  "title": "SQL Injection in CVE Discovery Search ",
  "content": "\nSummary:\nUnsanitized user-controlled inputs in the CVE Discovery Search allow for SQL injection.\nDescription:\nSearch terms are split on whitespace but no additional sanitization is applied, allowing arbitrary SQL statements, such as a blind or timing-based attack.\nSteps To Reproduce\nVisit https://hackerone.com/intelligence/cve_discovery\nEnter a search term that normally returns results, plus an injection payload such as //AND//'1%'='1 and confirm that the results are still returned\nChange the payload to //AND//'1%'='0 and confirm that no results are returned\nOptional: Your Environment (Browser version, Device, etc)\nChrome\nOptional: Supporting Material/References (Screenshots)\n<image_0>\nImpact\nDisclosure of data in Analytics Database, including report, team, and asset data\n\n",
  "severity": [
    7.5,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/efdy81zir08lb5he5632ixuofv3a?response-content-disposition=attachment%3B%20filename%3D%22image.png%22%3B%20filename%2A%3DUTF-8%27%27image.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWDNVDTOV%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T003437Z&X-Amz-Expires=1331&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIFfYz76VgKIVelpAyZYrTFyd%2Bv888ECgb3hj5JkFANhaAiBakh4q7w5DF%2BQv%2FfR5eWubo4B2u%2Bo1QPF29kQLxJJCtSq7BQj0%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIMaTuljdCxi50w8QUmKo8FD%2BiOVbeXUa7mNlCRPUySpi4kddXYtD2seD5WI2%2F2DmARIyxhjceaM8TKf%2BSYoZzhII3Lo%2BxB9bhtM5mq5GHf8dhuKa6wT1fnf6QzZEKaUgSCbLM07nMLMlW8kqutXY0X59awJLzZ1yQMPBhBi80DLAkNvswgcBRW4v5P7iqkX0ggbzpmcRST%2FVm29J8Y5JKSc3LejY6AEIsv4KP6HB8aQXd%2BfsBH5R%2Bv6nok8pt6DJSaPkv5WA74F1I2%2FsmQsyL3exdqZLhvUP%2B6eTtLSHhdrEDhOIY34aESXhoik3RW%2B8g32NTyeA3P2G9e%2F4F7a3Rx6v%2BE7XMojKylsb5WIGfTy8QvhnCQCH9ukOo6rO5xOtdoQw%2BU4WqZuOTJU74EkFLV6%2FyUVWSq4FVDYEYqrbwizaX9y%2FV2Cy9LgrEtMK6sn8DZ3ViZlKyuxY19GNuJ5sW0c0M4RHngn3EmFJO0aNsL0r%2BbolwLdLRfuYtJe5DmZwCoKEbDaNAUonhneBWF55jLQZHoGAoWZ6qMF%2BevUTo0Jql5kULJryvcc%2FFpS8lTO%2BOZ3fGiS1eQAI2Fz0703T3mmda4haYMEOXNijTbkWhBg5v9JYyT2oqNlXBK7WUSUCkENcoqMjC4Z4VbEGjG4jS2qi%2BTYrhX4S3Sb1T987q8w6MeoXfX6tGmDYwiyj5QpWbUDz7cYSR0EBMdQlqeDG94vE59xzsfUrmstdXm%2FFxukqgG%2B7WWbJ1DxPiM3ia6sOr977IrFajGqovgtqRLgyGpz%2F9TqWE3RwWypLQ084%2FW16SLKEEufJUuPDTkr6LyX%2FDeWbUHVMs85EWTJG9ustt2iOq1%2F11LdHrP2SbFR46XOj69Mtw5xz%2F6iYaqUFV4ejD8yoa%2FBjqyAYwDDYybi7D4pT0wCry5lOVh3Zq%2B8g6G5jdIa7jf8%2FaU312%2BiIcARtKrUoF2Sn0ak6xLhjw%2BJVOcFyXg%2FOHRvGjaHhYmekMQ96U1XkJfdyuitawsi7z%2FEymOHQV%2BY9%2Bfo8XothwNtx6eE%2FG6W1iLa%2BedAtMC1tXYp3IvbXoZrn4jPRRJ5G0BroF0e3VIz4sm1tGxNoieH9VOPyqjIvF8mLhji1Uw2M%2F8ryzZmpR%2Fx4z3q1Q%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a28748e077e1c530de068177485704b2dd210c1ddaef2ee013571e7d1459a44a"
  },
  "disclosed_date": 1678150320,
  "report_url": "https://hackerone.com/reports/1893800",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Visit https://hackerone.com/intelligence/cve_discovery"
    ],
    [
      2,
      "Enter a search term that normally returns results, plus an injection payload such as //AND//'1%'='1 and confirm that the results are still returned"
    ],
    [
      3,
      "Change the payload to //AND//'1%'='0 and confirm that no results are returned"
    ]
  ],
  "vuln_description": "Unsanitized user-controlled inputs in the CVE Discovery Search allow for SQL injection. Search terms are split on whitespace but no additional sanitization is applied, allowing arbitrary SQL statements, such as a blind or timing-based attack.",
  "reason": "The vulnerability involves a straightforward SQL injection attack with no complex interactions or state manipulations required. The attack is based on common SQL injection techniques and does not require novel logic or deep understanding of the application's internal workings.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves unsanitized user inputs leading to potential SQL injection, which is not directly related to authentication or authorization bypass. The proposed methodologies focus on testing authorization boundaries by swapping user sessions or resource IDs, not on input sanitization or SQL query manipulation.",
    "is_detectable": false
  }
}