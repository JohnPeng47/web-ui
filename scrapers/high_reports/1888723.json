{
    "reported_to": "U.S. Dept Of Defense",
    "reported_by": "0r10nh4ck ",
    "title": " WordPress application vulnerable to DoS attack via wp-cron.php",
    "content": "\nDescription:\nHi team,\nThe WordPress application is vulnerable to a Denial of Service (DoS) attack via the wp-cron.php script. This script is used by WordPress to perform scheduled tasks, such as publishing scheduled posts, checking for updates, and running plugins.\nAn attacker can exploit this vulnerability by sending a large number of requests to the wp-cron.php script, causing it to consume excessive resources and overload the server. This can lead to the application becoming unresponsive or crashing, potentially causing data loss and downtime.\nI found this vulnerability at https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 endpoint.\nReferences\nhttps://developer.wordpress.org/plugins/cron/\nImpact\nA successful attack on this vulnerability can result in the following consequences:\nDenial of Service (DoS) attacks, rendering the application unavailable.\nServer overload and increased resource usage, leading to slow response times or application crashes.\nPotential data loss and downtime.\nSystem Host(s)\n\u2588\u2588\u2588\u2588\u2588\u2588\nAffected Product(s) and Version(s)\nCVE Numbers\nSteps to Reproduce\nGet the doser.py script at https://github.com/Quitten/doser.py\nUse this command to run the script:\nCode 54 Bytes\n1python3 doser.py -t 999 -g 'https://\u2588\u2588\u2588\u2588\u2588/wp-cron.php'\nGo to https://\u2588\u2588\u2588\u2588 after 1000 requests of the doser.py script.\nThe site returns code 502.\nSee the video PoC.\nSuggested Mitigation/Remediation Actions\nTo mitigate this vulnerability, it is recommended to disable the default WordPress wp-cron.php script and set up a server-side cron job instead.\nHere are the steps to disable the default wp-cron.php script and set up a server-side cron job:\nAccess your website's root directory via FTP or cPanel File Manager.\nLocate the wp-config.php file and open it for editing.\nAdd the following line of code to the file, just before the line that says \"That's all, stop editing! Happy publishing.\":\nCode 32 Bytes\n1define('DISABLE_WP_CRON', true);\nSave the changes to the wp-config.php file.\nSet up a server-side cron job to run the wp-cron.php script at the desired interval. This can be done using the server's control panel or by editing the server's crontab file.\n\n",
    "severity": [
        9.0,
        10.0
    ],
    "bounty": null,
    "weaknesses": [
        "Uncontrolled Resource Consumption"
    ],
    "screenshots": {},
    "disclosed_date": 1681507440,
    "report_url": "https://hackerone.com/reports/1888723",
    "is_multi_component": false,
    "complexity": "LOW",
    "novelty": "LOW",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Download the doser.py script from https://github.com/Quitten/doser.py"
        ],
        [
            2,
            "Run the script with the command: python3 doser.py -t 999 -g 'https://\u2588\u2588\u2588\u2588\u2588/wp-cron.php'"
        ],
        [
            3,
            "After sending 1000 requests, visit https://\u2588\u2588\u2588\u2588 to observe the site returning a 502 error"
        ]
    ],
    "vuln_description": "The WordPress application is vulnerable to a Denial of Service (DoS) attack via the wp-cron.php script. An attacker can overload the server by sending a large number of requests to wp-cron.php, causing the application to become unresponsive or crash.",
    "reason": "The vulnerability involves a straightforward attack vector (flooding a known endpoint) without requiring complex interactions or state manipulation. The wp-cron.php script is a well-documented and standard component of WordPress, making its exploitation predictable.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}