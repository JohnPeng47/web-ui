{
  "reported_to": "Valve",
  "reported_by": "splatt581 ",
  "title": "Malformed save files (.sav) allow to write files with arbitrary extensions and content in GoldSrc-based games.",
  "content": "\nThe structure of the save file implies unpacking of temporary files with extensions .HL1, .HL2 and .HL3. In the code of command 'load', there is a check for invalid substrings, such as .., so unpacking the files into the top directories will not work. Also, it seems, there is a code for checking the file extension by substring *.HL?. So, the problem is that it seems that checking for the presence of this substring is valid throughout the file path, and not just at its end. Therefore, such a check can be bypassed by inserting a substring in the middle of the file path and setting its extension.\nIn the attached archive there is a demonstration file fakeresource.sav, which in turn unpacks the file test.HL1.dll with the ASCII string 'Hello World!' inside.\nHow to reproduce it:\n1) Put the file fakeresource.sav in the path %gamedir%/SAVE/;\n2) Launch the game client and type in the console load fakeresource;\nThe file test.HL1.dll will appear in the folder SAVE next to the file fakeresource.sav.\nAlso, files can be unpacked into internal child directories, with the help of this it can be loaded into memory, the game client simply starts to connect to the mailicious server:\n1) The server downloads the file SAVE/fakeresource.sav to the game client;\n2) After downloading the file, the server, using the messages SVC_StuffText or SVC_Director, execute the following string in the client console _setgamedir %gamedir%_downloads;_restart. Let's take a closer look at this string:\n_setgamedir %gamedir%_downloads - sets the directory in which the .sav file is downloaded, for its subsequent load;\n_restart - applying the above changes.\n3) Since the client was on the server, when the engine is restarted, it starts to reconnect to it. This time the server executes the following string in the client console logsdir SAVE/test.HL1/cl_dlls;log on;_setgamedir %gamedir%_downloads/SAVE/test.HL1;load fakeresource;_restart. Consider more:\nlogsdir SAVE/test.HL1/cl_dlls;log on - creates directories into which the .dll file will be unpacked, because files cannot be unpacked in non-existent directories;\n_setgamedir %gamedir%_downloads/SAVE/test.HL1 - sets the directory against which the engine will try to load the client library 'cl_dlls/client.dll' into memory when restarted;\nload fakeresource - unpacks the file along the path SAVE/test.HL1/cl_dlls/client.dll;\n_restart - restarts the engine to apply changes and load the new library into memory.\nAs a proof, there is a video in the attached archive showing the connection to the test server, which downloads such a .dll file to the client with a call to MsgBox.\nImpact\nA malicious server can download the .sav file to the game client, execute commands on the client console to unpack a binary file, such as .dll, and load its malicious code into the client\u2019s memory.\n\n",
  "severity": [
    7.7,
    null
  ],
  "bounty": 1500,
  "weaknesses": [
    "Malware"
  ],
  "screenshots": {},
  "disclosed_date": 1582545900,
  "report_url": "https://hackerone.com/reports/458842",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Place the file fakeresource.sav in the path %gamedir%/SAVE/"
    ],
    [
      2,
      "Launch the game client and type in the console 'load fakeresource'"
    ],
    [
      3,
      "Observe the file test.HL1.dll appearing in the SAVE folder"
    ],
    [
      4,
      "For memory loading, connect to a malicious server that downloads fakeresource.sav and executes console commands to unpack and load the DLL"
    ]
  ],
  "vuln_description": "The vulnerability involves malformed save files (.sav) in GoldSrc-based games that allow writing files with arbitrary extensions and content. The issue arises from improper validation of file paths during the unpacking of temporary files, enabling attackers to bypass extension checks and write malicious files, such as DLLs, which can then be loaded into memory.",
  "reason": "The attack requires understanding the save file structure, bypassing extension checks, and manipulating the game's file loading mechanism. It involves multiple steps, including crafting a malicious .sav file, executing console commands, and potentially leveraging server-client interactions to load malicious code.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}