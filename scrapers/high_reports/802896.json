{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "bags ",
  "title": "CVE-2017-13019:  The PGM parser in tcpdump before 4.9.2 has a buffer over-read in print-pgm.c:pgm_print()",
  "content": "\nHello,\nThe vulnerable code portion is linked below. The linked function is responsible for printing PGM packet payload information to the terminal (e.g., stdout)\nhttps://github.com/the-tcpdump-group/tcpdump/commit/4601c685e7fd19c3724d5e499c69b8d3ec49933e\nThe issue may be reproduced as follows\nCheck out vulnerable tcpdump commit (< 4.9.2) as follows\nCode 100 Bytes\n1$ git clone -b 26a6799b9ca80508c05cac7a9a3bef922991520b https://github.com/the-tcpdump-group/tcpdump\nBuild it with afl and AddressSanitizer as follows (please install libpcap before this step)\nCode 37 Bytes\n1$ CC=afl-gcc\n2$ AFL_USE_ASAN=1 make -j\nRun tcpdump against linked payload (link: https://github.com/the-tcpdump-group/tcpdump/blob/4601c685e7fd19c3724d5e499c69b8d3ec49933e/tests/pgm_opts_asan_2.pcap?raw=true)\nCode 2.86 KiB\n1$ tcpdump -nvr <payload>\n2reading from file /tmp/pgm_opts_asan_2.pcap, link-type EN10MB (Ethernet)\n3=================================================================\n4==3947==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60800000007d at pc 0x5560b85896f6 bp 0x7ffe420b1ca0 sp 0x7ffe420b1c90\n5READ of size 4 at 0x60800000007d thread T0\n6    #0 0x5560b85896f5 in EXTRACT_32BITS extract.h:190\n7    #1 0x5560b85896f5 in pgm_print print-pgm.c:697\n8    #2 0x5560b849f20c in ip_print_demux print-ip.c:483\n9    #3 0x5560b849f20c in ip_print print-ip.c:658\n10    #4 0x5560b84506df in ethertype_print print-ether.c:334\n11    #5 0x5560b84531d1 in ether_print print-ether.c:237\n12    #6 0x5560b84531d1 in ether_if_print print-ether.c:262\n13    #7 0x5560b83b76be in pretty_print_packet print.c:332\n14    #8 0x5560b839062d in print_packet tcpdump.c:2590\n15    #9 0x5560b8663ee8 in pcap_offline_read savefile.c:561\n16    #10 0x5560b8652e5e in pcap_loop pcap.c:2737\n17    #11 0x5560b8383fed in main tcpdump.c:2093\n18    #12 0x7f7aaf546b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n19    #13 0x5560b838c009 in _start (/home/bhargava/work/github/tcpdump/tcpdump+0x17c009)\n20\n210x60800000007f is located 0 bytes to the right of 95-byte region [0x608000000020,0x60800000007f)\n22allocated by thread T0 here:\n23    #0 0x7f7aafc0ab50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)\n24    #1 0x5560b8664c7a in pcap_check_header sf-pcap.c:404\n25\n26SUMMARY: AddressSanitizer: heap-buffer-overflow extract.h:190 in EXTRACT_32BITS\n27Shadow bytes around the buggy address:\n28  0x0c107fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n29  0x0c107fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n30  0x0c107fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n31  0x0c107fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n32  0x0c107fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n33=>0x0c107fff8000: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00[07]\n34  0x0c107fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n35  0x0c107fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n36  0x0c107fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n37  0x0c107fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n38  0x0c107fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n39Shadow byte legend (one shadow byte represents 8 application bytes):\n40  Addressable:           00\n41  Partially addressable: 01 02 03 04 05 06 07 \n42  Heap left redzone:       fa\n43  Freed heap region:       fd\n44  Stack left redzone:      f1\n45  Stack mid redzone:       f2\n46  Stack right redzone:     f3\n47  Stack after return:      f5\n48  Stack use after scope:   f8\n49  Global redzone:          f9\n50  Global init order:       f6\n51  Poisoned by user:        f7\n52  Container overflow:      fc\n53  Array cookie:            ac\n54  Intra object redzone:    bb\n55  ASan internal:           fe\n56  Left alloca redzone:     ca\n57  Right alloca redzone:    cb\n58==3947==ABORTING\nIt is acknowledged here(link: https://github.com/the-tcpdump-group/tcpdump/commit/4601c685e7fd19c3724d5e499c69b8d3ec49933e) that I (Bhargava Shastry) am the original reporter of the issue.\nTo prove that this hackerone account belongs to me, I have hosted a file with the following message on my github page(link: https://bshastry.github.io/.well-known/hackerone.txt)\nCode 30 Bytes\n1hello @turtle_shell @hackerone\nIf you have any further queries, please let me know.\nTracked as CVE-2017-13019: https://nvd.nist.gov/vuln/detail/CVE-2017-13019\nImpact\nI believe that information disclosure is possible.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Buffer Over-read"
  ],
  "screenshots": {},
  "disclosed_date": 1629618900,
  "report_url": "https://hackerone.com/reports/802896",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Clone the vulnerable version of tcpdump (< 4.9.2): git clone -b 26a6799b9ca80508c05cac7a9a3bef922991520b https://github.com/the-tcpdump-group/tcpdump"
    ],
    [
      2,
      "Run tcpdump against the malicious payload: tcpdump -nvr <payload>"
    ]
  ],
  "vuln_description": "The vulnerability is a buffer over-read in the PGM parser of tcpdump before version 4.9.2, specifically in the print-pgm.c:pgm_print() function. This flaw allows an attacker to read beyond the allocated buffer boundaries when processing specially crafted PGM packets, potentially leading to information disclosure.",
  "reason": "The vulnerability requires understanding of the PGM protocol parsing logic and buffer handling in tcpdump, but the attack itself is straightforward once the malicious packet is crafted. The main complexity lies in identifying the exact buffer boundary conditions in the parser.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}