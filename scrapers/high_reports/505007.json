{
  "reported_to": "X (Formerly Twitter)",
  "reported_by": "jlleitschuh ",
  "title": "[Twitter Open Source] Releases were & are built/executed/tested/released in the context of insecure/untrusted code",
  "content": "\nSummary:\nCWE-829: Inclusion of Functionality from Untrusted Control Sphere\nCWE-494: Download of Code Without Integrity Check\nTwitter maintains several Open Source Projects under the Twitter GitHub organization. These projects contain build files that indicate that some of these projects are resolving dependencies over HTTP instead of HTTPS. This allows these artifacts to be potentially MITMed to maliciously compromise them and infect the build artifacts that are produced. Additionally, if any of these JARs or other dependencies were compromised, any developers or production servers using these could continue to be infected past updating to fix this.\nDescription:\nThis attack leverages the build infrastructure loading dependencies over HTTP without any other sort of integrity check to allow them to be maliciously compromised.\nThis isn't just theoretical\nPOC code has existed since 2014 to maliciously compromise a JAR file inflight.\nSee:\nhttps://max.computer/blog/how-to-take-over-the-computer-of-any-java-or-clojure-or-scala-developer/\nhttps://github.com/mveytsman/dilettante\nMITM Attacks Increasingly Common\nSee:\nhttps://serverfault.com/a/153065\nhttps://security.stackexchange.com/a/12050\nComcast continues to inject its own code into websites you visit (over HTTP)\nSource Locations\nInsecure Download\nScrooge\nhttps://github.com/twitter/scrooge/blob/b8fb8b563cb152b5d46c2ec8a24c9c134cdde140/project/plugins.sbt#L1-L6\nTormentia\nhttps://github.com/twitter/tormenta/blob/50cf4773fd188a6ae82ab87e306a58c064cced1e/project/plugins.sbt#L1-L3\nScalding\nhttps://github.com/twitter/scalding/blob/19429900e9fcdaa5c38160f0b68b579aac3f4604/project/plugins.sbt#L1-L7\nDiffy\nhttps://github.com/twitter/diffy/blob/7894459430d27d184d3663e0570f535a93fa61c6/project/plugins.sbt#L3\nBijection\nhttps://github.com/twitter/bijection/blob/11c8325bb734bb3bd36d8d7ac6dd1dd48d82f7e3/project/plugins.sbt#L2\nAlgebird\nhttps://github.com/twitter/algebird/blob/01f989f4ad534c1450ab0982669393ba1817a6d1/project/plugins.sbt#L1-L5\nHdfs-Du\nhttps://github.com/twitter/hdfs-du/blob/5caaa0cf117ed1ebbe873ec1e8302a535bd0bc5d/pom.xml#L64-L75\nIago\nhttps://github.com/twitter/iago/blob/019a4adfbfa913e6307cdc5a589089e95cfb6285/examples/echo/pom.xml#L17-L28\nAmbrose\nhttps://github.com/twitter/ambrose/blob/da7bcb932c418c157d9c372a4ca5f1884b874d78/cascading/pom.xml#L14-L19\nhttps://github.com/twitter/ambrose/blob/da7bcb932c418c157d9c372a4ca5f1884b874d78/scalding/pom.xml#L22-L27\nBookKeeper\nhttps://github.com/twitter/bookkeeper/blob/91c85ab8350dfc00c2bc07f0bed338ce4d87b2f6/bookkeeper-stats-providers/twitter-finagle-provider/pom.xml#L48-L53\nElephant-Bird\nhttps://github.com/twitter/elephant-bird/blob/62642c935198aa0ff968f48669c7e654b42dfbf0/cascading3/pom.xml#L13-L18\nJOAuth\nhttps://github.com/twitter/joauth/blob/b4f6afb6be79ecb0bb8d04c76b17cfa51de4ffab/project/plugins/Plugins.scala#L10-L16\nEct...\nThis list is not exaustive, I just wanted to come up with examples so the Twitter security team could get a general sense of what they are looking for.\nHere are the GitHub queries I used to find these:\nSBT Builds with Resolvers over HTTP\nMaven POM files with Repositories over HTTP\nWARNING! If any of these builds are using a shared or reused ~/.gradle, ~/.m2 or whatever SBT uses as an artifact cache between builds and any of these downloads were maliciously compromised, the compromised jar may remain inside of cache directory and continue to be used in future builds.\nFix and Public Disclosure\nAt a minimum, all of these code locations where artifacts are downloaded from an untrusted source needs to be fixed. Previous releases should be rebuilt with the fix applied. The checksum of the released artifacts and artifacts built in a trusted environment should be made. If the checksums match, you can be certain that they weren't compromised.\nIf the checksums don't match, indicating a compromised artifact, CVE numbers need to be issued for the potentially malicious artifacts.\nThe ability to check if checksums match assume that these projects have reproducible builds.\nSteps To Reproduce:\nCone the Impacted Project\nChange this line in Dilettante so it is targeting the repository used in the build. https://github.com/mveytsman/dilettante/blob/master/dilettante.py#L143\nStart Dilettante on your local machine.\nProxy the HTTP traffic for the build through Dilettante\nExecute the Build's tests.\nYou should be greeted with the image of a cat.\nOther Places to Look\nGiven how widely I'm finding this vulnerablity externally to Twitter, I'd advise that the Twitter Security team take some time to also analize their internal infrastructure for similar vulnerabilities.\nThis responsible disclosure follows Google's 90-day vulnerability disclosure policy (I'm not an employee of Google, I just like their policy).\nImpact\nBy insecurely downloading code over an untrusted connection HTTP and executing the untrusted code inside of these JAR files as part of the unit/integration tests before a release opens these artifacts up to being maliciously compromised.\nRemote code execution on a production server. Malicious compromise of build artifacts.\n\n",
  "severity": [
    8.1,
    null
  ],
  "bounty": 280,
  "weaknesses": [
    "Cryptographic Issues - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1576289280,
  "report_url": "https://hackerone.com/reports/505007",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Clone the impacted project"
    ],
    [
      2,
      "Modify the Dilettante script to target the repository used in the build"
    ],
    [
      3,
      "Start Dilettante on your local machine"
    ],
    [
      4,
      "Proxy the HTTP traffic for the build through Dilettante"
    ],
    [
      5,
      "Execute the Build's tests"
    ]
  ],
  "vuln_description": "Twitter's open-source projects resolve dependencies over HTTP instead of HTTPS, making them vulnerable to MITM attacks. This allows malicious actors to compromise build artifacts by injecting malicious code during the download process. The vulnerability affects multiple projects and can lead to remote code execution on production servers.",
  "reason": "The vulnerability involves identifying insecure dependency resolution in build files, which is a straightforward process once the build files are examined. The attack leverages known MITM techniques and existing proof-of-concept tools, making the discovery process less complex.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}