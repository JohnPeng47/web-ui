{
  "reported_to": "Nextcloud",
  "reported_by": "theguynamedguy86 ",
  "title": "In Dockerized Environments, Failing to Read config.php Grants Any Anonymous User Full Admin Access",
  "content": "\nConsider this deployment:\nNextcloud is already installed in a Dockerized environment.\nThere are two Nextcloud containers running in the environment.\nBoth containers share the same MySQL database.\nBoth containers share the same data (/var/www/html/data) and config (/var/www/html/config) via NFS-mounted or SMB-mounted Docker volumes.\nAll of the values Nextcloud needs to complete first-run setup (database name and credentials, admin credentials, etc) are provided to both containers via environment variables (NEXTCLOUD_ADMIN_USER, NEXTCLOUD_ADMIN_PASSWORD, MYSQL_HOST, MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD).\nNow, consider that one or both of the containers encounter an issue reading /var/www/html/config/config.php. This could be caused by an of the following:\nTransient failure connecting to the NFS/SMB server at the time either container is launching or restarting (especially in response to a failed Liveness check).\nTimeout or other transient failure in communication with the NFS/SMB server while the container is already running.\nOne container attempting to read config.php while the other container is writing to the file, causing an incomplete read (possibly making the file look empty).\nIn this situation, Nextcloud will assume that it is NOT installed (since the config seems empty). As a result, Nextcloud will launch the installer the next time ANY user requests a page from the container that temporarily cannot read the config.php file. This causes that instance of Nextcloud to overwrite the config.php with a new file that has the same database credentials as the old file (populating the credentials from the environment variables), but the new config flags Nextcloud as not yet being installed (i.e. installed is set to FALSE). Some time later, assuming that NFS/SMB services have been restored to normal (e.g. the transient issue has disappeared), ALL containers will now happily serve up the Nextcloud installer to ANY user because the container that failed to read the configuration file wrote a new one with a newer timestamp that indicates Nextcloud is not installed.\nFrom here, ANY user who stumbles upon the installer page can provide ANY username and password and end up with a new admin account with full access to the existing Nextcloud installation.\nNextcloud should NOT allow the installer to be run if ANY database tables already exist in the target database. If this is not possible, Nextcloud should at least not allow the installer to be run if any admin users exist in the target database.\nImpact\nAn attacker interested in taking over an existing installation of Nextcloud could write a script to frequently monitor that installation until such a time as that installation suffers a temporary issue reading config.php and starts serving up the installer. At that point, the attacker can hop over to the installation, finish the setup process, and create a username and password of their choice to gain full admin access to the entire Nextcloud installation.\nWith admin access, the attacker can lock out all of the existing users of the system, change system settings, and download or erase all of the files on the Nextcloud installation.\n\n",
  "severity": [
    8.7,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1564238520,
  "report_url": "https://hackerone.com/reports/522876",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Set up a Dockerized environment with two Nextcloud containers sharing the same MySQL database and mounted volumes for data and config."
    ],
    [
      2,
      "Simulate a transient failure where one container cannot read /var/www/html/config/config.php, causing Nextcloud to launch the installer."
    ],
    [
      3,
      "Access the Nextcloud instance from an anonymous user perspective during the failure state."
    ],
    [
      4,
      "Complete the installer process to create a new admin account with arbitrary credentials."
    ]
  ],
  "vuln_description": "In a Dockerized Nextcloud environment with shared database and config volumes, a transient failure to read config.php can cause Nextcloud to incorrectly assume it is not installed. This allows any anonymous user to access the installer and create a new admin account, gaining full control over the existing installation.",
  "reason": "This vulnerability involves understanding multiple components: Docker container behavior, shared storage systems (NFS/SMB), Nextcloud's installer logic, and database state validation. The interaction between these components is subtle, as the failure condition depends on timing and filesystem behavior that may not be immediately obvious. Additionally, the attack requires manipulating the application state through environmental failures rather than direct input manipulation.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "idor_detectable": false,
    "authnz_byppass_detectable": true
  }
}