{
  "reported_to": "Valve",
  "reported_by": "slidybat ",
  "title": "Buffer overrun in Steam SILK voice decoder",
  "content": "\nVulnerability\nThe SteamWorks SDK has a function available named DecompressVoice(), which takes as input some compressed voice data, and returns the raw audio data.\nThe format for the input voice data is as follows:\nCode 100 Bytes\n18 bytes - steamid\n21 byte - payload type\n32 bytes - payload size\n4<payload data>\n54 bytes - CRC checksum\nThere are numerous payload types available, including Opus PLC, Opus, SILK, Raw and Silence. The bug being considered here is specific to the SILK decoder.\nThe pseudo-code for the SILK decoder is:\nCode 1.49 KiB\n1unsigned int VoiceEncoder_SILK::Decode( const char* pPayloadData, size_t nPayloadSize, char* pDestBuffer, size_t nDestBufferSize )\n2{\n3\tm_decControl.API_sampleRate = m_nSampleRate;\n4\tint nSamplesInFrame = 20 * m_nSampleRate / 1000;\n5\tint nBytesInFrame = 2 * nSamplesInFrame;\n6\t\n7\tconst char* pPayloadCurr = pPayloadData;\n8\tconst char* pPayloadEnd = pPayloadData + pPayloadSize;\n9\t\n10\tchar* pDestCurr = pDestBuffer;\n11\tchar* pDestEnd = pDestBuffer + nDestBufferSize;\n12\t\n13\twhile ( pPayloadCurr < pPayloadEnd )\n14\t{\n15\t\tunsigned short nSize = *(short*)pPayloadCurr;\n16\t\tpPayloadCurr += 2;\n17\t\tif ( nSize == 0xFFFF )\n18\t\t{\n19\t\t\treturn ( pDestCurr - pDestBuffer ) / 2;\n20\t\t}\n21\t\t\n22\t\tif ( nSize )\n23\t\t{\n24\t\t\t//  [1] Make sure we're not reading past end of our input\n25\t\t\tif ( pPayloadCurr + nSize > pPayloadEnd )\n26\t\t\t\tbreak;\n27\t\t\t\n28\t\t\t//  [2] Make sure we have enough room in output for a full frame\n29\t\t\tif ( pDestCurr + 2 * nBytesInFrame > pDestEnd )\n30\t\t\t\tbreak;\n31\t\t\t\n32\t\t\t// Zero out the frame\n33\t\t\tmemset( pDestCurr, 0, nBytesInFrame );\n34\t\t\t\n35\t\t\tdo\n36\t\t\t{\n37\t\t\t\tunsigned short nDecodedSamples = ( pDestCurr - pDestBuffer ) / 2;\n38\t\t\t\tSKP_Silk_SDK_Decode( m_pDecoder, &m_decControl, 0, pPayloadCurr, nSize, pDestCurr, &nDecodedSamples );\n39\t\t\t\t\n40\t\t\t\tpPayloadCurr += nSize;\n41\t\t\t\tpDestCurr += 2 * nDecodedSamples;\n42\t\t\t\t\n43\t\t\t\tAssert( m_decControl.moreInternalDecoderFrames == 0 ); // [3] We shouldn't get this condition in normal contexts\n44\t\t\t}\n45\t\t\twhile ( m_decControl.moreInternalDecoderFrames );\n46\t\t}\n47\t\telse\n48\t\t{\n49\t\t\tpDestCurr += nBytesInFrame;\n50\t\t}\n51\t}\n52\t\n53\treturn ( pDestCurr - pDestBuffer ) / 2;\n54}\nSome important things to note:\nAt [1], a bounds check is performed to ensure we don't read outside the bounds of the input buffer\nAt [2], a bounds check is performed to ensure we don't write outside the bounds of the output buffer\nAt [3], an assert is performed that m_decControl.moreInternalDecoderFrames == 0, however, without running with a debugger attached, this assertion is ignored.\nThe bug has to do with the do/while loop with m_decControl.moreInternalDecoderFrames. Inside the loop, pPayloadCurr and pDestCurr are both incremented, but the bounds checks at [1] and [2] aren't repeated.\nThis means that if m_decControl.moreInternalDecoderFrames is true, then we can increment pDestCurr past the end of the destination buffer, and overwrite stack data.\nExploiting the vulnerability\nFor the PoC, I chose to show this bug working in CS:GO, but any service that also uses the DecompressVoice function is also vulnerable. We can use this bug to crash Steam/CS:GO for any players on the server that our voices are transmitted to.\nNote that the PoC simply overwrites the stack with garbage data which leads to a crash, however it is entirely possible for an attacker to overwrite the return pointer on the stack with meaningful data that results in RCE. Doing so requires quite a lot of setup work with the payload to get SILK to decode it to a valid ROP chain, so I simply went with the crash for an easier PoC.\nOne of the challenges to getting this working is to keep the payload size small. CS:GO has a rate-limit on voice data, so the entire voice packet must be kept under 512 bytes.\nTo accomplish this, we can build a voice payload that does this:\nFirst, set nSize in the payload to 0 multiple times to get pDestCurr closer to pDestEnd (just over 1 frame away).\nNext, trigger a call to SKP_Silk_SDK_Decode that also sets m_decControl.moreInternalDecoderFrames to true. At this point, pDestCurr will be incremented by 1 frame, and there will now be less than 1 frame of room in the dest buffer.\nTrigger another call to SKP_Silk_SDK_Decode. Since m_decControl.moreInternalDecoderFrames is true, no bounds check is performed. This time there isn't enough room for a frame in the dest buffer and the decode function will overwrite the stack past pDestBuffer.\nAttached is a compiled version of a public cheat (CSGOSimple) that adds a console command (send_voice_packet) to send the voice payloads from a file to the server.\nA file that implements this payload is attached as voice_payload, which can be fed to the send_voice_packet command to replicate the PoC.\nNOTE: Unrelated for replicating the PoC, but this payload is missing the SteamID/CRC data mentioned above. It is expected to be passed into CP2PVoiceSingleton::DecompressVoice() directly, or have the SteamID/CRC added before calling it.\nReplication steps\n1) Start CS:GO on device A with -insecure launch param and join a server (any empty vanilla server will do, I have one at s1.slidyb.at if needed).\n2) Extract CSGOSimple.zip from the attachments onto device A and run injector.exe. Ensure that it has injected into the CS:GO process successfully by checking if the send_voice_packet command exists.\n3) Start CS:GO on device B and join the same server.\n4) Run send_voice_packet path\\to\\voice_payload in the CS:GO console on device A, where path\\to\\voice_payload is the absolute path to the voice_payload file without the C:. For example, if the file as at C:\\Users\\me\\Desktop\\voice_payload, then you would use the command send_voice_packet Users\\me\\Desktop\\voice_payload.\n5) Steam and CS:GO should both crash on device B.\nImpact\nThis bug affects any service using the SteamWorks DecompressVoice function, which includes Steam itself and most Source engine titles. It can be used on any other client that can hear voice data from the attacker, including on official Valve matchmaking servers in Source games.\nIn the best case, it is possible for an attacker to utilize the bug as a DoS to crash other clients, and in the worst case it can lead to RCE by using ROP.\n\n",
  "severity": [
    9.1,
    null
  ],
  "bounty": 7500,
  "weaknesses": [
    "Classic Buffer Overflow"
  ],
  "screenshots": {},
  "disclosed_date": 1631570160,
  "report_url": "https://hackerone.com/reports/1180252",
  "is_multi_component": false,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Start CS:GO on device A with -insecure launch param and join a server"
    ],
    [
      2,
      "Extract and run CSGOSimple.zip on device A, ensuring successful injection"
    ],
    [
      3,
      "Start CS:GO on device B and join the same server"
    ],
    [
      4,
      "Run send_voice_packet command with the path to voice_payload file on device A"
    ],
    [
      5,
      "Observe crash on device B"
    ]
  ],
  "vuln_description": "The vulnerability is a buffer overrun in the Steam SILK voice decoder within the SteamWorks SDK's DecompressVoice() function. It occurs due to insufficient bounds checking in a do/while loop when processing SILK-encoded voice data, allowing an attacker to overwrite stack data and potentially achieve remote code execution or cause a denial of service.",
  "reason": "This vulnerability requires deep understanding of the Steam voice codec implementation, including the SILK decoder's internal state management. The attacker must craft a precise payload that manipulates the decoder's frame processing while bypassing size checks. The exploitation involves non-obvious interactions between payload framing, decoder state (moreInternalDecoderFrames), and buffer management.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}