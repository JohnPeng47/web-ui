{
  "reported_to": "Smule",
  "reported_by": "hami ",
  "title": "stored xss in https://www.smule.com",
  "content": "\nhi team ,\nI found a stored xss in www.smule.com\nSummary: [add summary of the vulnerability]\nThe most damaging type of XSS is Stored XSS (Persistent XSS). An attacker uses Stored XSS to inject malicious content (referred to as the payload), most often JavaScript code, into the target application. If there is no input validation, this malicious code is permanently stored (persisted) by the target application, for example within a database. For example, an attacker may enter a malicious script into a user input field such as a blog comment field or in a forum post.\nWhen a victim opens the affected web page in a browser, the XSS attack payload is served to the victim\u2019s browser as part of the HTML code (just like a legitimate comment would). This means that victims will end up executing the malicious script once the page is viewed in their browser\n##details :\nparameter vulnerable :Blurb, Location and Name ,this all vulnerable to xss\npayload:\"></script><script>alert(document.cookie)</script>\npayload 2:</script><script>akert(1)</script>\nSteps To Reproduce:\n1- login and go to settings\n2- add payload to field Blurb\n3- refresh page\n4- xss will pop up\npoc : in video below\nImpact\nStealing cookies.\ncan lead to user's Session Hijacking.\ncan also lead to disclosure of sensitive data.\nand more\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1573602000,
  "report_url": "https://hackerone.com/reports/733222",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Login and go to settings"
    ],
    [
      2,
      "Add payload to field Blurb"
    ],
    [
      3,
      "Refresh page"
    ],
    [
      4,
      "XSS will pop up"
    ]
  ],
  "vuln_description": "A stored XSS vulnerability exists in the Blurb, Location, and Name fields of www.smule.com. An attacker can inject malicious JavaScript code into these fields, which is then permanently stored and executed when a victim views the affected page. This can lead to cookie theft, session hijacking, and disclosure of sensitive data.",
  "reason": "The vulnerability involves a straightforward injection of XSS payloads into user input fields without requiring complex interactions or state manipulation. The attack is simple and does not involve multiple components or novel logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The XSS vulnerability involves injecting malicious scripts into user input fields (Blurb, Location, Name) which are then stored and executed when the page is viewed. This does not involve authentication or authorization bypass, nor does it involve swapping user sessions or resource IDs. The methodology described focuses on AuthN/AuthZ and IDOR vulnerabilities, not XSS.",
    "is_detectable": false
  }
}