{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "scyoon ",
  "title": "CVE-2024-53908: Django Potential SQL injection in `HasKey(lhs, rhs)` on Oracle",
  "content": "\nI've found a potential SQL Injection vulnerability and reported it to the Django team. You can find detailed information at the following link:\nhttps://www.djangoproject.com/weblog/2024/dec/04/security-releases/\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-53908\nDirect usage of the django.db.models.fields.json.HasKey lookup on Oracle is subject to SQL injection if untrusted data is used as a lhs value. Applications that use the jsonfield.has_key lookup through the __ syntax are unaffected.\nImpact\nThis vulnerability could potentially allow an attacker to execute arbitrary SQL commands, leading to unauthorized access, data manipulation, or information disclosure. The issue affects the Django Framework, particularly when using the HasKey lookup on Oracle databases.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 1081,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1738958820,
  "report_url": "https://hackerone.com/reports/2882887",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify a Django application using the `HasKey(lhs, rhs)` lookup on an Oracle database."
    ],
    [
      2,
      "Inject untrusted data into the `lhs` parameter of the `HasKey` lookup to execute arbitrary SQL commands."
    ]
  ],
  "vuln_description": "The vulnerability is a potential SQL injection in Django's `HasKey(lhs, rhs)` lookup when used on Oracle databases. Direct usage of this lookup with untrusted data as the `lhs` value can lead to SQL injection, allowing attackers to execute arbitrary SQL commands, potentially leading to unauthorized access, data manipulation, or information disclosure.",
  "reason": "The vulnerability requires specific knowledge of Django's ORM and the `HasKey` lookup, as well as understanding of Oracle database quirks. However, the attack vector is straightforward once these components are known, and the interaction between them is not overly complex or subtle.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves direct usage of django.db.models.fields.json.HasKey lookup on Oracle with untrusted data as a lhs value, which is a specific SQL injection scenario. The proposed methodologies focus on authentication and authorization boundaries (AuthN/AuthZ) and IDOR vulnerabilities by testing user sessions, actions, and resource IDs. Since this vulnerability is related to SQL injection due to improper handling of untrusted data in a specific ORM lookup function, it does not fall under the scope of the AuthN/AuthZ or IDOR testing methodologies described.",
    "is_detectable": false
  }
}