{
  "reported_to": "WordPress",
  "reported_by": "simonscannell ",
  "title": "RCE as Admin defeats WordPress hardening and file permissions",
  "content": "\nThis vulnerability was found when I found myself in the following scenario:\nMy collegue set up WordPress on his local machine and challenged me to hack it. Before he gave me admin access he used the following hardeing mechanisms:\nPHP Safe mode\nThe entire web directory was not writable\nDisabled WordPress File edit\nDisabled the ability to install plugins\nThe RCE demonsrated here allowed me to bypass all these restrictions and still execute arbitrary code on the machine.\nAt fault is the wp_mkdir_p(); function.\nOverwriting directory permissions\nwp_mkdir_p() is called by wp_upload_dir() when a user wants to upload a new media file. If the upload directory does not exist, WordPress will attempt to create it. WordPress determines what the upload directory is dynamically by calling get_option('upload_path').\nCode 441 Bytes\n1function _wp_upload_dir( $time = null ) {\n2\t$siteurl = get_option( 'siteurl' );\n3\t$upload_path = trim( get_option( 'upload_path' ) );\n4\n5\tif ( empty( $upload_path ) || 'wp-content/uploads' == $upload_path ) {\n6\t\t$dir = WP_CONTENT_DIR . '/uploads';\n7\t} elseif ( 0 !== strpos( $upload_path, ABSPATH ) ) {\n8\t\t// $dir is absolute, $upload_path is (maybe) relative to ABSPATH\n9\t\t$dir = path_join( ABSPATH, $upload_path );\n10\t} else {\n11\t\t$dir = $upload_path;\nAdministrators can update that option to an arbitrary value in wp-admin/options.php\nThe value returned by _wp_upload_dir() is then passed to wp_mkdir_p();\nCode 1.03 KiB\n1function wp_mkdir_p( $target ) {\n2...\n3\n4\tif ( file_exists( $target ) )\n5\t\treturn @is_dir( $target );\n6\n7\t// We need to find the permissions of the parent folder that exists and inherit that.\n8\t$target_parent = dirname( $target );\n9\twhile ( '.' != $target_parent && ! is_dir( $target_parent ) && dirname( $target_parent ) !== $target_parent ) {\n10\t\t$target_parent = dirname( $target_parent );\n11\t}\n12\n13\t// Get the permission bits.\n14\tif ( $stat = @stat( $target_parent ) ) {\n15\t\t$dir_perms = $stat['mode'] & 0007777;\n16\t} else {\n17\t\t$dir_perms = 0777;\n18\t}\n19\n20\tif ( @mkdir( $target, $dir_perms, true ) ) {\n21\n22\t\t/*\n23\t\t * If a umask is set that modifies $dir_perms, we'll have to re-set\n24\t\t * the $dir_perms correctly with chmod()\n25\t\t */\n26\t\tif ( $dir_perms != ( $dir_perms & ~umask() ) ) {\n27\t\t\t$folder_parts = explode( '/', substr( $target, strlen( $target_parent ) + 1 ) );\n28\t\t\tfor ( $i = 1, $c = count( $folder_parts ); $i <= $c; $i++ ) {\n29\t\t\t\t@chmod( $target_parent . '/' . implode( '/', array_slice( $folder_parts, 0, $i ) ), $dir_perms );\n30\t\t\t}\n31\t\t}\n32\n33\t\treturn true;\n34\t}\n35\n36\treturn false;\n37}\nIn order to create the directory correctly, WordPress will first find out what the parent directory is by iterating over the path via dirname(). WordPress then copies the permissions of the parent directory so that the new upload directory will inherit those permissions.\nif mkdir returns true, a check is made if our umask differs from the $dir_perms. If so, the $target path is exploded and each part of it is chmod'd with the permissions of the $target_parent.\nThis function is vulnerable to a path traversal.\nIf an attacker sets 'upload_path' to\nCode 114 Bytes\n1../../../../../../../var/tmp/content/../../../../../../home/simon/html/wordpress/../../../../../../var/tmp/content\nthe $target_parent will be\nCode 29 Bytes\n1../../../../../../../var/tmp/\nwhich is writable, so the target permissions will be 777 (read, write, execute)\nSince realpath() of the payload is /var/tmp/content and /var/tmp is writable, the call to mkdir() is successful. Then the call to umask() is made, which we can pass and then the $target path is exploded\nand each part of it is appended to $target_parent (../../../../../../../var/tmp/) and then chmod with the permission bit of 777.\nThis means at some point in the iteration the following call is made to chmod:\nCode 97 Bytes\n1chmod('../../../../../../../var/tmp/content/../../../../../../home/simon/html/wordpress/', 0777);\nThis allowed me to set all directories writable again and bypass the first hardening mechanism.\nUploading and executing a shell\nIn my other report, 'Remote Code Execution as Author' I have demonstrated how any file in the theme directory can be included and executed via the post meta value of _wp_page_template. Please read that report if the following is unclear.\nBy setting the upload_path to the theme directory and uploading a shell.txt with the content <?php phpinfo(); ?>\nand then including it, I was able to execute arbitrary code.\nImpact\nThis is a universal code execution for administrators and dangers hardend WordPress installations and pretty much defeats https://codex.wordpress.org/Hardening_WordPress\nDepending on the plugins available of a target site, a simple reflected XSS can lead to RCE, even if all instructions for hardening are followed.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Path Traversal"
  ],
  "screenshots": {},
  "disclosed_date": 1591708140,
  "report_url": "https://hackerone.com/reports/436928",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Log in to WordPress as an administrator"
    ],
    [
      2,
      "Navigate to wp-admin/options.php and modify the 'upload_path' option to a path traversal payload (e.g., '../../../../../../../var/tmp/content/../../../../../../home/simon/html/wordpress/../../../../../../var/tmp/content')"
    ],
    [
      3,
      "Upload a file (e.g., a shell.txt with PHP code) to the manipulated upload directory"
    ],
    [
      4,
      "Use the '_wp_page_template' post meta value to include and execute the uploaded file"
    ]
  ],
  "vuln_description": "The vulnerability allows an administrator to bypass WordPress hardening measures (such as PHP Safe Mode, restricted file permissions, and disabled plugin installations) by exploiting a path traversal flaw in the wp_mkdir_p() function. By manipulating the 'upload_path' option, an attacker can set arbitrary directory permissions, upload malicious files, and execute arbitrary code.",
  "reason": "This vulnerability involves multiple components (path traversal, directory permission manipulation, file upload, and file inclusion) and requires understanding of WordPress internals and hardening mechanisms. The interaction between these components is subtle and non-obvious, particularly the path traversal trick to reset directory permissions.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}