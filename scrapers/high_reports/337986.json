{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "geeknik ",
  "title": "CVE-2018-6797:  A crafted regular expression can cause a heap buffer write overflow in Perl 5 giving a remote attacker control over bytes written",
  "content": "\nAn attacker supplies a regular expression containing one or more \\xDF characters after an escape putting the regexp into unicode matching mode, such as a \\N{} escape. Each \\xDF character adds one byte of overflow, and any other text in the regular expression is written in order, providing the attacker control over the bytes written to the overflowed region.\nReported to the Perl security mailing list on 6 Oct 2017.\nConfirmed as a security flaw by TonyC on 31 Jan 2018\nCVE-2018-6797 assigned to this flaw on 6 Feb 2018\nPatch released to the security mailing list for Perl 5.24 and Perl 5.26 on 09 Feb 2018\nPatch released to the security mailing list for Perl blead on 22 Feb 2018\nPublic security advisory released on 14 April 2018\nOn 31 Jan 2018 Perl dev TonyC says in an email to the Perl security mailing list that depending on the heap implementation it may be possible to perform a nastier exploit - an attacker has almost complete control over the bytes written.\nCode 1.61 KiB\n1==28186==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60700000ac58 at pc 0x000000846c2d bp 0x7ffe716bc7f0 sp 0x7ffe716bc7e0\n2WRITE of size 1 at 0x60700000ac58 thread T0\n3    #0 0x846c2c in S_regatom /root/perl/regcomp.c:13652\n4    #1 0x8587f6 in S_regpiece /root/perl/regcomp.c:11708\n5    #2 0x8587f6 in S_regbranch /root/perl/regcomp.c:11633\n6    #3 0x88830a in S_reg /root/perl/regcomp.c:11371\n7    #4 0x8c90dc in Perl_re_op_compile /root/perl/regcomp.c:7363\n8    #5 0x5297d0 in Perl_pmruntime /root/perl/op.c:5888\n9    #6 0x74d853 in Perl_yyparse /root/perl/perly.y:1210\n10    #7 0x58b9b8 in S_parse_body /root/perl/perl.c:2450\n11    #8 0x593622 in perl_parse /root/perl/perl.c:1753\n12    #9 0x42eb7d in main /root/perl/perlmain.c:121\n13    #10 0x7fba4cebe82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n14    #11 0x42fe18 in _start (/root/perl/perl+0x42fe18)\n15\n160x60700000ac58 is located 0 bytes to the right of 72-byte region [0x60700000ac10,0x60700000ac58)\n17allocated by thread T0 here:\n18    #0 0x7fba4dc62602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)\n19    #1 0x92dfd4 in Perl_safesysmalloc /root/perl/util.c:153\n20    #2 0x8c6cbe in Perl_re_op_compile /root/perl/regcomp.c:7209\n21    #3 0x5297d0 in Perl_pmruntime /root/perl/op.c:5888\n22    #4 0x74d853 in Perl_yyparse /root/perl/perly.y:1210\n23    #5 0x58b9b8 in S_parse_body /root/perl/perl.c:2450\n24    #6 0x593622 in perl_parse /root/perl/perl.c:1753\n25    #7 0x42eb7d in main /root/perl/perlmain.c:121\n26    #8 0x7fba4cebe82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n27\n28SUMMARY: AddressSanitizer: heap-buffer-overflow /root/perl/regcomp.c:13652 S_regatom\nImpact\nDepending on the heap implementation a remote attacker could have complete control over the bytes written to memory.\n\n",
  "severity": [
    7.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Heap Overflow"
  ],
  "screenshots": {},
  "disclosed_date": 1526770800,
  "report_url": "https://hackerone.com/reports/337986",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a regular expression containing one or more \\xDF characters after a \\N{} escape to put the regexp into unicode matching mode."
    ],
    [
      2,
      "Supply the crafted regular expression to a Perl 5 application to trigger the heap buffer write overflow."
    ]
  ],
  "vuln_description": "A crafted regular expression can cause a heap buffer write overflow in Perl 5, allowing a remote attacker to control the bytes written to memory. This occurs when a regular expression contains one or more \\xDF characters after an escape (like \\N{}) that puts the regexp into unicode matching mode. Each \\xDF character adds one byte of overflow, and the attacker can control the bytes written to the overflowed region.",
  "reason": "The vulnerability involves understanding the interaction between unicode matching mode and specific character sequences in regular expressions, which is a subtle and non-obvious interaction. Additionally, the attacker needs to craft a specific sequence of characters to trigger the overflow, which requires precise knowledge of Perl's regexp handling.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}