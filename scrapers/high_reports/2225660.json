{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "tniessen ",
  "title": "Permission model improperly protects against path traversal in Node.js 20",
  "content": "\nSummary: A previously disclosed vulnerability (CVE-2023-30584) was patched insufficiently in commit 205f1e6. The new path traversal vulnerability arises because the implementation does not protect itself against the application overwriting built-in utility functions with user-defined implementations.\nDescription: The function possiblyTransformPath calls pathModule.resolve(path), where pathModule is the result of require('path'). Application code may replace the value of the require('path').resolveproperty with a user-defined function that does not resolve /../ within any given path. Because possiblyTransformPath retrieves the value of the pathModule.resolve property dynamically, it will use the user-defined function instead of the built-in function and will thus fail to fully resolve the path given by the application. The vulnerability can be prevented by maintaining a reference to the original value of pathModule.resolve for use in possiblyTransformPath, assuming that the original implementation of the resolve() function is not subject to any such vulnerabilities itself.\nSteps To Reproduce:\nTemporarily assigning path.resolve = (s) => s disables the resolution of /../ within the permission model implementation.\nCode 301 Bytes\n1$ node --experimental-permission --allow-fs-read=/tmp/ -p \"path.resolve = (s) => s; fs.readFileSync('/tmp/../etc/passwd')\"\n2<Buffer 72 6f 6f 74 3a 78 3a 30 3a 30 3a 72 6f 6f 74 3a 2f 72 6f 6f 74 3a 2f 62 69 6e 2f 62 61 73 68 0a 64 61 65 6d 6f 6e 3a 78 3a 31 3a 31 3a 64 61 65 6d 6f ... 3174 more bytes>\nSupporting Material/References:\nOriginal HackerOne report 2092852 of this vulnerability\nHackerOne report 1952978 for the previous path traversal vulnerability (CVE-2023-30584)\nVulnerable implementation of possiblyTransformPath\nSuggested patch\nCode 578 Bytes\n1diff --git a/lib/internal/fs/utils.js b/lib/internal/fs/utils.js\n2index b7354e30e9..4971656d0a 100644\n3--- a/lib/internal/fs/utils.js\n4+++ b/lib/internal/fs/utils.js\n5@@ -710,2 +710,3 @@ const validatePath = hideStackFrames((path, propName = 'path') => {\n6 // The permission model needs the absolute path for the fs_permission\n7+const resolvePath = pathModule.resolve;\n8 function possiblyTransformPath(path) {\n9@@ -713,3 +714,3 @@ function possiblyTransformPath(path) {\n10     if (typeof path === 'string') {\n11-      return pathModule.resolve(path);\n12+      return resolvePath(path);\n13     }\nThis patch assumes that pathModule.resolve() itself is not susceptible to having its behavior altered in a security-critical way through user-defined properties.\nThis patch was merged into the main branch of Node.js as commit 32bcf4ca and into the Node.js 20 release line as commit cd352751.\nImpact\nThe impact is almost identical with that of CVE-2023-30584. Applications may use this vulnerability to read and write files and directories that the user has not granted access to.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 2330,
  "weaknesses": [
    "Path Traversal"
  ],
  "screenshots": {},
  "disclosed_date": 1701376980,
  "report_url": "https://hackerone.com/reports/2225660",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Run Node.js with experimental permissions enabled and a restricted filesystem access: `node --experimental-permission --allow-fs-read=/tmp/`"
    ],
    [
      2,
      "Execute the following command to override the path.resolve function and attempt to read a restricted file: `path.resolve = (s) => s; fs.readFileSync('/tmp/../etc/passwd')`"
    ]
  ],
  "vuln_description": "The vulnerability allows bypassing path traversal protections in Node.js's permission model by overwriting the built-in path.resolve function with a user-defined implementation that doesn't properly resolve path components like '/../'. This enables reading files outside the allowed directories.",
  "reason": "The vulnerability requires understanding of Node.js's permission model and module system, but the attack itself is straightforward once the module overwrite possibility is known. The interaction between the permission system and module overwriting is somewhat subtle but not highly complex.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "1952978"
}