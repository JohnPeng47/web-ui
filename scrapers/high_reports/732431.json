{
  "reported_to": "Nextcloud",
  "reported_by": "yahe ",
  "title": "Improper integrity protection of server-side encryption keys",
  "content": "\nThe public keys used for the server-side encryption are not integrity-protected. These can easily replaced by anyone who has access to the data-at-rest data (even when the per-user-keys are enabled, as described in https://nextcloud.com/security/threat-model/). This holds true for all key types - from the master key, the per-user-keys as well as for the (optional) recovery key.\nAttack scenarios may look like this:\nA recovery key is set by the admin and users enabled the recovery feature (or it was mandatorily set by adding the corresponding configuration to the oc_preferences table for all users). As it is unlikely that the recovery key is used very often, a person that has access to the data directory (even if at rest) is able to replace the public recovery key with a newly generated one. Each newly added file and each modified file will also be encrypted for the newly generated recovery key.\nA per-user-key encryption scheme is introduced and organizational shared folders are set up. To better handle access management all organizational shared folders are owned by the admin that also handles access management requests. As it is unlikely that the admin account will be used to access the individual files, a person that has access to the data directory (even if at rest) is able to replace the public key of the admin account with a newly generated one. Each newly added file and each modified file that is put into any of the organizational shared folders will also be encrypted for the newly generated admin account key.\nThe mentioned attack scenarios may also be executed by an external storage provider if the folder that is used as the data directory is stored at this external storage provider. Administrative access to the actual Nextcloud server is not necessary to mount this attack.\nImpact\nAfter mounting the attack the person would be able to read and modify all newly created files as well as files that have been modified since the attack was launched.\nPreventing this attack could look as follows:\nThe fingerprints of public and private key files that have been generated by the application could be stored in the database.\nWhenever public or private key files are read from disk the fingerprint of that file is checked against the value stored in the database.\nAn alternative approach for preventing this attack could look as follows:\nFor each public and private key file that has been generated by the application a MAC could be calculated.\nThe key for the MAC could be derived from the instance id, the instance secret and the relative file name of the corresponding key file.\nThe MAC could be stored directly in the corresponding key file.\nWhenever a public or private key file is read from disk the MAC of that file could be calculated and compared with the MAC stored in the file.\n\n",
  "severity": [
    7.4,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Insufficiently Protected Credentials"
  ],
  "screenshots": {},
  "disclosed_date": 1605296340,
  "report_url": "https://hackerone.com/reports/732431",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Identify the public keys used for server-side encryption in the Nextcloud data directory."
    ],
    [
      2,
      "Replace the public recovery key or admin account key with a newly generated one."
    ],
    [
      3,
      "Monitor or access newly created or modified files to exploit the compromised encryption."
    ]
  ],
  "vuln_description": "The vulnerability involves the lack of integrity protection for server-side encryption keys in Nextcloud, allowing an attacker with access to the data directory to replace public keys and gain unauthorized access to encrypted files.",
  "reason": "The attack requires understanding of Nextcloud's encryption mechanisms and access to the data directory, but the steps to replace keys are straightforward once these prerequisites are met.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}