{
  "reported_to": "GitLab",
  "reported_by": "ajxchapman ",
  "title": "Importing GitLab project archives can replace uploads of other users",
  "content": "\nSummary\nImporting a modified exported GitLab project archive can overwrite uploads for other users. If the secret and file name of an upload are known (these can be easily identified for any uploads to public repositories), any user can import a new project which overwrites the served content of the upload with arbitrary content.\nThis issue could be abused to backdoor project compiled binaries, allowing the spread of malware.\nI have not performed a full risk assessment or root cause analysis of this issue at this time. I wanted to get the issue reported to GitLab asap after discovery. If you require any further details or information please let me know.\nSteps to reproduce\nThe video shows the following steps:\nAs user root (on the left hand side of the video), create a new project\nUpload a file to the project (e.g. by creating a new issue)\nTake note of the file secret and file name of the original upload\nCraft a GitLab project export tar.gz with the replacement upload file with a path equal to the original upload secret and file name, e.g. ./uploads/ed5ab56bc85699117ba230eb799fd3bf/indi.jpg (See modified.tar.gz (F466355) attached)\nAs user test (on the right hand side of the video) create a new project, importing the crafted tar.gz from the above step\nAs the user root refresh your view of the upload file, and note that it has been modified\nThis example was demonstrated against the official GitLab docker image from https://hub.docker.com/r/gitlab/gitlab-ce/.\nImpact\nAny upload type can be replaced using this method, if the secret and file name are known (these can be easily identified for any uploads to public repositories). An attacker could abuse this to backdoor project compiled binaries, allowing the spread of malware.\nExamples\nSee the attached project files:\nOrigin project export 2019-04-10_23-56-482_root_new_project_export.tar.gz (F466356)\nModified project export used to change the upload file modified.tar.gz (F466355)\nWhat is the current bug behavior?\nImporting a project as any user can modify the served upload files of other users.\nWhat is the expected correct behavior?\nImporting a project should not be able to modify the served upload files of other users.\nRelevant logs and/or screenshots\nSee the following /var/log/gitlab/gitlab-rails/production.log entry:\nCode 434 Bytes\n1Started GET \"/root/new_project/uploads/ed5ab56bc85699117ba230eb799fd3bf/indi.jpg\" for 127.0.0.1 at 2019-04-10 23:07:12 +0000\n2Processing by Projects::UploadsController#show as HTML\n3  Parameters: {\"namespace_id\"=>\"root\", \"project_id\"=>\"new_project\", \"secret\"=>\"[FILTERED]\", \"filename\"=>\"indi.jpg\"}\n4Sent file /opt/gitlab/embedded/service/gitlab-rails/public/uploads/test/modified_project/ed5ab56bc85699117ba230eb799fd3bf/indi.jpg (0.2ms)\nNote that the request was for the /root/new_project/uploads/ed5ab56bc85699117ba230eb799fd3bf/indi.jpg file, however the file from the test/modified_project was served.\nOutput of checks\nResults of GitLab environment info\nGitLab docker environment:\nCode 203 Bytes\n1 docker images gitlab/gitlab-ce\n2REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n3gitlab/gitlab-ce    latest              7a65562fb501        6 days ago          1.78GB\ngitlab-rake gitlab:env:info\nCode 876 Bytes\n1System information\n2System:\n3Current User:   git\n4Using RVM:      no\n5Ruby Version:   2.5.3p105\n6Gem Version:    2.7.6\n7Bundler Version:1.16.6\n8Rake Version:   12.3.2\n9Redis Version:  3.2.12\n10Git Version:    2.18.1\n11Sidekiq Version:5.2.5\n12Go Version:     unknown\n13\n14GitLab information\n15Version:        11.9.6\n16Revision:       14bac95\n17Directory:      /opt/gitlab/embedded/service/gitlab-rails\n18DB Adapter:     postgresql\n19URL:            http://gitlab.example.com\n20HTTP Clone URL: http://gitlab.example.com/some-group/some-project.git\n21SSH Clone URL:  git@gitlab.example.com:some-group/some-project.git\n22Using LDAP:     no\n23Using Omniauth: yes\n24Omniauth Providers:\n25\n26GitLab Shell\n27Version:        8.7.1\n28Repository storage paths:\n29- default:      /var/opt/gitlab/git-data/repositories\n30GitLab Shell path:              /opt/gitlab/embedded/service/gitlab-shell\n31Git:            /opt/gitlab/embedded/bin/git\nImpact\nAny upload type can be replaced using this method, if the secret and file name are known (these can be easily identified for any uploads to public repositories). An attacker could abuse this to backdoor project compiled binaries, allowing the spread of malware.\nI have not performed a full risk assessment or root cause analysis of this issue at this time. I wanted to get the issue reported to GitLab asap after discovery.\n\n",
  "severity": "[",
  "bounty": 5000,
  "weaknesses": "[",
  "screenshots": {},
  "disclosed_date": 1576078740,
  "report_url": "https://hackerone.com/reports/534794",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": "[",
  "vuln_description": "Importing a modified exported GitLab project archive can overwrite uploads for other users. If the secret and file name of an upload are known, any user can import a new project which overwrites the served content of the upload with arbitrary content. This could be abused to backdoor project compiled binaries, allowing the spread of malware.",
  "reason": "The vulnerability involves understanding the structure of GitLab project archives and how uploads are stored and served. While the steps to reproduce are straightforward, the attacker needs to know the secret and file name of the target upload, which can be easily identified for public repositories. The interaction between project imports and upload serving is non-obvious but not highly complex.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": true,
  "authnz_byppass_detectable": false,
  "injection_classification": "}"
}