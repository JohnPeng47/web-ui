{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "ooooooo_q ",
  "title": "ReDoS( Ruby, Time)",
  "content": "\nI reported at https://hackerone.com/reports/1485501\nhttps://www.ruby-lang.org/en/news/2023/03/30/redos-in-time-cve-2023-28756/\nThe Time parser mishandles invalid strings that have specific characters. It causes an increase in execution time for parsing strings to Time objects.\nA ReDoS issue was discovered in the Time gem 0.1.0 and 0.2.1 and Time library of Ruby 2.7.7.\nImpact\nReDoS occurs when Time.rfc2822 accepts user input.\nIn Rack::ConditionalGet, the header value is parsed by Time.rfc2822, it is possible to attack from the request.\nRails uses ::Rack::ConditionalGet by default, it can be attacked by a request from the client.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 4000,
  "weaknesses": [
    "Uncontrolled Resource Consumption"
  ],
  "screenshots": {},
  "disclosed_date": 1682494560,
  "report_url": "https://hackerone.com/reports/1929567",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify a target application using Ruby's Time parser (versions 2.7.7 or Time gem 0.1.0/0.2.1) or Rack::ConditionalGet middleware (commonly used in Rails)."
    ],
    [
      2,
      "Craft a malicious RFC2822-compliant time string with specific characters that trigger the ReDoS vulnerability (e.g., excessively long or malformed timezone offsets)."
    ],
    [
      3,
      "Send the crafted string via an HTTP request header (e.g., 'If-Modified-Since') to a Rails application or directly to a vulnerable Time.rfc2822 parser endpoint."
    ],
    [
      4,
      "Observe server response time degradation or timeout due to catastrophic backtracking in the Time parser."
    ]
  ],
  "vuln_description": "The vulnerability is a ReDoS (Regular Expression Denial of Service) in Ruby's Time parser (CVE-2023-28756). When parsing RFC2822-compliant time strings with specific invalid characters, the parser enters a state of catastrophic backtracking, causing exponential time complexity. This is particularly dangerous when the parser accepts user-controlled input, such as HTTP headers processed by Rack::ConditionalGet in Rails applications.",
  "reason": "The vulnerability requires understanding of: 1) Ruby's Time parsing internals, 2) RFC2822 time format quirks, 3) Rack middleware integration in Rails, and 4) ReDoS attack patterns. While the components are known security concepts, identifying the specific malformed string pattern that triggers the ReDoS requires non-trivial analysis of the Time parser's regex implementation.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": "1485501"
}