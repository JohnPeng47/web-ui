{
  "reported_to": "Node.js",
  "reported_by": "v6ak ",
  "title": "DNS rebinding in --inspect (insufficient fix of CVE-2018-7160)",
  "content": "\nSummary: While the debugger (i.e., the --inspect option) tries to prevent DNS rebinding, the whitelist is excessive.\nDescription: The whitelist includes \u201clocalhost6\u201d, which is not that widespread. When \u201clocalhost6\u201d is not present in /etc/hosts, it is just an ordinary domain that is resolved via DNS, i.e., over network. If the attacker controls victim's DNS server or can spoof its responses, the DNS rebinding protection can be bypassed by using the \u201clocalhost6\u201d domain. As long as the attacker uses the \u201clocalhost6\u201d domain, they can still apply the attack described in CVE-2018-7160.\nReasoning why localhost6 is not so common and Node.js should not rely on its presence in the hosts file:\nIt is not even present in the node:latest Docker image (sha256:aa1930b56896a43dedb227526d5d40f4a6e9157f9d8703f9584650cde510438a)\nI haven't seen it in Windows 10.\nUnlike RFC 6761 for localhost, I have found no RFC that mentions localhost6 (see https://www.google.com/search?q=localhost6+site%3Atools.ietf.org ).\nSteps To Reproduce:\nPreconditions: Victim has no entry for localhost6 in hosts and attacker controls DNS responses. (It does not matter if the attacker control the DNS server or the network communication between the DNS server and the victim.)\nVictim runs node with --inspect option\nVictim visits attacker's webpage\nThe attacker's webpage opens http://localhost6:9229\nVictim finds no \u201clocalhost6\u201d entry in hosts file, so it asks the DNS server and gets <attacker's-IP>. (Maybe the response will have a short TTL. There are multiple tricks to make DNS rebinding successful in a short time, but I am not going to be exhaustive.)\nVictim loads webpage http://localhost6:9229 from <attacker's-IP>.\nThe webpage http://localhost6:9229 tries to load http://localhost6:9229/json from attacker's server. (If the IP address of \u201clocalhost6\u201d is still cached, attacker needs to retry. There are techniques that can speed it up, like using RST packet.)\nDue to a short TTL, the DNS server will be soon asked again about an entry for \u201clocalhost6\u201d. This time, the DNS server responds \u201c127.0.0.1\u201d.\nThe http://localhost6:9229 website (i.e., the one hosted on <attacker's IP>) will retrieve http://localhost6:9229/json from 127.0.0.1, including webSocketDebuggerUrl.\nNow, the attacker knows the webSocketDebuggerUrl and can connect to is using WebSocket. Note that WebSocket is not restricted by same-origin-policy. By doing so, they can gain the privileges of the Node.js instance.\nVulnerable code: https://github.com/nodejs/node/blob/fdf0a84e826d3a9ec0ce6f5a3f5adc967fe99408/src/inspector_socket.cc#L584\nImpact:\nAttacker can gain access to the Node.js debugger, which can result in remote code execution.\nSupporting Material/References:\nOriginal vulnerability: https://nvd.nist.gov/vuln/detail/CVE-2018-7160\nVulnerable code: https://github.com/nodejs/node/blob/fdf0a84e826d3a9ec0ce6f5a3f5adc967fe99408/src/inspector_socket.cc#L584\nDocumentation that mentions the vulnerable behavior: https://nodejs.org/en/docs/guides/debugging-getting-started/\nImpact\nAttacker can gain access to the Node.js debugger, which can result in remote code execution.\n\n",
  "severity": [
    7.5,
    null
  ],
  "bounty": 500,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1614116100,
  "report_url": "https://hackerone.com/reports/1069487",
  "vuln_category": "CODE",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Victim runs node with --inspect option"
    ],
    [
      2,
      "Victim visits attacker's webpage"
    ],
    [
      3,
      "The attacker's webpage opens http://localhost6:9229"
    ],
    [
      4,
      "Victim finds no 'localhost6' entry in hosts file, so it asks the DNS server and gets <attacker's-IP>"
    ],
    [
      5,
      "Victim loads webpage http://localhost6:9229 from <attacker's-IP>"
    ],
    [
      6,
      "The webpage http://localhost6:9229 tries to load http://localhost6:9229/json from attacker's server"
    ],
    [
      7,
      "Due to a short TTL, the DNS server will be soon asked again about an entry for 'localhost6'. This time, the DNS server responds '127.0.0.1'"
    ],
    [
      8,
      "The http://localhost6:9229 website will retrieve http://localhost6:9229/json from 127.0.0.1, including webSocketDebuggerUrl"
    ],
    [
      9,
      "The attacker knows the webSocketDebuggerUrl and can connect to it using WebSocket, gaining the privileges of the Node.js instance"
    ]
  ],
  "vuln_description": "The vulnerability allows an attacker to bypass DNS rebinding protection in Node.js's --inspect debugger by using the 'localhost6' domain, which is not commonly present in /etc/hosts. If the attacker controls the victim's DNS or can spoof responses, they can trick the victim into connecting to a malicious server that eventually connects to the local debugger, leading to remote code execution.",
  "reason": "This vulnerability requires understanding of DNS rebinding, Node.js debugger internals, and the subtle interaction between DNS resolution and the debugger's whitelist. The attacker must also manipulate DNS responses and timing to successfully exploit the flaw.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "idor_detectable": false,
    "authnz_byppass_detectable": true
  }
}