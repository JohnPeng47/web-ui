{
  "reported_to": "Rocket.Chat",
  "reported_by": "sonarsource ",
  "title": "Post-Auth Blind NoSQL Injection in the users.list API leads to Remote Code Execution",
  "content": "\nSummary:\nThe users.list API endpoint is vulnerable to NoSQL injection attacks. It can be used to take over accounts by leaking password reset tokens and 2FA secrets. Taking over an admin account leads to Remote Code Execution.\nDescription:\nThe users.list API endpoint takes a custom query via the query URL query parameter. Although the returned fields are restricted, the query is not validated or sanitized properly and can thus be used to perform a blind NoSQL injection that can leak any field's value of any document in the users collection.\nBy using MongoDB's $where operator, an attacker can build arbitrary oracles that can leak the value of any field of any user document. The query can be tailored to leak only the values of a specific account which makes it easy to target an admin account. Most notably an attacker can leak password reset tokens and 2FA secrets.\nExample: in order to check if the password reset token of an admin user begins with a specific letter, e.g. A, the attacker would send the JSON object {\"$where\":\"this.roles.includes('admin') && /^A/.test(this.services.password.reset.token)\"} as the query parameter. The response contains the matching admin user when the guess was correct, or no users otherwise. This can be repeated for all possible characters and for each position in the token, until the whole token is known. See the users_nosqli_blind_leak function in the attached exploit for an implementation of this.\nIn order to take over another account, an attacker would perform the following high-level steps:\nLeak the user's email address\nRequest a password reset for the target user's account\nLeak the password reset token\nLeak the TOTP 2FA secret or email 2FA token hash if necessary\nReset the target user's password to an attacker known one using the password reset token and any leaked 2FA tokens/secrets if necessary\nTo gain Remote Code Execution capabilities on the server, an attacker can follow these steps to take over an admin account. The attacker can then use the newly gained admin privileges to create an incoming web hook that has a script. This allows them to execute commands or get a shell on the server, because the script is executed on the server without a security boundary in place (which seems to be intended).\nThe vulnerable code can be found here: users.js:230\nSee post_auth_nosqli.py for a reference exploit and the attached video for a demonstration of it.\nReleases Affected:\nTested on 3.12.1\nSeems to be affected since 0.49.0 as the vulnerability was introduced in commit 3112d22\nSteps To Reproduce (from initial installation to vulnerability):\nInstall Python3 (required by the exploit)\nInstall the Python dependencies required by the exploit: pip3 install requests bcrypt\nSet up an instance of RocketChat 3.12.1, e.g. by cloning the repo and using Docker Compose:\ngit clone git@github.com:RocketChat/Rocket.Chat.git\ncd Rocket.Chat\ngit checkout tags/3.12.1\ndocker-compose up -d\nConfigure the instance with default settings\nCreate a normal (non-admin) user with username attacker and password attacker\nRun the reference exploit against the instance: python3 post_auth_nosqli.py -u attacker -p attacker 'http://localhost:3000'\nThe exploit should provide an interactive shell on the the server, use it to verify that you can execute commands as the rocketchat user: whoami\nSupporting Material/References:\nThe attached proof-of-concept video shows the setup and exploitation of a fresh Rocket.Chat instance.\nPlease note: The unsuccessful login at the end of the video does not mean that the exploit did not work, it just shows that the original admin password was restored (as stated in the exploits output). The exploit was successful, which can be seen by the output of the shell commands at the end of the exploit.\nThis is the exploit's output:\nCode 1019 Bytes\n1 ___  ___  _ __   __ _ _ __ ___  ___  _   _ _ __ ___ ___ \n2/ __|/ _ \\| '_ \\ / _` | '__/ __|/ _ \\| | | | '__/ __/ _ \\\n3\\__ \\ (_) | | | | (_| | |  \\__ \\ (_) | |_| | | | (_|  __/\n4|___/\\___/|_| |_|\\__,_|_|  |___/\\___/ \\__,_|_|  \\___\\___|\n5\n6[+] Found admin: username=admin id=56gyPQKt8Ff3Weowk\n7[*] Leaking email...\n8[+] Leaked email: admin@rocketchat.local\n9[*] Leaking password hash...\n10[+] Leaked password hash: $2b$10$ubhEIM/j6qLFNINHVbP.B.CJFCXagK7V5zD0Q8BYzs6UBlbBpiECa\n11[+] Requesting password reset...\n12[*] Leaking password reset token...\n13[+] Leaked password reset token: ET4sx905cF9pTZOsHFu6eRad7MwpYmqs-iTMWQIXAhv\n14[+] Resetting password to \"DEbCf2b0A2BE79bBcDf1\"...\n15[+] Admin account takeover successful!\n16[+] Creating hook \"backdoor-9Fbd6E5A\" with secret \"AbE217B9d9e7Dd0CB2EB8dd30d26edfe\"...\n17[*] Hook: 7bgxdkGHQYdBwtHWA/2S3EGB2ywWHM3aeYKu2q7akGF6TEjXEKMGK2Smggw7LpSLHc\n18[+] Restoring admin password...\n19[+] Dropping into shell:\n20$ whoami\n21rocketchat\n22$ id\n23uid=65533(rocketchat) gid=65533(rocketchat) groups=65533(rocketchat)\n24$ \nSuggested mitigation\nProperly validate the query parameter:\nRestrict the usage of MongoDB operators using an allowlist, especially top level operators like $where\nRestrict the set of query-able fields using an allowlist (like the restriction on the returned fields)\nRestrict the usage of MongoDB operators using an allowlist, especially top level operators like $where\nRestrict the set of query-able fields using an allowlist (like the restriction on the returned fields)\nCheck every API endpoint that uses the parseJsonQuery() function for similar vulnerabilities\nDisclosure Policy\nAll reported issues are subject to a 90 day disclosure deadline.\nAfter 90 days elapse, parts of the bug report will become visible to the public.\nDon't hesitate to ask if you have any questions or need further help with this issue.\nImpact\nAn attacker can use this vulnerability to target an admin user and take over their account, which is already a high impact. The attacker can then use certain features that are available to admins in order to gain Remote Code Execution capabilities. This is demonstrated in the reference exploit by creating an incoming web hook that executes the attacker's payload in the context of the server process.\nThis gives them complete control over the Rocket.Chat instance and exposes all attached components, e.g. the database or any external system whose credentials are stored within Rocket.Chat settings. An attacker can read, change, or delete all items in the database, impacting confidentiality, integrity, and availability.\n\n",
  "severity": [
    8.8,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "None"
  ],
  "screenshots": {},
  "disclosed_date": 1627734660,
  "report_url": "https://hackerone.com/reports/1130874",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Install Python3 and required dependencies (requests, bcrypt)"
    ],
    [
      2,
      "Set up Rocket.Chat 3.12.1 using Docker Compose"
    ],
    [
      3,
      "Create a normal user account (attacker)"
    ],
    [
      4,
      "Run the exploit script to perform NoSQL injection and leak admin credentials"
    ],
    [
      5,
      "Use leaked password reset token to change admin password"
    ],
    [
      6,
      "Create malicious webhook for RCE"
    ]
  ],
  "vuln_description": "The users.list API endpoint is vulnerable to NoSQL injection via the query parameter, allowing attackers to leak sensitive fields (like password reset tokens and 2FA secrets) through blind injection techniques. This can lead to admin account takeover and ultimately remote code execution via webhook functionality.",
  "reason": "This vulnerability requires understanding multiple complex components: NoSQL injection techniques, MongoDB's $where operator, password reset workflows, 2FA mechanisms, and webhook RCE capabilities. The attack chain involves non-obvious interactions between these components and requires maintaining context across different exploitation stages.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}