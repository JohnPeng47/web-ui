{
    "reported_to": "Kubernetes",
    "reported_by": "libio ",
    "title": "Authenticated kubernetes principal with restricted permissions can retrieve ingress-nginx serviceaccount token and secrets across all namespaces",
    "content": "\nSummary:\nRetrieving ingress-nginx serviceaccount token\ningress-nginx allows adding custom snippets of nginx configuration to Kubernetes ingress objects. These snippets can be applied to either the relevant location {} or server {} blocks with the following annotations, respectively.\nhttps://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#configuration-snippet\nhttps://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#server-snippet\nInside the server {} block we can add a custom snippet of lua-code that reads the serviceaccount token that is mounted inside the ingress-nginx pod. We then set it as an nginx variable and return it to the client at a configured location. This might look like this:\nCode 396 Bytes\n1    nginx.ingress.kubernetes.io/server-snippet: |\n2      set_by_lua $token '\n3        local file = io.open(\"/run/secrets/kubernetes.io/serviceaccount/token\")\n4        if not file then return nil end\n5        local content = file:read \"*a\"\n6        file:close()\n7        return content\n8      ';\n9\n10      location = /token {\n11        content_by_lua_block {\n12          ngx.say(ngx.var.token)\n13        }\n14      }\nImpact\nThe ingress-nginx serviceaccount has the permissions to list secrets across all namespaces. With the ingress-nginx serviceaccount's token a user, with otherwise restricted privileges, can at least:\nexfiltrate all kubernetes secrets\nget tokens of all kubernetes serviceaccounts; allowing an attacker to elevate his privileges to potentially cluster-admin\nVendors such as rancher-labs bundle ingress-nginx, or a forked version of ingress-nginx, with their software. Solutions provided by these vendors might also be vulnerable.\nkube-apiserver proxy\ningress-nginx can be configured to expose the Kubernetes kube-apiserver by creating a Kubernetes Service of type ExternalName and pointing it to kubernetes.default; the hostname at which the kubernetes api is available inside the cluster. This can expose an otherwise private and protected kube-apiserver to untrusted networks like the internet.\nRequirements to exploit\nTo successfully exploit this vulnerability an attacker would need access to an already authenticated user or serviceaccount that has the permissions to create the following resources inside kubernetes:\ningress\nservice\nAdditionally the attacker needs network access to the ingress-nginx-controller loadbalancer or in-cluster service to retrieve the ingress-nginx serviceaccount token. The hostname configured in the ingress object does not necessarily have to resolve to the ingress-nginx-controller's loadbalancer; ingress-nginx will also serve us the token if we manually add the Host-header.\nKubernetes Version:\nAny, as far as I am aware. This was tested with AWS EKS 1.20.\nComponent Version:\nAny, as far as I am aware. This was tested with the following release of ingress-nginx:\nchart: ingress-nginx-3.33.0\napplication: 0.47.0\nSteps To Reproduce:\nI created a proof-of-concept (poc.sh) that requires the following:\nA kubernetes cluster with ingress-nginx installed; ingress-nginx should not be restricted to a single namespace\nA local kubeconfig file configured to communicate with the kubernetes cluster\nA user configured in the kubeconfig file with the permissions to create ingress and service objects in the namespace configured in the kubeconfig context\nThe proof-of-concept requires setting the INGRESS_HOST environment variable. This variable should contain a hostname that resolves to the ingress-nginx-controller's loadbalancer. This is made easy on clusters where a wildcard DNS-record is pointing to the loadbalancer.\nWhen invoked, the script will:\nApply the required ingress and service;\nexposing the ingress-nginx serviceaccount token at https://$INGRESS_HOST/token\nproxying all requests to the kubernetes apiserver at https://$INGRESS_HOST\nexposing the ingress-nginx serviceaccount token at https://$INGRESS_HOST/token\nproxying all requests to the kubernetes apiserver at https://$INGRESS_HOST\nRetrieve the ingress-nginx serviceaccount token\nWrite a local kubeconfig;\nUsing the kube-apiserver proxy\nUsing the ingress-nginx serviceaccount token\nUsing the kube-apiserver proxy\nUsing the ingress-nginx serviceaccount token\nWrite secrets from all namespaces to a local file called secrets.json\nFor each serviceaccount token found in secrets.json check if the serviceaccount has cluster-admin privileges. If so, create a new user and context in the local kubeconfig file with the serviceaccount's token\nSupporting Material/References:\nfile\tdescription\ningress.yaml\tkubernetes manifest used to create required service and ingress objects\npoc.sh\tproof-of-concept written in bash\noutput.png\toutput of running poc.sh against local test cluster<br>getting cluster-admin by finding the serviceaccount tokens of flux and flux-helm-operator\nImpact\nexfiltrate all kubernetes secrets\nget tokens of all kubernetes serviceaccounts; allowing an attacker to elevate his privileges to potentially cluster-admin\n\n",
    "severity": [
        7.6,
        null
    ],
    "bounty": 2500,
    "weaknesses": [
        "Privilege Escalation"
    ],
    "screenshots": {},
    "disclosed_date": 1638630960,
    "report_url": "https://hackerone.com/reports/1249583",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "API",
    "steps": [
        [
            1,
            "Create an ingress object with a custom server-snippet annotation that reads and exposes the ingress-nginx serviceaccount token."
        ],
        [
            2,
            "Use the exposed token to list secrets across all namespaces and potentially elevate privileges to cluster-admin."
        ]
    ],
    "vuln_description": "An authenticated Kubernetes principal with restricted permissions can retrieve the ingress-nginx serviceaccount token and secrets across all namespaces by exploiting custom nginx configuration snippets. This allows exfiltration of all Kubernetes secrets and potential privilege escalation to cluster-admin.",
    "reason": "The attack involves multiple components (ingress configuration, serviceaccount tokens, nginx snippets) and requires understanding of both Kubernetes RBAC and nginx configuration. The interaction between these components is non-obvious, particularly the ability to use nginx snippets to expose serviceaccount tokens.",
    "new_complexity": "HIGH",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "idor_detectable": false,
    "authnz_byppass_detectable": true,
    "is_simple_payload": false,
    "injection_metadata": {
        "is_simple_payload": false
    },
    "authnz_metadata": {
        "idor_detectable": false,
        "authnz_byppass_detectable": true
    }
}