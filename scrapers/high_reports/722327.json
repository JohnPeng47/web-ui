{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "neex ",
  "title": "CVE-2019-11043: a buffer underflow in fpm_main.c can lead to RCE in php-fpm",
  "content": "\nThe vulnerability exists in php-fpm because of missing bounds check in fpm_main.c. If the FastCGI variable PATH_INFO is empty, the underflow happens when the code tries to calculate the value of the path_info variable. An invalid pointer in path_info leads to a single byte out-of-bounds write, which can be leveraged to code execution.\nThe php-fpm allows anyone who can connect to its' port to execute code, so an RCE in php-fpm is not interesting by itself. However, this particular issue can be exploited even by a user who has access to the HTTP server (which is Nginx typically). In certain Nginx configurations, it is possible to make it send empty PATH_INFO value by breaking regexp in fastcgi_split_pathinfo directive using an encoded newline character (%0a).\nThe issue was reported to PHP maintainers in the bug 78599 and assigned CVE-2019-11043. It was disclosed on October 22.\nThe exploit for the issue is available at https://github.com/neex/phuip-fpizdam/.\nTo reproduce the issue, follow the steps at the \"Playground environment\" section in the exploit's README. The repo contains a Dockerfile, which builds the version of PHP just before the fix.\nExploit works only when Nginx config allows to trigger the bug (that is, to send empty PATH_INFO FastCGI variable). The full list of preconditions can be found at the exploit repository. There are real world examples of big projects empoying such configuration, see e.g. https://twitter.com/chybeta/status/1187213401124036608 (this particular issue is already reported to the corresponding bug bounty program and they hardened the Nginx config).\nAs the vulnerability resides in php-fpm, not Nginx, there might be other ways to trigger the vulnerability when other HTTP server software is used. However, I'm not aware of any at this moment.\nImpact\nIf the attack is successful, the attacker can execute code at the server that runs php-fpm with the privileges of the php-fpm process. Again, note that the attacker doesn't have access to the php-fpm socket, she only makes HTTP requests to the nginx.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": 1500,
  "weaknesses": [
    "Buffer Underflow"
  ],
  "screenshots": {},
  "disclosed_date": 1604904360,
  "report_url": "https://hackerone.com/reports/722327",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Set up a vulnerable environment using the provided Dockerfile from the exploit repository (https://github.com/neex/phuip-fpizdam/)."
    ],
    [
      2,
      "Configure Nginx to send an empty PATH_INFO FastCGI variable by breaking the regexp in fastcgi_split_pathinfo directive using an encoded newline character (%0a)."
    ],
    [
      3,
      "Execute the exploit from the repository to trigger the buffer underflow in php-fpm, leading to remote code execution."
    ]
  ],
  "vuln_description": "The vulnerability is a buffer underflow in php-fpm's fpm_main.c due to missing bounds check when PATH_INFO is empty. This leads to an invalid pointer in path_info, causing a single byte out-of-bounds write that can be leveraged for remote code execution. The attack can be performed via HTTP requests to Nginx if the server is misconfigured to allow sending empty PATH_INFO.",
  "reason": "This vulnerability involves understanding the interaction between Nginx configuration and php-fpm's handling of FastCGI variables. The attacker must identify a specific misconfiguration in Nginx (fastcgi_split_pathinfo) and craft a request that triggers the buffer underflow in php-fpm. The exploit requires knowledge of both web server configuration and low-level memory corruption techniques.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}