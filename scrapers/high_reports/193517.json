{
  "reported_to": "shopify-scripts",
  "reported_by": "geeknik ",
  "title": "attempting double-free using the mruby compiler `mrbc`",
  "content": "\nI cloned the mruby git 4 days ago, started fuzzing with American Fuzzy Lop. This is the 1st crash.\n./mrbc test000\nCode 2.97 KiB\n1codegen error:test000:1: too complex expression\n2=================================================================\n3==12142==ERROR: AddressSanitizer: attempting double-free on 0x60200000d750 in thread T0:\n4    #0 0x7f2fd1fd0527 in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.1+0x54527)\n5    #1 0x425788 in mrb_default_allocf /root/mruby/src/state.c:56\n6    #2 0x4af31b in mrb_free_symtbl /root/mruby/src/symbol.c:166\n7    #3 0x4285b1 in mrb_close /root/mruby/src/state.c:249\n8    #4 0x404d48 in cleanup /root/mruby/mrbgems/mruby-bin-mrbc/tools/mrbc/mrbc.c:165\n9    #5 0x404d48 in main /root/mruby/mrbgems/mruby-bin-mrbc/tools/mrbc/mrbc.c:314\n10    #6 0x7f2fd18f1b44 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b44)\n11    #7 0x4061c9 (/root/mruby/bin/mrbc+0x4061c9)\n12\n130x60200000d750 is located 0 bytes inside of 8-byte region [0x60200000d750,0x60200000d758)\n14freed by thread T0 here:\n15    #0 0x7f2fd1fd0527 in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.1+0x54527)\n16    #1 0x425788 in mrb_default_allocf /root/mruby/src/state.c:56\n17    #2 0x426867 in mrb_irep_free /root/mruby/src/state.c:162\n18    #3 0x4267a9 in mrb_irep_decref /root/mruby/src/state.c:133\n19    #4 0x4267a9 in mrb_irep_free /root/mruby/src/state.c:158\n20    #5 0x687046 in mrb_generate_code /root/mruby/mrbgems/mruby-compiler/core/codegen.c:2960\n21    #6 0x5df3c1 in mrb_load_exec /root/mruby/mrbgems/mruby-compiler/core/parse.y:5732\n22    #7 0x5ed6c6 in mrb_load_file_cxt /root/mruby/mrbgems/mruby-compiler/core/parse.y:5764\n23    #8 0x4041a1 in load_file /root/mruby/mrbgems/mruby-bin-mrbc/tools/mrbc/mrbc.c:220\n24    #9 0x4041a1 in main /root/mruby/mrbgems/mruby-bin-mrbc/tools/mrbc/mrbc.c:285\n25    #10 0x7f2fd18f1b44 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b44)\n26\n27previously allocated by thread T0 here:\n28    #0 0x7f2fd1fd09f6 in __interceptor_realloc (/usr/lib/x86_64-linux-gnu/libasan.so.1+0x549f6)\n29    #1 0x488211 in mrb_realloc_simple /root/mruby/src/gc.c:201\n30    #2 0x488211 in mrb_realloc /root/mruby/src/gc.c:215\n31    #3 0x488211 in mrb_malloc /root/mruby/src/gc.c:236\n32    #4 0x4acea8 in sym_intern /root/mruby/src/symbol.c:81\n33    #5 0x4acea8 in mrb_intern /root/mruby/src/symbol.c:95\n34    #6 0x4acea8 in mrb_intern_cstr /root/mruby/src/symbol.c:107\n35    #7 0x5de18b in mrb_parser_set_filename /root/mruby/mrbgems/mruby-compiler/core/parse.y:5639\n36    #8 0x5eb623 in parser_init_cxt /root/mruby/mrbgems/mruby-compiler/core/parse.y:5467\n37    #9 0x5eb623 in mrb_parser_parse /root/mruby/mrbgems/mruby-compiler/core/parse.y:5520\n38    #10 0x5ed680 in mrb_parse_file /root/mruby/mrbgems/mruby-compiler/core/parse.y:5679\n39    #11 0x5ed680 in mrb_load_file_cxt /root/mruby/mrbgems/mruby-compiler/core/parse.y:5764\n40    #12 0x4041a1 in load_file /root/mruby/mrbgems/mruby-bin-mrbc/tools/mrbc/mrbc.c:220\n41    #13 0x4041a1 in main /root/mruby/mrbgems/mruby-bin-mrbc/tools/mrbc/mrbc.c:285\n42    #14 0x7f2fd18f1b44 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b44)\n43\n44SUMMARY: AddressSanitizer: double-free ??:0 __interceptor_free\n45==12142==ABORTING\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Memory Corruption - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1486448760,
  "report_url": "https://hackerone.com/reports/193517",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Clone the mruby git repository and build the mrbc compiler."
    ],
    [
      2,
      "Run the mrbc compiler with a crafted input file (test000) to trigger the double-free vulnerability."
    ]
  ],
  "vuln_description": "The vulnerability is a double-free issue in the mruby compiler (mrbc) where a crafted input file causes the compiler to free the same memory region twice during the cleanup phase, leading to a crash or potential code execution.",
  "reason": "The vulnerability involves a straightforward memory management error (double-free) that was discovered through fuzzing. The attack does not require complex interactions or state manipulation, and the issue is relatively common in memory-unsafe languages like C.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}