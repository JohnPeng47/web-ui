{
  "reported_to": "curl",
  "reported_by": "s0urc3_ ",
  "title": "NULL Pointer dereference in idn.c",
  "content": "\nSummary:\nA NULL Pointer dereference vulnerability is present in idn.c source code.\nThis module is responsible of handling international domain name.\nThis issue was found performing manual source code review of Curl which took >20 hours.\nSteps To Reproduce:\nFind below a detailed and commented execution flow / code snippet explanation.\nImpact\nIn some circumstances writing or reading memory is possible, which may lead to code execution.\nCode Snippet\nCode 1.37 KiB\n1static CURLcode idn_decode(const char *input, char **output)\n2{\n3\n4char *decoded = NULL;\n5/* 4. 'decoded' initialized to a null pointer value\t*/\n6\n7CURLcode result = CURLE_OK;\n8#ifdef USE_LIBIDN2\n9if(idn2_check_version(IDN2_VERSION)) {\n10\t\n11/* 5. Assuming the condition is false\t*/\n12/* 6. Taking false branch\t*/\n13\n14int flags = IDN2_NFC_INPUT\n15#if IDN2_VERSION_NUMBER >= 0x00140000 | IDN2_NONTRANSITIONAL\n16#endif;\n17int rc = IDN2_LOOKUP(input, &decoded, flags);\n18if(rc != IDN2_OK)\n19rc = IDN2_LOOKUP(input, &decoded, IDN2_TRANSITIONAL);\n20if(rc != IDN2_OK)\n21result = CURLE_URL_MALFORMAT;\n22}\n23#elif defined(USE_WIN32_IDN)\n24result = win32_idn_to_ascii(input, &decoded);\n25#endif\n26\n27if(!result)\n28/* 7. Taking true branch */\n29*output = decoded;\n30/* 8. Null pointer value stored to 'decoded'\t*/\n31return result;\n32/* 9. Returning zero (loaded from 'result'), which participates in a condition later */\n33\n34...\n35\n36#ifdef USE_IDN\n37\n38if(!Curl_is_ASCII_name(host->name)) {\n39/* 1. Assuming condition is True */\n40char *decoded;\n41\n42/* 2  Calling idn_decode */\n43CURLcode result = idn_decode(host->name, &decoded); \n44\n45/* 10. Returning from idn_decode*/\n46if(!result) \n47/* 11. Taking True branch */\n48{\n49    if(!*decoded) \n50    {\n51\t/* 12.  Dereference of null pointer (loaded from variable 'decoded') */\n52    Curl_idn_free(decoded);\n53    return CURLE_URL_MALFORMAT;\n54\t}\n55\n56host->encalloc = decoded;\n57host->name = host->encalloc;\n58}\n59else\n60    return result;\n61}\n62#endif\n63return CURLE_OK;\n64 }\nRemediation\nImplement sanity checks to never dereference null pointer.\nReferences\nhttps://cwe.mitre.org/data/definitions/476.html\nhttps://0x00sec.org/t/kernel-exploitation-dereferencing-a-null-pointer/3850\nhttps://www.abatchy.com/2018/01/kernel-exploitation-6\nhttps://access.redhat.com/articles/20484\nImpact\nCrash or Segmentation Fault: If the decoded pointer is dereferenced when it is still NULL, it will lead to a crash or segmentation fault. This can disrupt the normal operation of the program.\nExploitation Scenario: An attacker can send specially crafted input data to trigger the vulnerable code path, causing the program to crash. While this doesn't directly lead to a security breach, it can be used as part of a larger attack to disrupt a service or application.\nExploitation Scenario: An attacker can send specially crafted input data to trigger the vulnerable code path, causing the program to crash. While this doesn't directly lead to a security breach, it can be used as part of a larger attack to disrupt a service or application.\nDenial of Service (DoS): A null pointer dereference can be exploited to cause a DoS attack by repeatedly triggering the vulnerable code path, causing the application to crash and become unavailable.\nExploitation Scenario: An attacker could send a high volume of malicious requests that exploit the vulnerability, causing the service to crash repeatedly. This results in a DoS condition, making the service unavailable to legitimate users.\nExploitation Scenario: An attacker could send a high volume of malicious requests that exploit the vulnerability, causing the service to crash repeatedly. This results in a DoS condition, making the service unavailable to legitimate users.\nRemote Code Execution (Rare): In some cases, null pointer dereferences can potentially be leveraged for remote code execution if the attacker can control the data that leads to the dereference and can influence the program's control flow.\nExploitation Scenario: An attacker would need to have a deep understanding of the program's memory layout and control flow to craft input that not only triggers the null pointer dereference but also redirects program execution to attacker-controlled code. This scenario is less likely but more severe.\nExploitation Scenario: An attacker would need to have a deep understanding of the program's memory layout and control flow to craft input that not only triggers the null pointer dereference but also redirects program execution to attacker-controlled code. This scenario is less likely but more severe.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "NULL Pointer Dereference"
  ],
  "screenshots": {},
  "disclosed_date": 1695226020,
  "report_url": "https://hackerone.com/reports/2171309",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Assume the condition in Curl_is_ASCII_name(host->name) is True, triggering the IDN decoding path"
    ],
    [
      2,
      "Call idn_decode(host->name, &decoded) which may return a NULL pointer in 'decoded' due to failed IDN2_LOOKUP operations"
    ],
    [
      3,
      "Check if(!result) evaluates to True (successful return from idn_decode)"
    ],
    [
      4,
      "Attempt to dereference *decoded when it's NULL, leading to a crash"
    ]
  ],
  "vuln_description": "A NULL pointer dereference vulnerability exists in the IDN (International Domain Name) handling code of Curl. When processing non-ASCII domain names, the function idn_decode() may return a NULL pointer in its output parameter, which is then dereferenced without proper NULL checks, potentially causing a crash or allowing for denial of service.",
  "reason": "The vulnerability requires understanding the IDN processing flow and recognizing the missing NULL check after a function call. While the execution path is somewhat linear, identifying this requires knowledge of both the IDN handling code and the specific conditions under which idn_decode() might return a NULL pointer.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}