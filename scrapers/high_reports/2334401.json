{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "bart ",
  "title": "Denial of Service caused by HTTP/2 CONTINUATION Flood",
  "content": "\nI sent the following report to Apache Tomcat Security Team. They confirmed the report and assigned CVE-2024-24549. I'd like to ask if this is eligible for a bounty.\nI'd like to report a DoS vulnerability in Tomcat. I tested 10.1.18 and 11.0 (tomcat:latest and tomcat:11.0 docker images respectively) and it seems that both are vulnerable.\nAn attacker can send headers using HTTP/2 CONTINUATION frames up to the limit of header bytes, header size and connection overhead so that connection is not dropped by a server (GOAWAY/ENHANCE_YOUR_CALM). Once frames are sent a connection is left intact and a new connection starts. After a few connections like these the server crashes with (java.lang.OutOfMemoryError: Java heap space) in the code connected to HPackHuffman decoding.\nThe lack of experience with Java does not allow me to debug this properly to give you a definitive answer what is causing the problem however here is my best guess:\nWhen sending HEADERS + N * CONTINUATION frames are sent the actual headers are stored in memory.\nWhen TCP connection is idle (and possibly when connection is dropped) the headers stay in memory.\nBecause of this even a small number of connections are able to occupy hundreds of MB of server memory.\nI'm attaching an exploit (in Golang) with reproduction steps:\nStart tomcat docker container (-m 800m limits memory to 800MB just to prove the point faster): docker run -m 800m -d -p 7777:8080 --name tomcat tomcat:latest\nSSH into a container to enable HTTP/2 (https://tomcat.apache.org/tomcat-8.5-doc/config/http.html#HTTP/2_Support).\nStop and start container to pick up new config: docker stop tomcat docker start tomcat\nRun exploit: go run exploit.go -address \"[ip]:7777\" -connections 50\nTo test it I started a remote EC2 server. After a few seconds after the exploit starts the server becomes unresponsive, CPU goes to 100% and memory usage fills quickly (observe with docker stats). After a few seconds you'll see OOM errors in catalina log (see attachment). While the CPU will drop to 0% soon, no new connections will be processed by the server even when the exploit is not running anymore.\nHere's how exploit.go works:\nIt pregenerates 100 headers, each 10 chars long.\nIt starts connections (-connections flag means how many active connections can be running at a time). Each connection:\nSends HEADERS frame.\nSends 8 CONTINUATION frames, each consists of 100 random headers (10 chars name and 10 chars value). These params are almost reaching the header size limits but not exceeding them so connection is not dropped.\nOnce headers are sent, connection is left intact and new connection starts.\nSends HEADERS frame.\nSends 8 CONTINUATION frames, each consists of 100 random headers (10 chars name and 10 chars value). These params are almost reaching the header size limits but not exceeding them so connection is not dropped.\nOnce headers are sent, connection is left intact and new connection starts.\nIt seems that finding a reason why the server is crashing can be challenging for the server admin because even a single full HTTP request is not made (note that the last CONTINUATION frame doesn't have END_HEADERS flag) so they won't see HTTP requests in the logs. I'm not aware of any configuration params that can prevent this attack. Thus, it seems the only mitigation is turning off HTTP/2 support (or code fix).\nImpact\nIt causes a server crash so complete availability loss.\n\n",
  "severity": [
    7.5,
    null
  ],
  "bounty": 4860,
  "weaknesses": [
    "Uncontrolled Resource Consumption"
  ],
  "screenshots": {},
  "disclosed_date": 1713829920,
  "report_url": "https://hackerone.com/reports/2334401",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Start Tomcat docker container with memory limit: docker run -m 800m -d -p 7777:8080 --name tomcat tomcat:latest"
    ],
    [
      2,
      "Enable HTTP/2 support in Tomcat configuration and restart the container"
    ],
    [
      3,
      "Run the exploit: go run exploit.go -address \"[ip]:7777\" -connections 50"
    ],
    [
      4,
      "Observe server crash with java.lang.OutOfMemoryError"
    ]
  ],
  "vuln_description": "A Denial of Service vulnerability in Apache Tomcat caused by HTTP/2 CONTINUATION flood, where sending multiple CONTINUATION frames with headers consumes excessive memory, leading to server crash due to heap space exhaustion.",
  "reason": "The attack requires understanding of HTTP/2 protocol specifics, particularly CONTINUATION frames and header handling, as well as memory management in Java applications. The exploit involves carefully crafting requests to stay within server limits while still causing memory exhaustion, which is non-trivial.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}