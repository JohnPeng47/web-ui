{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "aerodudrizzt ",
  "title": "GarlicRust - heartbleed style vulnerability in major I2P C++ router implementations",
  "content": "\nBrief\nI2pd and kovri are both C++ I2P routers that share the same code base, as kovri was forked from i2pd several years ago. The vulnerability lies in a common code piece, making both implementations vulnerable, as was acknowledged by orignal, the main developer of i2pd.\nThe vulnerability is that there is lack of sanitation checks when handling Garlic messages in the both routers: by sending a specially crafted Garlic message, an attacker can cause the router to send onward an I2P message containing leaked RAM data, triggering a massive (up to ~16KB) information leakage.\nTechnical Details:\nCode Version: Taken from Kovri Github on the 18th of November 2017\nCommit 5aafe6608519d31e537c97b24ea7b23aa372dd5b\nVulnerable File: src\\core\\router\\garlic.h\nVulnerable Function: GarlicDestination::HandleGarlicPayload\nThe function is responsible to parse and handle Garlic Payloads: several independent Garlic Cloves.\nWhen handling a clove with a delivery type of \"DeliveryTypeTunnel\" there are insufficient checks on the message, before it is wrapped and sent onward:\nCode 2.32 KiB\n1    GarlicDeliveryType delivery_type = (GarlicDeliveryType)((flag >> 5) & 0x03);\n2    switch (delivery_type) {\n3      case eGarlicDeliveryTypeLocal:\n4        LOG(debug) << \"GarlicDestination: Garlic type local\";\n5        HandleI2NPMessage(buf, len, from);\n6      break;\n7      case eGarlicDeliveryTypeDestination:\n8        LOG(debug) << \"GarlicDestination: Garlic type destination\";\n9        buf += 32;  // destination. check it later or for multiple destinations\n10        HandleI2NPMessage(buf, len, from);\n11      break;\n12      case eGarlicDeliveryTypeTunnel: {\n13        LOG(debug) << \"GarlicDestination: Garlic type tunnel\";\n14        // gateway_hash and gateway_tunnel sequence is reverted\n15        std::uint8_t* gateway_hash = buf;\n16        buf += 32;\n17        std::uint32_t gateway_tunnel = bufbe32toh(buf);\n18        buf += 4;\n19        std::shared_ptr<kovri::core::OutboundTunnel> tunnel;\n20        if (from && from->GetTunnelPool())\n21          tunnel = from->GetTunnelPool()->GetNextOutboundTunnel();\n22        // EI [BUG-TRACE] : The payload length is based on an unchecked length field\n23        // EI             : from the just found I2NP message contained in the clove.\n24        // EI             : When creating and sending this message onward we may leak\n25        // EI             : heap memory data to the destination node [18/11/2017]\n26        if (tunnel) {  // we have send it through an outbound tunnel\n27          auto msg = CreateI2NPMessage(buf, kovri::core::GetI2NPMessageLength(buf), from);\n28          tunnel->SendTunnelDataMsg(gateway_hash, gateway_tunnel, msg);\n29        } else {\n30          LOG(debug)\n31            << \"GarlicDestination: no outbound tunnels available for garlic clove\";\n32        }\n33        break;\n34      }\n35      case eGarlicDeliveryTypeRouter:\n36        LOG(warning) << \"GarlicDestination: Garlic type router not supported\";\n37        buf += 32;\n38      break;\n39      default:\n40        LOG(error)\n41          << \"GarlicDestination: unknown garlic delivery type \"\n42          << static_cast<int>(delivery_type);\n43    }\n44    buf += kovri::core::GetI2NPMessageLength(buf);  // I2NP\n45    buf += 4;  // CloveID\n46    buf += 8;  // Date\n47    buf += 3;  // Certificate\n48    // EI [BUG_TRACE] : This check is too late since the I2NP message was already sent. [18/11/2017]\n49    if (buf - buf1  > static_cast<int>(len)) {\n50      LOG(error) << \"GarlicDestination: clove is too long\";\n51      break;\n52    }\nThis vulnerability was first sent to the kovri bug bounty program (under the Monero project), later to be found as out-of-scope since kovri was found pre-mature and they removed it from the bug bounty scope. As part of the submission to the kovri project I demonstrated an exploit, and sent the project the entire test lab so they could re-create the exploit. Later on, orignal (i2pd) acknowledged the vulnerability in i2pd and issued a quick fix that can be found in i2pd version 2.17.0.\nI am attaching the logs from the exploit demonstration to this ticket,. The logs shows the debug trace of the victim router and the leaked message as it was received by the attacker router. More info can be found in my blog post regarding the vulnerability - link.\nAfter both projects patched the vulnerability, a public CVE was issued: CVE 2017-17066 a.k.a GarlicRust.\nImpact\nThe PoC exploit demonstration (elaborated here) shows that the GarlicRust vulnerability can be exploited to leak sensitive memory data from any victim C++ i2p router. The exploit is logical and triggers no memory errors, and so it can be used repeatedly and without worries. An attacker can use this vulnerability in an attempt to read session keys, private keys, old messages or any other valuable assets that is stored on the target\u2019s heap.\nThis vulnerability poses a major threat to the anonymity of the users in the Invisible Internet Protocol network (I2P). This threat also impact several crypto-currencies as the I2P network is used as an additional anonymity layer in major crypto-currencies such as: Anoncoin (ANC), and Monero (XMR).\n\n",
  "severity": [
    7.7,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Buffer Over-read"
  ],
  "screenshots": {},
  "disclosed_date": 1573620300,
  "report_url": "https://hackerone.com/reports/295740",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify the vulnerable function `GarlicDestination::HandleGarlicPayload` in the I2P router implementations (i2pd or kovri)."
    ],
    [
      2,
      "Craft a malicious Garlic message with a delivery type of `DeliveryTypeTunnel` and an unchecked length field to trigger the information leak."
    ],
    [
      3,
      "Send the crafted message to the target I2P router to exploit the vulnerability and leak heap memory data (up to ~16KB)."
    ]
  ],
  "vuln_description": "The vulnerability, dubbed GarlicRust, is an information disclosure flaw in I2P router implementations (i2pd and kovri). It arises due to insufficient sanitation checks when handling Garlic messages, specifically those with a delivery type of `DeliveryTypeTunnel`. By exploiting this flaw, an attacker can cause the router to leak sensitive heap memory data, including potentially private keys, session keys, or old messages.",
  "reason": "The vulnerability involves understanding the Garlic message handling mechanism, specifically the `DeliveryTypeTunnel` case, and the subtle interaction between the unchecked length field and the message forwarding logic. While the attack is logical and does not involve memory corruption, it requires precise manipulation of the Garlic message structure to trigger the leak.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}