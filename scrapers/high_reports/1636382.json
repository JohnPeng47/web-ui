{
  "reported_to": "Elastic",
  "reported_by": "dee-see ",
  "title": "Synthetics Recorder: Code injection when recording website with malicious content",
  "content": "\nSummary\nHello team! Synthetics recorder has a quote function to escape user-controlled input, but in one particular scenario the escaping isn't enough and a malicious website can inject arbitrary code in the recorder session.\nDescription\nThe waitForNavigation event calls quote within the context of a multi-line comment (/* ... */) so we can break out of that without using the escaped characters (reference)\nIn a normal situation the code generated looks like this for a navigation event to https://example.com\nCode 63 Bytes\n1    page.waitForNavigation(/*{ url: 'https://example.com' }*/),\nbut it's possible to escape out of the comment without using single quotes (which would be escaped) with a specially crafted URL like https://example.com?q=*/require(child_process).exec(touch$IFS/tmp/haxx)/*\nCode 124 Bytes\n1    page.waitForNavigation(/*{ url: 'https://example.com?q=*/require(`child_process`).exec(`touch$IFS/tmp/dee-see`)/*' }*/),\nThe syntax highlighting here on HackerOne helps visualizing how that works. $IFS is used because spaces get encoded to %20.\nIt's possible to have code execution when the victim uses the test feature inside of the synthetic recorder but the code we're allowed to use is fairly limited because the require function isn't available. The maximum impact is when the user saves the recorded session as a project and executes it using the synthetic runner.\nSteps To Reproduce\nPreparation\nInstall the synthetics recorder (See https://github.com/elastic/synthetics-recorder/, I'm following the instructions to run it in development mode (nvm install; nvm use; npm install; npm run dev) but you could also download the binary on the releases page)\nReproduction\nStart Synthetics Recorder and enter http://deesee.xyz:4567 in the text box where it says \"Enter a Starting URL\"\nClick \"Start Recording\"\n<image_0>\nClose the browser window\nIn a normal Synthetics Recorder session there would be much more steps to record but here we only did what's necessary to trigger the issue.\nstep('Go to http://deesee.xyz:4567/', async () => {\n  await page.goto('http://deesee.xyz:4567/');\n  await Promise.all([\n    page.waitForNavigation(/*{ url: 'https://gitlab.com/dee-see?query=*/require(`child_process`).exec(`touch$IFS/tmp/dee-see`)/*' }*/),\n    page.click('[aria-label=\"GitLab\"] svg')\n  ]);\n});\nClick the \"Export\" button and save the file in a directory\nIn that directory run npm init -y; npm install @elastic/synthetics; npx @elastic/synthetics .\nWhen the tests finished running observe that the touch /tmp/dee-see command ran\nThose last steps seem contrived, but that's how a synthetics test suite is setup and how a developer would make sure the session they just recorded would be integrated into their builds and whatnot.\nSupporting Material/References:\nCVSS\nConfidentiality and Integrity impact are High because of the arbitrary command execution. I also included Availability impact because those commands can shut down the system. I will concede though that Attack Complexity could be \"very high\" if that existed on the Attack Complexity scale. :)\nImpact\nSomeone with control over the website's content can run arbitrary code where ever the synthetics recorded session will be re-executed.\nDeveloper computers and CI systems come to mind. The most realistic attack scenario would be privilege escalation from within a company.\n\n",
  "severity": [
    8.2,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/gl9oh0ecthzdki9e10peyaogknz6?response-content-disposition=attachment%3B%20filename%3D%22gl.png%22%3B%20filename%2A%3DUTF-8%27%27gl.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQT4ITYTNW%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T002152Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIC6h%2BrdYXb2SCjM6RglUQZmdJGtnAEp4YtE6frzu5iOmAiEAmEc2%2Bo0J6oLX1vCnRWFGAVbW7lH%2B6aoT233Nps5VBnIquwUI%2Bf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDK%2F1PwnCfCsvULM%2BeSqPBcJ6fpZnxNnO1gFQLrF%2F4yTt3IGOqTr03BGE6%2F5pJY%2Fk6Rl4Mu3bQ1fDPk6K5KUlumLcxSI1Zwz%2FwTUHaHeNQYba2d1%2B8ZOLGhCjfAF4XXnhueAZ7ej%2BY1r23ifUt525NqynE6DhCPR4c7EnJp14LYBHJJpp7W3EnsJeGxPeKOIzwgZYLOE2FwMwg8rursVbjISmeMc7qNnlR0uXS7M8C6hVIxANlM3rWh2kslZpiPopS35xJKpNYX69WWdJ4fSWRYMzglRkwOht7IKgW46gf0rcpO3jxXYBcafvAxrZoTIjSYgOuCAFu%2BWy92kxq8L3djmdOuYBMLa0LoujGB9248wdr2BLsYdvdD0cLe6XhGbkMzDfx0vLF6BoTsGl59rG0e4lVwr6Te2H81DM9ZlPERlzjXTXsfGeDmzHf7SLchHqj4PWImCBAoVO5oKtOhYRho0APNMxvkHA4xB8YQb8hbNqvDCT7nJ97mxGoCObQFU3d%2FOkHWeMoKT5CH%2FQLe0d%2FAnjn4OSj3Ble6%2BCv2LmEBr%2FsOmodDBdQ71jQnqi0mXbbw1mTimS3zADThG2Mjj5tcelm8rBSn6fI96D%2BIIiCJMa8mzYz%2BMVybN9s4%2FQaa2hMyvIbiIwIZUDoOPnNH8DarZ%2FpPkOgyO8jJjuy%2FRH%2FZoUQdAUSARQPpukLHefJDvvHk2VrvYLb%2BYEt3wPCTqAdVynkj6b8EKsj0f9vlAHRI8Z%2BbJYIagix4v67FZoEem9%2F392mdg8Ri7D4JrI290atMQ90ktd4QfHE1hdTlq2WpgMsIrpzgrN%2BJbAnRglh6X%2Bq0MLrTirtRqjS4x9CqQ8WaSi0bzJMoMItxYB0AGCx2u%2F2sUCFLd8dp0C67eDTQgw2%2BCHvwY6sQEtUVhG4aIcJqhsEpdoGtfR3QOgtl%2Fyf2WL%2FXBanc%2FBDE3zYX7shwCfGxHsX%2Fm2Bm4cadboPWoMl5oQzkYPTtuntYVomKFyTBRjwtjPghR7I1%2BvgBW5SGtHeN6%2FSTlu6FVxcSG92%2FvFDnEo3nUJGIUZfTAMQoaa5NpnW82agUdMmewDAvGcWXijVLhn8Mv31YhO3tM%2BCtPlUtKTOOL9gcutQFndEbXSN0kwBdyYsWCUeMo%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2434a67843ca7da97183387651e2744f1a4867159d54e2ae18067b796bd4ff6a"
  },
  "disclosed_date": 1680989100,
  "report_url": "https://hackerone.com/reports/1636382",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install and run the Synthetics Recorder in development mode or download the binary."
    ],
    [
      2,
      "Start recording a session with a malicious URL designed to break out of the comment context in the generated code."
    ],
    [
      3,
      "Export the recorded session and execute it using the synthetic runner to trigger the arbitrary command execution."
    ]
  ],
  "vuln_description": "The vulnerability allows for code injection in the Synthetics Recorder when recording a website with malicious content. Specifically, the waitForNavigation event's quote function fails to properly escape user-controlled input within a multi-line comment context, enabling an attacker to inject arbitrary code that executes when the recorded session is run.",
  "reason": "The attack requires understanding the specific context in which the quote function is used within a multi-line comment, crafting a URL that can break out of this context without using escaped characters, and knowing how the recorded session is executed. The interaction between the URL crafting and the comment context is subtle and not immediately obvious.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves code injection during website recording, which is not directly related to authentication or authorization boundaries within the same application. The methodology focuses on swapping user sessions and resource IDs within the same application context, whereas this issue involves exploiting a code injection vulnerability in a recording tool.",
    "is_detectable": false
  }
}