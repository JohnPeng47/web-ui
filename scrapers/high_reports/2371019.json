{
  "reported_to": "Automattic",
  "reported_by": "renniepak ",
  "title": "DOM XSS on multiple Automattic domains through postMessages",
  "content": "\nHi Automattic team,\nI have found a 2 flaws that when combined lead to DOM XSS on every website that is using Jetpack with the Likes feature enabled.\nThe 2 flaws are respectively:\nA DOM XSS vulnerability on https://widgets.wp.com/sharing-buttons-preview/\nThe Jetpack plugin creates a postMessage listener allowing messages from the \"widgets.wp.com\" origin, but will not validate nor encode the avatar_url parameter before applying it to the DOM causing XSS.\nReproduction:\nNavigate to https://0-a.nl/jetpackxssclick.html?url=https://wordpress.com/blog/2024/01/31/http3/ and click the PoC link.\nResult\nIn the newly opened window a alert(document.domain) will pop on https://wordpress.com\n<image_0>\nRoot causes\nXSS on widgets.wp.com\nThe DOM XSS here is caused by the following included script:\nhttps://widgets.wp.com/sharing-buttons-preview/js/preview.js\nCode 474 Bytes\n1        if (_.isArray(r.custom)) {\n2            i = _.template(e(\"#tmpl-custom-button\").html());\n3            s = _.map(r.custom, function(e) {\n4                var t = g.parseUrl(e.icon);\n5                return new d({\n6                    ID: e.name,\n7                    markup: i({\n8                        icon: o + \"/\" + t.host + t.pathname,\n9                        name: e.name\n10                    })\n11                })\n12            });\n13            n = n.concat(s)\n14        }\nIt's not that obvious because of the minified javascript but what happens is that 2 url parameters are parsed and used to add a UI element to the DOM:\n?custom[0][icon]=iconurl&custom[0][name]=name\nWe can abuse the name parameter to create an XSS.\nhttps://widgets.wp.com/sharing-buttons-preview/?custom[0][icon]=iconurl&custom[0][name]=%22%3E%3Cimg%20src%20onerror=alert()%3E\n<image_1>\nInsecure postMessage listener / codeblock\nWhen we navigate to a website that has the Jetpack Likes feature enabled, a postMessage listener will be launched that will execute the JetpackLikesMessageListener function when a message arrives.\nWe can see it contains an origin check to only allow messages from widgets.wp.com. We can bypass this now since we have XSS on that domain:\nCode 101 Bytes\n1const allowedOrigin = 'https://widgets.wp.com';\n2\tif ( allowedOrigin !== event.origin ) {\n3\t\treturn;\n4\t}\nWhen we follow the code to the showOtherGravatars case, you'll see it use a liker.avatar_URL parameter (that is received via a postMessage) directly with innerHTML. This will allow us to send a tampered postMessage causing the XSS to be triggered.\nCode 252 Bytes\n1element.innerHTML = `\n2\t\t\t\t<a href=\"${ encodeURI( liker.profile_URL ) }\" rel=\"nofollow\" target=\"_parent\" class=\"wpl-liker\">\n3\t\t\t\t\t<img src=\"${ liker.avatar_URL }\"\n4\t\t\t\t\t\talt=\"\"\n5\t\t\t\t\t\tstyle=\"width: 28px; height: 28px;\" />\n6\t\t\t\t\t<span></span>\n7\t\t\t\t</a>\n8\t\t\t\t`;\nMitigation\nApplying input validation and output encoding on the sharing-button page to mitigate the XSS https://widgets.wp.com/sharing-buttons-preview/\nDefence in depth: now any XSS on widgets.wp.com will lead to multiple XSSes all over the internet (anyone using the Jetpack Likes features). To mitigate this, I would also apply encodeURI to the avatar_url before using it in innerHTML. Upon further research it seemed older version of the plugin did exactly this, but in later versions this was removed.\nImpact\nXSS on a number of Automattic domains:\nhttps://0-a.nl/jetpackxssclick.html?url=https://wordpress.com/blog/2024/01/31/http3\nhttps://0-a.nl/jetpackxssclick.html?url=https://jetpack.com/blog/wordpress-navigation-menu/\nYou probably have better insights in this (also I'd love to hear the actual number :) ) but searching publicwww.com revealed over 100k websites using this feature, meaning 100k domains vulnerable to this XSS.\nThis is also the reason I picked High for severity. If it was just wordpress.com I would probably have gone for Medium which is more typical for these kind of XSSes without providing more impact specific to the vulnerable domain. But in this case the vulnerability reaches far beyond the 1 domain.\nIn general, if an attacker can control a script that is executed in the victim's browser, then they can typically fully compromise that user. Amongst other things, the attacker can:\nPerform any action within the application that the user can perform.\nView any information that the user is able to view.\nModify any information that the user is able to modify.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - DOM"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/x6vxoq9vhis15vc5fjgr62evddzz?response-content-disposition=attachment%3B%20filename%3D%22image.png%22%3B%20filename%2A%3DUTF-8%27%27image.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXSYNEIXS%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T221534Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCID34EjFczoP1AjX9wTcrwX01Xh5LYwoYOnMQLlFVYWIdAiBbpQJSkWEQhhnP3zcCVWrbrTi80fcQqNnBE8AA5rSIESq7BQjz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIMcwXVHg4YyWhz8TFvKo8FtD4c5BjMeV125K1w41MsQxaE1Z5piY%2BWYCLuJ8C9JHEMnMYc3et02nod3A%2BV%2FBSXZdbnE5ZvakUuemlcfJMPCy0qgJgN3skRaRmIN1j10kqsgeZd0Yn4nNcUA2cSIjqArKICHRDMnNN6bE5GQvWFLG3FZC%2FlFNUfhfQjqs08gAkby3R4JiEzxQqu5K%2B1vft1i8pQKsRwVopPhvRiib7qlOtVmRTavaSuxo%2Fkk1ZufJPA0TJoaUbc0GnZQKEQFeh2VovdSQ4Kam2yPUX8bZMHUWdcZiy%2BDvomf%2BnHVVkH2Lxr0y35m6siQOhGyu%2Fh%2BdOGGWcUqKa9Q%2B4NGLChKi98JfXJsEEDN7uyg%2FF1ZooLggIR3erogeGigVX2On22hhXFTBl0%2FgPm0i9WzK2NkZUOaN%2FG%2FODK1pLJrTj7lQDO0pbGEzWGtCxE0NnVUizsZ3d43936aiXwE0DBS00hgTuOs1ueqt%2FiZTip0cRns7WVtQyGRvCrldyrIubIKnRXPrMxGTYM2kezEn1UFC6Xd8YYWXzZeb%2FoodNtNHg7Ej%2BbuAhVCx7lDf8gLQiBZeriKB0ozSTuH8%2FndYVkG7YnrkDnjqmwf8lEDBHlVcZQURxTD4Ga%2BBpMZlcwjtoZmxL6tgFhRgbIqRzV42DjMCvOXRPiT9tMqR%2BYFAnJMshgnQPmPCdJxnmFaHOUEvTqJGZcta73Wu6OL3S8Bq9qmdbNTNWcVGCIuad53Hdwy70ISiTxN47Gyna1m4smeriDZN%2B%2FdqrD%2FFCfKhzWIY7XidizbSbUT%2B43QALV2taxtJOXsp1gC7oxOM%2FuxqZizYF3buHt9JgpoEsIfPsaKDzMdxUGIhJFiUICpXbmWigsg4j%2FwFoSJDCPuoa%2FBjqyAS78m2TJbVWqb8BNA%2F73N%2FLA63wIYtada0tGJZOhUibVMnsoUL1s6ymAhEPtcjyeVzTXVNSB0J3%2BiIIEahreNu5Cj8GeEwW1jfNps%2BL3Fp2E%2Bh%2FFoRQCh0J%2FjnTQ%2FpOunsHejVL1BL0uGcuniNEYPtmoBs2jlO%2FU6SplGcVe2tKr%2BVg12L5eAMdUMEkSIlphDSSfMKrC6teFB%2F1%2FzdPIgIijpFXu6ca%2F80iTNr3GVaFgiIM%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=1e79b9b49dfaab81d3ad6b97bbcb58b99c12c3ef53c2a427df3568591f095961",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/hvuc04u98wjp4ql4unq3msamb09l?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_2024-02-12_at_09.35.51.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_2024-02-12_at_09.35.51.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXSYNEIXS%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T221534Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCID34EjFczoP1AjX9wTcrwX01Xh5LYwoYOnMQLlFVYWIdAiBbpQJSkWEQhhnP3zcCVWrbrTi80fcQqNnBE8AA5rSIESq7BQjz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIMcwXVHg4YyWhz8TFvKo8FtD4c5BjMeV125K1w41MsQxaE1Z5piY%2BWYCLuJ8C9JHEMnMYc3et02nod3A%2BV%2FBSXZdbnE5ZvakUuemlcfJMPCy0qgJgN3skRaRmIN1j10kqsgeZd0Yn4nNcUA2cSIjqArKICHRDMnNN6bE5GQvWFLG3FZC%2FlFNUfhfQjqs08gAkby3R4JiEzxQqu5K%2B1vft1i8pQKsRwVopPhvRiib7qlOtVmRTavaSuxo%2Fkk1ZufJPA0TJoaUbc0GnZQKEQFeh2VovdSQ4Kam2yPUX8bZMHUWdcZiy%2BDvomf%2BnHVVkH2Lxr0y35m6siQOhGyu%2Fh%2BdOGGWcUqKa9Q%2B4NGLChKi98JfXJsEEDN7uyg%2FF1ZooLggIR3erogeGigVX2On22hhXFTBl0%2FgPm0i9WzK2NkZUOaN%2FG%2FODK1pLJrTj7lQDO0pbGEzWGtCxE0NnVUizsZ3d43936aiXwE0DBS00hgTuOs1ueqt%2FiZTip0cRns7WVtQyGRvCrldyrIubIKnRXPrMxGTYM2kezEn1UFC6Xd8YYWXzZeb%2FoodNtNHg7Ej%2BbuAhVCx7lDf8gLQiBZeriKB0ozSTuH8%2FndYVkG7YnrkDnjqmwf8lEDBHlVcZQURxTD4Ga%2BBpMZlcwjtoZmxL6tgFhRgbIqRzV42DjMCvOXRPiT9tMqR%2BYFAnJMshgnQPmPCdJxnmFaHOUEvTqJGZcta73Wu6OL3S8Bq9qmdbNTNWcVGCIuad53Hdwy70ISiTxN47Gyna1m4smeriDZN%2B%2FdqrD%2FFCfKhzWIY7XidizbSbUT%2B43QALV2taxtJOXsp1gC7oxOM%2FuxqZizYF3buHt9JgpoEsIfPsaKDzMdxUGIhJFiUICpXbmWigsg4j%2FwFoSJDCPuoa%2FBjqyAS78m2TJbVWqb8BNA%2F73N%2FLA63wIYtada0tGJZOhUibVMnsoUL1s6ymAhEPtcjyeVzTXVNSB0J3%2BiIIEahreNu5Cj8GeEwW1jfNps%2BL3Fp2E%2Bh%2FFoRQCh0J%2FjnTQ%2FpOunsHejVL1BL0uGcuniNEYPtmoBs2jlO%2FU6SplGcVe2tKr%2BVg12L5eAMdUMEkSIlphDSSfMKrC6teFB%2F1%2FzdPIgIijpFXu6ca%2F80iTNr3GVaFgiIM%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=6a544dd81032242ea38fda5a3577cc23e04eef462add290eeb28a2c47c2c4088"
  },
  "disclosed_date": 1708953840,
  "report_url": "https://hackerone.com/reports/2371019",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Navigate to https://widgets.wp.com/sharing-buttons-preview/?custom[0][icon]=iconurl&custom[0][name]=%22%3E%3Cimg%20src%20onerror=alert()%3E to trigger XSS on widgets.wp.com"
    ],
    [
      2,
      "Use the XSS to send a malicious postMessage to a Jetpack-enabled site, bypassing origin checks and injecting arbitrary JavaScript via the avatar_URL parameter"
    ]
  ],
  "vuln_description": "This is a DOM XSS vulnerability affecting multiple Automattic domains through insecure postMessage handling in Jetpack's Likes feature. The attack combines an XSS in widgets.wp.com with insecure postMessage handling in Jetpack, allowing attackers to execute arbitrary JavaScript in the context of any Jetpack-enabled site.",
  "reason": "The vulnerability requires understanding and chaining two distinct flaws: (1) an XSS in widgets.wp.com that requires specific parameter manipulation, and (2) insecure postMessage handling in Jetpack that trusts messages from the compromised domain. The attacker must maintain context between these components and understand their subtle interaction where the XSS bypasses the origin check.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The vulnerability involves a DOM XSS that is triggered through a combination of flaws in the Jetpack plugin and the widgets.wp.com domain. The methodology described focuses on testing authentication and authorization boundaries by swapping user sessions and resource IDs within the same application. However, this vulnerability requires interaction between two different domains (widgets.wp.com and the target site using Jetpack) and involves postMessage communication, which is outside the scope of the described methodology. The methodology does not account for cross-domain messaging or DOM-based XSS vulnerabilities that arise from insecure handling of postMessage data.",
    "is_detectable": false
  }
}