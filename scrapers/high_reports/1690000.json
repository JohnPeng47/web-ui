{
  "reported_to": "Node.js",
  "reported_by": "bnoordhuis ",
  "title": "Weak randomness in WebCrypto keygen",
  "content": "\nhttps://github.com/nodejs/node/pull/35093 introduced a call to EntropySource() in SecretKeyGenTraits::DoKeyGen() in src/crypto/crypto_keygen.cc. There are two problems with this:\nIt does not check the return value, it assumes EntropySource() always succeeds, but it can (and sometimes will) fail.\nThe random data returned byEntropySource() may not be cryptographically strong and therefore not suitable as keying material.\nAn example is a freshly booted system or a system without /dev/random or getrandom(2).\nImpact\nEntropySource() calls out to openssl's RAND_poll() and RAND_bytes() in a best-effort attempt to obtain random data.\nOpenSSL has a built-in CSPRNG but that can fail to initialize, in which case it's possible either:\nNo random data gets written to the output buffer, i.e., the output is unmodified, or\nWeak random data is written. It's theoretically possible for the output to be fully predictable because the CSPRNG starts from a predictable state.\nThe output buffer is allocated in SecretKeyGenTraits::DoKeyGen() using OPENSSL_malloc() (alias for CRYPTO_malloc()), which in turn calls malloc().\nmalloc() does not zero the buffer but its contents may be predicted or manipulated by an external attacker, e.g. by manipulating an arraybuffer, then forcing the GC to reclaim it.\nUsers can override the CSPRNG (and do) so there are probably more failure modes. A buggy CSPRNG could write out only zeroes, for example, comparable to (2).\nI have a (trivial!) patch available. H1 gives this a really high CVSS score but I suppose that's appropriate when the worst case failure mode is a complete breakdown of confidentiality and integrity.\n\n",
  "severity": [
    8.4,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"
  ],
  "screenshots": {},
  "disclosed_date": 1666786680,
  "report_url": "https://hackerone.com/reports/1690000",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify the use of EntropySource() in SecretKeyGenTraits::DoKeyGen() in src/crypto/crypto_keygen.cc."
    ],
    [
      2,
      "Observe that the return value of EntropySource() is not checked, and the random data may not be cryptographically strong."
    ],
    [
      3,
      "Note that the output buffer is allocated using OPENSSL_malloc(), which does not zero the buffer, leaving it potentially predictable."
    ],
    [
      4,
      "Understand that a buggy CSPRNG could write out only zeroes or predictable data, leading to weak key generation."
    ]
  ],
  "vuln_description": "The vulnerability involves weak randomness in WebCrypto key generation due to unchecked use of EntropySource(), which can fail or return weak random data. This can lead to predictable key material, compromising confidentiality and integrity.",
  "reason": "The vulnerability requires understanding of cryptographic key generation, entropy sources, and memory allocation in OpenSSL. The interaction between these components is subtle, especially the potential for predictable buffer contents and CSPRNG failures.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}