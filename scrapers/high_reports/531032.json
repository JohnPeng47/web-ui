{
  "reported_to": "Slack",
  "reported_by": "sandrogauci ",
  "title": "Slack DTLS uses a private key that is in the public domain, which may lead to SRTP stream hijack",
  "content": "\nAffects: Janus DTLS certificate\nDescription\nThe Janus server in use by Slack is configured using a certificate and private key that were previously distributed by default. This certificate is used to authenticate the DTLS connection which is later used to exchange keys for the SRTP stream. As a result, the confidentiality of the WebRTC call over Slack cannot be ensured.\nHow to reproduce the issue\nStart Wireshark and set a display filter for stun\nIn the web browser, open about:webrtc-internals\nStart a call on Slack\nObserve the packets containing the string rainmaker which would be part of the DTLS certificate\nNotice that the SetRemoteDescription fingerprint in the about:webrtc-internals page is C5:5F:DA:7D:84:47:B1:BF:6B:55:16:62:48:31:3E:D3:F1:7B:25:89:92:4A:4B:4D:4D:D9:D5:AF:EA:D8:15:44\nThe old certificate can be obtained from the following commit where it was previously removed:\nhttps://github.com/meetecho/janus-gateway/commit/6f98f2dde644b3ead4a162c241dff9da1587ec13\nThe certificate's SHA256 checksum can be calculated using the OpenSSL command line tool as follows:\nCode 188 Bytes\n1openssl x509 -noout -fingerprint -sha256 -inform pem -in janus-cert1.crt \n2SHA256 Fingerprint=C5:5F:DA:7D:84:47:B1:BF:6B:55:16:62:48:31:3E:D3:F1:7B:25:89:92:4A:4B:4D:4D:D9:D5:AF:EA:D8:15:44\nAttachments:\ndump-stun.pcapng: contains the data stream containing the TURN tunnelled DTLS exchange and SRTP stream that follows\njanus-cert1.crt and janus-cert1.key are the certificate and key in use by Slack\n2019-04-07_16-06-wireshark.png shows the certificate in the Wireshark dump\n2019-04-07_16-13-fingerprint.png shows the SHA256 fingerprint which matches the public certificate and corresponding private key\nAn attacker would probably need to take the following steps to exploit this issue in the case of Slack:\nStart a man-in-the-middle attack using any known method (ARP cache poisoning, DNS cache poisoning, static routes on compromised network router etc)\nActively hijack the Slack TURN servers between the victim and the Internet\nWait for victim to make a Slack call\nHandle STUN packets from victim to attacker-controlled TURN server; allow authentication with any password\nStart DTLS exchange\nWhen DTLS certificate is required, present victim with the Janus default certificate\nThe attacker does NOT verify the victim's DTLS certificate\nThe SRTP Master Key is set over this DTLS connection\nAttacker can now handle the SRTP stream between the victim and attacker\nSolutions and recommendations\nIt is recommended to generate a new certificate and private key.\nImpact\nAttackers positioned as man-in-the-middle may hijack the DTLS connection and set their own SRTP keys, handling the SRTP stream instead of Slack. This is still research in progress but it does not appear that attackers can perform a two-way MITM attack due to the mutual authentication required by the DTLS exchange. Therefore, it seems that this vulnerability can only be abused to hijack the SRTP stream between the WebRTC client and Slack but not the other way round.\n\n",
  "severity": [
    8.7,
    null
  ],
  "bounty": 2000,
  "weaknesses": [
    "Use of Hard-coded Cryptographic Key"
  ],
  "screenshots": {},
  "disclosed_date": 1583986620,
  "report_url": "https://hackerone.com/reports/531032",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Start Wireshark and set a display filter for STUN."
    ],
    [
      2,
      "In a web browser, open 'about:webrtc-internals'."
    ],
    [
      3,
      "Start a call on Slack."
    ],
    [
      4,
      "Observe the packets containing the string 'rainmaker' in the DTLS certificate."
    ],
    [
      5,
      "Check the 'SetRemoteDescription' fingerprint in 'about:webrtc-internals' and match it with the known Janus default certificate fingerprint."
    ],
    [
      6,
      "Confirm the certificate's SHA256 fingerprint matches the public certificate and private key."
    ]
  ],
  "vuln_description": "The Janus server used by Slack is configured with a default certificate and private key that are publicly available. This certificate is used for DTLS authentication, which secures the SRTP stream in WebRTC calls. Since the private key is known, an attacker could perform a man-in-the-middle attack to hijack the DTLS connection and potentially the SRTP stream, compromising call confidentiality.",
  "reason": "The vulnerability involves understanding DTLS and SRTP protocols, identifying the use of a default certificate, and recognizing the potential for MITM attacks. While the steps to reproduce are straightforward, the underlying concepts (DTLS, SRTP, certificate authentication) require specialized knowledge.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}