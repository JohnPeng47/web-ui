{
  "reported_to": "GitLab",
  "reported_by": "yvvdwf ",
  "title": "CSP-bypass XSS in project settings page",
  "content": "\nSummary\nThis javascript function is vulnerable:\nCode 724 Bytes\n1  deployKeyRowHtml(key, isActive) {\n2    const isActiveClass = isActive || '';\n3\n4    return `\n5      <li>\n6        <a href=\"#\" class=\"${isActiveClass}\">\n7          <strong>${key.title}</strong>\n8          <p>\n9            ${sprintf(\n10              __('Owned by %{image_tag}'),\n11              {\n12                image_tag: `<img src=\"${key.avatar_url}\" class=\"avatar avatar-inline s26\" width=\"30\">`,\n13              },\n14              false,\n15            )}\n16            <strong class=\"dropdown-menu-user-full-name gl-display-inline\">${escape(\n17              key.fullname,\n18            )}</strong>\n19            <span class=\"dropdown-menu-user-username gl-display-inline\">${key.username}</span>\n20          </p>\n21        </a>\n22      </li>\n23    `;\n24  }\nIt is used to render a deployment key in a dropdown item. Because the deployment title is controlled by users, it can be any html content, such as, <script>alert(document.domain)</script>. Furthermore, the html content will be rendered using jQuery, so the <script> tag will be executed despise of CSP with script-src having 'strict-dynamic' value:\nCode 144 Bytes\n1  renderMenu(html) {\n2    if (this.options.renderMenu) {\n3      return this.options.renderMenu(html);\n4    }\n5    return $('<ul>').append(html);\n6  }\nSteps to reproduce\nIn an existing project or create a new one, goto Settings/Repository. Then fill the form in Deploy keys as the following:\nTitle: test <script>alert(document.domain)</script>\nKey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCkhkyrQJvb30Q5lLZzxeALqCyBrLOh+QzRYWh+gPGpqi2efyGMf5beN2zda66OI6DaclB31SJ0jYzaYKgKXQw7rzu/IYazONdy5lz5O2iUB2BkDzJYZ+BObTaTCjyDgSvNNuezUqNXXqoXftEMa1l0+FRSkTusH5F2P3JCV3Tf1BBQImrbDIpdc6ps+UxsiX7S/dT+7bNIVXblC8s8k+AK4CWsC2KmfMToK35pk+sa9JI+rb26hzv8IHA8n7cqXOmR5qAj2qX962p1kOLNXCyHJAKAIfRXCuDPbXiB+kjnu478eIcudOPveo3CK3G6hBI0hPSRfoyAUIubcddnnbhR\nGrant write permissions to this key: Checked\nThen click Add key button to save the form.\n<image_0>\nNOTE:\nTitle can be any HTML content that represents the attack payload. In the example above, we just show an alert containing the current domain.\nKey can be any valid SSH public key. In the example above, I give you a random key so that you can copy-paste into the form without the need to generate a key\nAlways in the Settings/Repository page, click on Protected branches link to expand its form\nClick on the dropdown box under Allowed to push , you should see an alert that was generated when the payload above being executed\n<image_1>\nNOTE:\nThis is not self-XSS as any project maintainer can access to the settings page. Furthermore a victim can be added as a project maintainer without their explicit acceptation\nThe Step 2 can be ignored by accessing directly within #js-protected-branches-settings on the url, for example, https://gitlab.com/yvvdwf/xss/-/settings/repository#js-protected-branches-settings\nImpact\nXSS with CSP bypass allows attacks to perform arbitrary malicious requests on behalf of victims on HTTP client side, such as, do an API request to access to private resources, etc.\nExamples\nhttps://gitlab.com/yvvdwf/xss/-/settings/repository#js-protected-branches-settings\nWhat is the current bug behavior?\nDeployment title is not sanitized\nWhat is the expected correct behavior?\nDeployment title should be sanitized\nOutput of checks\nThis bug happens on GitLab.com\nImpact\nXSS with CSP bypass allows attacks to perform arbitrary malicious requests on behalf of victims on HTTP client side, such as, do an API request to access to private resources, etc.\n\n",
  "severity": [
    8.0,
    null
  ],
  "bounty": 1000,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Generic"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/2vm1pj2b0bgotmymp1bjar2rxwri?response-content-disposition=attachment%3B%20filename%3D%221.setting-deployment-key.png%22%3B%20filename%2A%3DUTF-8%27%271.setting-deployment-key.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ4RDPBG2Z%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T011555Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIGGH331%2Bzp2R%2F3jzEDRZXWcGyNkXVm4l37jsrrngdhS3AiEAiGKoE%2BpbO4KbVLe2k%2BDcqavCzJMwtCDETSjwTqVf2QMqugUI%2Bv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDD9b1dAzPquDLyR64yqOBbDdMMB6qRiZbGj5ntUaOEuErgIaX0VyjFKOdAv8USvULuMUqjn0OpXaE%2FLmuqHwwSM21%2FVpSZlTq83Y7vOVS2eeF8XjZ1WQ7vIvEcY7AdX0eMbac77lcCB4RxK9kvRhcZYCIdAF%2FREEy7ZpMzm5BfyBPC2AaWFudYPoijGzHRa1xtmw8ZC4kRymq6hn%2F4l6EGAC43TTWjjXlYrfoT16B7zJv9JX%2Bk965dMsxFrX%2BKtCFDOLQYpSSUSw3GHmNBQWOpprJ9eB%2Bhmdrp9W8XK1u%2BGCQE%2BaS2PYwsDMkPfbCSnCJs9Fp9QP%2BIPczrURYaazZb%2F5xx6O1niQSUZGElZpjOvGkosJ40d5Oj6i6ElK9ALWKph1lwNLL4UkPex4t2RglP6mm%2B%2F6rxMW%2Bn41B%2By7jgh%2FklODd8pIPZqfu16zYwpdHfeQh8w9p03LhGbLr9CB9rlESYDPOnBm5BQZ6rk708GIcgjtCiUqikJt81Xh5vWwQ0xqU7Lw4mB%2BBUf74QeaGHzG4Wu%2FQCdBLHDyVi2fzGIwpt%2F1NY%2BBLG3kLMi67zFDltERgDCXGzqBvOPT9RZL7kluufKLjpNKroirqZPBoX3qNLSXOdy3otN%2FAJGJUO6BVy%2BbRoXqWowrX%2Fx6yr067GUM%2F1UXPFaOErEPTpVGnlBe56ssOXrBJXWBSOrDMeTSn2ofZ9AT%2F7EFAlamOiSxB1dWguNf7DC2Wxo2Hkd3y2jiHELq4uqCqcloB81hHnswIpxUxTvpz7Fx0U6dn0EppJZSgPaoX389BVcsmm1MTygTO1e1N%2B5y1E6IqbNwdAjnooP4mlaVIfd%2BmItX%2FBbIyUrzclTCs5qx1s3YqDV%2FnPDXlDkG2f0pymIl4RuRCDCJ84e%2FBjqxAdBjfelTIjQNt5OmwjqwnEC%2B2k%2Fi%2B%2FnCbWRx5jGMsl%2BBDw3WyQ%2BdMc98N2kltrLhYUngG91IDwo2wQcESeG2WiytY6EaItO0vDlYwYDAQACYfwmfCa6InheZUeBiyisGvON%2BzpFiC2d4%2FFEVjLODKA66zdsYAnpY%2F8plOozk%2B%2FifqMoRnX8NixExqtMAgyITi2Ix82EJls2oavnrXaQIZapNo58Ejj3e7h7vmu4gVS9P1A%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d17a67c0d678f1749e68dd2979813bebaa9b1e53d2af5b4eda76d4aabe0acc2c",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/qps1f0xuvadcdxzs5kfe87aq9y89?response-content-disposition=attachment%3B%20filename%3D%222.trigger-xss.png%22%3B%20filename%2A%3DUTF-8%27%272.trigger-xss.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ4RDPBG2Z%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T011555Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIGGH331%2Bzp2R%2F3jzEDRZXWcGyNkXVm4l37jsrrngdhS3AiEAiGKoE%2BpbO4KbVLe2k%2BDcqavCzJMwtCDETSjwTqVf2QMqugUI%2Bv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDD9b1dAzPquDLyR64yqOBbDdMMB6qRiZbGj5ntUaOEuErgIaX0VyjFKOdAv8USvULuMUqjn0OpXaE%2FLmuqHwwSM21%2FVpSZlTq83Y7vOVS2eeF8XjZ1WQ7vIvEcY7AdX0eMbac77lcCB4RxK9kvRhcZYCIdAF%2FREEy7ZpMzm5BfyBPC2AaWFudYPoijGzHRa1xtmw8ZC4kRymq6hn%2F4l6EGAC43TTWjjXlYrfoT16B7zJv9JX%2Bk965dMsxFrX%2BKtCFDOLQYpSSUSw3GHmNBQWOpprJ9eB%2Bhmdrp9W8XK1u%2BGCQE%2BaS2PYwsDMkPfbCSnCJs9Fp9QP%2BIPczrURYaazZb%2F5xx6O1niQSUZGElZpjOvGkosJ40d5Oj6i6ElK9ALWKph1lwNLL4UkPex4t2RglP6mm%2B%2F6rxMW%2Bn41B%2By7jgh%2FklODd8pIPZqfu16zYwpdHfeQh8w9p03LhGbLr9CB9rlESYDPOnBm5BQZ6rk708GIcgjtCiUqikJt81Xh5vWwQ0xqU7Lw4mB%2BBUf74QeaGHzG4Wu%2FQCdBLHDyVi2fzGIwpt%2F1NY%2BBLG3kLMi67zFDltERgDCXGzqBvOPT9RZL7kluufKLjpNKroirqZPBoX3qNLSXOdy3otN%2FAJGJUO6BVy%2BbRoXqWowrX%2Fx6yr067GUM%2F1UXPFaOErEPTpVGnlBe56ssOXrBJXWBSOrDMeTSn2ofZ9AT%2F7EFAlamOiSxB1dWguNf7DC2Wxo2Hkd3y2jiHELq4uqCqcloB81hHnswIpxUxTvpz7Fx0U6dn0EppJZSgPaoX389BVcsmm1MTygTO1e1N%2B5y1E6IqbNwdAjnooP4mlaVIfd%2BmItX%2FBbIyUrzclTCs5qx1s3YqDV%2FnPDXlDkG2f0pymIl4RuRCDCJ84e%2FBjqxAdBjfelTIjQNt5OmwjqwnEC%2B2k%2Fi%2B%2FnCbWRx5jGMsl%2BBDw3WyQ%2BdMc98N2kltrLhYUngG91IDwo2wQcESeG2WiytY6EaItO0vDlYwYDAQACYfwmfCa6InheZUeBiyisGvON%2BzpFiC2d4%2FFEVjLODKA66zdsYAnpY%2F8plOozk%2B%2FifqMoRnX8NixExqtMAgyITi2Ix82EJls2oavnrXaQIZapNo58Ejj3e7h7vmu4gVS9P1A%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ec20adc58ecac83ddba23879844aa7cd6b6f211af97a3dafb3b473c3d347a751"
  },
  "disclosed_date": 1668578880,
  "report_url": "https://hackerone.com/reports/1588732",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Navigate to project settings and add a deploy key with a malicious script in the title field"
    ],
    [
      2,
      "Access the protected branches section to trigger execution of the injected script"
    ]
  ],
  "vuln_description": "The vulnerability is a CSP-bypass XSS in the project settings page where user-controlled input (deployment key title) is rendered without proper sanitization, allowing execution of arbitrary JavaScript despite Content Security Policy restrictions.",
  "reason": "While the vulnerability involves understanding how user input flows through the system and bypasses CSP, the attack vector is relatively straightforward once the unsanitized input field is identified. The main complexity comes from recognizing the jQuery rendering behavior that bypasses CSP's 'strict-dynamic' restriction.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves user-controlled input (deployment title) being rendered without proper sanitization, leading to XSS. The methodology described focuses on authentication and authorization bypasses (AuthN/AuthZ) and IDOR vulnerabilities by testing different user sessions and resource IDs. However, this XSS vulnerability does not involve crossing authorization boundaries or manipulating resource IDs, but rather exploits unsanitized user input in the rendering process. Therefore, it would not be detected by the described methodology.",
    "is_detectable": false
  }
}