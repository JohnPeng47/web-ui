{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "shanxus ",
  "title": "Stored XSS at https://\u2588\u2588\u2588\u2588\u2588",
  "content": "\nDescription:\nIn registeration page ( https://\u2588\u2588\u2588\u2588 ) , first name and last name field are vulnerable to Stored Cross Site Scripting.\nProof of concept\nFor the fastly test, use this credentials to login (my test account)\nemail: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\npassword: \u2588\u2588\u2588\u2588\u2588\u2588\nAfter login , alert document.cookie will triggered\nImpact\nStored Cross Site Scripting which attacker can execute malicious javascript payload.\nSystem Host(s)\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nAffected Product(s) and Version(s)\nCVE Numbers\nSteps to Reproduce\nGo to registration page ( https://\u2588\u2588\u2588\u2588 ), insert <svg/onload=confirm(document.cookie)> payload in firstname and lastname fields and create account.\nVerified your account.\nGo to login page and login your account.\nAnd XSS will triggered ( XSS also triggered in My Profile page) .\nSuggested Mitigation/Remediation Actions\nFilter input on arrival.\nEncode data on output.\nContent Security Policy\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1662505440,
  "report_url": "https://hackerone.com/reports/1620247",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Go to the registration page (https://\u2588\u2588\u2588\u2588) and insert the payload <svg/onload=confirm(document.cookie)> into the firstname and lastname fields."
    ],
    [
      2,
      "Create the account, verify it, log in, and observe the XSS trigger on the My Profile page."
    ]
  ],
  "vuln_description": "The registration page is vulnerable to Stored Cross-Site Scripting (XSS) via the firstname and lastname fields. An attacker can inject malicious JavaScript payloads that execute when the user views their profile or logs in.",
  "reason": "The vulnerability involves a straightforward injection of a common XSS payload into input fields without any complex interactions or state manipulations. The steps to reproduce are simple and do not require understanding of novel or subtle application logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The XSS vulnerability involves injecting malicious scripts into input fields (first name and last name) during registration, which is then stored and executed when the user logs in or views their profile. This does not involve authentication or authorization bypass, nor does it involve swapping user sessions or resource IDs. The methodology described focuses on AuthN/AuthZ and IDOR vulnerabilities by testing session and resource ID swapping, which is not applicable here.",
    "is_detectable": false
  }
}