{
  "reported_to": "Node.js third-party modules",
  "reported_by": "bl4de ",
  "title": "[simple-server] HTML with iframe element can be used as filename, which might lead to load and execute malicious JavaScript ",
  "content": "\nHi Guys,\nsimple-server allows to embed HTML in file names, which (in certain conditions) might lead to execute malicious JavaScript. This is caused by outdated version of connect framework.\nModule:\nSimple Server allows you to easily get a node.js static file server up and running anywhere anytime.\nhttps://www.npmjs.com/package/simple-server\nDescription\nThis issue is exactly the same I've reported for anywhere module (https://hackerone.com/reports/309394).\nThe problem is outdated connect framework (2.10.0) with obsolete middleware used to display content of the directory as HTML.\nThis is the code which allows to embed HTML in file names and execute attack described in PoC (/node_modules/connect/lib/middleware/directory.js, lines 192-197):\nCode 205 Bytes\n1\n2    return '<li><a href=\"'\n3      + utils.normalizeSlashes(normalize(path.join('/')))\n4      + '\" class=\"'\n5      + classes.join(' ') + '\"'\n6      + ' title=\"' + file + '\">'\n7      + icon + file + '</a></li>';\nAs you can see, file is output directly into HTML without any sanitization.\nNow, take a look how the same fragment of code looks in serve-index middleware, introduced in place of old middlewares like directory.js above, and used in current Connect and Express frameworks (https://github.com/expressjs/serve-index/blob/a399faa1801f02ee1885e5664ed21a9c7990b63a/index.js#L279):\nCode 403 Bytes\n1return '<li><a href=\"'\n2      + escapeHtml(normalizeSlashes(normalize(path.join('/'))))\n3      + '\" class=\"' + escapeHtml(classes.join(' ')) + '\"'\n4      + ' title=\"' + escapeHtml(file.name) + '\">'\n5      + '<span class=\"name\">' + escapeHtml(file.name) + '</span>'\n6      + '<span class=\"size\">' + escapeHtml(size) + '</span>'\n7      + '<span class=\"date\">' + escapeHtml(date) + '</span>'\n8      + '</a></li>';\nAll output data is sanitized with escapeHtml() which sanitizes HTML before is send to browser.\nI think this is the problem of all older npm modules using old versions of Connect middlewares like directory.js.\nPoC - Steps To Reproduce:\nIn the directory which will be served via simple-server, create file with following name:\nCode 35 Bytes\n1\"><iframe src=\"malware_frame.html\">\nThen, HTML file with following content have to be saved in the same directory as file with the name changed:\nCode 232 Bytes\n1<html>\n2\n3<head>\n4    <meta charset=\"utf8\" />\n5    <title>Frame embeded with malware :P</title>\n6</head>\n7\n8<body>\n9    <p>iframe element with malicious code</p>\n10    <script type=\"text/javascript\" src=\"malware.js\"></script>\n11</body>\n12\n13</html>\nAn src attribute value I've used here is just for PoC purpose, this can be any external url.\nOn my local machine, malware.js has following content:\nCode 38 Bytes\n1alert('Uh oh, I am very bad malware!')\nRun simple-server`` in directory where both file with filename changed and malware_frame.html``` are saved:\nCode 167 Bytes\n1$ ./node_modules/simple-server/bin/simple-server.js ./ 8080\n2Simple-Server listening to http://:::8080/ with directory /Users/bl4de/playground/node_bugbounty_playground\nand open http://127.0.0.1:8080 in the browser, you can see JavaScript from malware.js is executed.\nSupporting Material/References:\nConfiguration I've used to find this vulnerability:\nmacOS HighSierra 10.13.3\nnode 8.9.3\nnpm 5.5.1\ncurl 7.54.0\nWrap up\nI hope this report will help to keep Node ecosystem more safe. If you have any questions about any details of this finding, please let me know in comment.\nThank you\nRegards,\nRafal 'bl4de' Janicki\nImpact\nExploitation of this vulnerability in the wild might be hard, however it's not impossible and it depends only on attacker's skills to get into directory on the server, where simple-server is used to serve static content.\n\n",
  "severity": [
    7.7,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1519963440,
  "report_url": "https://hackerone.com/reports/309641",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a file with the name: \"><iframe src=\"malware_frame.html\"> in the directory served by simple-server"
    ],
    [
      2,
      "Create a malware_frame.html file in the same directory with malicious JavaScript content"
    ],
    [
      3,
      "Run simple-server in the directory containing the malicious files"
    ],
    [
      4,
      "Access the server via browser to trigger the execution of the malicious JavaScript"
    ]
  ],
  "vuln_description": "The vulnerability allows embedding HTML in file names served by simple-server, which can lead to the execution of malicious JavaScript when the directory listing is viewed. This occurs due to the lack of HTML sanitization in the outdated connect framework's directory middleware.",
  "reason": "The attack involves creating a specially crafted filename and a corresponding HTML file, but the interaction between these components is straightforward and the vulnerability stems from a known issue in outdated middleware. The steps to reproduce are clear and do not require complex application state manipulation or novel logic.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "309394",
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves HTML injection via file names in a directory listing, which is not related to authentication or authorization bypass. The methodology described focuses on testing AuthN/AuthZ boundaries by swapping user sessions and resource IDs, which does not apply to this HTML injection vulnerability.",
    "is_detectable": false
  }
}