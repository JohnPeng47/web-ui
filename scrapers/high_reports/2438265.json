{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "ooooooo_q ",
  "title": "CVE-2024-27281: RCE vulnerability with .rdoc_options in RDoc",
  "content": "\nI made a report at https://hackerone.com/reports/1187477\nhttps://www.ruby-lang.org/en/news/2024/03/21/rce-rdoc-cve-2024-27281/\nAn issue was discovered in RDoc 6.3.3 through 6.6.2, as distributed in Ruby 3.x through 3.3.0.\nWhen parsing .rdoc_options (used for configuration in RDoc) as a YAML file, object injection and resultant remote code execution are possible because there are no restrictions on the classes that can be restored.\nWhen loading the documentation cache, object injection and resultant remote code execution are also possible if there were a crafted cache.\nImpact\nRCE is possible when the rdoc command is executed for a repository received from the external.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 4860,
  "weaknesses": [
    "None"
  ],
  "screenshots": {},
  "disclosed_date": 1711770420,
  "report_url": "https://hackerone.com/reports/2438265",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a malicious .rdoc_options file with YAML payload that includes arbitrary Ruby objects for deserialization"
    ],
    [
      2,
      "Run the `rdoc` command on a directory containing the malicious .rdoc_options file to trigger the deserialization"
    ]
  ],
  "vuln_description": "The vulnerability is a remote code execution (RCE) flaw in RDoc (Ruby Documentation tool) versions 6.3.3 through 6.6.2, as distributed with Ruby 3.x through 3.3.0. It occurs when parsing .rdoc_options (used for RDoc configuration) as a YAML file, allowing object injection due to unrestricted class restoration during YAML deserialization. This can lead to arbitrary code execution when the rdoc command processes a malicious configuration file or crafted documentation cache.",
  "reason": "This vulnerability requires understanding of YAML deserialization vulnerabilities in Ruby and how RDoc processes configuration files. While the attack vector is straightforward (placing a malicious file), discovering the insecure deserialization in RDoc's YAML parsing requires knowledge of Ruby's YAML implementation details and RDoc's file processing behavior.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null
}