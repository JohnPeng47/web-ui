{
  "reported_to": "MTN Group",
  "reported_by": "w31rd0 ",
  "title": " SQL Injection on cookie parameter",
  "content": "\nSummary:\nHello team. It seams one of the parameters in the cookies is vulnerable to SQL injection. Below requests has the lang parameter in cookies. If you inject one quote mark like '. You get SQL error with the syntax. By injecting a second you have the error removed.\nI did not attempt to exfiltrate data as this is obvious indication of SQLi.\nCode 497 Bytes\n1GET /index.php/search/default?t=1&x=0&y=0 HTTP/1.1\n2Host: mtn.com.ye\n3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\n4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n5Accept-Language: en-GB,en;q=0.5\n6Accept-Encoding: gzip, deflate\n7Connection: close\n8Cookie: PHPSESSID=86ce3d04baa357ffcacf5d013679b696; lang=en'; _ga=GA1.3.1859249834.1576704214; _gid=GA1.3.1031541111.1576704214; _gat=1; _gat_UA-44336198-10=1\n9Upgrade-Insecure-Requests: 1\nI would like to ask for permission for further exploiting this issue.\nImpact\nWeb application is vulnerable to SQL injection, allowing access to data\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1588510680,
  "report_url": "https://hackerone.com/reports/761304",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Send a GET request to /index.php/search/default?t=1&x=0&y=0 with a modified 'lang' cookie parameter containing a single quote (') to trigger an SQL error."
    ],
    [
      2,
      "Observe the SQL error in the response, confirming SQL injection vulnerability. Inject a second quote ('') to see the error disappear, further confirming the vulnerability."
    ]
  ],
  "vuln_description": "The web application is vulnerable to SQL injection via the 'lang' parameter in cookies. Injecting a single quote (') causes an SQL error, indicating improper input sanitization. This allows an attacker to potentially exfiltrate data or perform other malicious SQL operations.",
  "reason": "The vulnerability is straightforward to discover as it involves a simple manipulation of a cookie parameter and observing the SQL error response. No complex interactions or state manipulations are required.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability is detectable because it involves manipulating a parameter (lang in cookies) within the same application's context, which falls under the methodology of testing for vulnerabilities by altering parameters and observing the application's response. The methodology includes testing with different inputs (like SQL injection payloads) to detect such issues.",
    "is_detectable": true
  }
}