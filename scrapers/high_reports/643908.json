{
  "reported_to": "WordPress",
  "reported_by": "ali ",
  "title": "Stored XSS Vulnerability",
  "content": "\nHi there,\nI found a stored xss @ https://core.trac.wordpress.org/\nSteps:\nGo to https://core.trac.wordpress.org/ and login. (open new private window and login with another account)\nGo to https://core.trac.wordpress.org/newticket and set a summary and description.\nSelect a Workflow Keyword and click manual. Paste the payload: \"><svg/onload=alert(document.domain)>\nClick enter button and click Create Ticket button. Now, you will see xss alert. Copy the url and go to private window. Go to url and you will see xss alert.\nPoC: https://youtu.be/Nyt1op_73vs\nImpact\nStealing cookies\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1563495900,
  "report_url": "https://hackerone.com/reports/643908",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Go to https://core.trac.wordpress.org/ and login (use a private window with a different account)."
    ],
    [
      2,
      "Navigate to https://core.trac.wordpress.org/newticket and fill in the summary and description fields."
    ],
    [
      3,
      "Select a Workflow Keyword, choose 'manual', and paste the payload: \"><svg/onload=alert(document.domain)>\"."
    ],
    [
      4,
      "Click 'Create Ticket' to trigger the XSS alert. Copy the URL and open it in another private window to confirm the vulnerability."
    ]
  ],
  "vuln_description": "A stored XSS vulnerability exists in the WordPress Trac system, allowing an attacker to inject malicious JavaScript code into a ticket. When another user views the ticket, the script executes, potentially leading to cookie theft or other malicious actions.",
  "reason": "The vulnerability involves a straightforward injection of a common XSS payload into a ticket field. The steps are simple and do not require complex interactions or understanding of subtle application behaviors. The payload used is a well-known XSS vector.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The stored XSS vulnerability involves injecting a malicious payload into a ticket's summary or description, which is then executed when the ticket is viewed. This does not directly involve authentication or authorization bypass, nor does it involve swapping user sessions or resource IDs. The methodology described focuses on AuthN/AuthZ and IDOR vulnerabilities by testing session and resource ID combinations, which is not applicable here.",
    "is_detectable": false
  }
}