{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "gquadros_ ",
  "title": "CVE-2022-21831: Possible code injection vulnerability in Rails / Active Storage",
  "content": "\nOriginal report: https://hackerone.com/reports/1154034\nRails advisory: https://discuss.rubyonrails.org/t/cve-2022-21831-possible-code-injection-vulnerability-in-rails-active-storage/80199\nBlogpost: https://blog.convisoappsec.com/en/cve-2022-21831-overview-of-the-security-issues-we-found-in-railss-image-processing-api/\nIf the report is eligible for a bounty, please split it equally between me and @rsilva, if possible.\nImpact\nVulnerable code patterns could allow the attacker to achieve RCE.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 2000,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1662851520,
  "report_url": "https://hackerone.com/reports/1652042",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Identify a Rails application using Active Storage with image processing enabled."
    ],
    [
      2,
      "Upload a malicious image file containing embedded Ruby code or shell commands in the metadata or comment fields."
    ],
    [
      3,
      "Trigger the image processing function, which will execute the embedded code due to improper sanitization in Active Storage."
    ]
  ],
  "vuln_description": "The vulnerability in Rails/Active Storage allows for code injection through malicious image files. When Active Storage processes these images, it fails to properly sanitize input, leading to potential remote code execution (RCE). This occurs because the image processing API can be tricked into executing embedded Ruby code or shell commands contained within the image's metadata or comments.",
  "reason": "The vulnerability involves understanding the interaction between Active Storage's image processing functionality and the way it handles file metadata. The attacker needs to know how to embed malicious code in image files and understand how Rails processes these files. While the concept of code injection is common, the specific vector through image metadata is less obvious and requires knowledge of Rails internals.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": true,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves code injection in Rails/Active Storage, which is not related to authentication or authorization boundaries being crossed through user sessions or resource IDs. The proposed methodologies focus on detecting IDOR and AuthN/AuthZ bypass vulnerabilities by manipulating user sessions and resource IDs, which are not applicable to this code injection vulnerability.",
    "is_detectable": false
  }
}