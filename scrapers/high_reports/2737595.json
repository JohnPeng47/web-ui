{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "k0x ",
  "title": "SQL Injection",
  "content": "\nI discovered a Blind SQL Injection vulnerability in the application, which allows an attacker to manipulate database queries by injecting malicious input into the vulnerable parameter. Unlike regular SQL injection, blind SQL injection does not directly return data but can be exploited through true/false or time-based responses, revealing the structure and content of the database.\nReferences\nImpact\nBlind SQL injection can be leveraged to extract sensitive information, bypass authentication, or escalate privileges by manipulating the backend SQL queries. Since the injection is blind, an attacker can use time-based, boolean-based, or out-of-band techniques to extract the data.\nSystem Host(s)\n\u2588\u2588\u2588\u2588\u2588\u2588\nAffected Product(s) and Version(s)\nCVE Numbers\nSteps to Reproduce\nRun SQLMap: Use the following SQLMap command to test for SQL injection by directly specifying the vulnerable URL and the parameter:\nCode 140 Bytes\n1sqlmap -u \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\" \\\n2--technique=BT --level=5 --risk=3 --threads=10 -p 'filter[event]' \\\n3--dbms='MySQL' --batch --current-db --random-agent\n-u: Specifies the target URL.\n--technique=BT: Tells SQLMap to use both Boolean-based (B) and Time-based (T) blind SQL injection techniques.\n--level=5: Sets the highest level of testing, increasing the depth of testing.\n--risk=3: Specifies a higher risk level for potentially dangerous payloads.\n--threads=10: Increases the number of concurrent requests, speeding up the process.\n-p 'filter[event]': Specifies that the filter[event] parameter is the target for injection.\n--dbms='MySQL': Indicates that the target database management system is MySQL.\n--batch: Automatically answers all questions (non-interactive mode).\n--current-db: Attempts to retrieve the current database name.\n--random-agent: Randomizes the User-Agent header to evade detection.\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nSuggested Mitigation/Remediation Actions\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1729884420,
  "report_url": "https://hackerone.com/reports/2737595",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Run SQLMap with the following command to test for SQL injection by specifying the vulnerable URL and parameter: sqlmap -u \"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\" --technique=BT --level=5 --risk=3 --threads=10 -p 'filter[event]' --dbms='MySQL' --batch --current-db --random-agent"
    ],
    [
      2,
      "Analyze the responses to determine if the application is vulnerable to Blind SQL Injection by observing time-based or boolean-based responses."
    ]
  ],
  "vuln_description": "This is a Blind SQL Injection vulnerability in the application, which allows an attacker to manipulate database queries by injecting malicious input into the vulnerable parameter. Unlike regular SQL injection, blind SQL injection does not directly return data but can be exploited through true/false or time-based responses, revealing the structure and content of the database.",
  "reason": "The vulnerability involves a straightforward use of SQLMap with predefined parameters to detect Blind SQL Injection. The attack does not require understanding complex application states or novel logic, and the interactions between components are well-documented and commonly understood in security testing.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The SQL Injection vulnerability involves manipulating database queries through a vulnerable parameter, which is not directly related to authentication or authorization bypass. The methodology described focuses on AuthN/AuthZ and IDOR vulnerabilities by testing user sessions and resource access, not SQL query manipulation.",
    "is_detectable": false
  }
}