{
  "reported_to": "GitLab",
  "reported_by": "ajxchapman ",
  "title": "FogBugz import attachment full SSRF requiring vulnerability in *.fogbugz.com",
  "content": "\nSummary:\nHi Team, a bit of a odd one here. The FogBugz import code uses CarrierWave::Uploader::Base:download! to download attachments from fogbugz.com when importing a FogBugz repository. CarrierWave::Uploader::Base:download! ultimately uses Kernel.Open to download the provided attachment URL. Kernel.Open permits URLs which resolve to, or redirect to 127.0.0.1, making it vulnerable to SSRF issues. There is a check within the FogBugz import code which requires attachments to be downloaded with an http or https scheme from a fogbugz.dom subdomain:\napp/services/projects/download_service.rb\nCode 314 Bytes\n1   \n2WHITELIST = [\n3  /^[^.]+\\.fogbugz.com$/\n4].freeze\n5\n6...\n7    \n8def valid_url?(url)\n9  url && http?(url) && valid_domain?(url)\n10end\n11\n12def http?(url)\n13  url =~ /\\A#{URI::DEFAULT_PARSER.make_regexp(%w(http https))}\\z/\n14end\n15\n16def valid_domain?(url)\n17  host = URI.parse(url).host\n18  WHITELIST.any? { |entry| entry === host }\n19end\nIf a vulnerability can be identified in a fogbugz.com subdomain which results in returning a crafted API response including an arbitrary attachment URL, a full read GET based SSRF would be exploitable on gitlab.com (or a gitlab instance). I've done some basic analysis on potential vulnerabilities which could trigger this issue, they include (but are by no means limited to):\nURL parameter clobbering to force a 302 redirect on attachment download\nIntercept and modify an unencrypted HTTP API response\nSubdomain takeover / dangling sub domain to return an arbitrary API response\nHTTP Request smuggling to modify an in-flight API response\nCache poisoning to poison a malicious API response\nSQL Injection to replace an attachment URL\nCode Execution to modify api.asp to return an arbitrary API response\nSocial engineering / malicious insider FogBugz employee\nDue to the third party nature of these issues it is not feasible to probe for, or disclose the potential existence of, any of these potential issues on fogbugz.com to GitLab. However, if any one of these issues exists now or in the future it would render gitlab.com vulnerable.\nSteps to reproduce:\nThis issue can be simulated by placing an /etc/hosts entry on a GitLab server as follows:\nCode 31 Bytes\n1198.211.125.160 poc.fogbugz.com\nThis will point poc.fogbugz.com to a VPS I control, which responds with a crafted FogBugz API response designed to simulate the exploitation of a bug on a fogbugz.com domain. Importing the SSRF Repository FogBugz repository from this host will create a repository with a single issue which includes the SSRF result of requesting http://127.0.0.1:9090/api/v1/targets.\n<image_0>\nImpact:\nA vulnerability in a fogbugz.com subdomain, which meets the above criteria, would result in a full GET based SSRF issue against gitlab.com.\nWhat is the current bug behavior?\nFogBugz import code uses Kernel.Open to download and store the result of an untrusted URL.\nWhat is the expected correct behavior?\nGitLab::Http should be used to download attachments to prevent SSRF attacks.\nOutput of checks:\nResults of GitLab environment info\nCode 970 Bytes\n1System information\n2System:         Ubuntu 20.04\n3Proxy:          no\n4Current User:   git\n5Using RVM:      no\n6Ruby Version:   2.7.2p137\n7Gem Version:    3.1.4\n8Bundler Version:2.1.4\n9Rake Version:   13.0.3\n10Redis Version:  5.0.9\n11Git Version:    2.29.0\n12Sidekiq Version:5.2.9\n13Go Version:     unknown\n14\n15GitLab information\n16Version:        13.8.1-ee\n17Revision:       e10a21e66ce\n18Directory:      /opt/gitlab/embedded/service/gitlab-rails\n19DB Adapter:     PostgreSQL\n20DB Version:     12.4\n21URL:            http://188.166.97.195\n22HTTP Clone URL: http://188.166.97.195/some-group/some-project.git\n23SSH Clone URL:  git@188.166.97.195:some-group/some-project.git\n24Elasticsearch:  no\n25Geo:            no\n26Using LDAP:     no\n27Using Omniauth: yes\n28Omniauth Providers:\n29\n30GitLab Shell\n31Version:        13.15.0\n32Repository storage paths:\n33- default:      /var/opt/gitlab/git-data/repositories\n34GitLab Shell path:              /opt/gitlab/embedded/service/gitlab-shell\n35Git:            /opt/gitlab/embedded/bin/git\nImpact\nA vulnerability in a fogbugz.com subdomain, which meets the above criteria, would result in a full GET based SSRF issue against gitlab.com.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 500,
  "weaknesses": [
    "Server-Side Request Forgery (SSRF)"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/gv9tecykd6bp3dnxkpskba35j90g?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_from_2021-02-01_16-02-26.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_from_2021-02-01_16-02-26.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ6Q4I2XVZ%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T192017Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELL%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIAHCNgafvmtr9wSqgAJqRrEEq%2FlBzne7TGNZbUijbqBaAiAPBky8aFbVOXx1OmTwqjRlzc2gSHiWXYUy2GXFdGtP%2BSqyBQgbEAMaDDAxMzYxOTI3NDg0OSIMQq6FLzqWzt%2F%2FJ7ZNKo8FBJakUcz58cefSN3maEIJQQZsi8SEb8usJgvN1oidSHHX0iEvKA0DU9sRpADt7CWpdHA%2F5EwQcg5p6MrETN4caL4xLKeKlX6RPITSAZcfha47FzQq3CKshI0LUXI4vYyINJfCAwEc9ivtouXvZUAemRDhk7TQCFSN6aHNmrbE4xfIp0%2FRX6syAJNgr4t9QxrHin2dUiUZHemsX4Eqpe8yVNmv4rI0oDgwlNyAKQDw2Ij5mzAshSlrvupwfNjWxHhVh6Hj4tirRaqBXoQuDI4QgRjHuaP2w6e0WpSTEoesXQe1tnqDGjAvYI1S1AeHq9p%2Fn5DtCEV%2Bi0cUT%2BzFhwboAgiZiBQ6hIBAiVOYVbROZmSdo5qBhTbipmkz%2B0ICvg%2BkkKa0QsfbOQKrcdh9gENX5DAKmDNIYe3HoSg3yP9v5ulcGRwGi6y7rvZGFPR%2BXdrBa0I8GyLr4Vet8FExWXckYNo2hHfqDM1DM9LchJVTPLAGD3fZowfNJZwo8SlFk3D7fYmww5vgVOnmZsG%2Fc8Wi2OQ4e%2BHbB79kLLFnNQzhbWWoXVhejgZpktqcOeVTJhcLvTiBnxae3wY4cLDDaWLREOFsWaP2%2FIrPO9rEkYtkExFwgoCo5stF3Ep1Y6nzBLrrF698LfgWE8V5YxjLv77S6ctXf7cCEzFrAAss0y0n75sPyGzmZh8Y4Sz3EdYOnskkeUtCNavsto2yJXm6PMYSjWZDQ7tponEnaJbDY%2FP7JXujM%2BWt4sqFwYL6E8m%2BusyHS%2FbotfYhrk%2BjTYeNe%2FMDs1ZHco9%2BsOX0OmvvSBa1CNwAWB7MAmPQguPMcWIc3C9wvjNjG5LPuAExi8lucZn6z6b7v4Xagy%2BIbQVUhIFigzCd24u%2FBjqyAaPbh1ea1fVL2NHI%2BbD4P7UneZDC%2Bk%2BZgeeP4kkqwodPsVIo3pDAayFfcKb1fn7C%2FJet%2BowzJY8Wq87GGoACGzTO11tI5xMcMWHb5qxzvppOpktHh9zNIIW4tYHa7uAuviviLgyY64%2FlnVxnPTF6EIamnEBE9A74zDdmDYenAgY%2F47VWrTSQd2NZulrJGmEEoX0n77sxGHqxam1i9qGYXNWWrcCFlvoCMFFEg%2FsZluoX8Lw%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=e9abb9a90eaf5ac2d07da62c17fc1d98e95e62c42092d6ff510c0d9c7061d267"
  },
  "disclosed_date": 1626196500,
  "report_url": "https://hackerone.com/reports/1092230",
  "vuln_category": "WEB_APP",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Set up a local DNS entry pointing poc.fogbugz.com to a controlled VPS (e.g., 198.211.125.160 poc.fogbugz.com in /etc/hosts)"
    ],
    [
      2,
      "Import a FogBugz repository from the controlled VPS, which responds with a crafted API response containing a malicious attachment URL pointing to 127.0.0.1:9090/api/v1/targets"
    ]
  ],
  "vuln_description": "The vulnerability is a Server-Side Request Forgery (SSRF) in GitLab's FogBugz import functionality. The import process uses Kernel.Open to download attachments from URLs provided in the FogBugz API response, without proper SSRF protections. While there is a domain whitelist check (requiring *.fogbugz.com), if an attacker can compromise any fogbugz.com subdomain to return a malicious API response, they can force GitLab to make arbitrary GET requests to internal services.",
  "reason": "This vulnerability requires: (1) understanding the FogBugz import process and its use of Kernel.Open, (2) recognizing the SSRF potential despite domain whitelisting, (3) identifying that a compromise of any fogbugz.com subdomain could bypass protections, and (4) crafting a working exploit chain. The need to consider third-party vulnerabilities in fogbugz.com adds significant complexity.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}