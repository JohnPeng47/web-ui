{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "haquaman ",
  "title": "Negative size parameter in mb_split",
  "content": "\nhttps://bugs.php.net/bug.php?id=77367\nmb_split doesn't correctly detect the length when the $string has an unfinished multibyte character at the end of the string. This causes a crash due to a negative parameter to add_next_index_stringl, which calls zend_string_init and memcpy.\nCould reproduce on master.\nImpact\nThis could be used to cause memory corruption/leakage.\n\n",
  "severity": [
    9.8,
    null
  ],
  "bounty": 1500,
  "weaknesses": [
    "Buffer Underflow"
  ],
  "screenshots": {},
  "disclosed_date": 1604904480,
  "report_url": "https://hackerone.com/reports/476178",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a string with an unfinished multibyte character at the end (e.g., a partial UTF-8 sequence)"
    ],
    [
      2,
      "Pass this string to mb_split() function in PHP"
    ]
  ],
  "vuln_description": "The vulnerability occurs in PHP's mb_split function when processing strings with an unfinished multibyte character at the end. This causes incorrect length detection, leading to a negative size parameter being passed to internal functions (add_next_index_stringl, zend_string_init, memcpy), resulting in memory corruption or crashes.",
  "reason": "The vulnerability requires knowledge of multibyte character handling and PHP internals, but the reproduction steps are straightforward once the core issue is understood. The main complexity comes from recognizing the edge case of partial multibyte sequences and understanding how PHP processes them internally.",
  "new_complexity": "MEDIUM",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}