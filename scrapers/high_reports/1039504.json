{
  "reported_to": "Internet Bug Bounty",
  "reported_by": "jub0bs ",
  "title": "Some build dependencies are downloaded over an insecure channel (without subsequent integrity checks)",
  "content": "\nSummary:\nBuild jobs mingw64 | openssl-1.1.1d and mingw32 | openssl-1.0.2u download dependencies from build.openvpn.net and www.oberhumer.comover an insecure channel (http, not https) and do not check their integrity in any way.\nThis opens the door to person-in-the-middle attacks, whereby an attacker controlling an intermediate node on the network path between Travis CI's build servers and those two servers could manipulate traffic and inject his own malicious code into the artifacts produced by the two jobs in question.\nSteps To Reproduce:\nThe install phase of the .travis.yml file unconditionally executes the .travis/build-deps.sh script. If the following three conditions are satisfied,\nthe OS be other than windows,\nenvironment variable SSLLIB be set to openssl, and\nenvironment variable CHOST be set,\n(they are only satisfied for build jobs mingw64 | openssl-1.1.1d and mingw32 | openssl-1.0.2u), then shell functions download_tap_windows and download_lzo are executed one after the other.\nShell functions download_tap_windows and download_lzo are defined above (here and here, respectively) in .travis/build-deps.sh:\nCode 457 Bytes\n1download_tap_windows () {\n2    if [ ! -f \"download-cache/tap-windows-${TAP_WINDOWS_VERSION}.zip\" ]; then\n3       wget -P download-cache/ \\\n4           \"http://build.openvpn.net/downloads/releases/tap-windows-${TAP_WINDOWS_VERSION}.zip\"\n5    fi\n6}\n7\n8download_lzo () {\n9    if [ ! -f \"download-cache/lzo-${LZO_VERSION}.tar.gz\" ]; then\n10        wget -P download-cache/ \\\n11            \"http://www.oberhumer.com/opensource/lzo/download/lzo-${LZO_VERSION}.tar.gz\"\n12    fi\n13}\nNote that both wget commands use http as opposed to https ( though using https is readily possible, since both domains build.openvpn.net and www.oberhumer.com support https and have valid TLS certificates) .\nSupporting Material/References:\nTo be added in a comment below when my custom build of OpenVPN/openvpn finishes on travis-ci.org (it's taking a while...).\nImpact\nThe two dependencies are downloaded over an insecure channel and, therefore, can be intercepted and tampered with by a person in the middle (controlling an intermediate node on the network path between Travis CI's build servers).\nMoreover, as no integrity checks seem to be performed after download, a person-in-the-middle attack would go undetected and could seriously compromise the integrity of the artifacts produced by those two build jobs.\nPlease do not dismiss the possibility of such an attack too quickly, as it is not as far-fetched as one would think.\n\n",
  "severity": [
    7.4,
    null
  ],
  "bounty": 100,
  "weaknesses": [
    "Cryptographic Issues - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1607126220,
  "report_url": "https://hackerone.com/reports/1039504",
  "vuln_category": "CODE",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Examine the .travis.yml file to identify the build jobs mingw64 | openssl-1.1.1d and mingw32 | openssl-1.0.2u."
    ],
    [
      2,
      "Review the .travis/build-deps.sh script to find the insecure HTTP downloads in the download_tap_windows and download_lzo functions."
    ]
  ],
  "vuln_description": "Build dependencies are downloaded over an insecure HTTP channel without subsequent integrity checks, making them vulnerable to person-in-the-middle attacks where an attacker could inject malicious code.",
  "reason": "The vulnerability involves identifying insecure HTTP downloads in build scripts, which is a straightforward process once the build environment and scripts are examined. There are no complex interactions or states involved.",
  "new_complexity": "LOW",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}