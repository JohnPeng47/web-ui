{
    "reported_to": "Ubiquiti Inc.",
    "reported_by": "grampae ",
    "title": "Resource Consumption DOS on Edgemax v1.10.6",
    "content": "\nResource consumption Denial of service.\n1: The request below shows that when you feed the beaker.session.id cookie variable a payload of 250 characters or more, the web management portal will produce an error page showing full path disclosure and more as shown in screenshots error1.png and error2.png.\nGET / HTTP/1.1\nHost: 192.168.1.100\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nCookie: beaker.session.id=v8iG24fDKn8x5uD3V2uICZA1FJEoUJpqH5VTa03xB5blDRNOe5AfFp2GNIBpDX8th1IO8sS5ejsz4Swm175nUvipwU211S4n4RtCv0A6r18fsgJbrrbmhFT9k2cAXF3yyg0Uu0B0wPOWP7BOrMVnXp44aHoXSfJ06ZXk7HrD5J5R9AZIgQLmGutM9ESNxw3CVJtW4Rfxeh7JE2AD04B3g78FxRgBxY82I2Gzf6ZPMsc39d37LM90dd9cFA\nConnection: close\nUpgrade-Insecure-Requests: 1\nCache-Control: max-age=0\n2: When providing a valid length payload of 249 characters or less it will be stored as a *.cache filename in the /var/run/beaker/container_file/ directory,this can easily be turned in to a denial of service by filling up the space of the device with unique beaker.session.id requests. The web portal will display either a 500 error as shown in DOS1.png or a python error screen as shown in DOS2.1.png and DOS2.2.png. Typically the web portal will stop functioning after the /run mount has reached 50% by sending requests using iterations of 1-15681 as a beaker.session.id variable, however any length of payload can be used up to 249 characters. This can be recovered from by deleting all files within the /var/run/beaker/container_file/ directory.\nAlthough once the /run mount can not accept any more files /var/log will start to fill up with complaints about not being able to write to /var/run/beaker/container_file/, then after /var/log fills up the device will stop responding all together until it has been power cycled.\n3: I have created a video showing you how it is accomplished, I stopped the video at only 7% resources consumed on the /run mount as the video would be pretty long if we waited until the edgerouter went offline. I am hoping this is enough for you to be able to reproduce this. I am thinking that this could be fairly bad if made in to a python script along with google dorks and automation. Or even a python script that someone has to only enter in an IP address and it will take the router offline in about 5 minutes or so until the router owner unplugs and plugs it back in.\nImpact\nAny resources served by the edgemax device will be unavailable until the physical device has it's power cycled, then it should function as normal. However it would be easy to just perform the attack again after it has been brought back online.\n\n",
    "severity": [
        8.3,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "Uncontrolled Resource Consumption"
    ],
    "screenshots": {},
    "disclosed_date": 1564945920,
    "report_url": "https://hackerone.com/reports/406614",
    "is_multi_component": false,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "IOT",
    "steps": [
        [
            1,
            "Send a GET request to the target Edgemax device with a 'beaker.session.id' cookie value of 250 characters or more to trigger an error page with path disclosure."
        ],
        [
            2,
            "Send multiple GET requests with unique 'beaker.session.id' cookie values of 249 characters or less to fill up the /var/run/beaker/container_file/ directory, causing a denial of service."
        ]
    ],
    "vuln_description": "The vulnerability is a resource consumption Denial of Service (DoS) in Edgemax v1.10.6. By sending specially crafted requests with large or numerous 'beaker.session.id' cookie values, an attacker can exhaust system resources, leading to a DoS condition that requires a power cycle to recover.",
    "reason": "The attack involves manipulating cookie values to trigger resource exhaustion, which is a straightforward technique. The interaction between the cookie length and the system's resource handling is not subtle, and the attack does not require complex application state manipulation or novel logic.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}