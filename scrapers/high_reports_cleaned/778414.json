{
    "reported_to": "Node.js third-party modules",
    "reported_by": "skyn3t ",
    "title": "[klona] Prototype pollution",
    "content": "\nI would like to report Prototype pollution in klona\nIt allows adding arbitrary property to Prototype while deep cloning an object\nModule\nmodule name: klona\nversion: <1.1.1\nnpm page: https://www.npmjs.com/package/klona\nModule Description\nA tiny (366B) and fast utility to \"deep clone\" Objects, Arrays, Dates, RegExps, and more!\nModule Stats\n356 weekly downloads\nVulnerability\nVulnerability Description\nSee: https://snyk.io/vuln/SNYK-JS-LODASH-450202\nSteps To Reproduce:\nDescribed here: https://github.com/lukeed/klona/pull/11/files\nNote:\nThis vulnerability was reported directly to owner here https://github.com/lukeed/klona/pull/11 on 10/01/2020.\nFix published in v1.1.1 on 15/01/2020\nWrap up\nI contacted the maintainer to let them know: Y\nI opened an issue in the related repository: Y\nHunter's comments and funny memes goes here\n<image_0>\nImpact\nDenial of Service and possible Remote code execution by overriding object's property methods like toString\n\n",
    "severity": [
        9.4,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "None"
    ],
    "screenshots": {
        "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ZSFyCsmK65DHSkibn3DKDsMC?response-content-disposition=attachment%3B%20filename%3D%22ZomboMeme_18012020195556.jpg%22%3B%20filename%2A%3DUTF-8%27%27ZomboMeme_18012020195556.jpg&response-content-type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQYLEKYDFX%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T015725Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjELf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQC4vODn8YUzaTRUfcGpvJJTBgHwUK5fDHwdpePaibJ5vwIhANQs5y7y0XMxGnZ34oIb1sUwP9aYibzxtKLOY4j8kdkAKrEFCCAQAxoMMDEzNjE5Mjc0ODQ5Igxs%2FvQpiWvF5gA0%2Bl4qjgX4Kn26dc27l0jkuHHWSiUdWdQFjZqqpzFO3M8nHWZLgzKxeMYt7LsD7%2B66VkYc3oB7e%2F3DMjgufrIIQp7gV5DghgpuKsuvqSZbbT2roHrBdjCznDyU9S13b0%2BPAMqC1q1SdJ7eZ8vbkmPXp3MIQXWnlT6jteSrpijdu5ipsxuCuFwvXARdohv2CDwJuIoIrKStWUGTzvLoZOC%2FRk1s89eBabEkMRa01KSNn3HrPum7PFBpUsecTxws8NQETMS%2B3aqknM6L%2BSiF9FPtq8YKbqQDi3s4vLbVCCYmolhF%2BeHIr8f%2BWIGp581jJcaTG1EJtNZBR%2BdTnt%2BxPE%2BL6R9Nrbj%2FRGAL2EBNnNWZ%2F6HQdcez%2F89p52fFJEj8fEs5BqN%2BB3m8MCNlUMu0GRnWu%2FnZpHqedG7WoCOwJb%2FMgdQGpYy0ZeXsMggHNAqJxbN3PHtH0dhab00%2B6JgN1FTeXJni%2FjkGfKiZdp1WigYKWggl0f06Or21Qh4ZnMtxCoclSlvNv%2FeIKr3EE3tPW2YKPA2LlPw22gVEwseBCMi6LPo34asoU6efxREeW4zyCEkMWnreRxBTRMkSBQptd2CqyavwGNEhSlg592iZlrPNAuRM7gXvHCRYABe6anZ8dQl%2BbvStnqJ%2FjbH4OEtW3e0%2Bn1g4THdLAfmHjc0PHkKVqRuOIemXT7kpafIRsniIyVT%2BXrmaapkfd1qdjfzX5xrSkbCR8ZMgU1SBdjIpEwHVzy392oQ12J3HTJGth3YszCQyEEfw7TvkzUMQR5mHTBEyQhOs6I8zBMeLwro97OSiq%2F6Q%2Bl%2F3Ect%2FgO7yxgRElq7ZgbMP7USEzOhTsaFqq9ukwYcSNn3rMdTh8ahC8FXcYSVOULAwjduMvwY6sAHqC%2FkPBuJHzV1lqMeRohNquVKN9GLvdF8dFMEefEIK7wIDWCvhn%2B3pHbbbVkq242RPViMtZRJA30%2FTnkGmg27xFGycA8wLC33KQUqq%2BSc6xoqdWJXf%2FzLEKfLdo2Zf4AJI%2F24AjT945xIvdSUW%2F3P1W2inQKYawdwcCYKBw1rQroD%2BDevAK%2F1i%2B%2Bg4rp8QxnzwzVksNi%2BTCJBMaCiAcxC8Dq6u%2FA0%2FkrVS3qupNHniPw%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=368e202b756b792e610e7cd98b317b06b12e0e53963b0c2f30052e1ba00e703d"
    },
    "disclosed_date": 1579796220,
    "report_url": "https://hackerone.com/reports/778414",
    "is_multi_component": false,
    "complexity": "LOW",
    "novelty": "LOW",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Create an object with a property that modifies the prototype, e.g., `const maliciousObj = { '__proto__': { 'polluted': true } }`"
        ],
        [
            2,
            "Use klona (<1.1.1) to deep clone the malicious object, e.g., `const clonedObj = klona(maliciousObj)`"
        ]
    ],
    "vuln_description": "The vulnerability is a prototype pollution in the klona library, which allows an attacker to add arbitrary properties to the prototype of an object during a deep clone operation. This can lead to denial of service or remote code execution by overriding built-in object methods like `toString`.",
    "reason": "The vulnerability involves a straightforward manipulation of object properties and prototype chains, which is a well-known attack vector. The steps to reproduce are simple and do not require complex interactions or state manipulation.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}