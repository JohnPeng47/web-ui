{
    "reported_to": "Node.js third-party modules",
    "reported_by": "chalker ",
    "title": "Yarn transfers npm credentials over unencrypted http connection",
    "content": "\nModule\nmodule name: yarn\nversion: 1.16.0\nnpm page: https://www.npmjs.com/package/yarn\nModule Description\nFast, reliable, and secure dependency management.\nModule Stats\nReplace stats below with numbers from npm\u2019s module page:\n166 703 downloads in the last day\n849 928 downloads in the last week\n3 772 290 downloads in the last month\nVulnerability\nVulnerability Description\nFor scoped packages that are listed as resolved \"http://registry.npmjs.org/@... in yarn.lock, yarn trasfers npm credentials (i.e. _authToken) over unencrypted http connection. This allows any MitM (for example, a proxy or a VPN) to sniff out npm credentials, given that the developer in question performs yarn install on such a yarn.lock file.\nA quick search shows that there is a number of yarn.lock files affected by this on GitHub, some examples:\nhttps://github.com/EC-Nordbund/ec-verwaltungs-app/blob/ab961352d5dd53834a51793d6e2c4bc69a2b22d4/packages/api/yarn.lock#L36\nhttps://github.com/nujabes403/boilerplate2/blob/61613e526aec02c5dd4227457deb8676d66780d0/yarn.lock#L7\nThere seem to be many of those on GitHub.\nLooks like not only it was possible to craft a yarn.lock with a malicious intent, but also this seems to be a common pattern that yarn created itself at some point or under some circumstances and that gets persistent from older versions.\nSteps To Reproduce:\nPerform an npm login or just write //registry.npmjs.org/:_authToken=38bb8d1f-a39b-47d1-a78e-3bf0626ff77e (which is the format npm uses) to ~/.npmrc. Doing this from your own account would leak your npm credentials on next steps, so better just use a placeholder.\nCreate an empty package with a single dependency on \"@babel/core\": \"^7.5.4\"\nPerform yarn install\nReplace all occurances of https://registry.yarnpkg.com with http://registry.npmjs.org/ in the generated yarn.lock\nAlternatively to steps 2-4 -- just use an already existing yarn.lock with resolved \"http://registry.npmjs.org/@ in it (lots of those on GitHub), but be careful with that.\nClear yarn cache and node_modules: rm -rf ~/.cache/yarn/ node_modules. Let's assume you just downloaded an affected yarn.lock on your clean machine.\nStart wireshark with tcp dst port 80 filter.\nRun yarn install\nObserved result is attached on a screenshot.\nSupporting Material/References:\nLinux yoga 5.1.5-arch1-2-ARCH #1 SMP PREEMPT Mon May 27 03:37:39 UTC 2019 x86_64 GNU/Linux\nNode.js v12.6.0\nnpm 6.10.1\nWrap up\nSelect Y or N for the following statements:\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nImpact\nAttacker (MitM) being able to:\nImpersonate the affected account\nPublish packages from the affected account that could also get used by the affected account/company in the future (for protected packages) and by anyone in the ecosystem (for public packages)\nPerform logout and break installs of protected packages\n\n",
    "severity": [
        8.2,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "Missing Encryption of Sensitive Data"
    ],
    "screenshots": {},
    "disclosed_date": 1565796420,
    "report_url": "https://hackerone.com/reports/640904",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Perform an npm login or add a placeholder auth token to ~/.npmrc"
        ],
        [
            2,
            "Create a package with a dependency on \"@babel/core\": \"^7.5.4\" and run yarn install"
        ],
        [
            3,
            "Modify yarn.lock to replace https://registry.yarnpkg.com with http://registry.npmjs.org/"
        ],
        [
            4,
            "Clear yarn cache and node_modules, then run yarn install while monitoring network traffic"
        ]
    ],
    "vuln_description": "Yarn transfers npm credentials over unencrypted HTTP connections when resolving scoped packages from yarn.lock files that specify http://registry.npmjs.org/. This allows MitM attackers to intercept authentication tokens.",
    "reason": "The vulnerability requires understanding of yarn's package resolution mechanism and the credential passing behavior, but the core issue is straightforward once the http:// pattern in yarn.lock is noticed. The attack doesn't involve complex state manipulation or novel logic.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}