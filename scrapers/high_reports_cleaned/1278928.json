{
  "reported_to": "UPchieve",
  "reported_by": "ben_lay ",
  "title": "blind sql on  [ https://argocd.upchieve.org/login?return_url=id= ]",
  "content": "\nSummary:\n[i have discoverd a blind sql on your site login page which i confirmed using two scenarios to confirm its existance.]\nSteps To Reproduce:\n[add details for how we can reproduce the issue]\nuse the following payloads\nthis one retured a 200 ok response confirming sql vulnerability existance\nid=291751-sleep(5)&hash=f42ffae0449536cfd0419826f3adf136\nthis one was blocked confirming the first one is going through and can be weponised\n70418291&comment_id=291751-benchmark(1000000000,1-1)&hash=f42ffae0449536cfd0419826f3adf136\nexample link on how to reproduce [ https://argocd.upchieve.org/login?return_url=id=291751-sleep(5)&hash=f42ffae0449536cfd0419826f3adf136]\nWhy -sleep(5), -benchmark(1000000000,1-1) payloads were used? I suspected that comment_id was processed as integer and was unescaped in the query so int-sleep(t) is a valid construction whatever the full query is, which doesn't require various quote/parenthesis tests for the quick manual confirmation. I found it also useful when WAF/filters block the quotes.\nThe severity was set to High because I propose Critical only for content injections:)\nSupporting Material/References:\n[ https://owasp.org/www-community/attacks/Blind_SQL_Injection ][https://gerbenjavado.com/manual-sql-injection-discovery-tips/]\nRecommendations for Fixing/Mitigation\n[The only sure way to prevent SQL Injection attacks is input validation and parametrized queries including prepared statements. The application code should never use the input directly. The developer must sanitize all input, not only web form inputs such as login forms.]\nImpact\nThe impact SQL injection can have on a business is far-reaching. A successful attack may result in the unauthorized viewing of user lists, the deletion of entire tables and, in certain cases, the attacker gaining administrative rights to a database, all of which are highly detrimental to a business.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1627503240,
  "report_url": "https://hackerone.com/reports/1278928",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Navigate to the login page: https://argocd.upchieve.org/login?return_url=id="
    ],
    [
      2,
      "Inject the SQL payload: id=291751-sleep(5)&hash=f42ffae0449536cfd0419826f3adf136"
    ]
  ],
  "vuln_description": "A blind SQL injection vulnerability exists in the login page of the application. The vulnerability allows an attacker to execute arbitrary SQL commands by injecting malicious payloads into the 'id' parameter, which can lead to unauthorized data access or manipulation.",
  "reason": "The vulnerability discovery involves straightforward SQL injection techniques using common payloads (sleep and benchmark). The attack does not require complex interactions or understanding of multiple components, making it relatively easy to discover.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The reported blind SQLi uses time-delay payloads (sleep/benchmark) injected into the comment_id parameter. The methodology's 'simple payload' criteria is met because: (1) The payloads are generic SQLi primitives requiring no custom filter bypass (they exploit integer casting to avoid quotes/parentheses), (2) Detection occurs through same-channel HTTP response timing analysis (no stored payloads or multi-step navigation required), (3) The vulnerable parameter would be identified during regular request logging (return_url=id=... is part of normal navigation).",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The blind SQL injection vulnerability involves manipulating input parameters to trigger time-based delays or other SQL behaviors, which is not directly related to authentication or authorization bypass. The methodology described focuses on swapping user sessions, actions, and resource IDs to test for IDOR or AuthN/AuthZ bypasses, not SQL injection vulnerabilities.",
    "is_detectable": false
  }
}