{
  "reported_to": "Nextcloud",
  "reported_by": "nickvergessen ",
  "title": "SQL injextion via vulnerable doctrine/dbal version",
  "content": "\nSummary:\nSQL injection via limit parameter on user facing APIs\nSteps To Reproduce:\nRun security scanner:\nREPORT /remote.php/dav/comments/files/1985\nXML input oc:filter-comments.oc:limit#text was set to 1'\"\nYou have an error in your SQL syntax\nSupporting Material/References:\nFor more details see:\nhttps://github.com/nextcloud-gmbh/h1/issues/197\nImpact\nFull flexed SQL injection via user provided input\n\n",
  "severity": [
    8.5,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1652292480,
  "report_url": "https://hackerone.com/reports/1390331",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Run security scanner on the target endpoint: /remote.php/dav/comments/files/1985"
    ],
    [
      2,
      "Inject SQL payload into the 'oc:filter-comments.oc:limit#text' parameter with value: 1'\""
    ]
  ],
  "vuln_description": "SQL injection via vulnerable doctrine/dbal version in the limit parameter on user-facing APIs, allowing full SQL injection via user-provided input.",
  "reason": "The vulnerability involves a straightforward SQL injection in a user-facing parameter, which is a common and well-documented attack vector. The discovery does not require complex interactions or novel logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "197",
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves user-provided input being directly used in SQL queries without proper sanitization, which is a different class of vulnerability (injection) than the authN/authZ bypass or IDOR vulnerabilities described in the methodologies. The methodologies focus on testing authorization boundaries by swapping user sessions or resource IDs, not on testing for injection vulnerabilities.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The vulnerability involves SQL injection through the 'limit' parameter which was detected by a simple payload (1'\") that triggered an SQL syntax error directly in the HTTP response. The parameter was part of a normal API endpoint (remote.php/dav/comments/files/1985) that would be logged during regular navigation. The payload required no custom filter bypasses and the error detection occurred in the same channel (immediate HTTP response), meeting all criteria of the methodology.",
    "is_simple_injection": true
  }
}