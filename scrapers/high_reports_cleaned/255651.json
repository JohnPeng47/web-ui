{
  "reported_to": "Zomato",
  "reported_by": "adibou ",
  "title": "Unauthorized update of merchants' information via /php/merchant_details.php",
  "content": "\nHello!\nI discovered an interesting file :\nhttps://www.zomato.com/php/merchant_details.php\nIf I add in post content :\naction=update-merchant&merchant_id=95292&type=1&email=update@hotmail.fr&contact=update@hotmail.fr&name=update\nWith the report #255648, I was able to create a merchant, I should use this merchant to provide a screenshot like in a real situation.\nI'm also able to change :\naddress, pincode, city, email, phone tan_number, bank account name, company_id, payu_id, contact, restaurants and more...\nAn attacker would change the mail to receive confidential mails it may can be leading to an merchant takeover if you use the mail to bound it with the account of the user. I couldn't try this scenario due to your rules about users data.\nDo you have a test merchant_id i can play with to test that before you resolve the report?\nScreenshot : updatehttp.png\nIf you have any questions...\nnbsp\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1505816040,
  "report_url": "https://hackerone.com/reports/255651",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Identify the target endpoint: https://www.zomato.com/php/merchant_details.php"
    ],
    [
      2,
      "Send a POST request with the following parameters: action=update-merchant&merchant_id=95292&type=1&email=update@hotmail.fr&contact=update@hotmail.fr&name=update"
    ]
  ],
  "vuln_description": "The vulnerability allows unauthorized updates to merchant information via the /php/merchant_details.php endpoint. An attacker can modify sensitive details such as email, contact information, address, and bank account details, potentially leading to a merchant account takeover.",
  "reason": "The attack involves a straightforward manipulation of a single endpoint with clear parameters. No complex interactions or state manipulations are required, and the vulnerability is easily identifiable once the endpoint is discovered.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "255648",
  "idor_detectable": true,
  "authnz_byppass_detectable": false,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves an unauthorized update of merchant information by manipulating the 'merchant_id' and other parameters in a POST request to '/php/merchant_details.php'. This fits the IDOR vulnerability class where the attacker can modify resources they should not have access to by swapping resource IDs (merchant_id in this case) and executing the action with their session. The methodology described would detect this by collecting (user_session, action, resource_id) tuples and testing with different user sessions and resource IDs.",
    "is_detectable": true
  }
}