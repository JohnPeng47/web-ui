{
  "reported_to": "Shopify",
  "reported_by": "cyber__sec ",
  "title": "Stored XSS in my staff name fired in another your internal panel",
  "content": "\nHi all,\nI had lots of tests for bug bounty in my test store \"trstore-3.myshopify.com\" (created about 4 years ago) and then one of your developers noticed that a stored cross-site scripting payload in my staff name fired in another your internal panel.\nI have attached the email sent to me by your collegue and I'd like to get a award and I am very happy.\nThanks alot.\nImpact\nStored XSS\n\n",
  "severity": [
    8.3,
    null
  ],
  "bounty": 5000,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1596074760,
  "report_url": "https://hackerone.com/reports/946053",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Create a test store 'trstore-3.myshopify.com' on Shopify"
    ],
    [
      2,
      "Inject a stored XSS payload into the staff name field in the test store"
    ]
  ],
  "vuln_description": "A stored cross-site scripting (XSS) vulnerability was discovered where a payload injected into the staff name field in a test store executed in an internal Shopify panel. This indicates that the staff name data was shared or accessible across different systems without proper sanitization.",
  "reason": "The vulnerability involves a straightforward stored XSS injection in a user-controllable field (staff name) that was then reflected in another internal system. The discovery does not require complex interactions or understanding of multiple components, as it follows a typical stored XSS pattern where user input is not properly sanitized before being rendered in another context.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The stored XSS vulnerability involves a payload in the staff name being executed in an internal panel, which is a cross-application issue. The methodology described focuses on testing within the same application by swapping user sessions and resource IDs, but does not account for cross-application interactions or stored XSS payloads being triggered in different contexts.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The stored XSS payload in the staff name triggers in an internal panel outside the test store's scope (likely Shopify's infrastructure). The methodology relies on detecting payload execution within the same application via regular navigation for all user roles. Since the internal panel is a separate application not navigable during testing, the methodology would not detect the payload execution, making this a non-simple injection.",
    "is_simple_injection": false
  }
}