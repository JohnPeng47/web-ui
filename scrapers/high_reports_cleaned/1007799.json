{
    "reported_to": "U.S. Dept Of Defense",
    "reported_by": "moloshy ",
    "title": "Local File Inclusion In Registration Page",
    "content": "\nSummary:\nWhen registering on https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 it is possible to use path traversal characters in a parameter allowing an attacker to read local files.\nDescription:\nThe registerUserInfoCommand.nextPageName parameter within the registration form is vulnerable to file path manipulation, where it is possible to submit a request containing path traversal characters (e.g. ../../../) followed by a local file, which will return the contents of the file. This can be used to read local files including sensitive configuration files such as /WEB-INF/web.xml, /WEB-INF/app-config.xml and /WEB-INF/spring/explicit-security-config.xml.\nImpact\nAn attacker could read local files on the web server that they would normally not have access to, such as the application source code or configuration files containing sensitive information on how the website is configured.\nStep-by-step Reproduction Instructions\nBrowse to https://\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/register/RegisterUserInfo.htm\nSetup an intercepting proxy (e.g. BurpSuite) and click Next, catching the request in Burp (don't worry about filling out the form fields)\nFor ease here I would recommend copying and pasting the below parameters into the request, replacing the parameters that were there originally. This request will fetch the /WEB-INF/web.xml configuration file, I have also attached two other requests which grab app-config.xml and explicity-security-config.xml. Once the parameters are there, forward the request to the server and you should see the web.xml file.\nCode 392 Bytes\n1registerUserInfoCommand.organization=Chantest+Corporation&registerUserInfoCommand.organizationId=49800&registerUserInfoCommand.currPageName=SearchUserOrgInfo.jsp&registerUserInfoCommand.nextPageName=..%2f..%2f..%2fWEB-INF%2fweb.xml&registerUserInfoCommand.prevPageName=jsp%2FRegistration%2FRegisterAccountInfo.jsp&registerUserInfoCommand.submitButton=Choose+This+Organization+and+Continue+%3E\nProduct, Version, and Configuration (If applicable)\nN/A\nSuggested Mitigation/Remediation Actions\nRather than placing the filename of the next page directly in a parameter, it would be better to maintain a whitelist of acceptable filenames and use a unique corresponding identifier to access the file. Then any request containing an invalid identifier can just be rejected. Additionally, you could also sanitise any path traversal characters that may be present in a request.\nImpact\nAn attacker could read local files on the web server that they would normally not have access to, such as the application source code or configuration files containing sensitive information on how the website is configured.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Path Traversal"
    ],
    "screenshots": {},
    "disclosed_date": 1606174020,
    "report_url": "https://hackerone.com/reports/1007799",
    "vuln_category": "WEB_APP",
    "is_multi_component": false,
    "complexity": "LOW",
    "novelty": "LOW",
    "steps": [
        [
            1,
            "Browse to the registration page at https://\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/register/RegisterUserInfo.htm"
        ],
        [
            2,
            "Intercept the request using a proxy like BurpSuite and modify the 'registerUserInfoCommand.nextPageName' parameter with path traversal (e.g., '..%2f..%2f..%2fWEB-INF%2fweb.xml') to access sensitive files."
        ]
    ],
    "vuln_description": "The registration page is vulnerable to Local File Inclusion (LFI) via the 'registerUserInfoCommand.nextPageName' parameter, allowing attackers to read sensitive files like /WEB-INF/web.xml by manipulating path traversal characters.",
    "reason": "The vulnerability involves straightforward parameter manipulation without requiring complex interactions or state changes. Path traversal is a well-known attack vector, and the steps to exploit it are direct and simple.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}