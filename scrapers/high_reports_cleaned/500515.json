{
    "reported_to": "Starbucks",
    "reported_by": "johnstone ",
    "title": "XXE at ecjobs.starbucks.com.cn/retail/hxpublic_v6/hxdynamicpage6.aspx",
    "content": "\nDescription:\nHi,guys,when i was visited the jobs of starbucks websites in China(https://ecjobs.starbucks.com.cn), i found a features of uploaded user's photo.Thought the bypass the security restrictions of upload,i can upload html|xhtml|xml|config files etc.The uploaded html file can realize the danger of stored xss,and the uploaded xml file can be parsed by the server,Through tested, the server does not prohibit the use of doctypes, entities, and access to external dtd files.\nSteps To Reproduce:\nUpload and XXE vulnerability:\nLog in to the user, enter the personal information settings page, click Upload Image\nIntercept https access information through Burp suite\naddd \"html;\" attributes in the parameter of \"allow_file_type_list\",or you can delete the params of \"allow_file_type_list\",then replace the filename's Suffix name \".jpg\" to \".html\"\nGet the server's response information,visited the uploaded file URL. https://ecjobs.starbucks.com.cn/retail/tempfiles/temp_uploaded_641dee35-5a62-478e-90d7-f5558a78c60e.html\nuploaded a malicious xml file to the server,change the parameter of \"_hxpage\"\uff0clike\nPOST /retail/hxpublic_v6/hxdynamicpage6.aspx?_hxpage=tempfiles/temp_uploaded_d4e4c8c5-c4ab-4743-a6fd-c2d779a29734.xml&max_file_size_kb=1024&allow_file_type_list=xml;jpg;jpeg;png;bmp;\nor change the \"HX_PAGE_NAME\" params of xml date by post\nPOST /retail/hxpublic_v6/hxxmlservice6.aspx HTTP/1.1\nHX_PAGE_NAME=\"tempfiles/temp_uploaded_71cc275c-64fc-40fc-a9cc-52cce5a02858.xml\"\npost the edited request,the starbucks's server will visit the attacker's server to get the DTD file.\nImpact\nThe vulnerability can let the attacker upload the evil files in the server which will spoof the user,steal the user's cookie and informations.The XXE vulnerability disclose some server's informations ,denial of service attack\uff0cmaybe will cause NTLMv2 hash attacks through XXE(the starbucks'server environment is iis 7.5+asp.net+windows), which could lead to attackers having full control over the server and the entire inner domain.\nBy the way,if the report isn't considered eligible.please let me close this report myself.Thank you\n\n",
    "severity": [
        10.0,
        null
    ],
    "bounty": 0,
    "weaknesses": [
        "XML External Entities (XXE)"
    ],
    "screenshots": {},
    "disclosed_date": 1573623360,
    "report_url": "https://hackerone.com/reports/500515",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "HIGH",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Log in to the user, enter the personal information settings page, click Upload Image"
        ],
        [
            2,
            "Intercept https access information through Burp suite"
        ],
        [
            3,
            "Add 'html;' attributes in the parameter of 'allow_file_type_list', or delete the params of 'allow_file_type_list', then replace the filename's suffix '.jpg' to '.html'"
        ],
        [
            4,
            "Get the server's response information, visit the uploaded file URL"
        ],
        [
            5,
            "Upload a malicious xml file to the server, change the parameter of '_hxpage' or 'HX_PAGE_NAME' params of xml data by post"
        ],
        [
            6,
            "Post the edited request, the server will visit the attacker's server to get the DTD file"
        ]
    ],
    "vuln_description": "The vulnerability involves bypassing security restrictions to upload malicious files (HTML, XML) leading to stored XSS and XXE attacks. The XXE vulnerability can disclose server information, cause denial of service, and potentially lead to NTLMv2 hash attacks, giving attackers control over the server.",
    "reason": "The attack requires multiple steps including intercepting and modifying requests, understanding server responses, and crafting malicious files. However, the steps are somewhat straightforward once the initial bypass is understood, and the interactions between components are not overly subtle.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "injection_metadata": {
        "is_simple_payload": false
    },
    "authnz_metadata": {
        "reason": "The vulnerability involves uploading malicious files (HTML/XML) and exploiting XXE, which is not directly related to authentication or authorization bypass. The methodology focuses on testing (user_session, action, resource_id) tuples for AuthN/AuthZ issues, not file upload or parsing vulnerabilities.",
        "is_detectable": false
    }
}