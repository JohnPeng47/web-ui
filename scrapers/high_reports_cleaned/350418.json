{
    "reported_to": "Node.js third-party modules",
    "reported_by": "greendog ",
    "title": "Insecure implementation of deserialization in cryo",
    "content": "\nI would like to report code injection in serialization package cryo\nIt allows execute arbitrary code using custom prototype.\nModule\nmodule name: cryo\nversion: 0.0.6\nnpm page: https://www.npmjs.com/package/cryo\nModule Description\nJSON on steroids.\nBuilt for node.js and browsers. Cryo is inspired by Python's pickle and works similarly to JSON.stringify() and JSON.parse(). Cryo.stringify() and Cryo.parse() improve on JSON in these circumstances:\nModule Stats\n37 downloads in the last week\nVulnerability\nVulnerability Description\nIf an application uses \"cryo\" package to deserialize JSON into an object and interacts with the object later in the code (convert to sting, for example) and if an attacker controls this JSON, then the attacker can get arbitrary code execution in the application.\nTo reconstruct an object from JSON, cryo uses square bracket notation ( obj[key]=value ). So there is an opportunity for an attacker to change __proto__ property for a new object. Also Cryo supports serialization of functions, so the attacker can set their own methods (toString, valueOf) for the new object.\nIt means that if later in the code the application interacts with the new object in the way which leads to invocation of the object's prototype functions, then the attacker malicious code are executed.\nSteps To Reproduce:\nPoC:\nCode 492 Bytes\n1var Cryo = require('cryo');\n2var frozen = '{\"root\":\"_CRYO_REF_3\",\"references\":[{\"contents\":{},\"value\":\"_CRYO_FUNCTION_function () {console.log(\\\\\"defconrussia\\\\\"); return 1111;}\"},{\"contents\":{},\"value\":\"_CRYO_FUNCTION_function () {console.log(\\\\\"defconrussia\\\\\");return 2222;}\"},{\"contents\":{\"toString\":\"_CRYO_REF_0\",\"valueOf\":\"_CRYO_REF_1\"},\"value\":\"_CRYO_OBJECT_\"},{\"contents\":{\"__proto__\":\"_CRYO_REF_2\"},\"value\":\"_CRYO_OBJECT_\"}]}'\n3var hydrated = Cryo.parse(frozen);\n4console.log(hydrated);\nconsole.log internally calls hydrated's vauleOf method, so an attacker's code are executed and we can see \"defconrussia\" in console.\nPatch\nI suggest to blacklist \"proto\" property in deserialization process.\nSupporting Material/References:\nUbuntu 16.04\nnode v6.11.3\nnpm 5.5.1\nWrap up\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nHunter's comments and funny memes goes here\nAlso I found a couple of other modules (for example, https://www.npmjs.com/package/kaiser) which use square bracket notation too, so it's possible to rewrite __proto__ with them too. But us they don't support serialization of functions, we cannot use the same attack as described here. Still we can set wrong values for prototype's methods, so if an application tries to convert a new object (deserialized from JSON) to string, it may crash with a TypeError exception.\nIt could be a kind of DoS. What do you think if I should create similar reports for such cases?\nImpact\nAn attacker can craft a special JSON file with malicious code which rewrites __proto__ of a new object. In some circumstances it may lead to execution of the code, so the attacker can achieve OS command execution.\n\n",
    "severity": [
        8.7,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "Code Injection"
    ],
    "screenshots": {},
    "disclosed_date": 1529437860,
    "report_url": "https://hackerone.com/reports/350418",
    "is_multi_component": false,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Install the 'cryo' package (version 0.0.6) in a Node.js environment."
        ],
        [
            2,
            "Use the provided PoC JSON payload to exploit the deserialization vulnerability by calling Cryo.parse()."
        ],
        [
            3,
            "Observe the execution of arbitrary code when the deserialized object is interacted with (e.g., via console.log)."
        ]
    ],
    "vuln_description": "The 'cryo' package's insecure deserialization implementation allows attackers to execute arbitrary code by manipulating the __proto__ property and injecting malicious functions during the deserialization process. This leads to code execution when the deserialized object's prototype methods (e.g., toString, valueOf) are invoked.",
    "reason": "The vulnerability requires understanding of prototype pollution and function serialization in JavaScript, but the attack components (__proto__ manipulation and function injection) are well-documented and the interaction is straightforward once identified.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "authnz_metadata": {
        "reason": "The vulnerability involves deserialization of untrusted data leading to prototype pollution and arbitrary code execution, which is not directly related to authentication or authorization bypasses. The proposed methodologies focus on testing authorization boundaries by swapping user sessions and resource IDs, not on detecting insecure deserialization or prototype pollution vulnerabilities.",
        "is_detectable": false
    }
}