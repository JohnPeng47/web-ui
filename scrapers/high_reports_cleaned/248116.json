{
    "reported_to": "U.S. Dept Of Defense",
    "reported_by": "manoelt ",
    "title": "Remote Code Execution (RCE) in a DoD website",
    "content": "\nSummary:\nOne of the DoD applications uses a java library which is vulnerable to expression language injection. Using only an URL I was able to inject java code. I made a simple PoC that requests a name resolution to a DNS server.\nDescription:\nThe application at https://\u2588\u2588\u2588 uses Primefaces version 5.3 which is vulnarable to Expression Language injection through DynamicContent generator.\nTo prove the injection I made a PoC that tries to submit a HTTP request, but the server blocks the outgoing packets on port 80, on the other hand the server still try to resolve the requested domain and so I receive DNS requests from DoD server. Also, I can delete and maybe read files using the File Java class, but I decided not to try to avoid leak of some private data.\nImpact\nCritical.\nStep-by-step Reproduction Instructions\nFirst you need to execute the program attached to generate the payload. To do that you just need the Primefaces-5.3.jar (https://www.primefaces.org/downloads/ ) in your class path.\nWith the code attached generate the payload encrypted with the default key \"primefaces\". Change the domain (String remoteMalJarUrl) to one that you have control or use one from http://dnsbin.zhack.ca/\nWith the payload from #1, append to the URL: https://\u2588\u2588\u2588\u2588/javax.faces.resource/dynamiccontent.properties.xhtml?pfdrt=sc&ln=primefaces&pfdrid=\nSend a GET request using curl (curl -vk https://\u2588\u2588\u2588\u2588/javax.faces.resource/dynamiccontent.properties.xhtml?pfdrt=sc&ln=primefaces&pfdrid=<YOUR_PAYLOAD_HERE>\nYou will receive a name resolution request for remoteMalJarUrl from the DoD application\nWe could use this DNS request to exfiltrate data from the server. And as I said, theoretically I could also delete files from the server using the File class.\nProduct, Version, and Configuration (If applicable)\nPrimefaces 5.3\nSuggested Mitigation/Remediation Actions\nUpdate Primefaces\nAlternatively by filtering incoming requests with pfdrid parameter (value longer than 16bytes and Base64 encoded) and \"pfdrt=sc\" is possible to mitigate the attack: \"pfdrt=sc\" calls the vulnerable StreamedContent Method and pfdrid contains the exploit payload.\nReferences\nhttp://blog.mindedsecurity.com/2016/02/rce-in-oracle-netbeans-opensource.html\nhttps://github.com/primefaces/primefaces/issues/1152\n\n",
    "severity": [
        9.0,
        10.0
    ],
    "bounty": null,
    "weaknesses": [
        "Code Injection"
    ],
    "screenshots": {},
    "disclosed_date": 1570216860,
    "report_url": "https://hackerone.com/reports/248116",
    "is_multi_component": false,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Generate the payload using Primefaces-5.3.jar and encrypt it with the default key 'primefaces'. Change the domain in the payload to one you control."
        ],
        [
            2,
            "Append the generated payload to the URL: https://\u2588\u2588\u2588\u2588/javax.faces.resource/dynamiccontent.properties.xhtml?pfdrt=sc&ln=primefaces&pfdrid=<YOUR_PAYLOAD_HERE>"
        ],
        [
            3,
            "Send a GET request to the modified URL using curl or a similar tool."
        ],
        [
            4,
            "Observe the DNS request from the DoD server to the domain you specified in the payload."
        ]
    ],
    "vuln_description": "The vulnerability is an Expression Language injection in a DoD application using Primefaces 5.3, which allows remote code execution through a crafted URL. The PoC demonstrates the ability to trigger DNS requests from the server, indicating potential for data exfiltration or file manipulation.",
    "reason": "The attack requires knowledge of the specific vulnerable library (Primefaces 5.3), understanding of Expression Language injection, and the ability to craft a payload that leverages this vulnerability. However, once the vulnerable component is identified, the exploitation steps are relatively straightforward.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "authnz_metadata": {
        "reason": "The vulnerability involves a remote code execution (RCE) via an expression language injection in a Java library (Primefaces 5.3). The methodology described focuses on authentication and authorization bugs (IDOR, AuthN/AuthZ bypass) by swapping user sessions and resource IDs within the same application. The RCE vulnerability does not fit into these categories as it is a code execution flaw triggered by a specific URL parameter manipulation, not an authorization boundary crossing. The detection method outlined does not cover code injection or library vulnerabilities.",
        "is_detectable": false
    }
}