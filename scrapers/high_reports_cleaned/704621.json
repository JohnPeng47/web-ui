{
    "reported_to": "curl",
    "reported_by": "jlleitschuh ",
    "title": "SSRF via maliciously crafted URL due to host confusion",
    "content": "\nSummary:\nCurl is vulnerable to SSRF due to improperly parsing the host component of the URL compared to other URL parsers and the URL living standard.\nPOC\ncurl -sD - -o /dev/null \"http://google.com:80\\\\@yahoo.com/\"\nCurl makes a request to yahoo.com instead of google.com.\nSupporting Material/References:\nExact question to URL standards body\nCVE-2018-3774 similar vulnerability in an NPM lib\nSee also: https://hackerone.com/reports/384029\nSee also: https://hackerone.com/reports/384029\nTo quote the standards body issue:\nSpecifically the authority state deals with parsing the @ properly. However as you'll notice if it encounters the \\ beforehand, it'll go into the host state and reset the pointer at which point it won't consider google.com:80\\\\ auth data for yahoo.com anymore.\nOther Libraries\nCode 564 Bytes\n1const whatwg_url = require('whatwg-url'); // Created by the RFC maintainers\n2\n3const theUrl = new whatwg_url.URL(\"https://google.com:80\\\\\\\\@yahoo.com/\");\n4const theUrl2 = new whatwg_url.URL(\"https://google.com:80\\\\@yahoo.com/\");\n5\n6const nodeUrl = new URL(\"https://google.com:80\\\\\\\\@yahoo.com/\");\n7const nodeUrl2 = new URL(\"https://google.com:80\\\\@yahoo.com/\");\n8\n9console.log(theUrl.hostname); // Prints google.com\n10console.log(theUrl2.hostname); // Prints google.com\n11console.log(nodeUrl.hostname); // Prints google.com\n12console.log(nodeUrl2.hostname); // Prints google.com\nImpact\nIf another library implementing the URL standard is used to white/blacklist a request by host but the actual request is made via curl or the curl library, an attacker can smuggle the request past the URL validator thus allowing an attacker to perform SSRF or an open redirect attack.\n\n",
    "severity": [
        10.0,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "Server-Side Request Forgery (SSRF)"
    ],
    "screenshots": {},
    "disclosed_date": 1610157780,
    "report_url": "https://hackerone.com/reports/704621",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Execute the curl command with a maliciously crafted URL: curl -sD - -o /dev/null \"http://google.com:80\\\\@yahoo.com/\""
        ],
        [
            2,
            "Observe that curl makes a request to yahoo.com instead of google.com"
        ]
    ],
    "vuln_description": "Curl is vulnerable to SSRF due to improperly parsing the host component of the URL compared to other URL parsers and the URL living standard. This allows an attacker to bypass host-based validation checks by crafting a URL that appears to target one host (e.g., google.com) but actually targets another (e.g., yahoo.com).",
    "reason": "The vulnerability involves understanding URL parsing discrepancies between curl and other libraries, which is a subtle interaction. However, the attack itself is straightforward once the parsing issue is known, and does not require complex application state manipulation or novel logic.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": "384029"
}