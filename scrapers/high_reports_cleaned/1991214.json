{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "bulldawg ",
  "title": "Automatic Admin Access",
  "content": "\nURL: https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588.mil/apexcrrel/f?p=150:1:23467499301323::NO:::\nWhen visiting the following URL, the user is automatically signed into a user with administrative access.\n\u2588\u2588\u2588\nThis user is allowed to:\nCreate new submissions, allowing file uploads\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nSee all submissions going back to 2012\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nManage users - add, delete, and link users. This user could also add the Administrator role to a user.\n\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\nSend spam emails to all users\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nAccess admin tools like publishing data and removing publications\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nI did not test all functionality provided by this access as I did not want to damage the integrity of the data on the web application.\nPlease let me know if you would like me to test adding/deleting users, creating submissions and testing file upload vulnerabilities, etc. This would also allow me to demonstrate the severity of this vulnerability as well as find new vulnerabilities in the application. For example, with permission I would like to test the file upload functionality for vulnerabilities.\nImpact\nThis is a critical vulnerability. This impacts the integrity, confidentiality, and availability of the application.\nIntegrity: Unauthorized users can upload arbitrary data, publish data, and delete publications.\nConfidentiality: This exposes names, emails, and submissions.\nAvailability: This administrative user can delete other user accounts, denying them access.\nSystem Host(s)\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588.mil\nAffected Product(s) and Version(s)\nCVE Numbers\nSteps to Reproduce\nVisiting URL: https://\u2588\u2588\u2588.mil/apexcrrel/f?p=150:24:23467499301323::NO:::\nView active user in top right corner: \"ben auto log user\". This user is an administrator.\nSuggested Mitigation/Remediation Actions\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1721414640,
  "report_url": "https://hackerone.com/reports/1991214",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Visit the URL: https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588.mil/apexcrrel/f?p=150:1:23467499301323::NO:::"
    ],
    [
      2,
      "Observe that the user is automatically signed in as an administrative user ('ben auto log user') with full admin privileges"
    ]
  ],
  "vuln_description": "The vulnerability allows any visitor to automatically gain administrative access to the application by visiting a specific URL. This grants unauthorized users the ability to perform critical administrative actions such as managing users, uploading files, accessing sensitive data, and modifying application content.",
  "reason": "The attack involves no complex steps or interactions\u2014merely visiting a URL triggers the automatic admin access. There is no need for authentication bypass techniques, session manipulation, or understanding of complex application logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves an automatic admin access bypass when visiting a specific URL, which falls under the AuthN/AuthZ Bypass category. The methodology described includes testing for such bypasses by swapping user sessions and checking for unauthorized access to functionalities. Since the reported issue involves accessing admin functionalities without proper authentication, it aligns with the detection method of AuthN/AuthZ Bypass.",
    "is_detectable": true
  }
}