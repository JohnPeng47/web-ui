{
    "reported_to": "Basecamp",
    "reported_by": "zofrex ",
    "title": "Insecure Bundler configuration fetching internal Gems (okra) from Rubygems.org",
    "content": "\nI believe (most likely) that one of your projects is not set up correctly to only pull internal gems from your internal gem server, and instead will pull gems from Rubygems.org if the version number there is higher.\nSpecifically, the \"okra\" gem.\nAt around 15:21 today (UTC) the okra gem that I wrote \u2013 https://rubygems.org/gems/okra \u2013 was installed on the machine with hostname \"oscillatinghost\" under the username \"fernando\" on your network.\nThis would be possible if the Gemfile either installs gems from global sources (thus allowing the version on Rubygems to 'trump' the internal version) or if the okra gem is depended on by another internal gem, and your version of Bundler is less than 2.2.10 \u2013 see here for details on that: https://bundler.io/blog/2021/02/15/a-more-secure-bundler-we-fixed-our-source-priorities.html\nIt is possible this is not correct, and instead, someone typed \"gem install okra\" without specifying where to fetch the Gem from. This would potentially also have fetched it from Rubygems.\nPlease note that the Gem I wrote does not do anything malicious, and only fetches the minimum information I need to filter out false positives and correctly identify organisations. You can verify this yourself by looking at the code for the gem \"okra-90002.0\" in your gems folder. I will delete all information relating to your organisation as soon as it is no longer needed.\nImpact\nThe impact is that an attacker could achieve arbitrary Remote Code Execution on any machines that will fetch the gem from the Rubygems repository.\nNote that to achieve code execution, merely installing the Gem is enough, it does not have to be require'd or run.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": 5000,
    "weaknesses": [
        "Command Injection - Generic"
    ],
    "screenshots": {},
    "disclosed_date": 1628593920,
    "report_url": "https://hackerone.com/reports/1104874",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Identify an internal gem (e.g., 'okra') that is also published on Rubygems.org."
        ],
        [
            2,
            "Publish a higher version of the gem on Rubygems.org to exploit misconfigured Bundler settings."
        ]
    ],
    "vuln_description": "The vulnerability arises from a misconfigured Bundler setup that fetches internal gems from Rubygems.org when a higher version is available, potentially allowing arbitrary code execution if a malicious gem is installed.",
    "reason": "The attack requires understanding of Bundler configuration and gem publishing, but the steps are straightforward once the misconfiguration is identified.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "authnz_metadata": {
        "reason": "The report describes a misconfiguration in Bundler that allows fetching internal gems from Rubygems.org instead of an internal gem server. This is not an authentication or authorization issue within a single application's context, but rather a system configuration issue. The proposed methodologies focus on detecting authN/authZ bugs within web applications by manipulating user sessions and resource IDs, which does not apply to this scenario.",
        "is_detectable": false
    }
}