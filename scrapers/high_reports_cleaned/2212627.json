{
  "reported_to": "Nextcloud",
  "reported_by": "cx75fa ",
  "title": "Delete external storage of any user",
  "content": "\nA security vulnerability was uncovered that allowed standard users to remove external storage resources from any user account in the application. This flaw was particularly concerning because it enabled unauthorized users to delete these resources based on a system-generated ID, which automatically incremented, without requiring any special privileges. This issue didn't grant access to the data but allowed for the indiscriminate removal of external storage associated with user accounts, potentially leading to data loss and disruption of service for affected users.\nReproduction Steps:\n1.Begin by logging in with a standard user account and establish an external storage connection.\n2. Afterward, update the storage configuration. Observe that the following request is generated:\nCode 462 Bytes\n1PUT /apps/files_external/userstorages/<storage_id> HTTP/1.1\n2Host: 127.0.0.1:9090\n3[REDACTED]\n4\n5{\"mountPoint\":\"simpleuser\",\"backend\":\"owncloud\",\"authMechanism\":\"password::logincredentials\",\"backendOptions\":{\"host\":\"cq6xxrdnw1941wu9jk4gcyfuglmfa4.oastify.com\",\"root\":\"\",\"secure\":true},\"testOnly\":true,\"id\":<storage_id>,\"mountOptions\":{\"enable_sharing\":true,\"encoding_compatibility\":false,\"encrypt\":true,\"filesystem_check_changes\":1,\"previews\":true,\"readonly\":false}}\n3.Next, log in to the application with an administrative user account or any other role and establish a storage connection.\n4.Observe that each new storage created increments the ID automatically. For instance, it could become 28.\n5. Using the standard user role, issue the request once more to modify the ID linked to the administrative storage. Observe that this action leads to the removal of the storage from the administrator's account.\nImpact\nThis finding has a huge impact on the application, including data loss, service disruption, unauthorized actions, data privacy concerns, security risks, and potential reputation damage.\n\n",
  "severity": [
    8.5,
    null
  ],
  "bounty": 1500,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1700576520,
  "report_url": "https://hackerone.com/reports/2212627",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Log in with a standard user account and establish an external storage connection."
    ],
    [
      2,
      "Update the storage configuration and observe the generated request."
    ],
    [
      3,
      "Log in with an administrative user account and establish another storage connection."
    ],
    [
      4,
      "Observe the auto-incremented ID of the new storage (e.g., 28)."
    ],
    [
      5,
      "Using the standard user role, issue the same request to modify the ID linked to the administrative storage, leading to its removal."
    ]
  ],
  "vuln_description": "A security vulnerability allows standard users to delete external storage resources from any user account in the application by exploiting an auto-incremented ID system. This flaw enables unauthorized users to remove storage resources without special privileges, potentially causing data loss and service disruption.",
  "reason": "The vulnerability involves understanding the auto-incremented ID system and manipulating it to target other users' storage. While the steps are straightforward, the interaction between user roles and the ID system is subtle but not highly complex.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": true,
  "authnz_byppass_detectable": false,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves swapping resource IDs (storage IDs) with existing actions and user sessions, which is covered by the methodology's test cases (AuthZ, IDOR). The standard user can modify the storage ID associated with an admin's storage, leading to unauthorized deletion, which fits the pattern of IDOR vulnerabilities.",
    "is_detectable": true
  }
}