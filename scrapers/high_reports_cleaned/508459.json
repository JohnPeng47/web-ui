{
    "reported_to": "Omise",
    "reported_by": "honoki ",
    "title": "SSRF in webhooks leads to AWS private keys disclosure",
    "content": "\nVulnerability Summary\nOmise makes use of Amazon AWS as their application environment. Due to a vulnerability in the way webhooks are implemented, an attacker can make arbitrary HTTP/HTTPS requests from the application server and read their responses. This is known as a server-side request forgery (SSRF) vulnerability.\nThis vulnerability leads to access to Omise's Amazon EC2 instance with the user role aws-opsworks-ec2-role, including AWS private keys.\nDescription\nThe vulnerability exists in the way webhooks follow redirects. In general, it appears that redirects are not followed, but a HTTP 303 See Other status code allows an attacker to bypass this restriction.\nBy pointing my webhook URL to a server that issues a 303 redirect, I am able to redirect and read the responses of arbitrary HTTP/HTTPS requests from the application server. E.g. the following PHP script results in a successful request that is followed by the server:\n<?php header('Location: http://<arbitrary-location>', TRUE, 303); ?>\nAs a result, it is possible to request a number of things, including AWS credentials on the metadata server located at http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-opsworks-ec2-role\nSteps to reproduce\nHost the following payload on https://<your-attacker-server>/redir.php:\nCode 127 Bytes\n1<?php header('Location: http://169.254.169.254/latest/meta-data/iam/security-credentials/aws-opsworks-ec2-role', TRUE, 303); ?>\nPoint your webhook endpoint on https://dashboard.omise.co/test/webhooks/edit to https://<your-attacker-server>/redir.php\nMake a random call to the API, e.g. adding a user;\nView the \"Recent Deliveries\" of the webhook calls on https://dashboard.omise.co/test/webhooks\nNote the 200 OK status code indicating a successful redirect\nClick the event to view the response body of the AWS metadata\nRecommendation\nI recommend to ensure all input provided to the endpoint is validated. In this case, ensure that 303 redirects are not followed either.\nI also recommend resetting all AWS access tokens. In addition, I recommend reviewing the Amazon access logs to investigate if this vulnerbility has been exploited in the past.\nAttachments\n20190312_AWS-SSRF-303-redirect-2.png - Screenshot showing the output of the AWS credentials obtained through the SSRF vulnerability.\n20190312_AWS-SSRF-303-redirect.png - Screenshot showing the output of the AWS index of metadata.\nImpact\nBy exploiting this vulnerability, an unauthorized attacker could gain access to the AWS environment of Omise. Note that the SSRF vulnerability could be abused in a variety of ways, not just limited to obtaining AWS credentials. For example, to enumerate and access services and web applications running on the internal network.\n\n",
    "severity": [
        7.1,
        null
    ],
    "bounty": 700,
    "weaknesses": [
        "Server-Side Request Forgery (SSRF)"
    ],
    "screenshots": {},
    "disclosed_date": 1561718940,
    "report_url": "https://hackerone.com/reports/508459",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Host a PHP script on an attacker-controlled server that issues a 303 redirect to the AWS metadata endpoint."
        ],
        [
            2,
            "Configure a webhook in the vulnerable application to point to the attacker's PHP script."
        ],
        [
            3,
            "Trigger the webhook (e.g., by making an API call) and observe the response containing AWS credentials."
        ]
    ],
    "vuln_description": "A Server-Side Request Forgery (SSRF) vulnerability in the webhooks implementation allows an attacker to make arbitrary HTTP/HTTPS requests from the application server, including accessing AWS metadata to obtain sensitive credentials.",
    "reason": "The attack involves understanding webhook behavior, HTTP redirects (specifically 303), and AWS metadata endpoints. While the components are straightforward, the interaction between them (using 303 redirects to bypass restrictions) is non-obvious.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}