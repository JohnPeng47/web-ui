{
  "reported_to": "Basecamp",
  "reported_by": "enigmaticjohn ",
  "title": "Possible DOM XSS on app.hey.com",
  "content": "\nSummary:\nHello Team,\nWhile testing it was observed that on https://app.hey.com/, on Search box there is a possibility of XSS. Although the payload is reflected in the DOM but the CSP blocks the execution of the script, the XSS can happen if the CSP is somehow bypassed. The Subject parameter is vulnerable.\nApart from XSS, the HTML injection attack is working pretty straight forward.\nSteps To Reproduce:\nGo to https://app.hey.com\nLogin to your account.\nClick on 'Write' Mail button.\nAdd the recipient as yourself.\nIn the Subject, add following payload\nCode 76 Bytes\n1TestPayload&lt;/a&gt;&lt;a href=\"javascript:alert(1)\"&gt;ClickHere&lt;/a&gt;\nSend the mail.\nGo to top left corner Search Box and type \"TestPayload\"\nYou will see the mail you sent to yourself, and <a> tag will be there \"ClickHere\".\nClick on it, you will see the CSP violation in the Console.\nBelow is the CSP of the page:\nCode 368 Bytes\n1script-src 'self' https://production.haystack-assets.com stats.hey.com *.braintreegateway.com *.braintree-api.com hcaptcha.com *.hcaptcha.com; \n2object-src 'none'; \n3base-uri 'none'; \n4form-action 'self'; \n5frame-ancestors 'none'; \n6report-uri https://sentry.io/api/1371426/security/?sentry_key=3a5ea420eecc45bd9e1d1c2424683f3a&sentry_environment=production&sentry_release=\nAs seen from the CSP, there might be a possibility of Host whitelists bypass.\nImpact\nIf attacker send such type of mail to a victim and if victim accidentally searches for the same mail then the Script will be executed leading to account takeover. This is possible only if CSP is bypassed.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - DOM"
  ],
  "screenshots": {},
  "disclosed_date": 1603842240,
  "report_url": "https://hackerone.com/reports/1010132",
  "vuln_category": "WEB_APP",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "steps": [
    [
      1,
      "Go to https://app.hey.com and log in to your account."
    ],
    [
      2,
      "Click on 'Write' Mail button, add yourself as recipient, and insert the payload `TestPayload&lt;/a&gt;&lt;a href=\"javascript:alert(1)\"&gt;ClickHere&lt;/a&gt;` into the Subject field. Send the mail."
    ],
    [
      3,
      "In the top left corner Search Box, type \"TestPayload\" to find the sent mail. The `<a>` tag \"ClickHere\" will be rendered."
    ],
    [
      4,
      "Click on \"ClickHere\" to observe the CSP violation in the Console."
    ]
  ],
  "vuln_description": "The vulnerability is a DOM-based XSS in the search functionality of app.hey.com, where a malicious payload in the email subject can be rendered as HTML in the search results. While CSP currently blocks script execution, a bypass could lead to arbitrary JavaScript execution.",
  "reason": "The attack involves multiple steps (crafting an email, triggering search rendering) and requires understanding of CSP bypass potential, but the core XSS vector is straightforward once the HTML injection is discovered.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability involves injecting a simple payload into the Subject parameter during normal email composition (regular navigation). The payload is reflected in the DOM via the search feature (same channel detection). The payload uses basic HTML tag manipulation without advanced encoding or filter bypasses, aligning with 'simple payload' criteria. While CSP blocks execution, the injection itself is detectable through regular user interaction flow.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The XSS vulnerability involves DOM manipulation and CSP bypass, which is not directly related to authentication or authorization boundaries. The methodology described focuses on testing AuthN/AuthZ by swapping user sessions and resource IDs, not on DOM-based vulnerabilities or CSP bypasses.",
    "is_detectable": false
  }
}