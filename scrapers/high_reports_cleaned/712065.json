{
    "reported_to": "Node.js third-party modules",
    "reported_by": "posix ",
    "title": "Prototype pollution attack (lodash)",
    "content": "\nI would like to report a prototype pollution vulnerability in lodash.\nIt allows an attacker to inject properties on Object.prototype\nModule\nmodule name: lodash\nversion: 4.17.15\nnpm page: https://www.npmjs.com/package/lodash\nModule Description\nThe Lodash library exported as Node.js modules.\nModule Stats\n25,228,177 downloads in the last week\nVulnerability\nVulnerability Description\nThis is a similar with this vulnerability: https://hackerone.com/reports/380873\nThe functions merge, mergeWith, and defaultsDeep can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\nSteps To Reproduce:\nCraft an object by \"zipObjectDeep\" function of lodash\nconst = require('lodash');\n.zipObjectDeep(['proto.z'],[123])\nconsole.log(z) // 123\nImpact\nVariable. Server crash or the server becoming unable to respond to all request is garanteed, but more significant impact like remote code execution can be achieved in some cases.\n\n",
    "severity": [
        7.4,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "Allocation of Resources Without Limits or Throttling"
    ],
    "screenshots": {},
    "disclosed_date": 1588040040,
    "report_url": "https://hackerone.com/reports/712065",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Require the lodash module in a Node.js environment"
        ],
        [
            2,
            "Use the zipObjectDeep function to craft an object with a prototype pollution payload: _.zipObjectDeep(['proto.z'], [123])"
        ]
    ],
    "vuln_description": "The vulnerability is a prototype pollution attack in lodash, specifically in the merge, mergeWith, and defaultsDeep functions, which can be tricked into modifying the Object prototype. This allows an attacker to inject properties that will be present on all objects, potentially leading to server crashes or remote code execution.",
    "reason": "The attack is straightforward, involving a single function call with a specific payload. It does not require complex interactions between components or manipulation of application states. The vulnerability is well-documented and similar to other known prototype pollution issues in lodash.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": "380873"
}