{
  "reported_to": "HackerOne",
  "reported_by": "dr_dragon ",
  "title": "Markdown parsing issue enables insertion of malicious tags and event handlers",
  "content": "\nWhen markdown is being presented as HTML, there seems to be a strange interaction between _ and @ that lets an attacker insert malicious tags.\nProof of Concept :\nCode 21 Bytes\n1</http:<marquee>hello\nis rendered converted to the following HTML:\nCode 112 Bytes\n1<p><a title=\"/http:<marquee\" href=\"/http:%3Cmarquee\" target=\"_blank\">/http:<marquee>hello</p>\n2</marquee></a></p>\nAs you can see, the output includes a </http:<marquee tag that I can add arbitrary attributes (including event handlers).\nImpact\nWhen markdown is being presented as HTML, there seems to be a strange interaction between _ and @ that lets an attacker insert malicious tags.\n\n",
  "severity": [
    7.1,
    null
  ],
  "bounty": 5000,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1517261820,
  "report_url": "https://hackerone.com/reports/299728",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Enter the following markdown text into the vulnerable markdown parser: `1</http:<marquee>hello`"
    ],
    [
      2,
      "Observe the rendered HTML output which includes unexpected `<marquee>` tags and potential for arbitrary attribute injection"
    ]
  ],
  "vuln_description": "The vulnerability involves a markdown parsing issue where a specific combination of characters (`_` and `@`) allows an attacker to inject malicious HTML tags (like `<marquee>`) and event handlers. The parser incorrectly handles these characters, leading to HTML output that includes unintended and potentially dangerous elements.",
  "reason": "This vulnerability requires understanding of markdown parsing quirks and the specific interaction between certain characters that trigger the parser's unexpected behavior. While the attack vector is straightforward once known, discovering the exact character combination that triggers the parser's flaw is non-obvious and requires either systematic testing or deep understanding of the parser's implementation.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability involves injecting a simple payload (HTML tag with malicious attributes) into a Markdown parser. The methodology detects injectable parameters during regular navigation and tests them with basic payloads. Since the payload '1</http:<marquee>hello' requires no custom encoding/filter bypass and the rendered HTML output directly reflects the injection (same-channel detection), it fits the 'simple payload' criteria. The interaction between _ and @ might be context-specific, but the core exploit (tag insertion) is detectable via response analysis.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves markdown parsing that allows insertion of malicious HTML tags and event handlers, which is a different class of vulnerability (XSS/HTML injection) than the authN/authZ bypass or IDOR vulnerabilities the methodology is designed to detect. The methodology focuses on testing authorization boundaries between user sessions and resources, not parsing or rendering issues.",
    "is_detectable": false
  }
}