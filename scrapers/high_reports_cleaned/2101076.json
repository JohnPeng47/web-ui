{
    "reported_to": "HackerOne",
    "reported_by": "0xacb ",
    "title": "HackerOne SAML signup domain enforcement bypass results in unauthorized access to HackerOne PullRequest organization",
    "content": "\nSummary:\nSAML signup domain enforcement for new signups that belong to a SAML-enabled organization can be bypassed with trailing control characters. While the described issue affects all organizations with this feature enabled, it's possible to leverage it to access the PullRequest HackerOne organization, giving a real attacker access to HackerOne source code in Pull Requests.\nDescription:\nWhen signing up on hackerone.com, email domains enforced by HackerOne SSO are not allowed for regular registration. The request to /POST users returns a redirect to the SSO provider:\nCode 206 Bytes\n1POST /users HTTP/1.1\n2Host: hackerone.com\n3...\n4\n5user%5Bname%5D=[NAME]&user%5Busername%5D=[USERNAME]&user%5Bemail%5D=email%40example.com&user%5Bpassword%5D=[PASSWORD]&user%5Bpassword_confirmation%5D=[PASSWORD]\nCode 65 Bytes\n1{\"redirect_path\":\"/users/saml/sign_in?email=email%40example.com\"}\nHowever, adding a %0d%0a in the end of the email param will make the request go through:\nCode 212 Bytes\n1POST /users HTTP/1.1\n2Host: hackerone.com\n3...\n4\n5user%5Bname%5D=[NAME]&user%5Busername%5D=[USERNAME]&user%5Bemail%5D=email%40example.com%0d%0a&user%5Bpassword%5D=[PASSWORD]&user%5Bpassword_confirmation%5D=[PASSWORD]\nCode 46 Bytes\n1{\"redirect_path\":\"/users/sign_in\",\"errors\":{}}\nThen, logging in with the actual email email@example.com will work, but email verification is then enforced. Accessing the account will work if the email owner clicks on the HackerOne standard verification email sometime in the future.\nSince hackerone.com is a domain part of a SAML-enabled organization itself, if an attacker creates multiple accounts that will send legitimate verification emails to @hackerone.com users and one clicks it, accessing PullRequest via Sign in with HackerOne on https://app.pullrequest.com/login, will then allow source code access.\nThe following steps were followed along with @jobert to create a j@hackerone.com account that will then allow access to PullRequest:\n<image_0>\nSteps To Reproduce\nGo to https://hackerone.com\nSignup as the attacker with a @hackerone.com email you control, e.g. x@hackerone.com or x+test@hackerone.com, notice that this will redirect you to the SSO login\nTry to signup again and intercept the request to POST /users and add the %0d%0a in the end of the email parameter\nAs the victim, click the confirmation email in a separate session\nAs the attacker on the original session, log in with the password you chose for the account\nGo to https://app.pullrequest.com/login and click Sign in with HackerOne\nYou'll have access to all pull requests of HackerOne infrastructure codebase, including source code access\nImpact\nAn attacker can bypass the signup SAML enforcement for any organization on HackerOne, including HackerOne organization itself which leads to source code access. Verifying the email is the only interaction step, but an actual attack could be feasible.\nOn the other hand, when SAML accounts are provisioned for any organization, the previous sessions are revoked, but not API keys. So an attacker who can pre-stage an account on HackerOne and generate API keys will keep backdoor access to the account until the API keys are rotated explicitly by the victim, which could mean forever for specific accounts that will never rotate the API keys.\nSuggested mitigations\nCorrectly strip and normalize the email address that is being processed in the signup endpoint to check if SAML is enforced\nDon't give access to anyone with an @hackerone.com email address to PullRequest without manual approval or account flags\nNotes:\nNo source code was stored locally while performing this testing\nThe accounts created while testing were j@hackerone.com and 0xacb@hackerone.com\nThe 0xacb@hackerone.com was created around 18 months ago - I didn't realize any impact until now after showing this behavior to @jobert during h1-702-2023\n\n",
    "severity": [
        8.2,
        null
    ],
    "bounty": 10000,
    "weaknesses": [
        "Improper Null Termination"
    ],
    "screenshots": {
        "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/6dsqvvv1lcpz2cu3zua1ejc7omjw?response-content-disposition=attachment%3B%20filename%3D%22Screenshot_2023-08-08_at_04.37.56.png%22%3B%20filename%2A%3DUTF-8%27%27Screenshot_2023-08-08_at_04.37.56.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWDNVDTOV%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T215250Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIFfYz76VgKIVelpAyZYrTFyd%2Bv888ECgb3hj5JkFANhaAiBakh4q7w5DF%2BQv%2FfR5eWubo4B2u%2Bo1QPF29kQLxJJCtSq7BQj0%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAMaDDAxMzYxOTI3NDg0OSIMaTuljdCxi50w8QUmKo8FD%2BiOVbeXUa7mNlCRPUySpi4kddXYtD2seD5WI2%2F2DmARIyxhjceaM8TKf%2BSYoZzhII3Lo%2BxB9bhtM5mq5GHf8dhuKa6wT1fnf6QzZEKaUgSCbLM07nMLMlW8kqutXY0X59awJLzZ1yQMPBhBi80DLAkNvswgcBRW4v5P7iqkX0ggbzpmcRST%2FVm29J8Y5JKSc3LejY6AEIsv4KP6HB8aQXd%2BfsBH5R%2Bv6nok8pt6DJSaPkv5WA74F1I2%2FsmQsyL3exdqZLhvUP%2B6eTtLSHhdrEDhOIY34aESXhoik3RW%2B8g32NTyeA3P2G9e%2F4F7a3Rx6v%2BE7XMojKylsb5WIGfTy8QvhnCQCH9ukOo6rO5xOtdoQw%2BU4WqZuOTJU74EkFLV6%2FyUVWSq4FVDYEYqrbwizaX9y%2FV2Cy9LgrEtMK6sn8DZ3ViZlKyuxY19GNuJ5sW0c0M4RHngn3EmFJO0aNsL0r%2BbolwLdLRfuYtJe5DmZwCoKEbDaNAUonhneBWF55jLQZHoGAoWZ6qMF%2BevUTo0Jql5kULJryvcc%2FFpS8lTO%2BOZ3fGiS1eQAI2Fz0703T3mmda4haYMEOXNijTbkWhBg5v9JYyT2oqNlXBK7WUSUCkENcoqMjC4Z4VbEGjG4jS2qi%2BTYrhX4S3Sb1T987q8w6MeoXfX6tGmDYwiyj5QpWbUDz7cYSR0EBMdQlqeDG94vE59xzsfUrmstdXm%2FFxukqgG%2B7WWbJ1DxPiM3ia6sOr977IrFajGqovgtqRLgyGpz%2F9TqWE3RwWypLQ084%2FW16SLKEEufJUuPDTkr6LyX%2FDeWbUHVMs85EWTJG9ustt2iOq1%2F11LdHrP2SbFR46XOj69Mtw5xz%2F6iYaqUFV4ejD8yoa%2FBjqyAYwDDYybi7D4pT0wCry5lOVh3Zq%2B8g6G5jdIa7jf8%2FaU312%2BiIcARtKrUoF2Sn0ak6xLhjw%2BJVOcFyXg%2FOHRvGjaHhYmekMQ96U1XkJfdyuitawsi7z%2FEymOHQV%2BY9%2Bfo8XothwNtx6eE%2FG6W1iLa%2BedAtMC1tXYp3IvbXoZrn4jPRRJ5G0BroF0e3VIz4sm1tGxNoieH9VOPyqjIvF8mLhji1Uw2M%2F8ryzZmpR%2Fx4z3q1Q%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=8cd2f89136e6443921f4af3b1b95a0202f9301ed1e488e41e65bf37582f06dc4"
    },
    "disclosed_date": 1707031140,
    "report_url": "https://hackerone.com/reports/2101076",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "HIGH",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Go to https://hackerone.com and attempt to sign up with a @hackerone.com email (e.g., x@hackerone.com). Observe the redirect to SSO login."
        ],
        [
            2,
            "Intercept the POST /users request during signup and add %0d%0a at the end of the email parameter to bypass the SAML enforcement."
        ],
        [
            3,
            "Have the victim click the confirmation email in a separate session."
        ],
        [
            4,
            "Log in as the attacker with the created account and access https://app.pullrequest.com/login via 'Sign in with HackerOne' to gain unauthorized access to source code."
        ]
    ],
    "vuln_description": "A vulnerability in HackerOne's SAML signup domain enforcement allows bypassing the SSO requirement by appending trailing control characters (%0d%0a) to the email parameter during registration. This enables unauthorized account creation for SAML-protected domains (e.g., @hackerone.com), which can then be used to access restricted resources like the PullRequest organization's source code.",
    "reason": "The attack involves understanding SAML enforcement logic, intercepting/modifying HTTP requests, and exploiting email verification workflows. While the core bypass technique (control characters) is simple, recognizing its impact on SAML enforcement and linking it to PullRequest access requires deeper insight into HackerOne's authentication architecture.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}