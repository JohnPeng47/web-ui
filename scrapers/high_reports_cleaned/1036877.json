{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "ahmedelmalky ",
  "title": "Blind stored XSS due to insecure contact form at https://\u2588\u2588\u2588\u2588\u2588.mil leads to leakage of session token and ",
  "content": "\nSummary:\nI have discovered a blind stored cross site scripting vulnerability due to an insecure Contact form available here https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588.mil/ This form does not properly sanitize user input allowing for the insertion and submission of dangerous characters such as angle brackets. I was able to submit a blind xss payload through the form which was triggered in backend /admin panel.\n##Steps To Reproduce:\n1-Browse to the page at https://\u2588\u2588\u2588\u2588\u2588\u2588.mil/and fill out the contact form submitting your blind XSS payload in First name , Last name, Company and description field.\n2-Submit the form and have and admin access the information.\n3-This will trigger XSS in the admin panel and a notification to the XSS hunter service with details of the event.\nSupporting Material/References:\n(the screenshot )[\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588]\nThe IP address that triggered the XSS payload is \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nXss hunter Report \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nImpact\nAn attacker is able to access critical information from the admin panel. The XSS reveals the administrator\u2019s IP address, backend application service, titles of mail chimp customer and internal subscription emails, admin session cookies.\nAn attacker can exploit the above cookies to access the admin panel.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1611622380,
  "report_url": "https://hackerone.com/reports/1036877",
  "vuln_category": "WEB_APP",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "steps": [
    [
      1,
      "Browse to the page at https://\u2588\u2588\u2588\u2588\u2588.mil/ and fill out the contact form, submitting a blind XSS payload in the First Name, Last Name, Company, and Description fields."
    ],
    [
      2,
      "Submit the form and wait for an admin to access the information, triggering the XSS in the admin panel and notifying the XSS hunter service."
    ]
  ],
  "vuln_description": "A blind stored cross-site scripting (XSS) vulnerability exists in the contact form at https://\u2588\u2588\u2588\u2588\u2588.mil/ due to insufficient input sanitization. An attacker can submit malicious scripts via the form fields, which are then executed in the admin panel, leading to session token leakage and potential admin panel access.",
  "reason": "The attack involves submitting a payload through a standard contact form, which is a straightforward process. The complexity is low because it does not require multiple components, subtle interactions, or complex application state manipulation. The vulnerability is a common XSS issue with well-known exploitation methods.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability involves a contact form accepting unsanitized input and triggering stored XSS in the admin panel. The methodology would detect this because:\n1. Contact form fields would be identified as injectable parameters during request/response logging\n2. Simple payloads (like angle brackets) would be tested without requiring filter bypasses\n3. The trigger occurs in the same application domain when admins review submissions as part of regular workflows\n4. Session cookie leakage would be detectable through same-channel responses in the admin interface",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The blind stored XSS vulnerability involves injecting a payload through a contact form, which is then triggered in the admin panel. This does not directly involve swapping user sessions or resource IDs, nor does it involve bypassing authentication or authorization boundaries by reusing sessions or actions from other users. The vulnerability is more about input sanitization and the ability to execute arbitrary JavaScript in the context of an admin's session, which is not covered by the described methodologies.",
    "is_detectable": false
  }
}