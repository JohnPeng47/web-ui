{
    "reported_to": "Automattic",
    "reported_by": "atc_h1h1 ",
    "title": "GET /api/v2/url_info endpoint is vulnerable to Blind SSRF",
    "content": "\nSummary:\nGET /api/v2/url_info endpoint is vulnerable to Blind SSRF. I am able to hit both Internal and External services via url parameter by replacing with internal and external url.\nPlatform(s) Affected:\nhttps://www.tumblr.com/\nSteps To Reproduce:\nLogin to https://www.tumblr.com/\nFollow any blog and intercept request via Proxy\nRequest :\nGET /api/v2/url_info?url={{}}&fields%5Bblogs%5D=avatar%2Cname%2Ctitle%2Curl%2Cdescription_npf%2Ctheme%2Cuuid%2Ccan_be_followed%2C%3Ffollowed%2C%3Fis_member%2Cshare_likes%2Cshare_following%2Ccan_subscribe%2Ccan_message%2Csubscribed%2Cask%2C%3Fcan_submit%2C%3Fis_blocked_from_primary%2C%3Fadvertiser_name%2C%3Ftop_tags%2C%3Fprimary HTTP/1.1\nHost: www.tumblr.com\nResponse:\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nNow replace url parameter to your controller server url and send it.\nYou will get request to your server.\nI could get verify it via IP Address: 74.114.154.11\nNetRange: 74.114.152.0 - 74.114.155.255\nCIDR: 74.114.152.0/22\nNetName: AUTOMATTIC\nNetHandle: NET-74-114-152-0-1\nParent: NET74 (NET-74-0-0-0-0)\nNetType: Direct Assignment\nOriginAS: AS2635\nOrganization: Automattoque (AU-187)\nRegDate: 2017-04-20\nUpdated: 2017-04-21\nRef: https://rdap.arin.net/registry/ip/74.114.152.0\nOrgName: Automattoque\nOrgId: AU-187\nAddress: P.O. Box 997\nCity: Halifax\nStateProv: NS\nPostalCode: B3J 2X2\nCountry: CA\nRegDate: 2015-11-25\nUpdated: 2017-04-21\nRef: https://rdap.arin.net/registry/entity/AU-187\nNow replace it with localhost url -> http://127.0.0.1:9090 and see response will be 404 but based on response time, port status can be identified.\nLimited Internal and External SSRF is performed. Attacker can target internal services by sending requests in bulk via mentioned endpoint.\nAttacker can get ports status by fuzzing or intruder attacker based on response time.\nAttacker would be able to target internal services and try to exhaust/target internal infrastructure.\nRemediation Strategies :\nOnly white listed URLs should be allowed for this endpoint. As user can only follow tumblr blogs, there would be some sort of filter mechanism to whitelist tumblr blogs. Any other URLs should be blocked.\nNot only for this API endpoint, any localhost URLs provided by user should be blocked.\nAny Out-of-band request from tumblr should be sent via CLIENT only. Here in this case, server is requesting user controller URL input and requesting resource which is exposing internal IP details.\nImpact\nAttacker can get ports status by fuzzing or intruder attacker based on response time.\nAttacker would be able to target internal services and try to exhaust/target internal infrastructure.\n\n",
    "severity": [
        8.4,
        null
    ],
    "bounty": null,
    "weaknesses": [
        "Server-Side Request Forgery (SSRF)"
    ],
    "screenshots": {},
    "disclosed_date": 1608055380,
    "report_url": "https://hackerone.com/reports/1057531",
    "vuln_category": "API",
    "is_multi_component": false,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "steps": [
        [
            1,
            "Login to https://www.tumblr.com/"
        ],
        [
            2,
            "Intercept a request to GET /api/v2/url_info endpoint using a proxy tool"
        ],
        [
            3,
            "Replace the 'url' parameter in the request with an internal or external URL (e.g., http://127.0.0.1:9090 or a controlled server URL)"
        ],
        [
            4,
            "Observe the response or check for requests received on the controlled server"
        ]
    ],
    "vuln_description": "The GET /api/v2/url_info endpoint is vulnerable to Blind Server-Side Request Forgery (SSRF), allowing an attacker to make requests to internal and external services by manipulating the 'url' parameter. This can lead to port scanning, internal service targeting, and potential infrastructure exhaustion.",
    "reason": "The vulnerability involves straightforward manipulation of a URL parameter in an API request. The attack does not require complex interactions or state manipulations, and the exploitation steps are relatively simple and common for SSRF vulnerabilities.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}