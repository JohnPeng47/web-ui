{
    "reported_to": "8x8 Bounty",
    "reported_by": "sandrogauci ",
    "title": "Open TURN relay abuse is possible due to lack of peer access control (Critical)",
    "content": "\nNOTE: This is not an SSRF vulnerability but an open TURN relay vulnerability. Typically, this security vulnerability has at least the same impact as an SSRF. However it is considered more useful from an attacker's point of view since attacks are not restricted to HTTP.\nAffects:\n\u2588\u2588\u2588\u2588\u2588:443\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:443\n\u2588\u2588\u2588\u2588\u2588:443\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:443\nDescription\nThe affected TURN server did not put any restrictions on peer which allows remote attackers to bypass firewall rules and reach internal services on the server itself as well as the AWS internal network. In the case of \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:443, both TCP and UDP peers could be specified, while \u2588\u2588\u2588\u2588\u2588\u2588\u2588:443 appeared to restrict TCP and only allow UDP.\nSteps To Reproduce:\nRetrieved temporary TURN credentials from XMPP by:\nmaking use of Chrome's devtools\nopen the network tab, filter just WS connections\nin the xmpp-websocket messages, set a filter for type='turn'\nobserve the TURN hostname and credentials\nmaking use of Chrome's devtools\nopen the network tab, filter just WS connections\nin the xmpp-websocket messages, set a filter for type='turn'\nobserve the TURN hostname and credentials\nMade use of an internal tool called stunner as follows: stunner recon tls://\u2588\u2588\u2588\u2588\u2588\u2588\u2588:443 -u \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nMade use of stunner's port scanner and socks proxy to reach the telnet server, AWS meta-data service and so on\nNote that we restricted our tests to just the following to avoid causing denial of service to the system:\nRead access to AWS meta-data service\nOnly running help and pc commands on coturn telnet server (other commands may be destructive)\nThe following is an excerpt from the connection to the coturn telnet server:\nCode 1.50 KiB\n1proxychains -f config telnet 127.0.0.1 5766\n2[proxychains] config file found: config\n3[proxychains] preloading /usr/lib64/proxychains-ng/libproxychains4.so\n4[proxychains] DLL init: proxychains-ng 4.13\n5Trying 127.0.0.1...\n6[proxychains] Dynamic chain  ...  127.0.0.1:9999  ...  127.0.0.1:5766  ...  OK\n7Connected to 127.0.0.1.\n8Escape character is '^]'.\n9\n10> pc\n11\n12  verbose: ON\n13  daemon process: ON\n14  stale-nonce: ON (*)\n15  stun-only: OFF (*)\n16  no-stun: OFF (*)\n17  secure-stun: OFF (*)\n18  do-not-use-config-file: OFF\n19  RFC5780 support: ON\n20  net engine version: 3\n21  net engine: UDP thread per CPU core\n22  enforce fingerprints: OFF\n23  mobility: OFF (*)\n24  udp-self-balance: OFF\n25  pidfile: /var/run/turnserver.pid\n26  process user ID: 0\n27  process group ID: 0\n28  process dir: /\n29\n30  cipher-list: DEFAULT\n31  ec-curve-name: empty\n32  DH-key-length: 1066\n33  Certificate Authority file: empty\n34  Certificate file: /\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588.crt\n35  Private Key file: /\u2588\u2588\u2588.key\n36  Listener addr: 127.0.0.1\n37  Listener addr: \u2588\u2588\u2588\u2588\u2588\u2588\n38  Listener addr: ::1\n39  Listener addr: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n40  no-udp: OFF\n41  no-tcp: OFF\n42  no-dtls: OFF\n43  no-tls: OFF\n44  TLSv1.0: ON\n45    TLSv1.1: ON\n46  TLSv1.2: ON\n47  listener-port: 443\n48  tls-listener-port: 5349\n49  alt-listener-port: 0\n50  alt-tls-listener-port: 0\n51\n52\n53  Relay addr: \u2588\u2588\u2588\u2588\u2588\n54  Relay addr: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n55  server-relay: OFF\n56  no-udp-relay: OFF (*)\n57  no-tcp-relay: OFF (*)\n58  min-port: 49152\n59  max-port: 65535\n60  no-multicast-peers: OFF (*)\n61  no-loopback-peers: OFF (*)\n62\n63  DB type: SQLite\n64  DB: /var/lib/turn/turndb\n65\n66  Default realm: \u2588\u2588\u2588\u2588\u2588\n67  CLI session realm: \u2588\u2588\u2588\u2588\u2588\n68...\n69\n70> q\nSupporting Material/References:\nSimilar vulnerability: https://www.rtcsec.com/2020/04/01-slack-webrtc-turn-compromise\nImpact\nAbuse of this vulnerability allows attackers to:\ncontrol Coturn by connecting to the telnet server on port 5766 which in turn, allows for writing of files on disk (e.g. using psd command), display and editing of the coturn configuration, stopping the server\nconnecting to the AWS meta-data service and retrieving IAM credentials for user HipChatVideo-Coturn, viewing user-data configuration etc\nscanning 127.0.0.1 and internal network on \u2588\u2588\u2588\u2588\u2588\u2588 and connecting to internal services\nNote that in the case of \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588:443, both TCP and UDP peers can be specified, while \u2588\u2588\u2588:443 appeared to be restricted to just UDP which somewhat limits the security impact of this vulnerability.\nWe think that it is likely that abuse of the coturn telnet server could lead to remote code execution on the server and further penetration inside 8x8's infrastructure.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": 700,
    "weaknesses": [
        "Server-Side Request Forgery (SSRF)"
    ],
    "screenshots": {},
    "disclosed_date": 1591666560,
    "report_url": "https://hackerone.com/reports/843256",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "API",
    "steps": [
        [
            1,
            "Retrieve temporary TURN credentials from XMPP using Chrome's devtools by filtering WS connections and observing TURN hostname and credentials"
        ],
        [
            2,
            "Use an internal tool (stunner) to recon the TURN server and establish connections to internal services like AWS meta-data service and coturn telnet server"
        ]
    ],
    "vuln_description": "The vulnerability involves an open TURN relay that lacks proper peer access control, allowing attackers to bypass firewall rules and access internal services. This includes the coturn telnet server for potential control and the AWS meta-data service for sensitive information retrieval.",
    "reason": "The attack requires knowledge of WebRTC/TURN protocols, understanding how to extract credentials from XMPP, and using specialized tools to exploit the open relay. While the steps are somewhat straightforward for someone familiar with these technologies, the need for specific tools and protocol knowledge adds complexity.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}