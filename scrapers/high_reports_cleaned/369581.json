{
  "reported_to": "RATELIMITED",
  "reported_by": "emitrani ",
  "title": "HTTP PUT method enabled",
  "content": "\nHi security team,\nSummary: It is possible to upload files to the server using the PUT method\nSteps To Reproduce:\nI used the following request:\nCode 98 Bytes\n1PUT /emitrani.txt HTTP/1.1\n2Host: ratelimited.me\n3Content-Length: 10\n4Connection: close\n5\n6emitrani POC\nNow a file exists at https://ratelimited.me/emitrani.txt\nwith contents of the put request.\nImpact\nAnyone can upload files to the server.\nRegards,\nEray\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1544561700,
  "report_url": "https://hackerone.com/reports/369581",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Send an HTTP PUT request to the target server with a file path and content in the request body."
    ],
    [
      2,
      "Verify that the file has been uploaded by accessing the URL where the file was placed."
    ]
  ],
  "vuln_description": "The vulnerability allows any user to upload files to the server using the HTTP PUT method, which could lead to unauthorized file storage and potential server compromise.",
  "reason": "The attack is straightforward and does not involve multiple components, complex interactions, or novel logic. It simply requires sending a standard HTTP PUT request, which is a basic web operation.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": false,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The report involves an HTTP PUT method being enabled, which is a server configuration issue rather than an authentication or authorization boundary being crossed. The methodology described focuses on testing authorization boundaries by swapping user sessions and resource IDs, which does not apply to this case.",
    "is_detectable": false
  }
}