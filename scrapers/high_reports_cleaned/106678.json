{
  "reported_to": "Informatica",
  "reported_by": "robd4k ",
  "title": "[now.informatica.com] Reflective XSS",
  "content": "\nXSS vulnerability lies on http://now.informatica.com/launch-next-bigdata-registration-inxpo.html?Source=homepage\nPOC\nSign up for big data management Virtual launch event\non parameter company_name inject '\"><img src=x onerror=alert(1)>\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1481296200,
  "report_url": "https://hackerone.com/reports/106678",
  "vuln_category": "WEB_APP",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "steps": [
    [
      1,
      "Navigate to http://now.informatica.com/launch-next-bigdata-registration-inxpo.html?Source=homepage"
    ],
    [
      2,
      "In the 'company_name' parameter, inject the payload: '\"><img src=x onerror=alert(1)>'"
    ]
  ],
  "vuln_description": "This is a Reflective Cross-Site Scripting (XSS) vulnerability found on the Informatica website. The vulnerability allows an attacker to inject arbitrary JavaScript code via the 'company_name' parameter, which is then executed in the context of the victim's browser when the page is loaded.",
  "reason": "The vulnerability is straightforward to discover as it involves a simple injection into a URL parameter without any need for complex interactions or state manipulation. The payload is a standard XSS test string, and the parameter is directly reflected in the response.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The XSS vulnerability reported involves injecting malicious script into a form parameter (company_name) on a specific webpage. This is a client-side vulnerability and does not involve authentication or authorization checks. The proposed methodologies focus on testing authorization boundaries by swapping user sessions or resource IDs, which is not applicable here since the vulnerability does not depend on user privileges or resource access controls.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The vulnerability involves a reflected XSS in the 'company_name' parameter which accepts unsanitized input and directly renders it in the response. The methodology's 'simple payload' approach would detect this since: (1) the parameter would be identified during injectable parameter extraction, (2) the basic XSS payload '><img src=x onerror=alert(1)> requires no filter bypass, (3) payload execution is immediately visible in the HTTP response (same channel), and (4) no stored/navigation-dependent behavior is required for verification.",
    "is_simple_injection": true
  }
}