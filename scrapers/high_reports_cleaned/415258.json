{
    "reported_to": "Brave Software",
    "reported_by": "metnew ",
    "title": "RCE: DnDing shortcut files to chrome://brave allows loading HTML files in Muon's context",
    "content": "\nSummary:\n#395737 has shown that Brave supports chrome://brave/<local_file> URLs.\nThe Brave team introduced a patch which blocks navigation to chrome://brave and removed chrome.remote.require to prevent command execution on the machine.\nNavigation to chrome://brave via shortcut files\nFrom my understanding:\nBrave allows DnDing files\nDnD of shortcut files is handled on Chromium-level (shortcut files : e.g., .webloc on macOS or .desktop on Linux)\nDnDing a shortcut => navigation to URL the file points to.\nThis approach allows navigating to chrome://brave/ origin.\nAttack requirements\nThe victim has to dnd a shortcut file to a tab\nAttacker needs MITM OR local reflected XSS OR an attacker-supplied HTML file which absolute path is known.\nMITM is the easiest way so far.\nLocal files reading\nYeah, reading local files from chrome://brave is possible.\nThe same PoC as in #390362, but the origin is chrome://brave:\nCode 298 Bytes\n1<head>\n2    <!-- Local files reading -->\n3    <script>\n4        function show() {\n5            var file = link.import.querySelector('body')\n6            alert(file.innerHTML)\n7        }\n8    </script>\n9    <link id=\"link\" onload=\"show()\" rel=\"import\" as=\"document\" href=\"chrome://brave/etc/passwd\">\n10</head>\nipcRender and ipcMain\nHTML file loaded in chrome://brave/ context has access to private APIs, like ipcRenderer and ipcMain:\nCode 86 Bytes\n1let ipcMain = chrome.remote.getBuiltin('ipcMain')\n2let ipcRenderer = chrome.ipcRenderer\nSending arbitrary IPC commands -> full control over the browser.\nRCE through arbitrary IPC commands: #188086 (includes PoC)\nImpact: UXSS, URL spoofing, changing browser settings, etc.\nchrome.remote.getBuiltin(module)\nSending arbitrary IPC commands is a serious problem, but the impact isn't limited to it.\nchrome.remote.getBuiltin(module) returns electron[module].\nCode 169 Bytes\n1// Alias to remote.require('electron').xxx.\n2binding.getBuiltin = function (module) {\n3  return metaToValue(ipcRenderer.sendSync('ELECTRON_BROWSER_GET_BUILTIN', module))\n4}\nIt's possible to leverage this func to obtain some \"hidden\" modules like autoUpdater, Tray, protocol and other.\nRunning attacker's executables on machine (download .terminal via IPC + <lack-of-quarantine> + chrome.shell.openExternal)\nIPC allows doing many damaging things and possibly running shell commands too.\nBut there is an alternative way for an RCE:\nIPC downloads a .terminal file from the web\n#374106 - .terminal files could execute shell commands without -x permission\nchrome.remote.shell.openExternal opens downloaded .terminal file\nCommands from .terminal get executed\nNo PoC provided, since the impact is already apparent, but could make it if required\nPersistence\nI'm sure, it's clear for the Brave team that it allows an attacker to persist on the device via changing browser settings.\nHowever, I want to highlight that chrome.remote.getBuiltin(module) allows accessing protocol module, which allows:\nCode 184 Bytes\n1registerBufferProtocol: (...)\n2registerHttpProtocol: (...)\n3registerNavigatorHandler: (...)\n4registerServiceWorkerSchemes: \u0192 ()\n5registerStandardSchemes: (...)\n6registerStringProtocol: \u0192 ()\nMITM in Brave\nchrome://brave is always vulnerable to MITM even when HTTPSE is active\nfile:// is vulnerable to MITM, when HTTPSE is inactive\nNot sure whether HTTPSE is turned on by default.\nAs far as I know, HTTPS Everywhere isn't enabled by default.\nProducts affected:\nBrave: 0.24.0\nV8: 6.9.427.23\nrev: f657f15bf7e0e0c50a2b854c6b05edb59bfc556c\nMuon: 8.1.6\nOS Release: 17.7.0\nUpdate Channel: Release\nOS Architecture: x64\nOS Platform: macOS\nNode.js: 7.9.0\nBrave Sync: v1.4.2\nlibchromiumcontent: 69.0.3497.100\nSteps To Reproduce:\nPoC for shortcut navigation\nOpen any page in Brave\nDnD etc-passwd.webloc file to Brave\nBrave opens chrome://brave/etc/passwd showing /etc/passwd file in chrome://brave origin's context\nExploit (macOS)\n-1. Make sure to stop httpd on macOS\n0. Insert next line into your /etc/hosts: 127.0.0.1 maps.googleapis.com\nsudo node server.js - starts MITM server\nOpen any page in Brave\nDnD exploit.webloc file\nOpened page shows an alert with /etc/passwd contents + working <webview> tag + starts Calculator.app\nSupporting Material/References:\nScreencast attached.\nImpact\nA remote attacker with a MITM access (or specific conditions like reflected XSS on file:/// origin) could send arbitrary IPC commands(trigger RCE) when a user drag-n-drops\ncrafted shortcut file into Brave.\n\n",
    "severity": [
        8.3,
        null
    ],
    "bounty": 300,
    "weaknesses": [
        "None"
    ],
    "screenshots": {},
    "disclosed_date": 1540253520,
    "report_url": "https://hackerone.com/reports/415258",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "HIGH",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Open any page in Brave"
        ],
        [
            2,
            "Drag and drop a crafted shortcut file (e.g., .webloc on macOS or .desktop on Linux) into Brave"
        ],
        [
            3,
            "Brave navigates to chrome://brave/etc/passwd, loading the file in chrome://brave origin's context"
        ],
        [
            4,
            "Exploit the context to execute arbitrary IPC commands or read local files"
        ]
    ],
    "vuln_description": "This vulnerability allows a remote attacker to execute arbitrary code or read local files by tricking a user into dragging and dropping a crafted shortcut file into Brave. The attack leverages the browser's handling of shortcut files to navigate to chrome://brave URLs, bypassing security patches. Once in the chrome://brave context, the attacker can access private APIs like ipcRenderer and ipcMain, leading to remote code execution (RCE).",
    "reason": "The attack involves multiple components: understanding the browser's handling of shortcut files, the chrome://brave origin's context, and the IPC mechanism. It also requires knowledge of how to craft a shortcut file to trigger the navigation. The interaction between these components is subtle and non-obvious, making the vulnerability complex to discover.",
    "new_complexity": "HIGH",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": "390362"
}