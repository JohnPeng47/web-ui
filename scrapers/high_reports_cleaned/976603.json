{
  "reported_to": "Grammarly",
  "reported_by": "cache-money ",
  "title": "Ability to DOS any organization's SSO and open up the door to account takeovers",
  "content": "\nSummary:\nThere's an interesting issue I've spent quite a few days trying to escalate but can't figure out. The impact at this point is that I can DOS any SSO integration making it so nobody in that organization can login. I can also get users to inadvertently SSO into my attacker organization, and then take over their account from there. For existing accounts this would require a victim to click \"join\", however I think that's likely given the fact that they are SSOing for the first time expecting to join an organization.\nThe strange behavior and why I think it might be possible to escalate further, is that I can have you authenticate against one SSO instance, but have you get added to a completely separate one. So that means there is some sketchy logic which can potentially allow an attacker to authenticate against their own SSO instance, and get added to someone else's organization. I'm not sure if it's possible to get this with zero user interaction, but I will keep trying and update the report if I figure out a way.\nThe bug stems from the fact that you can create an entityId identical to that of another organization except with a space at the end. The application logic then prioritizes that new entityId to add the user to after authenticating against the correct one. So if you have myentity as the legitimate entity, and an attacker sets their entity to myentity[SPACE] (with a space at the end); users attempting to authenticate into the legitimate myentity will technically authenticate against it, but then the application attempts to log them into the attacker's organization. The result of this is a DOS since legitimate users can no longer access their organization. The interesting part of the bug is that if the user is deleted from their original organization (or a new user attempts to SSO), they will then be authenticating against their original organization, but get added into the attacker's organization. So it seems the SAML Response is checked against a trim(issuer), but when trying to place the user into an organization, the entity with the space is always prioritized.\nThe steps below will demonstrate this behavior:\nSteps To Reproduce:\nSetup SSO and confirm you can login.\nCreate a new Grammarly business account and use the same entityId (Identity Provider Issuer) you used in step 1, except add a space to the end of it. Use a different keypair for this organization as well.\nWait 2 minutes for the change to propagate, then try logging into the same account from step 1, and notice you now get an error.\nAt this point the victim organization is DOS'd. To confirm the strange behavior discussed above, you can delete that user from the victim organization and attempt to login again. Notice you will now end up getting provisioned to the attacker's organization, even though you signed the SAML Response with the victim organization's private key.\nOnce you are provisioned into the attacker's organization, the attacker can then change their entityId to something brand new, and login to the victim's account using the keypair they own. If this was a converted personal account, you can then access that user's personal documents.\nImpact\nAbility to effectively disable SSO for any organization.\nAbility to get users provisioned into an attacker's account, which they can then takeover.\nThanks,\n-- Tanner\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 10500,
  "weaknesses": [
    "Improper Authentication - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1618520400,
  "report_url": "https://hackerone.com/reports/976603",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Setup SSO and confirm you can login."
    ],
    [
      2,
      "Create a new Grammarly business account with the same entityId as the target organization, but add a space at the end. Use a different keypair."
    ],
    [
      3,
      "Wait 2 minutes for the change to propagate, then attempt to login to the target organization. Observe the error, confirming the DoS."
    ],
    [
      4,
      "Delete the user from the victim organization and attempt to login again. The user is now provisioned into the attacker's organization."
    ],
    [
      5,
      "The attacker can then change their entityId and use their keypair to login to the victim's account, potentially accessing personal documents."
    ]
  ],
  "vuln_description": "This vulnerability allows an attacker to DoS any organization's SSO by creating a duplicate entityId with a trailing space, which the system incorrectly prioritizes. Additionally, users authenticating against the legitimate SSO can be redirected to the attacker's organization, enabling account takeover under certain conditions.",
  "reason": "The attack involves understanding and manipulating SAML authentication flows, exploiting a subtle logic flaw in entityId comparison (trim vs. non-trim), and requires setting up a malicious SSO instance with specific configurations. The interaction between these components is non-obvious and requires deep knowledge of SSO implementations.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves manipulating SSO entity IDs and authentication flows, which are not covered by the standard IDOR or AuthN/AuthZ bypass methodologies. The issue requires specific knowledge of SSO/SAML behavior and cannot be detected by simply swapping user sessions or resource IDs in HTTP requests.",
    "is_detectable": false
  }
}