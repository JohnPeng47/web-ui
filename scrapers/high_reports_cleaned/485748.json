{
  "reported_to": "X (Formerly Twitter)",
  "reported_by": "giddsec ",
  "title": "Stored XSS on reports.",
  "content": "\nSummary:\nStored XSS can be submitted on reports, and anyone who will check the report the XSS will trigger.\nDescription:\nStored XSS, also known as persistent XSS, is the more damaging than non-persistent XSS. It occurs when a malicious script is injected directly into a vulnerable web application.\nSteps To Reproduce:\nGo to https://app.mopub.com/reports/custom/\nClick New network report.\nOn the name, enter payload: \"><img src=x onerror=alert(document.domain)>\nClick Run and save then XSS will trigger.\nDemonstration of the vulnerability:\nPoC: \u2588\u2588\u2588\u2588\nTested on Firefox and chrome.\nImpact\nThe attacker can steal data from whoever checks the report.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 700,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1554151140,
  "report_url": "https://hackerone.com/reports/485748",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Go to https://app.mopub.com/reports/custom/"
    ],
    [
      2,
      "Click New network report"
    ],
    [
      3,
      "On the name, enter payload: \"><img src=x onerror=alert(document.domain)>"
    ],
    [
      4,
      "Click Run and save then XSS will trigger"
    ]
  ],
  "vuln_description": "Stored XSS can be submitted on reports, and anyone who checks the report will trigger the XSS. This allows an attacker to steal data from whoever checks the report.",
  "reason": "The attack involves a straightforward injection of a common XSS payload into a form field. No complex interactions or state manipulations are required, and the payload is a well-known XSS vector.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability meets the methodology's criteria because: (1) The 'name' parameter in the report creation form would be detected as injectable during regular navigation analysis. (2) The payload used (\"<img src=x onerror=alert(document.domain)>) is a basic XSS payload without custom filter bypasses. (3) The payload execution occurs in the same application channel when viewing the saved report, which is part of regular navigation behavior. The stored XSS trigger requires no special navigation - any user checking reports would naturally encounter the payload execution.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The stored XSS vulnerability involves injecting malicious scripts into a web application, which is not directly related to authentication or authorization bypass. The described methodology focuses on testing AuthN/AuthZ boundaries by swapping user sessions or resource IDs, not on detecting script injection vulnerabilities.",
    "is_detectable": false
  }
}