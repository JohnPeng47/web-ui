{
    "reported_to": "Semmle",
    "reported_by": "testanull ",
    "title": "Worker container escape lead to arbitrary file reading in host machine",
    "content": "\nSummary:\nBecause lack of security, attacker will be able to remove original log file and replace it will a symlink to other file,\nAfter finishing job, host machine copy file from docker container.\nBecause the original log file has been removed, the host machine will copy the symlink file.\nBut the problem is it doesn't copy the linked file in container, it copys the linked file in the HOST MACHINE.\nSteps To Reproduce:\nThe attack is very simple, just remove the original build.log file and replace with a symlink file,\nI used this configuration to read the /etc/passwd:\nCode 125 Bytes\n1  cpp:\n2    after_prepare:\n3      - rm -rf /opt/out/snapshot/log/build.log && ln -s /etc/passwd /opt/out/snapshot/log/build.log\nPoC\nContent of /etc/passwd is attached below\nImpact\nGive attacker ability to explore the host machine, expose more sensitive informations from it.\n\n",
    "severity": [
        9.3,
        null
    ],
    "bounty": 2000,
    "weaknesses": [
        "Privilege Escalation"
    ],
    "screenshots": {},
    "disclosed_date": 1571243640,
    "report_url": "https://hackerone.com/reports/694181",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Remove the original build.log file in the container"
        ],
        [
            2,
            "Create a symlink from build.log to a target file on the host machine (e.g., /etc/passwd)"
        ]
    ],
    "vuln_description": "A container escape vulnerability allows an attacker to replace a log file with a symlink pointing to a file on the host machine. When the host copies the file from the container, it follows the symlink on the host instead of the container, leading to arbitrary file read access on the host.",
    "reason": "The attack involves understanding symlink behavior in container-host file interactions, but the steps are straightforward once this behavior is known. No complex state manipulation or novel logic is required.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "idor_detectable": false,
    "authnz_byppass_detectable": false,
    "is_simple_payload": false,
    "injection_metadata": {
        "is_simple_payload": false
    },
    "authnz_metadata": {
        "idor_detectable": false,
        "authnz_byppass_detectable": false
    }
}