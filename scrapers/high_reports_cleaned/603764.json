{
    "reported_to": "Upserve ",
    "reported_by": "gamer7112 ",
    "title": "DOM Based XSS via postMessage at https://inventory.upserve.com/login/",
    "content": "\nDescription\nDOM based XSS is possible at https://inventory.upserve.com/login/ due to insecure origin checking when receiving a postMessage.\nPOC\nVisit https://hq.upserve.com.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/upserve_xss.html\nClick link\nView alert on https://inventory.upserve.com\nVulnerable Code\nCode 439 Bytes\n1window.addEventListener(\"message\", function(e) {\n2  if (~e.origin.indexOf(\"https://hq.upserve.com\")) {\n3    if (e.data && typeof e.data == \"object\") {\n4      try {\n5        if (e.data[\"exec\"]) {\n6          eval(e.data[\"exec\"]);\n7        }\n8      } catch (err) {\n9        console.log(err);\n10      }\n11    } else {\n12      console.log(\"Non-object passed\");\n13    }\n14  } else {\n15    console.log(\"Incorrect origin: \" + e.origin.toString());\n16    return;\n17  }\n18});\nThe origin check simply determines if \"https://hq.upserve.com\" is anywhere in the origin so an origin like \"https://hq.upserve.com.mydomain.com\" will pass this check just fine.\nImpact\nDue to the page being a login page, login credentials could be logged and stolen when a victim goes to login.\n\n",
    "severity": [
        7.1,
        null
    ],
    "bounty": 2500,
    "weaknesses": [
        "Cross-site Scripting (XSS) - DOM"
    ],
    "screenshots": {},
    "disclosed_date": 1561485360,
    "report_url": "https://hackerone.com/reports/603764",
    "is_multi_component": false,
    "complexity": "LOW",
    "novelty": "LOW",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Visit https://hq.upserve.com.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/upserve_xss.html"
        ],
        [
            2,
            "Click the link to trigger the postMessage to https://inventory.upserve.com"
        ]
    ],
    "vuln_description": "DOM based XSS is possible at https://inventory.upserve.com/login/ due to insecure origin checking when receiving a postMessage. The origin check only verifies if 'https://hq.upserve.com' is present anywhere in the origin string, allowing malicious origins like 'https://hq.upserve.com.mydomain.com' to pass the check. This can lead to execution of arbitrary JavaScript in the context of the login page, potentially stealing credentials.",
    "reason": "The vulnerability involves understanding postMessage communication and origin validation. While the origin check flaw is subtle, the overall attack chain is straightforward once the insecure origin check is identified. The components (postMessage handler, origin check, eval) are common in web applications.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "injection_metadata": {
        "is_simple_payload": false
    },
    "authnz_metadata": {
        "reason": "The vulnerability involves insecure origin checking in the postMessage handler, which is a client-side issue and not directly related to authentication or authorization boundaries that would be detected by the proposed methodologies. The methodologies focus on server-side AuthN/AuthZ issues by swapping user sessions and resource IDs, whereas this is a DOM-based XSS issue.",
        "is_detectable": false
    }
}