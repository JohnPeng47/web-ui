{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "0_1vitthal ",
  "title": "SQL Injection on www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 on countID parameter",
  "content": "\nDescription:\nHello Team,\nI have came across a sql injection vulnerability on www.\u2588\u2588\u2588\u2588\u2588\u2588 on countID parameter. I was able to retrieve the banner which is\nMicrosoft SQL Server 2008 R2 (SP3) - 10.50.6220.0 (X64&\nMar 19 2015 12:32:14\nCopyright (c) Microsoft Corporation\nStandard Edition (64-bit) on Windows NT 6.3 <X64> (Build 9600: ) (Hypervisor)\nafter confirming the vulnerability i have stopped testing further.\nVulnerable URL:\nhttps://www.\u2588\u2588\u2588/public/saveCount.cfm?countID=4\nSteps to Reproduce:\npython sqlmap.py -u https://www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/public/saveCount.cfm?countID=4 --level=3 --risk=3\nPOC\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nImpact\nAttacker can take control over the database server.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1570574760,
  "report_url": "https://hackerone.com/reports/390879",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Identify the vulnerable URL: https://www.\u2588\u2588\u2588/public/saveCount.cfm?countID=4"
    ],
    [
      2,
      "Use sqlmap to test for SQL injection: python sqlmap.py -u https://www.\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/public/saveCount.cfm?countID=4 --level=3 --risk=3"
    ]
  ],
  "vuln_description": "The vulnerability is a SQL injection in the countID parameter of the URL https://www.\u2588\u2588\u2588/public/saveCount.cfm. This allows an attacker to execute arbitrary SQL queries on the database server, potentially gaining control over it. The server is running Microsoft SQL Server 2008 R2 (SP3).",
  "reason": "The vulnerability is straightforward to discover using automated tools like sqlmap. It does not involve multiple components, complex application states, or novel logic. The attack is a classic SQL injection, which is a well-known and commonly exploited vulnerability.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The SQL injection vulnerability on the `countID` parameter is detectable via the proposed methodology. The methodology involves testing parameters with simple payloads (e.g., SQLi probes like `' OR 1=1--` or error-based payloads) and observing responses in the same channel. Since the report confirms the vulnerability was found using `sqlmap` (which automates such payload testing), and the banner was directly retrieved via HTTP responses, this aligns with the methodology's 'simple payload' criteria. The payloads used to extract the banner (e.g., `@@VERSION`) are generic and do not require custom filter bypass. Detection occurs in the same HTTP response, satisfying the 'same channel' requirement.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves direct manipulation of the countID parameter in the URL, which is not related to authentication or authorization boundaries. The proposed methodologies focus on testing AuthN/AuthZ and IDOR vulnerabilities by manipulating user sessions and resource IDs, not SQL injection through parameter tampering.",
    "is_detectable": false
  }
}