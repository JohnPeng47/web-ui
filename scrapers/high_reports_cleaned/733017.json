{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "waymobetta ",
  "title": "CORS Misconfiguration Leads to Exposing User Data",
  "content": "\nVulnerable Asset: https://\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\nDiscovery:\nUpon accessing the site we discover two specific response headers which indicates that a cross-domain request for sensitive information might be possible\nAccess-Control-Allow-Origin: injectable\nAccess-Control-Allow-Credentials: true\nWe craft a POC below and exploit the misconfigurations present by exposing the users API key, email, first name, last name, etc.\n\u2588\u2588\u2588\nPOC:\nThis is hosted on http://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nCode 265 Bytes\n1<html>\n2<script>\n3  var xhttp = new XMLHttpRequest();\n4  <!-- the below endpoint lists API tokens previously generated by the user -->\n5  xhttp.open(\"GET\", \"https://\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588/api/token/list\", true);\n6  xhttp.withCredentials = true;\n7  xhttp.send(null);\n8</script>\n9</html>\nDemo:\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nRemediations:\nDo not allow the Access-Control-Allow-Origin to be arbitrarily set by the user; the domain should be whitelisted that is allowed access to CORS, or the wildcard operator * should be used instead, which will disallow the Allow-Credentials header\nImpact\nThis attack works similarly to a CSRF attack in that an attacker would need to have a victim visit the attacker's website in order to trigger the exploit. If the victim is logged in, then the result is full access to API keys which serve in lieu of username/password as shown in the demo. The attacker then can perform any action within the user's account that the API allows.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1589490900,
  "report_url": "https://hackerone.com/reports/733017",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Craft a malicious HTML page with JavaScript that makes a cross-origin request to the vulnerable endpoint."
    ],
    [
      2,
      "Host the malicious page on a web server and trick a victim into visiting it while they are logged into the vulnerable site."
    ]
  ],
  "vuln_description": "The vulnerability is a CORS misconfiguration that allows an attacker to make cross-origin requests to a sensitive endpoint, potentially exposing user data such as API keys, email, and other personal information. The misconfiguration involves setting 'Access-Control-Allow-Origin' to a user-controlled value and 'Access-Control-Allow-Credentials' to 'true', which enables the attacker to include credentials in the request.",
  "reason": "The vulnerability is relatively straightforward to discover and exploit. It involves a common misconfiguration (CORS) and does not require complex interactions or novel logic. The attacker only needs to craft a simple HTML page and host it, then trick the victim into visiting it.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": false,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reasoning": "The CORS misconfiguration vulnerability involves the server allowing arbitrary origins to access sensitive data with credentials. The outlined methodologies focus on testing authorization by swapping user sessions, actions, and resource IDs within the same application context. However, CORS misconfigurations are server-side header misconfigurations that permit cross-origin access, which is not directly related to IDOR or AuthZ bypass via session/resource manipulation. The detection methods described do not include analyzing CORS headers or cross-origin request behaviors, making this vulnerability outside the scope of the proposed methodologies.",
    "is_simple_authnz": false
  }
}