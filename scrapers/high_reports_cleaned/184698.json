{
  "reported_to": "Slack",
  "reported_by": "michiel ",
  "title": "Eavesdropping on private Slack calls",
  "content": "\nA vulnerability exists in Slack's call functionality that allows a team member to eavesdrop on private ongoing Slack calls by inviting themselves into the conversation without the permission from either participant. By doing so they can eavesdrop on co-workers' private conversations as well as taking part in these conversations. To make the attack less obvious, the attacker could re-use Slackbot's avatar and choose a username that is similar to Slackbot. Another scenario would be to pick the avatar of the person you want to impersonate and choose a username that is similar to theirs.\nSetup\nBefore trying to reproduce the vulnerability, make sure you have the following:\nSlack Calls should be enabled in your Slack instance.\nHave at least two accounts you control. One we will call the Main Account, the other one we will call the Eavesdropper Account.\nHave at least two accounts you do not control on the same Slack instance. They will be used to mock the situation of two co-workers having a private Slack call.\nFor easy reproduction, it is advised to initiate the call from a web browser rather than a native app.\nMake sure to have some type of intercepting proxy running that allows you to record HTTP requests and replay them easily.\nSteps to Reproduce\nObtaining the vulnerable request\nFirst off, we are going to obtain the exact request to the endpoint that contains the vulnerability (/api/screenhero.rooms.invite). This will be needed to later on modify and add Eavesdropper Account to the private call.\nSet up a call and invite someone to the call. Make sure to capture the request to /api/screenhero.rooms.invite and save it so you can replay it easily later. The request should look something like:\nCode 274 Bytes\n1POST /api/screenhero.rooms.invite?_x_id=91700980-1479951838.521 HTTP/1.1\n2Host: hackerone.slack.com\n3Origin: https://hackerone.slack.com\n4X-Slack-Version-Ts: 1479949022\n5[...]\n6\n7is_video_call=false&responder=U0254GYNR&room=R36L2K8P6&set_active=true&should_share=true&token=<snip>\nStaging the attack environment\nStart by setting up a 1:1 call between two users (both accounts you don't necessarily have control over). This is to mock a situation where two co-workers are on a private 1:1 Slack call.\nNote the Screenhero room ID of the call. You will need this later. In this scenario, I am going to assume the attacker is already in possession of the room ID. The room ID can be recognized by the ID after /call/ in https://hackerone.slack.com/call/R36L2K8P6 (an example).\nPulling off the attack\nTake the request you saved earlier, and now modify the request as follows:\nchange the value of the room parameter to the room ID you noted from the previous step\nchange the value of the responder to the user ID of Eavesdropper Account. The reason why this can't be your own user ID (Main Account) is that you're not allowed to invite self.\nAfter these changes, forward the request and wait for a call on Eavesdropper Account. When you accept this call, you will be placed into the private conversation the two victims were having.\nLet me know if there's anything else you need to validate this issue.\n\n",
  "severity": [
    7.3,
    null
  ],
  "bounty": 1000,
  "weaknesses": [
    "Improper Authentication - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1486606440,
  "report_url": "https://hackerone.com/reports/184698",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Set up a 1:1 call between two users to mock a private Slack call."
    ],
    [
      2,
      "Capture the request to `/api/screenhero.rooms.invite` and modify the `room` and `responder` parameters to include the eavesdropper's user ID."
    ],
    [
      3,
      "Forward the modified request to join the private call without permission."
    ]
  ],
  "vuln_description": "A vulnerability in Slack's call functionality allows a team member to eavesdrop on private calls by inviting themselves into the conversation without permission. The attacker can modify a request to join the call and potentially impersonate other users or Slackbot to avoid detection.",
  "reason": "The attack involves multiple components, including capturing and modifying HTTP requests, understanding Slack's call room IDs, and manipulating the call invitation process. However, the steps are relatively straightforward once the initial request is captured, and the logic is not overly complex or novel.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": true,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves an authenticated user session (Eavesdropper Account) performing an action (inviting themselves to a private call) on a resource (the call room ID) they should not have access to. This fits the IDOR vulnerability class where the methodology would detect it by swapping user sessions and resource IDs.",
    "is_detectable": true
  }
}