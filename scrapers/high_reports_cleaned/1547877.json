{
    "reported_to": "Aiven Ltd",
    "reported_by": "jarij ",
    "title": "[Kafka Connect] [JdbcSinkConnector][HttpSinkConnector] RCE by leveraging file upload via SQLite JDBC driver and SSRF to internal Jolokia",
    "content": "\nSummary:\nThe Aiven JDBC sink includes the SQLite JDBC Driver. This JDBC driver can be used to upload SQLite database files onto the server. The HTTP sink connector allows sending HTTP requests to localhost. There is unprotected Jolokia listening on localhost:6725. JMX exports the com.sun.management:type=DiagnosticCommand MBean, which contains the jvmtiAgentLoad operation. This operation can be used to execute the SQLite database as JVM Agent by embedding the JVM Agent JAR file inside the SQLite database as an BLOB field in a table.\nSteps To Reproduce:\nLogin into my VPS: ssh \u2588\u2588\u2588\u2588, password: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588@\nExecute nc -nlvp 4446\ncd to jdbc-sqlite-jolokia-rce and run python3 poc.py (if running locally, install kafka-python using pip first).\nReverse shell connection should now be established to my test instance\nImpact\nRCE on the Kafka Connect server\n\n",
    "severity": [
        9.0,
        10.0
    ],
    "bounty": 5000,
    "weaknesses": [
        "Unrestricted Upload of File with Dangerous Type"
    ],
    "screenshots": {},
    "disclosed_date": 1667906940,
    "report_url": "https://hackerone.com/reports/1547877",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "API",
    "steps": [
        [
            1,
            "Login into the VPS and set up a listener using nc -nlvp 4446"
        ],
        [
            2,
            "Navigate to the jdbc-sqlite-jolokia-rce directory and execute the Python script poc.py to trigger the exploit"
        ]
    ],
    "vuln_description": "The vulnerability involves exploiting the SQLite JDBC driver in the Aiven JDBC sink to upload malicious SQLite database files, combined with SSRF to interact with an unprotected Jolokia instance on localhost. This allows executing arbitrary code by loading a JVM Agent embedded in the SQLite database.",
    "reason": "This vulnerability requires deep knowledge of multiple components (SQLite JDBC driver, Jolokia, JVM Agents) and their interactions. The attacker must understand how to embed a JVM Agent in an SQLite database and leverage SSRF to interact with Jolokia, which is non-obvious and involves manipulating complex application states.",
    "new_complexity": "VERY_HIGH",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}