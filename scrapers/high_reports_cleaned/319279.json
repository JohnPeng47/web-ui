{
  "reported_to": "Khan Academy",
  "reported_by": "securitygab ",
  "title": "[critical] sql injection by GET method",
  "content": "\nHey there, after tampering a bit with the values, since I figured out your backend is not php (most likely django or nodejs), I found an SQL injection .\nYou can view my steps to reproduce, if you need additional screenshots, please let me know.\nRegards Gabriel Kimiaie\nImpact\nIf I dig deeper, I may be able to read datas from your database, hopefully I won't do it.\nThe hacker selected the SQL Injection weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:\nVerified\nYes\nWhat exploitation technique did you utilize?\nBoolean\nPlease describe the results of your verification attempt.\nAfter submitting a single quote, I got the 500 error. after few steps, I got rid of the 500 error by forging a valid sql query which is as follows:\nhttps://www.khanacademy.org/translations/videos/en'%20or'1'=='1_youtube_stats.csv\nit returns to me all csv since 1 is equal to one\nwhen changing the boolean condition:\nhttps://www.khanacademy.org/translations/videos/en'%20AND'1'=='0_youtube_stats.csv\n(and '1'=='0): only the english csvs are shown.\n\n",
  "severity": [
    8.0,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1520378160,
  "report_url": "https://hackerone.com/reports/319279",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Identify a URL endpoint that appears to handle dynamic content, such as https://www.khanacademy.org/translations/videos/en'%20or'1'=='1_youtube_stats.csv"
    ],
    [
      2,
      "Modify the URL by injecting SQL conditions (e.g., changing '1'=='1' to '1'=='0') to observe different responses from the server"
    ]
  ],
  "vuln_description": "The vulnerability is an SQL injection via the GET method, where the attacker can manipulate URL parameters to inject SQL queries. This allows the attacker to bypass intended query logic and potentially access unauthorized data from the database.",
  "reason": "The attack involves straightforward manipulation of URL parameters to inject SQL conditions, which is a common and well-documented technique. The complexity is low because it does not require understanding complex application states or novel logic, and the interaction between components is obvious.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability was discovered using basic SQL injection payloads (single quote and boolean conditions) that triggered observable behavior changes (500 errors and CSV output differences) in the same HTTP channel. These payloads are part of a 'simple' list (e.g., quote manipulation, boolean logic) and required no custom filter bypass. The parameter was detectable via standard request logging, and the impact was verifiable through regular navigation (response content changes).",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves manipulating input parameters to alter the behavior of SQL queries, which is a different class of vulnerability from the AuthN/AuthZ bypass or IDOR vulnerabilities described in the methodology. The methodology focuses on testing authorization boundaries by swapping user sessions and resource IDs, not on input validation or SQL query manipulation.",
    "is_detectable": false
  }
}