{
  "reported_to": "MTN Group",
  "reported_by": "0x0luke ",
  "title": "2x Remote file inclusion within your VMware Instances",
  "content": "\nSummary:\n2x Remote file inclusion within your VMware Instances\nHosts:\nnmc.vc.mtn.co.ug\nh28a.n1.ips.mtn.co.ug\nSteps To Reproduce:\nNavigate to the URLs given below, /etc/passwd will be displayed.\nhttps://nmc.vc.mtn.co.ug/eam/vib?id=/etc/passwd\nhttps://h28a.n1.ips.mtn.co.ug/eam/vib?id=/etc/passwd\nImpact\nAn attacker is able to view sensitive files on the server hosting this content and could potentially elevate this to a remote code execution.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Remote File Inclusion"
  ],
  "screenshots": {},
  "disclosed_date": 1629418560,
  "report_url": "https://hackerone.com/reports/1069105",
  "vuln_category": "WEB_APP",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "steps": [
    [
      1,
      "Navigate to the URL: https://nmc.vc.mtn.co.ug/eam/vib?id=/etc/passwd"
    ],
    [
      2,
      "Observe that the contents of /etc/passwd are displayed in the response"
    ]
  ],
  "vuln_description": "This is a remote file inclusion vulnerability that allows an attacker to view sensitive files on the server, such as /etc/passwd, by manipulating the 'id' parameter in the URL. This could potentially lead to further exploitation, such as remote code execution.",
  "reason": "The vulnerability is straightforward to discover as it involves a simple manipulation of a URL parameter to access sensitive files. There are no complex interactions or states involved, and the attack logic is commonly seen in other applications.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The vulnerability involves remote file inclusion (RFI) which is not directly related to authentication or authorization bypass (AuthN/AuthZ). The methodology described focuses on testing AuthN/AuthZ boundaries by swapping user sessions, actions, and resource IDs within the same application. RFI vulnerabilities typically involve improper input validation or insecure server configurations, which are outside the scope of the described AuthN/AuthZ testing methodology.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The vulnerability involves a parameter (`id`) that directly reflects user input into server responses. The methodology logs all requests/responses during regular navigation, identifies injectable parameters (like `id`), and tests them with simple payloads. Here, injecting `/etc/passwd` into the `id` parameter directly triggers the vulnerability, and the response (file contents) is visible in the same HTTP channel. This aligns with the 'simple payload' criteria, as no custom filter bypass was required, and the payload execution (file inclusion) is detectable within the same request-response cycle without requiring specialized navigation.",
    "is_simple_injection": true
  }
}