{
  "reported_to": "Shopify",
  "reported_by": "dr_dragon ",
  "title": "Reflected XSS on $Any$.myshopify.com/admin",
  "content": "\nDescription :\nHi,\nI have found a reflected cross site scripting vulnerability in <any>.myshopify.com/admin through return_url parameter .\nStep to reproduce :\n1-Go to https://<Any>.myshopify.com/admin/authenticate?return_url=javascript:alert(100)//\n2-Click on reload this page\n3-Xss alert message\nImpact\nXss attack in <Any>.myshopify.com/admin\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": 1500,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Reflected"
  ],
  "screenshots": {},
  "disclosed_date": 1542122160,
  "report_url": "https://hackerone.com/reports/422707",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Go to https://<Any>.myshopify.com/admin/authenticate?return_url=javascript:alert(100)//"
    ],
    [
      2,
      "Click on 'reload this page' to trigger the XSS alert"
    ]
  ],
  "vuln_description": "A reflected cross-site scripting (XSS) vulnerability exists in the 'return_url' parameter of <any>.myshopify.com/admin. By injecting a malicious JavaScript payload via the 'return_url' parameter, an attacker can execute arbitrary JavaScript code in the context of the admin interface when the victim reloads the page.",
  "reason": "The vulnerability is straightforward to discover as it involves a simple reflected XSS via a URL parameter, which is a common and well-documented vulnerability pattern. The attack does not require multiple components, complex state manipulation, or novel logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "authnz_metadata": {
    "reason": "The reflected XSS vulnerability involves manipulating the 'return_url' parameter to inject JavaScript code, which is a client-side issue. The proposed methodologies focus on server-side authentication and authorization issues (AuthN/AuthZ bypass and IDOR) by testing different user sessions and resource IDs. Since XSS is not within the scope of these methodologies, it would not be detected.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The vulnerability involves injecting a basic javascript: payload into the return_url parameter, which is a standard URL context injection. The methodology would detect this since: (1) return_url would be identified as an injectable parameter during request/response logging, (2) the payload uses a simple JavaScript URI without encoding or filter bypasses, and (3) the payload execution occurs in the same channel (admin interface) through normal reload navigation. The payload matches the 'simple payload' criteria as it requires no special encoding or context-specific bypasses.",
    "is_simple_injection": true
  }
}