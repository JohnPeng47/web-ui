{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "lubak ",
  "title": "Broken access control, can lead to legitimate user data loss",
  "content": "\nHi team,\nDuring testing the security of \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 I found another possible attack vector:\n(There are two reports preceding this one - https://hackerone.com/reports/1489470 and https://hackerone.com/reports/1489744)\nI will try to explain:\nWhen an user need access to that information system he fills a request form at:\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nor\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\nAfter submitting the form the server response contains a \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 which identifies this user request.\nThen the request is reviewed by an administrator, and he decides if user access will be granted or rejected.\nThe vulnerability I found is that unauthorized person can access the end point responsible for deleting user requests - \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 and by providing just the \u2588\u2588\u2588 parameter he can delete any request.\nReferences\nImpact\nAn attacker can delete legitimate user requests, disturbing the normal operation of the system and causing data loss.\nThe user request ids are sequential numbers - my requests were given ids - \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588, so the attacker can delete all requests in the system by accessing the \u2588\u2588\u2588\u2588 end point with each \u2588\u2588\u2588\u2588\u2588\u2588 from \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588.\nSystem Host(s)\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nAffected Product(s) and Version(s)\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nCVE Numbers\nSteps to Reproduce\nActivate Burp proxy, go to https://\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588, fill and submit the form (screenshot1)\nInspect server response in Burp and take a note of the returned \u2588\u2588\u2588\u2588\u2588 (screenshot2) which is number, referencing this user access request\n(optional) we can confirm our request is in the system by performing the attack described in the other report I made (https://hackerone.com/reports/1489470) - resulting in our request being exfiltrated from the database:\nexecute following command, and replace the \u2588\u2588\u2588\u2588\u2588 parameter with the one you noted on step 2 (screenshot)\ncurl https://\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 -X POST -data=\"url=%2F\u2588\u2588\u2588\u2588&\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588=\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\" -k\nDeleting the request - CAUTION - execute this step only by referencing \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 for requests, you made otherwise you will delete legitimate user request!(sceenshot4)\nthe command abusing the delete request endpoint is:\ncurl https://\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 -X POST -data=\"url=%2F\u2588\u2588\u2588\u2588\u2588\u2588\u2588&\u2588\u2588\u2588\u2588\u2588\u2588\u2588=\u2588\u2588\u2588\u2588\u2588\u2588\" -k\n(optional) to confirm request is deleted you can execute again Step 3, which now responds with empty body - the request is no longer present in the database.\nSuggested Mitigation/Remediation Actions\nThe \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 endpoint should perform check if the user is logged in and authorized to use it.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1649376180,
  "report_url": "https://hackerone.com/reports/1493007",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Activate Burp proxy, go to the request form URL, fill and submit the form."
    ],
    [
      2,
      "Inspect server response in Burp and note the returned request ID."
    ],
    [
      3,
      "Use the noted request ID to construct a curl command to delete the request."
    ],
    [
      4,
      "Execute the curl command to delete the request, confirming deletion by checking the system."
    ]
  ],
  "vuln_description": "The vulnerability allows an unauthorized person to delete any user request by accessing the delete endpoint with just the request ID parameter. This can lead to legitimate user data loss and disruption of normal system operations.",
  "reason": "The attack involves understanding the request flow and identifying the delete endpoint, but does not require complex interactions or novel logic. The main challenge is recognizing the sequential nature of request IDs and the lack of authorization checks.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "1489470",
  "idor_detectable": true,
  "authnz_byppass_detectable": false,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves an unauthorized person accessing an endpoint to delete user requests by manipulating the request ID. This fits the IDOR (Insecure Direct Object Reference) vulnerability class where the attacker can manipulate the resource_id (request ID) to perform actions they are not authorized to perform. The methodology described includes testing for such scenarios by swapping resource_ids and testing with different user sessions, which would cover this case.",
    "is_detectable": true
  }
}