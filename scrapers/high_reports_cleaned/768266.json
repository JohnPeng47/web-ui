{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "niteshsurana ",
  "title": "Public instance of Jenkins on https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/ with /script enabled",
  "content": "\nSummary:\nAn Amazon instance was found on https://\u2588\u2588\u2588\u2588\u2588/ running Jenkins. On analysing the SSL certificate, I reported here to the DoD.\nDescription:\nOn checking the SSL certificate, the details show:\nCode 100 Bytes\n1Issued to and Issued By records:\n2\n3CN: \u2588\u2588\u2588\u2588\u2588\n4Organization(O): \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n5Organizational Unit (OU): \u2588\u2588\u2588\nHere, this instance is already authenticated and this does not require a password to login. The major impact of this vulnerability is, an attacker can exploit and gain access to critical internals of the server as /script is enabled.\nThrough /script, an attacker can run remote commands on the server through the Java programming language.\nImpact\nUnauthenticated instances of Jenkins with /script enabled can lead to an attacker running remote command on the instance.\nStep-by-step Reproduction Instructions\nGo to https://\u2588\u2588\u2588/script/\n1.1 Check the SSL certificate for proof.\nIn the textbox that comes up, enter the following code:\nCode 21 Bytes\n1\"ls /\".execute().text\nThe Response is\nCode 92 Bytes\n1Result: bin\n2boot\n3dev\n4etc\n5home\n6lib\n7lib64\n8media\n9mnt\n10opt\n11proc\n12root\n13run\n14sbin\n15srv\n16sys\n17tmp\n18usr\n19var\nAfter verifying this issue, I looked up \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 and \u2588\u2588\u2588\u2588\u2588. That's how I confirmed that this instance was of critical importance.\nProduct, Version, and Configuration (If applicable)\nJenkins\nSuggested Mitigation/Remediation Actions:\nMitigation for this, as per my understanding would be to add a 2FA authentication if this instance is in use. If this instance is not in use, please shut down the instance.\nP.S: I've also attached a PoC video of the same for clarity and reference. I am reporting this issue to the US DOD as \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 would be more logical to be associated with the DOD. If this bug is not acknowledged here, please forward this report to the authority that handles the US \u2588\u2588\u2588\u2588\u2588\u2588\u2588.\nImpact\nOn a Jenkins instance with /script enabled, an attacker can remote commands on the server and this can later lead to critical information leakage, lateral movement and other catastrophic events as the instance can be manipulated by the skills of the attacker.\nSuch instances should be closed when not in use and authentication mechanisms should be properly enforced.\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Code Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1580497080,
  "report_url": "https://hackerone.com/reports/768266",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Go to https://\u2588\u2588\u2588/script/ and check the SSL certificate for proof."
    ],
    [
      2,
      "In the textbox that appears, enter the following code: \"ls /\".execute().text to list the root directory contents."
    ]
  ],
  "vuln_description": "An unauthenticated Jenkins instance with /script enabled allows attackers to execute arbitrary commands on the server, potentially leading to critical information leakage and server compromise.",
  "reason": "The vulnerability is straightforward to discover as it involves a single, well-known feature (/script) in Jenkins that is publicly accessible without authentication. The attack does not require complex interactions or state manipulation.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability described does not involve traditional parameter injection but rather exploits an unprotected Jenkins script console endpoint (/script). The methodology focuses on finding injectable parameters through regular navigation and response analysis, while this vulnerability requires direct access to an administrative interface not typically accessed through normal user navigation. The payload execution occurs in a dedicated scripting interface rather than through manipulated parameters in regular requests.",
    "is_simple_injection": false
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves an unauthenticated Jenkins instance with /script enabled, which allows remote command execution. The proposed methodology focuses on detecting authorization and authentication bypasses within the same application by swapping user sessions or resource IDs. However, this case involves a misconfigured Jenkins instance that does not require any authentication, which is a different class of vulnerability not covered by the described methodology.",
    "is_detectable": false
  }
}