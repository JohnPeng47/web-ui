{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "l00ph0le ",
  "title": "SQL Injection in Login Page: https://\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/login.php",
  "content": "\nSummary:\nI believe I've discovered an error based SQL injection in the login page for https://\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588/login.php.\nDescription:\nWhen browsing to the webpage https://\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588/login.php and entering certain control characters into the \"Username\" field, and SQL error (Oracle) is produced.\nImpact\nThis is hard to gauge as I did not attempt to fully exploit the SQL injection point. Once I identified that it was an error-based SQL injection, I stopped. The website also has a Web Application Firewall and IPS implemented, so bypasses would need to be used to fully exploit it. I didn't know the rules for this program in regard to bypasses defenses with automated tools like sqlmap the --tamper parameter.\nStep-by-step Reproduction Instructions\nBrowse to https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588/login.php\nEnter \" '; -- \" into the username field\nThe error \"ORA-00933: SQL command not properly ended\" is produced\nProduct, Version, and Configuration (If applicable)\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 Portal\nVersion: 3.0.89\nLast Modified: Oct 04, 2018\nSuggested Mitigation/Remediation Actions\nParameterized queries should be used to separate the command and data portions of the intended query to the database. These queries prevent an attacker from tampering with the query logic and extending a concatenated database query string. Code reviews should be conducted to identify any additional areas were the application or other applications in the organization are vulnerable to this attack.\nAdditionally, input validation should be enforced on the server side in order to ensure that only expected data is sent in queries. Where possible security specific libraries should be used in order to provide an additional layer of protection.\nImpact\nA skilled attacker could likely gain access to the database for the website, and depending on the privileges of the database user, gain access to other databases or compromise the system hosting the database engine.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1589489280,
  "report_url": "https://hackerone.com/reports/447742",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Browse to https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588/login.php"
    ],
    [
      2,
      "Enter \" '; -- \" into the username field"
    ]
  ],
  "vuln_description": "An error-based SQL injection vulnerability exists in the login page, where entering certain control characters in the 'Username' field triggers an Oracle SQL error, indicating improper handling of user input in database queries.",
  "reason": "The vulnerability is straightforward to discover as it only requires entering basic SQL injection payloads into a single input field and observing the error response. There are no complex interactions or state manipulations involved.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The reported SQL injection was triggered by injecting a basic payload (`'; --`) into the username parameter, which generated an Oracle error visible in the HTTP response. The methodology's 'Simple Payload' testing would detect this because:\n1. The payload is generic (no filter bypass required).\n2. The error response (ORA-00933) is directly observable in the same HTTP channel.\n3. The parameter (username) would be flagged as injectable during automated analysis of logged requests/responses.\n4. No stored XSS-like navigation or role-specific access was needed to observe the payload's effect.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability involves manipulating the 'Username' field to trigger database errors, which is a form of input manipulation not directly tied to session or resource ID swapping. The methodology focuses on authN/authZ bypasses through session or resource ID manipulation, not input validation flaws like SQL injection.",
    "is_detectable": false
  }
}