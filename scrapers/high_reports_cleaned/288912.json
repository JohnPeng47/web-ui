{
    "reported_to": "Semrush",
    "reported_by": "sureshbudharapu ",
    "title": "Cross-origin resource sharing",
    "content": "\nIssue:Cross-origin resource sharing: arbitrary origin trusted\nThe application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.\nThe application allowed access from the requested origin https://hhgdhgjgbrg.com\nSince the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nIssue background:\nAn HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.\nIf the site specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to bypass any IP-based access controls by proxying through users' browsers.\nremediation:\nHost:https://www.semrush.com\nPath: /blog/ws/\nremediation:Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.\nRequest:\n`\nPOST /blog/ws/?EIO=3&transport=polling&t=L-XUrv3&sid=GgyrWydG6cdnMzMxCIuZ HTTP/1.1\nHost: www.semrush.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0\nAccept: /\nAccept-Language: en-US,en;q=0.5\nContent-type: text/plain;charset=UTF-8\nReferer: https://www.semrush.com/blog/\nContent-Length: 38\nCookie: \u2588\u2588\u2588; blog_split=C; ref_code=default; usertype=Free-User; marketing=%7B%22user_cmp%22%3A%22%22%2C%22user_label%22%3A%22%22%7D; localization=%7B%22locale%22%3A%22en%22%7D; db=us; _ga=GA1.2.1264834051.1510222356; _gid=GA1.2.837455256.1510222356; utz=Asia%2FKolkata; userdata=%7B%22tz%22%3A%22GMT+5.5%22%2C%22ol%22%3A%22en%22%7D; visit_first=1510222356000; io=GgyrWydG6cdnMzMxCIuZ; wp13557=UWYYADDDDDDMAZHBYLB-JMKI-XKAU-IWWJ-LMUVHMXKWMYJDHAXJKTTX-HVXB-XUWC-BYVI-KCVBHMXYUVKBDlLtkNlo_Jht; uvt=; uvts=6k5thF30VCHYVUCC; XSRF-TOKEN=alfdcNxz1SnLcbyeUDtBHc7p5i0IgSWjkrXL10C6; community-semrush=XX2llfwaopEzko3IlrC5VPaXpFuQMqQVJvo3mdzN; expcid=3d0fa57b-7bf2-4c65-9b04-dd93cda4bddc; insp_wid=826279527; insp_slim=1510241796546; insp_nv=true; insp_targlpu=aHR0cHM6Ly93d3cuc2VtcnVzaC5jb20vYXBpLWRvY3VtZW50YXRpb24v; insp_targlpt=U0VNcnVzaCBBUEkgfCBTRU1ydXNoIEVuZ2xpc2g%3D; insp_norec_sess=true; _gat=1; _uetsid=_ueta0786e6a\nConnection: close\n1.Origin: https://hhgdhgjgbxg.com\n35:42[\"online\",\"{\\\"user\\\":147782577}\"]\nResponse:\nHTTP/1.1 400 Bad Request\nServer: nginx\nDate: Thu, 09 Nov 2017 15:58:45 GMT\n1.Content-Type: application/json\nConnection: close\n1.Access-Control-Allow-Credentials: true\n1.Access-Control-Allow-Origin: https://hhgdhgjgbxg.com\nX-Frame-Options: SAMEORIGIN always\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nContent-Length: 41\n{\"code\":1,\"message\":\"Session ID unknown\"}\n`\nReferences:\nExploiting CORS Misconfigurations\nVulnerability classifications**\nCWE-942: Overly Permissive Cross-domain Whitelist\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "None"
    ],
    "screenshots": {},
    "disclosed_date": 1515702300,
    "report_url": "https://hackerone.com/reports/288912",
    "is_multi_component": true,
    "complexity": "HIGH",
    "novelty": "MEDIUM",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Send a POST request to the target endpoint with an arbitrary Origin header (e.g., https://hhgdhgjgbrg.com)."
        ],
        [
            2,
            "Observe the response headers to check if Access-Control-Allow-Origin reflects the arbitrary origin and if Access-Control-Allow-Credentials is set to true."
        ]
    ],
    "vuln_description": "The application implements a permissive CORS policy that allows arbitrary origins, potentially enabling cross-domain attacks. The presence of Access-Control-Allow-Credentials: true further increases the risk by allowing third-party sites to perform privileged actions or retrieve sensitive data.",
    "reason": "The vulnerability is straightforward to discover as it only requires sending a request with an arbitrary Origin header and observing the response. There are no complex interactions or state manipulations involved.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}