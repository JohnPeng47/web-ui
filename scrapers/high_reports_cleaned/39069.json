{
  "reported_to": "Informatica",
  "reported_by": "mtk0308 ",
  "title": "[mysupport.informatica.com] - reflected XSS",
  "content": "\nmysupport.informatica.com has reflected XSS vulnerability.\nI used browser is Firefox 34.0.5\nPoC:\nhttps://mysupport.informatica.com/search.jspa?q=zzz%3C%2Fscript%3E%3Cscript%3Econfirm%28document.domain%29%3B%3C%2Fscript%3E\nthanks\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1696496340,
  "report_url": "https://hackerone.com/reports/39069",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Navigate to the URL: https://mysupport.informatica.com/search.jspa?q=zzz%3C%2Fscript%3E%3Cscript%3Econfirm%28document.domain%29%3B%3C%2Fscript%3E in Firefox 34.0.5"
    ],
    [
      2,
      "Observe the JavaScript confirmation dialog displaying the document.domain, indicating successful execution of the injected script"
    ]
  ],
  "vuln_description": "The mysupport.informatica.com website is vulnerable to reflected Cross-Site Scripting (XSS) where malicious scripts can be injected via the search parameter (q) in the URL. The vulnerability allows execution of arbitrary JavaScript code in the context of the victim's session.",
  "reason": "This is a straightforward reflected XSS vulnerability that requires no complex interactions or state manipulation. The attack vector is simple URL parameter injection with a basic JavaScript payload, which is a well-known and commonly tested vulnerability pattern.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The reflected XSS vulnerability in the 'q' parameter of mysupport.informatica.com can be discovered using the described methodology. The parameter 'q' would be identified as injectable during request/response logging and analysis. The payload used (</script><script>confirm(document.domain);</script>) is a simple context-switching XSS payload without custom filter bypass techniques. The injection occurs in the same channel (direct HTTP response) and requires no special navigation to trigger, aligning with the 'simple payload' criteria where execution detection is done via response inspection.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The reflected XSS vulnerability involves injecting malicious scripts into a search parameter, which is not directly related to authentication or authorization (AuthN/AuthZ) boundaries. The proposed methodologies focus on testing access control by swapping user sessions or resource IDs, not on input validation or script injection vulnerabilities.",
    "is_detectable": false
  }
}