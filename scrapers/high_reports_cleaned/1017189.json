{
  "reported_to": "U.S. Dept Of Defense",
  "reported_by": "nagli ",
  "title": "Blind Stored XSS on https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 after filling a request at https://\u2588\u2588\u2588\u2588\u2588",
  "content": "\nDescription:\nWhen you submit a request at https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588, the content is being sent to the administrators of the application, and you will be presented with your request status at https://\u2588\u2588\u2588\u2588\nThe Description field at the request status page is prone to stored xss and blind stored XSS injection, because there is no sanitization on the input being inserted.\nAs for now this is self (because the link is for the account), i'm 100% sure that when an administrator will check the request his details will get sent to my email, and i have a xss payload stored on my user.\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nStep-by-step Reproduction Instructions\nRegister to https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 / login to my account (\u2588\u2588\u2588\u2588)\nNavigate to https://\u2588\u2588\u2588\nCraft your XSS payload on the description window\nSubmit your request\nNavigate to https://\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\nThe javascript will execute.\nSuggested Mitigation/Remediation Actions\nSanitizing the input being inserted into the description window field.\nBest regards\nnagli\nImpact\nStored blind XSS on the pac.whs.mil website which could lead to administrator credentials being leaked.\n\n",
  "severity": [
    7.0,
    8.9
  ],
  "bounty": null,
  "weaknesses": [
    "Cross-site Scripting (XSS) - Stored"
  ],
  "screenshots": {},
  "disclosed_date": 1615514100,
  "report_url": "https://hackerone.com/reports/1017189",
  "vuln_category": "WEB_APP",
  "is_multi_component": false,
  "complexity": "LOW",
  "novelty": "LOW",
  "steps": [
    [
      1,
      "Register or log in to the target website."
    ],
    [
      2,
      "Navigate to the request submission page."
    ],
    [
      3,
      "Craft and submit an XSS payload in the description field."
    ],
    [
      4,
      "Navigate to the request status page to observe the XSS execution."
    ]
  ],
  "vuln_description": "The vulnerability is a Blind Stored XSS in the description field of a request submission form. The input is not sanitized, allowing malicious JavaScript to be stored and executed when an administrator views the request, potentially leading to credential leakage.",
  "reason": "The attack involves straightforward steps without complex interactions or state manipulations. The XSS payload execution is direct once the request is submitted and viewed by an administrator.",
  "new_complexity": "LOW",
  "requires_code": false,
  "requires_CVE": false,
  "is_ctf": false,
  "other_report": null,
  "injection_metadata": {
    "reasoning": "The vulnerability involves a stored XSS in a user-accessible Description field whose execution can be observed by the attacker through regular navigation to their request status page (same application context). The methodology's 'simple payload' testing would detect this since: (1) the parameter is identified during request/response logging, (2) a basic XSS payload triggers execution in the same channel (user's status page via regular navigation), and (3) no custom filter bypass is required. The blind aspect (admin impact) is an additional consequence but not required for detection via the methodology.",
    "is_simple_injection": true
  },
  "authnz_metadata": {
    "reason": "The vulnerability involves a stored XSS in the description field of a request status page, which is a client-side issue rather than an authentication or authorization bypass. The methodology described focuses on testing AuthN/AuthZ boundaries by swapping user sessions or resource IDs, which does not apply to XSS vulnerabilities.",
    "is_detectable": false
  }
}