from dotenv import load_dotenv

load_dotenv()
import sys

sys.path.append(".")
import asyncio
import sys
from pathlib import Path

from browser_use import Agent
from browser_use.agent.views import AgentHistoryList
from browser_use.browser.browser import Browser, BrowserConfig
from browser_use.browser.context import (
    BrowserContextConfig,
    BrowserContextWindowSize,
)

from src.agent.custom_agent import CustomAgent
from src.agent.custom_prompts import CustomSystemPrompt, CustomAgentMessagePrompt

from tests.server import PORT
from logger import init_root_logger
from johnllm import LLMModel

HISTORY_PATH = Path(__file__).parent / "history.json"
TASK = """
Go to {{url}} and login with:
{{credentials}}

Once you login, your task is to interact with the application in every way possible. 
"every way possible" encompasses but is not limited to the following actions:
- Navigate every possible link
- Click on every clickable element
- Fill out every form
- And identify and interact with every single available functionality in the app
"""

async def run_pentest():
    llm = LLMModel()
    window_w, window_h = 1920, 1080
    use_vision = False
    browser = Browser(
        config=BrowserConfig(
            headless=False,
            disable_security=True,
            extra_chromium_args=[f"--window-size={window_w},{window_h}"],
        )
    )
    async with await browser.new_context(
            config=BrowserContextConfig(
                trace_path="./tmp/traces",
                save_recording_path="./tmp/record_videos",
                no_viewport=False,
                browser_window_size=BrowserContextWindowSize(
                    width=window_w, height=window_h
                ),
            )
    ) as browser_context:
        agent = CustomAgent(
            task=f"Go to http://localhost:{str(PORT)}/login, login with username 'admin' and password 'admin', then read and return the text displayed on the page after login",
            llm=llm,
            browser_context=browser_context,
            use_vision=use_vision,
            tool_calling_method="function_calling",
            system_prompt_class=CustomSystemPrompt,
            agent_prompt_class=CustomAgentMessagePrompt,
        )
        history = await agent.run(max_steps=5)
        agent.save_history(HISTORY_PATH)

    await browser.close()

if __name__ == "__main__":    
    init_root_logger()
    asyncio.run(run_pentest())