#!/usr/bin/env python3

"""
Simplified ZAP security testing script without authentication
Based on the original comprehensive ZAP script but streamlined for 
unauthenticated scanning of multiple targets.

This script performs:
1. Spider discovery 
2. AJAX Spider discovery
3. Active vulnerability scanning
4. Report generation

Author: Modified from original by aine-rb on Github
"""

import time
from pprint import pprint
from zapv2 import ZAPv2


#######################################
### BEGINNING OF CONFIGURATION AREA ###
#######################################

# MANDATORY. Define the API key generated by ZAP
apiKey = "qiiutul4utrfub1b8veqs50bk0"

# MANDATORY. Define the listening address of ZAP instance
localProxy = {"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}

# MANDATORY. True to create new session, False to use existing
isNewSession = True
# MANDATORY. ZAP Session name
sessionName = "SimpleSecurityScan"

# Define the list of global exclude URL regular expressions. List can be empty.
globalExcludeUrl = []

# MANDATORY. Define if an outgoing proxy server is used
useProxyChain = False
# Only required if useProxyChain is True
proxyAddress = "my.corp.proxy"
proxyPort = "8080"
skipProxyAddresses = "127.0.0.1;localhost"

# MANDATORY. List of target URLs to test
targets = [
    "https://0a1d00cb045fe5b681502a7b00690030.web-security-academy.net",
]

# Additional URLs to help ZAP discover more content (optional)
additionalURLs = []

# MANDATORY. Set value to True if you want to customize scan policy
useScanPolicy = True
# Only required if useScanPolicy is True
scanPolicyName = "Comprehensive Security Scan"
# Set to True to only run specified scan types, False to run all except specified
isWhiteListPolicy = False
# Scan IDs to include/exclude based on isWhiteListPolicy
# Use zap.ascan.scanners() to list all available scan IDs
# Common vulnerability scan IDs:
ascanIds = [
    # SQL Injection
    40018, 40019, 40020, 40021, 40022, 40024, 90018,
    # XSS
    40012, 40014, 40016, 40017,
    # Directory Traversal
    6, 
    # Remote File Inclusion  
    7,
    # Command Injection
    90020,
    # LDAP Injection
    40015,
    # XPath Injection
    90023
]
# Alert threshold: Low, Medium, High
alertThreshold = "Medium"
# Attack strength: Low, Medium, High, Insane
attackStrength = "Medium"

# MANDATORY. Set True to use Ajax Spider, False otherwise
useAjaxSpider = True

# MANDATORY. Set True to shutdown ZAP once finished
shutdownOnceFinished = False

# Report settings
generateHTMLReport = True
generateXMLReport = False

#################################
### END OF CONFIGURATION AREA ###
#################################


def setup_zap():
    """Initialize ZAP connection and session"""
    print("=" * 60)
    print("SETTING UP ZAP CONNECTION")
    print("=" * 60)
    
    # Connect to ZAP
    zap = ZAPv2(proxies=localProxy, apikey=apiKey)
    core = zap.core
    
    # Create or load session
    if isNewSession:
        print("Creating new ZAP session: " + sessionName)
        pprint("Create ZAP session: " + sessionName + " -> " +
               core.new_session(name=sessionName, overwrite=True))
    else:
        print("Loading existing ZAP session: " + sessionName)
        pprint("Load ZAP session: " + sessionName + " -> " +
               core.load_session(name=sessionName))
    
    return zap


def configure_global_settings(zap):
    """Configure global ZAP settings"""
    print("\n" + "=" * 60)
    print("CONFIGURING GLOBAL SETTINGS")
    print("=" * 60)
    
    core = zap.core
    
    # Configure global exclusions
    if globalExcludeUrl:
        print("Adding Global Exclude URL patterns:")
        for regex in globalExcludeUrl:
            pprint(regex + " -> " + core.exclude_from_proxy(regex=regex))
    
    # Configure outgoing proxy if needed
    pprint("Enable outgoing proxy chain: " + str(useProxyChain) + " -> " +
           core.set_option_use_proxy_chain(boolean=useProxyChain))
    
    if useProxyChain:
        pprint("Set outgoing proxy: " + proxyAddress + ":" + proxyPort + " -> " +
               core.set_option_proxy_chain_name(string=proxyAddress) + " | " +
               core.set_option_proxy_chain_port(integer=proxyPort))
        pprint("Skip proxy for: " + skipProxyAddresses + " -> " +
               core.set_option_proxy_chain_skip_name(string=skipProxyAddresses))


def configure_scan_policy(zap):
    """Configure custom scan policy"""
    print("\n" + "=" * 60)
    print("CONFIGURING SCAN POLICY")
    print("=" * 60)
    
    ascan = zap.ascan
    
    if not useScanPolicy:
        print("Using default scan policy")
        return None
    
    # Remove existing policy and create new one
    try:
        ascan.remove_scan_policy(scanpolicyname=scanPolicyName)
    except:
        pass  # Policy might not exist
        
    pprint("Creating scan policy: " + scanPolicyName + " -> " +
           ascan.add_scan_policy(scanpolicyname=scanPolicyName))
    
    # Configure policy settings for all categories
    for policyId in range(0, 5):
        ascan.set_policy_alert_threshold(id=policyId,
                                       alertthreshold=alertThreshold,
                                       scanpolicyname=scanPolicyName)
        ascan.set_policy_attack_strength(id=policyId,
                                       attackstrength=attackStrength,
                                       scanpolicyname=scanPolicyName)
    
    # Configure which scanners to use
    ascanIdStr = ",".join(str(id) for id in ascanIds)
    
    if isWhiteListPolicy:
        print("Whitelist policy: Only running specified scan types")
        pprint("Disabling all scanners -> " +
               ascan.disable_all_scanners(scanpolicyname=scanPolicyName))
        pprint("Enabling scanners " + ascanIdStr + " -> " +
               ascan.enable_scanners(ids=ascanIdStr, scanpolicyname=scanPolicyName))
    else:
        print("Blacklist policy: Running all except specified scan types")
        pprint("Enabling all scanners -> " +
               ascan.enable_all_scanners(scanpolicyname=scanPolicyName))
        pprint("Disabling scanners " + ascanIdStr + " -> " +
               ascan.disable_scanners(ids=ascanIdStr, scanpolicyname=scanPolicyName))
    
    return scanPolicyName


def access_initial_urls(zap):
    """Access target URLs to populate ZAP's site tree"""
    print("\n" + "=" * 60)
    print("ACCESSING INITIAL URLS")
    print("=" * 60)
    
    core = zap.core
    
    # Access all target URLs
    for target in targets:
        print("Accessing: " + target)
        pprint("Access target URL " + target + " -> " + str(core.access_url(url=target, followredirects=True)))
        time.sleep(1)  # Small delay between requests
    
    # Access additional URLs if specified
    for url in additionalURLs:
        print("Accessing additional URL: " + url)
        pprint("Access URL " + url + " -> " + str(core.access_url(url=url, followredirects=True)))
        time.sleep(1)
    
    # Give the sites tree time to update
    time.sleep(3)
    
    # Display discovered sites
    sites = core.sites
    if sites:
        print("\nDiscovered " + str(len(sites)) + " sites:")
        for i, site in enumerate(sites, 1):
            print("  " + str(i) + ". " + site)


def run_spider_scans(zap):
    """Run traditional spider scans on all targets"""
    print("\n" + "=" * 60)
    print("RUNNING SPIDER DISCOVERY")
    print("=" * 60)
    
    spider = zap.spider
    scan_ids = []
    
    for target in targets:
        print("\nStarting Spider scan for: " + target)
        scan_id = spider.scan(url=target, maxchildren=None, recurse=True,
                            contextname=None, subtreeonly=None)
        scan_ids.append((target, scan_id))
        print("Spider scan started. Scan ID: " + scan_id)
        time.sleep(2)  # Stagger scan starts
    
    # Wait for all spider scans to complete
    print("\nWaiting for spider scans to complete...")
    while scan_ids:
        completed_scans = []
        for target, scan_id in scan_ids:
            progress = int(spider.status(scan_id))
            print("Spider " + scan_id + " (" + target + "): " + str(progress) + "%")
            
            if progress >= 100:
                completed_scans.append((target, scan_id))
                print("✓ Spider completed for: " + target)
        
        # Remove completed scans
        for completed in completed_scans:
            scan_ids.remove(completed)
        
        if scan_ids:  # Still have running scans
            time.sleep(5)
    
    print("✓ All spider scans completed!")


def run_ajax_spider_scans(zap):
    """Run AJAX spider scans on all targets"""
    if not useAjaxSpider:
        print("\nAJAX Spider disabled in configuration")
        return
    
    print("\n" + "=" * 60)
    print("RUNNING AJAX SPIDER DISCOVERY")
    print("=" * 60)
    
    ajax = zap.ajaxSpider
    
    for target in targets:
        print("\nStarting AJAX Spider for: " + target)
        pprint("AJAX Spider start -> " + ajax.scan(url=target, inscope=None))
        
        # Give AJAX spider time to start
        time.sleep(10)
        
        # Wait for this AJAX spider to complete
        while ajax.status != "stopped":
            print("AJAX Spider status: " + ajax.status)
            time.sleep(5)
        
        print("✓ AJAX Spider completed for: " + target)
        
        # Small delay between targets
        time.sleep(2)
    
    print("✓ All AJAX spider scans completed!")


def run_active_scans(zap, scan_policy_name):
    """Run active vulnerability scans on all targets"""
    print("\n" + "=" * 60)
    print("RUNNING ACTIVE VULNERABILITY SCANS")
    print("=" * 60)
    
    ascan = zap.ascan
    scan_ids = []
    
    for target in targets:
        print("\nStarting Active scan for: " + target)
        scan_id = ascan.scan(url=target, recurse=True, inscopeonly=None,
                           scanpolicyname=scan_policy_name, method=None, postdata=True)
        scan_ids.append((target, scan_id))
        print("Active scan started. Scan ID: " + scan_id)
        time.sleep(5)  # Stagger scan starts to avoid overwhelming targets
    
    # Wait for all active scans to complete
    print("\nWaiting for active scans to complete...")
    while scan_ids:
        completed_scans = []
        for target, scan_id in scan_ids:
            progress = int(ascan.status(scan_id))
            print("Active Scan " + scan_id + " (" + target + "): " + str(progress) + "%")
            
            if progress >= 100:
                completed_scans.append((target, scan_id))
                print("✓ Active scan completed for: " + target)
        
        # Remove completed scans
        for completed in completed_scans:
            scan_ids.remove(completed)
        
        if scan_ids:  # Still have running scans
            time.sleep(10)
    
    print("✓ All active scans completed!")


def generate_reports(zap):
    """Generate security reports"""
    print("\n" + "=" * 60)
    print("GENERATING SECURITY REPORTS")
    print("=" * 60)
    
    core = zap.core
    
    # Give passive scanner time to finish
    print("Waiting for passive scanner to complete...")
    time.sleep(5)
    
    # Get all alerts
    all_alerts = core.alerts()
    print("\nTotal alerts found: " + str(len(all_alerts)))
    
    # Summary by risk level
    risk_summary = {}
    for alert in all_alerts:
        risk = alert.get("risk", "Unknown")
        risk_summary[risk] = risk_summary.get(risk, 0) + 1
    
    print("\nAlerts by Risk Level:")
    for risk in ["High", "Medium", "Low", "Informational"]:
        count = risk_summary.get(risk, 0)
        if count > 0:
            print("  " + risk + ": " + str(count))
    
    # Generate reports per target
    print("\nGenerating individual target reports...")
    for target in targets:
        print("\n" + "=" * 40)
        print("ALERTS FOR: " + target)
        print("=" * 40)
        
        target_alerts = core.alerts(baseurl=target)
        if not target_alerts:
            print("✅ No security issues found for this target!")
            continue
        
        # Group by risk level
        target_risks = {}
        for alert in target_alerts:
            risk = alert.get("risk", "Unknown")
            if risk not in target_risks:
                target_risks[risk] = []
            target_risks[risk].append(alert)
        
        # Display alerts by risk level
        for risk in ["High", "Medium", "Low", "Informational"]:
            if risk in target_risks:
                print("\n🚨 " + risk.upper() + " RISK (" + str(len(target_risks[risk])) + " issues):")
                print("-" * 30)
                
                for alert in target_risks[risk][:5]:  # Show first 5
                    name = alert.get("name", "Unknown")
                    confidence = alert.get("confidence", "Unknown")
                    print("  • " + name + " (Confidence: " + confidence + ")")
                
                if len(target_risks[risk]) > 5:
                    remaining = len(target_risks[risk]) - 5
                    print("  ... and " + str(remaining) + " more " + risk + " risk issues")
    
    # Generate full reports
    if generateHTMLReport:
        print("\nGenerating HTML report...")
        html_report = core.htmlreport()
        filename = "security_report_" + str(int(time.time())) + ".html"
        with open(filename, "w", encoding="utf-8") as f:
            f.write(html_report)
        print("✓ HTML report saved!")
    
    if generateXMLReport:
        print("\nGenerating XML report...")
        xml_report = core.xmlreport()
        filename = "security_report_" + str(int(time.time())) + ".xml"
        with open(filename, "w", encoding="utf-8") as f:
            f.write(xml_report)
        print("✓ XML report saved!")


def main():
    """Main execution function"""
    print("ZAP SIMPLIFIED SECURITY TESTING SCRIPT")
    print("=" * 60)
    print("Testing " + str(len(targets)) + " targets")
    print("=" * 60)
    
    try:
        # Step 1: Setup ZAP connection
        zap = setup_zap()
        
        # Step 2: Configure global settings
        configure_global_settings(zap)
        
        # Step 3: Enable passive scanners
        print("\nEnabling passive scanners...")
        pprint("Enable all passive scanners -> " +
               zap.pscan.enable_all_scanners())
        
        # Step 4: Configure scan policy
        scan_policy_name = configure_scan_policy(zap)
        
        # Step 5: Access initial URLs
        access_initial_urls(zap)
        
        # Step 6: Run discovery scans
        run_spider_scans(zap)
        run_ajax_spider_scans(zap)
        
        # Step 7: Run active vulnerability scans
        run_active_scans(zap, scan_policy_name)
        
        # Step 8: Generate reports
        generate_reports(zap)
        
        print("\n" + "=" * 60)
        print("✅ SECURITY TESTING COMPLETED!")
        print("=" * 60)
        print("Check the generated reports for detailed findings.")
        print("Review ZAP GUI for additional analysis options.")
        
    except Exception as e:
        print("\n❌ Error occurred: " + str(e))
        raise
    
    finally:
        if shutdownOnceFinished:
            print("\nShutting down ZAP...")
            try:
                zap.core.shutdown()
                print("✓ ZAP shutdown complete")
            except:
                print("ZAP shutdown failed or already shut down")


if __name__ == "__main__":
    main()