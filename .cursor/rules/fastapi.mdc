---
globs: cnc/*
alwaysApply: false
---
Here are some guidelines for completing a CODEEDIT_TASK in the cnc/ folder

======================
ROUTER_STRUCTURE
======================
1. Routers:
> @location: cnc/routers
> maps to public endpoints in the FastAPI app
> put in router when dealing with HTTP transport logic (ie. rate-limits, HTTP status/responses)
> logic that pertains to the specific route is implemented in this body
> has access to the agent queue pools
>> Schemas
    > @location: routers/schemas
    > auxillary dependency of routers
    > FastAPI res/req shapes
    > should not be used by anything other than routes
2. Services:
> @location: cnc/services
> logic required to be replicated across many different routes are implemented here
> has access to the database
> should access the routers directly
3. Database:
> @locations: cnc/database
> the main db models that schemas
>> CRUD:
    > location: cnc/database/**/crud.py
    > wraps db models to provide an interaction layer with the rest of the code

======================
DOMAIN_MODULE
======================
> contains subcomponents of a ROUTER_STRUCTURE and encapsulates functional logic around a cohesive domain model
> @domain_module_list: [agent, engagement]

======================
LOGIC_SPLIT
======================
- Router vs. service
> some arbitrariness over where to put logic in router vs. service; in general, we prefer more "front-loaded" routers than services
> only put logic into services when its going to be shared amongst different DOMAIN_MODULEs
- service vs. crud
> simililarly, this split should favor service
> crud should be bare minimum db wrapper

======================
TESTING
======================
> For each CODEEDIT_TASK, if testing is requested by the user, then you *MUST*:
- acknowledge verbally in your output that testing is required
- use the following guideline for your testing strategy

1. Locate the relevant test cases to run; you are encouraged to select the smallest set of testcases relevant to your task
2. Determine if:
a) existing test cases provide full coverage of your new features 
b) existing test cases need to be modified based on your change 
c) new test cases need to be created
3. Make sure that the test is passed before completing your CODEEDIT_TASK

- Important
> when running any integration that uses *test_app_client_with_workers* fixture, if the test fails at first, try again a second time

======================
Additional Guidance
======================
- *Always*, when making changes in this repo, come up with a plan to first determine which of the above will be affected, and then articulate the your steps in strict guidance with the project structure