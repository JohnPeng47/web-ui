import json
from contextlib import contextmanager
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Generator, Iterator

from sqlalchemy import func, case, Boolean, Column, DateTime, Float, Integer, String, ForeignKey, create_engine
from sqlalchemy.engine import Engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import Session, sessionmaker, relationship

from pentest_bot.web_exploit.agent_step import AgentContext
from pentest_bot.db import Base
from pentest_bot.db.utils import current_date

class DatasetORM(Base):
    __tablename__ = "datasets"
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, nullable=False, unique=True)
    description = Column(String, nullable=True)
    created_at = Column(DateTime, default=current_date, nullable=False)
    data_json = Column(String, nullable=False) # JSON data, serialized to string

class EvalORM(Base):
    __tablename__ = "evals"
    id = Column(Integer, primary_key=True, autoincrement=True)
    created_at = Column(DateTime, default=current_date, nullable=False)
    comment = Column(String, nullable=True)

class EvalResultORM(Base):
    __tablename__ = "eval_results"
    id = Column(Integer, primary_key=True, autoincrement=True)
    eval_id = Column(Integer, ForeignKey("evals.id", ondelete="CASCADE"), nullable=False)
    dataset_id = Column(Integer, ForeignKey("datasets.id", ondelete="CASCADE"), nullable=False)
    created_at = Column(DateTime, default=current_date, nullable=False)
    result_json = Column(String, nullable=False) # JSON data, serialized to string

    # relationships
    eval = relationship("EvalORM", back_populates="results")
    dataset = relationship("DatasetORM")

# ---------------------------------------------------------------------------
# Query Helpers 
# ---------------------------------------------------------------------------


def create_dataset(session, name: str, description: str, data_json: Dict) -> DatasetORM:
    dataset = DatasetORM(name=name, description=description, data_json=json.dumps(data_json))
    session.add(dataset)
    session.commit()
    return dataset

def get_dataset(session, name: str) -> DatasetORM | None:
    return session.query(DatasetORM).filter(DatasetORM.name == name).first()
