"""
Updated log-directory layout:

    <LOG_DIR>/pentest_bot/<YYYY-MM-DD>/<N>/…

The optional *subfolder* argument is still supported and, if supplied,
is placed **inside** the date directory:

    <LOG_DIR>/pentest_bot/<YYYY-MM-DD>/<subfolder>/<N>/…
"""
import logging
import random
import time
import threading
from datetime import datetime
from pathlib import Path
from typing import Optional, Tuple, List

from logger import LOG_DIR, get_console_handler, formatter

#  constants
# --------------------------------------------------------------------------- #
LOG_PATH = Path(LOG_DIR)
INDENT_LEN = 100
INDENT_STR = ""
_run_lock = threading.Lock()               # <── thread-safety

def create_log_dir(subfolder: str, no_date: bool = False):
    date_dir = datetime.now().strftime("%Y-%m-%d")
    if no_date:
        base_dir = Path(LOG_DIR) / subfolder
    else:
        base_dir = Path(LOG_DIR) / subfolder / date_dir

    print(f"Creating log dir: {base_dir}")
    base_dir.mkdir(parents=True, exist_ok=True)
    return base_dir

def run_id_dir(base_dir: Path):
    """Returns the next run-id directory"""
    run_id = max((int(p.name) for p in base_dir.iterdir() if p.name.isdigit()), default=-1) + 1
    return base_dir / str(run_id)

class _ThreadFilter(logging.Filter):
    """Accept records only from the thread that created this handler."""
    def __init__(self, thread_id: int):
        super().__init__()
        self._thread_id = thread_id

    def filter(self, record: logging.LogRecord) -> bool:    # noqa: D401
        return record.thread == self._thread_id             # ❶ key line

class AgentFileHandler(logging.FileHandler):
    """
    A self-contained FileHandler that

    • creates the per-run directory tree (<LOG_DIR>/…/<run_id>/)
    • stores   .base_logdir   (Path to that run directory)
    • stores   .log_filepath  (Path to the specific *.log file)
    • auto-adds a _ThreadFilter so each thread gets its own file
    """
    def __init__(
        self,
        eval_name: str,
        base_dir: Path,
        *,
        level: int = logging.INFO,
        thread_id: Optional[int] = None,
    ):        
        self.thread_id = thread_id or threading.get_ident()

        try:
            self.base_logdir = run_id_dir(base_dir)
            self.base_logdir.mkdir()
        except FileExistsError: 
            # race condition with other loggers creating files in same dir, random backoff to avoid 
            # re-conflicts
            time.sleep(0.1 + 0.3 * random.random())
            self.base_logdir = run_id_dir(base_dir)
            self.base_logdir.mkdir()

        # Final log file path
        self.log_filepath = self.base_logdir / f"{eval_name}.log"

        # ── initialise parent FileHandler ───────────────────────────────── #
        super().__init__(self.log_filepath, encoding="utf-8")
        self.setLevel(level)
        self.setFormatter(formatter)

        # Per-thread isolation
        self._thread_id = self.thread_id
        self.addFilter(_ThreadFilter(self.thread_id))

# --------------------------------------------------------------------------- #
#  updated helpers
# --------------------------------------------------------------------------- #
def setup_agent_logger(
    eval_name: str,
    *,
    parent_dir: Optional[Path] = None, # empty path
    subfolder: str = "default",
    name: str = "agentlog",
    level: int = logging.INFO,
    no_date: bool = False
):
    """
    Initialises two loggers:

      • agentlog        – main activity
      • full_requests   – verbose request payloads
    """
    print("Parent dir: ", parent_dir)
    base_dir = parent_dir if parent_dir else create_log_dir(subfolder, no_date=no_date)
    thread_id = threading.get_ident()

    # ─────────── Primary logger ────────────────────────────────────────── #
    logger = logging.getLogger(name)
    logger.setLevel(level)

    if not any(isinstance(h, logging.StreamHandler) for h in logger.handlers):
        logger.addHandler(get_console_handler())
    if not any(isinstance(h, AgentFileHandler) and h._thread_id == thread_id for h in logger.handlers):
        fh = AgentFileHandler(
            eval_name,
            base_dir,
            level=level,
            thread_id=thread_id,
        )
        logger.addHandler(fh)
        logger._run_dir = fh.base_logdir          # keep this public attr

    # ─────────── Secondary logger ("full_requests") ────────────────────── #
    fr_logger = logging.getLogger("full_requests")
    fr_logger.setLevel(level)
    fr_logger.propagate = False

    if not any(isinstance(h, logging.StreamHandler) for h in fr_logger.handlers):
        fr_logger.addHandler(get_console_handler())

    if not any(isinstance(h, AgentFileHandler) and h._thread_id == thread_id for h in fr_logger.handlers):
        # create a sibling dir <run>/full_requests/
        fr_dir = logger._run_dir / "full_requests"
        fr_dir.mkdir(exist_ok=True)

        fr_fh = AgentFileHandler(
            f"{eval_name}_requests",
            fr_dir,
            level=level,
            thread_id=thread_id,
        )
        fr_logger.addHandler(fr_fh)

    return logger, fr_logger

def get_agent_loggers():
    return logging.getLogger("agentlog"), logging.getLogger("full_requests")