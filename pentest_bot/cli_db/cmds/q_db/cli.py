from __future__ import annotations

from argparse import Namespace

from sqlalchemy import text

from pentest_bot.db import get_session


def q_db_cmd(args: Namespace) -> None:
    """Execute an arbitrary SQL statement against the configured database."""
    sql = " ".join(args.sql)

    with get_session() as session:
        result = session.execute(text(sql))

        # For SELECT queries SQLAlchemy provides a CursorResult with a cursor attribute
        if result.cursor is not None:  # type: ignore[attr-defined]
            rows_raw = result.fetchall()
            if not rows_raw:
                print("<empty result set>")
                return

            headers = list(result.keys())
            rows = [["" if cell is None else str(cell) for cell in row] for row in rows_raw]
            from pentest_bot.cli_db.helpers import _build_table

            print(_build_table(rows, headers))
        else:
            # Data-modifying query â€“ commit and show affected rows
            session.commit()
            print(f"[+] Query OK, {result.rowcount} rows affected.")  # type: ignore[attr-defined] 