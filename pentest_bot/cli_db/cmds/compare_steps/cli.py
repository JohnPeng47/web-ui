from __future__ import annotations

from argparse import Namespace

from pentest_bot.db import get_session
from pentest_bot.db.tables.agent import (
    PentestResultORM,
    get_run,
    get_agent_steps,
)

from pentest_bot.cli_db.helpers import _build_table


def compare_steps_cmd(args: Namespace) -> None:
    """Display all AgentStep groups for a PentestResult (or each result in a run)."""

    if not getattr(args, "run_id", None) and not getattr(args, "result_id", None):
        print("[!] Either --run-id or --result-id is required")
        return

    with get_session() as session:
        results: list[PentestResultORM] = []

        if getattr(args, "run_id", None):
            run = get_run(session, args.run_id)
            if run is None:
                print(f"[!] Run ID {args.run_id} not found")
                return
            results.extend(run.results)

        if getattr(args, "result_id", None):
            res = (
                session.query(PentestResultORM)
                .filter(PentestResultORM.id == args.result_id)
                .first()
            )
            if res is None:
                print(f"[!] PentestResult ID {args.result_id} not found")
                return
            results.append(res)

        if not results:
            print("<no PentestResult rows found>")
            return

        for res in results:
            print("\n" + "=" * 80)
            status_str = "Success" if res.success else "Failure"
            print(f"PENTEST RESULT {res.id}: {res.eval_name} ({status_str})")
            print(f"Model: {res.model_name}, Cost: ${res.model_costs:.4f}")
            print("-" * 80)

            groups_data = get_agent_steps(session, int(res.id))
            if not groups_data:
                print("<no agent steps found>")
                continue

            for grp, steps in groups_data:
                prompt_label = (
                    f"{grp.opik_prompt_name or ''} @ {grp.opik_prompt_commit or '—'}"
                ).strip()
                header_title = f"GROUP {grp.group_id} • {prompt_label}"
                print("\n" + header_title)
                print("~" * len(header_title))

                headers = ["#", "Type", "Reflection"]
                rows = [
                    [
                        str(step.step_number),
                        step.step_type or "",
                        (step.reflection or "")[:80],
                    ]
                    for step in steps
                ]
                print(_build_table(rows, headers, max_col=80)) 