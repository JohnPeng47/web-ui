from __future__ import annotations

from argparse import Namespace

from pentest_bot.db import get_session
from pentest_bot.db.tables.agent import (
    PentestResultORM,
    get_agent_steps,
)
from pentest_bot.cli_db.helpers import display_step_traces, get_results_from_args

def compare_steps_cmd(args: Namespace) -> None:
    """Display all AgentStep groups for a PentestResult (or each result in a run)."""

    if not getattr(args, "run_id", None) and not getattr(args, "result_id", None) and not getattr(args, "eval_name", None):
        print("[!] Either --run-id, --result-id, or --eval-name is required")
        return

    with get_session() as session:
        results = get_results_from_args(session, args)
        if not results:
            print("<no PentestResult rows found>")
            return

        # Build mapping eval_name -> List[List[AgentStep]]
        eval_map = {}
        row_names_map = {}
        max_steps = 0

        for res in results:
            groups_data = get_agent_steps(session, res.id, groups=True)
            if not groups_data:
                print("<no agent steps found>")
                continue

            # Initialize lists for this eval_name if not present
            if res.eval_name not in eval_map:
                eval_map[res.eval_name] = []
                row_names_map[res.eval_name] = []

            # Process each group as a separate "result" for display
            for grp, steps in groups_data:
                status_str = "Pass" if bool(res.success) else "Fail"
                group_label = f"Result {res.id} Group {grp.group_id} ({status_str})"
                
                eval_map[res.eval_name].append(steps)
                row_names_map[res.eval_name].append(group_label)
                
                # Update max_steps
                max_steps = max(max_steps, len(steps))

        # Display step traces using the helper function
        if eval_map:
            print("\nSTEP TRACES")
            display_step_traces(eval_map, max_steps, row_names_map=row_names_map)