from __future__ import annotations

from argparse import Namespace
from collections import defaultdict

from pentest_bot.db import get_session
from pentest_bot.db.tables.agent import get_run, get_agent_ctxt

from pentest_bot.cli_db.helpers import build_table, human_ts, display_step_traces
from pentest_bot.web_exploit.agent_step import StepStateAbbr


def show_run_cmd(args: Namespace) -> None:
    """Detailed summary for one Run ID (aggregate + per-result traces)."""

    run_id = args.run_id

    with get_session() as session:
        run = get_run(session, run_id)
        if run is None:
            print(f"[!] Run ID {run_id} not found")
            return

        if not run.results:
            print(f"[!] Run ID {run_id} has no results")
            return

        # Calculate total cost for the run
        total_cost = sum(r.model_costs for r in run.results)
        max_steps = run.results[0].max_steps

        run_rows = [
            ["ID", str(run.id)],
            ["Created", human_ts(run.created_at)],  # type: ignore[arg-type]
            ["Comment", run.comment or ""],  # type: ignore[misc]
            ["Parent LogDir", run.parent_logdir],
            ["# Results", str(len(run.results))],
            ["# Success", str(sum(1 for r in run.results if r.success))],
            ["Total Cost ($)", f"{total_cost:.4f}"],
        ]
        print("RUN SUMMARY")
        print(build_table(run_rows))
        print()

        res_rows = [
            [
                str(r.id),
                r.eval_name,
                "✔" if r.success else "✘",
                f"{r.steps}/{r.max_steps}",
                r.model_name,
                f"{r.model_costs:.4f}",
                r.log_filepath,
                human_ts(r.created_at),
            ]
            for r in run.results
        ]
        if res_rows:
            headers = [
                "ID",
                "Eval Name",
                "Ok?",
                "Steps",
                "Model",
                "Cost ($)",
                "Log FilePath",
                "Created",
            ]
            print(build_table(res_rows, headers))
        else:
            print("<no child PentestResult rows>")
            return

        # Print step state legend and traces
        print()
        print("STEP STATE LEGEND")
        legend_items = [f"{abbr}={state.value}" for state, abbr in StepStateAbbr.items()]
        print(" | ".join(legend_items))
        print()

        print("STEP TRACES")

        # Build mapping eval_name -> List[List[AgentStep]]
        eval_map = defaultdict(list)
        row_map = defaultdict(list)
        for result in run.results:
            ctxt = get_agent_ctxt(session, result.id)
            if ctxt and ctxt.steps():
                eval_map[result.eval_name].append(ctxt.steps())
                row_label = f"Result {result.id} [{'T' if result.success else 'F'}]"
            else:
                eval_map[result.eval_name].append([])
                row_label = f"Result {result.id} [F]"
            row_map[result.eval_name].append(row_label)

        display_step_traces(eval_map, max_steps, row_names_map=row_map) 