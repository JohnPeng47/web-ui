from __future__ import annotations

from argparse import Namespace
from typing import List

from pentest_bot.db import get_session
from pentest_bot.db.tables.exploit_agent import delete_run, delete_result_group


def _parse_range(values: List[int]) -> List[int]:
    """Helper: interpret *one* or *two* ints (start end) as inclusive range."""
    if len(values) == 1:
        return values
    if len(values) == 2:
        start, end = values
        if start > end:
            raise ValueError(f"Invalid range: {start} > {end}")
        return list(range(start, end + 1))
    raise ValueError("Provide either 1 or 2 integers (start end)")


def delete_cmd(args: Namespace) -> None:
    """Delete Runs **or** (result_id, group_id) step groups.

    Modes
    -----
    • Run deletion:    delete --run-ids 10 12   (range or single)
    • Group deletion:  delete --result-id 7 --group-ids 0 2   (single or range)
    """

    if getattr(args, "run_ids", None):
        try:
            run_ids = _parse_range(args.run_ids)
        except ValueError as exc:
            print(f"[!] {exc}")
            return

        with get_session() as session:
            deleted, not_found = 0, 0
            for rid in run_ids:
                if delete_run(session, rid):
                    deleted += 1
                    print(f"[+] Deleted run {rid}")
                else:
                    not_found += 1
                    print(f"[!] Run {rid} not found")
            if len(run_ids) > 1:
                print(f"\nSummary: {deleted} runs deleted, {not_found} not found")
        return

    # Group deletion path -----------------------------------------------
    if not getattr(args, "result_id", None):
        print("[!] --result-id is required when deleting group IDs")
        return
    if not getattr(args, "group_ids", None):
        print("[!] --group-ids is required when deleting group IDs")
        return

    try:
        group_ids = _parse_range(args.group_ids)
    except ValueError as exc:
        print(f"[!] {exc}")
        return

    with get_session() as session:
        deleted, not_found = 0, 0
        for gid in group_ids:
            if delete_result_group(session, args.result_id, gid):
                deleted += 1
                print(f"[+] Deleted group {gid} from result {args.result_id}")
            else:
                not_found += 1
                print(f"[!] Group {gid} not found for result {args.result_id}")
        if len(group_ids) > 1:
            print(f"\nSummary: {deleted} groups deleted, {not_found} not found") 