"""Shared helper functions for CLI commands.

This module exists to avoid circular imports when individual command modules
live under ``pentest_bot.cli_db.cmds`` while ``cli_db`` remains the main entry
point that wires together the ``argparse`` sub-parser tree.
"""
from __future__ import annotations

from datetime import datetime
from typing import List, Sequence


def _build_table(
    rows: Sequence[Sequence[str]],
    headers: Sequence[str] | None = None,
    max_col: int = 50,
) -> str:
    """Return an ASCII table as a single string.

    The function calculates column widths from the *longest* cell in each
    column and then draws the grid using ``+``/``-``/``|`` glyphs which render
    correctly even in the Windows 10/11 default console font.
    """
    if not rows and not headers:
        return "<empty>"

    # Ensure we have at least one row to compute widths
    sample = rows[0] if rows else ["" for _ in headers]  # type: ignore[arg-type]
    col_count = len(headers or sample)

    widths: List[int] = [0] * col_count
    for col_idx in range(col_count):
        header_len = len(headers[col_idx]) if headers else 0  # type: ignore[index]
        max_cell = max((len(r[col_idx]) for r in rows), default=0)
        widths[col_idx] = min(max(header_len, max_cell), max_col)

    def _separator(char: str = "-") -> str:
        return "+" + "+".join(char * (w + 2) for w in widths) + "+"

    def _truncate_cell(cell: str, width: int) -> str:
        if len(cell) <= width:
            return cell
        return cell[: width - 3] + "..."

    def _format_row(row: Sequence[str]) -> str:
        return "| " + " | ".join(_truncate_cell(cell, widths[i]).ljust(widths[i]) for i, cell in enumerate(row)) + " |"

    parts: List[str] = [_separator()]
    if headers:
        parts.append(_format_row(headers))
        parts.append(_separator("="))
    for r in rows:
        parts.append(_format_row(r))
        parts.append(_separator())
    return "\n".join(parts)


def _human_ts(ts: datetime | None) -> str:
    """Format timestamps consistently across commands."""
    return ts.strftime("%Y-%m-%d %H:%M:%S") if ts else "â€”" 