"""
A drop-in replacement for the `requests` module that allows us to
transparently filter the response body for certain patterns *before* it's passed
to the agent. This is useful for redacting CSRF tokens, session cookies, or
other sensitive data that might confuse the LLM.
"""
from __future__ import annotations

import re
import types
from typing import List, Sequence

import requests as _orig_requests

PORTSWIGGER_LABS_PATTERNS = [
    "<title>",
    "<h2>",
    "class=link-back"
]

class FilteredResponse(_orig_requests.Response):
    """A requests.Response wrapper that filters .text for patterns."""

    def __init__(
        self,
        response: _orig_requests.Response,
        remove_patterns: List,
    ) -> None:
        super().__init__()
        remove_patterns.extend(PORTSWIGGER_LABS_PATTERNS)

        self.__dict__.update(response.__dict__)
        self._rx: List[re.Pattern[str]] = [re.compile(p) for p in remove_patterns]

    @property  # type: ignore[override]
    def text(self) -> str:
        """Return the response body with all matching lines removed."""
        raw = super().text
        return "\n".join(
            line for line in raw.splitlines() if not any(r.search(line) for r in self._rx)
        )


def filtered_get(url: str, *, remove_patterns=[], **kw) -> FilteredResponse:
    """A requests.get wrapper that returns a FilteredResponse."""
    resp = _orig_requests.get(url, **kw)
    return FilteredResponse(resp, remove_patterns=remove_patterns)


# Build the proxy module just once.
filtered_requests_module = types.ModuleType("requests")
filtered_requests_module.__dict__.update(_orig_requests.__dict__)
filtered_requests_module.get = filtered_get  # type: ignore[attr-defined]
filtered_requests_module.FilteredResponse = FilteredResponse  # type: ignore[attr-defined]
