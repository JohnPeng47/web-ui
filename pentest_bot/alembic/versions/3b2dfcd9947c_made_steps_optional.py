"""made steps optional

Revision ID: 3b2dfcd9947c
Revises: 20250724_repair_groups
Create Date: 2025-08-09 10:21:17.576689

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '3b2dfcd9947c'
down_revision: Union[str, Sequence[str], None] = '20250724_repair_groups'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # 1) Change pentest_results.steps to nullable=True (SQLite-safe via batch mode)
    with op.batch_alter_table("pentest_results") as batch_op:
        batch_op.alter_column(
            "steps",
            existing_type=sa.Integer(),
            nullable=True,
        )

    # 2) Add FK agent_steps.results_group_id -> results_group_ids.id (CASCADE)
    # On SQLite, create_foreign_key must be done in batch (table rebuild).
    bind = op.get_bind()
    if bind.dialect.name == "sqlite":
        with op.batch_alter_table("agent_steps") as batch_op:
            batch_op.create_foreign_key(
                "fk_agent_steps_results_group_ids",
                "results_group_ids",
                ["results_group_id"],
                ["id"],
                ondelete="CASCADE",
            )
    else:
        op.create_foreign_key(
            "fk_agent_steps_results_group_ids",
            "agent_steps",
            "results_group_ids",
            ["results_group_id"],
            ["id"],
            ondelete="CASCADE",
        )


def downgrade() -> None:
    # 1) Drop the FK (use batch on SQLite)
    bind = op.get_bind()
    if bind.dialect.name == "sqlite":
        with op.batch_alter_table("agent_steps") as batch_op:
            batch_op.drop_constraint(
                "fk_agent_steps_results_group_ids",
                type_="foreignkey",
            )
    else:
        op.drop_constraint(
            "fk_agent_steps_results_group_ids",
            "agent_steps",
            type_="foreignkey",
        )

    # 2) Revert pentest_results.steps to nullable=False (SQLite-safe)
    # If any NULLs might exist, set a default and backfill before tightening nullability.
    with op.batch_alter_table("pentest_results") as batch_op:
        # Optional safety if you expect NULLs:
        # batch_op.alter_column("steps", server_default="0")
        # op.execute("UPDATE pentest_results SET steps = 0 WHERE steps IS NULL")

        batch_op.alter_column(
            "steps",
            existing_type=sa.Integer(),
            nullable=False,
        )

        # Optional: drop temporary default if you set it above
        # batch_op.alter_column("steps", server_default=None)
