import re
from urllib.parse import urlparse
from typing import List, Tuple


class Route:
    """
    Represent a single (method, path-template) pair.

    Example template: "/rest/order-history/:id/delivery-status"
    ──> compiled to r"^/rest/order-history/[^/]+/delivery-status$"
    """

    _PARAM_RE = re.compile(r":([A-Za-z0-9_]+)")

    def __init__(self, method: str, template: str) -> None:
        self.method: str = method.upper()
        self.template: str = template
        pattern = self._PARAM_RE.sub(r"[^/]+", template)          # replace ":param" with a wildcard
        self._regex: re.Pattern[str] = re.compile(f"^{pattern}$")  # anchor to whole path

    # ---------------------------------------------------------------------
    # Public helpers
    # ---------------------------------------------------------------------

    def match(self, url: str, *, method: str | None = None) -> bool:
        """
        Return True if *url* (and optional *method*) match this route.

        • The query-string and fragment are ignored.
        • If *method* is omitted we only test the path.
        """
        if method is not None and method.upper() != self.method:
            return False

        path = urlparse(url).path
        return bool(self._regex.fullmatch(path))

    def __repr__(self) -> str:                                      # for nicer debugging prints
        return f"Route({self.method!r}, {self.template!r})"


if __name__ == "__main__":
    url = "http://147.79.78.153:3000/assets/public/images/uploads/%E1%93%9A%E1%98%8F%E1%97%A2-"
    route = Route("GET", "/assets/public/images/uploads/:name")
    print(route.match(url))