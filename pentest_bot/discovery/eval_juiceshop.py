import asyncio
import sys
import traceback
from logging import getLogger

import httpx

from browser_use.browser.browser import Browser, BrowserConfig
from browser_use.browser.context import BrowserContextConfig

from eval.client import DiscoveryEvalClient
from eval.datasets import JUICE_SHOP_ENDPOINTS

from src.agent.harness import AgentHarness
from src.agent.custom_prompts import CustomAgentMessagePrompt, CustomSystemPrompt
from src.agent.controllers.observation_contoller import ObservationController, ObservationModel
from src.llm_models import LLMHub

from pentest_bot.logger import setup_agent_logger

JUICE_SHOP_URL = ["http://147.79.78.153:3000"]
TEST_PAGE_TRANSIION = ["http://147.79.78.153:3000/#/contact", "http://147.79.78.153:3000/#/about", "http://147.79.78.153:3000/#/photo-wall", "http://147.79.78.153:3000"]

MODEL_DICT = {
    "browser_use": "gpt-4o",
    "check_plan_completion" : "gemini-2.5-flash",
    "determine_new_page" : "gemini-2.5-flash",
    "create_plan" : "gemini-2.5-flash",
    "update_plan" : "gemini-2.5-flash",
}

logger = getLogger(__name__)

class LabURLObservation(ObservationModel):
    lab_url: str

    def to_msg(self) -> str:
        return self.lab_url

async def start_agent(max_steps: int = 15, page_max_steps: int = 5) -> str | None:
    """
    Launches a PortSwigger browser/LLM agent that:
    1. Navigates to the lab listing.
    2. Clicks “Access the lab”.
    3. Logs in if redirected.
    4. Captures the redirected, unique lab URL.
    """
    class _LabURLObservation(LabURLObservation):
        """Local subclass to avoid mypy/name-conflict warnings."""

    # Browser config
    llm = LLMHub(MODEL_DICT)
    window_w, window_h = 1920, 1080
    browser = Browser(
        config=BrowserConfig(
            headless=False,
            disable_security=True,
            user_data_dir="tmp/profiles/john",
            extra_chromium_args=[f"--window-size={window_w},{window_h}"],
            chrome_instance_path=r"C:\Users\jpeng\AppData\Local\ms-playwright\chromium-1161\chrome-win\chrome.exe"
        )
    )

    shared_cfg = {
        "llm": llm,
        "use_vision": False,
        "tool_calling_method": "function_calling",
        "system_prompt_class": CustomSystemPrompt,
        "agent_prompt_class": CustomAgentMessagePrompt,
        "controller": ObservationController(_LabURLObservation),
        "app_id": None,
        "context_cfg": BrowserContextConfig(no_viewport=False),
        "close_browser": True
    }
    harness = AgentHarness(
        browser=browser,
        agents_config=[{
            "start_urls": TEST_PAGE_TRANSIION, 
            "agent_client": None,
            "eval_client": DiscoveryEvalClient(
                challenges=JUICE_SHOP_ENDPOINTS,
                async_client=httpx.AsyncClient()
            )
        }],
        common_kwargs=shared_cfg,
    )

    try:
        await harness.start_all(max_steps=max_steps, page_max_steps=page_max_steps)
        await harness.wait()
    except Exception:
        logger.error(">>>> Error during running the agent: ")
        traceback.print_exc(file=sys.stderr)
        return None
    finally:
        logger.error(">>>> Forcibly shutting down the agent: ")
        await harness.kill_all()
        await browser.close()

if __name__ == "__main__":
    setup_agent_logger(subfolder="discovery", eval_name="juiceshop")

    max_steps = 12
    page_max_steps = 6
    asyncio.run(start_agent(max_steps=max_steps, page_max_steps=page_max_steps))
