import asyncio
import re
import sys
import traceback
from logging import getLogger

from johnllm import LLMModel
from browser_use.browser.browser import Browser, BrowserConfig
from browser_use.browser.context import BrowserContextConfig
from src.agent.harness import AgentHarness
from src.agent.custom_prompts import CustomAgentMessagePrompt, CustomSystemPrompt
from src.agent.controllers.observation_contoller import ObservationController, ObservationModel

JUICE_SHOP_URL = "http://147.79.78.153:3000"
logger = getLogger(__name__)

class LabURLObservation(ObservationModel):
    lab_url: str

    def to_msg(self) -> str:
        return self.lab_url

async def start_agent(max_steps: int = 15) -> str | None:
    """
    Launches a PortSwigger browser/LLM agent that:
    1. Navigates to the lab listing.
    2. Clicks “Access the lab”.
    3. Logs in if redirected.
    4. Captures the redirected, unique lab URL.
    """
    class _LabURLObservation(LabURLObservation):
        """Local subclass to avoid mypy/name-conflict warnings."""

    # Browser config.
    llm = LLMModel()
    window_w, window_h = 1920, 1080
    browser = Browser(
        config=BrowserConfig(
            headless=False,
            disable_security=True,
            extra_chromium_args=[f"--window-size={window_w},{window_h}", "--incognito"],
        )
    )

    shared_cfg = {
        "llm": llm,
        "use_vision": False,
        "tool_calling_method": "function_calling",
        "system_prompt_class": CustomSystemPrompt,
        "agent_prompt_class": CustomAgentMessagePrompt,
        "controller": ObservationController(_LabURLObservation),
        "app_id": None,
        "context_cfg": BrowserContextConfig(no_viewport=False),
        "close_browser": True
    }
    harness = AgentHarness(
        browser=browser,
        agents_config=[{
            "start_url": JUICE_SHOP_URL, 
            "agent_client": None,
        }],
        common_kwargs=shared_cfg,
    )

    try:
        await harness.start_all(max_steps=max_steps)
        await harness.wait()

        # history_str = str(harness.get_history())
        # match = re.search(
        #     r"https://[0-9a-f]{32}\.web-security-academy\.net/",
        #     history_str,
        # )
        # return match.group(0) if match else None

    except Exception:
        logger.error(">>>> Error during running the agent: ")
        traceback.print_exc(file=sys.stderr)
        return None
    finally:
        logger.error(">>>> Forcibly shutting down the agent: ")
        await harness.kill_all()
        await browser.close()

if __name__ == "__main__":
    max_steps = 3
    asyncio.run(start_agent(max_steps=max_steps))
