from __future__ import annotations

"""Light-weight SQLite helper used by PentestBot.

This module centralises database connectivity so that other parts of the
package (e.g. the web-exploit driver) can simply import
``SessionLocal``/``PentestResult`` without worrying about engines or
schemas.
"""

from datetime import datetime
from pathlib import Path
from typing import Generator, Iterator

from sqlalchemy import Boolean, Column, DateTime, Float, Integer, String, ForeignKey, create_engine
from sqlalchemy.engine import Engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import Session, sessionmaker, relationship

# ---------------------------------------------------------------------------
# Engine & Session factory
# ---------------------------------------------------------------------------
_DB_FILE = Path(__file__).with_name("pentest_bot.sqlite")
# SQLite is included with CPython so we do not need an external runtime
_SQLITE_URL = f"sqlite:///{_DB_FILE}"

engine: Engine = create_engine(_SQLITE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)

# ---------------------------------------------------------------------------
# Declarative base & models
# ---------------------------------------------------------------------------
Base = declarative_base()


class PentestResult(Base):
    """ORM model that stores the outcome of a single PentestBot run."""

    __tablename__ = "pentest_results"

    id = Column(Integer, primary_key=True, autoincrement=True)
    run_id = Column(Integer, ForeignKey("runs.id", ondelete="CASCADE"), nullable=False)
    eval_name = Column(String, index=True, nullable=False)
    success = Column(Boolean, default=False, nullable=False)
    steps = Column(Integer, nullable=False)
    max_steps = Column(Integer, nullable=False)
    model_name = Column(String, nullable=False)
    model_costs = Column(Float, nullable=False)
    log_filepath = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)

    # relationship back-reference
    run = relationship("Run", back_populates="results")
    # relationship to agent steps
    agent_steps = relationship("AgentStep", back_populates="pentest_result", cascade="all, delete-orphan")


# ---------------------------------------------------------------------------
# AgentStep model (many-to-one with PentestResult)
# ---------------------------------------------------------------------------


class AgentStep(Base):
    """ORM model that stores individual agent steps within a PentestResult."""

    __tablename__ = "agent_steps"

    id = Column(Integer, primary_key=True, autoincrement=True)
    pentest_result_id = Column(Integer, ForeignKey("pentest_results.id", ondelete="CASCADE"), nullable=False)
    step_number = Column(Integer, nullable=False)
    reflection = Column(String, nullable=False)
    script = Column(String, nullable=False)
    add_to_scratchpad = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)

    # relationship back-reference
    pentest_result = relationship("PentestResult", back_populates="agent_steps")


# ---------------------------------------------------------------------------
# Parent Run model (one-to-many with PentestResult)
# ---------------------------------------------------------------------------


class Run(Base):
    """Represents a logical run containing 1-N `PentestResult`."""

    __tablename__ = "runs"

    id = Column(Integer, primary_key=True, autoincrement=True)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    comment = Column(String, nullable=True)
    parent_logdir = Column(String, nullable=False)
    is_eval = Column(Boolean, default=False, nullable=False)

    # collection of associated results
    results = relationship("PentestResult", back_populates="run", cascade="all, delete-orphan")



# ---------------------------------------------------------------------------
# Helpers
# ---------------------------------------------------------------------------

def init_db() -> None:
    """Create all tables **if they do not yet exist**."""

    Base.metadata.create_all(bind=engine)


def get_session() -> Iterator[Session]:
    """Context-manager friendly helper yielding a new DB session."""

    db: Session = SessionLocal()
    try:
        yield db
    finally:
        db.close()
