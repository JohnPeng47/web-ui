"""
xss_fastapi.py
--------------
FastAPI server hosting a reflection‑based XSS demo.

Visit:
    http://127.0.0.1:8000/xss_demo?msg=<img src=x onerror=alert(1)>

Press Ctrl+C to stop.
"""

from fastapi import FastAPI , Request
from fastapi.responses import HTMLResponse
import uvicorn

app = FastAPI(
    title="Reflection‑based XSS demo" ,
    description="Deliberately insecure page for educational testing." ,
    docs_url=None , redoc_url=None , openapi_url=None
)

VULN_PAGE = """\
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Reflection‑based XSS demo</title>
</head>
<body>
    <h1>Reflection‑based XSS demo</h1>
    <p id="greeting">{msg}</p>  <!-- DELIBERATELY UNSAFE REFLECTION -->
</body>
</html>
"""

@app.get("/xss_demo" , response_class=HTMLResponse)
async def xss_demo(msg: str = "") -> HTMLResponse:
    """
    Reflect the 'msg' query parameter verbatim into the HTML.
    Example: /xss_demo?msg=<img%20src=x%20onerror=alert(1)>
    """
    return HTMLResponse(VULN_PAGE.format(msg=msg))

def run_test_server(host: str = "127.0.0.1", port: int = 8000) -> None:
    """
    Launch the FastAPI / Uvicorn server in a separate thread and wait until it's ready.
    """
    import threading
    import time
    import requests
    from requests.exceptions import ConnectionError
    
    def start_server():
        uvicorn.run(app, host=host, port=port, reload=False)
    
    # Start server in a separate thread
    server_thread = threading.Thread(target=start_server, daemon=True)
    server_thread.start()
    
    # Poll until server is ready
    server_url = f"http://{host}:{port}"
    max_attempts = 30
    attempt = 0
    
    while attempt < max_attempts:
        try:
            response = requests.get(f"{server_url}/xss_demo", timeout=1)
            if response.status_code == 200:
                break
        except (ConnectionError, requests.exceptions.Timeout):
            pass
        
        time.sleep(0.1)
        attempt += 1
    
    if attempt >= max_attempts:
        raise RuntimeError(f"Server failed to start within {max_attempts * 0.1} seconds")

if __name__ == "__main__":
    run_test_server()
