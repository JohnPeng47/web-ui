#!/usr/bin/env python
"""Standalone sanity-check for the custom PythonInterpreter sandbox.

This script wires up a dummy ``browser_check_xss`` tool, injects it into
`PythonInterpreter`, and executes a snippet that imports and calls the tool
using *absolute* import syntax (``from browser_check_xss import ...``).

Run manually:

    python -m pentest_bot.tests.test_interpreter
"""

import importlib
import types
import sys
from typing import Dict, Any

# ---------------------------------------------------------------------------
# Load the PythonInterpreter class from the agent module (dynamic import
# because the package name contains a dash).
# ---------------------------------------------------------------------------

agent_mod = importlib.import_module("pentest_bot.web-exploit.agent")
PythonInterpreter = getattr(agent_mod, "PythonInterpreter")

# ---------------------------------------------------------------------------
# Create a *dummy* browser_check_xss tool so we avoid launching Playwright
# during this lightweight test.
# ---------------------------------------------------------------------------

def _dummy_browser_check_xss(url: str, wait_until: str = "load", timeout: int = 5000) -> bool:  # noqa: D401
    print(f"[dummy] Called browser_check_xss(url={url!r}, wait_until={wait_until}, timeout={timeout})")
    return True

# Tools dictionary mimicking the structure used by the main agent
TOOLS: Dict[str, Dict[str, Any]] = {
    "browser_check_xss": {
        "description": {
            "name": "browser_check_xss",
            "description": "Dummy XSS checker (no browser).",
            "parameters": {
                "url": {"type": "string", "description": "URL to check"}
            },
        },
        "tool": _dummy_browser_check_xss,
    }
}

# ---------------------------------------------------------------------------
# Prepare interpreter globals – reuse the helper logic implemented in agent
# (manually reproduced here for clarity).
# ---------------------------------------------------------------------------

shared_globals: Dict[str, Any] = {"TOOLS": TOOLS}
for _name, _cfg in TOOLS.items():
    func = _cfg["tool"]
    shared_globals[_name] = func

    # Also expose as standalone module for absolute import style
    mod = types.ModuleType(_name)
    mod.__dict__[_name] = func
    sys.modules[_name] = mod

# Composite "tools" package (optional)
composite_tools_mod = types.ModuleType("tools")
for _name, _cfg in TOOLS.items():
    setattr(composite_tools_mod, _name, _cfg["tool"])
sys.modules["tools"] = composite_tools_mod

# ---------------------------------------------------------------------------
# Execute a snippet that imports and calls the tool.
# ---------------------------------------------------------------------------

snippet = """
result = browser_check_xss("https://example.com")
print("Result from tool:", result)
"""

print("[+] Executing test snippet …\n")
interp = PythonInterpreter(shared_globals=shared_globals)
output = interp.run(snippet)
print("[+] Output from sandbox:\n" + output)
print("[✓] Interpreter tooling import test completed successfully.")
