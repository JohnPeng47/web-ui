from io import StringIO
import contextlib
import builtins

import requests

from pentest_bot.web_exploit.tools.interpreter import PythonInterpreter
from pentest_bot.web_exploit.tools.proxy import TruncatedPrint

from pentest_bot.tests.data.server import run_test_server

def test_request_and_session_proxy():
    interpreter = PythonInterpreter(max_print_len=50)

    # Test multiple prints with truncation, then reset
    proxied_output = interpreter.run(
        """
import requests
# First print - should print fully (short text)
print("Short text")
# Second print - should be truncated (long text that exceeds remaining limit)
print("This is a very long text that should definitely be truncated because it exceeds the maximum length limit")
"""
    )

    # Reset the print counter and test again
    interpreter.run("print('After reset')")

    real_res = requests.get("https://example.com")

    # Verify the proxy behavior
    assert "Short text" in proxied_output
    assert "This is a very long text" in proxied_output
    assert "---- Your output has been truncated to 50 characters. ----" in proxied_output
    assert "Example Domain" not in proxied_output
    assert "Example Domain" in real_res.text


def test_filtered_print_truncation_and_prefix():
    # Capture stdout for inspection
    buffer = StringIO()

    # Install the proxy
    proxy = TruncatedPrint(max_len=10)
    original_print = builtins.print
    builtins.print = proxy

    try:
        with contextlib.redirect_stdout(buffer):
            # This line should be truncated
            print("abcdefghijklmnopqrstuvwxyz")
            # This line should be untouched
            print("12345")
    finally:
        # Always restore original print
        builtins.print = original_print

    lines = buffer.getvalue().splitlines()

    assert lines[0] == "abcdefghij"
    assert lines[1] == "---- Your output has been truncated to 10 characters. ----"
    assert lines[2] == "12345"


def test_browser_check_xss():
    from pentest_bot.web_exploit.xss_client import register_xss_payload
    from pentest_bot.web_exploit.tools.browser_check import create_browser_check_xss, TOOLS_TEMPLATE as browser_tool_template
    from pentest_bot.web_exploit.tools.interpreter import PythonInterpreter
    
    run_test_server()

    client_cb, target_url = register_xss_payload()

    # Create the browser check function with the callback
    browser_check_fn = create_browser_check_xss(client_cb)
    
    # Create interpreter instance and expose the browser_check_xss tool
    shared_globals = {"browser_check_xss": browser_check_fn}
    interpreter = PythonInterpreter(shared_globals=shared_globals)
    
    # Call browser_check_xss with example.com in the interpreter script
    result = interpreter.run(f"""
result = browser_check_xss("http://127.0.0.1:8000/xss_demo?msg=<img src='{target_url}'>", "load", 10000)
print(result)
""")
    print(result)