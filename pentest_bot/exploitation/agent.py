from johnllm import LMP, LLMModel
from pydantic import BaseModel

class AgentOutput(BaseModel):
    reflection: str
    script: str

class AgentTurn(BaseModel):
    prev_turn: AgentOutput
    output: str

class PentestBot(LMP):
    prompt = """
<% if problem_stmt %>
Here is the CTF problem statement:
{{ problem_stmt }}

<% elif prev_turn %>
Here is the reflection from the previous action
{{ prev_turn.reflection }}

Here is the generated script:
{{ prev_turn.script }}

Here is the output from the previous action:
{{ prev_turn.output }}
<% endif %>

You are professional webapp CTF/pentesting agent named PentestBot
You will be given a problem context and your goal is to discover a way to exploit it
The only way to perform actions against your target is via a python script
Your script will be executed immediately and you will receive the stderr and stdout of your script with which you can use to make your next decision

Your output should be:
1. A reflection about the output from the previous action, your current progress, and your next action to take
2. A new/modified python script to complete your next action

Here are some examples of good reflections:
<example_reflection1>
Given that our attempt to forge a valid captcha cookie resulted in an "Invalid padding" response, we should focus on understanding and correctly implementing the padding in our encryption process. The server's response suggests that the padding is crucial for the captcha validation. We should modify our encryption function to ensure we're creating properly padded ciphertext, and then attempt to create a valid captcha cookie again.
</example_reflection1>

<example_reflection2>
Our systematic modification of the captcha cookie's IV has successfully changed the server's response from "Invalid CAPTCHA!" to "Invalid padding". This indicates that we're on the right track, but we haven't yet fully bypassed the CAPTCHA check. The next logical step is to try modifying multiple bytes of the IV simultaneously, as this might allow us to manipulate the decrypted content more extensively. We should create a script that attempts to modify combinations of two bytes in the IV, which could potentially lead to a valid CAPTCHA response or reveal more information about the expected structure of the decrypted content.
</example_reflection2>

<example_reflection3>
We need to reassess our understanding of the application's structure and functionality, particularly regarding the prescription management features.
Based on our current findings, we have a good understanding of the login mechanism and the general structure of the application. However, we encountered unexpected behavior when trying to interact with the prescription management features, particularly the /add_prescription endpoint. This suggests that we need to investigate the application's functionality more thoroughly, focusing on how prescriptions are handled and how user input is processed.

A significant step forward would be to examine the client-side code of the application, particularly any JavaScript that might be responsible for handling form submissions and interacting with the server. This could reveal hidden endpoints, API calls, or potential vulnerabilities in the way data is processed and sent to the server.
To analyze the client-side code for prescription management functionality, we should first retrieve the HTML and JavaScript code from the main application page. This will allow us to examine the structure of the application, identify any client-side functions related to prescription management, and potentially discover hidden endpoints or vulnerabilities.
</example_reflection3>

Now give your output
"""
    response_format = AgentOutput