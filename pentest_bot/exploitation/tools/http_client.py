import httpx
from typing import Optional, Dict, Any, Union
from urllib.parse import urljoin
import logging

class HTTPXWrapper:
    """
    A sync HTTPX client wrapper that returns truncated response tuples.
    
    Returns responses as formatted strings containing:
    (status_code, response_length, truncated_text)
    """
    
    def __init__(self, 
                 base_url: Optional[str] = None,
                 truncated: int = 1000,
                 timeout: float = 30.0,
                 logger: Optional[logging.Logger] = None,
                 **client_kwargs):
        """
        Initialize the HTTPX wrapper.
        
        Args:
            base_url: Base URL for relative requests
            truncated: Maximum length of response.text to return
            timeout: Request timeout in seconds
            **client_kwargs: Additional arguments passed to httpx.Client
        """
        self.base_url = base_url or ""
        self.truncated = truncated
        
        # Default client configuration
        client_config = {
            'timeout': timeout,
            'follow_redirects': True,
            **client_kwargs
        }
        
        self.client = httpx.Client(**client_config)
    
    def _format_response(self, response: httpx.Response) -> str:
        """
        Format response into a tuple string.
        
        Args:
            response: HTTPX response object
            
        Returns:
            Formatted string: "(status_code, response_length, truncated_text)"
        """
        status_code = response.status_code
        response_text = response.text
        response_length = len(response_text)
        truncated_text = response_text[:self.truncated]

        res_str = f"({status_code}, {response_length})\n"
        res_str += "-" * 50 + "\n"
        res_str += truncated_text

        return truncated_text
    
    def _build_url(self, url: str) -> str:
        """Build full URL from base_url and relative URL."""
        if self.base_url and not url.startswith(('http://', 'https://')):
            return urljoin(self.base_url, url)
        return url
    
    def get(self, url: str, **kwargs) -> str:
        """
        Perform GET request and return formatted response tuple.
        
        Args:
            url: Request URL (can be relative if base_url is set)
            **kwargs: Additional arguments passed to httpx.get
            
        Returns:
            Formatted response string
        """
        full_url = self._build_url(url)
        response = self.client.get(full_url, **kwargs)
        return self._format_response(response)
    
    def post(self, url: str, **kwargs) -> str:
        """
        Perform POST request and return formatted response tuple.
        
        Args:
            url: Request URL (can be relative if base_url is set)
            **kwargs: Additional arguments passed to httpx.post
            
        Returns:
            Formatted response string
        """
        full_url = self._build_url(url)
        response = self.client.post(full_url, **kwargs)
        return self._format_response(response)
    
    def put(self, url: str, **kwargs) -> str:
        """
        Perform PUT request and return formatted response tuple.
        
        Args:
            url: Request URL (can be relative if base_url is set)
            **kwargs: Additional arguments passed to httpx.put
            
        Returns:
            Formatted response string
        """
        full_url = self._build_url(url)
        response = self.client.put(full_url, **kwargs)
        return self._format_response(response)
    
    def delete(self, url: str, **kwargs) -> str:
        """
        Perform DELETE request and return formatted response tuple.
        
        Args:
            url: Request URL (can be relative if base_url is set)
            **kwargs: Additional arguments passed to httpx.delete
            
        Returns:
            Formatted response string
        """
        full_url = self._build_url(url)
        response = self.client.delete(full_url, **kwargs)
        return self._format_response(response)
    
    def patch(self, url: str, **kwargs) -> str:
        """
        Perform PATCH request and return formatted response tuple.
        
        Args:
            url: Request URL (can be relative if base_url is set)
            **kwargs: Additional arguments passed to httpx.patch
            
        Returns:
            Formatted response string
        """
        full_url = self._build_url(url)
        response = self.client.patch(full_url, **kwargs)
        return self._format_response(response)
    
    def request(self, method: str, url: str, **kwargs) -> str:
        """
        Perform generic HTTP request and return formatted response tuple.
        
        Args:
            method: HTTP method (GET, POST, etc.)
            url: Request URL (can be relative if base_url is set)
            **kwargs: Additional arguments passed to httpx.request
            
        Returns:
            Formatted response string
        """
        full_url = self._build_url(url)
        response = self.client.request(method, full_url, **kwargs)
        return self._format_response(response)
    
    def set_truncated(self, length: int) -> None:
        """Update the truncation length for future requests."""
        self.truncated = length
    
    def close(self) -> None:
        """Close the underlying HTTPX client."""
        self.client.close()
    
    def __enter__(self):
        """Context manager entry."""
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit."""
        self.close()

