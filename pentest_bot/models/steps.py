from typing import List, Optional, TYPE_CHECKING
import enum

from pydantic import BaseModel

if TYPE_CHECKING:
    from pentest_bot.db.tables.exploit_agent import AgentStepORM

class StepState(str, enum.Enum):
    PROBING = "PROBING"
    SUSPECT = "SUSPECT"
    PROMISING = "PROMISING"
    SOFT_PIVOT = "SOFT_PIVOT"
    HARD_PIVOT = "HARD_PIVOT"
    ERROR = "ERROR"

StepStateAbbr = {
    StepState.PROBING: "P",
    StepState.SUSPECT: "S",
    StepState.PROMISING: "Prm",
    StepState.SOFT_PIVOT: "PS",
    StepState.HARD_PIVOT: "PH",
    StepState.ERROR: "E",
}

class AgentStepLM(BaseModel):
    """LLM response schema expected by :pymeth:`PentestBot.invoke`."""
    reflection: str
    script: str
    add_to_scratchpad: str = ""

    def is_complete(self) -> bool:  # noqa: D401 â€“Â imperative mood
        """Return *True* iff the agent signalled task completion."""

        return "TASK_COMPLETE" in self.script or "TASK_COMPLETE" in self.reflection
    
class AgentStep(AgentStepLM):
    step_num: int
    execution_output: Optional[str] = None
    step_type: Optional[StepState] = None

    @classmethod
    def from_db(cls, agent_step: "AgentStepORM") -> "AgentStep":
        return cls(
            step_num=agent_step.step_number,
            reflection=agent_step.reflection,
            script=agent_step.script,
            execution_output=agent_step.execution_output,
            step_type=agent_step.step_type,
        )

    # TODO: should deprecate and use agentContext instead to construct prompt_str repr
    def result(self) -> str:
        return f"[Step {self.step_num}]: {self.reflection}\nScript Output: {self.execution_output}"


class AgentContext:
    """The main interface for interacting agent step history"""
    def __init__(self, agent_steps: List[AgentStep]):
        self._ctxt = agent_steps
        self._curr_step = 0

    @classmethod
    def from_db(cls, agent_steps: List["AgentStepORM"]) -> "AgentContext":
        return cls([AgentStep.from_db(s) for s in agent_steps])
    
    def update(self, agent_step: AgentStep) -> None:
        self._ctxt.append(agent_step)

    def steps(self) -> List[AgentStep]:
        return self._ctxt

    def prev_step(self) -> AgentStep | None:
        if not self._ctxt:
            return None
        return self._ctxt[-1]
    
    def history(self, end: Optional[int] = None) -> str:
        return "\n".join([f"[Step {i}] {step.reflection}" for i, step in enumerate(self._ctxt[:end], start=1)])
