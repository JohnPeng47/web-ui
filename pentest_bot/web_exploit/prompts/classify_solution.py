import enum
from typing import List, Dict, Optional, TYPE_CHECKING

from opik.api_objects.prompt.types import PromptType
from pydantic import BaseModel

from src.llm_models import openai_o3_mini
from src.llm_provider import LMP, LMPVerificationException

from pentest_bot.models.steps import StepState, AgentStep
from .base import Prompt

class CorrectStep(BaseModel):
    solution_step: str
    agent_step: str
    
class ClosestStep(BaseModel):
    solution_step: str
    agent_step: str

class Mistake(BaseModel):
    step_range: List[int]
    mistake: str

class AgentCritique(BaseModel):
    correct_steps: List[CorrectStep]
    closest_steps: List[ClosestStep]
    mistakes: List[Mistake]

    def __str__(self):
        result = []
        
        if self.correct_steps:
            result.append("Correct Steps:")
            for step in self.correct_steps:
                result.append(f"  Solution: {step.solution_step}")
                result.append(f"  Agent: {step.agent_step}")
                result.append("")
        
        if self.closest_steps:
            result.append("Closest Steps:")
            for step in self.closest_steps:
                result.append(f"  Solution: {step.solution_step}")
                result.append(f"  Agent: {step.agent_step}")
                result.append("")
        
        if self.mistakes:
            result.append("Mistakes:")
            for mistake in self.mistakes:
                result.append(f"  Steps {mistake.step_range}: {mistake.mistake}")
        
        return "\n".join(result).strip()
        

class CheckAgentSol(LMP):
    prompt = "classify-solution"
    response_format = AgentCritique

class ClassifySolutionPrompt(Prompt):
    name: str = "classify-solution"
    prompt: str = """
<agent_trace>
{{trace}}
</agent_trace>

<success>
{{success}}
</success>

<solution>
{{solution}}
</solution>

You are given the agent's trace of actions and the correct solution step
You role is to:
1. Identify which of the agent's steps match the solution steps, if any

If agent failed:
2. Identify the *closest* it got to the *next* step of the solution
3. Write a reflection on the list of the agent's mistakes
"""
    type: PromptType = PromptType.JINJA2