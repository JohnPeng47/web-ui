import sys
import opik

from typing import List

from .base import Prompt
from .classify_steps import ClassifyStepsPrompt
from .exploit_agent import XSSAgentPrompt
from .classify_solution import ClassifySolutionPrompt
from .site_agent import SiteAgentPrompt

class AgentPrompt:
    def __init__(self, prompts: List[Prompt]):
        self.prompts = prompts
    
    def __iter__(self):
        return iter(self.prompts)
    
    def __getitem__(self, prompt_name: str):
        for prompt in self.prompts:
            if prompt.name == prompt_name:
                return prompt
        raise KeyError(f"Prompt {prompt_name} not found")
    
    def get(self, prompt_name: str, default=None):
        for prompt in self.prompts:
            if prompt.name == prompt_name:
                return prompt
        return default

PROMPTS_TO_TRACK = AgentPrompt([
    ClassifyStepsPrompt(),
    XSSAgentPrompt(),
    ClassifySolutionPrompt(),
    SiteAgentPrompt()
])

if __name__ == "__main__":
    opik_client = opik.Opik()
    for prompt in PROMPTS_TO_TRACK:
        existing_prompt = opik_client.get_prompt(prompt.name)
        if existing_prompt:
            if existing_prompt.prompt != prompt.prompt or existing_prompt.type != prompt.type:
                print(f"Prompt {prompt.name} already exists but prompt is different, updating ...")
            else:
                print(f"Prompt {prompt.name} already exists and prompt is the same")
                continue
        else:
            print(f"Prompt {prompt.name} does not exist, creating ...")

        existing_prompt = opik_client.create_prompt(
            name=prompt.name,
            prompt=prompt.prompt,
            type=prompt.type,
        )

        print(f"Using prompt {existing_prompt.name}:{existing_prompt.commit}")
