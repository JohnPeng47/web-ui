from typing import List, Tuple, Callable, Dict
from pydantic import BaseModel

from src.llm_models import LLMHub

from pentest_bot.web_exploit.base_agent import LaunchPentestBots, LabInfo, AGENT_PROMPT
from scripts.portswigger.data import PORT_SWIGGER_LABS, PROMPT_TEMPLATES

from pentest_bot.web_exploit.xss_client import register_xss_payload
from pentest_bot.web_exploit.tools.browser_check import create_browser_check_xss, TOOLS_TEMPLATE as browser_tool_template

class PortSwiggerLabInfo(BaseModel):
    url: str
    vuln_class: str
    lab_ind: int
    iters: int


class LaunchExploitLab(LaunchPentestBots):
    def _prepare_lab(self, url: str,  lab_info: PortSwiggerLabInfo) -> Tuple[str, Callable[[], bool], Dict]:
        vuln_class = lab_info.vuln_class    
        lab_ind = lab_info.lab_ind

        labs = PORT_SWIGGER_LABS[vuln_class]
        key = "with_description" if self.include_description else "without_description"
        problem_statement = PROMPT_TEMPLATES[vuln_class][key]

        if vuln_class == "cross_site_scripting":
            client_cb, target_url = register_xss_payload()
            tool_fn = create_browser_check_xss(client_cb)

            browser_tool_template["browser_check_xss"]["tool"] = tool_fn

            if self.include_description:
                problem_statement = problem_statement.format(
                    url=url,
                    description=labs[lab_ind].get("description", ""),
                    target_url=target_url,
                )
            else:
                problem_statement = problem_statement.format(url=url, target_url=target_url)

            eval_fn = client_cb
        else:
            eval_fn = labs[lab_ind].get("eval_fn")

        return problem_statement, eval_fn, browser_tool_template, {}

if __name__ == "__main__":
    import argparse
    
    LOG_FOLDER = "xss_agent"
    MAX_STEPS = 24
    MAX_ITERS = 3
    LLM_FUNCS = {
        "agent": "gpt-4o",
    }

    parser = argparse.ArgumentParser(description="Run PentestBot labs")
    parser.add_argument("--eval", action="store_true", help="Persist results to DB")
    parser.add_argument("--comment", "-m",type=str, help="Comment describing this run")
    args = parser.parse_args()

    if args.eval and not args.comment:
        raise ValueError("--comment is required when --eval is set")

    LAB_URLS = [
        PortSwiggerLabInfo(
            url="https://0a60005103a3666380ae036600a600e5.web-security-academy.net/", 
            vuln_class="cross_site_scripting", 
            lab_ind=11, 
            iters=MAX_ITERS
        ),
        
        PortSwiggerLabInfo(
            url="https://0a2800cf0361fee982286fc500c3003b.web-security-academy.net/", 
            vuln_class="cross_site_scripting", 
            lab_ind=18, 
            iters=MAX_ITERS
        ),
        
        PortSwiggerLabInfo(
            url="https://0a4f00c9031ab3d38099033b004c00ec.web-security-academy.net/", 
            vuln_class="cross_site_scripting", 
            lab_ind=10, 
            iters=MAX_ITERS
        ),
        
        PortSwiggerLabInfo(
            url="https://0a29000e03f358b481c7e9af00210096.web-security-academy.net/", 
            vuln_class="cross_site_scripting", 
            lab_ind=12, 
            iters=MAX_ITERS
        ),
    ]

    def unroll_iter_labs(lab_urls: List[PortSwiggerLabInfo]) -> List[PortSwiggerLabInfo]:
        unrolled_labs = []
        for lab in lab_urls:
            for _ in range(lab.iters):
                unrolled_labs.append(PortSwiggerLabInfo(url=lab.url, vuln_class=lab.vuln_class, lab_ind=lab.lab_ind, iters=1))
        return unrolled_labs

    # TODO: configure a tools use interface on init ???
    bots = LaunchExploitLab(
        lab_urls=unroll_iter_labs(LAB_URLS),
        model=LLMHub(function_map=LLM_FUNCS),
        agent_prompt=AGENT_PROMPT,
        max_steps=MAX_STEPS,
        include_description=False,
        log_subfolder=LOG_FOLDER,
        eval=args.eval,
        comment=args.comment,
    )
    bots.start_labs()



