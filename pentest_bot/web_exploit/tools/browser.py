"""
A thin Playwright wrapper for arbitrary GET requests **without**
building a new browser each call.
"""

from contextlib import AbstractContextManager
from typing import Tuple

from playwright.sync_api import sync_playwright, BrowserContext


class BrowserClient(AbstractContextManager):
    """
    Context manager yielding a **BrowserContext** so downstream tools
    (browser_fetch, browser_check_xss, etc.) can reuse it.

    Example
    -------
    with BrowserClient() as ctx:
        status, length = browser_fetch("https://example.com", context=ctx)
    """

    def __init__(self, headless: bool = True, **launch_kwargs):
        self._playwright = sync_playwright().start()
        self._browser = self._playwright.chromium.launch(
            headless=headless,
            args=["--no-sandbox"],
            **launch_kwargs,
        )
        self._context = self._browser.new_context()

    # ---------- public helper ------------------------------------------------ #
    def fetch(
        self,
        url: str,
        *,
        context: BrowserContext,
        wait_until: str = "load",
        timeout: int = 10_000,
    ) -> Tuple[int, int]:
        if not url.startswith(("http://", "https://")):
            raise ValueError("BrowserClient.fetch: url must start with http:// or https://")

        page = context.new_page()
        resp = page.goto(url, wait_until=wait_until, timeout=timeout)
        status = resp.status if resp else 200
        body_len = len(page.content())
        page.close()
        return status, body_len

    # ---------- context-manager plumbing ------------------------------------ #
    def __enter__(self) -> BrowserContext:  # type: ignore[override]
        return self._context

    def __exit__(self, exc_type, exc_value, traceback):
        self._browser.close()
        self._playwright.stop()