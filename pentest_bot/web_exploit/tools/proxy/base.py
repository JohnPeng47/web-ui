"""
Unified proxy framework
    * ModuleProxy  – generic module wrapper
    * CallableProxy – generic callable wrapper
    * RequestsModuleProxy – concrete drop-in for `requests`
"""

from __future__ import annotations

import types
from typing import Any, Callable, List

# ────────────────────────────────────────────────────────────────────
# 1.  Generic module proxy
# ────────────────────────────────────────────────────────────────────
class ModuleProxy(types.ModuleType):
    """
    Clone *base_module*'s namespace, then apply **overrides.
    Sub-class this to build one-liner drop-ins for sys.modules[…].
    """

    def __init__(
        self,
        base_module: types.ModuleType,
        *,
        overrides: dict[str, Any] | None = None,
    ) -> None:
        super().__init__(base_module.__name__)
        self.__dict__.update(base_module.__dict__)      # start with original
        if overrides:
            self.__dict__.update(overrides)             # patch/inject


# ────────────────────────────────────────────────────────────────────
# 2.  Generic callable proxy (unchanged, still useful)
# ────────────────────────────────────────────────────────────────────
class CallableProxy:
    def __init__(self, orig: Callable[..., Any]) -> None:
        self._orig = orig
        self._count = 0

    def __call__(self, *args: Any, **kw: Any) -> Any:
        self._count += 1
        return self._orig(*args, **kw)

    @property
    def call_count(self) -> int:
        return self._count