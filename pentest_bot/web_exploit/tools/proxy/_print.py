from __future__ import annotations

import builtins
from typing import Any, Callable

from .base import CallableProxy

class TruncatedPrint(CallableProxy):
    """
    Prefix every print, keep a call counter, and truncate long arguments.

    Parameters
    ----------
    orig : Callable[..., Any]
        The original print (defaults to builtins.print).
    prefix : str
        String prepended to every line.
    max_len : int
        Maximum length for each argumentâ€™s string representation
        (characters beyond this are replaced with `trunc_suffix`).
    trunc_suffix : str
        What to append when truncation occurs (default: "...").
    """

    def __init__(
        self,
        orig: Callable[..., Any] = builtins.print,
        *,
        max_len: int = 120,
    ) -> None:
        super().__init__(orig)
        self._max_len = max_len
        self._trunc_suffix = f"\n---- Your output has been truncated to {max_len} characters. ----"

    # ------------------------------------------------------------------
    # Internal helpers
    # ------------------------------------------------------------------
    def _truncate(self, text: str) -> str:
        if len(text) <= self._max_len:
            return text
        return f"{text[: self._max_len]}{self._trunc_suffix}"

    # ------------------------------------------------------------------
    # Public call
    # ------------------------------------------------------------------
    def __call__(self, *args: Any, **kw: Any) -> Any:
        self._count += 1
        truncated_args = [self._truncate(str(a)) for a in args]
        return self._orig(*truncated_args, **kw)
