#!/usr/bin/env python3
"""
Simple Python script to test if OWASP ZAP API is working.
Requires ZAP to be running in daemon mode or desktop mode with API enabled.

Prerequisites:
- Install requests: pip install requests
- Start ZAP with API enabled (default port 8080)
"""

import requests
import json
import sys
from urllib.parse import urljoin

class ZAPAPITester:
    def __init__(self, zap_url="http://localhost:8080", api_key=None):
        """
        Initialize ZAP API tester
        
        Args:
            zap_url (str): ZAP proxy URL (default: http://localhost:8080)
            api_key (str): API key if required (None for no key)
        """
        self.zap_url = zap_url
        self.api_key = api_key
        self.session = requests.Session()
        
        # Disable SSL warnings for testing
        requests.packages.urllib3.disable_warnings()
    
    def _make_request(self, endpoint, params=None):
        """Make API request to ZAP"""
        if params is None:
            params = {}
        
        # Add API key if provided
        if self.api_key:
            params['apikey'] = self.api_key
        
        url = urljoin(self.zap_url, endpoint)
        
        try:
            response = self.session.get(url, params=params, timeout=10)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.ConnectionError:
            raise Exception(f"Cannot connect to ZAP at {self.zap_url}")
        except requests.exceptions.Timeout:
            raise Exception("Request timed out")
        except requests.exceptions.HTTPError as e:
            raise Exception(f"HTTP error: {e}")
        except json.JSONDecodeError:
            raise Exception("Invalid JSON response")
    
    def test_connection(self):
        """Test basic connection to ZAP API"""
        print("Testing ZAP API connection...")
        try:
            response = self._make_request("/JSON/core/view/version/")
            version = response.get('version', 'Unknown')
            print(f"✓ Connected to ZAP version: {version}")
            return True
        except Exception as e:
            print(f"✗ Connection failed: {e}")
            return False
    
    def test_core_functionality(self):
        """Test core ZAP API functionality"""
        print("\nTesting core API functionality...")
        
        tests = [
            ("/JSON/core/view/hosts/", "Get hosts"),
            ("/JSON/core/view/sites/", "Get sites"),
            ("/JSON/core/view/alerts/", "Get alerts"),
            ("/JSON/core/view/numberOfAlerts/", "Get alert count")
        ]
        
        results = []
        for endpoint, description in tests:
            try:
                response = self._make_request(endpoint)
                print(f"✓ {description}: OK")
                results.append(True)
            except Exception as e:
                print(f"✗ {description}: {e}")
                results.append(False)
        
        return all(results)
    
    def test_spider_api(self):
        """Test spider API endpoints"""
        print("\nTesting spider API...")
        
        try:
            # Check spider status
            response = self._make_request("/JSON/spider/view/status/")
            print(f"✓ Spider status check: OK")
            return True
        except Exception as e:
            print(f"✗ Spider API test failed: {e}")
            return False
    
    def test_passive_scanner(self):
        """Test passive scanner API"""
        print("\nTesting passive scanner API...")
        
        try:
            response = self._make_request("/JSON/pscan/view/recordsToScan/")
            records = response.get('recordsToScan', 0)
            print(f"✓ Passive scanner records to scan: {records}")
            return True
        except Exception as e:
            print(f"✗ Passive scanner test failed: {e}")
            return False
    
    def test_context_management(self):
        """Test context management API"""
        print("\nTesting context management...")
        
        try:
            response = self._make_request("/JSON/context/view/contextList/")
            contexts = response.get('contextList', [])
            print(f"✓ Context list retrieved: {len(contexts)} contexts")
            return True
        except Exception as e:
            print(f"✗ Context management test failed: {e}")
            return False
    
    def run_all_tests(self):
        """Run all API tests"""
        print("=" * 50)
        print("OWASP ZAP API Test Suite")
        print("=" * 50)
        
        # Test basic connection first
        if not self.test_connection():
            print("\n❌ Cannot establish connection to ZAP API")
            print("Make sure ZAP is running and API is enabled")
            return False
        
        # Run additional tests
        tests = [
            self.test_core_functionality,
            self.test_spider_api,
            self.test_passive_scanner,
            self.test_context_management
        ]
        
        results = []
        for test in tests:
            results.append(test())
        
        # Summary
        print("\n" + "=" * 50)
        passed = sum(results)
        total = len(results) + 1  # +1 for connection test
        
        if all(results):
            print(f"🎉 All tests passed! ({passed + 1}/{total})")
            print("ZAP API is working correctly")
            return True
        else:
            failed = total - passed - 1
            print(f"⚠️  Some tests failed: {passed + 1}/{total} passed, {failed} failed")
            return False

def main():
    """Main function"""
    # You can customize these settings
    ZAP_URL = "http://localhost:8080"
    API_KEY = "qello7g1hep9n2338atk7f9jea"  # Set your API key here if required
    
    print("ZAP API Connectivity Test")
    print(f"Target: {ZAP_URL}")
    
    if len(sys.argv) > 1:
        ZAP_URL = sys.argv[1]
        print(f"Using custom URL: {ZAP_URL}")
    
    if len(sys.argv) > 2:
        API_KEY = sys.argv[2]
        print("Using provided API key")
    
    tester = ZAPAPITester(ZAP_URL, API_KEY)
    
    try:
        success = tester.run_all_tests()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\nTest interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\nUnexpected error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()