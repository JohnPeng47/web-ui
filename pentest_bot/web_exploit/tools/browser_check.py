# src/tools/browser.py
from playwright.sync_api import sync_playwright
from typing import Tuple, Callable

def create_browser_check_xss(check_cb: Callable[[], bool]) -> Callable[[str, str, int], str]:
    """
    Creates a browser XSS check function with a predefined check callback.
    
    Args:
        check_cb: Callback function to check for XSS
        
    Returns:
        Function that takes (url, wait_until, timeout) and returns bool
    """
    def browser_check_xss(url: str, wait_until: str = "load", timeout: int = 10000) -> str:
        """
        Headless Chromium request through Playwright.

        Returns:
            (status_code, len(response_body))
        """
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True, args=["--no-sandbox"])
            context = browser.new_context()
            page = context.new_page()
            resp = page.goto(url, wait_until=wait_until, timeout=timeout)
            # `resp` is None if the navigation was served from cache
            status = resp.status if resp else 200
            body_len = len(page.content())
            browser.close()

            ret = "XSS Payload Executed" if check_cb() else "XSS Payload Not Executed"
            
            # print ret for agent to see
            print(ret)
            
            return ret
    return browser_check_xss

TOOLS_TEMPLATE = {
    "browser_check_xss": {
        "description": {
            "name": "browser_check_xss",
            "description": """
Check if page is vulnerable to XSS by fetching the vulnerable URL
Note that this tool should only be used to confirm your XSS payload hypothesis.
You should be following regular testing methodologies to establish a high-confidence payload first before calling this tool
""",
            "parameters": {
                "url": {
                    "type": "string",
                    "description": "The URL to check"
                }
            },
            "examples": """
browser_check_xss(url="https://example.com/search?q=<img src=x onerror=alert(1)>")\n
browser_check_xss(url="https://example.com/comment?text=<svg%20onload=alert('xss')>")\n
browser_check_xss(url="https://example.com/view?param=%3Cscript%3Ealert('encoded')%3C%2Fscript%3E")\n
            """
        },
        "tool": None,
    }
}