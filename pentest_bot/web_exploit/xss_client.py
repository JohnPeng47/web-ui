import httpx, time, sys, asyncio

BASE = "https://cowboy.rocks/xss"         # public URL fronted by Nginx

def register_xss_payload(timeout: int = 60):
    """Register a fresh XSS payload and return a tuple consisting of
    (callback_function, target_url).

    The *callback_function* performs a quick poll (non-blocking, <1s) against
    the /client/<id> endpoint and returns *True* if the payload has executed
    in the victim's browser.  This callback is intended to be passed as
    ``eval_fn`` to :class:`PentestSession` so the outer orchestration loop can
    terminate automatically once the exploit succeeds.
    """

    import httpx  # local import to keep the public namespace clean

    client = httpx.Client(timeout=timeout)

    # Step 1 – obtain a fresh payload identifier
    resp = client.post(f"{BASE}/register")
    resp.raise_for_status()
    data = resp.json()

    payload_id: str = data["id"]
    target_url: str = data["target_url"]
    client_url: str = data["client_url"]

    print(f"[+] New payload id  : {payload_id}")
    print(f"[+] Target callback : {target_url}")

    # Closure used by the orchestration layer to verify success
    def _client_callback() -> bool:  # noqa: D401 – imperative mood
        poll = client.get(client_url, params={"wait": 1})
        poll.raise_for_status()
        body = poll.json()
        return bool(body.get("executed", False))

    return _client_callback, target_url

async def main():
    async with httpx.AsyncClient(timeout=60) as http:
        # Step 1 – ask for a fresh payload
        r = await http.post(f"{BASE}/register")
        r.raise_for_status()
        data = r.json()
        pid = data["id"]
        print(f"[+] New payload id  : {pid}")
        print(f"[+] Inject this HTML: <img src='{data['target_url']}' style='display:none'>")

        # Step 2 – start long-poll loop
        while True:
            poll = await http.get(data["client_url"], params={"wait": 30})
            poll.raise_for_status()
            body = poll.json()
            if body["executed"]:
                print(f"[✓] XSS fired after {body['t_hit']:.2f}s")
                break
            else:
                print("[…] still waiting …")
                await asyncio.sleep(1)    # small gap between polls (optional)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        sys.exit(0)
