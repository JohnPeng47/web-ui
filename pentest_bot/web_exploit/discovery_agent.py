from typing import List, Tuple, Callable, Dict, Optional

from playwright.sync_api import sync_playwright

from pentest_bot.web_exploit.base_agent import LaunchPentestBots, LabInfo, PentestSession
from pentest_bot.web_exploit.tools.browser_check import TOOLS_TEMPLATE as browser_tool_template
from pentest_bot.web_exploit.prompts import DISCOVERY_PROMPT, DISCOVERY_PROMPTV2
from pentest_bot.web_exploit.utils import unroll_iter_labs

from src.llm_models import LLMHub

CHROME_EXE_PATH = r"C:\Users\jpeng\AppData\Local\ms-playwright\chromium-1161\chrome-win\chrome.exe"
CHROME_PROFILE_PATH = r"C:\Users\jpeng\AppData\Local\Google\Chrome\User Data\Default"

class DiscoveryLabInfo(LabInfo):
    pass

class LaunchDiscoveryBots(LaunchPentestBots):
    def start_pentest_session(self, 
                              model: LLMHub,
                              problem_statement: str, 
                              eval_fn: Callable[[], bool], 
                              agent_tools: Dict, 
                              agent_prompt_full: str,
                              thread_id: int):
        with sync_playwright() as p:
            browser = p.chromium.launch(
                executable_path=CHROME_EXE_PATH,
            )
            pw_context = browser.new_context()
            context_var_name = f"pw_context{thread_id}"

            interpreter = self.interp_cls(shared_globals={context_var_name: pw_context})
            interpreter.set_interp_modules_prompt(f"""
In your python scripting environment, you have access to an instance of *synchronous* PlayWright BrowserContext under the variable name "{context_var_name}"
You should interact with the web application in your scripts only by using {context_var_name}.request: 
ie. 
{context_var_name}.request.get("https://example.com")
{context_var_name}.request.post("https://example.com", data={{"key": "value"}})
...
""")
            session = PentestSession(
                problem_stmt=problem_statement,
                model=model,
                opik_agent_prompt=agent_prompt_full,
                max_steps=self.max_steps,
                eval_fn=eval_fn,
                interp_tools=agent_tools,
                interpreter=interpreter,
            )
            session.run()
            return session

    def _prepare_lab(self, url: str, lab_info: DiscoveryLabInfo) -> Tuple[Optional[str], Callable[[], bool], Dict, Dict]:
        problem_statement = """
This is the URL of the web application: {url}
Try to find a XSS vulnerability in this application
""".format(url=url)
        eval_fn = None
        browser_tool_template = {}

        return problem_statement, eval_fn, browser_tool_template

if __name__ == "__main__":
    import argparse

    LLM_FUNCS = {
        "agent": {
            "agent": "o3"
        },
        "runner": {
            "step_labeler": "o3-mini"
        }
    }
    MAX_STEPS = 16

    parser = argparse.ArgumentParser(description="Run PentestBot labs")
    parser.add_argument("--eval", action="store_true", help="Persist results to DB")
    parser.add_argument("--comment", "-m",type=str, help="Comment describing this run")
    args = parser.parse_args()

    if args.eval and not args.comment:
        raise ValueError("--comment is required when --eval is set")

    LAB_URLS: List[DiscoveryLabInfo] = [
        DiscoveryLabInfo(
            url="https://auth.thetradedesk.com/Account/Login?ReturnUrl=%2Fconnect%2Fauthorize%2Fcallback%3Fnonce%3D25a3710b9121228f08f27e14057ee214%26response_type%3Dcode%26redirect_uri%3Dhttps%253A%252F%252Fdesk.thetradedesk.com%252Fsignin-gw%26client_id%3Ddesk.refresh%26state%3D0b13e2d476217c5e1a210ab4eabd31cb%26scope%3Dopenid%2520ttdui_refresh%2520profile%2520email%2520offline_access%2520ttdapi_elevated", 
            name="thetradedesk", 
            lab_ind=0, 
            iters=1, 
        ),
        # DiscoveryLabInfo(
        #     url="https://ops-sso.adsrvr.org/auth/admin/master/console/", 
        #     name="adsrvr", 
        #     lab_ind=1, 
        #     iters=1, 
        # ),
        # DiscoveryLabInfo(
        #     url="https://portal.exoscale.com/login?next=%2F%3F", 
        #     name="exoscale", 
        #     lab_ind=2, 
        #     iters=1, 
        # ),
        # DiscoveryLabInfo(
        #     url="https://namestudio.com/", 
        #     name="namestudio", 
        #     lab_ind=3,    
        #     iters=1, 
        # ),
        DiscoveryLabInfo(
            url="https://jobs.mgm.mo", 
            name="mgm_jobs", 
            lab_ind=4, 
            iters=1, 
        ),
        # DiscoveryLabInfo(
        #     url="https://mlife.mo", 
        #     name="mlife", 
        #     lab_ind=5, 
        #     iters=1, 
        # ),
        DiscoveryLabInfo(
            url="https://data.limeinternal.com", 
            name="limeinternal", 
            lab_ind=6, 
            iters=1, 
        ),
    ]

    bots = LaunchDiscoveryBots(
        lab_urls=unroll_iter_labs(LAB_URLS),
        model=LLMHub(function_map=LLM_FUNCS["runner"]),
        agent_funcs=LLM_FUNCS["agent"],
        agent_prompt=DISCOVERY_PROMPTV2,
        max_steps=MAX_STEPS,
        include_description=False,
        log_subfolder="discovery_agent",
        is_eval=args.eval,
        comment=args.comment,
        label_steps=True,
    )
    bots.start_labs()
