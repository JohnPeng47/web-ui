from typing import List, Tuple, Callable, Dict, Optional
from pydantic import BaseModel

from playwright.sync_api import BrowserContext, Browser, sync_playwright

from pentest_bot.web_exploit.base_agent import LaunchPentestBots, LabInfo
from pentest_bot.web_exploit.tools.browser_check import TOOLS_TEMPLATE as browser_tool_template
from pentest_bot.web_exploit.prompts import DISCOVERY_PROMPT
from pentest_bot.web_exploit.tools.interpreter import PythonInterpreter

from src.llm_models import LLMHub

class DiscoveryLabInfo(LabInfo):
    browser_context: Tuple[Optional[BrowserContext], int]

    # TODO: we should be passing browser context through the thread arguments
    # instead of like this
    class Config:
        arbitrary_types_allowed = True

class DiscoveryInterpreter(PythonInterpreter):
    def get_interp_prompt(self) -> str:
        context_var_name = next(k for k in self._globals.keys() if k.startswith("pw_context"))
        if context_var_name is None:
            raise ValueError("No PlayWright BrowserContext found in the interpreter")
        
        return """
In your python scripting environment, you have access to an instance of PlayWright BrowserContext under the variable name "pw_context{index}"
You should interact with the web application in your scripts only by using {context}.request: 
ie. 
{context}.request.get("https://example.com")
{context}.request.post("https://example.com", data={"key": "value"})
...
""".format(context=context_var_name)

class LaunchDiscoveryBots(LaunchPentestBots):
    def _prepare_lab(self, url: str, lab_info: DiscoveryLabInfo) -> Tuple[Optional[str], Callable[[], bool], Dict, Dict]:
        problem_statement = """
There is a CTF challange at the web application at {url}

You can login with the following credentials:
username: gay@gmail.com
password: F@kepass123
""".format(url=lab_info.url)
        eval_fn = None
        browser_tool_template = {}

        interp_vars = {f"pw_context{lab_info.browser_context[1]}": lab_info.browser_context[0]}
        
        return problem_statement, eval_fn, browser_tool_template, interp_vars

if __name__ == "__main__":
    import argparse

    LLM_FUNCS = {
        "agent": "gpt-4o"
    }
    MAX_STEPS = 12

    parser = argparse.ArgumentParser(description="Run PentestBot labs")
    parser.add_argument("--eval", action="store_true", help="Persist results to DB")
    parser.add_argument("--comment", "-m",type=str, help="Comment describing this run")
    args = parser.parse_args()

    if args.eval and not args.comment:
        raise ValueError("--comment is required when --eval is set")

    LAB_URLS: List[DiscoveryLabInfo] = [
        DiscoveryLabInfo(
            url="http://localhost:8065/vulntest/channels/town-square", 
            name="mattermost", 
            lab_ind=0, 
            iters=1, 
            browser_context=(None, 0)
        ),
    ]

    with sync_playwright() as p:
        browser = p.chromium.launch()
        for lab in LAB_URLS:
            for i in range(lab.iters):
                lab.browser_context = (browser.new_context(), i)

        bots = LaunchDiscoveryBots(
            lab_urls=LAB_URLS,
            model=LLMHub(function_map=LLM_FUNCS),
            agent_prompt=DISCOVERY_PROMPT,
            max_steps=MAX_STEPS,
            include_description=False,
            log_subfolder="discovery_agent",
            eval=args.eval,
            comment=args.comment,
        )
        bots.start_labs()
