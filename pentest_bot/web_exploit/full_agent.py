from typing import List, Tuple, Callable, Dict
from pydantic import BaseModel

from pentest_bot.web_exploit.base_agent import LaunchPentestBots, PentestSession
from scripts.portswigger.data import PORT_SWIGGER_LABS, PROMPT_TEMPLATES

from pentest_bot.web_exploit.tools.browser_tools import create_browser_check_xss_tool, create_browser_fetch_tool
from pentest_bot.web_exploit.tools.browser import BrowserClient
from pentest_bot.web_exploit.utils import unroll_iter_labs


FULL_AGENT_TEMPLATE = """
You are asked to perform a pentest on a web application

Here is the site 

"""


class LaunchExploitLab(LaunchPentestBots):
    def start_pentest_session(self, prompt: str):
        """Starts a pentest session for a single lab"""

        with BrowserClient() as ctx:
            fetch_tool_template = create_browser_fetch_tool(ctx)
            
            if vuln_class == "cross_site_scripting":
                xss_check_tool_template, check_cb, target_url = create_browser_check_xss_tool(ctx)
                if self.include_description:
                    problem_statement = problem_statement.format(
                        url=url,
                        description=labs[lab_ind].get("description", ""),
                        target_url=target_url,
                    )
                else:
                    problem_statement = problem_statement.format(url=url, target_url=target_url)

                eval_fn = check_cb
                tools = {**xss_check_tool_template, **fetch_tool_template}
            else:
                eval_fn = labs[lab_ind].get("eval_fn")
                tools = fetch_tool_template

            interpreter = self.interp_cls(shared_globals=tools)
            interpreter.set_interp_modules_prompt("You should be using the page_goto tool to read the webpage content")
            
            session = PentestSession(
                model_config=self.llm_config["model_config"],
                prompt_config=self.llm_config["prompt_config"]["agent"],
                problem_stmt=problem_statement,
                max_steps=self.max_steps,
                eval_fn=eval_fn,
                interpreter=interpreter
            )
            session.run()
            return session

if __name__ == "__main__":
    import argparse
    
    LOG_FOLDER = "xss_agent"
    MAX_STEPS = 16
    MAX_ITERS = 3
    LLM_CONFIG = {
        "prompt_config":{
            "agent": {
                "name": "xss-agent",
                "commit": "247b8187"
            },
            "classify-steps": {
                "name": "classify-steps",
            }
        },
        "model_config": {
            "classify-steps": "o4-mini",
            "agent": "o3"
        }
    }

    parser = argparse.ArgumentParser(description="Run PentestBot labs")
    parser.add_argument("--eval", action="store_true", help="Persist results to DB")
    parser.add_argument("--comment", "-m",type=str, help="Comment describing this run")
    parser.add_argument("--model", type=str, help="Model to use")
    args = parser.parse_args()

    if args.eval and not args.comment:
        raise ValueError("--comment is required when --eval is set")

    if args.model:
        LLM_CONFIG["model_config"]["agent"] = args.model

    LAB_URLS = [
        PortSwiggerLabInfo(
            url="https://0a36002c032bbccc81706cfa002700d6.web-security-academy.net/", 
            vuln_class="cross_site_scripting", 
            lab_ind=9, 
            iters=MAX_ITERS
        ),
        
        # PortSwiggerLabInfo(
        #     url="https://0a5b006003b16a568168fda300ad0096.web-security-academy.net/", 
        #     vuln_class="cross_site_scripting", 
        #     lab_ind=8, 
        #     iters=MAX_ITERS
        # ),
        
        # PortSwiggerLabInfo(
        #     url="https://0a41001c0462e06780860358002600fc.web-security-academy.net/", 
        #     vuln_class="cross_site_scripting", 
        #     lab_ind=3, 
        #     iters=MAX_ITERS
        # ),
        
        # PortSwiggerLabInfo(
        #     url="https://0a09006d0392f4fb830646d300e7003d.web-security-academy.net/", 
        #     vuln_class="cross_site_scripting", 
        #     lab_ind=2, 
        #     iters=MAX_ITERS
        # ),
    ]

    # TODO: configure a tools use interface on init ???
    bots = LaunchExploitLab(
        lab_urls=unroll_iter_labs(LAB_URLS),        
        llm_config=LLM_CONFIG,
        max_steps=MAX_STEPS,
        include_description=False,
        log_subfolder=LOG_FOLDER,
        is_eval=args.eval,
        comment=args.comment,
        label_steps=True,
    )
    bots.start_labs()



