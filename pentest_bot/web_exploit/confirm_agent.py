from typing import List, Tuple, Callable, Dict
from pydantic import BaseModel

from src.llm_models import LLMHub

from pentest_bot.web_exploit.base_agent import LaunchPentestBots
from scripts.portswigger.data import PORT_SWIGGER_LABS, PROMPT_TEMPLATES

from pentest_bot.web_exploit.tools.browser_check import create_browser_check_xss
from pentest_bot.web_exploit.utils import unroll_iter_labs

class PortSwiggerLabInfo(BaseModel):
    url: str
    vuln_class: str
    lab_ind: int
    iters: int

    @property
    def name(self) -> str:
        return f"{self.vuln_class}_{self.lab_ind}"


class LaunchConfirmationAgent(LaunchPentestBots):
    def _prepare_lab(self, url: str,  lab_info: PortSwiggerLabInfo) -> Tuple[str, Callable[[], bool], Dict, str]:
        problem_statement = ""
        eval_fn = None
        browser_check_template, check_cb, target_url = create_browser_check_xss()
        return problem_statement, check_cb, browser_check_template, ""

if __name__ == "__main__":
    import argparse
    
    LOG_FOLDER = "xss_agent"
    MAX_STEPS = 16
    MAX_ITERS = 6
    LLM_CONFIG = {
        "prompt_config":{
            "agent": {
                "name": "xss-agent",
                "commit": "247b8187"
            },
            "classify-steps": {
                "name": "classify-steps",
            }
        },
        "model_config": {
            "classify-steps": "o4-mini",
            "agent": "o3"
        }
    }

    parser = argparse.ArgumentParser(description="Run PentestBot labs")
    parser.add_argument("--eval", action="store_true", help="Persist results to DB")
    parser.add_argument("--comment", "-m",type=str, help="Comment describing this run")
    parser.add_argument("--model", type=str, help="Model to use")
    args = parser.parse_args()

    if args.eval and not args.comment:
        raise ValueError("--comment is required when --eval is set")

    if args.model:
        LLM_CONFIG["model_config"]["agent"] = args.model

    LAB_URLS = [
        # PortSwiggerLabInfo(
        #     url="https://0a51000f03e51e8980ed039000e30056.web-security-academy.net/", 
        #     vuln_class="cross_site_scripting", 
        #     lab_ind=10,   
        #     iters=MAX_ITERS
        # ),
        
        # PortSwiggerLabInfo(
        #     url="https://0ad2000003f1288581816ba700f80050.web-security-academy.net/", 
        #     vuln_class="cross_site_scripting", 
        #     lab_ind=11, 
        #     iters=MAX_ITERS
        # ),
        
        PortSwiggerLabInfo(
            url="https://0ade002b03a84d9c811d2553002700e1.web-security-academy.net", 
            vuln_class="cross_site_scripting", 
            lab_ind=12, 
            iters=MAX_ITERS
        ),
        
        # PortSwiggerLabInfo(
        #     url="https://0af5004c0355ae45800076fd00fa0006.web-security-academy.net/", 
        #     vuln_class="cross_site_scripting", 
        #     lab_ind=18, 
        #     iters=MAX_ITERS
        # ),
    ]

    # TODO: configure a tools use interface on init ???
    bots = LaunchExploitLab(
        lab_urls=unroll_iter_labs(LAB_URLS),        
        llm_config=LLM_CONFIG,
        max_steps=MAX_STEPS,
        include_description=False,
        log_subfolder=LOG_FOLDER,
        is_eval=args.eval,
        comment=args.comment,
        label_steps=True,
    )
    bots.start_labs()



