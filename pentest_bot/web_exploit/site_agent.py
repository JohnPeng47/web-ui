from typing import List, Tuple, Callable, Dict
from pydantic import BaseModel

from pentest_bot.web_exploit.base_agent import LaunchPentestBots, PentestSession
from scripts.portswigger.data import PORT_SWIGGER_LABS, PROMPT_TEMPLATES

from pentest_bot.web_exploit.tools.browser_tools import create_browser_check_xss_tool, create_browser_fetch_tool
from pentest_bot.web_exploit.tools.browser import BrowserClient
from pentest_bot.web_exploit.utils import unroll_iter_labs

AIRFLOW_COOKIES = [
    {
        "domain": "147.79.78.153",
        "expirationDate": 1786227906,
        "hostOnly": True,
        "httpOnly": False,
        "name": "language",
        "path": "/",
        "sameSite": "Lax",
        "secure": False,
        "session": False,
        "storeId": None,
        "value": "en"
    },
    {
        "domain": "147.79.78.153",
        "expirationDate": 1757344007.109648,
        "hostOnly": True,
        "httpOnly": True,
        "name": "session",
        "path": "/",
        "sameSite": "Lax",
        "secure": False,
        "session": False,
        "storeId": None,
        "value": "3aec69f4-c07b-497b-a51e-db44a440119b.CySH1J-tGrDJEyoFsX9PsGbLPCs"
    },
    {
        "domain": "147.79.78.153",
        "expirationDate": 1786227909,
        "hostOnly": True,
        "httpOnly": False,
        "name": "welcomebanner_status",
        "path": "/",
        "sameSite": "Lax",
        "secure": False,
        "session": False,
        "storeId": None,
        "value": "dismiss"
    }
]

SITE_PROMPT = """
Navigate to the target URL and attempt 
"""

class RealSiteLabInfo(BaseModel):
    url: str
    name: str
    problem_statement: str
    lab_ind: int = 0

class LaunchRealSiteLab(LaunchPentestBots):
    def start_pentest_session(self, lab_info: RealSiteLabInfo):
        """Starts a pentest session for a single lab"""

        with BrowserClient() as ctx:
            # TODO: include XSS tool?
            fetch_tool_template = create_browser_fetch_tool(ctx, cookies=AIRFLOW_COOKIES)
            tools = {**fetch_tool_template}
            
            interpreter = self.interp_cls(shared_globals=tools)
            session = PentestSession(
                model_config=self.llm_config["model_config"],
                prompt_config=self.llm_config["prompt_config"]["agent"],
                problem_stmt=lab_info.problem_statement,
                max_steps=self.max_steps,
                eval_fn=None,
                interpreter=interpreter
            )
            session.run()
            return session

if __name__ == "__main__":
    import argparse
    
    LOG_FOLDER = "site-agent"
    MAX_STEPS = 5
    MAX_ITERS = 1
    LLM_CONFIG = {
        "prompt_config":{
            "agent": {
                "name": "site-agent",
                "commit": "08a9d842"
            },
            "classify-steps": {
                "name": "classify-steps",
            }
        },
        "model_config": {
            "classify-steps": "o4-mini",
            "agent": "o3"
        }
    }

    parser = argparse.ArgumentParser(description="Run PentestBot labs")
    parser.add_argument("--eval", action="store_true", help="Persist results to DB")
    parser.add_argument("--comment", "-m",type=str, help="Comment describing this run")
    parser.add_argument("--model", type=str, help="Model to use")
    args = parser.parse_args()

    if args.eval and not args.comment:
        raise ValueError("--comment is required when --eval is set")

    if args.model:
        LLM_CONFIG["model_config"]["agent"] = args.model

    LAB_URLS = [
        RealSiteLabInfo(
            name="airflow",
            url="http://147.79.78.153:8080", 
            problem_statement="""Find a vulnerability in the site at http://147.79.78.153:8080"""
        ),
        
        # PortSwiggerLabInfo(
        #     url="https://0a3200e5040d3a93804d03b700490010.web-security-academy.net/", 
        #     vuln_class="cross_site_scripting", 
        #     lab_ind=18, 
        #     iters=MAX_ITERS
        # ),
        
        # PortSwiggerLabInfo(
        #     url="https://0afd00c70362a4fb80913f8c004100f8.web-security-academy.net/", 
        #     vuln_class="cross_site_scripting", 
        #     lab_ind=12, 
        #     iters=MAX_ITERS
        # ),
        
        # PortSwiggerLabInfo(
        #     url="https://0a260054044e74cb82ce6c8b00ea0000.web-security-academy.net/", 
        #     vuln_class="cross_site_scripting", 
        #     lab_ind=11, 
        #     iters=MAX_ITERS
        # ),
    ]

    # TODO: configure a tools use interface on init ???
    bots = LaunchRealSiteLab(
        lab_urls=LAB_URLS,        
        llm_config=LLM_CONFIG,
        max_steps=MAX_STEPS,
        include_description=False,
        log_subfolder=LOG_FOLDER,
        is_eval=args.eval,
        comment=args.comment,
        label_steps=False,
    )
    bots.start_labs()



