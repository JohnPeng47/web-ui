import logging
from datetime import datetime
from pathlib import Path
import textwrap
from typing import Optional
from pathlib import Path
import threading

from logger import LOG_DIR, get_console_handler, get_file_handler

LOG_PATH = Path(LOG_DIR)
INDENT_LEN = 100
INDENT_STR = ""
_run_lock = threading.Lock()           # <── thread-safety

class IndentFormatter(logging.Formatter):
    def __init__(self, fmt: str, datefmt: Optional[str] = None) -> None:
        super().__init__(fmt, datefmt)

    def format(self, record: logging.LogRecord) -> str:
        wrapped = []
        for para in record.getMessage().splitlines() or [""]:
            wrapped.extend(
                textwrap.wrap(
                    para,
                    width=INDENT_LEN,
                    subsequent_indent=INDENT_STR,
                    break_long_words=False,
                    replace_whitespace=False,
                )
            )
        record.wrapped_msg = "\n".join(wrapped)
        return super().format(record)

# --------------------------------------------------------------------------- #
#  public API
# --------------------------------------------------------------------------- #
class _ThreadFilter(logging.Filter):
    """Accept records only from the thread that created this handler."""
    def __init__(self, thread_id: int):
        super().__init__()
        self._thread_id = thread_id

    def filter(self, record: logging.LogRecord) -> bool:          # noqa: D401
        return record.thread == self._thread_id                   # ❶ key line

def setup_agent_logger(
    eval_name: str,
    *,
    subfolder: str = "",
    name: str = "agentlog",
    level: int = logging.INFO,
) -> None:
    logger = logging.getLogger(name)
    logger.setLevel(level)

    # ───────────────── Stream handler (once) ─────────────────
    if not any(isinstance(h, logging.StreamHandler) for h in logger.handlers):
        logger.addHandler(get_console_handler())

    # ───────────────── Run-directory (once per process) ───────
    if not hasattr(logger, "_run_dir"):
        with _run_lock:
            if not hasattr(logger, "_run_dir"):
                base_dir = LOG_PATH / "pentest_bot"
                full_dir = (
                    base_dir / subfolder
                    if subfolder
                    else base_dir / datetime.now().strftime("%Y-%m-%d")
                )
                full_dir.mkdir(parents=True, exist_ok=True)
                run_id = max(
                    (int(p.name) for p in full_dir.iterdir()
                     if p.is_dir() and p.name.isdigit()),
                    default=-1,
                ) + 1
                run_dir = full_dir / str(run_id)
                run_dir.mkdir()
                logger._run_dir = run_dir                       # type: ignore[attr-defined]

    run_dir: Path = logger._run_dir                             # type: ignore[attr-defined]
    thread_id = threading.get_ident()

    # ───────────────── One handler per **thread** ─────────────
    # Re-use handler if this thread has already set one up.
    if not any(
        isinstance(h, logging.FileHandler) and getattr(h, "_thread_id", None) == thread_id
        for h in logger.handlers
    ):
        log_file = run_dir / f"{eval_name}.log"
        fh = get_file_handler(log_file)
        fh._thread_id = thread_id                                # type: ignore[attr-defined]
        fh.addFilter(_ThreadFilter(thread_id))                   # ❷ install the filter
        fh.setFormatter(
            IndentFormatter(
                "%(asctime)s - %(name)s:%(levelname)s: "
                "%(filename)s:%(lineno)d - %(wrapped_msg)s",
                datefmt="%Y-%m-%d %H:%M:%S",
            )
        )
        logger.addHandler(fh)
