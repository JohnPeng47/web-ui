import requests
import time
from uuid import UUID

base_url = "http://localhost:8000"  # Adjust this to your actual server URL

# Create an engagement to register the agent under
engagement_payload = {
    "name": "Agent Test Engagement",
    "base_url": "http://147.79.78.153:3000/#/login",
    "description": "Engagement for agent registration test",
    "scopes_data": ["http://147.79.78.153:3000/#/login"]
}
create_resp = requests.post(f"{base_url}/engagement/", json=engagement_payload)
assert create_resp.status_code == 200
engagement = create_resp.json()
engagement_id = engagement["id"]

# 1. Register a discovery agent
agent_payload = {
    "max_steps": 5,
    "model_name": "gpt-4o-mini",
    "model_costs": 0.01,
    "log_filepath": "/tmp/agent.log",
}
register_resp = requests.post(
    f"{base_url}/engagement/{engagement_id}/agents/discovery/register",
    json=agent_payload,
)
assert register_resp.status_code == 200
agent = register_resp.json()

agent_id = agent["id"]

# 5. Get exploit agent
retries = 100
while retries > 0:
    get_agents_resp = requests.get(f"{base_url}/engagement/{engagement_id}/agents")
    assert get_agents_resp.status_code == 200
    agents_list = get_agents_resp.json()

    print("Agents list: ", agents_list)
    
    exploit_agent_id = None
    for agent_info in agents_list:
        if agent_info["agent_type"] == "exploit":
            exploit_agent_id = agent_info["id"]
            print("Exploit agent found!: ", exploit_agent_id)
            retries = 0
            break

    retries -= 1
    time.sleep(2)

retries = 20
while retries > 0:
    # Get agent steps
    get_agent_steps_resp = requests.get(f"{base_url}/agents/{exploit_agent_id}/steps")
    assert get_agent_steps_resp.status_code == 200
    steps = get_agent_steps_resp.json()
    print("Num steps: ", len(steps))

    for step in steps:
        print("Step: ", step)

    retries -= 1
    time.sleep(2)